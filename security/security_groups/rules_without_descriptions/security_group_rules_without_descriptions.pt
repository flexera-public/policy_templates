name "Security Group Rules without Descriptions"
rs_pt_ver 20180301
type "policy"
short_description "A policy that sends email notifications when a security group has no description"
long_description "Version 1.2"
severity "high"
category "Security"

parameter "param_escalate_to" do
  type "list"
  label "Email address to send escalation emails to"
end

auth "auth_rs", type: "rightscale"

# Filter to clouds that support security groups
resources "clouds", type: "rs_cm.clouds" do
  filter do
    cloud_type ne: ["soft_layer", "cloud_stack","azure","rackspace_next_gen","vscale","blue_skies","open_stack_v2","uca","open_stack_v3"]
  end
end

resources "security_groups", type: "rs_cm.security_groups" do
  iterate @clouds
  cloud_href href(iter_item)
end

resources "security_group_rules", type: "rs_cm.security_group_rules" do
  iterate @security_groups
  security_group_href href(iter_item)
end

resources "networks", type: "rs_cm.networks"

datasource "ds_security_groups" do
  iterate @security_groups
  field "resource_uid", val(iter_item,  "resource_uid")
  field "name", val(iter_item, "name")
  field "href", href(iter_item)
  field "network_href", jmes_path(iter_item, "links[?rel=='network'].href | [0]")
end

datasource "ds_networks" do
  iterate @networks
  field "name", val(iter_item, "name")
  field "href", href(iter_item)
end

datasource "ds_security_group_rules" do
  iterate @security_group_rules
  field "href", href(iter_item)
  field "protocol", from(iter_item)
  field "source_type", from(iter_item)
  field "description", from(iter_item)
  field "security_group_href", jmes_path(iter_item, "links[?rel=='security_group'].href | [0]")
end

datasource "ds_munged_security_groups" do
  run_script $js_munge_sec_group, $ds_security_groups, $ds_security_group_rules, $ds_networks, rs_project_id, rs_cm_host
end

script "js_munge_sec_group", type: "javascript" do
  parameters "ds_security_groups", "ds_security_group_rules", "ds_networks", "rs_project_id", "rs_cm_host"
  result "groups_and_rules"
code <<-EOS
var security_groups = {};

for (var index = 0; index < ds_security_groups.length; index++) {
  var security_group = ds_security_groups[index];
  security_groups[security_group.href] = security_group;
}

var networks = {};

for (var index = 0; index < ds_networks.length; index++) {
  var network = ds_networks[index];
  networks[network.href] = network;
}

var groups_and_rules=[];
var base_url="https://" + rs_cm_host + "/acct/"

for (var index = 0; index < ds_security_group_rules.length; index++) {
  var security_group_rule = ds_security_group_rules[index];
  var security_group = security_groups[security_group_rule.security_group_href];
  var network = networks[security_group.network_href];
  if (network) {
    var security_group_access_link_root = base_url.concat(rs_project_id, '/network_manager#networks/', network.href.split('/')[3], '/security_groups/', security_group.href.split('/')[5]);
  } else {
    network = {};
  }

  groups_and_rules.push({
    security_group_name: security_group.name,
    security_group_href: security_group.href,
    href: security_group_rule.href,
    protocol: security_group_rule.protocol,
    source_type: security_group_rule.source_type,
    description: security_group_rule.description,
    network_href: network.href,
    network_name: network.name,
    security_group_access_link_root: security_group_access_link_root
  });
}
EOS
end

escalation "alert" do
  email $param_escalate_to
end

resolution "resolution" do
  email $param_escalate_to
end

policy "rule_without_description" do
  validate_each $ds_munged_security_groups do
    summary_template "Security Group Rules without Descriptions"
    detail_template <<-EOS
# Security Rules without Descriptions

| Security Group Name | Security Group Href | Href | Protocol | Source Type | Network Href | Network Name | Security Group Link |
| ------------------- | ------------------- | ---- | -------- | ----------- | ------------ | ------------ | ------------------- |
{{ range data -}}
| {{ .security_group_name }} | {{ .security_group_href }} | {{.href}} | {{.protocol}} | {{.source_type}} | {{.network_href}} | {{.network_name}} | {{.security_group_access_link_root}} |
{{ end -}}
EOS

    escalate $alert
    check val(item, "description")
    resolve $resolution
  end
end

name "Open Ports"
rs_pt_ver 20180301
type "policy"
short_description "A policy that sends email notifications when a security group has unapproved open ports"
long_description "Version 1.0"
severity "high"
category "Security"

parameter "escalate_to" do
  type "string"
  label "Email address to send escalation emails to"
  min_length 1
  allowed_pattern /^.+\@.+\..+$/
  constraint_description <<-EOS
  Please enter a valid email user@example.com
  EOS
end

parameter "param_port_info" do
  type "number"
  label "High Port"
  default 1024
end

auth "rs", type: "rightscale"

# Filter to clouds that support security groups
resources "clouds", type: "rs_cm.clouds" do
  filter do
    cloud_type ne: ["soft_layer", "cloud_stack","azure","rackspace_next_gen","vscale","blue_skies","open_stack_v2","uca","open_stack_v3"]
  end
end

resources "security_groups", type: "rs_cm.security_groups" do
  iterate @clouds
  cloud_href href(iter_item)
end

datasource "ds_security_groups" do
  iterate @security_groups
  field "resource_uid", val(iter_item,  "resource_uid")
  field "name", val(iter_item, "name")
  field "href", href(iter_item)
  field "links", val(iter_item, "links")
end

resources "networks", type: "rs_cm.networks"

datasource "ds_networks" do
  iterate @networks
  field "name", val(iter_item, "name")
  field "href", href(iter_item)
end

datasource "ds_security_group_rules" do
  iterate @security_groups
  request do
    auth $rs
    verb "GET"
    host rs_cm_host
    path join([href(iter_item),"/security_group_rules"])
    header "X-Api-Version", "1.5"
  end
end

datasource "ds_munged_security_groups" do
  run_script $munge_sec_group, $ds_security_groups, $ds_security_group_rules, $ds_networks, rs_project_id
end

script "munge_sec_group", type: "javascript" do
  parameters "ds_security_groups", "ds_security_group_rules", "ds_networks", "rs_project_id"
  result "groups_and_rules"
code <<-EOS
var groups_and_rules=[];
var base_url="https://my.rightscale.com/acct/"
for ( var i = 0; i < ds_security_group_rules.length; i++) {
  for ( var s = 0; s < ds_security_groups.length; s++) {
    for ( var h = 0; h < ds_security_group_rules[i]["links"].length; h++) {
      if ( ds_security_group_rules[i]["links"][h]["href"] == ds_security_groups[s]["href"] ){
        ds_security_group_rules[i]["security_group_name"] = ds_security_groups[s]["name"]
        ds_security_group_rules[i]["security_group_href"] = ds_security_groups[s]["href"]
        for ( var l=0; l < ds_security_groups[s]["links"].length; l++ ){
          if ( ds_security_groups[s]["links"][l]["rel"] == "network" ) {
            ds_security_group_rules[i]["network_href"] = ds_security_groups[s]["links"][l]["href"]
          }
        }
      } else if (ds_security_group_rules[i]["links"][h]["rel"] == "self") {
        ds_security_group_rules[i]["self_href"] = ds_security_group_rules[i]["links"][h]["href"]
      }
    }
    for ( var n = 0; n < ds_networks.length; n++ ){
      if ( ds_security_group_rules[i]["network_href"] == ds_networks[n]["href"] ){
        ds_security_group_rules[i]["network_name"] = ds_networks[n]["name"]
        var network_res=ds_networks[n]["href"].split('/')
        var sg_res=ds_security_group_rules[i]["security_group_href"].split('/')
        ds_security_group_rules[i]["server_access_link_root"] = base_url.concat(rs_project_id,'/network_manager#networks/',network_res[3],'/security_groups/',sg_res[3])
      }
    }
  }
  groups_and_rules.push(
    {
      security_group_name: ds_security_group_rules[i]["security_group_name"],
      security_group_href: ds_security_group_rules[i]["security_group_href"],
      href: ds_security_group_rules[i]["self_href"],
      protocol: ds_security_group_rules[i]["protocol"],
      source_type: ds_security_group_rules[i]["source_type"],
      description: ds_security_group_rules[i]["description"],
      end_port: ds_security_group_rules[i]["end_port"]
      network_href: ds_security_group_rules[i]["network_href"],
      network_name: ds_security_group_rules[i]["network_name"],
      server_access_link_root: ds_security_group_rules[i]["server_access_link_root"]
    }
  )
};

EOS
end

escalation "alert" do
  email $escalate_to
end

policy "rule_open_ports" do
  validate_each $ds_munged_security_groups do
    summary_template "Security Group Rules with high ports open"
    detail_template <<-EOS
# Security Rules with high ports open

| security_group_name | port |  protocol  | network_name | server_access_link_root |
| ------------------- | ---- | ---------- | ------------ | ----------------------- |  
{{ range data }}
| {{ .security_group_name }} | {{ .end_port }} |  {{.protocol}} | {{.network_name}} | {{.server_access_link_root}} |
{{ end }}

EOS

    escalate $alert
      check gt(to_n(val(item,"end_port")), $param_port_info) 
  end
end
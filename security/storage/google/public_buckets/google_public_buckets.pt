name "Google Open Buckets"
rs_pt_ver 20180301
type "policy"
short_description "Checks for buckets that are open to the public. See the [README](https://github.com/flexera/policy_templates/tree/master/security/storage/google/public_buckets) and [docs.rightscale.com/policies](https://docs.rightscale.com/policies/) to learn more."
long_description ""
severity "high"
category "Security"
info(
      version: "2.3",
      provider: "GCE",
      service: "Storage",
      policy_set: "Open Buckets"
    )

permission "perm_read_creds" do
  actions   "rs_cm.show_sensitive","rs_cm.index_sensitive"
  resources "rs_cm.credentials"
end

parameter "param_email" do
  type "list"
  label "Email addresses of the recipients you wish to notify"
end

###############################################################################
# Authentication
###############################################################################

# authenticate with Google
credentials "auth_google" do
  schemes "oauth2"
  label "Google"
  description "Select the Google Cloud Credential from the list."
  tags "provider=gce"
end

pagination "google_pagination" do
  get_page_marker do
    body_path "nextPageToken"
  end
  set_page_marker do
    query "pageToken"
  end
end

#get all google project
datasource "ds_google_project" do
  request do
    auth $auth_google
    pagination $google_pagination
    host "cloudresourcemanager.googleapis.com"
    path "/v1/projects/"
    query "filter", "lifecycleState=ACTIVE"
  end
  result do
    encoding "json"
    collect jmes_path(response, "projects[*]") do
      field "projectNumber", jmes_path(col_item,"projectNumber")
      field "projectId", jmes_path(col_item,"projectId")
    end
  end
end

datasource "ds_storage_buckets" do
  iterate $ds_google_project
  request do
    auth $auth_google
    host "www.googleapis.com"
    path "/storage/v1/b"
    query "projection", "full"
    query "project", val(iter_item,"projectId")
    ignore_status [403,404]
  end
  result do
    encoding "json"
    collect jmes_path(response, "items[*]") do
      field "name", jmes_path(col_item, "name")
      field "acl" do
        collect jmes_path(col_item, "acl") do
          field "entity", jmes_path(col_item, "entity")
          field "role", jmes_path(col_item, "role")
          field "projectId", val(iter_item,"projectId")
          field "id", jmes_path(col_item,"id")
        end
      end
    end
  end
end

datasource "ds_storage_buckets_filter" do
  run_script $js_google_storage_buckets_filter, $ds_storage_buckets
end

script "js_google_storage_buckets_filter", type: "javascript" do
  parameters "ds_storage_buckets"
  result "result"
  code <<-EOS
  var result=[];
  var array=[];
  for(var i=0;i<ds_storage_buckets.length;i++){
    array=ds_storage_buckets[i].acl;
    for(var j=0;j<array.length;j++){
      if(array[j].entity=="allUsers" || array[j].entity==="allUsers"){
        result.push({
          "name":ds_storage_buckets[i].name,
          "acl":array[j]
        });
      }
    }
  }
  result=_.sortBy(result, 'acl.projectId')
  result=_.sortBy(result, 'name')
  EOS
end

escalation "report_open_buckets" do
  automatic true
  label "Send Email"
  description "Send incident email"
  email $param_email
end

policy "public_buckets" do
  validate_each $ds_storage_buckets_filter do
    summary_template "{{ rs_project_name }} (Account ID: {{ rs_project_id }}): {{ len data }} Public Buckets Found in Google"
    escalate $report_open_buckets
    check logic_not(eq(jmes_path(item, "acl.entity"), "allUsers"))
    export do
      resource_level true
      field "projectId" do
        label "Project ID"
        path "acl.projectId"
      end
      field "name" do
        label "Name"
      end
      field "entity" do
        label "Entity"
        path "acl.entity"
      end
      field "role" do
        label "Role"
        path "acl.role"
      end
      field "id" do
        label "Bucket Id"
        path "acl.id"
      end
    end
  end
end

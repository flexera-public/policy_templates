name "AWS Open Buckets Policy"
rs_pt_ver 20180301
type "policy"
short_description "Checks for buckets that are open to everyone"
long_description "Version 1.1"
severity "high"
category "Security"

permission "perm_read_creds" do
  actions   "rs_cm.show_sensitive","rs_cm.index_sensitive"
  resources "rs_cm.credentials"
end

parameter "escalate_to" do
  type "string"
  label "Email address to send escalation emails to"
end

auth "s3_us_east_2", type: "aws" do
  version 4
  service 's3'
  region 'us-east-2'
  access_key cred('AWS_ACCESS_KEY_ID')
  secret_key cred('AWS_SECRET_ACCESS_KEY')
end

auth "s3_us_east_1", type: "aws" do
  version 4
  service 's3'
  region 'us-east-1'
  access_key cred('AWS_ACCESS_KEY_ID')
  secret_key cred('AWS_SECRET_ACCESS_KEY')
end

auth "s3_us_west_1", type: "aws" do
  version 4
  service 's3'
  region 'us-west-1'
  access_key cred('AWS_ACCESS_KEY_ID')
  secret_key cred('AWS_SECRET_ACCESS_KEY')
end

auth "s3_us_west_2", type: "aws" do
  version 4
  service 's3'
  region 'us-west-2'
  access_key cred('AWS_ACCESS_KEY_ID')
  secret_key cred('AWS_SECRET_ACCESS_KEY')
end

auth "s3_ca_central_1", type: "aws" do
  version 4
  service 's3'
  region 'ca-central-1'
  access_key cred('AWS_ACCESS_KEY_ID')
  secret_key cred('AWS_SECRET_ACCESS_KEY')
end

auth "s3_ap_south_1", type: "aws" do
  version 4
  service 's3'
  region 'ap-south-1'
  access_key cred('AWS_ACCESS_KEY_ID')
  secret_key cred('AWS_SECRET_ACCESS_KEY')
end

auth "s3_ap_northeast_2", type: "aws" do
  version 4
  service 's3'
  region 'ap-northeast-2'
  access_key cred('AWS_ACCESS_KEY_ID')
  secret_key cred('AWS_SECRET_ACCESS_KEY')
end

auth "s3_ap_northeast_3", type: "aws" do
  version 4
  service 's3'
  region 'ap-northeast-3'
  access_key cred('AWS_ACCESS_KEY_ID')
  secret_key cred('AWS_SECRET_ACCESS_KEY')
end

auth "s3_ap_southeast_1", type: "aws" do
  version 4
  service 's3'
  region 'ap-southeast-1'
  access_key cred('AWS_ACCESS_KEY_ID')
  secret_key cred('AWS_SECRET_ACCESS_KEY')
end

auth "s3_ap_southeast_2", type: "aws" do
  version 4
  service 's3'
  region 'ap-southeast-2'
  access_key cred('AWS_ACCESS_KEY_ID')
  secret_key cred('AWS_SECRET_ACCESS_KEY')
end

auth "s3_ap_northeast_1", type: "aws" do
  version 4
  service 's3'
  region 'ap-northeast-1'
  access_key cred('AWS_ACCESS_KEY_ID')
  secret_key cred('AWS_SECRET_ACCESS_KEY')
end

auth "s3_cn_north_1", type: "aws" do
  version 4
  service 's3'
  region 'cn-north-1'
  access_key cred('AWS_ACCESS_KEY_ID')
  secret_key cred('AWS_SECRET_ACCESS_KEY')
end

auth "s3_cn_northwest_1", type: "aws" do
  version 4
  service 's3'
  region 'cn-northwest-1'
  access_key cred('AWS_ACCESS_KEY_ID')
  secret_key cred('AWS_SECRET_ACCESS_KEY')
end

auth "s3_eu_central_1", type: "aws" do
  version 4
  service 's3'
  region 'eu-central-1'
  access_key cred('AWS_ACCESS_KEY_ID')
  secret_key cred('AWS_SECRET_ACCESS_KEY')
end

auth "s3_eu_west_1", type: "aws" do
  version 4
  service 's3'
  region 'eu-west-1'
  access_key cred('AWS_ACCESS_KEY_ID')
  secret_key cred('AWS_SECRET_ACCESS_KEY')
end

auth "s3_eu_west_2", type: "aws" do
  version 4
  service 's3'
  region 'eu-west-2'
  access_key cred('AWS_ACCESS_KEY_ID')
  secret_key cred('AWS_SECRET_ACCESS_KEY')
end

auth "s3_eu_west_3", type: "aws" do
  version 4
  service 's3'
  region 'eu-west-3'
  access_key cred('AWS_ACCESS_KEY_ID')
  secret_key cred('AWS_SECRET_ACCESS_KEY')
end

auth "s3_sa_east_1", type: "aws" do
  version 4
  service 's3'
  region 'sa-east-1'
  access_key cred('AWS_ACCESS_KEY_ID')
  secret_key cred('AWS_SECRET_ACCESS_KEY')
end

# Reference: https://docs.aws.amazon.com/AmazonS3/latest/API/RESTServiceGET.html
datasource "aws_buckets" do
  # This request is not paginated
  request do
    auth $s3_us_east_1
    host "s3.amazonaws.com"
    path "/"
    header "User-Agent", "RS Policies"
  end
  result do
    encoding "xml"
    collect xpath(response, "//ListAllMyBucketsResult/Buckets/Bucket", "array") do
      field "bucket_name", xpath(col_item,"Name")
      field "creation_date", xpath(col_item, "CreationDate")
    end
  end
end

datasource "aws_buckets_with_region" do
  iterate $aws_buckets
  request do
    auth $s3_us_east_1
    host "s3-external-1.amazonaws.com"
    path join(["/", val(iter_item, "bucket_name")])
    query "location", ""
    header "User-Agent", "RS Policies"
  end
  result do
    encoding "xml"
    field "bucket_name", val(iter_item, "bucket_name")
    field "creation_date", val(iter_item, "creation_date")
    field "region", xpath(response, "//LocationConstraint")
  end
end

datasource "aws_sanitized_buckets" do
  run_script $parse_buckets, $aws_buckets_with_region
end

script "parse_buckets", type: "javascript" do
  parameters "buckets"
  result "results"
  code <<-EOS
// This is the list of filtered buckets.
results = []
for ( i = 0; i < buckets.length; i++ ) {
  if ( !buckets[i]["region"] ){
    results.push(
    {
      "bucket_name": buckets[i]["bucket_name"],
      "creation_date": buckets[i]["creation_date"],
      "region": "us-east-1",
      "host": "s3-external-1.amazonaws.com",
      "auth": "s3_us_east_1"
    }
    )
  } else {
    results.push(
    {
      "bucket_name": buckets[i]["bucket_name"],
      "creation_date": buckets[i]["creation_date"],
      "region": buckets[i]["region"],
      "host": "s3-" + buckets[i]["region"] + ".amazonaws.com",
      "auth": "s3_" + buckets[i]["region"].replace(/-/g,"_")
    }
    )
  }
};
EOS
end

# Reference: https://docs.aws.amazon.com/AmazonS3/latest/API/RESTBucketGETacl.html
datasource "aws_bucket_acls" do
  iterate $aws_sanitized_buckets
  request do
    run_script $aws_bucket_acl_request, val(iter_item, "bucket_name"), val(iter_item, "host"), val(iter_item, "auth")
  end
  #request do
  #  auth $s3_us_east_1
  #  host val(iter_item,"host")
  #  path join(["/", val(iter_item, "bucket_name")])
  #  query "acl", ""
  #  header "User-Agent", "RS Policies"
  #end
  result do
    encoding "xml"
    collect xpath(response, "//AccessControlPolicy", "array") do
      field "bucket_name", val(iter_item, "bucket_name")
      field "creation_date", val(iter_item, "creation_date")
      field "region", val(iter_item, "region")
      field "grantee_uris", xpath(col_item, "AccessControlList/Grant/Grantee/URI","array")
      field "owner", xpath(col_item, "Owner/DisplayName")
      field "region", val(iter_item, "region")
    end
  end
end


script "aws_bucket_acl_request", type: "javascript" do
  parameters "bucket_name", "host", "auth"
  result "request"
  code <<-EOS
  request = {
    auth: auth,
    host: host,
    path: '/' + bucket_name + '/',
    query_params: {
      acl: ""
    },
    headers: {
      "User-Agent": "RS Policies"
    }
  }
  EOS
end

escalation "alert_aws" do
   email $escalate_to
end

policy "public_buckets" do
  validate_each $aws_bucket_acls do
    summary_template "Public Buckets Found in AWS"
    detail_template <<-EOS
# Public Buckets Found in AWS
| Bucket Name | CreationDate | GranteeURI | Owner | Region |
| ----------- | ------------ | ---------- | ----- | ------ |
{{ range data -}}
| {{.bucket_name}} | {{.creation_date}} | {{.grantee_uris}} | {{.owner}} | {{.region}} |
{{ end -}}
EOS
    escalate $alert_aws
    check logic_not(contains(val(item, "grantee_uris"), "http://acs.amazonaws.com/groups/global/AllUsers"))
  end
end

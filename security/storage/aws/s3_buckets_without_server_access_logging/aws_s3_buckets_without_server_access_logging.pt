name "AWS S3 Buckets without Server Access Logging"
rs_pt_ver 20180301
type "policy"
short_description "Checks for buckets that do not have server_access_logging enabled. See the [README](https://github.com/flexera/policy_templates/tree/master/security/storage/aws/s3_buckets_without_server_access_logging) and [docs.flexera.com/flexera/EN/Automation](https://docs.flexera.com/flexera/EN/Automation/AutomationGS.htm) to learn more."
long_description ""
severity "high"
category "Security"
info(
  version: "2.5",
  provider: "AWS",
  service: "S3",
  policy_set: ""
  )

###############################################################################
# Permissions
###############################################################################

permission "perm_read_creds" do
  actions   "rs_cm.show_sensitive","rs_cm.index_sensitive"
  resources "rs_cm.credentials"
end

###############################################################################
# Parameters
###############################################################################

parameter "param_email" do
  type "list"
  label "Email addresses of the recipients you wish to notify"
end

parameter "param_aws_account_number" do
  type "string"
  label "Account Number"
  description "The account number for AWS STS Cross Account Roles."
  default ""
end

parameter "param_target_bucket" do
  type "string"
  label "Target Bucket"
  description "An existing bucket in same region as source to be used for logging."
end

parameter "param_target_prefix" do
  type "string"
  label "Target Bucket Prefix"
  description "If using a Target Bucket, this element lets you specify a prefix for the keys that the log files will be stored under."
end

parameter "param_exclude_target_bucket" do
  type "string"
  label "Exclude Target Bucket"
  description "Exclude target bucket as additional fees may incur. "
  allowed_values "true","false"
end

parameter "param_automatic_action" do
  type "list"
  label "Automatic Actions"
  description "When this value is set, this policy will automatically take the selected action(s)"
  allowed_values ["Enable Bucket Logging"]
end

###############################################################################
# Authentication
###############################################################################

#authenticate with AWS
credentials "auth_aws" do
  schemes "aws","aws_sts"
  label "AWS"
  description "Select the AWS Credential from the list."
  tags "provider=aws"
  aws_account_number $param_aws_account_number
end

###############################################################################
# Datasources
###############################################################################

# Reference: https://docs.aws.amazon.com/AmazonS3/latest/API/RESTServiceGET.html
datasource "aws_buckets" do
  # This request is not paginated
  request do
    auth $auth_aws
    host "s3.amazonaws.com"
    path "/"
    header "User-Agent", "RS Policies"
  end
  result do
    encoding "xml"
    collect xpath(response, "//ListAllMyBucketsResult/Buckets/Bucket", "array") do
      field "bucket_name", xpath(col_item,"Name")
      field "creation_date", xpath(col_item, "CreationDate")
    end
  end
end

datasource "aws_buckets_with_region" do
  iterate $aws_buckets
  request do
    auth $auth_aws
    host "s3-external-1.amazonaws.com"
    path join(["/", val(iter_item, "bucket_name")])
    query "location", ""
    header "User-Agent", "RS Policies"
  end
  result do
    encoding "xml"
    field "bucket_name", val(iter_item, "bucket_name")
    field "creation_date", val(iter_item, "creation_date")
    field "region", xpath(response, "//LocationConstraint")
  end
end

datasource "aws_sanitized_buckets" do
  run_script $parse_buckets, $aws_buckets_with_region
end

script "parse_buckets", type: "javascript" do
  parameters "buckets"
  result "results"
  code <<-EOS
// This is the list of filtered buckets.
results = []
for ( i = 0; i < buckets.length; i++ ) {
  if ( !buckets[i]["region"] ){
    results.push(
    {
      "bucket_name": buckets[i]["bucket_name"],
      "creation_date": buckets[i]["creation_date"],
      "region": "us-east-1",
      "host": "s3-external-1.amazonaws.com",
      "auth": "auth_aws"
    }
    )
  } else {
    if ( buckets[i]["region"] == "EU" ) { buckets[i]["region"] = "eu-west-1" }
    results.push(
    {
      "bucket_name": buckets[i]["bucket_name"],
      "creation_date": buckets[i]["creation_date"],
      "region": buckets[i]["region"],
      "host": "s3-" + buckets[i]["region"] + ".amazonaws.com",
      "auth": "auth_aws"
    }
    )
  }
};
EOS
end

# Reference: https://docs.aws.amazon.com/AmazonS3/latest/API/RESTBucketGETacl.html
datasource "aws_bucket_logging" do
  iterate $aws_sanitized_buckets
  request do
    run_script $aws_bucket_logging_request, val(iter_item, "bucket_name"), val(iter_item, "host")
  end
  result do
    encoding "xml"
    field "bucket_name", val(iter_item, "bucket_name")
    field "creation_date", val(iter_item,"creation_date")
    field "region", val(iter_item,"region")
    field "target_bucket", xpath(response,"//TargetBucket")
    field "host",val(iter_item, "host")
  end
end

###############################################################################
# Scripts
###############################################################################

script "aws_bucket_logging_request", type: "javascript" do
  parameters "bucket_name", "host"
  result "request"
  code <<-EOS
  request = {
    auth: "auth_aws",
    host: host,
    path: '/' + bucket_name + '/',
    query_params: {
      logging: ""
    },
    headers: {
      "User-Agent": "RS Policies"
    }
  }
  EOS
end

###############################################################################
# Policy
###############################################################################

policy "public_buckets" do
  validate_each $aws_bucket_logging do
    summary_template "{{ rs_project_name }} (Account ID: {{ rs_project_id }}): {{ len data }} Public Buckets Found in AWS"
    escalate $email
    escalate $report_open_buckets
    check logic_or(logic_not(eq(val(item, "target_bucket"), "")),logic_and(eq($param_exclude_target_bucket,"true"),eq(val(item,"bucket_name"),$param_target_bucket)))
    export do
      resource_level true
      field "region" do
        label "Region"
      end
      field "id" do
        label "Bucket Name"
        path "bucket_name"
      end
      field "creation_date" do
        label "Creation Date"
      end
      field "host" do
        label "Host"
      end
    end
  end
end

###############################################################################
# Escalations
###############################################################################

escalation "email" do
  automatic true
  label "Send Email"
  description "Send incident email"
  email $param_email
end

escalation "report_open_buckets" do
  automatic contains($param_automatic_action, "Enable Bucket Logging")
  label "Update Bucket"
  description "Bucket logging will be enabled for selected buckets"
  run "enable_logging", data, $param_target_bucket, $param_target_prefix
end

###############################################################################
# Cloud Workflow
###############################################################################

define enable_logging($data, $param_target_bucket, $param_target_prefix) return $all_responses do
  $$debug = "false"
  $all_responses = []

  foreach $item in $data do
    if $param_target_prefix == ""
      $target_prefix = $item["id"] + "-logging"
    else
      $target_prefix = $param_target_prefix
    end

      $response = http_request(
        verb: "put",
        host: $item["id"]+"."+$item["host"],
        https: true,
        auth: $$auth_aws,
        href: "/",
        headers: {
          "content-type": "application/xml"
        },
        query_strings: { "logging": ""},
        body: "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<BucketLoggingStatus xmlns=\"http://doc.s3.amazonaws.com/2006-03-01\"><LoggingEnabled><TargetBucket>"+$param_target_bucket+"</TargetBucket><TargetPrefix>"+$target_prefix+"</TargetPrefix></LoggingEnabled></BucketLoggingStatus>"
      )
      $all_responses << $response
      call sys_log('all_responses', to_s($all_responses))

  end
end

define sys_log($subject, $detail) do
  if $$debug
    rs_cm.audit_entries.create(
      notify: "None",
      audit_entry: {
        auditee_href: @@account,
        summary: "AWS S3 Buckets without Server Access Logging Policy "+ $subject,
        detail: $detail
      }
    )
  end
end

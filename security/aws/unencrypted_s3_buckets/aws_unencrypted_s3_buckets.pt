name "AWS Unencrypted S3 Buckets"
rs_pt_ver 20180301
type "policy"
short_description "Report any S3 buckets in AWS that are unencrypted and provide the option to set the default encryption after approval. See the [README](https://github.com/flexera-public/policy_templates/tree/master/security/aws/unencrypted_s3_buckets) and [docs.flexera.com/flexera/EN/Automation](https://docs.flexera.com/flexera/EN/Automation/AutomationGS.htm) to learn more."
long_description ""
category "Security"
severity "low"
default_frequency "daily"
info(
  version: "3.0.0",
  provider: "AWS",
  service: "S3",
  policy_set: "CIS",
  cce_id: "", # not applicable
  cis_aws_foundations_securityhub: "", # not applicable
  benchmark_control: "2.1.1",
  benchmark_version: "1.4.0",
  cis_controls: "[\"3.11v8\", \"14.8v7\"]",
  nist: "" # not applicable
)

###############################################################################
# Parameters
###############################################################################

parameter "param_email" do
  type "list"
  category "Policy Settings"
  label "Email Addresses"
  description "Email addresses of the recipients you wish to notify when new incidents are created"
  default []
end

parameter "param_aws_account_number" do
  type "string"
  category "Policy Settings"
  label "Account Number"
  description "Leave blank; this is for automated use with Meta Policies. See README for more details."
  default ""
end

parameter "param_exclude_tags" do
  type "list"
  label "Tags to ignore"
  description "List of tags that will exclude resources from being evaluated by this policy. Multiple tags are evaluated as an 'OR' condition. Tag keys or key/value pairs can be listed. Example: 'test,env=dev'"
end

parameter "param_automatic_action" do
  type "list"
  label "Automatic Actions"
  description "When this value is set, this policy will automatically take the selected action(s)"
  allowed_values ["Encrypt Buckets"]
  default []
end

###############################################################################
# Authentication
###############################################################################

credentials "auth_aws" do
  schemes "aws", "aws_sts"
  label "AWS"
  description "Select the AWS Credential from the list"
  tags "provider=aws"
  aws_account_number $param_aws_account_number
end

credentials "auth_flexera" do
  schemes "oauth2"
  label "Flexera"
  description "Select Flexera One OAuth2 credentials"
  tags "provider=flexera"
end

###############################################################################
# Datasources & Scripts
###############################################################################

# Get applied policy metadata for use later
datasource "ds_applied_policy" do
  request do
    auth $auth_flexera
    host rs_governance_host
    path join(["/api/governance/projects/", rs_project_id, "/applied_policies/", policy_id])
    header "Api-Version", "1.0"
  end
end

# Get region-specific Flexera API endpoints
datasource "ds_flexera_api_hosts" do
  run_script $js_flexera_api_hosts, rs_optima_host
end

script "js_flexera_api_hosts", type: "javascript" do
  parameters "rs_optima_host"
  result "result"
  code <<-EOS
  host_table = {
    "api.optima.flexeraeng.com": {
      flexera: "api.flexera.com",
      fsm: "api.fsm.flexeraeng.com"
    },
    "api.optima-eu.flexeraeng.com": {
      flexera: "api.flexera.eu",
      fsm: "api.fsm-eu.flexeraeng.com"
    },
    "api.optima-apac.flexeraeng.com": {
      flexera: "api.flexera.au",
      fsm: "api.fsm-apac.flexeraeng.com"
    }
  }

  result = host_table[rs_optima_host]
EOS
end

# Get AWS account info
datasource "ds_cloud_vendor_accounts" do
  request do
    auth $auth_flexera
    host val($ds_flexera_api_hosts, 'flexera')
    path join(["/finops-analytics/v1/orgs/", rs_org_id, "/cloud-vendor-accounts"])
    header "Api-Version", "1.0"
  end
  result do
    encoding "json"
    collect jmes_path(response, "values[*]") do
      field "id", jmes_path(col_item, "aws.accountId")
      field "name", jmes_path(col_item, "name")
      field "tags", jmes_path(col_item, "tags")
    end
  end
end

datasource "ds_get_caller_identity" do
  request do
    auth $auth_aws
    verb "GET"
    host "sts.amazonaws.com"
    path "/"
    query "Action", "GetCallerIdentity"
    query "Version", "2011-06-15"
    header "User-Agent", "RS Policies"
  end
  result do
    encoding "xml"
    collect xpath(response, "//GetCallerIdentityResponse/GetCallerIdentityResult") do
      field "account", xpath(col_item, "Account")
    end
  end
end

datasource "ds_aws_account" do
  run_script $js_aws_account, $ds_cloud_vendor_accounts, $ds_get_caller_identity
end

script "js_aws_account", type:"javascript" do
  parameters "ds_cloud_vendor_accounts", "ds_get_caller_identity"
  result "result"
  code <<-EOS
  result = _.find(ds_cloud_vendor_accounts, function(account) {
    return account['id'] == ds_get_caller_identity[0]['account']
  })

  // This is in case the API does not return the relevant account info
  if (result == undefined) {
    result = {
      id: ds_get_caller_identity[0]['account'],
      name: "",
      tags: {}
    }
  }
EOS
end

#https://docs.aws.amazon.com/AmazonS3/latest/API/RESTServiceGET.html
datasource "ds_aws_buckets" do
  request do
    auth $auth_aws
    host "s3.amazonaws.com"
    path "/"
  end
  result do
    encoding "xml"
    collect xpath(response, "//ListAllMyBucketsResult/Buckets/Bucket", "array") do
      field "bucket_name", xpath(col_item,"Name")
      field "creation_date", xpath(col_item, "CreationDate")
    end
  end
end

#https://docs.aws.amazon.com/AmazonS3/latest/API/RESTBucketGETlocation.html
datasource "ds_aws_buckets_with_region" do
  iterate $ds_aws_buckets
  request do
    auth $auth_aws
    host "s3.amazonaws.com"
    path join(["/", val(iter_item, "bucket_name")])
    query "location", ""
  end
  result do
    encoding "xml"
    field "bucket_name", val(iter_item, "bucket_name")
    field "creation_date", val(iter_item, "creation_date")
    field "region", xpath(response, "//LocationConstraint")
  end
end

datasource "ds_aws_sanitized_buckets" do
  run_script $js_parse_buckets, $ds_aws_buckets_with_region
end

script "js_parse_buckets", type: "javascript" do
  parameters "buckets"
  result "results"
  code <<-EOS
    results = []
    for ( i = 0; i < buckets.length; i++ ) {
      if ( !buckets[i]["region"] ){
        results.push({
          "bucket_name": buckets[i]["bucket_name"],
          "creation_date": buckets[i]["creation_date"],
          "region": "us-east-1",
          "host": "s3.amazonaws.com",
          "tagKeyValue": ""
        })
      }else{
        if(buckets[i]["region"] == "EU" ) { buckets[i]["region"] = "eu-west-1" }
        results.push({
          "bucket_name": buckets[i]["bucket_name"],
          "creation_date": buckets[i]["creation_date"],
          "region": buckets[i]["region"],
          "host": "s3-" + buckets[i]["region"] + ".amazonaws.com",
          "tagKeyValue": ""
        })
      }
    }
  EOS
end

#https://docs.aws.amazon.com/AmazonS3/latest/API/RESTBucketGETtagging.html
datasource "ds_aws_bucket_tags_list" do
  iterate $ds_aws_sanitized_buckets
  request do
    auth $auth_aws
    host val(iter_item, "host")
    path join(["/", val(iter_item, "bucket_name"),"/"])
    ignore_status [404]
    query "tagging", ""
  end
  result do
    encoding "xml"
    collect xpath(response, "//Tagging/TagSet", "array") do
      field "tags" do
        collect xpath(col_item, "Tag") do
          field "tagKey", xpath(col_item, "Key")
          field "tagValue", xpath(col_item, "Value")
        end
      end
      field "bucket_name", val(iter_item, "bucket_name")
      field "creation_date", val(iter_item, "creation_date")
      field "region", val(iter_item, "region")
      field "host", val(iter_item, "host")
    end
  end
end

#https://docs.aws.amazon.com/AmazonS3/latest/API/RESTBucketGETencryption.html
datasource "ds_aws_bucket_encrypted" do
  iterate $ds_aws_sanitized_buckets
  request do
    auth $auth_aws
    host val(iter_item, "host")
    path join(["/", val(iter_item, "bucket_name"),"/"])
    ignore_status [404]
    query "encryption", ""
  end
  result do
    encoding "xml"
    collect xpath(response, "//ServerSideEncryptionConfiguration/Rule/ApplyServerSideEncryptionByDefault", "array") do
      field "bucket_name", val(iter_item, "bucket_name")
      field "creation_date", val(iter_item, "creation_date")
      field "region", val(iter_item, "region")
      field "server_side_encryption", xpath(col_item, "SSEAlgorithm")
    end
  end
end

datasource "ds_aws_bucket_unencrypted" do
  run_script $js_aws_bucket_unencrypted, $ds_aws_sanitized_buckets, $ds_aws_bucket_encrypted, $ds_aws_bucket_tags_list, $param_exclude_tags
end

#Process the response data, check for the tags and generate a list of unencrypted S3 buckets
script "js_aws_bucket_unencrypted", type: "javascript" do
  parameters "ds_aws_sanitized_buckets", "ds_aws_bucket_encrypted", "ds_aws_bucket_tags_list", "param_exclude_tags"
  result "results"
  code <<-EOS
    results = []
    var param_exclude_tags_lower=[];
    for(var i=0; i < param_exclude_tags.length; i++){
      param_exclude_tags_lower[i]=param_exclude_tags[i].toString().toLowerCase();
    }
    for (var j=0; j<ds_aws_sanitized_buckets.length; j++) {
      s3_bucket=ds_aws_sanitized_buckets[j]
      is_encrypted=false;
      _.each(ds_aws_bucket_encrypted, function(eb){
        if(eb.bucket_name === s3_bucket.bucket_name && eb.creation_date === s3_bucket.creation_date){
          is_encrypted=true;
        }
      })
      if(!is_encrypted){
        bucket_with_tag=false;
        _.each(ds_aws_bucket_tags_list, function(tb){
          if(tb.bucket_name === s3_bucket.bucket_name && tb.creation_date === s3_bucket.creation_date){
            var tags = tb['tags']
            var isTagMatched=false
            for(var k=0; k < tags.length; k++){
              tag = tags[k]
              //Check, if the tag present in entered param_exclude_tags, ignore the S3 unencrypted buckets if the tag matches/present.
              if((param_exclude_tags_lower.indexOf((tag['tagKey']).toLowerCase()) !== -1) || (param_exclude_tags_lower.indexOf((tag['tagKey']+'='+tag['tagValue']).toLowerCase()) !== -1)){
                isTagMatched = true;
              }
            }
            // Constructing Tags of individual S3 unencrypted buckets into key=value format and comma separated to display in detail_template
            var tagKeyValue=""
            if(!isTagMatched){
              if((tag['tagValue']).length > 0){
                tagKeyValue = tagKeyValue + ', '+ tag['tagKey']+'='+tag['tagValue']
              }else{
                tagKeyValue = tagKeyValue + ', '+ tag['tagKey']
              }
              results.push({
                "bucket_name": tb["bucket_name"],
                "creation_date": tb["creation_date"],
                "region": tb["region"],
                "host": tb["host"],
                "tagKeyValue":(tagKeyValue.slice(2))
              });
            }
            bucket_with_tag=true;
          }
        })
        if(!bucket_with_tag) {
          results.push(s3_bucket)
        }
      }
    }
  results = _.sortBy(results,'bucket_name')
  results = _.sortBy(results,'creation_date')
  EOS
end

###############################################################################
# Policy
###############################################################################

policy "pol_s3_unencrypted_list" do
  validate $ds_aws_bucket_unencrypted do
    summary_template "{{ with index data 0 }}{{ .policy_name }}{{ end }}: {{ len data }} List of Unencrypted S3 Buckets Found in AWS"
    check eq(size(data), 0)
    escalate $esc_email
    escalate $esc_modify
    #Uncomment below line (remove '#') to enable Delete action.
    #escalate $esc_delete
    export do
      resource_level true
      field "id" do
        path "bucket_name"
        label "Bucket Name"
      end
      field "creation_date" do
        label "Creation Date"
      end
      field "region" do
        label "Region"
      end
      field "tagKeyValue" do
        label "Tags"
      end
      field "host" do
        label "Host"
      end
    end
  end
end

###############################################################################
# Escalation
###############################################################################

escalation "esc_email" do
  automatic true
  label "Send Email"
  description "Send incident email"
  email $param_email
end

escalation "esc_modify" do
  automatic contains($param_automatic_action, "Encrypt Buckets")
  label "Update S3 Encryption"
  description "Default encryption will be enabled(AES-256) for selected S3 Buckets."
  run "enable_encryption_s3_buckets", data, rs_optima_host
end

escalation "esc_delete" do
  automatic false
  label "Delete S3 Bucket"
  description "Delete selected S3 Buckets"
  run "delete_unencrypted_s3_buckets", data, rs_optima_host
end

###############################################################################
# Cloud Workflow
###############################################################################

#https://docs.aws.amazon.com/AmazonS3/latest/API/RESTBucketPUTencryption.html
define enable_encryption_s3_buckets($data, $$rs_optima_host) return $all_responses do
  $$debug=true
  $body_string="<ServerSideEncryptionConfiguration xmlns='http://s3.amazonaws.com/doc/2006-03-01/'><Rule><ApplyServerSideEncryptionByDefault><SSEAlgorithm>AES256</SSEAlgorithm></ApplyServerSideEncryptionByDefault></Rule></ServerSideEncryptionConfiguration>"
  $all_responses = []
  foreach $item in $data do
    $response = http_request(
      auth: $$auth_aws,
      https: true,
      verb: "put",
      host: $item['host'],
      href: "/"+$item['id']+"/?encryption=true",
      headers: {"content-type": "application/json"},
      body:$body_string
    )
    $all_responses << $response
    call sys_log('AWS Unencrypted S3 Buckets config change to encryption',to_s($response))
  end
end

#https://docs.aws.amazon.com/AmazonS3/latest/API/RESTBucketDELETE.html
define delete_unencrypted_s3_buckets($data, $$rs_optima_host) return $all_responses do
  $$debug=true
  $all_responses = []
  foreach $item in $data do
    $response = http_request(
      auth: $$auth_aws,
      https: true,
      verb: "delete",
      href: "/"+"/"+$item['id'],
      host: $item['host']
    )
    $all_responses << $response
    call sys_log('Delete AWS Unencrypted S3 Buckets',to_s($response))
  end
end

define sys_log($subject, $detail) do
  # Create empty errors array if doesn't already exist
  if !$$errors
    $$errors = []
  end
  # Check if debug is enabled
  if $$debug
    # Append to global $$errors
    # This is the suggested way to capture errors
    $$errors << "Unexpected error for " + $subject + "\n  " + to_s($detail)
    # If Flexera NAM Zone, create audit_entries [to be deprecated]
    # This is the legacy method for capturing errors and only supported on Flexera NAM
    if $$rs_optima_host == "api.optima.flexeraeng.com"
      # skip_error_and_append is used to catch error if rs_cm.audit_entries.create fails unexpectedly
      $task_label = "Creating audit entry for " + $subject
      sub task_label: $task, on_error: skip_error_and_append($task) do
        rs_cm.audit_entries.create(
          notify: "None",
          audit_entry: {
            auditee_href: @@account,
            summary: $subject,
            detail: $detail
          }
        )
      end # End sub on_error
    end # End if rs_optima_host
  end # End if debug is enabled
end

define skip_error_and_append($subject) do
  $$errors << "Unexpected error for " + $subject + "\n  " + to_s($_error)
  $_error_behavior = "skip"
end

###############################################################################
# Meta Policy [alpha]
# Not intended to be modified or used by policy developers
###############################################################################

# If the meta_parent_policy_id is not set it will evaluate to an empty string and we will look for the policy itself,
# if it is set we will look for the parent policy.
datasource "ds_get_policy" do
  request do
    auth $auth_flexera
    host rs_governance_host
    ignore_status [404]
    path join(["/api/governance/projects/", rs_project_id, "/applied_policies/", switch(ne(meta_parent_policy_id, ""), meta_parent_policy_id, policy_id)])
    header "Api-Version", "1.0"
  end
  result do
    encoding "json"
    field "id", jmes_path(response, "id")
  end
end

datasource "ds_parent_policy_terminated" do
  run_script $js_decide_if_self_terminate, $ds_get_policy, policy_id, meta_parent_policy_id
end

# If the policy was applied by a meta_parent_policy we confirm it exists if it doesn't we confirm we are deleting
# This information is used in two places:
# - determining whether or not we make a delete call
# - determining if we should create an incident (we don't want to create an incident on the run where we terminate)
script "js_decide_if_self_terminate", type: "javascript" do
  parameters "found", "self_policy_id", "meta_parent_policy_id"
  result "result"
  code <<-EOS
  var result
  if (meta_parent_policy_id != "" && found.id == undefined) {
    result = true
  } else {
    result = false
  }
  EOS
end

# Two potentials ways to set this up:
# - this way and make a unneeded 'get' request when not deleting
# - make the delete request an interate and have it iterate over an empty array when not deleting and an array with one item when deleting
script "js_make_terminate_request", type: "javascript" do
  parameters "should_delete", "policy_id", "rs_project_id", "rs_governance_host"
  result "request"
  code <<-EOS

  var request = {
    auth:  'auth_flexera',
    host: rs_governance_host,
    path: "/api/governance/projects/" + rs_project_id + "/applied_policies/" + policy_id,
    headers: {
      "API-Version": "1.0",
      "Content-Type":"application/json"
    },
  }

  if (should_delete) {
    request.verb = 'DELETE'
  }
  EOS
end

datasource "ds_terminate_self" do
  request do
    run_script $js_make_terminate_request, $ds_parent_policy_terminated, policy_id, rs_project_id, rs_governance_host
  end
end

datasource "ds_is_deleted" do
  run_script $js_check_deleted, $ds_terminate_self
end

# This is just a way to have the check delete request connect to the farthest leaf from policy.
# We want the delete check to the first thing the policy does to avoid the policy erroring before it can decide whether or not it needs to self terminate
# Example a customer deletes a credential and then terminates the parent policy. We still want the children to self terminate
# The only way I could see this not happening is if the user who applied the parent_meta_policy was offboarded or lost policy access, the policies who are impersonating the user
# would not have access to self-terminate
# It may be useful for the backend to enable a mass terminate at some point for all meta_child_policies associated with an id.
script "js_check_deleted", type: "javascript" do
  parameters "response"
  result "result"
  code <<-EOS
  result = {"path":"/"}
  EOS
end

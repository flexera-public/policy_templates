name "AWS IAM Support Role Created"
rs_pt_ver 20180301
type "policy"
short_description "Report if no support roles exist in the AWS account. \n See the [README](https://github.com/flexera/policy_templates/tree/master/security/aws/iam_support_role_created) and [docs.flexera.com/flexera/EN/Automation](https://docs.flexera.com/flexera/EN/Automation/AutomationGS.htm) to learn more."
long_description ""
category "Security"
severity "low"
default_frequency "daily"
info(
  version: "2.2",
  provider: "AWS",
  service: "IAM",
  policy_set: "CIS",
  cce_id: "", # No relevant CCE
  cis_aws_foundations_securityhub: "1.20",
  benchmark_control: "1.17",
  benchmark_version: "1.4.0",
  cis_controls: "[\"17.1v8\", \"14v7\"]",
  nist: "IR-7"
)

###############################################################################
# Parameters
###############################################################################

parameter "param_email" do
  type "list"
  label "Email Address"
  description "Email addresses of the recipients you wish to notify"
end

parameter "param_aws_account_number" do
  type "string"
  label "Account Number"
  description "The account number for AWS STS Cross Account Roles."
end

###############################################################################
# Authentication
###############################################################################

credentials "auth_aws" do
  schemes "aws","aws_sts"
  label "AWS"
  description "Select the AWS Credential from the list"
  tags "provider=aws"
  aws_account_number $param_aws_account_number
end

###############################################################################
# Datasources
###############################################################################

# Retrieve the id number of the account being tested
datasource "ds_get_caller_identity" do
  request do
    auth $auth_aws
    verb "GET"
    host "sts.amazonaws.com"
    path "/"
    header "User-Agent", "RS Policies"
    query "Action", "GetCallerIdentity"
    query "Version", "2011-06-15"
  end
  result do
    encoding "xml"
    collect xpath(response, "//GetCallerIdentityResponse/GetCallerIdentityResult") do
      field "account",xpath(col_item, "Account")
    end
  end
end

datasource "ds_iam_listpolicies" do
  request do
    auth $auth_aws
    verb "GET"
    host "iam.amazonaws.com"
    path "/"
    query "Action", "ListPolicies"
    query "Version", "2010-05-08"
    query "OnlyAttached", "true"
    header "Accept", "application/json"
    header "User-Agent", "RS Policies"
  end
  result do
    encoding "json"
    collect jmes_path(response, "ListPoliciesResponse.ListPoliciesResult.Policies[*]") do
      field "policyName", jmes_path(col_item, "PolicyName")
      field "arn", jmes_path(col_item, "Arn")
    end
  end
end

datasource "ds_iam_supportpolicies" do
  run_script $js_find_support, $ds_iam_listpolicies
end

datasource "ds_iam_entities" do
  iterate $ds_iam_supportpolicies
  request do
    auth $auth_aws
    verb "GET"
    host "iam.amazonaws.com"
    path "/"
    query "Action", "ListEntitiesForPolicy"
    query "PolicyArn", val(iter_item, "arn")
    query "Version", "2010-05-08"
    header "Accept", "application/json"
    header "User-Agent", "RS Policies"
  end
  result do
    encoding "json"
    field "policyName", jmes_path(iter_item, "policyName")
    field "arn", jmes_path(iter_item, "arn")
    field "policyRoles", jmes_path(response, "ListEntitiesForPolicyResponse.ListEntitiesForPolicyResult.PolicyRoles")
  end
end

datasource "ds_iam_policies" do
  run_script $js_iam_policies, $ds_iam_entities, $ds_get_caller_identity
end

###############################################################################
# Scripts
###############################################################################

script "js_find_support", type:"javascript" do
  parameters "ds_iam_listpolicies"
  result "result"
  code <<-EOS
    var result = [];

    _.each(ds_iam_listpolicies, function(policy) {
      if (policy['policyName'] == 'AWSSupportAccess') {
        result.push(policy);
      }
    })
EOS
end

script "js_iam_policies", type:"javascript" do
  parameters "ds_iam_entities", "ds_get_caller_identity"
  result "result"
  code <<-EOS
  var support_role_found = 0

  _.each(ds_iam_entities, function(policy){
    if (policy['policyRoles'].length > 0) {
      support_role_found = 1
    }
  })

  result = {
    id: ds_get_caller_identity[0]['account'],
    support_role_found: support_role_found
  }
EOS
end

###############################################################################
# Policy
###############################################################################

policy "pol_support_role_created" do
  validate $ds_iam_policies do
    summary_template "{{ rs_project_name }} (Account ID: {{ rs_project_id }}): No Support Role Found"
    escalate $esc_support_role_created
    detail_template <<-EOS
No Support Role found! The AWSSupportAccess policy is not attached to any role.

Affected Account: {{data.id}}
EOS
    check eq(val(data, "support_role_found"),1)
    export do
      resource_level true
      field "id" do
        label "id"
      end
      field "support_role_found" do
        label "support_role_found"
      end
    end
  end
end

###############################################################################
# Escalations
###############################################################################

escalation "esc_support_role_created" do
  automatic true
  label "Send Email"
  description "Send incident email"
  email $param_email
end

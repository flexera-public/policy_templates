name "AWS IAM Password Policy Not Restricting Password Reuse"
rs_pt_ver 20180301
type "policy"
short_description "Report if password policy does not restrict reusing passwords or saves too few passwords for this purpose. See the [README](https://github.com/flexera-public/policy_templates/tree/master/security/aws/iam_prevent_password_reuse) and [docs.flexera.com/flexera/EN/Automation](https://docs.flexera.com/flexera/EN/Automation/AutomationGS.htm) to learn more."
long_description ""
category "Security"
severity "high"
default_frequency "daily"
info(
  version: "3.0.2",
  provider: "AWS",
  service: "IAM",
  policy_set: "CIS",
  cce_id: "CCE-78908-1",
  cis_aws_foundations_securityhub: "1.10",
  benchmark_control: "1.9",
  benchmark_version: "1.4.0",
  cis_controls: "[\"5.2v8\", \"4.4v7\"]",
  hide_skip_approvals: "true",
  nist: "IA-5(1)"
)

###############################################################################
# Parameters
###############################################################################

parameter "param_email" do
  type "list"
  category "Policy Settings"
  label "Email Addresses"
  description "Email addresses of the recipients you wish to notify."
  default []
end

parameter "param_aws_account_number" do
  type "string"
  category "Policy Settings"
  label "Account Number"
  description "Leave blank; this is for automated use with Meta Policies. See README for more details."
  default ""
end

parameter "param_password_min_stored" do
  type "number"
  category "Policy Settings"
  label "Minimum Stored Passwords"
  description "The minimum number of stored previously-used passwords to require. New passwords are checked against this list to prevent password reuse."
  min_value 1
  default 24
end

###############################################################################
# Authentication
###############################################################################

credentials "auth_aws" do
  schemes "aws", "aws_sts"
  label "AWS"
  description "Select the AWS Credential from the list"
  tags "provider=aws"
  aws_account_number $param_aws_account_number
end

credentials "auth_flexera" do
  schemes "oauth2"
  label "Flexera"
  description "Select Flexera One OAuth2 credentials"
  tags "provider=flexera"
end

###############################################################################
# Datasources & Scripts
###############################################################################

# Get applied policy metadata for use later
datasource "ds_applied_policy" do
  request do
    auth $auth_flexera
    host rs_governance_host
    path join(["/api/governance/projects/", rs_project_id, "/applied_policies/", policy_id])
    header "Api-Version", "1.0"
  end
end

# Get region-specific Flexera API endpoints
datasource "ds_flexera_api_hosts" do
  run_script $js_flexera_api_hosts, rs_optima_host
end

script "js_flexera_api_hosts", type: "javascript" do
  parameters "rs_optima_host"
  result "result"
  code <<-EOS
  host_table = {
    "api.optima.flexeraeng.com": {
      flexera: "api.flexera.com",
      fsm: "api.fsm.flexeraeng.com"
    },
    "api.optima-eu.flexeraeng.com": {
      flexera: "api.flexera.eu",
      fsm: "api.fsm-eu.flexeraeng.com"
    },
    "api.optima-apac.flexeraeng.com": {
      flexera: "api.flexera.au",
      fsm: "api.fsm-apac.flexeraeng.com"
    }
  }

  result = host_table[rs_optima_host]
EOS
end

# Get AWS account info
datasource "ds_cloud_vendor_accounts" do
  request do
    auth $auth_flexera
    host val($ds_flexera_api_hosts, 'flexera')
    path join(["/finops-analytics/v1/orgs/", rs_org_id, "/cloud-vendor-accounts"])
    header "Api-Version", "1.0"
  end
  result do
    encoding "json"
    collect jmes_path(response, "values[*]") do
      field "id", jmes_path(col_item, "aws.accountId")
      field "name", jmes_path(col_item, "name")
      field "tags", jmes_path(col_item, "tags")
    end
  end
end

datasource "ds_get_caller_identity" do
  request do
    auth $auth_aws
    host "sts.amazonaws.com"
    path "/"
    query "Action", "GetCallerIdentity"
    query "Version", "2011-06-15"
    header "User-Agent", "RS Policies"
  end
  result do
    encoding "xml"
    collect xpath(response, "//GetCallerIdentityResponse/GetCallerIdentityResult") do
      field "account", xpath(col_item, "Account")
    end
  end
end

datasource "ds_aws_account" do
  run_script $js_aws_account, $ds_cloud_vendor_accounts, $ds_get_caller_identity
end

script "js_aws_account", type:"javascript" do
  parameters "ds_cloud_vendor_accounts", "ds_get_caller_identity"
  result "result"
  code <<-EOS
  result = _.find(ds_cloud_vendor_accounts, function(account) {
    return account['id'] == ds_get_caller_identity[0]['account']
  })

  // This is in case the API does not return the relevant account info
  if (result == undefined) {
    result = {
      id: ds_get_caller_identity[0]['account'],
      name: "",
      tags: {}
    }
  }
EOS
end

# Retrieve the password policy
datasource "ds_iam_password_policy" do
  request do
    auth $auth_aws
    host "iam.amazonaws.com"
    path "/"
    query "Action", "GetAccountPasswordPolicy"
    query "Version", "2010-05-08"
    header "Accept", "application/json"
    header "User-Agent", "RS Policies"
    ignore_status 404 # 404 response is expected if no password policy is set.
  end
  result do
    encoding "json"
    field "passwordPolicy", jmes_path(response, "GetAccountPasswordPolicyResponse.GetAccountPasswordPolicyResult.PasswordPolicy")
  end
end

# Store account id and whether or not the password policy is sufficient
datasource "ds_iam_password_status" do
  run_script $js_iam_password_status, $ds_iam_password_policy, $ds_aws_account, $ds_applied_policy, $param_password_min_stored
end

script "js_iam_password_status", type:"javascript" do
  parameters "ds_iam_password_policy", "ds_aws_account", "ds_applied_policy", "param_password_min_stored"
  result "result"
  code <<-EOS
  result = {
    accountID: ds_aws_account['id'],
    accountName: ds_aws_account['name'],
    stored_passwords: 0,
    policy_name: ds_applied_policy['name'],
    required_stored_passwords: param_password_min_stored
  }

  if (ds_iam_password_policy['passwordPolicy'] != null) {
    if (ds_iam_password_policy['passwordPolicy']['PasswordReusePrevention'] != null) {
      result['stored_passwords'] = Number(ds_iam_password_policy['passwordPolicy']['PasswordReusePrevention'])
    }
  }
EOS
end

###############################################################################
# Policy
###############################################################################

policy "pol_iam_password_status" do
  validate $ds_iam_password_status do
    summary_template "{{ data.policy_name }}: AWS IAM Password Policy Not Restricting Password Reuse Found"
    detail_template <<-EOS
Password policy for the below account did not meet the specified security requirements:

**AWS Account:** {{ data.accountName }} ({{ data.accountID }})\\
**Stored Passwords To Prevent Reuse:** {{ data.stored_passwords }}\\
**Required Minimum Stored Passwords:** {{ data.required_stored_passwords }}
EOS
    check ge(val(data, 'stored_passwords'), val(data, 'required_stored_passwords'))
    escalate $esc_email
  end
end

###############################################################################
# Escalations
###############################################################################

escalation "esc_email" do
  automatic true
  label "Send Email"
  description "Send incident email"
  email $param_email
end

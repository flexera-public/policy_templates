name "AWS IAM Expired SSL/TLS Certificates"
rs_pt_ver 20180301
type "policy"
short_description "Reports any expired SSL/TLS certificates stored in AWS IAM. See the [README](https://github.com/flexera-public/policy_templates/tree/master/security/aws/iam_expired_ssl_certs) and [docs.flexera.com/flexera/EN/Automation](https://docs.flexera.com/flexera/EN/Automation/AutomationGS.htm) to learn more."
long_description ""
category "Security"
severity "high"
default_frequency "daily"
info(
  version: "3.0.1",
  provider: "AWS",
  service: "IAM",
  policy_set: "CIS",
  cce_id: "", # No associated CCE
  cis_aws_foundations_securityhub: "", # Unlisted
  benchmark_control: "1.19",
  benchmark_version: "1.4.0",
  cis_controls: "[\"3.1v8\", \"13v7\"]",
  nist: "" # Unknown
)

###############################################################################
# Parameters
###############################################################################

parameter "param_email" do
  type "list"
  category "Policy Settings"
  label "Email Addresses"
  description "Email addresses of the recipients you wish to notify."
  default []
end

parameter "param_aws_account_number" do
  type "string"
  category "Policy Settings"
  label "Account Number"
  description "Leave blank; this is for automated use with Meta Policies. See README for more details."
  default ""
end

###############################################################################
# Authentication
###############################################################################

credentials "auth_aws" do
  schemes "aws", "aws_sts"
  label "AWS"
  description "Select the AWS Credential from the list"
  tags "provider=aws"
  aws_account_number $param_aws_account_number
end

credentials "auth_flexera" do
  schemes "oauth2"
  label "Flexera"
  description "Select Flexera One OAuth2 credentials"
  tags "provider=flexera"
end

###############################################################################
# Datasources & Scripts
###############################################################################

# Get applied policy metadata for use later
datasource "ds_applied_policy" do
  request do
    auth $auth_flexera
    host rs_governance_host
    path join(["/api/governance/projects/", rs_project_id, "/applied_policies/", policy_id])
    header "Api-Version", "1.0"
  end
end

# Get region-specific Flexera API endpoints
datasource "ds_flexera_api_hosts" do
  run_script $js_flexera_api_hosts, rs_optima_host
end

script "js_flexera_api_hosts", type: "javascript" do
  parameters "rs_optima_host"
  result "result"
  code <<-EOS
  host_table = {
    "api.optima.flexeraeng.com": {
      flexera: "api.flexera.com",
      fsm: "api.fsm.flexeraeng.com"
    },
    "api.optima-eu.flexeraeng.com": {
      flexera: "api.flexera.eu",
      fsm: "api.fsm-eu.flexeraeng.com"
    },
    "api.optima-apac.flexeraeng.com": {
      flexera: "api.flexera.au",
      fsm: "api.fsm-apac.flexeraeng.com"
    }
  }

  result = host_table[rs_optima_host]
EOS
end

# Get AWS account info
datasource "ds_cloud_vendor_accounts" do
  request do
    auth $auth_flexera
    host val($ds_flexera_api_hosts, 'flexera')
    path join(["/finops-analytics/v1/orgs/", rs_org_id, "/cloud-vendor-accounts"])
    header "Api-Version", "1.0"
  end
  result do
    encoding "json"
    collect jmes_path(response, "values[*]") do
      field "id", jmes_path(col_item, "aws.accountId")
      field "name", jmes_path(col_item, "name")
      field "tags", jmes_path(col_item, "tags")
    end
  end
end

datasource "ds_get_caller_identity" do
  request do
    auth $auth_aws
    host "sts.amazonaws.com"
    path "/"
    query "Action", "GetCallerIdentity"
    query "Version", "2011-06-15"
    header "User-Agent", "RS Policies"
  end
  result do
    encoding "xml"
    collect xpath(response, "//GetCallerIdentityResponse/GetCallerIdentityResult") do
      field "account", xpath(col_item, "Account")
    end
  end
end

datasource "ds_aws_account" do
  run_script $js_aws_account, $ds_cloud_vendor_accounts, $ds_get_caller_identity
end

script "js_aws_account", type:"javascript" do
  parameters "ds_cloud_vendor_accounts", "ds_get_caller_identity"
  result "result"
  code <<-EOS
  result = _.find(ds_cloud_vendor_accounts, function(account) {
    return account['id'] == ds_get_caller_identity[0]['account']
  })

  // This is in case the API does not return the relevant account info
  if (result == undefined) {
    result = {
      id: ds_get_caller_identity[0]['account'],
      name: "",
      tags: {}
    }
  }
EOS
end

datasource "ds_iam_server_certs" do
  request do
    auth $auth_aws
    host "iam.amazonaws.com"
    path "/"
    query "Action", "ListServerCertificates"
    query "Version", "2010-05-08"
    header "Accept", "application/json"
    header "User-Agent", "RS Policies"
  end
  result do
    encoding "json"
    field "certificates", jmes_path(response, "ListServerCertificatesResponse.ListServerCertificatesResult.ServerCertificateMetadataList")
  end
end

datasource "ds_iam_bad_certs" do
  run_script $js_iam_bad_certs, $ds_iam_server_certs, $ds_aws_account, $ds_applied_policy
end

script "js_iam_bad_certs", type:"javascript" do
  parameters "ds_iam_server_certs", "ds_aws_account", "ds_applied_policy"
  result "result"
  code <<-EOS
  now = new Date()
  result = []

  _.each(ds_iam_server_certs['certificates'], function(cert) {
    expiration = new Date(1000 * cert['Expiration'])

    if (now > expiration) {
      result.push({
        accountID: ds_aws_account['id'],
        accountName: ds_aws_account['name'],
        id: cert['Arn'],
        expiration: expiration.toISOString(),
        policy_name: ds_applied_policy['name']
      })
    }
  })
EOS
end

###############################################################################
# Policy
###############################################################################

policy "pol_expired_ssl_certs" do
  validate_each $ds_iam_bad_certs do
    summary_template "{{ with index data 0 }}{{ .policy_name }}{{ end }}: {{ len data }} Expired AWS IAM SSL/TLS Certificates Found"
    check eq(val(item, "id"), "")
    escalate $esc_email
    export do
      resource_level true
      field "accountID" do
        label "Account ID"
      end
      field "accountName" do
        label "Account Name"
      end
      field "id" do
        label "Certificate"
      end
      field "expiration" do
        label "Expiration Date"
      end
    end
  end
end

###############################################################################
# Escalations
###############################################################################

escalation "esc_email" do
  automatic true
  label "Send Email"
  description "Send incident email"
  email $param_email
end

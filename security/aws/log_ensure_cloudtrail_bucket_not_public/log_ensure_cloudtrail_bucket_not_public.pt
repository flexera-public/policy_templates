name "AWS Ensure CloudTrail S3 Buckets Non-Public"
rs_pt_ver 20180301
type "policy"
short_description "Report if CloudTrail stores logs in publicly accessible S3 bucket(s). See the [README](https://github.com/flexera-public/policy_templates/tree/master/security/aws/log_ensure_cloudtrail_bucket_not_public) and [docs.rightscale.com/policies](https://docs.rightscale.com/policies/) to learn more."
long_description ""
category "Security"
severity "high"
default_frequency "daily"
info(
  version: "3.0.0",
  provider: "AWS",
  service: "CloudTrail",
  policy_set: "CIS",
  cce_id: "CCE-78915-6",
  cis_aws_foundations_securityhub: "2.3",
  benchmark_control: "3.3",
  benchmark_version: "1.4.0",
  cis_controls: "[\"3.3v8\", \"14.6v7\"]",
  nist: "AU-9"
)

###############################################################################
# Parameters
###############################################################################

parameter "param_email" do
  type "list"
  category "Policy Settings"
  label "Email Addresses"
  description "Email addresses of the recipients you wish to notify."
  default []
end

parameter "param_aws_account_number" do
  type "string"
  category "Policy Settings"
  label "Account Number"
  description "Leave blank; this is for automated use with Meta Policies. See README for more details."
  default ""
end

###############################################################################
# Authentication
###############################################################################

credentials "auth_aws" do
  schemes "aws", "aws_sts"
  label "AWS"
  description "Select the AWS Credential from the list"
  tags "provider=aws"
  aws_account_number $param_aws_account_number
end

credentials "auth_flexera" do
  schemes "oauth2"
  label "Flexera"
  description "Select Flexera One OAuth2 credentials"
  tags "provider=flexera"
end

###############################################################################
# Datasources & Scripts
###############################################################################

# Get applied policy metadata for use later
datasource "ds_applied_policy" do
  request do
    auth $auth_flexera
    host rs_governance_host
    path join(["/api/governance/projects/", rs_project_id, "/applied_policies/", policy_id])
    header "Api-Version", "1.0"
  end
end

# Get region-specific Flexera API endpoints
datasource "ds_flexera_api_hosts" do
  run_script $js_flexera_api_hosts, rs_optima_host
end

script "js_flexera_api_hosts", type: "javascript" do
  parameters "rs_optima_host"
  result "result"
  code <<-EOS
  host_table = {
    "api.optima.flexeraeng.com": {
      flexera: "api.flexera.com",
      fsm: "api.fsm.flexeraeng.com"
    },
    "api.optima-eu.flexeraeng.com": {
      flexera: "api.flexera.eu",
      fsm: "api.fsm-eu.flexeraeng.com"
    },
    "api.optima-apac.flexeraeng.com": {
      flexera: "api.flexera.au",
      fsm: "api.fsm-apac.flexeraeng.com"
    }
  }

  result = host_table[rs_optima_host]
EOS
end

# Get AWS account info
datasource "ds_cloud_vendor_accounts" do
  request do
    auth $auth_flexera
    host val($ds_flexera_api_hosts, 'flexera')
    path join(["/finops-analytics/v1/orgs/", rs_org_id, "/cloud-vendor-accounts"])
    header "Api-Version", "1.0"
  end
  result do
    encoding "json"
    collect jmes_path(response, "values[*]") do
      field "id", jmes_path(col_item, "aws.accountId")
      field "name", jmes_path(col_item, "name")
      field "tags", jmes_path(col_item, "tags")
    end
  end
end

datasource "ds_get_caller_identity" do
  request do
    auth $auth_aws
    verb "GET"
    host "sts.amazonaws.com"
    path "/"
    query "Action", "GetCallerIdentity"
    query "Version", "2011-06-15"
    header "User-Agent", "RS Policies"
  end
  result do
    encoding "xml"
    collect xpath(response, "//GetCallerIdentityResponse/GetCallerIdentityResult") do
      field "account", xpath(col_item, "Account")
    end
  end
end

datasource "ds_aws_account" do
  run_script $js_aws_account, $ds_cloud_vendor_accounts, $ds_get_caller_identity
end

script "js_aws_account", type:"javascript" do
  parameters "ds_cloud_vendor_accounts", "ds_get_caller_identity"
  result "result"
  code <<-EOS
  result = _.find(ds_cloud_vendor_accounts, function(account) {
    return account['id'] == ds_get_caller_identity[0]['account']
  })

  // This is in case the API does not return the relevant account info
  if (result == undefined) {
    result = {
      id: ds_get_caller_identity[0]['account'],
      name: "",
      tags: {}
    }
  }
EOS
end

datasource "ds_trail_list" do
  request do
    auth $auth_aws
    verb "GET"
    host "cloudtrail.us-east-1.amazonaws.com"
    path "/"
    header "User-Agent", "RS Policies"
    header "Accept", "application/json"
    query "Action", "DescribeTrails"
  end
  result do
    encoding "json"
    collect jmes_path(response, "DescribeTrailsResponse.DescribeTrailsResult.trailList") do
      field "name", jmes_path(col_item, "Name")
      field "arn", jmes_path(col_item, "TrailARN")
      field "homeregion", jmes_path(col_item, "HomeRegion")
      field "s3_bucket", jmes_path(col_item, "S3BucketName")
    end
  end
end

datasource "ds_aws_buckets_with_region" do
  iterate $ds_trail_list
  request do
    auth $auth_aws
    host "s3.amazonaws.com"
    path join(["/", val(iter_item, "s3_bucket")])
    query "location", ""
    header "User-Agent", "RS Policies"
  end
  result do
    encoding "xml"
    field "trail_name", val(iter_item, "name")
    field "trail_arn", val(iter_item, "arn")
    field "trail_region", val(iter_item, "homeregion")
    field "id", val(iter_item, "s3_bucket")
    field "region", response
  end
end

# https://docs.aws.amazon.com/AmazonS3/latest/API/API_GetBucketLocation.html
# "Buckets in Region us-east-1 have a LocationConstraint of null."
# This is to clean up the data and replace that null value with us-east-1
datasource "ds_aws_buckets_with_region_cleaned" do
  run_script $js_aws_buckets_with_region_cleaned, $ds_aws_buckets_with_region
end

script "js_aws_buckets_with_region_cleaned", type:"javascript" do
  parameters "ds_aws_buckets_with_region"
  result "result"
  code <<-EOS
    result = []

    for ( i = 0; i < ds_aws_buckets_with_region.length; i++ ) {
      if (ds_aws_buckets_with_region[i].region == "\\n") {
        ds_aws_buckets_with_region[i].region = "us-east-1"
        ds_aws_buckets_with_region[i].host = "s3-external-1.amazonaws.com"
      } else if (ds_aws_buckets_with_region[i].region == "EU" || ds_aws_buckets_with_region[i].region == "\\nEU") {
        ds_aws_buckets_with_region[i].region = "eu-west-1"
        ds_aws_buckets_with_region[i].host = "s3-" + ds_aws_buckets_with_region[i]["region"] + ".amazonaws.com"
      } else {
        ds_aws_buckets_with_region[i].region = ds_aws_buckets_with_region[i].region.substring(1)
        ds_aws_buckets_with_region[i].host = "s3-" + ds_aws_buckets_with_region[i]["region"] + ".amazonaws.com"
      }

      result.push(ds_aws_buckets_with_region[i])
    }
EOS
end

datasource "ds_aws_buckets_with_acl_grants" do
  iterate $ds_aws_buckets_with_region_cleaned
  request do
    auth $auth_aws
    host val(iter_item, "host")
    path join(["/", val(iter_item, "id")])
    query "acl", ""
    header "User-Agent", "RS Policies"
  end
  result do
    encoding "xml"
    field "trail_name", val(iter_item, "trail_name")
    field "trail_arn", val(iter_item, "trail_arn")
    field "trail_region", val(iter_item, "trail_region")
    field "id", val(iter_item, "id")
    field "region", val(iter_item, "region")
    field "host", val(iter_item, "host")
    field "acl_grants" do
      collect xpath(response, "//AccessControlPolicy/AccessControlList/Grant", "array") do
        field "id", xpath(col_item, "Grantee/ID")
        field "display_name", xpath(col_item, "Grantee/DisplayName")
        field "uri", xpath(col_item, "Grantee/URI")
        field "permission", xpath(col_item, "Permission")
      end
    end
  end
end

datasource "ds_aws_buckets_with_policies" do
  iterate $ds_aws_buckets_with_acl_grants
  request do
    auth $auth_aws
    host val(iter_item, "host")
    path join(["/", val(iter_item, "id")])
    query "policy", ""
    header "User-Agent", "RS Policies"
    header "Accept", "application/json"
    ignore_status 404
  end
  result do
    encoding "json"
    field "trail_name", val(iter_item, "trail_name")
    field "trail_arn", val(iter_item, "trail_arn")
    field "trail_region", val(iter_item, "trail_region")
    field "id", val(iter_item, "id")
    field "region", val(iter_item, "region")
    field "host", val(iter_item, "host")
    field "acl_grants", val(iter_item, "acl_grants")
    field "policy", response
  end
end

datasource "ds_aws_bad_buckets" do
  run_script $js_bad_buckets, $ds_aws_buckets_with_policies
end

script "js_bad_buckets", type:"javascript" do
  parameters "ds_aws_buckets_with_policies"
  result "result"
  code <<-EOS
    result = []

    _.each(ds_aws_buckets_with_policies, function(bucket) {
      bad_acl_grant = "False"
      bad_policy = "False"

      _.each(bucket.acl_grants, function(grant) {
        if (grant.uri == "https://acs.amazonaws.com/groups/global/AllUsers" ||
            grant.uri == "https://acs.amazonaws.com/groups/global/AuthenticatedUsers" ||
            grant.uri == "http://acs.amazonaws.com/groups/global/AllUsers" ||
            grant.uri == "http://acs.amazonaws.com/groups/global/AuthenticatedUsers") {
          bad_acl_grant = "True"
        }
      })

      _.each(bucket.policy.Statement, function(statement) {
        if (statement.Effect == "Allow") {
          if (statement.Principal == "*" || statement.Principal == {"AWS": "*"}) {
            bad_policy = "True"
          }
        }
      })

      if (bad_acl_grant == "True" || bad_policy == "True") {
        result.push({
          trail_name: bucket.trail_name,
          id: bucket.trail_arn,
          bucket_name: bucket.id,
          bucket_region: bucket.region,
          bad_acl_grant: bad_acl_grant,
          bad_policy: bad_policy
        })
      }
    })
EOS
end

###############################################################################
# Policy
###############################################################################

policy "pol_trails_with_nonprivate_buckets" do
  validate $ds_aws_bad_buckets do
    summary_template "{{ with index data 0 }}{{ .policy_name }}{{ end }}: {{ len data }} CloudTrails Found With Publicly Accessible Buckets"
    check eq(size(data), 0)
    escalate $esc_email
    export do
      resource_level true
      field "trail_name" do
        label "CloudTrail Name"
      end
      field "id" do
        label "CloudTrail ARN"
      end
      field "bucket_name" do
        label "S3 Bucket Name"
      end
      field "bucket_region" do
        label "S3 Bucket Region"
      end
      field "bad_acl_grant" do
        label "Bad ACL Grant?"
      end
      field "bad_policy" do
        label "Bad Policy?"
      end
    end
  end
end

###############################################################################
# Escalations
###############################################################################

escalation "esc_email" do
  automatic true
  label "Send Email"
  description "Send incident email"
  email $param_email
end

###############################################################################
# Meta Policy [alpha]
# Not intended to be modified or used by policy developers
###############################################################################

# If the meta_parent_policy_id is not set it will evaluate to an empty string and we will look for the policy itself,
# if it is set we will look for the parent policy.
datasource "ds_get_policy" do
  request do
    auth $auth_flexera
    host rs_governance_host
    ignore_status [404]
    path join(["/api/governance/projects/", rs_project_id, "/applied_policies/", switch(ne(meta_parent_policy_id, ""), meta_parent_policy_id, policy_id)])
    header "Api-Version", "1.0"
  end
  result do
    encoding "json"
    field "id", jmes_path(response, "id")
  end
end

datasource "ds_parent_policy_terminated" do
  run_script $js_decide_if_self_terminate, $ds_get_policy, policy_id, meta_parent_policy_id
end

# If the policy was applied by a meta_parent_policy we confirm it exists if it doesn't we confirm we are deleting
# This information is used in two places:
# - determining whether or not we make a delete call
# - determining if we should create an incident (we don't want to create an incident on the run where we terminate)
script "js_decide_if_self_terminate", type: "javascript" do
  parameters "found", "self_policy_id", "meta_parent_policy_id"
  result "result"
  code <<-EOS
  var result
  if (meta_parent_policy_id != "" && found.id == undefined) {
    result = true
  } else {
    result = false
  }
  EOS
end

# Two potentials ways to set this up:
# - this way and make a unneeded 'get' request when not deleting
# - make the delete request an interate and have it iterate over an empty array when not deleting and an array with one item when deleting
script "js_make_terminate_request", type: "javascript" do
  parameters "should_delete", "policy_id", "rs_project_id", "rs_governance_host"
  result "request"
  code <<-EOS

  var request = {
    auth:  'auth_flexera',
    host: rs_governance_host,
    path: "/api/governance/projects/" + rs_project_id + "/applied_policies/" + policy_id,
    headers: {
      "API-Version": "1.0",
      "Content-Type":"application/json"
    },
  }

  if (should_delete) {
    request.verb = 'DELETE'
  }
  EOS
end

datasource "ds_terminate_self" do
  request do
    run_script $js_make_terminate_request, $ds_parent_policy_terminated, policy_id, rs_project_id, rs_governance_host
  end
end

datasource "ds_is_deleted" do
  run_script $js_check_deleted, $ds_terminate_self
end

# This is just a way to have the check delete request connect to the farthest leaf from policy.
# We want the delete check to the first thing the policy does to avoid the policy erroring before it can decide whether or not it needs to self terminate
# Example a customer deletes a credential and then terminates the parent policy. We still want the children to self terminate
# The only way I could see this not happening is if the user who applied the parent_meta_policy was offboarded or lost policy access, the policies who are impersonating the user
# would not have access to self-terminate
# It may be useful for the backend to enable a mass terminate at some point for all meta_child_policies associated with an id.
script "js_check_deleted", type: "javascript" do
  parameters "response"
  result "result"
  code <<-EOS
  result = {"path":"/"}
  EOS
end

name "AWS S3 Buckets Without Server Access Logging"
rs_pt_ver 20180301
type "policy"
short_description "Reports any AWS S3 buckets that do not have server access logging enabled. See the [README](https://github.com/flexera-public/policy_templates/tree/master/security/aws/s3_buckets_without_server_access_logging) and [docs.flexera.com/flexera/EN/Automation](https://docs.flexera.com/flexera/EN/Automation/AutomationGS.htm) to learn more."
long_description ""
severity "high"
category "Security"
info(
  version: "3.0.0",
  provider: "AWS",
  service: "S3",
  policy_set: ""
  )

###############################################################################
# Parameters
###############################################################################

parameter "param_email" do
  type "list"
  category "Policy Settings"
  label "Email Addresses"
  description "Email addresses of the recipients you wish to notify."
  default []
end

parameter "param_aws_account_number" do
  type "string"
  category "Policy Settings"
  label "Account Number"
  description "Leave blank; this is for automated use with Meta Policies. See README for more details."
  default ""
end

parameter "param_target_bucket" do
  type "string"
  category "Policy Settings"
  label "Target Bucket"
  description "An existing bucket in same region as source to be used for logging."
  default ""
end

parameter "param_target_prefix" do
  type "string"
  category "Policy Settings"
  label "Target Bucket Prefix"
  description "If using a Target Bucket, this element lets you specify a prefix for the keys that the log files will be stored under."
  default ""
end

parameter "param_exclude_target_bucket" do
  type "string"
  category "Policy Settings"
  label "Exclude Target Bucket"
  description "Exclude target bucket as additional fees may incur. "
  allowed_values "true","false"
end

parameter "param_automatic_action" do
  type "list"
  category "Actions"
  label "Automatic Actions"
  description "When this value is set, this policy will automatically take the selected action."
  allowed_values ["Enable Server Access Logging"]
  default []
end

###############################################################################
# Authentication
###############################################################################

credentials "auth_aws" do
  schemes "aws", "aws_sts"
  label "AWS"
  description "Select the AWS Credential from the list"
  tags "provider=aws"
  aws_account_number $param_aws_account_number
end

credentials "auth_flexera" do
  schemes "oauth2"
  label "Flexera"
  description "Select Flexera One OAuth2 credentials"
  tags "provider=flexera"
end

###############################################################################
# Datasources & Scripts
###############################################################################

# Get applied policy metadata for use later
datasource "ds_applied_policy" do
  request do
    auth $auth_flexera
    host rs_governance_host
    path join(["/api/governance/projects/", rs_project_id, "/applied_policies/", policy_id])
    header "Api-Version", "1.0"
  end
end

# Get region-specific Flexera API endpoints
datasource "ds_flexera_api_hosts" do
  run_script $js_flexera_api_hosts, rs_optima_host
end

script "js_flexera_api_hosts", type: "javascript" do
  parameters "rs_optima_host"
  result "result"
  code <<-EOS
  host_table = {
    "api.optima.flexeraeng.com": {
      flexera: "api.flexera.com",
      fsm: "api.fsm.flexeraeng.com"
    },
    "api.optima-eu.flexeraeng.com": {
      flexera: "api.flexera.eu",
      fsm: "api.fsm-eu.flexeraeng.com"
    },
    "api.optima-apac.flexeraeng.com": {
      flexera: "api.flexera.au",
      fsm: "api.fsm-apac.flexeraeng.com"
    }
  }

  result = host_table[rs_optima_host]
EOS
end

# Get AWS account info
datasource "ds_cloud_vendor_accounts" do
  request do
    auth $auth_flexera
    host val($ds_flexera_api_hosts, 'flexera')
    path join(["/finops-analytics/v1/orgs/", rs_org_id, "/cloud-vendor-accounts"])
    header "Api-Version", "1.0"
  end
  result do
    encoding "json"
    collect jmes_path(response, "values[*]") do
      field "id", jmes_path(col_item, "aws.accountId")
      field "name", jmes_path(col_item, "name")
      field "tags", jmes_path(col_item, "tags")
    end
  end
end

datasource "ds_get_caller_identity" do
  request do
    auth $auth_aws
    verb "GET"
    host "sts.amazonaws.com"
    path "/"
    query "Action", "GetCallerIdentity"
    query "Version", "2011-06-15"
    header "User-Agent", "RS Policies"
  end
  result do
    encoding "xml"
    collect xpath(response, "//GetCallerIdentityResponse/GetCallerIdentityResult") do
      field "account", xpath(col_item, "Account")
    end
  end
end

datasource "ds_aws_account" do
  run_script $js_aws_account, $ds_cloud_vendor_accounts, $ds_get_caller_identity
end

script "js_aws_account", type:"javascript" do
  parameters "ds_cloud_vendor_accounts", "ds_get_caller_identity"
  result "result"
  code <<-EOS
  result = _.find(ds_cloud_vendor_accounts, function(account) {
    return account['id'] == ds_get_caller_identity[0]['account']
  })

  // This is in case the API does not return the relevant account info
  if (result == undefined) {
    result = {
      id: ds_get_caller_identity[0]['account'],
      name: "",
      tags: {}
    }
  }
EOS
end

datasource "ds_aws_buckets" do
  request do
    auth $auth_aws
    host "s3.amazonaws.com"
    path "/"
  end
  result do
    encoding "xml"
    collect xpath(response, "//ListAllMyBucketsResult/Buckets/Bucket", "array") do
      field "id", xpath(col_item, "Name")
      field "creation_date", xpath(col_item, "CreationDate")
    end
  end
end

datasource "ds_aws_buckets_with_region" do
  iterate $ds_aws_buckets
  request do
    auth $auth_aws
    host join([val(iter_item, "id"), ".s3.amazonaws.com"])
    path "/?location"
    header "User-Agent", "RS Policies"
    ignore_status [403, 404]
  end
  result do
    encoding "xml"
    field "region", xpath(response, "//LocationConstraint")
    field "id", val(iter_item, "id")
    field "creation_date", val(iter_item, "creation_date")
  end
end

datasource "ds_aws_buckets_with_region_cleaned" do
  run_script $js_aws_buckets_with_region_cleaned, $ds_aws_buckets_with_region
end

script "js_aws_buckets_with_region_cleaned", type:"javascript" do
  parameters "ds_aws_buckets_with_region"
  result "result"
  code <<-EOS
  result = _.map(ds_aws_buckets_with_region, function(bucket) {
    region = bucket['region']
    if (typeof(bucket['region']) != 'string' || bucket['region'] == '') { region = 'us-east-1' }
    if (bucket['region'].toLowerCase().trim() == "eu") { region = 'eu-west-1' }

    return { id: bucket['id'], creation_date: bucket['creation_date'], region: region }
  })
EOS
end

datasource "ds_aws_buckets_with_logging" do
  iterate $ds_aws_buckets_with_region_cleaned
  request do
    auth $auth_aws
    host join([val(iter_item, "id"), ".s3.amazonaws.com"])
    path "/?logging"
    header "User-Agent", "RS Policies"
    ignore_status [403, 404]
  end
  result do
    encoding "xml"
    field "target_bucket", xpath(response, "//TargetBucket")
    field "id", val(iter_item, "id")
    field "creation_date", val(iter_item, "creation_date")
    field "region", val(iter_item, "region")
  end
end

datasource "ds_aws_buckets_without_server_access_logging" do
  run_script $js_aws_buckets_without_server_access_logging, $ds_aws_buckets_with_logging, $ds_aws_account, $ds_applied_policy, $param_target_bucket, $param_exclude_target_bucket
end

script "js_aws_buckets_without_server_access_logging", type:"javascript" do
  parameters "ds_aws_buckets_with_logging", "ds_aws_account", "ds_applied_policy"
  result "result"
  code <<-'EOS'
  bad_buckets = _.filter(ds_aws_buckets_with_logging, function(bucket) {
    // logic_or(logic_not(eq(val(item, "target_bucket"), "")),logic_and(eq($param_exclude_target_bucket,"true"),eq(val(item,"bucket_name"),$param_target_bucket)))
  })

  result = _.map(bad_buckets, function(bucket) {
    return {
      accountID: ds_aws_account['id'],
      accountName: ds_aws_account['name'],
      id: bucket['id'],
      region: bucket['region'],
      creation_date: bucket['creation_date'],
      policy_name: ds_applied_policy['name']
    }
  })
EOS
end

###############################################################################
# Policy
###############################################################################

policy "pol_aws_buckets_without_server_access_logging" do
  validate_each $ds_aws_buckets_without_server_access_logging do
    summary_template "{{ with index data 0 }}{{ .policy_name }}{{ end }}: {{ len data }} AWS S3 Buckets Without Server Access Logging Found"
    check eq(val(item, "id"), "")
    escalate $esc_email
    escalate $esc_enable_logging
    export do
      resource_level true
      field "accountID" do
        label "Account ID"
      end
      field "accountName" do
        label "Account Name"
      end
      field "id" do
        label "Bucket Name"
      end
      field "region" do
        label "Region"
      end
      field "creation_date" do
        label "Creation Date"
      end
    end
  end
end

###############################################################################
# Escalations
###############################################################################

escalation "esc_email" do
  automatic true
  label "Send Email"
  description "Send incident email"
  email $param_email
end

escalation "esc_enable_logging" do
  automatic contains($param_automatic_action, "Enable Server Access Logging")
  label "Enable Server Access Logging"
  description "Approval to enable server access logging on all selected AWS S3 Buckets"
  run "enable_logging_buckets", data, $param_target_bucket, $param_target_prefix
end

###############################################################################
# Cloud Workflow
###############################################################################

define enable_logging_buckets($data, $param_target_bucket, $param_target_prefix, $$rs_optima_host) return $all_responses do
  $$debug = "false"
  $all_responses = []

  foreach $item in $data do
    if $param_target_prefix == ""
      $target_prefix = $item["id"] + "-logging"
    else
      $target_prefix = $param_target_prefix
    end

      $response = http_request(
        verb: "put",
        host: $item["id"]+"."+$item["host"],
        https: true,
        auth: $$auth_aws,
        href: "/",
        headers: {
          "content-type": "application/xml"
        },
        query_strings: { "logging": ""},
        body: "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<BucketLoggingStatus xmlns=\"http://doc.s3.amazonaws.com/2006-03-01\"><LoggingEnabled><TargetBucket>"+$param_target_bucket+"</TargetBucket><TargetPrefix>"+$target_prefix+"</TargetPrefix></LoggingEnabled></BucketLoggingStatus>"
      )
      $all_responses << $response
      call sys_log('all_responses', to_s($all_responses))

  end
end

define sys_log($subject, $detail) do
  # Create empty errors array if doesn't already exist
  if !$$errors
    $$errors = []
  end
  # Check if debug is enabled
  if $$debug
    # Append to global $$errors
    # This is the suggested way to capture errors
    $$errors << "Unexpected error for " + $subject + "\n  " + to_s($detail)
    # If Flexera NAM Zone, create audit_entries [to be deprecated]
    # This is the legacy method for capturing errors and only supported on Flexera NAM
    if $$rs_optima_host == "api.optima.flexeraeng.com"
      # skip_error_and_append is used to catch error if rs_cm.audit_entries.create fails unexpectedly
      $task_label = "Creating audit entry for " + $subject
      sub task_label: $task, on_error: skip_error_and_append($task) do
        rs_cm.audit_entries.create(
          notify: "None",
          audit_entry: {
            auditee_href: @@account,
            summary: $subject,
            detail: $detail
          }
        )
      end # End sub on_error
    end # End if rs_optima_host
  end # End if debug is enabled
end

define skip_error_and_append($subject) do
  $$errors << "Unexpected error for " + $subject + "\n  " + to_s($_error)
  $_error_behavior = "skip"
end

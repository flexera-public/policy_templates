name "AWS Publicly Accessible RDS Instances"
rs_pt_ver 20180301
type "policy"
short_description "Report and remediate any Relational Database Service (RDS) instances that are publicly accessible. \n See the [README](https://github.com/rightscale/policy_templates/tree/master/security/aws/rds_publicly_accessible) and [docs.rightscale.com/policies](http://docs.rightscale.com/policies/) to learn more."
long_description "Version: 1.0"
category "Security"
severity "high"

###############################################################################
# Permissions
###############################################################################

permission "perm_read_creds" do
  actions   "rs_cm.show_sensitive","rs_cm.index_sensitive"
  resources "rs_cm.credentials"
end

###############################################################################
# User inputs
###############################################################################

parameter "param_email" do
  type "list"
  label "Email addresses to notify"
  description "Email addresses of the recipients you wish to notify when new incidents are created"
end

parameter "param_exclude_tags" do
  type "list"
  label "Tags to ignore"
  description "List of tags that will exclude resources from being evaluated by this policy. Multiple tags are evaluated as an 'OR' condition. Tag keys or key/value pairs can be listed. Example: 'test,env=dev'"
end

###############################################################################
# Authentication
###############################################################################

auth "auth_aws", type: "aws" do
  version "4"
  service "rds"
  access_key cred("AWS_ACCESS_KEY_ID")
  secret_key cred("AWS_SECRET_ACCESS_KEY")
end

###############################################################################
# Pagination
###############################################################################

pagination "rds_pagination" do
  get_page_marker do
    body_path "DescribeDBInstancesResult.NextMarker"
  end
  set_page_marker do
    query "Marker"
  end
end

###############################################################################
# Datasources
###############################################################################

#Generates list of Regions.
datasource "ds_regions_list" do
  run_script $js_regions_map
end

#To get list of All RDS Instances.
datasource "ds_rds_instances_list" do
  iterate $ds_regions_list
  request do
    run_script $js_rds_list, val(iter_item,"region")
  end
  result do
   encoding "json"
    collect jmes_path(response, "DescribeDBInstancesResponse.DescribeDBInstancesResult.DBInstances[*]") do
      field "db_instance_arn", jmes_path(col_item, "DBInstanceArn")
      field "db_instance_identifier", jmes_path(col_item, "DBInstanceIdentifier")
      field "publicly_accessible", jmes_path(col_item, "PubliclyAccessible")
      field "storage_encrypted", jmes_path(col_item, "StorageEncrypted")
      field "db_engine_name", jmes_path(col_item, "Engine")
      field "delete_protection", jmes_path(col_item, "DeletionProtection")
      field "availability_zone", jmes_path(col_item, "AvailabilityZone")
      field "sec_availability_zone", jmes_path(col_item, "SecondaryAvailabilityZone")
      field "db_instance_status", jmes_path(col_item,"DBInstanceStatus")
      field "region", val(iter_item,"region")
      field "db_cluster_identifier", jmes_path(col_item,"DBClusterIdentifier")
    end
  end
end

#Get respective tags for all RDS instances
datasource "ds_rds_list_with_tags" do
  iterate $ds_rds_instances_list
  request do
    run_script $js_rds_list_with_tags, val(iter_item,"region"), val(iter_item, "db_instance_arn")
  end
  result do
    encoding "json"
    collect jmes_path(response, "ListTagsForResourceResponse.ListTagsForResourceResult") do
      field "tags" do
        collect jmes_path(col_item, "TagList") do
          field "tagKey", jmes_path(col_item, "Key")
          field "tagValue", jmes_path(col_item, "Value")
        end
      end
      field "db_instance_arn", val(iter_item, "db_instance_arn")
      field "db_instance_identifier", val(iter_item, "db_instance_identifier")
      field "publicly_accessible", val(iter_item, "publicly_accessible")
      field "storage_encrypted", val(iter_item, "storage_encrypted")
      field "delete_protection", val(iter_item, "delete_protection")
      field "region", val(iter_item,"region")
      field "db_engine_name", val(iter_item,"db_engine_name")
      field "availability_zone", val(iter_item, "availability_zone")
      field "sec_availability_zone", val(iter_item, "sec_availability_zone")
      field "db_instance_status", val(iter_item,"db_instance_status")
      field "db_cluster_identifier", val(iter_item,"db_cluster_identifier")
    end
  end
end

datasource "ds_rds_publicly_accessible_instance_map" do
  run_script $js_rds_filter_map, $ds_rds_list_with_tags, $param_exclude_tags
end

###############################################################################
# Scripts
###############################################################################

script "js_regions_map", type: "javascript" do
  result "regions_map"
  code <<-EOS
    var regions_map=[]
    regions_map.push(
      {"region": "us-east-1"},
      {"region": "us-east-2"},
      {"region": "us-west-1"},
      {"region": "us-west-2"},
      {"region": "ap-south-1"},
      {"region": "ap-northeast-2"},
      {"region": "ap-southeast-1"},
      {"region": "ap-southeast-2"},
      {"region": "ap-northeast-1"},
      {"region": "ca-central-1"},
      {"region": "eu-central-1"},
      {"region": "eu-west-1"},
      {"region": "eu-west-2"},
      {"region": "eu-west-3"},
      {"region": "sa-east-1"},
      {"region": "eu-north-1"}
    )
  EOS
end

#https://docs.aws.amazon.com/AmazonRDS/latest/APIReference/API_DescribeDBInstances.html
script "js_rds_list", type: "javascript" do
  parameters "region"
  result "results"
  code <<-EOS
    results = {
      auth: 'auth_aws',
      host: 'rds.'+region+'.amazonaws.com',
      path: '/',
      pagination: "rds_pagination",
      query_params: {
        "Action": "DescribeDBInstances",
        "Version": "2014-10-31",
      },
      headers: {
        "Accept": "application/json"
      }
    }
  EOS
end

#https://docs.aws.amazon.com/AmazonRDS/latest/APIReference/API_ListTagsForResource.html
script "js_rds_list_with_tags", type: "javascript" do
  parameters "region", "db_instance_arn"
  result "request"
  code <<-EOS
    request = {
      auth: 'auth_aws',
      host: 'rds.'+region+'.amazonaws.com',
      path: '/',
      verb: 'GET',
      query_params: {
        "Action": "ListTagsForResource",
        "Version": "2014-10-31",
        "ResourceName": db_instance_arn,
      },
      headers: {
        "Accept": "application/json"
      }
    }
  EOS
end

#Process the response data, check for the tags and generate a list of RDS instances that are publicly accessible
script "js_rds_filter_map", type: "javascript" do
  parameters "ds_rds_list_with_tags", "param_exclude_tags"
  result "content"
  code <<-EOS
    var param_exclude_tags_lower=[];
    for(var j=0; j < param_exclude_tags.length; j++){
      param_exclude_tags_lower[j]=param_exclude_tags[j].toString().toLowerCase();
    }

    var content=[]
    for(var i=0; i<ds_rds_list_with_tags.length; i++){
      rds=ds_rds_list_with_tags[i]

      //Check, if the tag present in entered param_exclude_tags, ignore the RDS instance if the tag matches/present.
      var tags = rds['tags']
      var isTagMatched=false
      var tagKeyValue=""
      for(var j=0; j < tags.length; j++){
        tag = tags[j]
        if((param_exclude_tags_lower.indexOf((tag['tagKey']).toLowerCase()) !== -1) || (param_exclude_tags_lower.indexOf((tag['tagKey']+'='+tag['tagValue']).toLowerCase()) !== -1)){
          isTagMatched = true;
        }
        // Constructing tags with comma separated to display in detail_template
        if((tag['tagValue']).length > 0){
          tagKeyValue = tagKeyValue + ', '+ tag['tagKey']+'='+tag['tagValue']
        }else{
          tagKeyValue = tagKeyValue + ', '+ tag['tagKey']
        }
      }

      var storage_encrypted = rds['storage_encrypted'];
      if(storage_encrypted === true){
        storage_encrypted = 'Yes';
      }else{
        storage_encrypted = 'No';
      }  
      var delete_protection = rds['delete_protection'];
      if(delete_protection === true){
        delete_protection = 'Yes';
      }else{
        delete_protection = 'No';
      }

      //If the RDS instance tag does not match with entered param_exclude_tags, then check if RDS instance is Publicly Accessible
      if(!(isTagMatched) && (rds['publicly_accessible']) === true){
        content.push({
          db_instance_arn: rds['db_instance_arn'],
          db_engine_name: rds['db_engine_name'],
          region: rds['region'],
          availability_zone: rds['availability_zone'],
          sec_availability_zone: rds['sec_availability_zone'],
          tagKeyValue:(tagKeyValue.slice(2)),
          db_instance_identifier: rds['db_instance_identifier'],
          storage_encrypted: storage_encrypted,
          db_instance_status: rds['db_instance_status'],
          db_cluster_identifier: rds['db_cluster_identifier'],
          delete_protection: delete_protection,
          publicly_accessible: rds['publicly_accessible']
        })
      }
    }
  EOS
end

###############################################################################
# Policy
###############################################################################

policy "policy_rds_instance_list" do
  validate_each $ds_rds_publicly_accessible_instance_map do
    summary_template "{{ rs_project_name }} (Account ID: {{ rs_project_id }}): {{ len data }} Publicly Accessible RDS Instances Found in AWS"
    detail_template <<-EOS
# List of Publicly Accessible RDS Instances
| DB_Instance_Identifier | Region | Availability_Zone | Secondary_Availability_Zone | Enable_Encryption  | DB_Engine_Name | DB_Instance_Status | Delete_Protection_Enabled | TAG_Value |
| ---------------------- | ------ | ----------------- | ----------------------------| ------------------ | ---------------| -------------------| --------------------------| ----------|
{{ range data -}}
| {{.db_instance_identifier}} | {{ .region }} | {{ .availability_zone }} |  {{ .sec_availability_zone }} |{{ .storage_encrypted }} | {{ .db_engine_name }} | {{ .db_instance_status }} | {{.delete_protection}} | {{.tagKeyValue}} |
{{ end -}}
###### Note: Please refer to 'Enable Delete Action' section in the [README](https://github.com/rightscale/policy_templates/tree/master/security/aws/rds_publicly_accessible) file to perform delete operation.
    EOS
    escalate $report_publicly_accessible_RDS_instances
    escalate $modify_publicly_accessible_RDS_instance_approval
    #Uncomment below five lines (remove '#') to enable Delete action.
    #escalate $delete_publicly_accessible_RDS_instances_approval
    #check logic_or(
    # eq(val(item, "delete_protection"), "YES"),
    # ne(val(item, "db_instance_status"), "available")
    #)
    check logic_not(val(item, "publicly_accessible"))
    #And comment above line (add '#' at beginning) when you enable Delete action.
    end
end

###############################################################################
# Escalation
###############################################################################

escalation "report_publicly_accessible_RDS_instances" do
  email $param_email
end

escalation "modify_publicly_accessible_RDS_instance_approval" do
  request_approval  do
    label "Approve RDS Public Access Rule Config Change"
    description "Approve escalation to run RightScale Cloud Workflow to public access rule config change for RDS instances"
    parameter "approval_reason" do
      type "string"
      label "Reason for Approval"
      description "Note: 'Public Access Config' will be modified for the RDS instances that has 'Available' state and can not be modified 'public access config' for other states like stopped, stopping & modifying etc.."
    end
  end
  run "remove_public_access_RDS", data
end

escalation "delete_publicly_accessible_RDS_instances_approval" do
  request_approval  do
    label "Approve Resource Deletion"
    description "Approve escalation to run RightScale Cloud Workflow to delete publicly accessible RDS-instances"
    parameter "approval_reason" do
      type "string"
      label "Reason for Approval"
      description "Note: RDS Instances with 'DB Instance Status' other than 'Available' state and instances with delete Protection enabled cannot be deleted"
    end
  end
  run "delete_publicly_acessible_RDS_instances", data
end

###############################################################################
# Cloud Workflow
###############################################################################

#https://docs.aws.amazon.com/AmazonRDS/latest/APIReference/API_ModifyDBInstance.html
define remove_public_access_RDS($data) return $all_responses do
  $$debug=true
  $all_responses = []
  foreach $item in $data do
   sub on_error: skip do
    $response = http_get(
       url: "https://rds."+$item["region"]+".amazonaws.com/?Action=ModifyDBInstance&Version=2014-10-31&PubliclyAccessible=false&DBInstanceIdentifier="+$item["db_instance_identifier"],
       "signature": { type: "aws" }
    )
    $all_responses << $response
    call sys_log('RDS instance config change response',to_s($response))
    end
  end
end

#https://docs.aws.amazon.com/AmazonRDS/latest/APIReference/API_DeleteDBInstance.html
#https://docs.aws.amazon.com/AmazonRDS/latest/APIReference/API_CreateDBClusterSnapshot.html
#https://docs.aws.amazon.com/AmazonRDS/latest/APIReference/API_DescribeDBClusterSnapshots.html
define delete_publicly_acessible_RDS_instances($data) return $all_responses do
  $$debug=true
  $all_responses = []
  foreach $item in $data do
    sub on_error: skip do
      if ($item['db_cluster_identifier'] != null)
       #Creating Cluster snapshot manually Since DB instance snapshot cannot be created directly for Aurora cluster DB instance.
        $create_cluster_snapshot = http_get(
          url: "https://rds."+$item["region"]+".amazonaws.com/?Action=CreateDBClusterSnapshot&Version=2014-10-31&DBClusterIdentifier="+$item["db_cluster_identifier"]+"&DBClusterSnapshotIdentifier="+$item["db_cluster_identifier"]+"-finalSnapshot",
          "signature": { type: "aws" }
        )
        $status = $create_cluster_snapshot['body']['CreateDBClusterSnapshotResponse']['CreateDBClusterSnapshotResult']['DBClusterSnapshot']['Status']

        $statusCheckCount = 0
        while ($status != "available") && ($statusCheckCount < 30) do
          sleep(30)
          $describe_cluster_snapshot = http_get(
            url: "https://rds."+$item["region"]+".amazonaws.com/?Action=DescribeDBClusterSnapshots&Version=2014-10-31&DBClusterSnapshotIdentifier="+$item["db_cluster_identifier"]+"-finalSnapshot",
            "signature": { type: "aws" }
          )
          $status = $describe_cluster_snapshot['body']['DescribeDBClusterSnapshotsResponse']['DescribeDBClusterSnapshotsResult']['DBClusterSnapshots']['DBClusterSnapshot']['Status']
          $statusCheckCount = $statusCheckCount + 1
        end

        if $status == "available"
          $response = http_get(
            url: "https://rds."+$item["region"]+".amazonaws.com/?Action=DeleteDBInstance&Version=2014-10-31&DeleteAutomatedBackups=false&DBInstanceIdentifier="+ $item["db_instance_identifier"],
            "signature": { type: "aws" }
          )
    end
      else
        #Delete non-Aurora DB instances were a DB snapshot gets created with name '<--db_instance_identifier-->-finalSnapshot' Ex mySQL-DBinstance--finalSnapshot before deleting DB instance.
        $response = http_get(
          url: "https://rds."+$item["region"]+".amazonaws.com/?Action=DeleteDBInstance&Version=2014-10-31&DeleteAutomatedBackups=false&DBInstanceIdentifier="+ $item["db_instance_identifier"]+"&FinalDBSnapshotIdentifier="+$item["db_instance_identifier"]+"-finalSnapshot",
          "signature": { type: "aws" }
        )
      end
      $all_responses << $response
      call sys_log('RDS instance delete response',to_s($response))
    end
  end
end

define sys_log($subject, $detail) do
  if $$debug
    rs_cm.audit_entries.create(
      notify: "None",
      audit_entry: {
        auditee_href: @@account,
        summary: "AWS Publicly Accessible RDS Instances Policy "+ $subject,
        detail: $detail
      }
    )
  end
end
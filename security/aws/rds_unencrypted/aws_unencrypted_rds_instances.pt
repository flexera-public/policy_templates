name "AWS Unencrypted RDS Instances"
rs_pt_ver 20180301
type "policy"
short_description "Report any Relational Database Service (RDS) instances that are unencrypted. See the [README](https://github.com/flexera-public/policy_templates/tree/master/security/aws/rds_unencrypted) and [docs.flexera.com/flexera/EN/Automation](https://docs.flexera.com/flexera/EN/Automation/AutomationGS.htm) to learn more."
long_description ""
category "Security"
severity "medium"
default_frequency "daily"
info(
  version: "4.0.0",
  provider: "AWS",
  service: "RDS",
  policy_set: "CIS",
  cce_id: "", # Not applicable
  cis_aws_foundations_securityhub: "", # Not applicable
  benchmark_control: "2.3.1",
  benchmark_version: "1.4.0",
  cis_controls: "[\"14.8v7\", \"3.11v8\"]",
  nist: "" # Not applicable
)

###############################################################################
# Parameters
###############################################################################

parameter "param_email" do
  type "list"
  category "Policy Settings"
  label "Email Addresses"
  description "Email addresses of the recipients you wish to notify when new incidents are created"
  default []
end

parameter "param_aws_account_number" do
  type "string"
  category "Policy Settings"
  label "Account Number"
  description "Leave blank; this is for automated use with Meta Policies. See README for more details."
  default ""
end

parameter "param_regions_allow_or_deny" do
  type "string"
  category "Filters"
  label "Allow/Deny Regions"
  description "Allow or Deny entered regions. See the README for more details"
  allowed_values "Allow", "Deny"
  default "Allow"
end

parameter "param_regions_list" do
  type "list"
  category "Filters"
  label "Allow/Deny Regions List"
  description "A list of allowed or denied regions. See the README for more details"
  allowed_pattern /^([a-zA-Z-_]+-[a-zA-Z0-9-_]+-[0-9-_]+,*|)+$/
  default []
end

parameter "param_exclude_tags" do
  type "list"
  label "Tags to ignore"
  description "List of tags that will exclude RDS Instances from being evaluated by this policy. Multiple tags are evaluated as an 'OR' condition. Tag keys or key/value pairs can be listed. Example: 'test,env=dev'"
end

parameter "param_automatic_action" do
  type "list"
  label "Automatic Actions"
  description "When this value is set, this policy will automatically take the selected action(s)"
  allowed_values ["Delete RDS Instances"]
  default []
end

###############################################################################
# Authentication
###############################################################################

credentials "auth_aws" do
  schemes "aws", "aws_sts"
  label "AWS"
  description "Select the AWS Credential from the list"
  tags "provider=aws"
  aws_account_number $param_aws_account_number
end

credentials "auth_flexera" do
  schemes "oauth2"
  label "Flexera"
  description "Select Flexera One OAuth2 credentials"
  tags "provider=flexera"
end

###############################################################################
# Pagination
###############################################################################

pagination "pagination_aws_rds" do
  get_page_marker do
    body_path "DescribeDBInstancesResult.NextMarker"
  end
  set_page_marker do
    query "Marker"
  end
end

###############################################################################
# Datasources & Scripts
###############################################################################

# Get applied policy metadata for use later
datasource "ds_applied_policy" do
  request do
    auth $auth_flexera
    host rs_governance_host
    path join(["/api/governance/projects/", rs_project_id, "/applied_policies/", policy_id])
    header "Api-Version", "1.0"
  end
end

# Get region-specific Flexera API endpoints
datasource "ds_flexera_api_hosts" do
  run_script $js_flexera_api_hosts, rs_optima_host
end

script "js_flexera_api_hosts", type: "javascript" do
  parameters "rs_optima_host"
  result "result"
  code <<-EOS
  host_table = {
    "api.optima.flexeraeng.com": {
      flexera: "api.flexera.com",
      fsm: "api.fsm.flexeraeng.com"
    },
    "api.optima-eu.flexeraeng.com": {
      flexera: "api.flexera.eu",
      fsm: "api.fsm-eu.flexeraeng.com"
    },
    "api.optima-apac.flexeraeng.com": {
      flexera: "api.flexera.au",
      fsm: "api.fsm-apac.flexeraeng.com"
    }
  }

  result = host_table[rs_optima_host]
EOS
end

# Get AWS account info
datasource "ds_cloud_vendor_accounts" do
  request do
    auth $auth_flexera
    host val($ds_flexera_api_hosts, 'flexera')
    path join(["/finops-analytics/v1/orgs/", rs_org_id, "/cloud-vendor-accounts"])
    header "Api-Version", "1.0"
  end
  result do
    encoding "json"
    collect jmes_path(response, "values[*]") do
      field "id", jmes_path(col_item, "aws.accountId")
      field "name", jmes_path(col_item, "name")
      field "tags", jmes_path(col_item, "tags")
    end
  end
end

datasource "ds_get_caller_identity" do
  request do
    auth $auth_aws
    verb "GET"
    host "sts.amazonaws.com"
    path "/"
    query "Action", "GetCallerIdentity"
    query "Version", "2011-06-15"
    header "User-Agent", "RS Policies"
  end
  result do
    encoding "xml"
    collect xpath(response, "//GetCallerIdentityResponse/GetCallerIdentityResult") do
      field "account", xpath(col_item, "Account")
    end
  end
end

datasource "ds_aws_account" do
  run_script $js_aws_account, $ds_cloud_vendor_accounts, $ds_get_caller_identity
end

script "js_aws_account", type:"javascript" do
  parameters "ds_cloud_vendor_accounts", "ds_get_caller_identity"
  result "result"
  code <<-EOS
  result = _.find(ds_cloud_vendor_accounts, function(account) {
    return account['id'] == ds_get_caller_identity[0]['account']
  })

  // This is in case the API does not return the relevant account info
  if (result == undefined) {
    result = {
      id: ds_get_caller_identity[0]['account'],
      name: "",
      tags: {}
    }
  }
EOS
end

datasource "ds_describe_regions" do
  request do
    auth $auth_aws
    verb "GET"
    host "ec2.amazonaws.com"
    path "/"
    query "Action", "DescribeRegions"
    query "Version", "2016-11-15"
    query "Filter.1.Name", "opt-in-status"
    query "Filter.1.Value.1", "opt-in-not-required"
    query "Filter.1.Value.2", "opted-in"
    # Header X-Meta-Flexera has no affect on datasource query, but is required for Meta Policies
    # Forces `ds_is_deleted` datasource to run first during policy execution
    header "Meta-Flexera", val($ds_is_deleted, "path")
  end
  result do
    encoding "xml"
    collect xpath(response, "//DescribeRegionsResponse/regionInfo/item", "array") do
      field "region", xpath(col_item, "regionName")
    end
  end
end

datasource "ds_regions" do
  run_script $js_regions, $ds_describe_regions, $param_regions_list, $param_regions_allow_or_deny
end

script "js_regions", type:"javascript" do
  parameters "ds_describe_regions", "param_regions_list", "param_regions_allow_or_deny"
  result "result"
  code <<-EOS
  allow_deny_test = { "Allow": true, "Deny": false }

  if (param_regions_list.length > 0) {
    result = _.filter(ds_describe_regions, function(item) {
      return _.contains(param_regions_list, item['region']) == allow_deny_test[param_regions_allow_or_deny]
    })
  } else {
    result = ds_describe_regions
  }
EOS
end

#Get the list of All RDS Instances across all regions.
#https://docs.aws.amazon.com/AmazonRDS/latest/APIReference/API_DescribeDBInstances.html
datasource "ds_rds_instances_list" do
  iterate $ds_regions
  request do
    auth $auth_aws
    verb "GET"
    host join(["rds.",val(iter_item,"region"),".amazonaws.com"])
    path "/"
    pagination $pagination_aws_rds
    query "Action", "DescribeDBInstances"
    query "Version", "2014-10-31"
    header "Accept", "application/json"
  end
  result do
    encoding "json"
    collect jmes_path(response, "DescribeDBInstancesResponse.DescribeDBInstancesResult.DBInstances[*]") do
      field "db_instance_identifier", jmes_path(col_item, "DBInstanceIdentifier")
      field "region", val(iter_item,"region")
      field "availability_zone", jmes_path(col_item, "AvailabilityZone")
      field "sec_availability_zone", jmes_path(col_item, "SecondaryAvailabilityZone")
      field "publicly_accessible", jmes_path(col_item, "PubliclyAccessible")
      field "db_engine_name", jmes_path(col_item, "Engine")
      field "db_instance_status", jmes_path(col_item,"DBInstanceStatus")
      field "delete_protection", jmes_path(col_item, "DeletionProtection")
      field "storage_encrypted", jmes_path(col_item, "StorageEncrypted")
      field "db_instance_arn", jmes_path(col_item, "DBInstanceArn")
      field "db_cluster_identifier", jmes_path(col_item,"DBClusterIdentifier")
    end
  end
end

#Get respective tags for all RDS instances
#https://docs.aws.amazon.com/AmazonRDS/latest/APIReference/API_ListTagsForResource.html
datasource "ds_rds_list_with_tags" do
  iterate $ds_rds_instances_list
  request do
    auth $auth_aws
    verb "GET"
    host join(["rds.",val(iter_item,"region"),".amazonaws.com"])
    path "/"
    pagination $pagination_aws_rds
    query "Action", "ListTagsForResource"
    query "Version", "2014-10-31"
    query "ResourceName", val(iter_item, "db_instance_arn")
    header "Accept", "application/json"
  end
  result do
    encoding "json"
    collect jmes_path(response, "ListTagsForResourceResponse.ListTagsForResourceResult") do
      field "db_instance_identifier", val(iter_item, "db_instance_identifier")
      field "region", val(iter_item,"region")
      field "availability_zone", val(iter_item, "availability_zone")
      field "sec_availability_zone", val(iter_item, "sec_availability_zone")
      field "publicly_accessible", val(iter_item, "publicly_accessible")
      field "db_engine_name", val(iter_item,"db_engine_name")
      field "db_instance_status", val(iter_item,"db_instance_status")
      field "delete_protection", val(iter_item, "delete_protection")
      field "tags" do
        collect jmes_path(col_item, "TagList") do
          field "tag_key", jmes_path(col_item, "Key")
          field "tag_value", jmes_path(col_item, "Value")
        end
      end
      field "storage_encrypted", val(iter_item, "storage_encrypted")
      field "db_instance_arn", val(iter_item, "db_instance_arn")
      field "db_cluster_identifier", val(iter_item,"db_cluster_identifier")
    end
  end
end

datasource "ds_rds_unencrypted_instance_list" do
  run_script $js_rds_filter_map, $ds_rds_list_with_tags, $param_exclude_tags
end

#Process the response data, check for the tags and generate a list of unencrypted RDS instances
script "js_rds_filter_map", type: "javascript" do
  parameters "ds_rds_list_with_tags", "param_exclude_tags"
  result "content"
  code <<-EOS
    var param_exclude_tags_lower=[];
    for(var j=0; j < param_exclude_tags.length; j++){
      param_exclude_tags_lower[j]=param_exclude_tags[j].toString().toLowerCase();
    }

    var content=[]
    for(var i=0; i<ds_rds_list_with_tags.length; i++){
      rds=ds_rds_list_with_tags[i]

      //Check, if the tag present in entered param_exclude_tags, ignore the RDS instance if the tag matches/present.
      var tags = rds['tags']
      var is_tag_matched=false
      var tag_key_value=""
      for(var j=0; j < tags.length; j++){
        tag = tags[j]
        if((param_exclude_tags_lower.indexOf((tag['tag_key']).toLowerCase()) !== -1) || (param_exclude_tags_lower.indexOf((tag['tag_key']+'='+tag['tag_value']).toLowerCase()) !== -1)){
          is_tag_matched = true;
        }
        // Constructing tags with comma separated to display in detail_template
        if((tag['tag_value']).length > 0){
          tag_key_value = tag_key_value + ', '+ tag['tag_key']+'='+tag['tag_value']
        } else {
          tag_key_value = tag_key_value + ', '+ tag['tag_key']
        }
      }

      var publicly_accessible = rds['publicly_accessible'];
      if(publicly_accessible === true){
        publicly_accessible = 'Yes';
      }else{
        publicly_accessible = 'No';
      }

      var delete_protection = rds['delete_protection'];
      if(delete_protection === true){
        delete_protection = 'Yes';
      }else{
        delete_protection = 'No';
      }

      //If the RDS instance tag does not match with entered param_exclude_tags, then check if RDS instance is Unencrypted.
      if(!(is_tag_matched) && (rds['storage_encrypted'] === false)){
        content.push({
          id: rds['db_instance_identifier'],
          region: rds['region'],
          availability_zone: rds['availability_zone'],
          sec_availability_zone: rds['sec_availability_zone'],
          publicly_accessible: publicly_accessible,
          db_engine_name: rds['db_engine_name'],
          db_instance_status: rds['db_instance_status'],
          delete_protection: delete_protection,
          tag_key_value:(tag_key_value.slice(2)),
          db_instance_arn: rds['db_instance_arn'],
          db_cluster_identifier: rds['db_cluster_identifier']
          storage_encrypted: rds['storage_encrypted']
        })
      }
    }
  content = _.sortBy(content,'id')
  content = _.sortBy(content,'region')
  content = _.sortBy(content,'availability_zone')
  EOS
end

###############################################################################
# Policy
###############################################################################

policy "pol_rds_instance_list" do
  validate_each $ds_rds_unencrypted_instance_list do
    summary_template "{{ with index data 0 }}{{ .policy_name }}{{ end }}: {{ len data }} unencrypted RDS Instances Found in AWS"
    escalate $esc_email
    escalate $esc_delete
    check logic_or( eq(val(item, "delete_protection"), "YES"), ne(val(item, "db_instance_status"), "available"))
    export do
      resource_level true
      field "id" do
        label "RDS Instance Name"
      end
      field "region" do
        label "Region"
      end
      field "availability_zone" do
        label "Availability Zone"
      end
      field "sec_availability_zone" do
        label "Secondary Availability Zone"
      end
      field "publicly_accessible" do
        label "Publicly Accessible"
      end
      field "db_engine_name" do
        label "DB Engine Name"
      end
      field "db_instance_status" do
        label "DB Instance Status"
      end
      field "delete_protection" do
        label "Delete Protection Enabled"
      end
      field "tag_key_value" do
        label "Tags"
      end
      field "db_cluster_identifier" do
        label "DB Cluster Identifier"
      end
    end
  end
end

###############################################################################
# Escalations
###############################################################################

escalation "esc_email" do
  automatic true
  label "Send Email"
  description "Send incident email"
  email $param_email
end

escalation "esc_delete" do
  automatic contains($param_automatic_action, "Delete RDS Instances")
  label "Delete RDS Instance"
  description "Delete selected RDS Instances"
  run "delete_unencrypted_RDS_instances", data, rs_optima_host
end

###############################################################################
# Cloud Workflow
###############################################################################

#https://docs.aws.amazon.com/AmazonRDS/latest/APIReference/API_CreateDBClusterSnapshot.html
#https://docs.aws.amazon.com/AmazonRDS/latest/APIReference/API_DescribeDBClusterSnapshots.html
#https://docs.aws.amazon.com/AmazonRDS/latest/APIReference/API_DeleteDBInstance.html
define delete_unencrypted_RDS_instances($data, $$rs_optima_host) return $all_responses do
  $$debug=true
  $all_responses = []
  foreach $item in $data do
    sub on_error: skip do
      if $item['db_cluster_identifier'] != null
        #Creating Cluster snapshot manually Since DB instance snapshot cannot be created directly for Aurora cluster DB instance.
        $create_cluster_snapshot = http_request(
          auth: $$auth_aws,
          https: true,
          verb: "get",
          href: "/",
          host: "rds."+$item["region"]+".amazonaws.com",
          query_strings: {
            "Action": "CreateDBClusterSnapshot",
            "Version": "2014-10-31",
            "DBClusterIdentifier": $item["db_cluster_identifier"],
            "DBClusterSnapshotIdentifier": $item["db_cluster_identifier"]+"-finalSnapshot"
          }
        )
        $status = $create_cluster_snapshot['body']['CreateDBClusterSnapshotResponse']['CreateDBClusterSnapshotResult']['DBClusterSnapshot']['Status']

        $statusCheckCount = 0
        while ($status != "available") && ($statusCheckCount < 30) do
          sleep(30)
          $describe_cluster_snapshot = http_request(
            auth: $$auth_aws,
            https: true,
            verb: "get",
            href: "/",
            host: "rds."+$item["region"]+".amazonaws.com",
            query_strings: {
              "Action": "DescribeDBClusterSnapshots",
              "Version": "2014-10-31",
              "DBClusterSnapshotIdentifier": $item["db_cluster_identifier"]+"-finalSnapshot"
            }
          )
          $status = $describe_cluster_snapshot['body']['DescribeDBClusterSnapshotsResponse']['DescribeDBClusterSnapshotsResult']['DBClusterSnapshots']['DBClusterSnapshot']['Status']
          $statusCheckCount = $statusCheckCount + 1
        end

        if $status == "available"
          $response = http_request(
            auth: $$auth_aws,
            https: true,
            verb: "get",
            href: "/",
            host: "rds."+$item["region"]+".amazonaws.com",
            query_strings: {
              "Action": "DeleteDBInstance",
              "Version": "2014-10-31",
              "DeleteAutomatedBackups": $item["id"]
            }
          )
        end
      else
        #Delete non-Aurora DB instances were a DB snapshot gets created with name '<--id-->-finalSnapshot' Ex mySQL-DBinstance--finalSnapshot before deleting DB instance.
        $response = http_request(
          auth: $$auth_aws,
          https: true,
          verb: "get",
          href: "/",
          host: "rds."+$item["region"]+".amazonaws.com",
          query_strings: {
            "Action": "DeleteDBInstance",
            "Version": "2014-10-31",
            "DeleteAutomatedBackups": "false",
            "DBInstanceIdentifier": $item["id"],
            "FinalDBSnapshotIdentifier": $item["id"]+"-finalSnapshot"
          }
        )
      end
      $all_responses << $response
      call sys_log('RDS instance delete response',to_s($response))
    end
  end
end

define sys_log($subject, $detail) do
  # Create empty errors array if doesn't already exist
  if !$$errors
    $$errors = []
  end
  # Check if debug is enabled
  if $$debug
    # Append to global $$errors
    # This is the suggested way to capture errors
    $$errors << "Unexpected error for " + $subject + "\n  " + to_s($detail)
    # If Flexera NAM Zone, create audit_entries [to be deprecated]
    # This is the legacy method for capturing errors and only supported on Flexera NAM
    if $$rs_optima_host == "api.optima.flexeraeng.com"
      # skip_error_and_append is used to catch error if rs_cm.audit_entries.create fails unexpectedly
      $task_label = "Creating audit entry for " + $subject
      sub task_label: $task, on_error: skip_error_and_append($task) do
        rs_cm.audit_entries.create(
          notify: "None",
          audit_entry: {
            auditee_href: @@account,
            summary: $subject,
            detail: $detail
          }
        )
      end # End sub on_error
    end # End if rs_optima_host
  end # End if debug is enabled
end

define skip_error_and_append($subject) do
  $$errors << "Unexpected error for " + $subject + "\n  " + to_s($_error)
  $_error_behavior = "skip"
end

###############################################################################
# Meta Policy [alpha]
# Not intended to be modified or used by policy developers
###############################################################################

# If the meta_parent_policy_id is not set it will evaluate to an empty string and we will look for the policy itself,
# if it is set we will look for the parent policy.
datasource "ds_get_policy" do
  request do
    auth $auth_flexera
    host rs_governance_host
    ignore_status [404]
    path join(["/api/governance/projects/", rs_project_id, "/applied_policies/", switch(ne(meta_parent_policy_id, ""), meta_parent_policy_id, policy_id)])
    header "Api-Version", "1.0"
  end
  result do
    encoding "json"
    field "id", jmes_path(response, "id")
  end
end

datasource "ds_parent_policy_terminated" do
  run_script $js_decide_if_self_terminate, $ds_get_policy, policy_id, meta_parent_policy_id
end

# If the policy was applied by a meta_parent_policy we confirm it exists if it doesn't we confirm we are deleting
# This information is used in two places:
# - determining whether or not we make a delete call
# - determining if we should create an incident (we don't want to create an incident on the run where we terminate)
script "js_decide_if_self_terminate", type: "javascript" do
  parameters "found", "self_policy_id", "meta_parent_policy_id"
  result "result"
  code <<-EOS
  var result
  if (meta_parent_policy_id != "" && found.id == undefined) {
    result = true
  } else {
    result = false
  }
  EOS
end

# Two potentials ways to set this up:
# - this way and make a unneeded 'get' request when not deleting
# - make the delete request an interate and have it iterate over an empty array when not deleting and an array with one item when deleting
script "js_make_terminate_request", type: "javascript" do
  parameters "should_delete", "policy_id", "rs_project_id", "rs_governance_host"
  result "request"
  code <<-EOS

  var request = {
    auth:  'auth_flexera',
    host: rs_governance_host,
    path: "/api/governance/projects/" + rs_project_id + "/applied_policies/" + policy_id,
    headers: {
      "API-Version": "1.0",
      "Content-Type":"application/json"
    },
  }

  if (should_delete) {
    request.verb = 'DELETE'
  }
  EOS
end

datasource "ds_terminate_self" do
  request do
    run_script $js_make_terminate_request, $ds_parent_policy_terminated, policy_id, rs_project_id, rs_governance_host
  end
end

datasource "ds_is_deleted" do
  run_script $js_check_deleted, $ds_terminate_self
end

# This is just a way to have the check delete request connect to the farthest leaf from policy.
# We want the delete check to the first thing the policy does to avoid the policy erroring before it can decide whether or not it needs to self terminate
# Example a customer deletes a credential and then terminates the parent policy. We still want the children to self terminate
# The only way I could see this not happening is if the user who applied the parent_meta_policy was offboarded or lost policy access, the policies who are impersonating the user
# would not have access to self-terminate
# It may be useful for the backend to enable a mass terminate at some point for all meta_child_policies associated with an id.
script "js_check_deleted", type: "javascript" do
  parameters "response"
  result "result"
  code <<-EOS
  result = {"path":"/"}
  EOS
end

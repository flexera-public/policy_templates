name "AWS Unencrypted RDS Instances"
rs_pt_ver 20180301
type "policy"
short_description "Report any Relational Database Service (RDS) instances that are unencrypted. \n See the [README](https://github.com/rightscale/policy_templates/tree/master/security/aws/rds_unencrypted) and [docs.rightscale.com/policies](http://docs.rightscale.com/policies/) to learn more."
long_description ""
category "Security"
severity "medium"
info(
  version: "2.0",
  provider: "AWS",
  service: "RDS",
  policy_set: ""
)

###############################################################################
# Permissions
###############################################################################

permission "perm_read_creds" do
  actions   "rs_cm.show_sensitive","rs_cm.index_sensitive"
  resources "rs_cm.credentials"
end

###############################################################################
# User inputs
###############################################################################

parameter "param_email" do
  type "list"
  label "Email addresses to notify"
  description "Email addresses of the recipients you wish to notify when new incidents are created"
end

parameter "param_exclude_tags" do
  type "list"
  label "Tags to ignore"
  description "List of tags that will exclude RDS Instances from being evaluated by this policy. Multiple tags are evaluated as an 'OR' condition. Tag keys or key/value pairs can be listed. Example: 'test,env=dev'"
end

###############################################################################
# Authentication
###############################################################################

credentials "auth_aws" do
  schemes "aws","aws_sts"
  label "AWS"
  description "Select the AWS Credential from the list"
  tags "provider=aws"
end

###############################################################################
# Pagination
###############################################################################

pagination "rds_pagination" do
  get_page_marker do
    body_path "DescribeDBInstancesResult.NextMarker"
  end
  set_page_marker do
    query "Marker"
  end
end

###############################################################################
# Datasources
###############################################################################

#Generates list of Regions
datasource "ds_regions_list" do
  request do
    verb "GET"
    host "raw.githubusercontent.com"
    path "/rightscale/policy_templates/master/data/aws/regions.json"
    header "User-Agent", "RS Policies"
  end
end

#Get the list of All RDS Instances across all regions.
#https://docs.aws.amazon.com/AmazonRDS/latest/APIReference/API_DescribeDBInstances.html
datasource "ds_rds_instances_list" do
  iterate $ds_regions_list
  request do
    auth $auth_aws
    verb "GET"   
    host join(["rds.",val(iter_item,"region"),".amazonaws.com"])
    path "/"
    pagination $rds_pagination
    query "Action", "DescribeDBInstances"
    query "Version", "2014-10-31"
    header "Accept", "application/json"
  end
  result do
    encoding "json"
    collect jmes_path(response, "DescribeDBInstancesResponse.DescribeDBInstancesResult.DBInstances[*]") do
      field "db_instance_identifier", jmes_path(col_item, "DBInstanceIdentifier")
      field "region", val(iter_item,"region")
      field "availability_zone", jmes_path(col_item, "AvailabilityZone")
      field "sec_availability_zone", jmes_path(col_item, "SecondaryAvailabilityZone")
      field "publicly_accessible", jmes_path(col_item, "PubliclyAccessible")
      field "db_engine_name", jmes_path(col_item, "Engine")
      field "db_instance_status", jmes_path(col_item,"DBInstanceStatus")
      field "delete_protection", jmes_path(col_item, "DeletionProtection")
      field "storage_encrypted", jmes_path(col_item, "StorageEncrypted")
      field "db_instance_arn", jmes_path(col_item, "DBInstanceArn")
      field "db_cluster_identifier", jmes_path(col_item,"DBClusterIdentifier")
    end
  end
end

#Get respective tags for all RDS instances
#https://docs.aws.amazon.com/AmazonRDS/latest/APIReference/API_ListTagsForResource.html
datasource "ds_rds_list_with_tags" do
  iterate $ds_rds_instances_list
  request do
    auth $auth_aws
    verb "GET"   
    host join(["rds.",val(iter_item,"region"),".amazonaws.com"])
    path "/"
    pagination $rds_pagination
    query "Action", "ListTagsForResource"
    query "Version", "2014-10-31"
    query "ResourceName", val(iter_item, "db_instance_arn")
    header "Accept", "application/json"
  end
  result do
    encoding "json"
    collect jmes_path(response, "ListTagsForResourceResponse.ListTagsForResourceResult") do
      field "db_instance_identifier", val(iter_item, "db_instance_identifier")
      field "region", val(iter_item,"region")
      field "availability_zone", val(iter_item, "availability_zone")
      field "sec_availability_zone", val(iter_item, "sec_availability_zone")
      field "publicly_accessible", val(iter_item, "publicly_accessible")
      field "db_engine_name", val(iter_item,"db_engine_name")
      field "db_instance_status", val(iter_item,"db_instance_status")
      field "delete_protection", val(iter_item, "delete_protection")
      field "tags" do
        collect jmes_path(col_item, "TagList") do
          field "tag_key", jmes_path(col_item, "Key")
          field "tag_value", jmes_path(col_item, "Value")
        end
      end
      field "storage_encrypted", val(iter_item, "storage_encrypted")
      field "db_instance_arn", val(iter_item, "db_instance_arn")
      field "db_cluster_identifier", val(iter_item,"db_cluster_identifier")
    end
  end
end

datasource "ds_rds_unencrypted_instance_list" do
  run_script $js_rds_filter_map, $ds_rds_list_with_tags, $param_exclude_tags
end

###############################################################################
# Scripts
###############################################################################

#Process the response data, check for the tags and generate a list of unencrypted RDS instances
script "js_rds_filter_map", type: "javascript" do
  parameters "ds_rds_list_with_tags", "param_exclude_tags"
  result "content"
  code <<-EOS
    var param_exclude_tags_lower=[];
    for(var j=0; j < param_exclude_tags.length; j++){
      param_exclude_tags_lower[j]=param_exclude_tags[j].toString().toLowerCase();
    }

    var content=[]
    for(var i=0; i<ds_rds_list_with_tags.length; i++){
      rds=ds_rds_list_with_tags[i]

      //Check, if the tag present in entered param_exclude_tags, ignore the RDS instance if the tag matches/present.
      var tags = rds['tags']
      var is_tag_matched=false
      var tag_key_value=""
      for(var j=0; j < tags.length; j++){
        tag = tags[j]
        if((param_exclude_tags_lower.indexOf((tag['tag_key']).toLowerCase()) !== -1) || (param_exclude_tags_lower.indexOf((tag['tag_key']+'='+tag['tag_value']).toLowerCase()) !== -1)){
          is_tag_matched = true;
        }
        // Constructing tags with comma separated to display in detail_template
        if((tag['tag_value']).length > 0){
          tag_key_value = tag_key_value + ', '+ tag['tag_key']+'='+tag['tag_value']
        }else{
          tag_key_value = tag_key_value + ', '+ tag['tag_key']
        }
      }

      var publicly_accessible = rds['publicly_accessible'];
      if(publicly_accessible === true){
        publicly_accessible = 'Yes';
      }else{
        publicly_accessible = 'No';
      }

      var delete_protection = rds['delete_protection'];
      if(delete_protection === true){
        delete_protection = 'Yes';
      }else{
        delete_protection = 'No';
      }

      //If the RDS instance tag does not match with entered param_exclude_tags, then check if RDS instance is Unencrypted.
      if(!(is_tag_matched) && (rds['storage_encrypted'] === false)){
        content.push({
          db_instance_identifier: rds['db_instance_identifier'],
          region: rds['region'],
          availability_zone: rds['availability_zone'],
          sec_availability_zone: rds['sec_availability_zone'],
          publicly_accessible: publicly_accessible,
          db_engine_name: rds['db_engine_name'],
          db_instance_status: rds['db_instance_status'],
          delete_protection: delete_protection,
          tag_key_value:(tag_key_value.slice(2)),
          db_instance_arn: rds['db_instance_arn'],
          db_cluster_identifier: rds['db_cluster_identifier']
          storage_encrypted: rds['storage_encrypted']
        })
      }
    }
  EOS
end

###############################################################################
# Policy
###############################################################################

policy "policy_rds_instance_list" do
  validate_each $ds_rds_unencrypted_instance_list do
    summary_template "{{ rs_project_name }} (Account ID: {{ rs_project_id }}): {{ len data }} unencrypted RDS Instances Found in AWS"
    detail_template <<-EOS
# List of unencrypted RDS Instances
| RDS Instance Name | Region | Availability Zone | Secondary Availability Zone | Publicly Accessible | DB Engine Name | DB Instance Status | Delete Protection Enabled | TAGs |
| ----------------- | ------ | ----------------- | --------------------------- | ------------------- | -------------- | ------------------ | ------------------------- | ---- |
{{ range data -}}
| {{.db_instance_identifier}} | {{ .region }} | {{ .availability_zone }} |  {{ .sec_availability_zone }} |{{ .publicly_accessible }} | {{ .db_engine_name }} | {{ .db_instance_status }} | {{.delete_protection}} | {{.tag_key_value}} |
{{ end -}}
###### Note: Please refer to 'Enable Delete Action' section in the [README](https://github.com/rightscale/policy_templates/tree/master/security/aws/rds_unencrypted) file to perform delete operation.
    EOS
    escalate $report_unencrypted_RDS_instances
    #Uncomment below five lines (remove '#') to enable Delete action.
    #escalate $delete_unencrypted_RDS_instances_approval
    #check logic_or(
    #  eq(val(item, "delete_protection"), "YES"),
    #  ne(val(item, "db_instance_status"), "available")
    #)
	check val(item, "storage_encrypted")
	#And comment above line (add '#' at beginning) when you enable Delete action. 
  end
end
###############################################################################
# Escalations
###############################################################################

escalation "report_unencrypted_RDS_instances" do
  email $param_email
end

escalation "delete_unencrypted_RDS_instances_approval" do
  request_approval  do
    label "Approve Resource Deletion"
    description "Approve escalation to run RightScale Cloud Workflow to delete unencrypted RDS-instances"
    parameter "approval_reason" do
      type "string"
      label "Reason for Approval"
      description "[Note]: RDS Instances with 'DB Instance Status' other than 'Available' and RDS instances with 'delete Protection enabled' cannot be deleted"
    end
  end
  run "delete_unencrypted_RDS_instances", data
end

###############################################################################
# Cloud Workflow
###############################################################################

#https://docs.aws.amazon.com/AmazonRDS/latest/APIReference/API_CreateDBClusterSnapshot.html
#https://docs.aws.amazon.com/AmazonRDS/latest/APIReference/API_DescribeDBClusterSnapshots.html
#https://docs.aws.amazon.com/AmazonRDS/latest/APIReference/API_DeleteDBInstance.html
define delete_unencrypted_RDS_instances($data) return $all_responses do
  $$debug=true
  $all_responses = []
  foreach $item in $data do
    sub on_error: skip do
      if $item['db_cluster_identifier'] != null
        #Creating Cluster snapshot manually Since DB instance snapshot cannot be created directly for Aurora cluster DB instance.
        $create_cluster_snapshot = http_request(
		  auth: $$auth_aws,
		  https: true,
		  verb: "get",
		  href: "/",
		  host: "rds."+$item["region"]+".amazonaws.com",
		  query_strings: {
            "Action": "CreateDBClusterSnapshot",
            "Version": "2014-10-31",
            "DBClusterIdentifier": $item["db_cluster_identifier"],
			"DBClusterSnapshotIdentifier": $item["db_cluster_identifier"]+"-finalSnapshot"			
          }
        )
        $status = $create_cluster_snapshot['body']['CreateDBClusterSnapshotResponse']['CreateDBClusterSnapshotResult']['DBClusterSnapshot']['Status']

        $statusCheckCount = 0
        while ($status != "available") && ($statusCheckCount < 30) do
          sleep(30)
          $describe_cluster_snapshot = http_request(
            auth: $$auth_aws,
            https: true,
            verb: "get",
            href: "/",
            host: "rds."+$item["region"]+".amazonaws.com",
            query_strings: {
              "Action": "DescribeDBClusterSnapshots",
              "Version": "2014-10-31",
              "DBClusterSnapshotIdentifier": $item["db_cluster_identifier"]+"-finalSnapshot"			
            }
          )
          $status = $describe_cluster_snapshot['body']['DescribeDBClusterSnapshotsResponse']['DescribeDBClusterSnapshotsResult']['DBClusterSnapshots']['DBClusterSnapshot']['Status']
          $statusCheckCount = $statusCheckCount + 1
        end

        if $status == "available"
		  $response = http_request(
            auth: $$auth_aws,
            https: true,
            verb: "get",
            href: "/",
            host: "rds."+$item["region"]+".amazonaws.com",
            query_strings: {
              "Action": "DeleteDBInstance",
              "Version": "2014-10-31",
              "DeleteAutomatedBackups": $item["db_instance_identifier"]			
            }
          )
		end  
      else
        #Delete non-Aurora DB instances were a DB snapshot gets created with name '<--db_instance_identifier-->-finalSnapshot' Ex mySQL-DBinstance--finalSnapshot before deleting DB instance.
        $response = http_request(
          auth: $$auth_aws,
          https: true,
          verb: "get",
          href: "/",
          host: "rds."+$item["region"]+".amazonaws.com",
          query_strings: {
            "Action": "DeleteDBInstance",
            "Version": "2014-10-31",
            "DeleteAutomatedBackups": "false",
            "DBInstanceIdentifier": $item["db_instance_identifier"],
            "FinalDBSnapshotIdentifier": $item["db_instance_identifier"]+"-finalSnapshot"
          }
        )
      end
      $all_responses << $response
      call sys_log('RDS instance delete response',to_s($response))
    end
  end
end

define sys_log($subject, $detail) do
  if $$debug
    rs_cm.audit_entries.create(
      notify: "None",
      audit_entry: {
        auditee_href: @@account,
        summary: "AWS unencrypted RDS Instances Policy "+ $subject,
        detail: $detail
      }
    )
  end
end

name "AWS Unencrypted RDS Instances"
rs_pt_ver 20180301
type "policy"
short_description "Report any Relational Database Service (RDS) instances that are unencrypted. \n See the [README](https://github.com/rightscale/policy_templates/tree/master/security/aws/rds_unencrypted) and [docs.rightscale.com/policies](http://docs.rightscale.com/policies/) to learn more."
long_description "Version: 1.0"
category "Security"
severity "medium"

###############################################################################
# Permissions
###############################################################################

permission "perm_read_creds" do
  actions   "rs_cm.show_sensitive","rs_cm.index_sensitive"
  resources "rs_cm.credentials"
end

###############################################################################
# User inputs
###############################################################################

parameter "param_email" do
  type "list"
  label "Email addresses to notify"
  description "Email addresses of the recipients you wish to notify when new incidents are created"
end

parameter "param_exclude_tags" do
  type "list"
  label "Tags to ignore"
  description "List of tags that will exclude RDS Instances from being evaluated by this policy. Multiple tags are evaluated as an 'OR' condition. Tag keys or key/value pairs can be listed. Example: 'test,env=dev'"
end

###############################################################################
# Authentication
###############################################################################

auth "auth_us_east_1", type: "aws" do
  version "4"
  service "rds"
  region 'us-east-1'
  access_key cred("AWS_ACCESS_KEY_ID")
  secret_key cred("AWS_SECRET_ACCESS_KEY")
end

auth "auth_us_east_2", type: "aws" do
  version "4"
  service "rds"
  region 'us-east-2'
  access_key cred("AWS_ACCESS_KEY_ID")
  secret_key cred("AWS_SECRET_ACCESS_KEY")
end

auth "auth_us_west_1", type: "aws" do
  version "4"
  service "rds"
  region 'us-west-1'
  access_key cred("AWS_ACCESS_KEY_ID")
  secret_key cred("AWS_SECRET_ACCESS_KEY")
end

auth "auth_us_west_2", type: "aws" do
  version "4"
  service "rds"
  region 'us-west-2'
  access_key cred("AWS_ACCESS_KEY_ID")
  secret_key cred("AWS_SECRET_ACCESS_KEY")
end

auth "auth_ap_east_1", type: "aws" do
  version 4
  service "rds"
  region 'ap-east-1'
  access_key cred('AWS_ACCESS_KEY_ID')
  secret_key cred('AWS_SECRET_ACCESS_KEY')
end

auth "auth_ap_south_1", type: "aws" do
  version 4
  service "rds"
  region 'ap-south-1'
  access_key cred('AWS_ACCESS_KEY_ID')
  secret_key cred('AWS_SECRET_ACCESS_KEY')
end

auth "auth_ap_northeast_2", type: "aws" do
  version 4
  service "rds"
  region 'ap-northeast-2'
  access_key cred('AWS_ACCESS_KEY_ID')
  secret_key cred('AWS_SECRET_ACCESS_KEY')
end

auth "auth_ap_southeast_1", type: "aws" do
  version 4
  service "rds"
  region 'ap-southeast-1'
  access_key cred('AWS_ACCESS_KEY_ID')
  secret_key cred('AWS_SECRET_ACCESS_KEY')
end

auth "auth_ap_southeast_2", type: "aws" do
  version 4
  service "rds"
  region 'ap-southeast-2'
  access_key cred('AWS_ACCESS_KEY_ID')
  secret_key cred('AWS_SECRET_ACCESS_KEY')
end

auth "auth_ap_northeast_1", type: "aws" do
  version 4
  service "rds"
  region 'ap-northeast-1'
  access_key cred('AWS_ACCESS_KEY_ID')
  secret_key cred('AWS_SECRET_ACCESS_KEY')
end

auth "auth_ca_central_1", type: "aws" do
  version 4
  service "rds"
  region 'ca-central-1'
  access_key cred('AWS_ACCESS_KEY_ID')
  secret_key cred('AWS_SECRET_ACCESS_KEY')
end

auth "auth_eu_central_1", type: "aws" do
  version 4
  service "rds"
  region 'eu-central-1'
  access_key cred('AWS_ACCESS_KEY_ID')
  secret_key cred('AWS_SECRET_ACCESS_KEY')
end

auth "auth_eu_west_1", type: "aws" do
  version 4
  service "rds"
  region 'eu-west-1'
  access_key cred('AWS_ACCESS_KEY_ID')
  secret_key cred('AWS_SECRET_ACCESS_KEY')
end

auth "auth_eu_west_2", type: "aws" do
  version 4
  service "rds"
  region 'eu-west-2'
  access_key cred('AWS_ACCESS_KEY_ID')
  secret_key cred('AWS_SECRET_ACCESS_KEY')
end

auth "auth_eu_west_3", type: "aws" do
  version 4
  service "rds"
  region 'eu-west-3'
  access_key cred('AWS_ACCESS_KEY_ID')
  secret_key cred('AWS_SECRET_ACCESS_KEY')
end

auth "auth_sa_east_1", type: "aws" do
  version 4
  service "rds"
  region 'sa-east-1'
  access_key cred('AWS_ACCESS_KEY_ID')
  secret_key cred('AWS_SECRET_ACCESS_KEY')
end

auth "auth_eu_north_1", type: "aws" do
  version 4
  service "rds"
  region 'eu-north-1'
  access_key cred('AWS_ACCESS_KEY_ID')
  secret_key cred('AWS_SECRET_ACCESS_KEY')
end

###############################################################################
# Pagination
###############################################################################

pagination "rds_pagination" do
  get_page_marker do
    body_path "DescribeDBInstancesResult.NextMarker"
  end
  set_page_marker do
    query "Marker"
  end
end

###############################################################################
# Datasources
###############################################################################

#Generates list of Regions.
datasource "ds_regions_list" do
  run_script $js_regions_map
end

#Get the list of All RDS Instances across all regions.
datasource "ds_rds_instances_list" do
  iterate $ds_regions_list
  request do
    run_script $js_rds_instances_list, val(iter_item,"region")
  end
  result do
    encoding "json"
    collect jmes_path(response, "DescribeDBInstancesResponse.DescribeDBInstancesResult.DBInstances[*]") do
      field "dbInstance_Identifier", jmes_path(col_item, "DBInstanceIdentifier")
      field "region", val(iter_item,"region")
      field "availability_zone", jmes_path(col_item, "AvailabilityZone")
      field "sec_availability_zone", jmes_path(col_item, "SecondaryAvailabilityZone")
      field "publicly_Accessible", jmes_path(col_item, "PubliclyAccessible")
      field "dbName", jmes_path(col_item, "Engine")
      field "db_instance_status", jmes_path(col_item,"DBInstanceStatus")
      field "delete_Protection", jmes_path(col_item, "DeletionProtection")
      field "storage_Encrypted", jmes_path(col_item, "StorageEncrypted")
      field "dbInstanceArn", jmes_path(col_item, "DBInstanceArn")
      field "dbCluster_Identifier", jmes_path(col_item,"DBClusterIdentifier")
    end
  end
end

#Get respective tags for all RDS instances
datasource "ds_rds_list_with_tags" do
  iterate $ds_rds_instances_list
  request do
    run_script $js_rds_instances_list_with_tags, val(iter_item,"region"), val(iter_item, "dbInstanceArn")
  end
  result do
    encoding "json"
    collect jmes_path(response, "ListTagsForResourceResponse.ListTagsForResourceResult") do
      field "dbInstance_Identifier", val(iter_item, "dbInstance_Identifier")
      field "region", val(iter_item,"region")
      field "availability_zone", val(iter_item, "availability_zone")
      field "sec_availability_zone", val(iter_item, "sec_availability_zone")
      field "publicly_Accessible", val(iter_item, "publicly_Accessible")
      field "dbName", val(iter_item,"dbName")
      field "db_instance_status", val(iter_item,"db_instance_status")
      field "delete_Protection", val(iter_item, "delete_Protection")
      field "tags" do
        collect jmes_path(col_item, "TagList") do
          field "tagKey", jmes_path(col_item, "Key")
          field "tagValue", jmes_path(col_item, "Value")
        end
      end
      field "storage_Encrypted", val(iter_item, "storage_Encrypted")
      field "dbInstanceArn", val(iter_item, "dbInstanceArn")
      field "dbCluster_Identifier", val(iter_item,"dbCluster_Identifier")
    end
  end
end

datasource "ds_rds_unencrypted_instance_list" do
  run_script $js_rds_filter_map, $ds_rds_list_with_tags, $param_exclude_tags
end

###############################################################################
# Scripts
###############################################################################

script "js_regions_map", type: "javascript" do
  result "regions_map"
  code <<-EOS
    var regions_map=[]
    regions_map.push({"region": "us-east-1"}, {"region": "us-east-2"}, {"region": "us-west-1"}, {"region": "us-west-2"}, {"region": "ap-south-1"}, {"region": "ap-northeast-2"}, {"region": "ap-southeast-1"}, {"region": "ap-southeast-2"}, {"region": "ap-northeast-1"}, {"region": "ca-central-1"}, {"region": "eu-central-1"}, {"region": "eu-west-1"}, {"region": "eu-west-2"}, {"region": "eu-west-3"}, {"region": "sa-east-1"}, {"region": "eu-north-1"})
  EOS
end

#https://docs.aws.amazon.com/AmazonRDS/latest/APIReference/API_DescribeDBInstances.html
script "js_rds_instances_list", type: "javascript" do
  parameters "region"
  result "results"
  code <<-EOS
    results = {
      auth: "auth_"+region.replace(/-/g,"_"),
      host: 'rds.'+region+'.amazonaws.com',
      path: '/',
      pagination: "rds_pagination",
      query_params: {
        "Action": "DescribeDBInstances",
        "Version": "2014-10-31",
      },
      headers: {
        "Accept": "application/json"
      }
    }
  EOS
end

#https://docs.aws.amazon.com/AmazonRDS/latest/APIReference/API_ListTagsForResource.html
script "js_rds_instances_list_with_tags", type: "javascript" do
  parameters "region", "dbInstanceArn"
  result "request"
  code <<-EOS
    request = {
      auth: 'auth_'+region.replace(/-/g,"_"),
      host: 'rds.'+region+'.amazonaws.com',
      path: '/',
      verb: 'GET',
      query_params: {
        "Action": "ListTagsForResource",
        "Version": "2014-10-31",
        "ResourceName": dbInstanceArn,
      },
      headers: {
        "Accept": "application/json"
      }
    }
  EOS
end

#Process the response data, check for the tags and generate a list of unencrypted RDS instances
script "js_rds_filter_map", type: "javascript" do
  parameters "ds_rds_list_with_tags", "param_exclude_tags"
  result "content"
  code <<-EOS
    var param_exclude_tags_lower=[];
    for(var j=0; j < param_exclude_tags.length; j++){
      param_exclude_tags_lower[j]=param_exclude_tags[j].toString().toLowerCase();
    }

    var content=[]
    for(var i=0; i<ds_rds_list_with_tags.length; i++){
      rds=ds_rds_list_with_tags[i]

      //Check, if the tag present in entered param_exclude_tags, ignore the RDS instance if the tag matches/present.
      var tags = rds['tags']
      var isTagMatched=false
      var tagKeyValue=""
      for(var j=0; j < tags.length; j++){
        tag = tags[j]
        if((param_exclude_tags_lower.indexOf((tag['tagKey']).toLowerCase()) !== -1) || (param_exclude_tags_lower.indexOf((tag['tagKey']+'='+tag['tagValue']).toLowerCase()) !== -1)){
          isTagMatched = true;
        }
        // Constructing tags with comma separated to display in detail_template
        if((tag['tagValue']).length > 0){
          tagKeyValue = tagKeyValue + ', '+ tag['tagKey']+'='+tag['tagValue']
        }else{
          tagKeyValue = tagKeyValue + ', '+ tag['tagKey']
        }
      }

      var publicly_Accessible = rds['publicly_Accessible'];
      if(publicly_Accessible === true){
        publicly_Accessible = 'Yes';
      }else{
        publicly_Accessible = 'No';
      }

      var delete_Protection = rds['delete_Protection'];
      if(delete_Protection === true){
        delete_Protection = 'Yes';
      }else{
        delete_Protection = 'No';
      }

      //If the RDS instance tag does not match with entered param_exclude_tags, then check if RDS instance is Unencrypted.
      if(!(isTagMatched) && (rds['storage_Encrypted'] === false)){
        content.push({
          dbInstance_Identifier: rds['dbInstance_Identifier'],
          region: rds['region'],
          availability_zone: rds['availability_zone'],
          sec_availability_zone: rds['sec_availability_zone'],
          publicly_Accessible: publicly_Accessible,
          dbName: rds['dbName'],
          db_instance_status: rds['db_instance_status'],
          delete_Protection: delete_Protection,
          tagKeyValue:(tagKeyValue.slice(2)),
          dbInstanceArn: rds['dbInstanceArn'],
          dbCluster_Identifier: rds['dbCluster_Identifier']
        })
      }
    }
  EOS
end

###############################################################################
# Policy
###############################################################################

policy "policy_rds_instance_list" do
  validate $ds_rds_unencrypted_instance_list do
    summary_template "{{ rs_project_name }} (Account ID: {{ rs_project_id }}): {{ len data }} unencrypted RDS Instances Found in AWS"
    detail_template <<-EOS
# List of unencrypted RDS Instances
| RDS Instance Name | Region | Availability Zone | Sec Availability Zone | Publicly Accessible | DB Name | DB Instance Status | Delete Protection Enabled | TAGs |
| ----------------- | ------ | ----------------- | --------------------- | ------------------- | ------- | ------------------ | ------------------------- | ---- |
{{ range data -}}
| {{.dbInstance_Identifier}} | {{ .region }} | {{ .availability_zone }} |  {{ .sec_availability_zone }} |{{ .publicly_Accessible }} | {{ .dbName }} | {{ .db_instance_status }} | {{.delete_Protection}} | {{.tagKeyValue}} |
{{ end -}}
###### Note: Kindly refer 'Enable Delete Action' section in the [README](https://github.com/rightscale/policy_templates/tree/master/security/aws/rds_unencrypted) file to perform delete operation.
  EOS
    escalate $report_unencrypted_RDS_instances
    #Uncomment (remove '#') in the below line to enable Delete action.
    #escalate $delete_unencrypted_RDS_instances_approval
    check eq(size(data),0)
  end
end
###############################################################################
# Escalations
###############################################################################

escalation "report_unencrypted_RDS_instances" do
  email $param_email
end

escalation "delete_unencrypted_RDS_instances_approval" do
  request_approval  do
    label "Approve Resource Deletion"
    description "Approve escalation to run RightScale Cloud Workflow to delete unencrypted RDS-instances"
    parameter "approval_reason" do
      type "string"
      label "Reason for Approval"
      description "[Note]: RDS Instances with 'DB Instance Status' other than 'Available' and RDS instances with 'delete Protection enabled' cannot be deleted"
    end
  end
  run "delete_unencrypted_RDS_instances", data
end

###############################################################################
# Cloud Workflow
###############################################################################

#https://docs.aws.amazon.com/AmazonRDS/latest/APIReference/API_CreateDBClusterSnapshot.html
#https://docs.aws.amazon.com/AmazonRDS/latest/APIReference/API_DescribeDBClusterSnapshots.html
#https://docs.aws.amazon.com/AmazonRDS/latest/APIReference/API_DeleteDBInstance.html
define delete_unencrypted_RDS_instances($data) return $all_responses do
  $$debug=true
  $all_responses = []
  foreach $item in $data do
    sub on_error: skip do
      if ($item['dbCluster_Identifier'] != null) && ($item["delete_Protection"] == 'No')
        #Creating Cluster snapshot manually Since DB instance snapshot cannot be created directly for Aurora cluster DB instance.
        $create_cluster_snapshot = http_get(
          url: "https://rds."+$item["region"]+".amazonaws.com/?Action=CreateDBClusterSnapshot&Version=2014-10-31&DBClusterIdentifier="+$item["dbCluster_Identifier"]+"&DBClusterSnapshotIdentifier="+$item["dbCluster_Identifier"]+"-finalSnapshot",
          "signature": { type: "aws" }
        )
        $status = $create_cluster_snapshot['body']['CreateDBClusterSnapshotResponse']['CreateDBClusterSnapshotResult']['DBClusterSnapshot']['Status']

        $statusCheckCount = 0
        while ($status != "available") && ($statusCheckCount < 10) do
          sleep(30)
          $describe_cluster_snapshot = http_get(
            url: "https://rds."+$item["region"]+".amazonaws.com/?Action=DescribeDBClusterSnapshots&Version=2014-10-31&DBClusterSnapshotIdentifier="+$item["dbCluster_Identifier"]+"-finalSnapshot",
            "signature": { type: "aws" }
          )
          $status = $describe_cluster_snapshot['body']['DescribeDBClusterSnapshotsResponse']['DescribeDBClusterSnapshotsResult']['DBClusterSnapshots']['DBClusterSnapshot']['Status']
          $statusCheckCount = $statusCheckCount + 1
        end

        $response = http_get(
          url: "https://rds."+$item["region"]+".amazonaws.com/?Action=DeleteDBInstance&Version=2014-10-31&DeleteAutomatedBackups=false&DBInstanceIdentifier="+ $item["dbInstance_Identifier"],
          "signature": { type: "aws" }
        )
      elsif $item["delete_Protection"] == 'No'
        #Delete non-Aurora DB instances were a DB snapshot gets created with name '<--dbInstance_Identifier-->-finalSnapshot' Ex mySQL-DBinstance--finalSnapshot before deleting DB instance.
        $response = http_get(
          url: "https://rds."+$item["region"]+".amazonaws.com/?Action=DeleteDBInstance&Version=2014-10-31&DeleteAutomatedBackups=false&DBInstanceIdentifier="+ $item["dbInstance_Identifier"]+"&FinalDBSnapshotIdentifier="+$item["dbInstance_Identifier"]+"-finalSnapshot",
          "signature": { type: "aws" }
          )
      end
      $all_responses << $response
      call sys_log('RDS instance delete response',to_s($response))
    end
  end
end

define sys_log($subject, $detail) do
  if $$debug
    rs_cm.audit_entries.create(
      notify: "None",
      audit_entry: {
        auditee_href: @@account,
        summary: "AWS unencrypted RDS Instances Policy "+ $subject,
        detail: $detail
      }
    )
  end
end
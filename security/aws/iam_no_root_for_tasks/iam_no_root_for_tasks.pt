name "AWS IAM Report Root User Doing Everyday Tasks"
rs_pt_ver 20180301
type "policy"
short_description "Report whether the root account is being used for routine or everyday tasks. See the [README](https://github.com/flexera-public/policy_templates/tree/master/security/aws/iam_no_root_for_tasks) and [docs.flexera.com/flexera/EN/Automation](https://docs.flexera.com/flexera/EN/Automation/AutomationGS.htm) to learn more."
long_description ""
category "Security"
severity "high"
default_frequency "daily"
info(
  version: "3.0.0",
  provider: "AWS",
  service: "IAM",
  policy_set: "CIS",
  cce_id: "",
  cis_aws_foundations_securityhub: "1.1",
  benchmark_control: "1.7",
  benchmark_version: "1.4.0",
  cis_controls: "[\"4.3v7\", \"5.4v8\"]",
  nist: ""
)

###############################################################################
# Parameters
###############################################################################

parameter "param_email" do
  type "list"
  category "Policy Settings"
  label "Email Addresses"
  description "Email addresses of the recipients you wish to notify."
  default []
end

parameter "param_aws_account_number" do
  type "string"
  category "Policy Settings"
  label "Account Number"
  description "Leave blank; this is for automated use with Meta Policies. See README for more details."
  default ""
end

###############################################################################
# Authentication
###############################################################################

credentials "auth_aws" do
  schemes "aws", "aws_sts"
  label "AWS"
  description "Select the AWS Credential from the list"
  tags "provider=aws"
  aws_account_number $param_aws_account_number
end

credentials "auth_flexera" do
  schemes "oauth2"
  label "Flexera"
  description "Select Flexera One OAuth2 credentials"
  tags "provider=flexera"
end

###############################################################################
# Datasources & Scripts
###############################################################################

# Get applied policy metadata for use later
datasource "ds_applied_policy" do
  request do
    auth $auth_flexera
    host rs_governance_host
    path join(["/api/governance/projects/", rs_project_id, "/applied_policies/", policy_id])
    header "Api-Version", "1.0"
  end
end

# Get region-specific Flexera API endpoints
datasource "ds_flexera_api_hosts" do
  run_script $js_flexera_api_hosts, rs_optima_host
end

script "js_flexera_api_hosts", type: "javascript" do
  parameters "rs_optima_host"
  result "result"
  code <<-EOS
  host_table = {
    "api.optima.flexeraeng.com": {
      flexera: "api.flexera.com",
      fsm: "api.fsm.flexeraeng.com"
    },
    "api.optima-eu.flexeraeng.com": {
      flexera: "api.flexera.eu",
      fsm: "api.fsm-eu.flexeraeng.com"
    },
    "api.optima-apac.flexeraeng.com": {
      flexera: "api.flexera.au",
      fsm: "api.fsm-apac.flexeraeng.com"
    }
  }

  result = host_table[rs_optima_host]
EOS
end

# Get AWS account info
datasource "ds_cloud_vendor_accounts" do
  request do
    auth $auth_flexera
    host val($ds_flexera_api_hosts, 'flexera')
    path join(["/finops-analytics/v1/orgs/", rs_org_id, "/cloud-vendor-accounts"])
    header "Api-Version", "1.0"
  end
  result do
    encoding "json"
    collect jmes_path(response, "values[*]") do
      field "id", jmes_path(col_item, "aws.accountId")
      field "name", jmes_path(col_item, "name")
      field "tags", jmes_path(col_item, "tags")
    end
  end
end

datasource "ds_get_caller_identity" do
  request do
    auth $auth_aws
    verb "GET"
    host "sts.amazonaws.com"
    path "/"
    query "Action", "GetCallerIdentity"
    query "Version", "2011-06-15"
    header "User-Agent", "RS Policies"
  end
  result do
    encoding "xml"
    collect xpath(response, "//GetCallerIdentityResponse/GetCallerIdentityResult") do
      field "account", xpath(col_item, "Account")
    end
  end
end

datasource "ds_aws_account" do
  run_script $js_aws_account, $ds_cloud_vendor_accounts, $ds_get_caller_identity
end

script "js_aws_account", type:"javascript" do
  parameters "ds_cloud_vendor_accounts", "ds_get_caller_identity"
  result "result"
  code <<-EOS
  result = _.find(ds_cloud_vendor_accounts, function(account) {
    return account['id'] == ds_get_caller_identity[0]['account']
  })

  // This is in case the API does not return the relevant account info
  if (result == undefined) {
    result = {
      id: ds_get_caller_identity[0]['account'],
      name: "",
      tags: {}
    }
  }
EOS
end

datasource "ds_generate_cred_report" do
  request do
    auth $auth_aws
    verb "GET"
    host "iam.amazonaws.com"
    path "/"
    query "Action", "GenerateCredentialReport"
    query "Version", "2010-05-08"
    header "Accept", "application/json"
    header "User-Agent", "RS Policies"
  end
  result do
    encoding "json"
    field "credReportStatus", jmes_path(response, "GenerateCredentialReportResponse.GenerateCredentialReportResult.State")
  end
end

datasource "ds_sleep" do
  run_script $js_sleep, $ds_generate_cred_report
end

script "js_sleep", type:"javascript" do
  parameters "ds_generate_cred_report"
  result "result"
  code <<-EOS
    sleepDuration=240
    var now = new Date().getTime();
    while(new Date().getTime() < now + sleepDuration){ /* Do nothing */ }
    var result = ds_generate_cred_report
EOS
end

datasource "ds_get_cred_report" do
  iterate $ds_sleep
  request do
    auth $auth_aws
    verb "GET"
    host "iam.amazonaws.com"
    path "/"
    query "Action", "GetCredentialReport"
    query "Version", "2010-05-08"
    header "Accept", "application/json"
    header "User-Agent", "RS Policies"
  end
  result do
    encoding "json"
    field "credReportBase64", jmes_path(response, "GetCredentialReportResponse.GetCredentialReportResult.Content")
  end
end

datasource "ds_parse_cred_report" do
  run_script $js_parse_cred_report, $ds_get_caller_identity, $ds_get_cred_report
end

script "js_parse_cred_report", type:"javascript" do
  parameters "ds_get_caller_identity", "ds_get_cred_report"
  result "result"
  code <<-EOS
  var exceptions=[]
  var day_difference = 7
  var now = new Date()
  var root_index = 0
  var report = []

  var decoded = atob(ds_get_cred_report.credReportBase64)
  data = decoded.toString()
  arr = data.split('\\n');
  var result = [];
  var headers = arr[0].split(',');

  for(var i = 1; i < arr.length; i++) {
    var data = arr[i].split(',');
    var obj = {};
    for(var j = 0; j < data.length; j++) {
      obj[headers[j].trim()] = data[j].trim();
    }
    report.push(obj);
  }

  var root_account = _.find(report, function(item){
    return item.user == '<root_account>'
  })

  if (now - new Date(root_account['password_last_used']) <= day_difference * 86400000) {
    exceptions.push("Root Password Last Used: " + root_account['password_last_used'])
  }

  if (now - new Date(root_account['access_key_1_last_used_date']) <= day_difference * 86400000) {
    exceptions.push("Root Access Key 1 Last Used: " + root_account['access_key_1_last_used_date'])
  }

  if (now - new Date(root_account['access_key_2_last_used_date']) <= day_difference * 86400000) {
    exceptions.push("Root Access Key 2 Last Used: " + root_account['access_key_2_last_used_date'])
  }

  result={
    id: ds_get_caller_identity[0]['account'],
    exceptions: exceptions,
    day_difference: day_difference
  }
EOS
end

###############################################################################
# Policy
###############################################################################

policy "pol_iam_no_root_for_tasks" do
  validate $ds_parse_cred_report do
    summary_template "{{ with index data 0 }}{{ .policy_name }}{{ end }}: Root User Used"
    detail_template <<-EOS
The root user has been utilized in the last {{data.day_difference}} days.

Affected Account ID: {{data.id}}
{{- range $val := data.exceptions }}
  {{ $val }}
{{- end }}
EOS
    check eq(size(val(data, "exceptions")), 0)
    escalate $esc_email
  end
end

###############################################################################
# Escalations
###############################################################################

escalation "esc_email" do
  automatic true
  label "Send Email"
  description "Send incident email"
  email $param_email
end

name "AWS IAM Root User Doing Everyday Tasks"
rs_pt_ver 20180301
type "policy"
short_description "Report if the root user account is being used for routine or everyday tasks. See the [README](https://github.com/flexera-public/policy_templates/tree/master/security/aws/iam_no_root_for_tasks) and [docs.flexera.com/flexera/EN/Automation](https://docs.flexera.com/flexera/EN/Automation/AutomationGS.htm) to learn more."
long_description ""
category "Security"
severity "high"
default_frequency "daily"
info(
  version: "3.0.0",
  provider: "AWS",
  service: "IAM",
  policy_set: "CIS",
  cce_id: "",
  cis_aws_foundations_securityhub: "1.1",
  benchmark_control: "1.7",
  benchmark_version: "1.4.0",
  cis_controls: "[\"4.3v7\", \"5.4v8\"]",
  nist: ""
)

###############################################################################
# Parameters
###############################################################################

parameter "param_email" do
  type "list"
  category "Policy Settings"
  label "Email Addresses"
  description "Email addresses of the recipients you wish to notify."
  default []
end

parameter "param_aws_account_number" do
  type "string"
  category "Policy Settings"
  label "Account Number"
  description "Leave blank; this is for automated use with Meta Policies. See README for more details."
  default ""
end

parameter "param_lookback" do
  type "number"
  category "Policy Settings"
  label "Days Back"
  description "How many days back to look for root user account tasks. Tasks performed longer ago than the specified number of days will be ignored."
  min_value 1
  default 7
end

###############################################################################
# Authentication
###############################################################################

credentials "auth_aws" do
  schemes "aws", "aws_sts"
  label "AWS"
  description "Select the AWS Credential from the list"
  tags "provider=aws"
  aws_account_number $param_aws_account_number
end

credentials "auth_flexera" do
  schemes "oauth2"
  label "Flexera"
  description "Select Flexera One OAuth2 credentials"
  tags "provider=flexera"
end

###############################################################################
# Datasources & Scripts
###############################################################################

# Get applied policy metadata for use later
datasource "ds_applied_policy" do
  request do
    auth $auth_flexera
    host rs_governance_host
    path join(["/api/governance/projects/", rs_project_id, "/applied_policies/", policy_id])
    header "Api-Version", "1.0"
  end
end

# Get region-specific Flexera API endpoints
datasource "ds_flexera_api_hosts" do
  run_script $js_flexera_api_hosts, rs_optima_host
end

script "js_flexera_api_hosts", type: "javascript" do
  parameters "rs_optima_host"
  result "result"
  code <<-EOS
  host_table = {
    "api.optima.flexeraeng.com": {
      flexera: "api.flexera.com",
      fsm: "api.fsm.flexeraeng.com"
    },
    "api.optima-eu.flexeraeng.com": {
      flexera: "api.flexera.eu",
      fsm: "api.fsm-eu.flexeraeng.com"
    },
    "api.optima-apac.flexeraeng.com": {
      flexera: "api.flexera.au",
      fsm: "api.fsm-apac.flexeraeng.com"
    }
  }

  result = host_table[rs_optima_host]
EOS
end

# Get AWS account info
datasource "ds_cloud_vendor_accounts" do
  request do
    auth $auth_flexera
    host val($ds_flexera_api_hosts, 'flexera')
    path join(["/finops-analytics/v1/orgs/", rs_org_id, "/cloud-vendor-accounts"])
    header "Api-Version", "1.0"
  end
  result do
    encoding "json"
    collect jmes_path(response, "values[*]") do
      field "id", jmes_path(col_item, "aws.accountId")
      field "name", jmes_path(col_item, "name")
      field "tags", jmes_path(col_item, "tags")
    end
  end
end

datasource "ds_get_caller_identity" do
  request do
    auth $auth_aws
    verb "GET"
    host "sts.amazonaws.com"
    path "/"
    query "Action", "GetCallerIdentity"
    query "Version", "2011-06-15"
    header "User-Agent", "RS Policies"
  end
  result do
    encoding "xml"
    collect xpath(response, "//GetCallerIdentityResponse/GetCallerIdentityResult") do
      field "account", xpath(col_item, "Account")
    end
  end
end

datasource "ds_aws_account" do
  run_script $js_aws_account, $ds_cloud_vendor_accounts, $ds_get_caller_identity
end

script "js_aws_account", type:"javascript" do
  parameters "ds_cloud_vendor_accounts", "ds_get_caller_identity"
  result "result"
  code <<-EOS
  result = _.find(ds_cloud_vendor_accounts, function(account) {
    return account['id'] == ds_get_caller_identity[0]['account']
  })

  // This is in case the API does not return the relevant account info
  if (result == undefined) {
    result = {
      id: ds_get_caller_identity[0]['account'],
      name: "",
      tags: {}
    }
  }
EOS
end

datasource "ds_generate_cred_report" do
  request do
    auth $auth_aws
    host "iam.amazonaws.com"
    path "/"
    query "Action", "GenerateCredentialReport"
    query "Version", "2010-05-08"
    header "Accept", "application/json"
    header "User-Agent", "RS Policies"
  end
  result do
    encoding "json"
    field "credReportStatus", jmes_path(response, "GenerateCredentialReportResponse.GenerateCredentialReportResult.State")
  end
end

# Wait 2 minutes so that AWS has time to generate a report
datasource "ds_sleep" do
  run_script $js_sleep, $ds_generate_cred_report
end

script "js_sleep", type:"javascript" do
  parameters "ds_generate_cred_report"
  result "result"
  code <<-EOS
  sleepDuration = 120
  now = new Date().getTime()
  while(new Date().getTime() < now + sleepDuration){ /* Do nothing */ }

  result = ds_generate_cred_report
EOS
end

datasource "ds_cred_report" do
  iterate $ds_sleep
  request do
    auth $auth_aws
    host "iam.amazonaws.com"
    path "/"
    query "Action", "GetCredentialReport"
    query "Version", "2010-05-08"
    header "Accept", "application/json"
    header "User-Agent", "RS Policies"
  end
  result do
    encoding "json"
    field "credReportBase64", jmes_path(response, "GetCredentialReportResponse.GetCredentialReportResult.Content")
  end
end

datasource "ds_tasks_report" do
  run_script $js_tasks_report, $ds_cred_report, $ds_aws_account, $ds_applied_policy, $param_lookback
end

script "js_tasks_report", type:"javascript" do
  parameters "ds_cred_report", "ds_aws_account", "ds_applied_policy", "param_lookback"
  result "result"
  code <<-EOS
  // Parse report
  decoded = atob(ds_cred_report.credReportBase64).toString()
  lines = decoded.split('\\n')
  headers = lines[0].split(',')

  report = []

  for (var line_index = 1; line_index < lines.length; line_index++) {
    data = lines[line_index].split(',')

    object = {}

    for (var data_index = 0; data_index < data.length; data_index++) {
      object[headers[data_index].trim()] = data[data_index].trim()
    }

    report.push(object)
  }

  // Find root user
  root_account = _.find(report, function(item){
    return item.user == '<root_account>'
  })

  // Find access entries
  result = {
    accountID: ds_aws_account['id'],
    accountName: ds_aws_account['name'],
    policy_name: ds_applied_policy['name'],
    lookback: param_lookback,
    password_last_used: "Unknown / Never",
    key1_last_used: "Unknown / Never",
    key2_last_used: "Unknown / Never",
    most_recent_access: "Unknown / Never",
    root_for_tasks: 0
  }

  now = new Date()

  if (root_account['password_last_used'] != null) {
    password_last_used = new Date(root_account['password_last_used'])
    result['password_last_used'] = password_last_used.toISOString()

    days_ago = Math.round((now - password_last_used) / 86400000)

    if (result['most_recent_access'] == null || result['most_recent_access'] > days_ago) {
      result['most_recent_access'] = days_ago
    }
  }

  if (root_account['access_key_1_last_used_date'] != null) {
    key1_last_used = new Date(root_account['access_key_1_last_used_date'])
    result['key1_last_used'] = key1_last_used.toISOString()

    days_ago = Math.round((now - key1_last_used) / 86400000)

    if (result['most_recent_access'] == null || result['most_recent_access'] > days_ago) {
      result['most_recent_access'] = days_ago
    }
  }

  if (root_account['access_key_2_last_used_date'] != null) {
    key2_last_used = new Date(root_account['access_key_2_last_used_date'])
    result['key2_last_used'] = key2_last_used.toISOString()

    days_ago = Math.round((now - key2_last_used) / 86400000)

    if (result['most_recent_access'] == null || result['most_recent_access'] > days_ago) {
      result['most_recent_access'] = days_ago
    }
  }

  if (result['most_recent_access'] != "Unknown / Never" && result['most_recent_access'] < param_lookback) {
    result['root_for_tasks'] = 1
  }
EOS
end

###############################################################################
# Policy
###############################################################################

policy "pol_root_tasks" do
  validate $ds_tasks_report do
    summary_template "{{ data.policy_name }}: AWS IAM Root User Doing Everyday Tasks Found"
    detail_template <<-EOS
The root user of the following AWS account has been used in the last {{ data.lookback }} days:

**AWS Account:** {{ data.accountName }} ({{ data.accountID }})\\
**Most Recent Access (Days Ago):** {{ data.most_recent_access }}\\
**Password Last Used:** {{ data.password_last_used }}\\
**Access Key 1 Last Used:** {{ data.key1_last_used }}\\
**Access Key 2 Last Used:** {{ data.key2_last_used }}
EOS
    check eq(val(data, "root_for_tasks"), 0)
    escalate $esc_email
  end
end

###############################################################################
# Escalations
###############################################################################

escalation "esc_email" do
  automatic true
  label "Send Email"
  description "Send incident email"
  email $param_email
end

name "AWS IAM Ensure One Active Key Per IAM User"
rs_pt_ver 20180301
type "policy"
short_description "Report if any IAM users have 2 or more active access keys. See the [README](https://github.com/flexera-public/policy_templates/tree/master/security/aws/iam_one_active_key_per_user) and [docs.flexera.com/flexera/EN/Automation](https://docs.flexera.com/flexera/EN/Automation/AutomationGS.htm) to learn more."
long_description ""
category "Security"
severity "high"
default_frequency "daily"
info(
  version: "3.0.0",
  provider: "AWS",
  service: "IAM",
  policy_set: "CIS",
  cce_id: "",
  cis_aws_foundations_securityhub: "",
  benchmark_control: "1.13",
  benchmark_version: "1.4.0",
  cis_controls: "[\"5v8\", \"4v7\"]",
  nist: ""
)

###############################################################################
# Parameters
###############################################################################

parameter "param_email" do
  type "list"
  category "Policy Settings"
  label "Email Addresses"
  description "Email addresses of the recipients you wish to notify."
  default []
end

parameter "param_aws_account_number" do
  type "string"
  category "Policy Settings"
  label "Account Number"
  description "Leave blank; this is for automated use with Meta Policies. See README for more details."
  default ""
end

###############################################################################
# Authentication
###############################################################################

credentials "auth_aws" do
  schemes "aws", "aws_sts"
  label "AWS"
  description "Select the AWS Credential from the list"
  tags "provider=aws"
  aws_account_number $param_aws_account_number
end

credentials "auth_flexera" do
  schemes "oauth2"
  label "Flexera"
  description "Select Flexera One OAuth2 credentials"
  tags "provider=flexera"
end

###############################################################################
# Datasources & Scripts
###############################################################################

# Get applied policy metadata for use later
datasource "ds_applied_policy" do
  request do
    auth $auth_flexera
    host rs_governance_host
    path join(["/api/governance/projects/", rs_project_id, "/applied_policies/", policy_id])
    header "Api-Version", "1.0"
  end
end

# Get region-specific Flexera API endpoints
datasource "ds_flexera_api_hosts" do
  run_script $js_flexera_api_hosts, rs_optima_host
end

script "js_flexera_api_hosts", type: "javascript" do
  parameters "rs_optima_host"
  result "result"
  code <<-EOS
  host_table = {
    "api.optima.flexeraeng.com": {
      flexera: "api.flexera.com",
      fsm: "api.fsm.flexeraeng.com"
    },
    "api.optima-eu.flexeraeng.com": {
      flexera: "api.flexera.eu",
      fsm: "api.fsm-eu.flexeraeng.com"
    },
    "api.optima-apac.flexeraeng.com": {
      flexera: "api.flexera.au",
      fsm: "api.fsm-apac.flexeraeng.com"
    }
  }

  result = host_table[rs_optima_host]
EOS
end

# Get AWS account info
datasource "ds_cloud_vendor_accounts" do
  request do
    auth $auth_flexera
    host val($ds_flexera_api_hosts, 'flexera')
    path join(["/finops-analytics/v1/orgs/", rs_org_id, "/cloud-vendor-accounts"])
    header "Api-Version", "1.0"
  end
  result do
    encoding "json"
    collect jmes_path(response, "values[*]") do
      field "id", jmes_path(col_item, "aws.accountId")
      field "name", jmes_path(col_item, "name")
      field "tags", jmes_path(col_item, "tags")
    end
  end
end

datasource "ds_get_caller_identity" do
  request do
    auth $auth_aws
    verb "GET"
    host "sts.amazonaws.com"
    path "/"
    query "Action", "GetCallerIdentity"
    query "Version", "2011-06-15"
    header "User-Agent", "RS Policies"
  end
  result do
    encoding "xml"
    collect xpath(response, "//GetCallerIdentityResponse/GetCallerIdentityResult") do
      field "account", xpath(col_item, "Account")
    end
  end
end

datasource "ds_aws_account" do
  run_script $js_aws_account, $ds_cloud_vendor_accounts, $ds_get_caller_identity
end

script "js_aws_account", type:"javascript" do
  parameters "ds_cloud_vendor_accounts", "ds_get_caller_identity"
  result "result"
  code <<-EOS
  result = _.find(ds_cloud_vendor_accounts, function(account) {
    return account['id'] == ds_get_caller_identity[0]['account']
  })

  // This is in case the API does not return the relevant account info
  if (result == undefined) {
    result = {
      id: ds_get_caller_identity[0]['account'],
      name: "",
      tags: {}
    }
  }
EOS
end

datasource "ds_iam_users" do
  request do
    auth $auth_aws
    verb "GET"
    host "iam.amazonaws.com"
    path "/"
    query "Action", "ListUsers"
    query "Version", "2010-05-08"
    header "User-Agent", "RS Policies"
  end
  result do
    encoding "xml"
    collect xpath(response, "//ListUsersResult/Users/member", "array") do
      field "id", xpath(col_item, "UserId")
      field "name", xpath(col_item, "UserName")
      field "arn", xpath(col_item, "Arn")
      field "create_date", xpath(col_item, "CreateDate")
      field "password_last_used", xpath(col_item, "PasswordLastUsed")
    end
  end
end

datasource "ds_iam_users_with_keys" do
  iterate $ds_iam_users
  request do
    auth $auth_aws
    verb "GET"
    host "iam.amazonaws.com"
    path "/"
    query "Action", "ListAccessKeys"
    query "Version", "2010-05-08"
    query "UserName", val(iter_item, "name")
    header "User-Agent", "RS Policies"
  end
  result do
    encoding "xml"
    field "id", val(iter_item, "id")
    field "name", val(iter_item, "name")
    field "arn", val(iter_item, "arn")
    field "create_date", val(iter_item, "create_date")
    field "password_last_used", val(iter_item, "password_last_used")
    field "access_keys" do
      collect xpath(response, "//ListAccessKeysResult/AccessKeyMetadata/member", "array") do
        field "id", xpath(col_item, "AccessKeyId")
        field "username", xpath(col_item, "UserName")
        field "status", xpath(col_item, "Status")
        field "create_date", xpath(col_item, "CreateDate")
      end
    end
  end
end

datasource "ds_iam_users_with_many_keys" do
  run_script $js_iam_users_with_many_keys, $ds_iam_users_with_keys
end

script "js_iam_users_with_many_keys", type:"javascript" do
  parameters "ds_iam_users_with_keys"
  result "result"
  code <<-EOS
    result = []

    _.each(ds_iam_users_with_keys, function(user) {
      active_keys = 0

      _.each(user.access_keys, function(access_key) {
        if (access_key.status == "Active") {
          active_keys += 1
        }
      })

      if (active_keys > 1) {
        result.push({
          id: user.id,
          name: user.name,
          arn: user.arn,
          active_keys: active_keys
        })
      }
    })
EOS
end

###############################################################################
# Policy
###############################################################################

policy "pol_iam_users_with_many_keys" do
  validate $ds_iam_users_with_many_keys do
    summary_template "{{ with index data 0 }}{{ .policy_name }}{{ end }}: {{ len data }} Users With Multiple Active Access Keys Found"
    check eq(size(data), 0)
    escalate $esc_email
    export do
      resource_level true
      field "name" do
        label "User Name"
      end
      field "id" do
        label "User ID"
      end
      field "arn" do
        label "User ARN"
      end
      field "active_keys" do
        label "Active Keys"
      end
    end
  end
end

###############################################################################
# Escalations
###############################################################################

escalation "esc_email" do
  automatic true
  label "Send Email"
  description "Send incident email"
  email $param_email
end

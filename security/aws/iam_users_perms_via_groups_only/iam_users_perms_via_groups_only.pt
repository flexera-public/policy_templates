name "AWS IAM Users With Directly-Attached Policies"
rs_pt_ver 20180301
type "policy"
short_description "Report IAM users that have policies attached directly instead of through groups. See the [README](https://github.com/flexera-public/policy_templates/tree/master/security/aws/iam_users_perms_via_groups_only) and [docs.flexera.com/flexera/EN/Automation](https://docs.flexera.com/flexera/EN/Automation/AutomationGS.htm) to learn more."
long_description ""
doc_link "https://github.com/flexera-public/policy_templates/tree/master/security/aws/iam_users_perms_via_groups_only"
category "Security"
severity "high"
default_frequency "daily"
info(
  version: "3.0.6",
  provider: "AWS",
  service: "Identity & Access Management",
  policy_set: "CIS",
  cce_id: "CCE-78912-3",
  cis_aws_foundations_securityhub: "1.16",
  benchmark_control: "1.15",
  benchmark_version: "3.0.6",
  cis_controls: "[\"6.8v8\", \"16v7\"]",
  nist: "AC-6",
  hide_skip_approvals: "true"
)

###############################################################################
# Parameters
###############################################################################

parameter "param_email" do
  type "list"
  category "Policy Settings"
  label "Email Addresses"
  description "Email addresses of the recipients you wish to notify."
  default []
end

parameter "param_aws_account_number" do
  type "string"
  category "Policy Settings"
  label "Account Number"
  description "Leave blank; this is for automated use with Meta Policies. See README for more details."
  default ""
end

###############################################################################
# Authentication
###############################################################################

credentials "auth_aws" do
  schemes "aws", "aws_sts"
  label "AWS"
  description "Select the AWS Credential from the list"
  tags "provider=aws"
  aws_account_number $param_aws_account_number
end

credentials "auth_flexera" do
  schemes "oauth2"
  label "Flexera"
  description "Select Flexera One OAuth2 credentials"
  tags "provider=flexera"
end

###############################################################################
# Datasources & Scripts
###############################################################################

# Get region-specific Flexera API endpoints
datasource "ds_flexera_api_hosts" do
  run_script $js_flexera_api_hosts, rs_optima_host
end

script "js_flexera_api_hosts", type: "javascript" do
  parameters "rs_optima_host"
  result "result"
  code <<-EOS
  host_table = {
    "api.optima.flexeraeng.com": {
	    api: "api.flexera.com",
      flexera: "api.flexera.com",
      fsm: "api.fsm.flexeraeng.com",
      grs: "grs-front.iam-us-east-1.flexeraeng.com",
      ui: "app.flexera.com",
      tld: "flexera.com"
    },
    "api.optima-eu.flexeraeng.com": {
	    api: "api.flexera.eu",
      flexera: "api.flexera.eu",
      fsm: "api.fsm-eu.flexeraeng.com",
      grs: "grs-front.eu-central-1.iam-eu.flexeraeng.com",
      ui: "app.flexera.eu",
      tld: "flexera.eu"
    },
    "api.optima-apac.flexeraeng.com": {
	    api: "api.flexera.au",
      flexera: "api.flexera.au",
      fsm: "api.fsm-apac.flexeraeng.com",
      grs: "grs-front.ap-southeast-2.iam-apac.flexeraeng.com",
      ui: "app.flexera.au",
      tld: "flexera.au"
    }
  }

  result = host_table[rs_optima_host]
EOS
end

# Get applied policy metadata for use later
datasource "ds_applied_policy" do
  request do
    auth $auth_flexera
    host val($ds_flexera_api_hosts, "flexera")
    path join(["/policy/v1/orgs/", rs_org_id, "/projects/", rs_project_id, "/applied-policies", switch(policy_id, join(["/", policy_id]), "")])
  end
end

# Get AWS account info
datasource "ds_cloud_vendor_accounts" do
  request do
    auth $auth_flexera
    host val($ds_flexera_api_hosts, 'flexera')
    path join(["/finops-analytics/v1/orgs/", rs_org_id, "/cloud-vendor-accounts"])
    header "Api-Version", "1.0"
  end
  result do
    encoding "json"
    collect jmes_path(response, "values[*]") do
      field "id", jmes_path(col_item, "aws.accountId")
      field "name", jmes_path(col_item, "name")
      field "tags", jmes_path(col_item, "tags")
    end
  end
end

datasource "ds_get_caller_identity" do
  request do
    auth $auth_aws
    host "sts.amazonaws.com"
    path "/"
    query "Action", "GetCallerIdentity"
    query "Version", "2011-06-15"
    header "User-Agent", "RS Policies"
  end
  result do
    encoding "xml"
    collect xpath(response, "//GetCallerIdentityResponse/GetCallerIdentityResult") do
      field "account", xpath(col_item, "Account")
    end
  end
end

datasource "ds_aws_account" do
  run_script $js_aws_account, $ds_cloud_vendor_accounts, $ds_get_caller_identity
end

script "js_aws_account", type:"javascript" do
  parameters "ds_cloud_vendor_accounts", "ds_get_caller_identity"
  result "result"
  code <<-EOS
  result = _.find(ds_cloud_vendor_accounts, function(account) {
    return account['id'] == ds_get_caller_identity[0]['account']
  })

  // This is in case the API does not return the relevant account info
  if (result == undefined) {
    result = {
      id: ds_get_caller_identity[0]['account'],
      name: "",
      tags: {}
    }
  }
EOS
end

datasource "ds_iam_users" do
  request do
    auth $auth_aws
    host "iam.amazonaws.com"
    path "/"
    query "Action", "ListUsers"
    query "Version", "2010-05-08"
    header "User-Agent", "RS Policies"
  end
  result do
    encoding "xml"
    collect xpath(response, "//ListUsersResult/Users/member", "array") do
      field "id", xpath(col_item, "UserId")
      field "name", xpath(col_item, "UserName")
      field "arn", xpath(col_item, "Arn")
      field "create_date", xpath(col_item, "CreateDate")
      field "password_last_used", xpath(col_item, "PasswordLastUsed")
    end
  end
end

datasource "ds_iam_users_with_policies" do
  iterate $ds_iam_users
  request do
    auth $auth_aws
    host "iam.amazonaws.com"
    path "/"
    query "Action", "ListUserPolicies"
    query "Version", "2010-05-08"
    query "UserName", val(iter_item, "name")
    header "User-Agent", "RS Policies"
    header "Accept", "application/json"
  end
  result do
    encoding "json"
    field "policies", jmes_path(response, "ListUserPoliciesResponse.ListUserPoliciesResult.PolicyNames")
    field "id", val(iter_item, "id")
    field "name", val(iter_item, "name")
    field "arn", val(iter_item, "arn")
    field "create_date", val(iter_item, "create_date")
    field "password_last_used", val(iter_item, "password_last_used")
  end
end

datasource "ds_iam_users_attached" do
  iterate $ds_iam_users_with_policies
  request do
    auth $auth_aws
    host "iam.amazonaws.com"
    path "/"
    query "Action", "ListAttachedUserPolicies"
    query "Version", "2010-05-08"
    query "UserName", val(iter_item, "name")
    header "User-Agent", "RS Policies"
  end
  result do
    encoding "xml"
    field "attached" do
      collect xpath(response, "//ListAttachedUserPoliciesResult/AttachedPolicies/member", "array") do
        field "name", xpath(col_item, "PolicyName")
        field "arn", xpath(col_item, "PolicyArn")
      end
    end
    field "id", val(iter_item, "id")
    field "name", val(iter_item, "name")
    field "arn", val(iter_item, "arn")
    field "create_date", val(iter_item, "create_date")
    field "password_last_used", val(iter_item, "password_last_used")
    field "policies", val(iter_item, "policies")
  end
end

datasource "ds_iam_users_with_direct_policies" do
  run_script $js_iam_users_with_direct_policies, $ds_iam_users_attached, $ds_aws_account, $ds_applied_policy
end

script "js_iam_users_with_direct_policies", type:"javascript" do
  parameters "ds_iam_users_attached", "ds_aws_account", "ds_applied_policy"
  result "result"
  code <<-EOS
  bad_users = _.filter(ds_iam_users_attached, function(user) {
    return user['policies'].length > 0 || user['attached'].length > 0
  })

  result = _.map(bad_users, function(user) {
    return {
      accountID: ds_aws_account['id'],
      accountName: ds_aws_account['name'],
      id: user['id'],
      resourceName: user['name'],
      resourceARN: user['arn'],
      createDate: new Date(user['create_date']  * 1000).toISOString(),
      inline_policies: user['policies'].length,
      attached_policies: user['attached'].length,
      policy_name: ds_applied_policy['name']
    }
  })
EOS
end

###############################################################################
# Policy
###############################################################################

policy "pol_iam_users_with_direct_policies" do
  validate_each $ds_iam_users_with_direct_policies do
    summary_template "{{ with index data 0 }}{{ .policy_name }}{{ end }}: {{ len data }} AWS IAM Users With Directly-Attached Policies Found"
    check eq(val(item, "id"), "")
    escalate $esc_email
    export do
      resource_level true
      field "id" do
        label "User ID"
      end
      field "resourceName" do
        label "User Name"
      end
      field "resourceARN" do
        label "User ARN"
      end
      field "createDate" do
        label "Created At"
      end
      field "inline_policies" do
        label "Inline Policies (#)"
      end
      field "attached_policies" do
        label "Attached Policies (#)"
      end
    end
  end
end

###############################################################################
# Escalations
###############################################################################

escalation "esc_email" do
  automatic true
  label "Send Email"
  description "Send incident email"
  email $param_email
end

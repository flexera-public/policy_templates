name "AWS Unencrypted Volumes"
rs_pt_ver 20180301
type "policy"
short_description "Report any Elastic Block Store (EBS) volumes in AWS that are unencrypted. \n See the [README](https://github.com/rightscale/policy_templates/tree/master/security/aws/ebs_unencrypted_volumes) and [docs.rightscale.com/policies](http://docs.rightscale.com/policies/) to learn more."
long_description ""
category "Security"
severity "low"
info(
  version: "2.5",
  provider: "AWS",
  service: "EBS",
  policy_set: ""
)

###############################################################################
# User inputs
###############################################################################

parameter "param_allowed_regions" do
  type "list"
  label "Allowed Regions"
  allowed_pattern /^([a-zA-Z-_]+-[a-zA-Z0-9-_]+-[0-9-_]+,*|)+$/
  description "A list of allowed regions. See the README for more details"
end

parameter "param_email" do
  type "list"
  label "Email addresses to notify"
  description "Email addresses of the recipients you wish to notify when new incidents are created"
end

parameter "param_exclude_tags" do
  type "list"
  label "Tags to ignore"
  description "List of tags that will exclude resources from being evaluated by this policy. Multiple tags are evaluated as an 'OR' condition. Tag keys or key/value pairs can be listed. Example: 'test,env=dev'"
end

###############################################################################
# Authentication
###############################################################################

credentials "auth_aws" do
  schemes "aws","aws_sts"
  label "AWS"
  description "Select the AWS Credential from the list"
  tags "provider=aws"
end


###############################################################################
# Pagination
###############################################################################

pagination "aws_pagination_xml" do
  get_page_marker do
    body_path "//DescribeVolumesResponse/nextToken"
  end
  set_page_marker do
    query "NextToken"
  end
end

###############################################################################
# Datasource
###############################################################################

#Get list of enabled regions for an account
datasource "ds_regions_list" do
  request do
    auth $auth_aws
    verb "GET"
    host "ec2.amazonaws.com"
    path "/"
    query "Action", "DescribeRegions"
    query "Version", "2016-11-15"
  end
  result do
    encoding "xml"
    collect xpath(response, "//DescribeRegionsResponse/regionInfo/item", "array") do
      field "region", xpath(col_item, "regionName")
    end
  end
end

# Get only SCP enabled regions
datasource "ds_regions" do
  run_script $js_regions, $param_allowed_regions, $ds_regions_list
end

#To get list of All Unencrypted Volumes.
datasource "ds_unencrypted_volume_list" do
  iterate $ds_regions
  request do
    run_script $js_aws_unencrypted_volumes_list, val(iter_item,"region")
  end
  result do
    encoding "xml"
    collect xpath(response, "//DescribeVolumesResponse/volumeSet/item", "array") do
      field "tags" do
        collect xpath(col_item, "tagSet/item") do
          field "tagKey", xpath(col_item, "key")
          field "tagValue", xpath(col_item, "value")
        end
      end
      field "attachments" do
        collect xpath(col_item, "attachmentSet/item") do
          field "instance_Id", xpath(col_item, "instanceId")
        end
      end
      field "volume_id", xpath(col_item, "volumeId")
      field "availability_zone", xpath(col_item, "availabilityZone")
      field "snapshot_id", xpath(col_item, "snapshotId")
      field "encrypted", xpath(col_item, "encrypted")
      field "vol_status", xpath(col_item, "status")
      field "vol_type", xpath(col_item, "volumeType")
      field "region", val(iter_item,"region")
    end
  end
end

datasource "ds_unencrypted_volumes_map" do
  run_script $js_unencrypted_vol_filter_map, $ds_unencrypted_volume_list, $param_exclude_tags
end

###############################################################################
# Script
###############################################################################

script "js_regions", type:"javascript" do
  parameters "user_entered_regions", "all_regions"
  result "regions"
  code <<-EOS
    if(_.isEmpty(user_entered_regions)){
      regions = all_regions;
    }else{
      //Filter unique regions
      var uniqueRegions = _.uniq(user_entered_regions);
      var all_regions_list = [];
      all_regions.forEach(function(all_region){
        all_regions_list.push(all_region.region)
      })

      //Filter valid regions
      var valid_regions = [];
      _.map(uniqueRegions, function(uniqueRegion){
        if(all_regions_list.indexOf(uniqueRegion) > -1){
          valid_regions.push({"region": uniqueRegion})
        }
      })

      //Throw an error if no valid regions found
      if (_.isEmpty(valid_regions)) {
        regions = all_regions;
      }else{
        regions = valid_regions
      }
    }
  EOS
end

#https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DescribeVolumes.html
script "js_aws_unencrypted_volumes_list", type: "javascript" do
  parameters "region"
  result "results"
  code <<-EOS
    results = {
      auth: "auth_aws",
      host: 'ec2.'+region+'.amazonaws.com',
      path: '/',
      pagination: "aws_pagination_xml",
      query_params: {
        "Action": "DescribeVolumes",
        "Filter.1.Name": "encrypted",
        "Filter.1.Value.1": "false",
        "Version": "2016-11-15",
      }
    }
  EOS
end

#Process the response data and check for the tags and unencrypted voulmes
script "js_unencrypted_vol_filter_map", type: "javascript" do
  parameters "ds_unencrypted_volume_list","param_exclude_tags"
  result "content"
  code <<-EOS
    var param_exclude_tags_lower=[];
    for(var j=0; j < param_exclude_tags.length; j++){
      param_exclude_tags_lower[j]=param_exclude_tags[j].toString().toLowerCase();
    }

    var content=[]
    for(var i=0; i<ds_unencrypted_volume_list.length; i++){
      vol=ds_unencrypted_volume_list[i]

      // Constructing IntanceIds with comma separated to display in detail_template
      var instancesList = vol['attachments']
      var instanceId=""
      for(var j=0; j < instancesList.length; j++){
        instanceId = instancesList[j]['instance_Id']
      }

      //Check, if the tag present in entered param_exclude_tags, ignore the Volume if the tag matches/present.
      var tags = vol['tags']
      var isTagMatched=false
      var tagKeyValue=""
      for(var j=0; j < tags.length; j++){
        tag = tags[j]
        if((param_exclude_tags_lower.indexOf((tag['tagKey']).toLowerCase()) !== -1) || (param_exclude_tags_lower.indexOf((tag['tagKey']+'='+tag['tagValue']).toLowerCase()) !== -1)){
          isTagMatched = true;
        }
        // Constructing tags with comma separated to display in detail_template
        if((tag['tagValue']).length > 0){
          tagKeyValue = tagKeyValue + ', '+ tag['tagKey']+'='+tag['tagValue']
        }else{
          tagKeyValue = tagKeyValue + ', '+ tag['tagKey']
        }
      }

      //If the volume tag does not match with entered param_exclude_tags
      if(!(isTagMatched)){
          content.push({
          instanceId:instanceId,
          tagKeyValue:(tagKeyValue.slice(2)),
          id:vol['volume_id'],
          availability_zone:vol['availability_zone'],
          snapshot_id:vol['snapshot_id'],
          encrypted:vol['encrypted'],
          vol_status:vol['vol_status'],
          vol_type:vol['vol_type'],
          region:vol['region']
        })
      }
    }
  content = _.sortBy(content,'id')
  content = _.sortBy(content,'region')
  content = _.sortBy(content,'availability_zone')
  EOS
end

###############################################################################
# Policy
###############################################################################
policy "policy_unencrypted_volumes_list" do
  validate $ds_unencrypted_volumes_map do
    summary_template "{{ rs_project_name }} (Account ID: {{ rs_project_id }}): {{ len data }} Unencrypted Volumes Found in AWS"
    escalate $report_unencrypted_volumes
    check eq(size(data),0)
    export do
      resource_level true
      field "id" do
        label "Volume Id"
      end
      field "region" do
        label "Region"
      end
      field "availability_zone" do
        label "Availability Zone"
      end
      field "instanceId" do
        label "Instance Id"
      end
      field "snapshot_id" do
        label "Snaphot Id"
      end
      field "encrypted" do
        label "Encrypted"
      end
      field "vol_status" do
        label "Volume Status"
      end
      field "vol_type" do
        label "Volume Type"
      end
      field "tagKeyValue" do
        label "TAGs"
      end
    end
  end
end
###############################################################################
# Escalations
###############################################################################

escalation "report_unencrypted_volumes" do
  automatic true
  label "Send Email"
  description "Send incident email"
  email $param_email
end

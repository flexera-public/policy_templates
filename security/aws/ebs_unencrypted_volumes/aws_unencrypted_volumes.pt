name "AWS Unencrypted Volumes"
rs_pt_ver 20180301
type "policy"
short_description "Report any Elastic Block Store (EBS) volumes in AWS that are unencrypted. \n See the [README](https://github.com/rightscale/policy_templates/tree/master/security/aws/ebs_unencrypted_volumes) and [docs.rightscale.com/policies](http://docs.rightscale.com/policies/) to learn more."
long_description ""
category "Security"
severity "low"
info(
  version: "2.0",
  provider: "AWS",
  service: "EBS",
  policy_set: ""
)


###############################################################################
# Permissions
###############################################################################

permission "perm_read_creds" do
  actions   "rs_cm.show_sensitive","rs_cm.index_sensitive"
  resources "rs_cm.credentials"
end

###############################################################################
# User inputs
###############################################################################

parameter "param_email" do
  type "list"
  label "Email addresses to notify"
  description "Email addresses of the recipients you wish to notify when new incidents are created"
end

parameter "param_exclude_tags" do
  type "list"
  label "Tags to ignore"
  description "List of tags that will exclude resources from being evaluated by this policy. Multiple tags are evaluated as an 'OR' condition. Tag keys or key/value pairs can be listed. Example: 'test,env=dev'"
end

###############################################################################
# Authentication
###############################################################################

credentials "auth_aws" do
  schemes "aws","aws_sts"
  label "AWS"
  description "Select the AWS Credential from the list"
  tags "provider=aws"
end


###############################################################################
# Pagination
###############################################################################

pagination "aws_pagination_xml" do
  get_page_marker do
    body_path "//DescribeVolumesResponse/nextToken"
  end
  set_page_marker do
    query "NextToken"
  end
end

###############################################################################
# Datasource
###############################################################################

#Generates list of Regions
datasource "ds_regions_list" do
  request do
    verb "GET"
    host "raw.githubusercontent.com"
    path "/rightscale/policy_templates/master/data/aws/regions.json"
    header "User-Agent", "RS Policies"
  end
end

#To get list of All Unencrypted Volumes.
datasource "ds_unencrypted_volume_list" do
  iterate $ds_regions_list
  request do
    run_script $js_aws_unencrypted_volumes_list, val(iter_item,"region")
  end
  result do
    encoding "xml"
    collect xpath(response, "//DescribeVolumesResponse/volumeSet/item", "array") do
      field "tags" do
        collect xpath(col_item, "tagSet/item") do
          field "tagKey", xpath(col_item, "key")
          field "tagValue", xpath(col_item, "value")
        end
      end
      field "attachments" do
        collect xpath(col_item, "attachmentSet/item") do
          field "instance_Id", xpath(col_item, "instanceId")
        end
      end
      field "volume_id", xpath(col_item, "volumeId")
      field "availability_zone", xpath(col_item, "availabilityZone")
      field "snapshot_id", xpath(col_item, "snapshotId")
      field "encrypted", xpath(col_item, "encrypted")
      field "vol_status", xpath(col_item, "status")
      field "vol_type", xpath(col_item, "volumeType")
	  field "region", val(iter_item,"region")
    end
  end
end

datasource "ds_unencrypted_volumes_map" do
  run_script $js_unencrypted_vol_filter_map, $ds_unencrypted_volume_list, $param_exclude_tags
end

###############################################################################
# Script
###############################################################################

#https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DescribeVolumes.html
script "js_aws_unencrypted_volumes_list", type: "javascript" do
  parameters "region"
  result "results"
  code <<-EOS
    results = {
      auth: "auth_aws",
      host: 'ec2.'+region+'.amazonaws.com',
      path: '/',
      pagination: "aws_pagination_xml",
      query_params: {
        "Action": "DescribeVolumes",
        "Filter.1.Name": "encrypted",
        "Filter.1.Value.1": "false",
        "Version": "2016-11-15",
      }
	}
  EOS
end

#Process the response data and check for the tags and unencrypted voulmes
script "js_unencrypted_vol_filter_map", type: "javascript" do
  parameters "ds_unencrypted_volume_list","param_exclude_tags"
  result "content"
  code <<-EOS
    var param_exclude_tags_lower=[];
    for(var j=0; j < param_exclude_tags.length; j++){
      param_exclude_tags_lower[j]=param_exclude_tags[j].toString().toLowerCase();
    }

    var content=[]
    for(var i=0; i<ds_unencrypted_volume_list.length; i++){
      vol=ds_unencrypted_volume_list[i]

      // Constructing IntanceIds with comma separated to display in detail_template
      var instancesList = vol['attachments']
      var instanceId=""
      for(var j=0; j < instancesList.length; j++){
        instanceId = instancesList[j]['instance_Id']
      }

      //Check, if the tag present in entered param_exclude_tags, ignore the Volume if the tag matches/present.
      var tags = vol['tags']
      var isTagMatched=false
      var tagKeyValue=""
      for(var j=0; j < tags.length; j++){
        tag = tags[j]
        if((param_exclude_tags_lower.indexOf((tag['tagKey']).toLowerCase()) !== -1) || (param_exclude_tags_lower.indexOf((tag['tagKey']+'='+tag['tagValue']).toLowerCase()) !== -1)){
          isTagMatched = true;
        }
        // Constructing tags with comma separated to display in detail_template
        if((tag['tagValue']).length > 0){
          tagKeyValue = tagKeyValue + ', '+ tag['tagKey']+'='+tag['tagValue']
        }else{
          tagKeyValue = tagKeyValue + ', '+ tag['tagKey']
        }
     }

      //If the volume tag does not match with entered param_exclude_tags
      if(!(isTagMatched)){
          content.push({
          instanceId:instanceId,
          tagKeyValue:(tagKeyValue.slice(2)),
          volume_id:vol['volume_id'],
          availability_zone:vol['availability_zone'],
          snapshot_id:vol['snapshot_id'],
          encrypted:vol['encrypted'],
          vol_status:vol['vol_status'],
          vol_type:vol['vol_type'],
          region:vol['region']
         })
      }
    }
  EOS
end

###############################################################################
# Policy
###############################################################################
policy "policy_unencrypted_volumes_list" do
  validate $ds_unencrypted_volumes_map do
    summary_template "{{ rs_project_name }} (Account ID: {{ rs_project_id }}): {{ len data }} Unencrypted Volumes Found in AWS"
    detail_template <<-EOS
# List of Unencrypted Volumes
| Volume_ID | Region | Availability_Zones | Instance_ID | Snapshot_ID | Encrypted | Volume_Status | Volume_Type | TAG_Value |
| --------- | ------ | ------------------ | ----------- | ----------- | ----------| ------------- | ----------- | --------- |
{{ range data -}}
| {{.volume_id}} | {{ .region }} | {{ .availability_zone }} | {{ .instanceId }} | {{ .snapshot_id }} | {{ .encrypted }} | {{.vol_status}} | {{.vol_type}} | {{.tagKeyValue}} |
{{ end -}}
    EOS
    escalate $report_unencrypted_volumes
    check eq(size(data),0)
  end
end
###############################################################################
# Escalations
###############################################################################

escalation "report_unencrypted_volumes" do
  email $param_email
end

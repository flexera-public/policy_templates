name "AWS Internet-facing ELBs & ALBs"
rs_pt_ver 20180301
type "policy"
short_description "Report and remediate any Classic Load Balancers(ELBs) and Application load Balancers(ALBs) that are Internet-facing. \n See the [README](https://github.com/flexera/policy_templates/tree/master/security/aws/loadbalancer_internet_facing) and [docs.rightscale.com/policies](https://docs.rightscale.com/policies/) to learn more."
long_description ""
category "Security"
severity "high"
info(
  version: "2.5",
  provider: "AWS",
  service: "ELB",
  policy_set: ""
)

###############################################################################
# User inputs
###############################################################################

parameter "param_allowed_regions" do
  type "list"
  label "Allowed Regions"
  allowed_pattern /^([a-zA-Z-_]+-[a-zA-Z0-9-_]+-[0-9-_]+,*|)+$/
  description "A list of allowed regions. See the README for more details"
end

parameter "param_email" do
  type "list"
  label "Email addresses to notify"
  description "Email addresses of the recipients you wish to notify when new incidents are created"
end

parameter "param_exclude_tags" do
  type "list"
  label "Tags to ignore"
  description "List of tags that will exclude load Balancers from being evaluated by this policy. Multiple tags are evaluated as an 'OR' condition. Tag keys or Key/value pairs can be listed. Example: 'test,env=dev'"
end

parameter "param_automatic_action" do
  type "list"
  label "Automatic Actions"
  description "When this value is set, this policy will automatically take the selected action(s)"
  allowed_values ["Delete ELBs and ALBs"]
end

###############################################################################
# Authentication
###############################################################################

#authenticate with AWS
credentials "auth_aws" do
  schemes "aws","aws_sts"
  label "AWS"
  description "Select the AWS Credential from the list"
  tags "provider=aws"
end

###############################################################################
# Pagination
###############################################################################

pagination "elb_pagination" do
  get_page_marker do
    body_path "DescribeLoadBalancersResult.NextMarker"
  end
  set_page_marker do
    query "Marker"
  end
end

###############################################################################
# Datasources
###############################################################################

datasource "ds_region_list" do
  request do
    auth $auth_aws
    verb "GET"
    host "ec2.amazonaws.com"
    path "/"
    query "Action", "DescribeRegions"
    query "Version", "2016-11-15"
  end
  result do
    encoding "xml"
    collect xpath(response, "//DescribeRegionsResponse/regionInfo/item", "array") do
      field "region", xpath(col_item, "regionName")
    end
  end
end

# Get only SCP enabled regions
datasource "ds_regions" do
  run_script $js_regions, $param_allowed_regions, $ds_region_list
end

#Generates list of Regions with Load Balancer type and API version.
datasource "ds_regions_list" do
  run_script $js_regions_map, $ds_regions
end

#Get the list of all Classic and application load Balancers
datasource "ds_elb_list" do
  iterate $ds_regions_list
  request do
    run_script $js_elb_list, val(iter_item,"region"), val(iter_item,"API_version")
  end
  result do
    encoding "json"
    collect jmes_path(response, "DescribeLoadBalancersResponse.DescribeLoadBalancersResult.*[*][]") do
      field "loadBalancerName", jmes_path(col_item, "LoadBalancerName")
      field "loadBalancerType", val(iter_item,"LBtype")
      field "region", val(iter_item,"region")
      field "availabilityZones", jmes_path(col_item, "AvailabilityZones")
      field "scheme",  jmes_path(col_item, "Scheme")
      field "loadBalancerArn",  jmes_path(col_item, "LoadBalancerArn")
      field "api_version", val(iter_item,"API_version")
    end
  end
end

#Get respective tags for all Classic and application load Balancers
datasource "ds_elb_list_with_tags" do
  iterate $ds_elb_list
  request do
    run_script $js_elb_list_with_tags, val(iter_item,"region"), val(iter_item,"api_version"), val(iter_item, "loadBalancerName"), val(iter_item, "loadBalancerArn")
  end
  result do
    encoding "json"
    collect jmes_path(response, "DescribeTagsResponse.DescribeTagsResult.TagDescriptions[*]") do
      field "loadBalancerName", val(iter_item, "loadBalancerName")
      field "loadBalancerType", val(iter_item,"loadBalancerType")
      field "region", val(iter_item,"region")
      field "availabilityZones", val(iter_item, "availabilityZones")
      field "tags" do
        collect jmes_path(col_item,"Tags") do
          field "tagKey", jmes_path(col_item,"Key")
          field "tagValue", jmes_path(col_item,"Value")
        end
      end
      field "scheme",  val(iter_item,"scheme")
      field "loadBalancerArn",  val(iter_item,"loadBalancerArn")
      field "api_version", val(iter_item,"api_version")
    end
  end
end

datasource "ds_internet_facing_elb_map" do
  run_script $js_elb_filter_map, $ds_elb_list_with_tags, $param_exclude_tags
end

###############################################################################
# Script
###############################################################################

script "js_regions", type:"javascript" do
  parameters "user_entered_regions", "all_regions"
  result "regions"
  code <<-EOS
  if (_.isEmpty(user_entered_regions)) {
    regions = all_regions;
  } else {
    //Filter unique regions
    var uniqueRegions = _.uniq(user_entered_regions);
    var all_regions_list = [];
    all_regions.forEach(function (all_region) {
      all_regions_list.push(all_region.region)
    })

    //Filter valid regions
    var valid_regions = [];
    _.map(uniqueRegions, function (uniqueRegion) {
      if (all_regions_list.indexOf(uniqueRegion) > -1) {
        valid_regions.push({ "region": uniqueRegion })
      }
    })

    //Throw an error if no valid regions found
    if (_.isEmpty(valid_regions)) {
      regions = all_regions;
    } else {
      regions = valid_regions
    }
  }
EOS
end

#Generates list of Regions with Load Balancer type and API version.
script "js_regions_map", type: "javascript" do
  parameters "regions"
  result "regions_map"
  code <<-EOS
  var regions_map=[];
  for(var i=0; i < regions.length; i++){
    regions_map.push({
      "region": regions[i].region,
      "API_version": "2012-06-01",
      "LBtype": "Classic"
    })
    regions_map.push({
      "region": regions[i].region,
      "API_version": "2015-12-01",
      "LBtype": "Application"
    })
  }
EOS
end

#https://docs.aws.amazon.com/elasticloadbalancing/2012-06-01/APIReference/API_DescribeLoadBalancers.html (Classic Load Balancer)
#https://docs.aws.amazon.com/elasticloadbalancing/latest/APIReference/API_DescribeLoadBalancers.html (Applicatio Load Balancer)
script "js_elb_list", type: "javascript" do
  parameters "region", "APIversion"
  result "request"
  code <<-EOS
  request = {
    auth: 'auth_aws',
    pagination: 'elb_pagination',
    host: 'elasticloadbalancing.'+region+'.amazonaws.com',
    path: '/',
    verb: 'GET',
    query_params: {
      "Action": "DescribeLoadBalancers",
      "Version": APIversion
    },
    headers: {
      "Accept": "application/json"
    }
  }
EOS
end

#https://docs.aws.amazon.com/elasticloadbalancing/2012-06-01/APIReference/API_DescribeTags.html (Classic Load Balancer)
#https://docs.aws.amazon.com/elasticloadbalancing/latest/APIReference/API_DescribeTags.html (Applicatio Load Balancer)
script "js_elb_list_with_tags", type: "javascript" do
  parameters "region", "APIversion", "loadBalancerName", "loadBalancerArn"
  result "request"
  code <<-EOS
  request = {
    auth: 'auth_aws',
    host: 'elasticloadbalancing.'+region+'.amazonaws.com',
    path: '/',
    verb: 'GET',
    query_params: {
      "Action": "DescribeTags",
      "Version": APIversion,
      "LoadBalancerNames.member.1": loadBalancerName,
      "ResourceArns.member.1": loadBalancerArn
    },
    headers: {
      "Accept": "application/json"
    }
  }
EOS
end


#Process the response data, check for the tags and generate a list of internetfacing ELBs
script "js_elb_filter_map", type: "javascript" do
  parameters "ds_elb_list_with_tags", "param_exclude_tags"
  result "content"
  code <<-EOS
  var param_exclude_tags_lower = [];
  for (var j = 0; j < param_exclude_tags.length; j++) {
    param_exclude_tags_lower[j] = param_exclude_tags[j].toString().toLowerCase();
  }

  var content = []
  for (var i = 0; i < ds_elb_list_with_tags.length; i++) {
    elb = ds_elb_list_with_tags[i]

    // Constructing availabilityZones with comma separated to display in detail_template
    var availabilityZones = elb['availabilityZones']
    var s_availabilityZones = ""
    for (var j = 0; j < availabilityZones.length; j++) {
      availabilityZone = availabilityZones[j]
      if (elb['loadBalancerType'] === 'Classic') {
        s_availabilityZones = s_availabilityZones + ', ' + availabilityZone
      } else {
        s_availabilityZones = s_availabilityZones + ', ' + availabilityZone.ZoneName
      }
    }

    //Constructing Tags of individual ELB into key=value format. Check, if the tag present in entered param_exclude_tags. Ignore the Load Balancer if the tag matches/present.
    var tags = elb['tags']
    var isTagMatched = false
    var tagKeyValue = ""
    for (var j = 0; j < tags.length; j++) {
      tag = tags[j]
      if ((param_exclude_tags_lower.indexOf((tag['tagKey']).toLowerCase()) !== -1) || (param_exclude_tags_lower.indexOf((tag['tagKey'] + '=' + tag['tagValue']).toLowerCase()) !== -1)) {
        isTagMatched = true;
      }
      // Constructing tags with comma separated to display in detail_template
      if ((tag['tagValue']).length > 0) {
        tagKeyValue = tagKeyValue + ', ' + tag['tagKey'] + '=' + tag['tagValue']
      } else {
        tagKeyValue = tagKeyValue + ', ' + tag['tagKey']
      }
    }

    //If the Load Balancer tag does not match with entered param_exclude_tags, then check if Load Balancer is internet-facing.
    if (!(isTagMatched) && (elb['scheme']) === 'internet-facing') {
      content.push({
        loadBalancerName: elb['loadBalancerName'],
        loadBalancerType: elb['loadBalancerType'],
        region: elb['region'],
        availabilityZones: (s_availabilityZones.slice(2)),
        tagKeyValue: (tagKeyValue.slice(2)),
        loadBalancerArn: elb['loadBalancerArn'],
        api_version: elb['api_version'],
      })
    }
  }
    content = _.sortBy(content, 'region');
EOS
end

###############################################################################
# Policy
###############################################################################

policy "policy_internet_facing_ELB" do
  validate $ds_internet_facing_elb_map do
    summary_template "{{ rs_project_name }} (Account ID: {{ rs_project_id }}): {{ len data }} Internet-facing ELBs & ALBs Found in AWS"
    escalate $report_internet_facing_ELB
    escalate $approve_delete_internet_facing_ELB
    check eq(size(data),0)
    export do
      resource_level true
      field "region" do
        label "Region"
      end
      field "id" do
        label "LoadBalancer Name"
        path "loadBalancerName"
      end
      field "loadBalancerType" do
        label "LoadBalancer Type"
      end
      field "availabilityZones" do
        label "Availability Zones"
      end
      field "tagKeyValue" do
        label "Tags"
      end
      field "loadBalancerArn" do
        label "LoadBalancer ARN"
      end
      field "api_version" do
        label "API Version"
      end
    end
  end
end

###############################################################################
# Escalations
###############################################################################

escalation "report_internet_facing_ELB" do
  automatic true
  label "Send Email"
  description "Send incident email"
  email $param_email
end

escalation "approve_delete_internet_facing_ELB" do
  automatic contains($param_automatic_action, "Delete ELBs and ALBs")
  label "Delete Resource"
  description "Delete selected ELB's & ALB's"
  run "delete_internet_facing_ELB", data
end

###############################################################################
# Cloud Workflow
###############################################################################

#https://docs.aws.amazon.com/elasticloadbalancing/2012-06-01/APIReference/API_DeleteLoadBalancer.html (Classic Load Balancer)
#https://docs.aws.amazon.com/elasticloadbalancing/latest/APIReference/API_DeleteLoadBalancer.html (Application Load Balancer)
define delete_internet_facing_ELB($data) return $all_responses do
  $$debug=true
  $all_responses = []
  $LoadBalancer= ""
  foreach $item in $data do
    if $item["loadBalancerType"] == "Classic"
      $LoadBalancer= "LoadBalancerName="+ $item["id"]
    else
      $LoadBalancer="LoadBalancerArn="+ $item["loadBalancerArn"]
    end

    sub on_error: skip do
      $response = http_request(
        verb: "get",
        host: join(["elasticloadbalancing.",$item["region"],".amazonaws.com"]),
        auth: $$auth_aws,
        href: join(["/", "?Action=DeleteLoadBalancer", "&Version=", $item["api_version"], "&", $LoadBalancer]),
        https: true,
        headers:{
          "cache-control": "no-cache",
          "content-type": "application/json"
        }
      )
      $all_responses << $response
      call sys_log('ELB delete response',to_s($response))
    end
  end
end

define sys_log($subject, $detail) do
  if $$debug
    rs_cm.audit_entries.create(
      notify: "None",
      audit_entry: {
        auditee_href: @@account,
        summary: "AWS Delete Internet-facing ELB's & ALB's Policy "+ $subject,
        detail: $detail
      }
    )
  end
end

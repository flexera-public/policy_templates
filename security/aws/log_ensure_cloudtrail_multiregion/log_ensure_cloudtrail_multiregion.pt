name "AWS CloudTrail Not Enabled In All Regions"
rs_pt_ver 20180301
type "policy"
short_description "Report if CloudTrail is not fully enabled in all regions. See the [README](https://github.com/flexera-public/policy_templates/tree/master/security/aws/log_ensure_cloudtrail_multiregion) and [docs.rightscale.com/policies](https://docs.rightscale.com/policies/) to learn more."
long_description ""
doc_link "https://github.com/flexera-public/policy_templates/tree/master/security/aws/log_ensure_cloudtrail_multiregion"
category "Security"
severity "high"
default_frequency "daily"
info(
  version: "3.0.4",
  provider: "AWS",
  service: "CloudTrail",
  policy_set: "CIS",
  cce_id: "CCE-78913-1",
  cis_aws_foundations_securityhub: "2.1",
  benchmark_control: "3.1",
  benchmark_version: "1.4.1",
  cis_controls: "[\"8.5v8\", \"6.2v7\"]",
  nist: "AU-2",
  hide_skip_approvals: "true"
)

###############################################################################
# Parameters
###############################################################################

parameter "param_email" do
  type "list"
  category "Policy Settings"
  label "Email Addresses"
  description "Email addresses of the recipients you wish to notify."
  default []
end

parameter "param_aws_account_number" do
  type "string"
  category "Policy Settings"
  label "Account Number"
  description "Leave blank; this is for automated use with Meta Policies. See README for more details."
  default ""
end

###############################################################################
# Authentication
###############################################################################

credentials "auth_aws" do
  schemes "aws", "aws_sts"
  label "AWS"
  description "Select the AWS Credential from the list"
  tags "provider=aws"
  aws_account_number $param_aws_account_number
end

credentials "auth_flexera" do
  schemes "oauth2"
  label "Flexera"
  description "Select Flexera One OAuth2 credentials"
  tags "provider=flexera"
end

###############################################################################
# Datasources & Scripts
###############################################################################

# Get region-specific Flexera API endpoints
datasource "ds_flexera_api_hosts" do
  run_script $js_flexera_api_hosts, rs_optima_host
end

script "js_flexera_api_hosts", type: "javascript" do
  parameters "rs_optima_host"
  result "result"
  code <<-EOS
  host_table = {
    "api.optima.flexeraeng.com": {
	    api: "api.flexera.com",
      flexera: "api.flexera.com",
      fsm: "api.fsm.flexeraeng.com",
      grs: "grs-front.iam-us-east-1.flexeraeng.com",
      ui: "app.flexera.com",
      tld: "flexera.com"
    },
    "api.optima-eu.flexeraeng.com": {
	    api: "api.flexera.eu",
      flexera: "api.flexera.eu",
      fsm: "api.fsm-eu.flexeraeng.com",
      grs: "grs-front.eu-central-1.iam-eu.flexeraeng.com",
      ui: "app.flexera.eu",
      tld: "flexera.eu"
    },
    "api.optima-apac.flexeraeng.com": {
	    api: "api.flexera.au",
      flexera: "api.flexera.au",
      fsm: "api.fsm-apac.flexeraeng.com",
      grs: "grs-front.ap-southeast-2.iam-apac.flexeraeng.com",
      ui: "app.flexera.au",
      tld: "flexera.au"
    }
  }

  result = host_table[rs_optima_host]
EOS
end

# Get applied policy metadata for use later
datasource "ds_applied_policy" do
  request do
    auth $auth_flexera
    host val($ds_flexera_api_hosts, "flexera")
    path join(["/policy/v1/orgs/", rs_org_id, "/projects/", rs_project_id, "/applied-policies/", policy_id])
  end
end

# Get AWS account info
datasource "ds_cloud_vendor_accounts" do
  request do
    auth $auth_flexera
    host val($ds_flexera_api_hosts, 'flexera')
    path join(["/finops-analytics/v1/orgs/", rs_org_id, "/cloud-vendor-accounts"])
    header "Api-Version", "1.0"
  end
  result do
    encoding "json"
    collect jmes_path(response, "values[*]") do
      field "id", jmes_path(col_item, "aws.accountId")
      field "name", jmes_path(col_item, "name")
      field "tags", jmes_path(col_item, "tags")
    end
  end
end

datasource "ds_get_caller_identity" do
  request do
    auth $auth_aws
    host "sts.amazonaws.com"
    path "/"
    query "Action", "GetCallerIdentity"
    query "Version", "2011-06-15"
    header "User-Agent", "RS Policies"
  end
  result do
    encoding "xml"
    collect xpath(response, "//GetCallerIdentityResponse/GetCallerIdentityResult") do
      field "account", xpath(col_item, "Account")
    end
  end
end

datasource "ds_aws_account" do
  run_script $js_aws_account, $ds_cloud_vendor_accounts, $ds_get_caller_identity
end

script "js_aws_account", type:"javascript" do
  parameters "ds_cloud_vendor_accounts", "ds_get_caller_identity"
  result "result"
  code <<-EOS
  result = _.find(ds_cloud_vendor_accounts, function(account) {
    return account['id'] == ds_get_caller_identity[0]['account']
  })

  // This is in case the API does not return the relevant account info
  if (result == undefined) {
    result = {
      id: ds_get_caller_identity[0]['account'],
      name: "",
      tags: {}
    }
  }
EOS
end

datasource "ds_trail_list" do
  request do
    auth $auth_aws
    host "cloudtrail.us-east-1.amazonaws.com"
    path "/"
    query "Action", "DescribeTrails"
    header "User-Agent", "RS Policies"
    header "Accept", "application/json"
  end
  result do
    encoding "json"
    collect jmes_path(response, "DescribeTrailsResponse.DescribeTrailsResult.trailList") do
      field "name", jmes_path(col_item, "Name")
      field "arn", jmes_path(col_item, "TrailARN")
      field "homeregion", jmes_path(col_item, "HomeRegion")
      field "multiregion", jmes_path(col_item, "IsMultiRegionTrail")
    end
  end
end

datasource "ds_trail_list_with_logging" do
  iterate $ds_trail_list
  request do
    auth $auth_aws
    host join(["cloudtrail.", val(iter_item, "homeregion"), ".amazonaws.com"])
    path "/"
    query "Action", "GetTrailStatus"
    query "Name", val(iter_item, "arn")
    header "User-Agent", "RS Policies"
    header "Accept", "application/json"
  end
  result do
    encoding "json"
    field "is_logging", jmes_path(response, "GetTrailStatusResponse.GetTrailStatusResult.IsLogging")
    field "name", val(iter_item, "name")
    field "arn", val(iter_item, "arn")
    field "homeregion", val(iter_item, "homeregion")
    field "multiregion", val(iter_item, "multiregion")
  end
end

datasource "ds_trail_list_with_selectors" do
  iterate $ds_trail_list_with_logging
  request do
    auth $auth_aws
    host join(["cloudtrail.", val(iter_item, "homeregion"), ".amazonaws.com"])
    path "/"
    query "Action", "GetEventSelectors"
    query "TrailName", val(iter_item, "arn")
    header "User-Agent", "RS Policies"
    header "Accept", "application/json"
  end
  result do
    encoding "json"
    field "name", val(iter_item, "name")
    field "arn", val(iter_item, "arn")
    field "homeregion", val(iter_item, "homeregion")
    field "multiregion", val(iter_item, "multiregion")
    field "is_logging", val(iter_item, "is_logging")
    field "selectors", jmes_path(response, "GetEventSelectorsResponse.GetEventSelectorsResult.EventSelectors")
  end
end

datasource "ds_multiregion_fully_enabled" do
  run_script $js_multiregion_fully_enabled, $ds_trail_list_with_selectors, $ds_aws_account, $ds_applied_policy
end

script "js_multiregion_fully_enabled", type:"javascript" do
  parameters "ds_trail_list_with_selectors", "ds_aws_account", "ds_applied_policy"
  result "result"
  code <<-EOS
  result = {
    accountID: ds_aws_account['id'],
    accountName: ds_aws_account['name'],
    policy_name: ds_applied_policy['name']
  }

  good_trails = _.filter(ds_trail_list_with_selectors, function(trail) {
    good_selectors = _.filter(trail['selectors'], function(selector) {
      return selector['IncludeManagementEvents'] == true && selector['ReadWriteType'] == "All"
    })

    return trail['multiregion'] && trail['is_logging'] && good_selectors.length > 0
  })

  result["multiregion_fully_enabled"] = (good_trails.length > 0).toString()
EOS
end

###############################################################################
# Policy
###############################################################################

policy "pol_check_multiregion" do
  validate $ds_multiregion_fully_enabled do
    summary_template "{{ data.policy_name }}: AWS CloudTrail Not Enabled In All Regions"
    detail_template <<-EOS
AWS CloudTrail is not fully enabled in all regions for the following account:

**AWS Account:** {{ data.accountName }} ({{ data.accountID }})
EOS
    check eq(val(data, "multiregion_fully_enabled"), "true")
    escalate $esc_email
  end
end

###############################################################################
# Escalations
###############################################################################

escalation "esc_email" do
  automatic true
  label "Send Email"
  description "Send incident email"
  email $param_email
end

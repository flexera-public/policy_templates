name "AWS Unencrypted ELB Listeners (ALB/NLB)"
rs_pt_ver 20180301
type "policy"
short_description "Report any AWS App/Network Load Balancers w/Internet-facing Unencrypted Listeners. See the [README](https://github.com/flexera-public/policy_templates/tree/master/security/aws/elb_unencrypted) and [docs.flexera.com/flexera/EN/Automation](https://docs.flexera.com/flexera/EN/Automation/AutomationGS.htm) to learn more."
long_description ""
category "Security"
severity "medium"
info(
  version: "4.0.0",
  provider: "AWS",
  service: "ELB",
  policy_set: ""
)

###############################################################################
# Parameters
###############################################################################

parameter "param_email" do
  type "list"
  category "Policy Settings"
  label "Email Addresses"
  description "Email addresses of the recipients you wish to notify when new incidents are created"
  default []
end

parameter "param_aws_account_number" do
  type "string"
  category "Policy Settings"
  label "Account Number"
  description "Leave blank; this is for automated use with Meta Policies. See README for more details."
  default ""
end

parameter "param_regions_allow_or_deny" do
  type "string"
  category "Filters"
  label "Allow/Deny Regions"
  description "Allow or Deny entered regions. See the README for more details"
  allowed_values "Allow", "Deny"
  default "Allow"
end

parameter "param_regions_list" do
  type "list"
  category "Filters"
  label "Allow/Deny Regions List"
  description "A list of allowed or denied regions. See the README for more details"
  allowed_pattern /^([a-zA-Z-_]+-[a-zA-Z0-9-_]+-[0-9-_]+,*|)+$/
  default []
end

parameter "param_exclude_tags" do
  type "list"
  label "Ignore Tags"
  description "List of one or more Tags that will exclude Classic Load Balancer from actions being taken. Format: Key=Value"
end

###############################################################################
# Authentication
###############################################################################

credentials "auth_aws" do
  schemes "aws", "aws_sts"
  label "AWS"
  description "Select the AWS Credential from the list"
  tags "provider=aws"
  aws_account_number $param_aws_account_number
end

credentials "auth_flexera" do
  schemes "oauth2"
  label "Flexera"
  description "Select Flexera One OAuth2 credentials"
  tags "provider=flexera"
end

###############################################################################
# Pagination
###############################################################################

pagination "pagination_aws_elb" do
  get_page_marker do
    body_path "DescribeLoadBalancersResult.NextMarker"
  end
  set_page_marker do
    query "Marker"
  end
end

pagination "pagination_aws_listener" do
  get_page_marker do
    body_path "DescribeListenersResponse.NextMarker"
  end
  set_page_marker do
    query "Marker"
  end
end

###############################################################################
# Datasources & Scripts
###############################################################################

# Get applied policy metadata for use later
datasource "ds_applied_policy" do
  request do
    auth $auth_flexera
    host rs_governance_host
    path join(["/api/governance/projects/", rs_project_id, "/applied_policies/", policy_id])
    header "Api-Version", "1.0"
  end
end

# Get region-specific Flexera API endpoints
datasource "ds_flexera_api_hosts" do
  run_script $js_flexera_api_hosts, rs_optima_host
end

script "js_flexera_api_hosts", type: "javascript" do
  parameters "rs_optima_host"
  result "result"
  code <<-EOS
  host_table = {
    "api.optima.flexeraeng.com": {
      flexera: "api.flexera.com",
      fsm: "api.fsm.flexeraeng.com"
    },
    "api.optima-eu.flexeraeng.com": {
      flexera: "api.flexera.eu",
      fsm: "api.fsm-eu.flexeraeng.com"
    },
    "api.optima-apac.flexeraeng.com": {
      flexera: "api.flexera.au",
      fsm: "api.fsm-apac.flexeraeng.com"
    }
  }

  result = host_table[rs_optima_host]
EOS
end

# Get AWS account info
datasource "ds_cloud_vendor_accounts" do
  request do
    auth $auth_flexera
    host val($ds_flexera_api_hosts, 'flexera')
    path join(["/finops-analytics/v1/orgs/", rs_org_id, "/cloud-vendor-accounts"])
    header "Api-Version", "1.0"
  end
  result do
    encoding "json"
    collect jmes_path(response, "values[*]") do
      field "id", jmes_path(col_item, "aws.accountId")
      field "name", jmes_path(col_item, "name")
      field "tags", jmes_path(col_item, "tags")
    end
  end
end

datasource "ds_get_caller_identity" do
  request do
    auth $auth_aws
    verb "GET"
    host "sts.amazonaws.com"
    path "/"
    query "Action", "GetCallerIdentity"
    query "Version", "2011-06-15"
    header "User-Agent", "RS Policies"
  end
  result do
    encoding "xml"
    collect xpath(response, "//GetCallerIdentityResponse/GetCallerIdentityResult") do
      field "account", xpath(col_item, "Account")
    end
  end
end

datasource "ds_aws_account" do
  run_script $js_aws_account, $ds_cloud_vendor_accounts, $ds_get_caller_identity
end

script "js_aws_account", type:"javascript" do
  parameters "ds_cloud_vendor_accounts", "ds_get_caller_identity"
  result "result"
  code <<-EOS
  result = _.find(ds_cloud_vendor_accounts, function(account) {
    return account['id'] == ds_get_caller_identity[0]['account']
  })

  // This is in case the API does not return the relevant account info
  if (result == undefined) {
    result = {
      id: ds_get_caller_identity[0]['account'],
      name: "",
      tags: {}
    }
  }
EOS
end

datasource "ds_describe_regions" do
  request do
    auth $auth_aws
    verb "GET"
    host "ec2.amazonaws.com"
    path "/"
    query "Action", "DescribeRegions"
    query "Version", "2016-11-15"
    query "Filter.1.Name", "opt-in-status"
    query "Filter.1.Value.1", "opt-in-not-required"
    query "Filter.1.Value.2", "opted-in"
    # Header X-Meta-Flexera has no affect on datasource query, but is required for Meta Policies
    # Forces `ds_is_deleted` datasource to run first during policy execution
    header "Meta-Flexera", val($ds_is_deleted, "path")
  end
  result do
    encoding "xml"
    collect xpath(response, "//DescribeRegionsResponse/regionInfo/item", "array") do
      field "region", xpath(col_item, "regionName")
    end
  end
end

datasource "ds_regions" do
  run_script $js_regions, $ds_describe_regions, $param_regions_list, $param_regions_allow_or_deny
end

script "js_regions", type:"javascript" do
  parameters "ds_describe_regions", "param_regions_list", "param_regions_allow_or_deny"
  result "result"
  code <<-EOS
  allow_deny_test = { "Allow": true, "Deny": false }

  if (param_regions_list.length > 0) {
    result = _.filter(ds_describe_regions, function(item) {
      return _.contains(param_regions_list, item['region']) == allow_deny_test[param_regions_allow_or_deny]
    })
  } else {
    result = ds_describe_regions
  }
EOS
end

#Get the list of all network and application load Balancers
datasource "ds_elb_list" do
  iterate $ds_regions
  request do
    run_script $js_elb_list, val(iter_item,"region")
  end
  result do
    encoding "json"
    collect jmes_path(response, "DescribeLoadBalancersResponse.DescribeLoadBalancersResult.*[*][]") do
      field "loadBalancerName", jmes_path(col_item, "LoadBalancerName")
      field "region", val(iter_item,"region")
      field "availabilityZones", jmes_path(col_item, "AvailabilityZones")
      field "scheme",  jmes_path(col_item, "Scheme")
      field "loadBalancerArn",  jmes_path(col_item, "LoadBalancerArn")
      field "loadBalancerType", jmes_path(col_item, "Type")
    end
  end
end

script "js_elb_list", type: "javascript" do
  parameters "region"
  result "request"
  code <<-EOS
  request = {
    auth: 'auth_aws',
    pagination: 'pagination_aws_elb',
    host: 'elasticloadbalancing.'+region+'.amazonaws.com',
    path: '/',
    verb: 'GET',
    query_params: {
      "Action": "DescribeLoadBalancers",
      "Version": "2015-12-01"
    },
    headers: {
      "Accept": "application/json"
    }
  }
EOS
end

#Get respective tags for all load Balancers
datasource "ds_elb_list_with_tags" do
  iterate $ds_elb_list
  request do
    run_script $js_elb_list_with_tags, val(iter_item,"region"), val(iter_item, "loadBalancerName"), val(iter_item, "loadBalancerArn")
  end
  result do
    encoding "json"
    collect jmes_path(response, "DescribeTagsResponse.DescribeTagsResult.TagDescriptions[*]") do
      field "loadBalancerName", val(iter_item, "loadBalancerName")
      field "region", val(iter_item,"region")
      field "availabilityZones", val(iter_item, "availabilityZones")
      field "tags" do
        collect jmes_path(col_item,"Tags") do
          field "tagKey", jmes_path(col_item,"Key")
          field "tagValue", jmes_path(col_item,"Value")
        end
      end
      field "scheme",  val(iter_item,"scheme")
      field "loadBalancerArn",  val(iter_item,"loadBalancerArn")
      field "loadBalancerType", val(iter_item,"loadBalancerType")
    end
  end
end

script "js_elb_list_with_tags", type: "javascript" do
  parameters "region", "loadBalancerName", "loadBalancerArn"
  result "request"
  code <<-EOS
    request = {
      auth: 'auth_aws',
      host: 'elasticloadbalancing.'+region+'.amazonaws.com',
      path: '/',
      verb: 'GET',
      query_params: {
        "Action": "DescribeTags",
        "Version": "2015-12-01",
        "LoadBalancerNames.member.1": loadBalancerName,
        "ResourceArns.member.1": loadBalancerArn
      },
      headers: {
        "Accept": "application/json"
      }
    }
  EOS
end

datasource "ds_elb_listeners_with_tags" do
  iterate $ds_elb_list_with_tags
  request do
    run_script $js_elb_listeners_with_tags, val(iter_item,"region"), val(iter_item, "loadBalancerArn")
  end
  result do
    encoding "json"
    collect jmes_path(response, "DescribeListenersResponse.DescribeListenersResult.Listeners[*]") do
      field "loadBalancerName", val(iter_item, "loadBalancerName")
      field "region", val(iter_item,"region")
      field "availabilityZones", val(iter_item, "availabilityZones")
      field "tags", val(iter_item, "tags")
      field "scheme",  val(iter_item,"scheme")
      field "loadBalancerArn",  val(iter_item,"loadBalancerArn")
      field "loadBalancerType", val(iter_item,"loadBalancerType")
      field "listenerProtocol", jmes_path(col_item,"Protocol")
      field "listenerPort", jmes_path(col_item,"Port")
    end
  end
end

script "js_elb_listeners_with_tags", type: "javascript" do
  parameters "region", "loadBalancerArn"
  result "request"
  code <<-EOS
    request = {
      auth: 'auth_aws',
      pagination: 'pagination_aws_listener',
      host: 'elasticloadbalancing.'+region+'.amazonaws.com',
      path: '/',
      verb: 'GET',
      query_params: {
        "Action": "DescribeListeners",
        "Version": "2015-12-01",
        "LoadBalancerArn": loadBalancerArn
      },
      headers: {
        "Accept": "application/json"
      }
    }
  EOS
end

datasource "ds_unencrypted_elb_map" do
  run_script $js_elb_filter_map, $ds_elb_listeners_with_tags, $param_exclude_tags
end

script "js_elb_filter_map", type: "javascript" do
  parameters "ds_elb_listeners_with_tags", "param_exclude_tags"
  result "content"
  code <<-EOS
  var param_exclude_tags_lower = [];
  for (var j = 0; j < param_exclude_tags.length; j++) {
    param_exclude_tags_lower[j] = param_exclude_tags[j].toString().toLowerCase();
  }

  var content = []
  for (var i = 0; i < ds_elb_listeners_with_tags.length; i++) {
    elb = ds_elb_listeners_with_tags[i]

    // Constructing availabilityZones with comma separated to display in detail_template
    var availabilityZones = elb['availabilityZones']
    var s_availabilityZones = ""
    for (var j = 0; j < availabilityZones.length; j++) {
      availabilityZone = availabilityZones[j]
      s_availabilityZones = s_availabilityZones + ', ' + availabilityZone.ZoneName
    }

    //Constructing Tags of individual ELB into key=value format. Check, if the tag present in entered param_exclude_tags. Ignore the Load Balancer if the tag matches/present.
    var tags = elb['tags']
    var isTagMatched = false
    var tagKeyValue = ""
    for (var j = 0; j < tags.length; j++) {
      tag = tags[j]
      if ((param_exclude_tags_lower.indexOf((tag['tagKey']).toLowerCase()) !== -1) || (param_exclude_tags_lower.indexOf((tag['tagKey'] + '=' + tag['tagValue']).toLowerCase()) !== -1)) {
        isTagMatched = true;
      }
      // Constructing tags with comma separated to display in detail_template
      if ((tag['tagValue']).length > 0) {
        tagKeyValue = tagKeyValue + ', ' + tag['tagKey'] + '=' + tag['tagValue']
      } else {
        tagKeyValue = tagKeyValue + ', ' + tag['tagKey']
      }
    }

    //If the Load Balancer tag does not match with entered param_exclude_tags, then check if Load Balancer is internet-facing and has HTTPS/TLS in use.
    if (!(isTagMatched) && (elb['scheme']) === 'internet-facing') {
      // check for HTTPS or TLS listeners
      protocol = elb['listenerProtocol']
      switch (protocol) {
        case "HTTPS":
          break
        case "TLS":
          break
        default:
          content.push({
            id: elb['loadBalancerName'],
            loadBalancerType: elb['loadBalancerType'],
            loadBalancerProtocol: protocol,
            loadBalancerPort: elb['listenerPort'],
            region: elb['region'],
            availabilityZones: (s_availabilityZones.slice(2)),
            tagKeyValue: (tagKeyValue.slice(2)),
            loadBalanceProtocolAndPort: protocol + " " + elb['listenerPort']
          })
      }
    }
  }

  content = _.sortBy(content, 'id')
  content = _.sortBy(content, 'loadBalancerType')
  content = _.sortBy(content, 'region')
EOS
end

###############################################################################
# Policy
###############################################################################

policy "pol_unencrypted_ALB_NLB" do
  validate $ds_unencrypted_elb_map do
    summary_template "{{ with index data 0 }}{{ .policy_name }}{{ end }}: {{ len data }} AWS Unencrypted ELB Listeners (ALB/NLB)"
    check eq(size(data), 0)
    escalate $esc_email
    export do
      resource_level true
      field "id" do
        label "LoadBalancer Name"
      end
      field "loadBalancerType" do
        label "Load Balancer Type"
      end
      field "loadBalanceProtocolAndPort" do
        label "Listener Protocol (Port)"
      end
      field "region" do
        label "Region"
      end
      field "availabilityZones" do
        label "Availability Zones"
      end
      field "tagKeyValue" do
        label "TAGs"
      end
    end
  end
end

###############################################################################
# Escalations
###############################################################################

escalation "esc_email" do
  automatic true
  label "Send Email"
  description "Send incident email"
  email $param_email
end

###############################################################################
# Meta Policy [alpha]
# Not intended to be modified or used by policy developers
###############################################################################

# If the meta_parent_policy_id is not set it will evaluate to an empty string and we will look for the policy itself,
# if it is set we will look for the parent policy.
datasource "ds_get_policy" do
  request do
    auth $auth_flexera
    host rs_governance_host
    ignore_status [404]
    path join(["/api/governance/projects/", rs_project_id, "/applied_policies/", switch(ne(meta_parent_policy_id, ""), meta_parent_policy_id, policy_id)])
    header "Api-Version", "1.0"
  end
  result do
    encoding "json"
    field "id", jmes_path(response, "id")
  end
end

datasource "ds_parent_policy_terminated" do
  run_script $js_decide_if_self_terminate, $ds_get_policy, policy_id, meta_parent_policy_id
end

# If the policy was applied by a meta_parent_policy we confirm it exists if it doesn't we confirm we are deleting
# This information is used in two places:
# - determining whether or not we make a delete call
# - determining if we should create an incident (we don't want to create an incident on the run where we terminate)
script "js_decide_if_self_terminate", type: "javascript" do
  parameters "found", "self_policy_id", "meta_parent_policy_id"
  result "result"
  code <<-EOS
  var result
  if (meta_parent_policy_id != "" && found.id == undefined) {
    result = true
  } else {
    result = false
  }
  EOS
end

# Two potentials ways to set this up:
# - this way and make a unneeded 'get' request when not deleting
# - make the delete request an interate and have it iterate over an empty array when not deleting and an array with one item when deleting
script "js_make_terminate_request", type: "javascript" do
  parameters "should_delete", "policy_id", "rs_project_id", "rs_governance_host"
  result "request"
  code <<-EOS

  var request = {
    auth:  'auth_flexera',
    host: rs_governance_host,
    path: "/api/governance/projects/" + rs_project_id + "/applied_policies/" + policy_id,
    headers: {
      "API-Version": "1.0",
      "Content-Type":"application/json"
    },
  }

  if (should_delete) {
    request.verb = 'DELETE'
  }
  EOS
end

datasource "ds_terminate_self" do
  request do
    run_script $js_make_terminate_request, $ds_parent_policy_terminated, policy_id, rs_project_id, rs_governance_host
  end
end

datasource "ds_is_deleted" do
  run_script $js_check_deleted, $ds_terminate_self
end

# This is just a way to have the check delete request connect to the farthest leaf from policy.
# We want the delete check to the first thing the policy does to avoid the policy erroring before it can decide whether or not it needs to self terminate
# Example a customer deletes a credential and then terminates the parent policy. We still want the children to self terminate
# The only way I could see this not happening is if the user who applied the parent_meta_policy was offboarded or lost policy access, the policies who are impersonating the user
# would not have access to self-terminate
# It may be useful for the backend to enable a mass terminate at some point for all meta_child_policies associated with an id.
script "js_check_deleted", type: "javascript" do
  parameters "response"
  result "result"
  code <<-EOS
  result = {"path":"/"}
  EOS
end

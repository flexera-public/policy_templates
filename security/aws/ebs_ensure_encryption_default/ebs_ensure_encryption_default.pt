name "AWS EBS Ensure Encryption By Default"
rs_pt_ver 20180301
type "policy"
short_description "Report if EBS volumes are not set to be encrypted by default. \n See the [README](https://github.com/flexera/policy_templates/tree/master/security/aws/ebs_ensure_encryption_default) and [docs.flexera.com/flexera/EN/Automation](https://docs.flexera.com/flexera/EN/Automation/AutomationGS.htm) to learn more."
long_description ""
category "Security"
severity "high"
default_frequency "daily"
info(
  version: "2.1",
  provider: "AWS",
  service: "DBS",
  policy_set: "CIS",
  cce_id: "", # No associated CCE
  cis_aws_foundations_securityhub: "", # Unlisted
  benchmark_control: "2.2.1",
  benchmark_version: "1.4.0",
  cis_controls: "[\"3.11v8\", \"14.8v7\"]",
  nist: "" # Unknown
)

###############################################################################
# User inputs
###############################################################################

parameter "param_allowed_regions" do
  type "list"
  label "Allowed Regions"
  allowed_pattern /^([a-zA-Z-_]+-[a-zA-Z0-9-_]+-[0-9-_]+,*|)+$/
  description "A list of allowed regions. See the README for more details"
  default []
end

parameter "param_email" do
  type "list"
  label "Email Address"
  description "Email addresses of the recipients you wish to notify"
end

###############################################################################
# Authentication
###############################################################################

credentials "auth_aws" do
  schemes "aws","aws_sts"
  label "AWS"
  description "Select the AWS Credential from the list"
  tags "provider=aws"
end

###############################################################################
# Datasources
###############################################################################

# Get list of enabled regions for an account
datasource "ds_regions_list" do
  request do
    auth $auth_aws
    verb "GET"
    host "ec2.amazonaws.com"
    path "/"
    query "Action", "DescribeRegions"
    query "Version", "2016-11-15"
  end
  result do
    encoding "xml"
    collect xpath(response, "//DescribeRegionsResponse/regionInfo/item", "array") do
      field "region", xpath(col_item, "regionName")
    end
  end
end

# Get only SCP enabled regions
datasource "ds_regions" do
  run_script $js_regions, $param_allowed_regions, $ds_regions_list
end

datasource "ds_regions_encryption" do
  iterate $ds_regions
  request do
    auth $auth_aws
    verb "GET"
    host join(["ec2.", iter_item, ".amazonaws.com"])
    path "/"
    header "User-Agent", "RS Policies"
    query "Action", "GetEbsEncryptionByDefault"
    query "Version", "2016-11-15"
  end
  result do
    encoding "xml"
    field "region", iter_item
    field "encrypt_response", response
  end
end

datasource "ds_regions_without_encryption" do
  run_script $js_regions_without_encryption, $ds_regions_encryption
end

###############################################################################
# Scripts
###############################################################################

script "js_regions", type:"javascript" do
  parameters "user_entered_regions", "all_regions"
  result "regions"
  code <<-EOS
    if(_.isEmpty(user_entered_regions)){
      new_regions_list = all_regions;
    }else{
      //Filter unique regions
      var uniqueRegions = _.uniq(user_entered_regions);
      var all_regions_list = [];
      all_regions.forEach(function(all_region){
        all_regions_list.push(all_region.region)
      })

      //Filter valid regions
      var valid_regions = [];
      _.map(uniqueRegions, function(uniqueRegion){
        if(all_regions_list.indexOf(uniqueRegion) > -1){
          valid_regions.push({"region": uniqueRegion})
        }
      })

      //Throw an error if no valid regions found
      if (_.isEmpty(valid_regions)) {
        new_regions_list = all_regions;
      }else{
        new_regions_list = valid_regions
      }
    }

    regions = []

    _.each(new_regions_list, function(region) {
      regions.push(region.region)
    })
  EOS
end

script "js_regions_without_encryption", type:"javascript" do
  parameters "ds_regions_encryption"
  result "result"
  code <<-EOS
    result = []

    _.each(ds_regions_encryption, function(region) {
      if (region.encrypt_response.substring(region.encrypt_response.length - 6) == "false\\n") {
        result.push({
          id: region.region,
          ebsEncryptionByDefault: "false"
        })
      }
    })
EOS
end

###############################################################################
# Policy
###############################################################################

policy "policy_regions_encryption" do
  validate $ds_regions_without_encryption do
    summary_template "{{ rs_project_name }} (Account ID: {{ rs_project_id }}): {{ len data }} Regions Without EBS Encryption By Default"
    escalate $esc_report_regions_encryption
    check eq(size(data),0)
    export do
      resource_level true
      field "id" do
        label "Region"
      end
      field "ebsEncryptionByDefault" do
        label "ebsEncryptionByDefault"
      end
    end
  end
end

###############################################################################
# Escalations
###############################################################################

escalation "esc_report_regions_encryption" do
  automatic true
  label "Send Email"
  description "Send incident email"
  email $param_email
end

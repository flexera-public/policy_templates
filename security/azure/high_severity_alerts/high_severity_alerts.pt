name "Azure Subscriptions Without High Severity Alerts"
rs_pt_ver 20180301
type "policy"
short_description "Report any Azure Subscriptions that are not configured to report high severity alerts. See the [README](https://github.com/flexera-public/policy_templates/tree/master/security/azure/high_severity_alerts) and [docs.rightscale.com/policies](https://docs.rightscale.com/policies/) to learn more."
long_description ""
category "Security"
severity "high"
default_frequency "daily"
info(
  version: "3.0.0",
  provider: "Azure",
  service: "Security",
  policy_set: "CIS",
  cce_id: "",
  benchmark_control: "2.14",
  benchmark_version: "1.4.0",
  cis_controls: "[\"17.1v8\", \"3v7\"]",
  nist: "IR-4"
)

###############################################################################
# Parameters
###############################################################################

parameter "param_email" do
  type "list"
  category "Policy Settings"
  label "Email Addresses"
  description "A list of email addresses to notify."
  default []
end

parameter "param_azure_endpoint" do
  type "string"
  category "Policy Settings"
  label "Azure Endpoint"
  description "Select the API endpoint to use for Azure. Use default value of management.azure.com unless using Azure China."
  allowed_values "management.azure.com", "management.chinacloudapi.cn"
  default "management.azure.com"
end

parameter "param_subscriptions_allow_or_deny" do
  type "string"
  category "Filters"
  label "Allow/Deny Subscriptions"
  description "Allow or Deny entered Subscriptions."
  allowed_values "Allow", "Deny"
  default "Allow"
end

parameter "param_subscriptions_list" do
  type "list"
  category "Filters"
  label "Allow/Deny Subscriptions List"
  description "A list of allowed or denied Subscription IDs/names. Leave blank to check all Subscriptions."
  default []
end

###############################################################################
# Authentication
###############################################################################

credentials "auth_azure" do
  schemes "oauth2"
  label "Azure"
  description "Select the Azure Resource Manager Credential from the list."
  tags "provider=azure_rm"
end

credentials "auth_flexera" do
  schemes "oauth2"
  label "Flexera"
  description "Select Flexera One OAuth2 credentials"
  tags "provider=flexera"
end

###############################################################################
# Pagination
###############################################################################

pagination "pagination_azure" do
  get_page_marker do
    body_path "nextLink"
  end
  set_page_marker do
    uri true
  end
end

###############################################################################
# Datasources & Scripts
###############################################################################

# Get applied policy metadata for use later
datasource "ds_applied_policy" do
  request do
    auth $auth_flexera
    host rs_governance_host
    path join(["/api/governance/projects/", rs_project_id, "/applied_policies/", policy_id])
    header "Api-Version", "1.0"
  end
end

datasource "ds_azure_subscriptions" do
  request do
    auth $auth_azure
    pagination $pagination_azure
    host $param_azure_endpoint
    path "/subscriptions/"
    query "api-version", "2020-01-01"
    header "User-Agent", "RS Policies"
    # Ignore status 400, 403, and 404 which can be returned in certain (legacy) types of Azure Subscriptions
    ignore_status [400, 403, 404]
  end
  result do
    encoding "json"
    collect jmes_path(response, "value[*]") do
      field "id", jmes_path(col_item, "subscriptionId")
      field "name", jmes_path(col_item, "displayName")
      field "state", jmes_path(col_item, "state")
    end
  end
end

datasource "ds_azure_subscriptions_filtered" do
  run_script $js_azure_subscriptions_filtered, $ds_azure_subscriptions, $param_subscriptions_allow_or_deny, $param_subscriptions_list
end

script "js_azure_subscriptions_filtered", type: "javascript" do
  parameters "ds_azure_subscriptions", "param_subscriptions_allow_or_deny", "param_subscriptions_list"
  result "result"
  code <<-EOS
  if (param_subscriptions_list.length > 0) {
    result = _.filter(ds_azure_subscriptions, function(subscription) {
      include_subscription = _.contains(param_subscriptions_list, subscription['id']) || _.contains(param_subscriptions_list, subscription['name'])

      if (param_subscriptions_allow_or_deny == "Deny") {
        include_subscription = !include_subscription
      }

      return include_subscription
    })
  } else {
    result = ds_azure_subscriptions
  }
EOS
end

datasource "ds_security_contacts" do
  iterate $ds_azure_subscriptions_filtered
  request do
    auth $auth_azure
    pagination $pagination_azure
    host $param_azure_endpoint
    path join(["/subscriptions/", val(iter_item, "id"), "/providers/Microsoft.Security/securityContacts"])
    query "api-version", "2023-12-01-preview"
    header "User-Agent", "RS Policies"
    header "Content-Type", "application/json"
    # Ignore status 400, 403, and 404 which can be returned in certain (legacy) types of Azure Subscriptions
    ignore_status [400, 403, 404]
  end
  result do
    encoding "json"
    collect jmes_path(response, "value[*]") do
      field "id", jmes_path(col_item, "id")
      field "name", jmes_path(col_item, "name")
      field "type", jmes_path(col_item, "type")
      field "alertNotifications", jmes_path(col_item, "properties.alertNotifications")
      field "subscriptionId", val(iter_item, "id")
      field "subscriptionName", val(iter_item, "name")
    end
  end
end

datasource "ds_bad_subscriptions" do
  run_script $js_bad_subscriptions, $ds_azure_subscriptions, $ds_security_contacts, $ds_applied_policy
end

script "js_bad_subscriptions", type: "javascript" do
  parameters "ds_azure_subscriptions", "ds_security_contacts", "ds_applied_policy"
  result "result"
  code <<-EOS
  security_contacts = _.groupBy(ds_security_contacts, 'subscriptionId')

  result = []

  _.each(ds_azure_subscriptions, function(sub) {
    default_security = null
    minimalSeverity = null
    state = null

    if (security_contacts[sub['id']] != undefined) {
      default_security = _.find(security_contacts[sub['id']], function(contact) {
        return contact['name'] == 'default'
      })

      if (typeof(default_security) == 'object') {
        if (typeof(default_security['alertNotifications']) == 'object') {
          minimalSeverity = default_security['alertNotifications']['minimalSeverity']
          state = default_security['alertNotifications']['state']
        }
      }
    }

    if (state != "On") {
      result.push({
        id: sub['id'],
        accountName: sub['name'],
        policy_name: ds_applied_policy['name'],
        minimalSeverity: minimalSeverity,
        state: state
      })
    }
  })
EOS
end

###############################################################################
# Policy
###############################################################################

policy "pol_bad_subscriptions" do
  validate_each $ds_bad_subscriptions do
    summary_template "{{ with index data 0 }}{{ .policy_name }}{{ end }}: {{ len data }} Azure Subscriptions Without High Severity Alerts Found"
    check eq(val(item, "id"), "")
    escalate $esc_email
    export do
      resource_level true
      field "id" do
        label "ID"
      end
      field "accountName" do
        label "Name"
      end
      field "state" do
        label "Notifications Enabled?"
      end
      field "minimalSeverity" do
        label "Minimum Severity"
      end
    end
  end
end

###############################################################################
# Escalations
###############################################################################

escalation "esc_email" do
  automatic true
  label "Send Email"
  description "Send incident email"
  email $param_email
end

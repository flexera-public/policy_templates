name "Azure Ensure SQL Server AD Admin Configured"
rs_pt_ver 20180301
type "policy"
short_description "Report if any SQL server instances do not have an AD (Active Directory) Admin configured. \n See the [README](https://github.com/flexera/policy_templates/tree/master/security/azure/sql_ad_admin/) and [docs.rightscale.com/policies](https://docs.rightscale.com/policies/) to learn more."
long_description ""
category "Security"
severity "high"
default_frequency "daily"
info(
  version: "2.0",
  provider: "Azure",
  service: "SQL",
  policy_set: "CIS",
  cce_id: "",
  benchmark_control: "4.5",
  benchmark_version: "1.4.0",
  cis_controls: "[\"5.6v8\", \"16.2v7\"]",
  nist: "IA-2"
)

###############################################################################
# Parameters
###############################################################################

parameter "param_email" do
  type "list"
  label "Email addresses of the recipients you wish to notify"
end

parameter "param_azure_endpoint" do
  type "string"
  label "Azure Endpoint"
  allowed_values "management.azure.com", "management.chinacloudapi.cn"
  default "management.azure.com"
end

###############################################################################
# Authentication
###############################################################################

credentials "azure_auth" do
  schemes "oauth2"
  label "Azure"
  description "Select the Azure Resource Manager Credential from the list."
  tags "provider=azure_rm"
end

###############################################################################
# Pagination
###############################################################################

pagination "azure_pagination" do
  get_page_marker do
    body_path "nextLink"
  end
  set_page_marker do
    uri true
  end
end

###############################################################################
# Datasources
###############################################################################

datasource "ds_subscriptions" do
  request do
    auth $azure_auth
    pagination $azure_pagination
    host $param_azure_endpoint
    path "/subscriptions/"
    query "api-version","2019-06-01"
    header "User-Agent", "RS Policies"
  end
  result do
    encoding "json"
    collect jmes_path(response, "value[*]") do
      field "subscriptionId", jmes_path(col_item,"subscriptionId")
      field "subscriptionName", jmes_path(col_item,"displayName")
      field "state", jmes_path(col_item,"state")
    end
  end
end

datasource "ds_sql_servers" do
  iterate $ds_subscriptions
  request do
    auth $azure_auth
    pagination $azure_pagination
    host $param_azure_endpoint
    path join(["/subscriptions/", val(iter_item,"subscriptionId"), "/providers/Microsoft.Sql/servers"])
    query "api-version", "2021-02-01-preview"
    header "User-Agent", "RS Policies"
  end
  result do
    encoding "json"
    collect jmes_path(response, "value[*]") do
      field "id", jmes_path(col_item, "id")
      field "name", jmes_path(col_item, "name")
      field "location", jmes_path(col_item, "location")
      field "kind", jmes_path(col_item, "kind")
      field "properties", jmes_path(col_item, "properties")
      field "tags", jmes_path(col_item, "tags")
      field "subscriptionId", val(iter_item, "subscriptionId")
      field "subscriptionName", val(iter_item, "subscriptionName")
    end
  end
end

datasource "ds_sql_servers_with_ad_admins" do
  iterate $ds_sql_servers
  request do
    auth $azure_auth
    pagination $azure_pagination
    host $param_azure_endpoint
    path join([val(iter_item, 'id'), "/administrators"])
    query "api-version", "2020-11-01-preview"
    header "User-Agent", "RS Policies"
  end
  result do
    encoding "json"
    field "adAdmins", jmes_path(response, "value")
    field "id", val(iter_item, "id")
    field "name", val(iter_item, "name")
    field "location", val(iter_item, "location")
    field "kind", val(iter_item, "kind")
    field "properties", val(iter_item, "properties")
    field "tags", val(iter_item, "tags")
    field "subscriptionId", val(iter_item, "subscriptionId")
    field "subscriptionName", val(iter_item, "subscriptionName")
  end
end

datasource "ds_bad_sql_servers" do
  run_script $js_bad_sql_servers, $ds_sql_servers_with_ad_admins
end

###############################################################################
# Scripts
###############################################################################

script "js_bad_sql_servers", type: "javascript" do
  parameters "ds_sql_servers"
  result "result"
  code <<-EOS
  result = []

  _.each(ds_sql_servers, function(server) {
    if (server['adAdmins'].length == 0) {
      result.push(server)
    }
  })
EOS
end

###############################################################################
# Policy
###############################################################################

policy "policy_sql_server_ad_admin" do
  validate $ds_bad_sql_servers do
    summary_template "{{ rs_project_name }} (Account ID: {{ rs_project_id }}): {{ len data }} Azure SQL Server(s) Found Without AD Admin Configured"
    escalate $esc_email
    check eq(size(data),0)
    export do
      field "name" do
        label "Name"
      end
      field "location" do
        label "Location"
      end
      field "kind" do
        label "Kind"
      end
      field "subscriptionId" do
        label "Subscription ID"
      end
      field "subscriptionName" do
        label "Subscription Name"
      end
      field "id" do
        label "Resource ID"
      end
    end
  end
end

###############################################################################
# Escalations
###############################################################################

escalation "esc_email" do
  automatic true
  label "Send Email"
  description "Send incident email"
  email $param_email
end

name "Azure Publicly-Accessible Blob Containers"
rs_pt_ver 20180301
type "policy"
short_description "Reports any blob storage containers that do not have their public access level set to private. See the [README](https://github.com/flexera-public/policy_templates/tree/master/security/azure/private_blob_containers) and [docs.rightscale.com/policies](https://docs.rightscale.com/policies/) to learn more."
long_description ""
doc_link "https://github.com/flexera-public/policy_templates/tree/master/security/azure/private_blob_containers"
category "Security"
severity "high"
default_frequency "daily"
info(
  version: "3.0.6",
  provider: "Azure",
  service: "Storage",
  policy_set: "CIS",
  cce_id: "",
  benchmark_control: "3.5",
  benchmark_version: "3.0.6",
  cis_controls: "[\"3.3v8\", \"16v7\"]",
  nist: "AC-4",
  hide_skip_approvals: "true"
)

###############################################################################
# Parameters
###############################################################################

parameter "param_email" do
  type "list"
  category "Policy Settings"
  label "Email Addresses"
  description "A list of email addresses to notify."
  default []
end

parameter "param_azure_endpoint" do
  type "string"
  category "Policy Settings"
  label "Azure Endpoint"
  description "Select the API endpoint to use for Azure. Use default value of management.azure.com unless using Azure China."
  allowed_values "management.azure.com", "management.chinacloudapi.cn"
  default "management.azure.com"
end

parameter "param_storage_account_ignore_list" do
  type "list"
  category "Filters"
  label "Storage Account Ignore List"
  description "A list of Azure Storage Accounts to never include in the results."
  default []
end

parameter "param_subscriptions_allow_or_deny" do
  type "string"
  category "Filters"
  label "Allow/Deny Subscriptions"
  description "Allow or Deny entered Subscriptions. See the README for more details."
  allowed_values "Allow", "Deny"
  default "Allow"
end

parameter "param_subscriptions_list" do
  type "list"
  category "Filters"
  label "Allow/Deny Subscriptions List"
  description "A list of allowed or denied Subscription IDs/names. See the README for more details."
  default []
end

parameter "param_regions_allow_or_deny" do
  type "string"
  category "Filters"
  label "Allow/Deny Regions"
  description "Allow or Deny entered regions. See the README for more details."
  allowed_values "Allow", "Deny"
  default "Allow"
end

parameter "param_regions_list" do
  type "list"
  category "Filters"
  label "Allow/Deny Regions List"
  description "A list of allowed or denied regions. See the README for more details."
  default []
end

parameter "param_exclusion_tags" do
  type "list"
  category "Filters"
  label "Exclusion Tags"
  description "Cloud native tags to ignore storage accounts that you don't want to produce recommendations for. Enter the Key name to filter resources with a specific Key, regardless of Value, and enter Key==Value to filter resources with a specific Key:Value pair. Other operators and regex are supported; please see the README for more details."
  default []
end

parameter "param_exclusion_tags_boolean" do
  type "string"
  category "Filters"
  label "Exclusion Tags: Any / All"
  description "Whether to filter storage accounts containing any of the specified tags or only those that contain all of them. Only applicable if more than one value is entered in the 'Exclusion Tags' field."
  allowed_values "Any", "All"
  default "Any"
end

###############################################################################
# Authentication
###############################################################################

credentials "auth_azure" do
  schemes "oauth2"
  label "Azure"
  description "Select the Azure Resource Manager Credential from the list."
  tags "provider=azure_rm"
end

credentials "auth_azure_storage" do
  schemes "oauth2"
  label "Azure"
  description "Select the Azure Storage Credential from the list."
  tags "provider=azure_storage"
end

credentials "auth_flexera" do
  schemes "oauth2"
  label "Flexera"
  description "Select Flexera One OAuth2 credentials"
  tags "provider=flexera"
end

###############################################################################
# Pagination
###############################################################################

pagination "pagination_azure" do
  get_page_marker do
    body_path "nextLink"
  end
  set_page_marker do
    uri true
  end
end

###############################################################################
# Datasources & Scripts
###############################################################################

# Get region-specific Flexera API endpoints
datasource "ds_flexera_api_hosts" do
  run_script $js_flexera_api_hosts, rs_optima_host
end

script "js_flexera_api_hosts", type: "javascript" do
  parameters "rs_optima_host"
  result "result"
  code <<-EOS
  host_table = {
    "api.optima.flexeraeng.com": {
	    api: "api.flexera.com",
      flexera: "api.flexera.com",
      fsm: "api.fsm.flexeraeng.com",
      grs: "grs-front.iam-us-east-1.flexeraeng.com",
      ui: "app.flexera.com",
      tld: "flexera.com"
    },
    "api.optima-eu.flexeraeng.com": {
	    api: "api.flexera.eu",
      flexera: "api.flexera.eu",
      fsm: "api.fsm-eu.flexeraeng.com",
      grs: "grs-front.eu-central-1.iam-eu.flexeraeng.com",
      ui: "app.flexera.eu",
      tld: "flexera.eu"
    },
    "api.optima-apac.flexeraeng.com": {
	    api: "api.flexera.au",
      flexera: "api.flexera.au",
      fsm: "api.fsm-apac.flexeraeng.com",
      grs: "grs-front.ap-southeast-2.iam-apac.flexeraeng.com",
      ui: "app.flexera.au",
      tld: "flexera.au"
    }
  }

  result = host_table[rs_optima_host]
EOS
end

# Get applied policy metadata for use later
datasource "ds_applied_policy" do
  request do
    auth $auth_flexera
    host val($ds_flexera_api_hosts, "flexera")
    path join(["/policy/v1/orgs/", rs_org_id, "/projects/", rs_project_id, "/applied-policies", switch(policy_id, join(["/", policy_id]), "")])
  end
end

datasource "ds_azure_subscriptions" do
  request do
    auth $auth_azure
    pagination $pagination_azure
    host $param_azure_endpoint
    path "/subscriptions/"
    query "api-version", "2020-01-01"
    header "User-Agent", "RS Policies"
    # Header X-Meta-Flexera has no affect on datasource query, but is required for Meta Policies
    # Forces `ds_is_deleted` datasource to run first during policy execution
    header "Meta-Flexera", val($ds_is_deleted, "path")
    # Ignore status 400, 403, and 404 which can be returned in certain (legacy) types of Azure Subscriptions
    ignore_status [400, 403, 404]
  end
  result do
    encoding "json"
    collect jmes_path(response, "value[*]") do
      field "id", jmes_path(col_item, "subscriptionId")
      field "name", jmes_path(col_item, "displayName")
      field "state", jmes_path(col_item, "state")
    end
  end
end

datasource "ds_azure_subscriptions_filtered" do
  run_script $js_azure_subscriptions_filtered, $ds_azure_subscriptions, $param_subscriptions_allow_or_deny, $param_subscriptions_list
end

script "js_azure_subscriptions_filtered", type: "javascript" do
  parameters "ds_azure_subscriptions", "param_subscriptions_allow_or_deny", "param_subscriptions_list"
  result "result"
  code <<-EOS
  if (param_subscriptions_list.length > 0) {
    result = _.filter(ds_azure_subscriptions, function(subscription) {
      include_subscription = _.contains(param_subscriptions_list, subscription['id']) || _.contains(param_subscriptions_list, subscription['name'])

      if (param_subscriptions_allow_or_deny == "Deny") {
        include_subscription = !include_subscription
      }

      return include_subscription
    })
  } else {
    result = ds_azure_subscriptions
  }
EOS
end

datasource "ds_azure_storage_accounts" do
  iterate $ds_azure_subscriptions_filtered
  request do
    auth $auth_azure
    pagination $pagination_azure
    host $param_azure_endpoint
    path join(["/subscriptions/", val(iter_item, 'id'), "/providers/Microsoft.Storage/storageAccounts"])
    query "api-version", "2023-01-01"
    header "User-Agent", "RS Policies"
    ignore_status [400, 403, 404]
  end
  result do
    encoding "json"
    collect jmes_path(response, "value[*]") do
      field "id", jmes_path(col_item, "id")
      field "kind", jmes_path(col_item, "kind")
      field "region", jmes_path(col_item, "location")
      field "name", jmes_path(col_item, "name")
      field "tags", jmes_path(col_item, "tags")
      field "accessTier", jmes_path(col_item, "properties.accessTier")
      field "creationTime", jmes_path(col_item, "properties.creationTime")
      field "primaryLocation", jmes_path(col_item, "properties.primaryLocation")
      field "provisioningState", jmes_path(col_item, "properties.provisioningState")
      field "statusOfPrimary", jmes_path(col_item, "properties.statusOfPrimary")
      field "supportsHttpsTrafficOnly", jmes_path(col_item, "properties.supportsHttpsTrafficOnly")
      field "encryption", jmes_path(col_item, "properties.encryption")
      field "keyCreationTime", jmes_path(col_item, "properties.keyCreationTime")
      field "networkAcls", jmes_path(col_item, "properties.networkAcls")
      field "primaryEndpoints", jmes_path(col_item, "properties.primaryEndpoints")
      field "blobEndpoint", jmes_path(col_item, "properties.primaryEndpoints.blob")
      field "resourceGroup", get(4, split(jmes_path(col_item, "id"), '/'))
      field "subscriptionID", val(iter_item, "id")
      field "subscriptionName", val(iter_item, "name")
    end
  end
end

datasource "ds_azure_storage_accounts_tag_filtered" do
  run_script $js_azure_storage_accounts_tag_filtered, $ds_azure_storage_accounts, $param_exclusion_tags, $param_exclusion_tags_boolean
end

script "js_azure_storage_accounts_tag_filtered", type: "javascript" do
  parameters "ds_azure_storage_accounts", "param_exclusion_tags", "param_exclusion_tags_boolean"
  result "result"
  code <<-EOS
  comparators = _.map(param_exclusion_tags, function(item) {
    if (item.indexOf('==') != -1) {
      return { comparison: '==', key: item.split('==')[0], value: item.split('==')[1], string: item }
    }

    if (item.indexOf('!=') != -1) {
      return { comparison: '!=', key: item.split('!=')[0], value: item.split('!=')[1], string: item }
    }

    if (item.indexOf('=~') != -1) {
      value = item.split('=~')[1]
      regex = new RegExp(value.slice(1, value.length - 1))
      return { comparison: '=~', key: item.split('=~')[0], value: regex, string: item }
    }

    if (item.indexOf('!~') != -1) {
      value = item.split('!~')[1]
      regex = new RegExp(value.slice(1, value.length - 1))
      return { comparison: '!~', key: item.split('!~')[0], value: regex, string: item }
    }

    // If = is present but none of the above are, assume user error and that the user intended ==
    if (item.indexOf('=') != -1) {
      return { comparison: '==', key: item.split('=')[0], value: item.split('=')[1], string: item }
    }

    // Assume we're just testing for a key if none of the comparators are found
    return { comparison: 'key', key: item, value: null, string: item }
  })

  if (param_exclusion_tags.length > 0) {
    result = _.reject(ds_azure_storage_accounts, function(resource) {
      resource_tags = {}
      if (typeof(resource['tags']) == 'object') { resource_tags = resource['tags'] }

      // Store a list of found tags
      found_tags = []

      _.each(comparators, function(comparator) {
        comparison = comparator['comparison']
        value = comparator['value']
        string = comparator['string']
        resource_tag = resource_tags[comparator['key']]

        if (comparison == 'key' && resource_tag != undefined) { found_tags.push(string) }
        if (comparison == '==' && resource_tag == value) { found_tags.push(string) }
        if (comparison == '!=' && resource_tag != value) { found_tags.push(string) }

        if (comparison == '=~') {
          if (resource_tag != undefined && value.test(resource_tag)) { found_tags.push(string) }
        }

        if (comparison == '!~') {
          if (resource_tag == undefined) { found_tags.push(string) }
          if (resource_tag != undefined && value.test(resource_tag)) { found_tags.push(string) }
        }
      })

      all_tags_found = found_tags.length == comparators.length
      any_tags_found = found_tags.length > 0 && param_exclusion_tags_boolean == 'Any'

      return all_tags_found || any_tags_found
    })
  } else {
    result = ds_azure_storage_accounts
  }
EOS
end

datasource "ds_azure_storage_accounts_region_filtered" do
  run_script $js_azure_storage_accounts_region_filtered, $ds_azure_storage_accounts_tag_filtered, $param_regions_allow_or_deny, $param_regions_list
end

script "js_azure_storage_accounts_region_filtered", type: "javascript" do
  parameters "ds_azure_storage_accounts_tag_filtered", "param_regions_allow_or_deny", "param_regions_list"
  result "result"
  code <<-EOS
  if (param_regions_list.length > 0) {
    result = _.filter(ds_azure_storage_accounts_tag_filtered, function(account) {
      include_account = _.contains(param_regions_list, account['region'])

      if (param_regions_allow_or_deny == "Deny") {
        include_account = !include_account
      }

      return include_account
    })
  } else {
    result = ds_azure_storage_accounts_tag_filtered
  }
EOS
end

datasource "ds_azure_storage_accounts_name_filtered" do
  run_script $js_azure_storage_accounts_name_filtered, $ds_azure_storage_accounts_region_filtered, $param_storage_account_ignore_list
end

script "js_azure_storage_accounts_name_filtered", type: "javascript" do
  parameters "ds_azure_storage_accounts_region_filtered", "param_storage_account_ignore_list"
  result "result"
  code <<-EOS
  result = _.reject(ds_azure_storage_accounts_region_filtered, function(account) {
    return _.contains(param_storage_account_ignore_list, account['name'])
  })
EOS
end

datasource "ds_azure_storage_accounts_with_blob_endpoints" do
  run_script $js_azure_storage_accounts_with_blob_endpoints, $ds_azure_storage_accounts_name_filtered
end

script "js_azure_storage_accounts_with_blob_endpoints", type: "javascript" do
  parameters "ds_azure_storage_accounts_name_filtered"
  result "result"
  code <<-EOS
  result = _.filter(ds_azure_storage_accounts_name_filtered, function(resource) {
    return typeof(resource['blobEndpoint']) == 'string'
  })
EOS
end

datasource "ds_blob_containers" do
  iterate $ds_azure_storage_accounts_with_blob_endpoints
  request do
    auth $auth_azure_storage
    host join([val(iter_item, "name"), ".blob.core.windows.net"])
    query "comp", "list"
    header "User-Agent", "RS Policies"
    header "x-ms-version", "2018-03-28"
  end
  result do
    encoding "xml"
    collect xpath(response, "//EnumerationResults/Containers/Container") do
      field "name", xpath(col_item, "Name")
      field "publicAccess", xpath(col_item, "Properties/PublicAccess")
      field "region", val(iter_item, "location")
      field "storageId", val(iter_item, "id")
      field "storageName", val(iter_item, "name")
      field "storageKind", val(iter_item, "kind")
      field "storageAccessTier", val(iter_item, "accessTier")
      field "storageTags", val(iter_item, "tags")
      field "resourceGroup", val(iter_item, "resourceGroup")
      field "subscriptionId", val(iter_item, "subscriptionId")
      field "subscriptionName", val(iter_item, "subscriptionName")
    end
  end
end

datasource "ds_bad_blob_containers" do
  run_script $js_bad_blob_containers, $ds_blob_containers, $ds_applied_policy
end

script "js_bad_blob_containers", type: "javascript" do
  parameters "ds_blob_containers", "ds_applied_policy"
  result "result"
  code <<-EOS
  bad_containers = _.filter(ds_blob_containers, function(container) {
    return typeof(container['publicAccess']) == 'string' && container['publicAccess'] != ''
  })

  result = _.map(bad_containers, function(container) {
    storageTags = []

    if (typeof(container['tags']) == 'object') {
      storageTags = _.map(_.keys(container['storageTags']), function(key) {
        return key + '=' + container['storageTags'][key]
      })
    }

    return {
      accountID: resource['subscriptionID'],
      accountName: resource['subscriptionName'],
      resourceGroup: resource['resourceGroup'],
      id: resource['name'],
      storageId: resource['storageId'],
      storageName: resource['storageName'],
      storageAccessTier: resource['storageAccessTier'],
      publicAccess: resource['publicAccess'],
      tags: storageTags.join(', '),
      policy_name: ds_applied_policy['name']
    }
  })

  // Dummy entry to ensure validation occurs
  result.push({
    accountID: '',
    accountName: '',
    resourceGroup: '',
    id: '',
    storageId: '',
    storageName: '',
    storageAccessTier: '',
    publicAccess: '',
    tags: '',
    policy_name: ''
  })
EOS
end

###############################################################################
# Policy
###############################################################################

policy "pol_bad_blob_containers" do
  validate_each $ds_bad_blob_containers do
    summary_template "{{ with index data 0 }}{{ .policy_name }}{{ end }}: {{ len data }} Azure Publicly-Accessible Blob Containers Found"
    check logic_or($ds_parent_policy_terminated, eq(val(item, "id"), ""))
    escalate $esc_email
    hash_exclude "tags"
    export do
      resource_level true
      field "accountID" do
        label "Subscription ID"
      end
      field "accountName" do
        label "Subscription Name"
      end
      field "resourceGroup" do
        label "Resource Group"
      end
      field "id" do
        label "Container"
      end
      field "publicAccess" do
        label "Public Access"
      end
      field "storageId" do
        label "Storage Account ID"
      end
      field "storageName" do
        label "Storage Account Name"
      end
      field "tags" do
        label "Storage Account Tags"
      end
      field "storageAccessTier" do
        label "Storage Account Access Tier"
      end
    end
  end
end

###############################################################################
# Escalations
###############################################################################

escalation "esc_email" do
  automatic true
  label "Send Email"
  description "Send incident email"
  email $param_email
end

###############################################################################
# Meta Policy [alpha]
# Not intended to be modified or used by policy developers
###############################################################################

# If the meta_parent_policy_id is not set it will evaluate to an empty string and we will look for the policy itself,
# if it is set we will look for the parent policy.
datasource "ds_get_parent_policy" do
  request do
    auth $auth_flexera
    host val($ds_flexera_api_hosts, "flexera")
    path join(["/policy/v1/orgs/", rs_org_id, "/projects/", rs_project_id, "/applied-policies/", switch(ne(meta_parent_policy_id, ""), meta_parent_policy_id, policy_id) ])
	  ignore_status [404]
  end
  result do
    encoding "json"
    field "id", jmes_path(response, "id")
  end
end

# If the policy was applied by a meta_parent_policy we confirm it exists if it doesn't we confirm we are deleting
# This information is used in two places:
# - determining whether or not we make a delete call
# - determining if we should create an incident (we don't want to create an incident on the run where we terminate)
datasource "ds_parent_policy_terminated" do
  run_script $js_parent_policy_terminated, $ds_get_parent_policy, meta_parent_policy_id
end

script "js_parent_policy_terminated", type: "javascript" do
  parameters "ds_get_parent_policy", "meta_parent_policy_id"
  result "result"
  code <<-'EOS'
  result = meta_parent_policy_id != "" && ds_get_parent_policy["id"] == undefined
EOS
end

# Two potentials ways to set this up:
# - this way and make a unneeded 'get' request when not deleting
# - make the delete request an interate and have it iterate over an empty array when not deleting and an array with one item when deleting
datasource "ds_terminate_self" do
  request do
    run_script $js_make_terminate_request, $ds_parent_policy_terminated, $ds_flexera_api_hosts, policy_id, rs_org_id, rs_project_id
  end
end

script "js_make_terminate_request", type: "javascript" do
  parameters "ds_parent_policy_terminated", "ds_flexera_api_hosts", "policy_id", "rs_org_id", "rs_project_id"
  result "request"
  code <<-EOS
  var request = {
    auth: "auth_flexera",
    host: ds_flexera_api_hosts["flexera"],
    path: [ "/policy/v1/orgs/", rs_org_id, "/projects/", rs_project_id, "/applied-policies", policy_id ? "/"+policy_id : "" ].join(''),
    verb: ds_parent_policy_terminated ? "DELETE" : "GET"
  }
EOS
end

# This is just a way to have the check delete request connect to the farthest leaf from policy.
# We want the delete check to the first thing the policy does to avoid the policy erroring before it can decide whether or not it needs to self terminate
# Example a customer deletes a credential and then terminates the parent policy. We still want the children to self terminate
# The only way I could see this not happening is if the user who applied the parent_meta_policy was offboarded or lost policy access, the policies who are impersonating the user
# would not have access to self-terminate
# It may be useful for the backend to enable a mass terminate at some point for all meta_child_policies associated with an id.
datasource "ds_is_deleted" do
  run_script $js_is_deleted, $ds_terminate_self
end

script "js_is_deleted", type: "javascript" do
  parameters "ds_terminate_self"
  result "result"
  code 'result = { path: "/"}'
end

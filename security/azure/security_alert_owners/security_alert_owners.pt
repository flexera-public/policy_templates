name "Azure Subscriptions Without Owner Security Alerts"
rs_pt_ver 20180301
type "policy"
short_description "Report any Azure Subscriptions that are not configured to send security alerts to their owners. See the [README](https://github.com/flexera-public/policy_templates/tree/master/security/azure/security_alert_owners) and [docs.rightscale.com/policies](https://docs.rightscale.com/policies/) to learn more."
long_description ""
category "Security"
severity "high"
default_frequency "daily"
info(
  version: "3.0.0",
  provider: "Azure",
  service: "Security",
  policy_set: "CIS",
  cce_id: "",
  benchmark_control: "2.15",
  benchmark_version: "1.4.0",
  cis_controls: "[\"17.2v8\", \"3v7\"]",
  nist: "IR-4"
)

###############################################################################
# Parameters
###############################################################################

parameter "param_email" do
  type "list"
  category "Policy Settings"
  label "Email Addresses"
  description "A list of email addresses to notify."
  default []
end

parameter "param_azure_endpoint" do
  type "string"
  category "Policy Settings"
  label "Azure Endpoint"
  description "Select the API endpoint to use for Azure. Use default value of management.azure.com unless using Azure China."
  allowed_values "management.azure.com", "management.chinacloudapi.cn"
  default "management.azure.com"
end

parameter "param_subscriptions_allow_or_deny" do
  type "string"
  category "Filters"
  label "Allow/Deny Subscriptions"
  description "Allow or Deny entered Subscriptions. See the README for more details."
  allowed_values "Allow", "Deny"
  default "Allow"
end

parameter "param_subscriptions_list" do
  type "list"
  category "Filters"
  label "Allow/Deny Subscriptions List"
  description "A list of allowed or denied Subscription IDs/names. See the README for more details."
  default []
end

###############################################################################
# Authentication
###############################################################################

credentials "auth_azure" do
  schemes "oauth2"
  label "Azure"
  description "Select the Azure Resource Manager Credential from the list."
  tags "provider=azure_rm"
end

credentials "auth_flexera" do
  schemes "oauth2"
  label "Flexera"
  description "Select Flexera One OAuth2 credentials"
  tags "provider=flexera"
end

###############################################################################
# Pagination
###############################################################################

pagination "pagination_azure" do
  get_page_marker do
    body_path "nextLink"
  end
  set_page_marker do
    uri true
  end
end

###############################################################################
# Datasources & Scripts
###############################################################################

# Get applied policy metadata for use later
datasource "ds_applied_policy" do
  request do
    auth $auth_flexera
    host rs_governance_host
    path join(["/api/governance/projects/", rs_project_id, "/applied_policies/", policy_id])
    header "Api-Version", "1.0"
  end
end

datasource "ds_azure_subscriptions" do
  request do
    auth $auth_azure
    pagination $pagination_azure
    host $param_azure_endpoint
    path "/subscriptions/"
    query "api-version", "2020-01-01"
    header "User-Agent", "RS Policies"
    # Header X-Meta-Flexera has no affect on datasource query, but is required for Meta Policies
    # Forces `ds_is_deleted` datasource to run first during policy execution
    header "Meta-Flexera", val($ds_is_deleted, "path")
    # Ignore status 400, 403, and 404 which can be returned in certain (legacy) types of Azure Subscriptions
    ignore_status [400, 403, 404]
  end
  result do
    encoding "json"
    collect jmes_path(response, "value[*]") do
      field "id", jmes_path(col_item, "subscriptionId")
      field "name", jmes_path(col_item, "displayName")
      field "state", jmes_path(col_item, "state")
    end
  end
end

datasource "ds_azure_subscriptions_filtered" do
  run_script $js_azure_subscriptions_filtered, $ds_azure_subscriptions, $param_subscriptions_allow_or_deny, $param_subscriptions_list
end

script "js_azure_subscriptions_filtered", type: "javascript" do
  parameters "ds_azure_subscriptions", "param_subscriptions_allow_or_deny", "param_subscriptions_list"
  result "result"
  code <<-EOS
  if (param_subscriptions_list.length > 0) {
    result = _.filter(ds_azure_subscriptions, function(subscription) {
      include_subscription = _.contains(param_subscriptions_list, subscription['id']) || _.contains(param_subscriptions_list, subscription['name'])

      if (param_subscriptions_allow_or_deny == "Deny") {
        include_subscription = !include_subscription
      }

      return include_subscription
    })
  } else {
    result = ds_azure_subscriptions
  }
EOS
end

datasource "ds_security_contacts" do
  iterate $ds_azure_subscriptions_filtered
  request do
    auth $auth_azure
    pagination $pagination_azure
    host $param_azure_endpoint
    path join(["/subscriptions/", val(iter_item, "id"), "/providers/Microsoft.Security/securityContacts"])
    query "api-version", "2023-12-01-preview"
    header "User-Agent", "RS Policies"
    header "Content-Type", "application/json"
    # Ignore status 400, 403, and 404 which can be returned in certain (legacy) types of Azure Subscriptions
    ignore_status [400, 403, 404]
  end
  result do
    encoding "json"
    collect jmes_path(response, "value[*]") do
      field "id", jmes_path(col_item, "id")
      field "name", jmes_path(col_item, "name")
      field "type", jmes_path(col_item, "type")
      field "isEnabled", jmes_path(col_item, "properties.isEnabled")
      field "emails", jmes_path(col_item, "properties.emails")
      field "notificationsSources", jmes_path(col_item, "properties.notificationsSources")
      field "notificationsByRole", jmes_path(col_item, "properties.notificationsByRole")
      field "subscriptionId", val(iter_item, "id")
      field "subscriptionName", val(iter_item, "name")
    end
  end
end

datasource "ds_bad_security_contacts" do
  run_script $js_bad_security_contacts, $ds_security_contacts, $ds_subscriptions
end

script "js_bad_security_contacts", type: "javascript" do
  parameters "ds_security_contacts", "ds_subscriptions"
  result "result"
  code <<-EOS
  result = []

  _.each(ds_security_contacts, function(sec) {
    if (sec['id'] != undefined) {
      if (sec['name'] == 'default') {
        owner_not_found = true
        role_list = ''

        _.each(sec['properties']['notificationsByRole']['roles'], function(role) {
          if (role_list == '') {
            role_list = role
          } else {
            role_list += ', ' + role
          }

          if (role == "Owner") {
            owner_not_found = false
          }
        })

        subscriptionId = sec['id'].split('/')[2]
        subscriptionName = ''

        _.each(ds_subscriptions, function(sub) {
          if (subscriptionId == sub['id']) {
            subscriptionName = sub['displayName']
          }
        })

        if (owner_not_found) {
          result.push({
            id: sec['id'],
            subscriptionId: subscriptionId,
            subscriptionName: subscriptionName,
            etag: sec['etag'],
            location: sec['location'],
            name: sec['name'],
            type: sec['type'],
            roles: role_list
          })
        }
      }
    }
  })
EOS
end

###############################################################################
# Policy
###############################################################################

policy "policy_security_contacts" do
  validate $ds_bad_security_contacts do
    summary_template "{{ rs_project_name }} (Account ID: {{ rs_project_id }}): {{ len data }} Azure Subscription(s) Not Configured To Send Security Alerts To Their Owners Found"
    escalate $esc_email
    check eq(size(data),0)
    export do
      field "subscriptionId" do
        label "ID"
      end
      field "subscriptionName" do
        label "Name"
      end
      field "location" do
        label "Location"
      end
      field "roles" do
        label "Roles Alerted"
      end
    end
  end
end

###############################################################################
# Escalations
###############################################################################

escalation "esc_email" do
  automatic true
  label "Send Email"
  description "Send incident email"
  email $param_email
end

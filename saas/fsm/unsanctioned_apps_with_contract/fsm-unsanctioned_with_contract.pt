name "SaaS Manager - Unsanctioned Applications with Existing Contract"
rs_pt_ver 20180301
type "policy"
short_description "This policy will create an incident when Flexera SaaS Manager identifies unsanctioned SaaS purchases for managed applications under an existing license contract. See the [README](https://github.com/flexera-public/policy_templates/tree/master/saas/fsm/unsanctioned_apps_with_contract/) and [docs.flexera.com/flexera/EN/Automation](https://docs.flexera.com/flexera/EN/Automation/AutomationGS.htm) to learn more."
long_description ""
severity "high"
category "SaaS Management"
default_frequency "weekly"
info(
  version: "3.2.2",
  provider: "Flexera",
  service: "SaaS Manager",
  policy_set: "",
  hide_skip_approvals: "true"
)

###############################################################################
# Parameters
###############################################################################

parameter "param_email" do
  type "list"
  category "Policy Settings"
  label "Email Addresses"
  description "Email addresses of the recipients you wish to notify when new incidents are created"
  default []
end

###############################################################################
# Authentication
###############################################################################

credentials "auth_flexera" do
  schemes "oauth2"
  label "Flexera"
  description "Select Flexera One OAuth2 credentials"
  tags "provider=flexera"
end

###############################################################################
# Datasources & Scripts
###############################################################################

# Get applied policy metadata for use later
datasource "ds_applied_policy" do
  request do
    auth $auth_flexera
    host rs_governance_host
    path join(["/api/governance/projects/", rs_project_id, "/applied_policies/", policy_id])
    header "Api-Version", "1.0"
  end
end

datasource "ds_flexera_api_hosts" do
  run_script $js_flexera_api_hosts, rs_optima_host
end

script "js_flexera_api_hosts", type: "javascript" do
  parameters "rs_optima_host"
  result "result"
  code <<-EOS
  host_table = {
    "api.optima.flexeraeng.com": {
      flexera: "api.flexera.com",
      fsm: "api.fsm.flexeraeng.com"
    },
    "api.optima-eu.flexeraeng.com": {
      flexera: "api.flexera.eu",
      fsm: "api.fsm-eu.flexeraeng.com"
    },
    "api.optima-apac.flexeraeng.com": {
      flexera: "api.flexera.au",
      fsm: "api.fsm-apac.flexeraeng.com"
    }
  }

  result = host_table[rs_optima_host]
EOS
end

datasource "ds_currency_reference" do
  request do
    host "raw.githubusercontent.com"
    path "/flexera-public/policy_templates/master/data/currency/currency_reference.json"
    header "User-Agent", "RS Policies"
  end
end

datasource "ds_currency_code" do
  request do
    auth $auth_flexera
    host rs_optima_host
    path join(["/bill-analysis/orgs/", rs_org_id, "/settings/currency_code"])
    header "Api-Version", "0.1"
    header "User-Agent", "RS Policies"
    ignore_status [403]
  end
  result do
    encoding "json"
    field "id", jmes_path(response, "id")
    field "value", jmes_path(response, "value")
  end
end

datasource "ds_currency" do
  run_script $js_currency, $ds_currency_reference, $ds_currency_code
end

script "js_currency", type:"javascript" do
  parameters "ds_currency_reference", "ds_currency_code"
  result "result"
  code <<-EOS
  symbol = "$"
  separator = ","

  if (ds_currency_code['value'] != undefined) {
    if (ds_currency_reference[ds_currency_code['value']] != undefined) {
      symbol = ds_currency_reference[ds_currency_code['value']]['symbol']

      if (ds_currency_reference[ds_currency_code['value']]['t_separator'] != undefined) {
        separator = ds_currency_reference[ds_currency_code['value']]['t_separator']
      } else {
        separator = ""
      }
    }
  }

  result = {
    symbol: symbol,
    separator: separator
  }
EOS
end

datasource "ds_num_products" do
  request do
    auth $auth_flexera
    host val($ds_flexera_api_hosts, "fsm")
    path join(["/svc/orgs/", rs_org_id, "/managed-products"])
    header "content-type", "application/json"
  end
  result do
    encoding "json"
    field "totalItems", jmes_path(response, "totalItems")
  end
end

datasource "ds_products" do
  request do
    run_script $js_products, $ds_num_products, $ds_flexera_api_hosts, rs_org_id
  end
  result do
    encoding "json"
    collect jmes_path(response, "items[*]") do
      field "application", jmes_path(col_item, "name")
      field "pointOfContactEmail", jmes_path(col_item, "pointOfContactEmail")
      field "vendor", jmes_path(col_item, "product.vendor.name")
      field "annualCost", jmes_path(col_item, "annualCost")
    end
  end
end

script "js_products", type: "javascript" do
  parameters "ds_num_products", "ds_flexera_api_hosts", "rs_org_id"
  result "request"
  code <<-EOS
  var request = {
    auth: "auth_flexera",
    host: ds_flexera_api_hosts["fsm"],
    path: "/svc/orgs/" + rs_org_id + "/managed-products",
    headers: { "content-type": "application/json" },
    query_params: {
      "pageSize": ds_num_products["totalItems"].toString(),
      "includeInactive": "false"
    }
  }
EOS
end

datasource "ds_num_unsanctioned" do
  request do
    auth $auth_flexera
    host val($ds_flexera_api_hosts, "fsm")
    path join(["/svc/orgs/", rs_org_id, "/financial-discovery"])
    header "content-type", "application/json"
  end
  result do
    encoding "json"
    field "totalItems", jmes_path(response, "totalItems")
  end
end

datasource "ds_unsanctioned" do
  request do
    run_script $js_unsanctioned, $ds_num_unsanctioned, $ds_flexera_api_hosts, rs_org_id
  end
  result do
    encoding "json"
    collect jmes_path(response, "items[*]") do
      field "latestExpenseDate", jmes_path(col_item, "latestExpenseDate")
      field "department", jmes_path(col_item, "department")
      field "purchaser", jmes_path(col_item, "purchaser")
      field "expenseSum", jmes_path(col_item, "expenseSum")
      field "vendor", jmes_path(col_item, "vendor.name")
      field "product", jmes_path(col_item, "product.name")
    end
  end
end

script "js_unsanctioned", type: "javascript" do
  parameters "ds_num_unsanctioned", "ds_flexera_api_hosts", "rs_org_id"
  result "request"
  code <<-EOS
  var request = {
    auth: "auth_flexera",
    host: ds_flexera_api_hosts["fsm"],
    path: "/svc/orgs/" + rs_org_id + "/financial-discovery",
    headers: { "content-type": "application/json" },
    query_params: { "pageSize": ds_num_unsanctioned["totalItems"].toString() }
  }
EOS
end

datasource "ds_format_data" do
  run_script $js_format_data, $ds_products, $ds_unsanctioned, $ds_applied_policy, $ds_currency
end

script "js_format_data", type: "javascript" do
  parameters "ds_products", "ds_unsanctioned", "ds_applied_policy", "ds_currency"
  result "result"
  code <<-EOS
  result = []
  unsanctioned_product_names = _.pluck(ds_unsanctioned, 'product')

  _.each(ds_products, function(prod) {
    if (_.contains(unsanctioned_product_names, prod["application"])) {
      expenses = _.where(ds_unsanctioned, { product: prod["application"]} )
      latest_expense = _.max(expenses, function(expense) { return expense['latestExpenseDate'] })

      latestExpenseDate = new Date(latest_expense["latestExpenseDate"]).toISOString().split('T')[0]

      result.push({
        product: prod["application"],
        vendor: prod["vendor"],
        currency: ds_currency["symbol"],
        annualCost: prod["annualCost"],
        licensePOC: prod["pointOfContactEmail"],
        expenseSum: latest_expense["expenseSum"],
        latestExpenseDate: latestExpenseDate,
        expensePurchaser: latest_expense["purchaser"],
        policy_name: ds_applied_policy["name"]
      })
    }
  })
EOS
end

###############################################################################
# Policy
###############################################################################

policy "pol_fsm_unsanctioned_with_contract" do
  validate_each $ds_format_data do
    summary_template "{{ with index data 0 }}{{ .policy_name }}{{ end }}: {{ len data }} Unsanctioned SaaS Purchases with Existing Contracts"
    check eq(val(item, "product"), "")
    escalate $esc_email
    export do
      field "product" do
        label "Application"
      end
      field "vendor" do
        label "Vendor"
      end
      field "annualCost" do
        label "Annual Contract Cost"
      end
      field "expenseSum" do
        label "Expense Cost"
      end
      field "currency" do
        label "Currency"
      end
      field "licensePOC" do
        label "Point of Contact"
      end
      field "latestExpenseDate" do
        label "Latest Expense Date"
      end
      field "expensePurchaser" do
        label "Expense Purchaser"
      end
    end
  end
end

###############################################################################
# Escalations
###############################################################################

escalation "esc_email" do
  automatic true
  label "Send Email"
  description "Send incident email"
  email $param_email
end

name "SaaS Manager - Renewal Reminder"
rs_pt_ver 20180301
type "policy"
short_description "This policy will create an incident when Flexera SaaS Manager identifies applications whose expiration date is approaching. See the [README](https://github.com/flexera-public/policy_templates/tree/master/saas/fsm/renewal_reminder/) and [docs.flexera.com/flexera/EN/Automation](https://docs.flexera.com/flexera/EN/Automation/AutomationGS.htm) to learn more."
long_description ""
severity "medium"
category "SaaS Management"
default_frequency "weekly"
info(
  version: "3.0",
  provider: "Flexera SaaS Manager",
  service: "",
  policy_set: ""
)

###############################################################################
# Parameters
###############################################################################

parameter "param_email" do
  type "list"
  category "Policy Settings"
  label "Email addresses to notify"
  description "Email addresses of the recipients you wish to notify when new incidents are created"
  default []
end

parameter "param_days" do
  type "number"
  category "Policy Settings"
  label "Upcoming Number of Days"
  default 60
  description "If an application renewal is due in the upcoming time period, raise an incident"
end

###############################################################################
# Authentication
###############################################################################

credentials "auth_flexera" do
  schemes "oauth2"
  label "Flexera"
  description "Select Flexera One OAuth2 credentials"
  tags "provider=flexera"
end

###############################################################################
# Datasources & Scripts
###############################################################################

# Get applied policy metadata for use later
datasource "ds_applied_policy" do
  request do
    auth $auth_flexera
    host rs_governance_host
    path join(["/api/governance/projects/", rs_project_id, "/applied_policies/", policy_id])
    header "Api-Version", "1.0"
  end
end

datasource "ds_flexera_api_hosts" do
  run_script $js_flexera_api_hosts, rs_optima_host
end

script "js_flexera_api_hosts", type: "javascript" do
  parameters "rs_optima_host"
  result "result"
  code <<-EOS
  host_table = {
    "api.optima.flexeraeng.com": {
      flexera: "api.flexera.com",
      fsm: "api.fsm.flexeraeng.com"
    },
    "api.optima-eu.flexeraeng.com": {
      flexera: "api.flexera.eu",
      fsm: "api.fsm-eu.flexeraeng.com"
    },
    "api.optima-apac.flexeraeng.com": {
      flexera: "api.flexera.au",
      fsm: "api.fsm-apac.flexeraeng.com"
    }
  }

  result = host_table[rs_optima_host]
EOS
end

datasource "ds_num_products" do
  request do
    auth $auth_flexera
    host val($ds_flexera_api_hosts, "fsm")
    path join(["/svc/orgs/", rs_org_id, "/managed-products"])
    header "content-type", "application/json"
  end
  result do
    encoding "json"
    field "totalItems", jmes_path(response, "totalItems")
  end
end

datasource "ds_products" do
  request do
    run_script $js_products, $ds_num_products, $ds_flexera_api_hosts, rs_org_id
  end
  result do
    encoding "json"
    collect jmes_path(response, "items[*]") do
      field "application", jmes_path(col_item, "name")
      field "pointOfContactEmail", jmes_path(col_item, "pointOfContactEmail")
      field "vendor", jmes_path(col_item, "product.vendor.name")
      field "annualCost", jmes_path(col_item, "annualCost")
      field "licenses" do
        collect jmes_path(col_item, "licenses") do
          field "lic_id", jmes_path(col_item, "id")
        end
      end
    end
  end
end

script "js_products", type: "javascript" do
  parameters "ds_num_products", "ds_flexera_api_hosts", "rs_org_id"
  result "request"
  code <<-EOS
  var request = {
    auth: "auth_flexera",
    host: ds_flexera_api_hosts["fsm"],
    path: "/svc/orgs/" + rs_org_id + "/managed-products",
    headers: { "content-type": "application/json" },
    query_params: {
      "pageSize": ds_num_products[0]["totalItems"].toString(),
      "includeInactive": "false"
    }
  }
EOS
end

datasource "ds_licenses_summary" do
  request do
    auth $auth_flexera
    host val($ds_flexera_api_hosts, "fsm")
    path join(["/svc/orgs/", rs_org_id, "/licenses/summaries"])
    header "content-type", "application/json"
  end
  result do
    encoding "json"
    collect jmes_path(response, "[*]") do
      field "lic_id", jmes_path(col_item, "id")
      field "end_date", jmes_path(col_item, "endDate")
    end
  end
end

datasource "ds_products_with_enddate" do
  run_script $js_products_with_enddate, $ds_products, $ds_licenses_summary, $ds_applied_policy, $param_days
end

script "js_products_with_enddate", type: "javascript" do
  parameters "ds_products", "ds_licenses_summary", "ds_applied_policy", "param_days"
  result "result"
  code <<-EOS
  result = []
  lic_enddate = {}

  _.each(ds_licenses_summary, function(license) {
    if (license['end_date'] != null) {
      lic_enddate[license['lic_id']] = license['end_date']
    }
  })

  end_date = ""

  _.each(ds_products, function(product) {
    _.each(product['licenses'], function(license) {
      end_date = lic_enddate[license['lic_id']]
    })

    date = new Date()
    date = date.setHours(24 * param_days)
    date = new Date(date)

    if (end_date != null) {
      expiration_date = new Date(end_date)

      if (expiration_date < date) {
        result.push({
          application: product['application'],
          pointOfContactEmail: product['pointOfContactEmail'],
          vendor: product['vendor'],
          annualCost: product['annualCost'],
          endDate: end_date
        })
      }
    }
  })

  result = _.sortBy(result, 'endDate')

  if (result.length > 0) {
    result[0]['policy_name'] = ds_applied_policy['name']
  }
EOS
end

###############################################################################
# Policy
###############################################################################

policy "policy_fsm_renewal_reminder" do
  validate_each $ds_products_with_enddate do
    summary_template "{{ with index data 0 }}{{ .policy_name }}{{ end }}: {{ len data }} Expiring Applications Found"
    check eq(val(item, "application"), "")
    escalate $esc_email
    export do
      field "endDate" do
        label "Expiration Date (YYYY-MM-DD)"
      end
      field "vendor" do
        label "Vendor"
      end
      field "id" do
        label "Application"
        path "application"
      end
      field "pointOfContactEmail" do
        label "Point of Contact"
      end
      field "annualCost" do
        label "Annual Cost"
      end
    end
  end
end

###############################################################################
# Escalations
###############################################################################

escalation "esc_email" do
  automatic true
  label "Send Email"
  description "Send incident email"
  email $param_email
end

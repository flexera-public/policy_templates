name "SaaS Manager - Duplicate User Accounts"
rs_pt_ver 20180301
type "policy"
short_description "This policy will create an incident when Flexera SaaS Manager identifies duplicate user accounts within a single managed SaaS application. See the [README](https://github.com/flexera-public/policy_templates/tree/master/saas/fsm/duplicate_users/) and [docs.flexera.com/flexera/EN/Automation](https://docs.flexera.com/flexera/EN/Automation/AutomationGS.htm) to learn more."
long_description ""
doc_link "https://github.com/flexera-public/policy_templates/tree/master/saas/fsm/duplicate_users/"
severity "medium"
category "SaaS Management"
default_frequency "weekly"
info(
  version: "3.1.5",
  provider: "Flexera",
  service: "SaaS Manager",
  policy_set: "",
  hide_skip_approvals: "true"
)

###############################################################################
# Parameters
###############################################################################

parameter "param_email" do
  type "list"
  category "Policy Settings"
  label "Email Addresses"
  description "Email addresses of the recipients you wish to notify when new incidents are created."
  default []
end

###############################################################################
# Authentication
###############################################################################

credentials "auth_flexera" do
  schemes "oauth2"
  label "Flexera"
  description "Select Flexera One OAuth2 credentials"
  tags "provider=flexera"
end

###############################################################################
# Datasources & Scripts
###############################################################################

# Get region-specific Flexera API endpoints
datasource "ds_flexera_api_hosts" do
  run_script $js_flexera_api_hosts, rs_optima_host
end

script "js_flexera_api_hosts", type: "javascript" do
  parameters "rs_optima_host"
  result "result"
  code <<-EOS
  host_table = {
    "api.optima.flexeraeng.com": {
	    api: "api.flexera.com",
      flexera: "api.flexera.com",
      fsm: "api.fsm.flexeraeng.com",
      grs: "grs-front.iam-us-east-1.flexeraeng.com",
      ui: "app.flexera.com",
      tld: "flexera.com"
    },
    "api.optima-eu.flexeraeng.com": {
	    api: "api.flexera.eu",
      flexera: "api.flexera.eu",
      fsm: "api.fsm-eu.flexeraeng.com",
      grs: "grs-front.eu-central-1.iam-eu.flexeraeng.com",
      ui: "app.flexera.eu",
      tld: "flexera.eu"
    },
    "api.optima-apac.flexeraeng.com": {
	    api: "api.flexera.au",
      flexera: "api.flexera.au",
      fsm: "api.fsm-apac.flexeraeng.com",
      grs: "grs-front.ap-southeast-2.iam-apac.flexeraeng.com",
      ui: "app.flexera.au",
      tld: "flexera.au"
    }
  }

  result = host_table[rs_optima_host]
EOS
end

# Get applied policy metadata for use later
datasource "ds_applied_policy" do
  request do
    auth $auth_flexera
    host val($ds_flexera_api_hosts, "flexera")
    path join(["/policy/v1/orgs/", rs_org_id, "/projects/", rs_project_id, "/applied-policies", switch(policy_id, join(["/", policy_id]), "")])
  end
end

datasource "ds_managed_apps" do
  request do
    run_script $js_managed_apps, $ds_flexera_api_hosts, rs_org_id
  end
  result do
    encoding "json"
    collect jmes_path(response, "values[*]") do
      field "appId", jmes_path(col_item, "appId")
      field "appName", jmes_path(col_item, "appName")
      field "id", jmes_path(col_item, "id")
      field "name", jmes_path(col_item, "name")
      field "description", jmes_path(col_item, "description")
      field "vendorName", jmes_path(col_item, "vendorName")
      field "isActive", jmes_path(col_item, "isActive")
    end
  end
end

script "js_managed_apps", type: "javascript" do
  parameters "ds_flexera_api_hosts", "rs_org_id"
  result "request"
  code <<-EOS
  var request = {
    auth: "auth_flexera",
    host: ds_flexera_api_hosts["flexera"],
    path: "/saas/v1/orgs/" + rs_org_id + "/managed-apps",
    headers: { "content-type": "application/json" },
    query_params: { "view": "extended" }
  }
EOS
end

# Filter out inactive and invalid apps to avoid needlessly checking them
datasource "ds_managed_apps_active" do
  run_script $js_managed_apps_active, $ds_managed_apps
end

script "js_managed_apps_active", type: "javascript" do
  parameters "ds_managed_apps"
  result "result"
  code <<-EOS
  result = _.filter(ds_managed_apps, function(app) {
    return app['isActive'] == true && app['appName'] != null && app['vendorName'] != null
  })
EOS
end

datasource "ds_managed_apps_users" do
  iterate $ds_managed_apps_active
  request do
    run_script $js_managed_apps_users, val(iter_item, 'id'), $ds_flexera_api_hosts, rs_org_id
  end
  result do
    encoding "json"
    collect jmes_path(response, "values[*]") do
      field "firstName", jmes_path(col_item, "firstName")
      field "middleName", jmes_path(col_item, "middleName")
      field "lastName", jmes_path(col_item, "lastName")
      field "email", jmes_path(col_item, "email")
      field "uniqueId", jmes_path(col_item, "uniqueId")
      field "sku", jmes_path(col_item, "sku")
      field "skus", jmes_path(col_item, "skus")
      field "appId", val(iter_item, "appId")
      field "appName", val(iter_item, "appName")
      field "appDescription", val(iter_item, "description")
      field "appVendor", val(iter_item, "vendorName")
    end
  end
end

script "js_managed_apps_users", type: "javascript" do
  parameters "app_id", "ds_flexera_api_hosts", "rs_org_id"
  result "request"
  code <<-EOS
  var request = {
    auth: "auth_flexera",
    host: ds_flexera_api_hosts["flexera"],
    path: "/saas/v1/orgs/" + rs_org_id + "/managed-apps/" + app_id + "/app-users",
    headers: { "content-type": "application/json" }
  }
EOS
end

datasource "ds_filter_users" do
  run_script $js_filter_users, $ds_managed_apps_users, $ds_applied_policy
end

script "js_filter_users", type: "javascript" do
  parameters "ds_product_users", "ds_applied_policy"
  result "result"
  code <<-EOS
  result = []
  user_list = {}

  _.each(ds_product_users, function(user) {
    // Create an identifier to find matching users with different user ids
    firstName = "not_found"
    lastName = "not_found"
    email = "not_found"
    appId = "not_found"

    if (typeof(user['firstName']) == 'string') { firstName = user['firstName'] }
    if (typeof(user['lastName']) == 'string') { lastName = user['lastName'] }
    if (typeof(user['email']) == 'string') { email = user['email'] }
    if (typeof(user['appId']) == 'string') { appId = user['appId'] }

    identifier = [
      firstName.toLowerCase().trim(),
      lastName.toLowerCase().trim(),
      email.toLowerCase().trim(),
      appId.toLowerCase().trim()
    ].join()

    // Make lists containing all users with this identifier
    if (user_list[identifier] == undefined) { user_list[identifier] = [] }
    user_list[identifier].push(user)
  })

  // Go through each identifier. If more than one matching user, include it in results.
  _.each(_.keys(user_list), function(identifier) {
    if (user_list[identifier].length > 1) {
      result.push({
        lastName: user_list[identifier][0]['lastName'],
        firstName: user_list[identifier][0]['firstName'],
        email: user_list[identifier][0]['email'],
        appName: user_list[identifier][0]['appName'],
        appVendor: user_list[identifier][0]['appVendor'],
        ids: _.pluck(user_list[identifier], 'uniqueId').join(', ')
      })
    }
  })

  // Add policy name field for incident
  if (result.length > 0) { result[0]['policy_name'] = ds_applied_policy['name'] }
EOS
end

###############################################################################
# Policy
###############################################################################

policy "pol_fsm_duplicate_users" do
  validate_each $ds_filter_users do
    summary_template "{{ with index data 0 }}{{ .policy_name }}{{ end }}: {{ len data }} Duplicate Application Users Found"
    check eq(val(item, "email"), "")
    escalate $esc_email
    export do
      field "lastName" do
        label "Last Name"
      end
      field "firstName" do
        label "First Name"
      end
      field "email" do
        label "Email"
      end
      field "appName" do
        label "Application"
      end
      field "appVendor" do
        label "Vendor"
      end
      field "ids" do
        label "User IDs"
      end
    end
  end
end

###############################################################################
# Escalations
###############################################################################

escalation "esc_email" do
  automatic true
  label "Send Email"
  description "Send incident email"
  email $param_email
end

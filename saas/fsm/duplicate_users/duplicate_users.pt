name "SaaS Manager - Duplicate User Accounts"
rs_pt_ver 20180301
type "policy"
short_description "This policy will create an incident when Flexera SaaS Manager identifies duplicate user accounts within a single managed SaaS application. See the [README](https://github.com/flexera/policy_templates/tree/master/saas/fsm/duplicate_users/) and [docs.rightscale.com/policies](https://docs.rightscale.com/policies/) to learn more."
long_description ""
severity "medium"
category "SaaS Management"
default_frequency "daily"
info(
  version: "2.0",
  provider: "Flexera SaaS Manager",
  service: "",
  policy_set: ""
)

parameter "param_email" do
  type "list"
  label "Email addresses to notify"
  description "Email addresses of the recipients you wish to notify"
end

#authenticate with FSM
credentials "fsm_auth" do
  schemes "oauth2"
  label "FSM"
  description "Select the FSM Resource Manager Credential from the list."
  tags "provider=flexera_fsm"
end

datasource "ds_num_products" do
  request do
    auth $fsm_auth
    host "api.metasaas.com"
    verb "GET"
    scheme "https"
    #path join(["/svc/orgs/", rs_org_id, "/managed-products"])
    path "/svc/orgs/28010/managed-products"
    header "content-type", "application/json"
  end
  result do
    encoding "json"
    field "totalItems", jmes_path(response, "totalItems")
  end
end

datasource "ds_products" do
  request do
    #run_script $js_products, val($ds_num_products,"totalItems"), rs_org_id
    run_script $js_products, val($ds_num_products,"totalItems"), "28010"
  end
  result do
    encoding "json"
    collect jmes_path(response, "items[*]") do
      field "application", jmes_path(col_item, "name")
      field "id", jmes_path(col_item, "id")
      field "vendor", jmes_path(col_item, "product.vendor.name")
      field "totalUsers", jmes_path(col_item, "totalUsers")
    end
  end
end

script "js_products", type: "javascript" do
  parameters "num_items", "rs_org_id"
  result "request"
  code <<-EOS
  console.log("ds_products"+rs_org_id)
  request = {
    auth: "fsm_auth",
    host: "api.metasaas.com",
    verb: "GET",
    scheme: "https",
    path: "/svc/orgs/"+rs_org_id+"/managed-products",
    headers: {
      "content-type": "application/json"
    },
     query_params: {
      "pageSize": num_items.toString(),
      "includeInactive": "false"
    }
  }
EOS
end

datasource "ds_product_users" do
  iterate $ds_products
  request do
    #run_script $js_product_users, val(iter_item, "totalUsers"), rs_org_id, val(iter_item, "id")
    run_script $js_product_users, val(iter_item, "totalUsers"), "28010", val(iter_item, "id")
  end
  result do
    encoding "json"
    collect jmes_path(response, "items[*]") do
      field "email", jmes_path(col_item, "email")
      field "firstName", jmes_path(col_item, "firstName")
      field "lastName", jmes_path(col_item, "lastName")
      field "managedProductId", jmes_path(col_item, "managedProductId")
      field "application", val(iter_item, "application")
      field "vendor", val(iter_item, "vendor")
      field "id", jmes_path(col_item, "id")
    end
  end
end

script "js_product_users", type: "javascript" do
  parameters "num_items", "rs_org_id", "app_id"
  result "request"
  code <<-EOS
  console.log("ds_product_users "+rs_org_id)
  if (num_items != null && num_items != "undefined"){
    // skip
  } else {
    num_items = 1
  }
  request = {
    auth: "fsm_auth",
    host: "api.metasaas.com",
    verb: "GET",
    scheme: "https",
    path: "/svc/orgs/"+rs_org_id+"/managed-products/"+app_id+"/managed-product-agents",
    headers: {
      "content-type": "application/json"
    },
    query_params: {
      "pageSize": num_items.toString(),
      "page": "1",
      "sort": "uniqueId",
      "asc": "true"
    }
  }
EOS
end

datasource "ds_filter_users" do
  run_script $js_filter_users, $ds_product_users
end

script "js_filter_users", type: "javascript" do
  parameters "ds_product_users"
  result "result"
  code <<-EOS
    var result = [];

    var app_ids = _.uniq(_.pluck(ds_product_users, 'managedProductId'));

    _.each(app_ids, function(app_id){
      console.log("Application ID: "+app_id)
      
      var app_users = _.where(ds_product_users, {managedProductId: app_id});
      console.log("Application Users: ")
      console.log(app_users)
      
      var last_names = _.uniq(_.pluck(app_users, 'lastName'));
      _.each(last_names, function(last_name){
        var last_name_users = _.where(app_users, {lastName: last_name});
        if (_.size(last_name_users) > 1) {
          // more than 1 user with this last name
          var first_names = _.uniq(_.pluck(last_name_users, 'firstName'));

          _.each(first_names, function(first_name){
            var first_name_users = _.where(last_name_users, {firstName: first_name});
            if (_.size(first_name_users) > 1) {
              // more than 1 user with this first name & last name
              var emails = _.uniq(_.pluck(first_name_users, 'email'));
              if (_.size(emails) > 1){
                // raise incident
                result.push(first_name_users)
              } else {
                // more than 1 first name & last name combo, but 1 or less emails 
                // this likely will never trigger
              }
            } else {
              // only 1 app user with this first name & last name
            }
          })
        } else {
          // only 1 app user with this last name
        }
      })
    })
EOS
end

datasource "ds_num_departments" do
  request do
    auth $fsm_auth
    host "api.metasaas.com"
    verb "GET"
    scheme "https"
    #path join(["/svc/orgs/", rs_org_id, "/customer-group"])
    path "/svc/orgs/28010/customer-group"
    header "content-type", "application/json"
    query "groupTypeId", "1"
  end
  result do
    encoding "json"
    field "numItems", jmes_path(response, "numItems")
  end
end

datasource "ds_departments" do
  request do
    #run_script $js_departments, val($ds_num_departments,"totalItems"), rs_org_id
    run_script $js_departments, val($ds_num_departments,"numItems"), "28010"
  end
  result do
    encoding "json"
    collect jmes_path(response, "nodes[*]") do
      field "id", jmes_path(col_item, "id")
      field "groupName", jmes_path(col_item, "groupName")
    end
  end
end

script "js_departments", type: "javascript" do
  parameters "num_items", "rs_org_id"
  result "request"
  code <<-EOS
  console.log("ds_departments"+rs_org_id)
  request = {
    auth: "fsm_auth",
    host: "api.metasaas.com",
    verb: "GET",
    scheme: "https",
    path: "/svc/orgs/"+rs_org_id+"/customer-group",
    headers: {
      "content-type": "application/json"
    },
     query_params: {
      "pageSize": num_items.toString(),
      "groupTypeId": "1"
    }
  }
EOS
end

datasource "ds_user_details" do 
  iterate $ds_filter_users
  request do
    auth $fsm_auth
    host "api.metasaas.com"
    verb "GET"
    scheme "https"
    #path join(["/svc/orgs/", rs_org_id, "/customer-agents/", val(iter_item, "id")])
    path join(["/svc/orgs/28010/customer-agents/", val(iter_item, "id")])
    header "content-type", "application/json"
  end
  result do
    encoding "json"
    field "email", val(iter_item, "email")
    field "firstName", val(iter_item, "firstName")
    field "lastName", val(iter_item, "lastName")
    field "managedProductId", val(iter_item, "managedProductId")
    field "application", val(iter_item, "application")
    field "vendor", val(iter_item, "vendor")
    field "id", val(iter_item, "id")
    field "groups" do
      collect jmes_path(response, "customerAgentGroups[*]") do
        field "groupId", jmes_path(col_item,"customerGroupId")
        field "groupName", jmes_path(col_item,"displayName")
      end
    end
  end
end

datasource "ds_filter_users_dept" do
  run_script $js_filter_users_dept, $ds_user_details, $ds_departments
end

script "js_filter_users_dept", type: "javascript" do
  parameters "ds_user_details","ds_departments"
  result "result"
  code <<-EOS
    var result = [];
    var users_to_analyze = [];
    var dept_ids = _.uniq(_.pluck(ds_departments, 'id'));
    var app_ids = _.uniq(_.pluck(ds_user_details, 'managedProductId'));

    _.each(app_ids, function(app_id){
      console.log("Application ID: "+app_id)
      
      var app_users = _.where(ds_user_details, {managedProductId: app_id});
      console.log("Application Users: ")
      console.log(app_users)
      
      var last_names = _.uniq(_.pluck(app_users, 'lastName'));
      _.each(last_names, function(last_name){
        var last_name_users = _.where(app_users, {lastName: last_name});
        
        var first_names = _.uniq(_.pluck(last_name_users, 'firstName'));
        _.each(first_names, function(first_name){
            var first_name_users = _.where(last_name_users, {firstName: first_name});
            
            _.each(first_name_users, function(user){
              _.each(user["groups"], function(group){
                if(_.contains(dept_ids, group["id"])){
                  var dept_id = group["groupId"]
                  var dept_name = group["groupName"] 
                  users_to_analyze.push({
                    email: user["email"],
                    firstName: user["firstName"],
                    lastName: user["lastName"],
                    managedProductId: user["managedProductId"],
                    application: user["application"],
                    vendor: user["vendor"],
                    id: user["id"],
                    deptName: dept_name,
                    deptId: dept_id
                  }) 
                } 
              })

            })

            _.each(dept_ids, function(user_dept_id){
              var dept_users = _.where(users_to_analyze, {deptId: user_dept_id});

              if (_.size(dept_users) > 1){
                var user_emails = _.uniq(_.pluck(dept_users, 'email'));
                if (_.size(user_emails) > 1){
                  _.each(user_emails, function(user_email){
                    var target_user = _.where(dept_users, {email: user_email});
                    result.push(target_user)
                  })
                }
              }

            })
            
        })        
      })
    })
EOS
end


escalation "report_summary" do
    email $param_email
end

policy "policy_fsm_duplicate_users" do
  validate $ds_filter_users_dept do
      summary_template "{{ len data }} Duplicate Application Users Found"
      export do 
        field "lastName" do
          label "Last Name"
        end 
        field "firstName" do 
          label "First Name"
        end 
        field "email" do 
          label "Email"
        end 
        field "application" do 
          label "Application"
        end
        field "vendor" do 
          label "Vendor"
        end
        field "deptName" do 
          label "Department"
        end 
        field "managedProductName" do 
          label "Application"
        end
      end  
      escalate $report_summary
      check eq(size(data), 0)
  end
end
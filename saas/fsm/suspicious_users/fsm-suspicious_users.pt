name "SaaS Manager - Suspicious Users"
rs_pt_ver 20180301
type "policy"
short_description "This policy will create an incident when Flexera SaaS Manager identifies suspicious users logging into SaaS applications. See the [README](https://github.com/flexera-public/policy_templates/tree/master/saas/fsm/suspicious_users/) and [docs.flexera.com/flexera/EN/Automation](https://docs.flexera.com/flexera/EN/Automation/AutomationGS.htm) to learn more."
long_description ""
severity "high"
default_frequency "daily"
category "SaaS Management"
info(
  version: "3.0",
  provider: "Flexera SaaS Manager",
  service: "",
  policy_set: ""
)

###############################################################################
# Parameters
###############################################################################

parameter "param_email" do
  type "list"
  category "Policy Settings"
  label "Email addresses to notify"
  description "Email addresses of the recipients you wish to notify when new incidents are created"
  default []
end

###############################################################################
# Authentication
###############################################################################

credentials "auth_fsm" do
  schemes "oauth2"
  label "FSM"
  description "Select the FSM Resource Manager Credential from the list."
  tags "provider=flexera_fsm"
end

###############################################################################
# Pagination
###############################################################################

pagination "pagination_suspicious" do
  get_page_marker do
    body_path jq(response, 'if length < 1000 then null else if $marker != "" then $marker | tonumber + 1 else 2 end end')
  end
  set_page_marker do
    query "page"
  end
end

###############################################################################
# Datasources & Scripts
###############################################################################

datasource "ds_flexera_api_hosts" do
  run_script $js_flexera_api_hosts, rs_optima_host
end

script "js_flexera_api_hosts", type: "javascript" do
  parameters "rs_optima_host"
  result "result"
  code <<-EOS
  host_table = {
    "api.optima.flexeraeng.com": {
      flexera: "api.flexera.com",
      fsm: "api.fsm.flexeraeng.com"
    },
    "api.optima-eu.flexeraeng.com": {
      flexera: "api.flexera.eu",
      fsm: "api.fsm-eu.flexeraeng.com"
    },
    "api.optima-apac.flexeraeng.com": {
      flexera: "api.flexera.au",
      fsm: "api.fsm-apac.flexeraeng.com"
    }
  }

  result = host_table[rs_optima_host]
EOS
end

datasource "ds_suspicious_users" do
  request do
    auth $auth_fsm
    pagination $pagination_suspicious
    host val($ds_flexera_api_hosts, "fsm")
    path join(["/svc/orgs/", rs_org_id, "/activity/suspicious-agents"])
    header "content-type", "application/json"
    query "page", "1"
    query "pageSize", "1000"
    query "asc", "false"
    query "includeUnauthorized", "true"
    query "includeUnrecognized", "true"
    query "includeRecognized", "false"
  end
  result do
    encoding "json"
    collect jmes_path(response, "[*]") do
      field "firstName", jmes_path(col_item, "firstName")
      field "lastName", jmes_path(col_item, "lastName")
      field "email", jmes_path(col_item, "email")
      field "uniqueId", jmes_path(col_item, "uniqueId")
      field "managedProductName", jmes_path(col_item, "managedProductName")
      field "recognized", jmes_path(col_item, "recognized")
      field "unauthorized", jmes_path(col_item, "unauthorized")
    end
  end
end

datasource "ds_users_cleanup" do
  run_script $js_users_cleanup, $ds_suspicious_users
end

script "js_users_cleanup", type: "javascript" do
  parameters "ds_suspicious_users"
  result "result"
  code <<-EOS
  result = []

  _.each(ds_suspicious_users, function(user) {
    firstName = user['firstName']
    if (typeof(firstName) != 'string') { firstName = '' }

    lastName = user["lastName"]
    if (typeof(lastName) != 'string') { lastName = '' }

    activity_type = "Unrecognized"
    if (user['unauthorized'] == true) { activity_type = "Unauthorized" }

    email = user["email"]

    if (typeof(email) != 'string') {
      email = ""

      if (typeof(user['uniqueId']) == 'string' && user['uniqueId'] != "(Unknown)") {
        email = user['uniqueId']
      }
    }

    result.push({
      uniqueId: user['uniqueId'],
      managedProductName: user['managedProductName'],
      recognized: user['recognized'],
      unauthorized: user['unauthorized'],
      firstName: firstName,
      lastName: lastName,
      activity_type: activity_type,
      email: email
    })
  })
EOS
end

###############################################################################
# Policy
###############################################################################

policy "policy_fsm_suspicious_users" do
  validate $ds_users_cleanup do
    summary_template "{{ len data }} Suspicious SaaS Users Found"
    check eq(size(data), 0)
    escalate $esc_email
    export do
      field "lastName" do
        label "Last Name"
      end
      field "firstName" do
        label "First Name"
      end
      field "email" do
        label "Email"
      end
      field "managedProductName" do
        label "Application"
      end
      field "activity_type" do
        label "Activity Type"
      end
    end
  end
end

###############################################################################
# Escalations
###############################################################################

escalation "esc_email" do
  automatic true
  label "Send Email"
  description "Send incident email"
  email $param_email
end

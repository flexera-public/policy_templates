name "SaaS Manager - User Status Change"
rs_pt_ver 20180301
type "policy"
short_description "This policy will create an incident when Flexera SaaS Manager identifies users whose status in the HR roster changes to inactive. See the [README](https://github.com/flexera-public/policy_templates/tree/master/saas/fsm/user_status_change/) and [docs.flexera.com/flexera/EN/Automation](https://docs.flexera.com/flexera/EN/Automation/AutomationGS.htm) to learn more."
long_description ""
severity "medium"
category "SaaS Management"
default_frequency "weekly"
info(
  version: "3.0",
  provider: "Flexera SaaS Manager",
  service: "",
  policy_set: ""
)

###############################################################################
# Parameters
###############################################################################

parameter "param_email" do
  type "list"
  category "Policy Settings"
  label "Email Addresses"
  description "Email addresses of the recipients you wish to notify when new incidents are created"
  default []
end

parameter "param_days" do
  type "number"
  category "Policy Settings"
  label "Number of Days Back"
  description "If a user's status changes to inactive during this time period, those user accounts will raise an incident"
end

###############################################################################
# Authentication
###############################################################################

credentials "auth_flexera" do
  schemes "oauth2"
  label "Flexera"
  description "Select Flexera One OAuth2 credentials"
  tags "provider=flexera"
end

###############################################################################
# Datasources & Scripts
###############################################################################

# Get applied policy metadata for use later
datasource "ds_applied_policy" do
  request do
    auth $auth_flexera
    host rs_governance_host
    path join(["/api/governance/projects/", rs_project_id, "/applied_policies/", policy_id])
    header "Api-Version", "1.0"
  end
end

datasource "ds_flexera_api_hosts" do
  run_script $js_flexera_api_hosts, rs_optima_host
end

script "js_flexera_api_hosts", type: "javascript" do
  parameters "rs_optima_host"
  result "result"
  code <<-EOS
  host_table = {
    "api.optima.flexeraeng.com": {
      flexera: "api.flexera.com",
      fsm: "api.fsm.flexeraeng.com"
    },
    "api.optima-eu.flexeraeng.com": {
      flexera: "api.flexera.eu",
      fsm: "api.fsm-eu.flexeraeng.com"
    },
    "api.optima-apac.flexeraeng.com": {
      flexera: "api.flexera.au",
      fsm: "api.fsm-apac.flexeraeng.com"
    }
  }

  result = host_table[rs_optima_host]
EOS
end

datasource "ds_num_users" do
  request do
    auth $auth_flexera
    host val($ds_flexera_api_hosts, "fsm")
    path join(["/svc/orgs/", rs_org_id, "/customer-agents"])
    header "content-type", "application/json"
    query "includeInactive", "true"
    query "property", "totalItems"
  end
  result do
    encoding "json"
    field "totalItems", jmes_path(response, "totalItems")
  end
end

datasource "ds_groups" do
  request do
    auth $auth_flexera
    host val($ds_flexera_api_hosts, "fsm")
    path join(["/svc/orgs/", rs_org_id, "/customer-group"])
    header "content-type", "application/json"
  end
  result do
    encoding "json"
    collect jmes_path(response, "nodes[*]") do
      field "id", val(col_item, "id")
      field "groupName", val(col_item, "groupName")
    end
  end
end

datasource "ds_group_members" do
  iterate $ds_groups
  request do
    run_script $js_group_members, val(iter_item, "id"), $ds_flexera_api_hosts, rs_org_id
  end
  result do
    encoding "json"
    collect jmes_path(response, "items[*]") do
      field "groupId", val(iter_item, "id")
      field "groupName", val(iter_item, "groupName")
      field "email", val(col_item, "email")
    end
  end
end

script "js_group_members", type: "javascript" do
  parameters "group_id", "ds_flexera_api_hosts", "rs_org_id"
  result "request"
  code <<-EOS
  var request = {
    auth: "auth_flexera",
    host: ds_flexera_api_hosts["fsm"],
    path: "/svc/orgs/" + rs_org_id + "/customer-agents",
    headers: { "content-type": "application/json" },
    query_params: { "groupId": group_id }
  }
EOS
end

datasource "ds_users" do
  request do
    run_script $js_users, $ds_num_users, $ds_flexera_api_hosts, rs_org_id
  end
  result do
    encoding "json"
    collect jmes_path(response, "items[*]") do
      field "firstName", val(col_item, "firstName")
      field "lastName", val(col_item, "lastName")
      field "email", val(col_item, "email")
      field "id", val(col_item, "id")
      field "active", val(col_item, "active")
    end
  end
end

script "js_users", type: "javascript" do
  parameters "ds_num_users", "ds_flexera_api_hosts", "rs_org_id"
  result "request"
  code <<-EOS
  var request = {
    auth: "auth_flexera",
    host: ds_flexera_api_hosts["fsm"],
    path: "/svc/orgs/" + rs_org_id + "/customer-agents",
    headers: { "content-type": "application/json" },
    query_params: {
      "includeInactive": "true",
      "pageSize": ds_num_users["totalItems"].toString(),
      "property": "items.id,items.email,items.firstName,items.lastName,items.active"
    }
  }
EOS
end

datasource "ds_inactive_users" do
  run_script $js_filter_users, $ds_users
end

script "js_filter_users", type: "javascript" do
  parameters "ds_users"
  result "result"
  code <<-EOS
  result = _.reject(ds_users, function(user) { return user['active'] == true })
EOS
end

datasource "ds_users_details" do
  iterate $ds_inactive_users
  request do
    run_script $js_user_details, val(iter_item, "id"), $ds_flexera_api_hosts, rs_org_id
  end
  result do
    encoding "json"
    field "firstName", jmes_path(response, "firstName")
    field "lastName", jmes_path(response, "lastName")
    field "email", jmes_path(response, "email")
    field "id", jmes_path(response, "id")
    field "active", jmes_path(response, "active")
    field "activeDate", jmes_path(response, "activeDate")
    field "inactiveDate", jmes_path(response, "inactiveDate")
    field "numberOfLicenses", jmes_path(response, "numberOfLicenses")
  end
end

script "js_user_details", type: "javascript" do
  parameters "user", "ds_flexera_api_hosts", "rs_org_id"
  result "request"
  code <<-EOS
  var request = {
    auth: "auth_flexera",
    host: ds_flexera_api_hosts["fsm"],
    path: "/svc/orgs/" + rs_org_id + "/customer-agents/" + user,
    headers: { "content-type": "application/json" }
  }
EOS
end

datasource "ds_cleanup_users" do
  run_script $js_cleanup_users, $ds_users_details, $ds_group_members, $ds_applied_policy, $param_days
end

script "js_cleanup_users", type: "javascript" do
  parameters "ds_users_details", "ds_group_members", "ds_applied_policy", "param_days"
  result "result"
  code <<-EOS
  result = []
  date = new Date()
  date = date.setHours(-24 * param_days)
  date = new Date(date)

  // returns date formatted as string: YYYY-mm-dd
  function getFormattedDailyDate(date) {
    year = date.getFullYear()
    month = (1 + date.getMonth()).toString()
    month = month.length > 1 ? month : '0' + month
    day = date.getDate().toString()
    day = day.length > 1 ? day : '0' + day
    return year + '-' + month + '-' + day
  }

  _.each(ds_users_details, function(user){
    inactive_date = new Date(user["inactiveDate"])

    if (inactive_date > date) {
      _.each(ds_group_members, function(group_member) {
        if (user["email"] === group_member["email"]) {
          user_group = group_member["groupName"]
        }
      })

      result.push({
        firstName: user["firstName"],
        lastName: user["lastName"],
        email: user["email"],
        numberOfLicenses: user["numberOfLicenses"],
        inactiveDate: getFormattedDailyDate(inactive_date),
        userGroup: user_group
      })
    }
  })

  result = _.sortBy(result, 'userGroup')

  if (result.length > 0) {
    result[0]['policy_name'] = ds_applied_policy['name']
  }
EOS
end

###############################################################################
# Policy
###############################################################################

policy "policy_fsm_inactive_users" do
  validate_each $ds_cleanup_users do
    summary_template "{{ with index data 0 }}{{ .policy_name }}{{ end }}: {{ len data }} Inactive Users Found"
    check eq(val(item, "email"), "")
    escalate $esc_email
    export do
      field "email" do
        label "Email"
      end
      field "firstName" do
        label "First Name"
      end
      field "lastName" do
        label "Last Name"
      end
      field "userGroup" do
        label "Department"
      end
      field "inactiveDate" do
        label "Inactive Date (YYYY-MM-DD)"
      end
      field "numberOfLicenses" do
        label "Number Of Licenses"
      end
    end
  end
end

###############################################################################
# Escalations
###############################################################################

escalation "esc_email" do
  automatic true
  label "Send Email"
  description "Send incident email"
  email $param_email
end

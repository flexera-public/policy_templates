name "SaaS Manager - Unsanctioned Spend"
rs_pt_ver 20180301
type "policy"
short_description "This policy will create an incident when Flexera SaaS Manager identifies unsanctioned spend on SaaS applications. See the [README](https://github.com/flexera-public/policy_templates/tree/master/saas/fsm/unsanctioned_spend/) and [docs.flexera.com/flexera/EN/Automation](https://docs.flexera.com/flexera/EN/Automation/AutomationGS.htm) to learn more."
long_description ""
doc_link "https://github.com/flexera-public/policy_templates/tree/master/saas/fsm/unsanctioned_spend/"
severity "medium"
category "SaaS Management"
default_frequency "weekly"
info(
  version: "3.1.4",
  provider: "Flexera",
  service: "SaaS Manager",
  policy_set: "",
  hide_skip_approvals: "true"
)

###############################################################################
# Parameters
###############################################################################

parameter "param_email" do
  type "list"
  category "Policy Settings"
  label "Email Addresses"
  description "Email addresses of the recipients you wish to notify when new incidents are created"
  default []
end

parameter "param_unsanctioned_apps" do
  type "list"
  category "Policy Settings"
  label "Unsanctioned Application Names"
  description "List of SaaS Application names that the policy will target for identifying unsanctioned spend. Note: if left blank, the policy will detect all unsanctioned spend."
  # No default value, user input required
end

parameter "param_days" do
  type "number"
  category "Policy Settings"
  label "Number of Days Back"
  description "Unsanctioned expenses discovered during this time period will raise an incident"
  default 7
end

###############################################################################
# Authentication
###############################################################################

credentials "auth_flexera" do
  schemes "oauth2"
  label "Flexera"
  description "Select Flexera One OAuth2 credentials"
  tags "provider=flexera"
end

###############################################################################
# Datasources & Scripts
###############################################################################

# Get region-specific Flexera API endpoints
datasource "ds_flexera_api_hosts" do
  run_script $js_flexera_api_hosts, rs_optima_host
end

script "js_flexera_api_hosts", type: "javascript" do
  parameters "rs_optima_host"
  result "result"
  code <<-EOS
  host_table = {
    "api.optima.flexeraeng.com": {
	    api: "api.flexera.com",
      flexera: "api.flexera.com",
      fsm: "api.fsm.flexeraeng.com",
      grs: "grs-front.iam-us-east-1.flexeraeng.com",
      ui: "app.flexera.com",
      tld: "flexera.com"
    },
    "api.optima-eu.flexeraeng.com": {
	    api: "api.flexera.eu",
      flexera: "api.flexera.eu",
      fsm: "api.fsm-eu.flexeraeng.com",
      grs: "grs-front.eu-central-1.iam-eu.flexeraeng.com",
      ui: "app.flexera.eu",
      tld: "flexera.eu"
    },
    "api.optima-apac.flexeraeng.com": {
	    api: "api.flexera.au",
      flexera: "api.flexera.au",
      fsm: "api.fsm-apac.flexeraeng.com",
      grs: "grs-front.ap-southeast-2.iam-apac.flexeraeng.com",
      ui: "app.flexera.au",
      tld: "flexera.au"
    }
  }

  result = host_table[rs_optima_host]
EOS
end

# Get applied policy metadata for use later
datasource "ds_applied_policy" do
  request do
    auth $auth_flexera
    host val($ds_flexera_api_hosts, "flexera")
    path join(["/policy/v1/orgs/", rs_org_id, "/projects/", rs_project_id, "/applied-policies", switch(policy_id, join(["/", policy_id]), "")])
  end
end

datasource "ds_num_expenses" do
  request do
    auth $auth_flexera
    host val($ds_flexera_api_hosts, "fsm")
    path join(["/svc/orgs/", rs_org_id, "/financial-discovery"])
    header "content-type", "application/json"
  end
  result do
    encoding "json"
    field "totalItems", jmes_path(response, "totalItems")
  end
end

datasource "ds_unsanctioned" do
  request do
    run_script $js_unsanctioned, $ds_num_expenses, $ds_flexera_api_hosts, rs_org_id
  end
  result do
    encoding "json"
    collect jmes_path(response, "items[*]") do
      field "active", jmes_path(col_item, "active")
      field "currency", jmes_path(col_item, "currency")
      field "expenseSum", jmes_path(col_item, "expenseSum")
      field "id", jmes_path(col_item, "id")
      field "email", jmes_path(col_item, "purchaser")
      field "vendor", jmes_path(col_item, "vendor.name")
      field "application", jmes_path(col_item, "product.name")
      field "expenseDate", jmes_path(col_item, "latestExpenseDate")
    end
  end
end

script "js_unsanctioned", type: "javascript" do
  parameters "ds_num_expenses", "ds_flexera_api_hosts", "rs_org_id"
  result "request"
  code <<-EOS
  var request = {
    auth: "auth_flexera",
    host: ds_flexera_api_hosts["fsm"],
    path: "/svc/orgs/" + rs_org_id + "/financial-discovery",
    headers: { "content-type": "application/json" },
    query_params: { "pageSize": ds_num_expenses["totalItems"].toString() }
  }
EOS
end

datasource "ds_cleanup_expenses" do
  run_script $js_cleanup_expenses, $ds_unsanctioned, $ds_applied_policy, $param_days, $param_unsanctioned_apps
end

script "js_cleanup_expenses", type: "javascript" do
  parameters "ds_unsanctioned", "ds_applied_policy", "param_days", "param_unsanctioned_apps"
  result "result"
  code <<-EOS
  result = []
  date = new Date()
  date = date.setHours(param_days * -24)
  date = new Date(date)

  _.each(ds_unsanctioned, function(expense){
    expenseDate = new Date(expense["expenseDate"])

    if (expenseDate > date) {
      if (_.contains(param_unsanctioned_apps, expense["application"]) || param_unsanctioned_apps.length == 0) {
        result.push({
          active: expense["active"],
          expenseSum: Number(expense["expenseSum"]),
          currency: expense["currency"],
          id: expense["id"],
          email: expense["email"],
          vendor: expense["vendor"],
          application: expense["application"],
          expenseDate: expenseDate.toISOString().split('T')[0],
          policy_name: ds_applied_policy["name"]
        })
      }
    }
  })

  result = _.sortBy(result, 'expenseDate').reverse()
EOS
end

###############################################################################
# Policy
###############################################################################

policy "pol_fsm_unsanctioned_spend" do
  validate_each $ds_cleanup_expenses do
    summary_template "{{ with index data 0 }}{{ .policy_name }}{{ end }}: {{ len data }} Unsanctioned Expenses Found"
    check eq(val(item, "application"), "")
    escalate $esc_email
    export do
      field "expenseDate" do
        label "Expense Date"
      end
      field "expenseSum" do
        label "Expense Sum"
      end
      field "currency" do
        label "Currency"
      end
      field "application" do
        label "Application"
      end
      field "vendor" do
        label "Vendor"
      end
      field "email" do
        label "Purchaser Email"
      end
    end
  end
end

###############################################################################
# Escalations
###############################################################################

escalation "esc_email" do
  automatic true
  label "Send Email"
  description "Send incident email"
  email $param_email
end

name "Okta Inactive Users"
rs_pt_ver 20180301
type "policy"
short_description "Reports any Okta users that have not logged in within a specified number of days and deactivate the users upon approval. See the [README](https://github.com/flexera-public/policy_templates/tree/master/saas/okta/inactive_users/) and [docs.flexera.com/flexera/EN/Automation](https://docs.flexera.com/flexera/EN/Automation/AutomationGS.htm) to learn more."
long_description ""
category "SaaS Management"
severity "medium"
default_frequency "weekly"
info(
  version: "3.0.0",
  provider: "Okta",
  service: "",
  policy_set: ""
)

###############################################################################
# Parameters
###############################################################################

parameter "param_email" do
  type "list"
  category "Policy Settings"
  label "Email Addresses"
  description "A list of email addresses to notify."
  default []
end

parameter "param_okta_org_name" do
  type "string"
  category "Policy Settings"
  label "Okta Organization Name"
  description "Name of the Okta organization. For example, if you navigate to https://myorg.okta.com to log into Okta, the organization name would be 'myorg'"
  # No default value, user input required
end

parameter "param_days" do
  type "number"
  category "Policy Settings"
  label "Days Since Last Login"
  description "The number of days a user needs to go without logging in to be considered inactive."
  min_value 1
  default 30
end

parameter "param_automatic_action" do
  type "list"
  category "Actions"
  label "Automatic Actions"
  description "When this value is set, this policy will automatically take the selected action."
  allowed_values ["Deactivate Inactive Users"]
  default []
end

###############################################################################
# Authentication
###############################################################################

credentials "auth_flexera" do
  schemes "oauth2"
  label "Flexera"
  description "Select Flexera One OAuth2 credentials"
  tags "provider=flexera"
end

credentials "auth_okta" do
  schemes "api_key"
  label "Okta"
  description "Select the Okta Credential from the list."
  tags "provider=okta"
end

###############################################################################
# Datasources & Scripts
###############################################################################

# Gather applied policy metadata for use later
datasource "ds_applied_policy" do
  request do
    auth $auth_flexera
    host rs_governance_host
    path join(["/api/governance/projects/", rs_project_id, "/applied_policies/", policy_id])
    header "Api-Version", "1.0"
  end
end

datasource "ds_okta_users" do
  request do
    auth $auth_okta
    host join([$param_okta_org_name, ".okta.com"])
    path "/api/v1/users"
    query "filter", 'status eq "ACTIVE"'
    query "limit", "200"
    header "User-Agent", "RS Policies"
  end
  result do
    encoding "json"
    collect jmes_path(response, "[*]") do
      field "id", jmes_path(col_item, "id")
      field "status", jmes_path(col_item, "status")
      field "created", jmes_path(col_item, "created")
      field "lastLogin", jmes_path(col_item, "lastLogin")
      field "passwordChanged", jmes_path(col_item, "passwordChanged")
      field "firstName", jmes_path(col_item, "profile.firstName")
      field "lastName", jmes_path(col_item, "profile.lastName")
      field "email", jmes_path(col_item, "profile.email")
    end
  end
end

datasource "ds_bad_users" do
  run_script $js_bad_users, $ds_okta_users, $ds_applied_policy, $param_days, $param_okta_org_name
end

script "js_bad_users", type: "javascript" do
  parameters "ds_okta_users", "ds_applied_policy", "param_days", "param_okta_org_name"
  result "result"
  code <<-'EOS'
  target_date = new Date()
  target_date = target_date.setDate(target_date.getDate() - param_days)

  bad_users = _.filter(ds_okta_users, function(user) { return target_date > new Date(user["lastLogin"]) })

  result = _.map(bad_users, function(user) {
    return {
      id: user['id'],
      status: user['status'],
      created: user['created'],
      lastLogin: user['lastLogin'],
      passwordChanged: user['passwordChanged'],
      firstName: user['firstName'],
      lastName: user['lastName'],
      email: user['email'],
      org: param_okta_org_name,
      lookback: param_days,
      policy_name: ds_applied_policy['name']
    }
  })
EOS
end

###############################################################################
# Policy
###############################################################################

policy "pol_inactive_users" do
  validate_each $ds_bad_users do
    summary_template "{{ with index data 0 }}{{ .policy_name }}{{ end }}: {{ len data }} Okta Inactive Users Found"
    check eq(val(item, "id"), "")
    escalate $esc_email
    escalate $esc_deactivate_users
    export do
      resource_level true
      field "firstName" do
        label "First Name"
      end
      field "lastName" do
        label "Last Name"
      end
      field "email" do
        label "Email Address"
      end
      field "lastLogin" do
        label "Last Login"
      end
      field "status" do
        label "Status"
      end
      field "org" do
        label "Okta Organization"
      end
      field "id" do
        label "ID"
      end
      field "lookback" do
        label "Look Back Period (Days)"
      end
    end
  end
end

###############################################################################
# Escalations
###############################################################################

escalation "esc_email" do
  automatic true
  label "Send Email"
  description "Send incident email"
  email $param_email
end

escalation "esc_deactivate_users" do
  automatic contains($param_automatic_action, "Deactivate Inactive Users")
  label "Deactivate Inactive Users"
  description "Deactivate selected inactive Okta Users"
  run "deactivate_users", data
end

###############################################################################
# Cloud Workflow
###############################################################################

define deactivate_users($data) return $all_responses do
  $$all_responses = []

  foreach $user in $data do
    sub on_error: handle_error() do
      call deactivate_user($user) retrieve $deactivate_response
    end
  end

  if inspect($$errors) != "null"
    raise join($$errors, "\n")
  end
end

define delete_firewall($user) return $response do
  $host = join([$user["org"], ".okta.com"])
  $href = join(["/api/v1/users/", $user["id"], "/lifecycle/deactivate"])
  $url = $host + $href
  task_label("POST " + $url)

  $response = http_request(
    auth: $$auth_okta,
    https: true,
    verb: "post",
    host: $host,
    href: $href,
    headers: {
      "Content-Type": "application/json",
      "Accept": "application/json"
    }
  )

  task_label("POST Okta User response: " + $user["id"] + " " + to_json($response))
  $$all_responses << to_json({"req": "POST " + $url, "resp": $response})

  if $response["code"] != 204 && $response["code"] != 202 && $response["code"] != 200
    raise "Unexpected response posting Okta User: "+ $user["id"] + " " + to_json($response)
  else
    task_label("POST Okta User successful: " + $user["id"])
  end
end

define handle_error() do
  if !$$errors
    $$errors = []
  end
  $$errors << $_error["type"] + ": " + $_error["message"]
  # We check for errors at the end, and raise them all together
  # Skip errors handled by this definition
  $_error_behavior = "skip"
end

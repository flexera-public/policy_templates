name "GitHub.com Repositories without Admin Team"
rs_pt_ver 20180301
type "policy"
short_description "Gets the repositories under a GitHub.com Organization and creates incidents for any that do not have at least 1 Team assigned with `admin` role.  See the [README](https://github.com/flexera-public/policy_templates/tree/master/compliance/github/repository_admin_team) and [docs.flexera.com/flexera/EN/Automation](https://docs.flexera.com/flexera/EN/Automation/AutomationGS.htm) to learn more."
long_description ""
severity "medium"
category "Compliance"
default_frequency "weekly"
info(
  version: "3.0.0",
  provider: "GitHub",
  service: "Git",
  policy_set: ""
)

###############################################################################
# Parameters
###############################################################################

parameter "param_email" do
  type "list"
  category "Policy Settings"
  label "Email Addresses"
  description "A list of email addresses to notify."
  default []
end

parameter "param_orgs" do
  type "list"
  category "Policy Settings"
  label "GitHub.com Organizations"
  description "A list of GitHub.com Organizations to check."
end

###############################################################################
# Authentication
###############################################################################

credentials "auth_github" do
  schemes "api_key"
  label "GitHub"
  description "Select the GitHub Credential from the list."
  tags "provider=github"
end

credentials "auth_flexera" do
  schemes "oauth2"
  label "Flexera"
  description "Select Flexera One OAuth2 credentials"
  tags "provider=flexera"
end

###############################################################################
# Pagination
###############################################################################

pagination "pagination_github" do
  get_page_marker do
    header "Link"
  end
  set_page_marker do
    uri true
  end
end

###############################################################################
# Datasources & Scripts
###############################################################################

# Get applied policy metadata for use later
datasource "ds_applied_policy" do
  request do
    auth $auth_flexera
    host rs_governance_host
    path join(["/api/governance/projects/", rs_project_id, "/applied_policies/", policy_id])
    header "Api-Version", "1.0"
  end
end

datasource "ds_orgs_array" do
  run_script $js_orgs_array, $param_orgs
end

script "js_orgs_array", type: "javascript" do
  parameters "param_orgs"
  result "orgs_array"
  code <<-EOS
var orgs_array = param_orgs;
EOS
end

datasource "ds_org_repos" do
  iterate $ds_orgs_array
  request do
    auth $auth_github
    pagination $pagination_github
    host "api.github.com"
    path join(["/orgs/",iter_item,"/repos"])
  end
  result do
    encoding "json"
    collect jmes_path(response, "[*]") do
      field "repo_name", jmes_path(col_item, "name")
      field "repo_org", jmes_path(col_item, "owner.login")
      end
  end
end

datasource "ds_org_repos_teams" do
  iterate $ds_org_repos
  request do
    auth $auth_github
    pagination $pagination_github
    host "api.github.com"
    path join(["/repos/",val(iter_item,"repo_org"),"/",val(iter_item,"repo_name"),"/teams"])
  end
  result do
    encoding "json"
    collect jmes_path(response,"[@]") do
      field "id", jmes_path(iter_item, "id")
      field "repo_name", jmes_path(iter_item, "repo_name")
      field "repo_org", jmes_path(iter_item, "repo_org")
      field "teams", col_item
      end
  end
end

datasource "ds_invalid_repos" do
    run_script $js_invalid_repos, $ds_org_repos_teams
end

script "js_invalid_repos", type: "javascript" do
    parameters "org_repos_teams"
    result "invalid_org_repos"
    code <<-EOS
var invalid_org_repos = [];
for (var index = 0; index < org_repos_teams.length; index++) {
    admin_count = 0;
    var repo = org_repos_teams[index];
    if( repo.teams.length == 0 ){
      repo.failure_reason = "No Team(s) added on repo";
      invalid_org_repos.push(repo);
    } else {
      for (var t_index = 0; t_index < repo.teams.length; t_index++) {
        var team = repo.teams[t_index];
        if (team.permission == "admin") {
          admin_count++;
        }
      }
      if (admin_count == 0) {
        repo.failure_reason = "No Team(s) have the Admin role on repo";
        repo["fullRepositoryName"] = "["+repo.repo_org+"/"+repo.repo_name+"](https://github.com/"+repo.repo_org+"/"+repo.repo_name+"/settings/collaboration)"
        repo["fullAuditLogName"] = "[Audit Log](https://github.com/organizations/"+repo_org+"/settings/audit-log?utf8=%E2%9C%93&q=repo%3A"+repo.repo_org+"%2F"+repo.repo_name+")"
        invalid_org_repos.push(repo);
      }
    }
}
EOS
end

###############################################################################
# Policy
###############################################################################

policy "pol_invalid_repos" do
  validate $ds_invalid_repos do
    summary_template "GitHub.com Repository Ownership Report"
    check eq(size(data), 0)
    escalate $esc_email
    #### Policy Organization(s): {{  parameters.param_orgs }}
    export do
      resource_level true
      field "fullRepositoryName" do
        label "Organization / Repository"
      end
      field "fullAuditLogName" do
        label "Audit Log Link"
      end
      field "failure_reason" do
        label "Reason for Non-Compliance"
      end
      field "id" do
        label "ID"
      end
    end
  end
end

###############################################################################
# Escalations
###############################################################################

escalation "esc_email" do
  automatic true
  label "Send Email"
  description "Send incident email"
  email $param_email
end

name "GitHub.com Available Seats Report"
rs_pt_ver 20180301
short_description "Gets the number of available seats for a licensed GitHub Org and creates an incident if they are out of the policy range.  See the [README](https://github.com/flexera/policy_templates/tree/master/compliance/github/available_seats) and [docs.flexera.com/flexera/EN/Automation](https://docs.flexera.com/flexera/EN/Automation/AutomationGS.htm) to learn more."
long_description ""
severity "medium"
category "Compliance"
info(
  version: "2.3",
  provider: "GitHub",
  service: "",
  policy_set: ""
)

parameter "param_email" do
  label "Email addresses of the recipients you wish to notify"
  type "list"
end

parameter "param_orgs" do
  type "list"
  label "GitHub.com Organizations to check"
end

parameter "param_min_seats" do
  type "string"
  label "Allowed Minimum Available Seats"
  default "10"
end

parameter "param_max_seats" do
  type "string"
  label "Allowed Maximum Available Seats"
  default "50"
end

credentials "auth_github" do
  schemes "api_key"
  label "GitHub"
  description "Select the Github Credential from the list."
  tags "provider=github"
end

pagination "github_pagination" do
  get_page_marker do
    header "Link"
  end
  set_page_marker do
    uri true
  end
end

datasource "ds_orgs_array" do
  run_script $js_orgs_array, $param_orgs
end

script "js_orgs_array", type: "javascript" do
  parameters "param_orgs"
  result "orgs_array"
  code <<-EOS
var orgs_array = param_orgs;
EOS
end

datasource "ds_github_orgs" do
  iterate $ds_orgs_array
  request do
    auth $auth_github
    pagination $github_pagination
    host "api.github.com"
    # https://developer.github.com/v3/orgs/#get-an-organization
    path join(["/orgs/",iter_item])
  end
  result do
    encoding "json"
    collect jmes_path(response, "[@]") do
      field "id", jmes_path(col_item, "id")
      field "org", jmes_path(col_item, "login")
      field "total_seats", jmes_path(col_item, "plan.seats")
      field "used_seats", jmes_path(col_item, "plan.filled_seats")
      field "available_seats", dec( to_n(jmes_path(col_item, "plan.seats")) , to_n(jmes_path(col_item, "plan.filled_seats")) )
    end
  end
end

policy "policy_available_seats" do
  validate_each $ds_github_orgs do
    summary_template "GitHub Orgs with low available seats"
    check gt(to_n(val(item,"available_seats")),to_n($param_min_seats))
    ### Policy Min Seat Count: {{parameters.param_min_seats}}
    escalate $email_report
    export do
      resource_level true
      field "org" do
        label "Organization Name"
      end
      field "available_seats" do
        label "Available Seats"
      end
      field "used_seats" do
        label "Used Seats"
      end
      field "total_seats" do
        label "Total Seats"
      end
      field "id" do
        label "Id"
      end
    end
  end
  validate_each $ds_github_orgs do
    summary_template "GitHub Orgs with too many available seats"
    check lt(to_n(val(item,"available_seats")),to_n($param_max_seats))
    escalate $email_report
    #### Policy Max Seat Count: {{parameters.param_max_seats}}
    export do
      resource_level true
      field "org" do
        label "Organization Name"
      end
      field "available_seats" do
        label "Available Seats"
      end
      field "used_seats" do
        label "Used Seats"
      end
      field "total_seats" do
        label "Total Seats"
      end
      field "id" do
        label "Id"
      end
    end
  end
end

escalation "email_report" do
  automatic true
  label "Send Email"
  description "Send incident email"
  email $param_email
end

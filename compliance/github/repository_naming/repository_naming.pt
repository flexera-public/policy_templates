name "GitHub.com Unpermitted Repository Names"
rs_pt_ver 20180301
short_description "Gets the names of all repositories under GitHub.com Organization(s) and creates incidents for any that do not match any of the whitelisted regex strings.  See the [README](https://github.com/rightscale/policy_templates/tree/master/compliance/github/repository_naming) and [docs.rightscale.com/policies](http://docs.rightscale.com/policies/) to learn more."
long_description "Version: 1.0"
severity "low"
category "Compliance"

permission "read_creds" do
  actions   "rs_cm.show_sensitive","rs_cm.index_sensitive"
  resources "rs_cm.credentials"
end

parameter "param_email" do
  label "Email addresses of the recipients you wish to notify"
  type "list"
end

parameter "param_whitelist" do
  type "string"
  label "Regex for whitelisted repository name"
  default "^[a-z\\-]+$"
end

parameter "param_orgs" do
  type "list"
  label "Organizations on GitHub.com to scan"
end


auth "auth_github", type: "api_key" do
  location "header"
  field "Authorization"
  type "token"
  key cred("GITHUB_ORG_ADMIN_ACCESS_TOKEN")
end

pagination "github_pagination" do
  get_page_marker do
    header "Link"
  end
  set_page_marker do
    uri true
  end
end

datasource "ds_orgs_array" do
  run_script $js_orgs_array, $param_orgs
end

script "js_orgs_array", type: "javascript" do
  parameters "param_orgs"
  result "orgs_array"
  code <<-EOS
var orgs_array = param_orgs;
EOS
end

datasource "org_repos" do
  iterate $ds_orgs_array
  request do
    auth $auth_github
    pagination $github_pagination
    host "api.github.com"
    path join(["/orgs/",iter_item,"/repos"])
  end
  result do
    encoding "json"
    collect jmes_path(response, "[*]") do
      field "name", jmes_path(col_item, "name")
      field "repo_name", jmes_path(col_item, "name")
      field "repo_org", jmes_path(col_item, "owner.login")
      field "full_name", jmes_path(col_item, "full_name")
      end
  end
end

datasource "invalid_repos" do
    run_script $js_invalid_repos, $org_repos, $param_whitelist
end
  
script "js_invalid_repos", type: "javascript" do
    parameters "org_repos","param_whitelist"
    result "invalid_org_repos"
    code <<-EOS
var invalid_org_repos = [];
for (var index = 0; index < org_repos.length; index++) {
    var repo = org_repos[index];
    // exclude white listed names
    if( !repo.repo_name.match(param_whitelist) ){
        invalid_org_repos.push(repo)
    }
}
EOS
end

policy "invalid_repos" do
  validate $invalid_repos do
    summary_template "GitHub.com Repository Naming Report"
    detail_template <<-EOS
# GitHub.com Repository Naming Report    

| Organization | Repository | Audit Log Link |
| ------------ | ---------- | ----------------- |
{{ range data -}}
  | {{.repo_org}} | [{{.repo_name}}](https://github.com/{{.full_name}}) | [Audit Log](https://github.com/organizations/{{.repo_org}}/settings/audit-log?utf8=%E2%9C%93&q=repo%3A{{.repo_org}}%2F{{.repo_name}}) |
{{ end -}}

#### Policy Organization(s): {{  parameters.param_orgs }}

#### Policy Whitelisted Repo Names: {{  parameters.param_whitelist }}

___
###### Policy Applied in Account: {{ rs_project_name }} (Account ID: {{ rs_project_id }})

EOS
    check eq(size(data), 0)
    escalate $report_repositories
  end
end

escalation "report_repositories" do
    email $param_email
end
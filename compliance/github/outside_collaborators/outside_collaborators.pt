name "GitHub.com Unpermitted Outside Collaborators"
rs_pt_ver 20180301
type "policy"
short_description "Reports on any unpermitted outside collaborators for the specified Github.com organizations. See the [README](https://github.com/flexera-public/policy_templates/tree/master/compliance/github/outside_collaborators) and [docs.flexera.com/flexera/EN/Automation](https://docs.flexera.com/flexera/EN/Automation/AutomationGS.htm) to learn more."
long_description ""
severity "medium"
category "Compliance"
default_frequency "weekly"
info(
  version: "3.0.0",
  provider: "GitHub",
  service: "Git",
  policy_set: ""
)

###############################################################################
# Parameters
###############################################################################

parameter "param_email" do
  type "list"
  category "Policy Settings"
  label "Email Addresses"
  description "A list of email addresses to notify."
  default []
end

parameter "param_orgs" do
  type "list"
  category "Policy Settings"
  label "GitHub.com Organizations"
  description "A list of GitHub.com Organizations to check."
  # No default value, user input required
end

parameter "param_repos_allow_or_deny" do
  type "string"
  category "Filters"
  label "Allow/Deny GitHub Repositories"
  description "Allow or Deny entered Github repositories. See the README for more details."
  allowed_values "Allow", "Deny"
  default "Allow"
end

parameter "param_repos_list" do
  type "list"
  category "Filters"
  label "Allow/Deny GitHub Repositories List"
  description "A list of allowed or denied Github repositories. See the README for more details."
  default []
end

parameter "param_user_allowlist" do
  type "list"
  category "Filters"
  label "User Allow List"
  label "GitHub.com user accounts to exclude from the results."
  default []
end

###############################################################################
# Authentication
###############################################################################

credentials "auth_github" do
  schemes "api_key"
  label "GitHub"
  description "Select the GitHub Credential from the list."
  tags "provider=github"
end

credentials "auth_flexera" do
  schemes "oauth2"
  label "Flexera"
  description "Select Flexera One OAuth2 credentials"
  tags "provider=flexera"
end

###############################################################################
# Pagination
###############################################################################

pagination "pagination_github" do
  get_page_marker do
    header "Link"
  end
  set_page_marker do
    uri true
  end
end

###############################################################################
# Datasources & Scripts
###############################################################################

# Get applied policy metadata for use later
datasource "ds_applied_policy" do
  request do
    auth $auth_flexera
    host rs_governance_host
    path join(["/api/governance/projects/", rs_project_id, "/applied_policies/", policy_id])
    header "Api-Version", "1.0"
  end
end

datasource "ds_org_list" do
  run_script $js_org_list, $param_orgs
end

script "js_org_list", type: "javascript" do
  parameters "param_orgs"
  result "result"
  code "result = param_orgs"
end

datasource "ds_github_orgs" do
  iterate $ds_org_list
  request do
    auth $auth_github
    pagination $pagination_github
    host "api.github.com"
    path join(["/orgs/", iter_item])
    header "X-GitHub-Api-Version", "2022-11-28"
  end
  result do
    encoding "json"
    collect jmes_path(response, "[*]") do
      field "id", jmes_path(col_item, "id")
      field "name", jmes_path(col_item, "login")
      field "company", jmes_path(col_item, "company")
      field "blog", jmes_path(col_item, "blog")
      field "location", jmes_path(col_item, "location")
      field "email", jmes_path(col_item, "email")
      field "html_url", jmes_path(col_item, "html_url")
      field "created_at", jmes_path(col_item, "created_at")
      field "type", jmes_path(col_item, "type")
    end
  end
end

datasource "ds_github_org_repos" do
  iterate $ds_github_orgs
  request do
    auth $auth_github
    pagination $pagination_github
    host "api.github.com"
    path join(["/orgs/", val(iter_item, "name"), "/repos"])
    header "X-GitHub-Api-Version", "2022-11-28"
  end
  result do
    encoding "json"
    collect jmes_path(response, "[*]") do
      field "id", jmes_path(col_item, "id")
      field "name", jmes_path(col_item, "name")
      field "full_name", jmes_path(col_item, "full_name")
      field "html_url", jmes_path(col_item, "html_url")
      field "description", jmes_path(col_item, "description")
      field "default_branch", jmes_path(col_item, "default_branch")
      field "created_at", jmes_path(col_item, "created_at")
      field "org_id", val(iter_item, "id")
      field "org_name", val(iter_item, "name")
      field "org_company", val(iter_item, "company")
      field "org_blog", val(iter_item, "blog")
      field "org_location", val(iter_item, "location")
      field "org_email", val(iter_item, "email")
      field "org_url", val(iter_item, "html_url")
      field "org_created_at", val(iter_item, "created_at")
    end
  end
end

datasource "ds_github_org_repos_filtered" do
  run_script $js_github_org_repos_filtered, $ds_github_org_repos, $param_repos_allow_or_deny, $param_repos_list
end

script "js_github_org_repos_filtered", type: "javascript" do
  parameters "ds_github_org_repos", "param_repos_allow_or_deny", "param_repos_list"
  result "result"
  code <<-EOS
  if (param_repos_list.length > 0) {
    result = _.filter(ds_github_org_repos, function(repo) {
      include_repo = _.contains(param_repos_list, repo['name'])
      if (param_regions_allow_or_deny == "Deny") { include_repo = !include_repo }
      return include_repo
    })
  } else {
    result = ds_github_org_repos
  }
EOS
end

datasource "ds_github_org_collaborators" do
  iterate $ds_github_org_repos_filtered
  request do
    auth $auth_github
    pagination $pagination_github
    host "api.github.com"
    path join(["/repos/", val(iter_item, "org_name"), "/", val(iter_item, "name"), "/collaborators"])
    query "affiliation", "outside"
    header "X-GitHub-Api-Version", "2022-11-28"
  end
  result do
    encoding "json"
    collect jmes_path(response, "[*]") do
      field "id", jmes_path(col_item, "id")
      field "name", jmes_path(col_item, "login")
      field "html_url", jmes_path(col_item, "html_url")
      field "type", jmes_path(col_item, "type")
      field "site_admin", jmes_path(col_item, "site_admin")
      field "permissions", jmes_path(col_item, "permissions")
      field "role_name", jmes_path(col_item, "role_name")
      field "repo_id", val(iter_item, "id")
      field "repo_name", val(iter_item, "name")
      field "repo_full_name", val(iter_item, "full_name")
      field "repo_url", val(iter_item, "html_url")
      field "repo_description", val(iter_item, "description")
      field "repo_default_branch", val(iter_item, "default_branch")
      field "repo_created_at", val(iter_item, "created_at")
      field "org_id", val(iter_item, "id")
      field "org_name", val(iter_item, "org_name")
      field "org_company", val(iter_item, "org_company")
      field "org_blog", val(iter_item, "org_blog")
      field "org_location", val(iter_item, "org_location")
      field "org_email", val(iter_item, "org_email")
      field "org_url", val(iter_item, "org_url")
      field "org_created_at", val(iter_item, "org_created_at")
    end
  end
end

datasource "ds_invalid_collaborators" do
  run_script $js_invalid_collaborators, $ds_github_org_collaborators, $ds_applied_policy, $param_user_allowlist
end

script "js_invalid_collaborators", type: "javascript" do
  parameters "ds_github_org_collaborators", "ds_applied_policy", "param_user_allowlist"
  result "result"
  code <<-EOS
  users_cleaned = _.map(ds_github_org_collaborators, function(user) {
    org_name = encodeURI(user["org_name"])
    q_param = encodeURI("repo:" + user["org_name"] + "/" + user["repo_name"])
    audit_log_url = "https://github.com/organizations/" + org_name + "/settings/audit-log?utf8=%E2%9C%93&q=" + q_param

    new_user = user
    new_user["policy_name"] = ds_applied_policy["name"]
    new_user["audit_log"] = "Audit Log||" + audit_log_url

    return new_user
  })

  result = _.reject(users_cleaned, function(user) {
    return _.contains(param_user_allowlist, user["name"])
  })
EOS
end

###############################################################################
# Policy
###############################################################################

policy "pol_outside_collaborator" do
  validate_each $ds_invalid_collaborators do
    summary_template "{{ with index data 0 }}{{ .policy_name }}{{ end }}: {{ len data }} GitHub Unpermitted Outside Collaborators Found"
    check eq(val(item, "id"), "")
    escalate $esc_email
    export do
      resource_level true
      field "id" do
        label "User ID"
      end
      field "name" do
        label "User Name"
      end
      field "role_name" do
        label "User Role"
      end
      field "repo_name" do
        label "Repository"
      end
      field "org_name" do
        label "Organization"
      end
      field "audit_log" do
        label "Audit Log"
        format "link-external"
      end
    end
  end
end

###############################################################################
# Escalations
###############################################################################

escalation "esc_email" do
  automatic true
  label "Send Email"
  description "Send incident email"
  email $param_email
end

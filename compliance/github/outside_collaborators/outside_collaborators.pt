name "GitHub.com Unpermitted Outside Collaborators"
rs_pt_ver 20180301
type "policy"
short_description "Gets all the Outside Collaborators (User that have been granted access to a repository, but are not a Member of the repository owner's Organization) under GitHub.com Organization(s) and creates an incident for each that are not included in the specified username whitelist.  See the [README](https://github.com/flexera-public/policy_templates/tree/master/compliance/github/outside_collaborators) and [docs.flexera.com/flexera/EN/Automation](https://docs.flexera.com/flexera/EN/Automation/AutomationGS.htm) to learn more."
long_description ""
severity "medium"
category "Compliance"
default_frequency "weekly"
info(
  version: "3.0.0",
  provider: "GitHub",
  service: "Git",
  policy_set: ""
)

###############################################################################
# Parameters
###############################################################################

parameter "param_email" do
  type "list"
  category "Policy Settings"
  label "Email Addresses"
  description "A list of email addresses to notify."
  default []
end

parameter "param_orgs" do
  type "list"
  category "Policy Settings"
  label "GitHub.com Organizations"
  description "A list of GitHub.com Organizations to check."
end

parameter "param_user_allowlist" do
  type "list"
  category "Filters"
  label "User Allow List"
  label "GitHub.com user accounts to exclude from the results."
  default []
end

###############################################################################
# Authentication
###############################################################################

credentials "auth_github" do
  schemes "api_key"
  label "GitHub"
  description "Select the GitHub Credential from the list."
  tags "provider=github"
end

credentials "auth_flexera" do
  schemes "oauth2"
  label "Flexera"
  description "Select Flexera One OAuth2 credentials"
  tags "provider=flexera"
end

###############################################################################
# Pagination
###############################################################################

pagination "pagination_github" do
  get_page_marker do
    header "Link"
  end
  set_page_marker do
    uri true
  end
end

###############################################################################
# Datasources & Scripts
###############################################################################

# Get applied policy metadata for use later
datasource "ds_applied_policy" do
  request do
    auth $auth_flexera
    host rs_governance_host
    path join(["/api/governance/projects/", rs_project_id, "/applied_policies/", policy_id])
    header "Api-Version", "1.0"
  end
end

datasource "ds_orgs_array" do
  run_script $js_orgs_array, $param_orgs
end

script "js_orgs_array", type: "javascript" do
  parameters "param_orgs"
  result "orgs_array"
  code <<-EOS
var orgs_array = param_orgs;
EOS
end

datasource "ds_github_org_repos" do
  iterate $ds_orgs_array
  request do
    auth $auth_github
    pagination $pagination_github
    host "api.github.com"
    path join(["/orgs/", iter_item, "/repos"])
  end
  result do
    encoding "json"
    collect jmes_path(response, "[*]") do
      field "repo_org", jmes_path(col_item, "owner.login")
      field "repo_name", jmes_path(col_item, "name")
    end
  end
end

datasource "ds_github_org_collaborators" do
  iterate $ds_github_org_repos
  request do
      auth $auth_github
      pagination $pagination_github
      host "api.github.com"
      path join(["/repos/", val(iter_item, "repo_org"), "/", val(iter_item, "repo_name"), "/collaborators"])
      query "affiliation", "outside"
  end
  result do
      encoding "json"
      collect jmes_path(response, "[*]") do
        field "id", jmes_path(col_item, "id")
        field "username", jmes_path(col_item, "login")
        field "repo_org", val(iter_item, "repo_org")
        field "repo_name", val(iter_item, "repo_name")
      end
  end
end

datasource "ds_invalid_collab" do
  run_script $js_invalid_collab, $ds_github_org_collaborators, $param_user_allowlist
end

script "js_invalid_collab", type: "javascript" do
    parameters "collaborators","param_user_allowlist"
    result "invalid_collab"
    code <<-EOS
var invalid_collab=[];
for (var index = 0; index < collaborators.length; index++) {
    var user = collaborators[index];
    // exclude white listed names
    if( !_.contains(param_user_allowlist, user.username) ){
        user["fullRepositoryName"] = "["+user.repo_org+"/"+user.repo_name+"](https://github.com/"+user.repo_org+"/"+user.repo_name+"/settings/collaboration)";
        user["fullAuditLogLink"] = "[Audittt Log](https://github.com/organizations/"+user.repo_org+"/settings/audit-log?utf8=%E2%9C%93&q=repo%3A"+user.repo_org+"%2F"+user.repo_name+")"
        invalid_collab.push(user)
    }
}
EOS
end

###############################################################################
# Policy
###############################################################################

policy "pol_outside_collaborator" do
  validate_each $ds_invalid_collab do
    summary_template "GitHub.com Outside Collaborator Report"
    check lt(size($ds_invalid_collab), 0)
    escalate $esc_email
    export do
      resource_level true
      field "username" do
        label "User"
      end
      field "fullRepositoryName" do
        label "Organization / Repository"
      end
      field "fullAuditLogLink" do
        label "Audit Log Link"
      end
      field "id" do
        label "ID"
      end
    end
  end
end

###############################################################################
# Escalations
###############################################################################

escalation "esc_email" do
  automatic true
  label "Send Email"
  description "Send incident email"
  email $param_email
end

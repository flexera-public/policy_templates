name "GitHub.com Unpermitted Outside Collaborators"
rs_pt_ver 20180301
short_description "Gets all the Outside Collaborators (User that have been granted access to a repository, but are not a Member of the repository owner's Organization) under GitHub.com Organization(s) and creates an incident for each that are not included in the specified username whitelist.  See the [README](https://github.com/rightscale/policy_templates/tree/master/compliance/github/outside_collaborators) and [docs.rightscale.com/policies](http://docs.rightscale.com/policies/) to learn more."
long_description "Version: 1.1"
severity "medium"
category "Compliance"
tenancy "single"

permission "read_creds" do
  actions   "rs_cm.show_sensitive","rs_cm.index_sensitive"
  resources "rs_cm.credentials"
end

parameter "param_email" do
  label "Email addresses of the recipients you wish to notify"
  type "list"
end

parameter "param_orgs" do
  type "list"
  label "GitHub.com Organizations to check"
end

parameter "param_whitelist" do
  type "list"
  label "GitHub.com user accounts that are whitelisted to be an outside collaborator"
end

auth "auth_github", type: "api_key" do
  location "header"
  field "Authorization"
  type "token"
  key cred("GITHUB_ORG_ADMIN_ACCESS_TOKEN")
end

pagination "github_pagination" do
  get_page_marker do
    header "Link"
  end
  set_page_marker do
    uri true
  end
end

datasource "ds_orgs_array" do
  run_script $js_orgs_array, $param_orgs
end

script "js_orgs_array", type: "javascript" do
  parameters "param_orgs"
  result "orgs_array"
  code <<-EOS
var orgs_array = param_orgs;
EOS
end

datasource "ds_github_org_repos" do
  iterate $ds_orgs_array
  request do
    auth $auth_github
    pagination $github_pagination
    host "api.github.com"
    path join(["/orgs/",iter_item,"/repos"])
  end
  result do
    encoding "json"
    collect jmes_path(response, "[*]") do
      field "repo_org", jmes_path(col_item, "owner.login")
      field "repo_name", jmes_path(col_item, "name")
    end
  end
end

datasource "ds_github_org_collaborators" do
  iterate $ds_github_org_repos
  request do
      auth $auth_github
      pagination $github_pagination
      host "api.github.com"
      path join(["/repos/",val(iter_item,"repo_org"),"/",val(iter_item,"repo_name"),"/collaborators"])
      query "affiliation", "outside"
  end
  result do
      encoding "json"
      collect jmes_path(response, "[*]") do
        field "username", jmes_path(col_item, "login")
        field "repo_org", val(iter_item, "repo_org")
        field "repo_name", val(iter_item, "repo_name")
      end
  end
end

datasource "ds_invalid_collab" do
  run_script $js_invalid_collab, $ds_github_org_collaborators, $param_whitelist
end

script "js_invalid_collab", type: "javascript" do
    parameters "collaborators","param_whitelist"
    result "invalid_collab"
    code <<-EOS
var invalid_collab=[];
for (var index = 0; index < collaborators.length; index++) {
    var user = collaborators[index];
    // exclude white listed names
    if( !_.contains(param_whitelist, user.username) ){
        invalid_collab.push(user)
    }
}
EOS
end

policy "policy_outside_collaborator" do
  validate_each $ds_invalid_collab do
    summary_template "GitHub.com Outside Collaborator Report"
    detail_template <<-EOS
# GitHub.com Outside Collaborator Report

The following user accounts have been granted access to repositories, are classified as outside collaborators [not a member of the Org], and do not match the usernames that have been whitelisted by this policy.

| User | Organization/Repository | Audit Log Link |
| ---- | ----------------------- | -------------- |
{{ range data -}}
  | {{.username}} | [{{.repo_org}}/{{.repo_name}}](https://github.com/{{.repo_org}}/{{.repo_name}}/settings/collaboration) | [Audit Log](https://github.com/organizations/{{.repo_org}}/settings/audit-log?utf8=%E2%9C%93&q=repo%3A{{.repo_org}}%2F{{.repo_name}}) |
{{ end -}}

#### Policy Organization(s): {{  parameters.param_orgs }}

#### Policy Whitelisted Users: {{  parameters.param_whitelist }}

___
###### Policy Applied in Account: {{ rs_project_name }} (Account ID: {{ rs_project_id }})

EOS
    check lt(size($ds_invalid_collab),0)
    escalate $email_report
  end
end

escalation "email_report" do
    email $param_email
end
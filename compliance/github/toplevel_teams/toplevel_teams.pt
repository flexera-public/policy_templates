name "GitHub.com Unpermitted Top-Level Teams"
rs_pt_ver 20180301
type "policy"
short_description "Gets the top-level / parent Teams for a GitHub.com Org and creates an incident if any do not match the whitelisted values.  See the [README](https://github.com/flexera-public/policy_templates/tree/master/compliance/github/toplevel_teams) and [docs.flexera.com/flexera/EN/Automation](https://docs.flexera.com/flexera/EN/Automation/AutomationGS.htm) to learn more."
long_description ""
severity "low"
category "Compliance"
default_frequency "weekly"
info(
  version: "3.0.0",
  provider: "GitHub",
  service: "Git",
  policy_set: ""
)

###############################################################################
# Parameters
###############################################################################

parameter "param_email" do
  type "list"
  category "Policy Settings"
  label "Email Addresses"
  description "A list of email addresses to notify."
  default []
end

parameter "param_orgs" do
  type "list"
  category "Policy Settings"
  label "GitHub.com Organizations"
  description "A list of GitHub.com Organizations to check."
end

parameter "param_team_allowlist" do
  type "list"
  label "Team names that are whitelisted to be at the top-level"
end

###############################################################################
# Authentication
###############################################################################

credentials "auth_github" do
  schemes "api_key"
  label "GitHub"
  description "Select the Github Credential from the list."
  tags "provider=github"
end

credentials "auth_flexera" do
  schemes "oauth2"
  label "Flexera"
  description "Select Flexera One OAuth2 credentials"
  tags "provider=flexera"
end

###############################################################################
# Pagination
###############################################################################

pagination "pagination_github" do
  get_page_marker do
    header "Link"
  end
  set_page_marker do
    uri true
  end
end

###############################################################################
# Datasources & Scripts
###############################################################################

# Get applied policy metadata for use later
datasource "ds_applied_policy" do
  request do
    auth $auth_flexera
    host rs_governance_host
    path join(["/api/governance/projects/", rs_project_id, "/applied_policies/", policy_id])
    header "Api-Version", "1.0"
  end
end

datasource "ds_orgs_array" do
  run_script $js_orgs_array, $param_orgs
end

script "js_orgs_array", type: "javascript" do
  parameters "param_orgs"
  result "orgs_array"
  code <<-EOS
var orgs_array = param_orgs;
EOS
end

datasource "ds_github_org_teams" do
  iterate $ds_orgs_array
  request do
    auth $auth_github
    pagination $pagination_github
    host "api.github.com"
    path join(["/orgs/",iter_item,"/teams"])
    header "Accept", "application/vnd.github.hellcat-preview+json"
  end
  result do
    encoding "json"
    collect jmes_path(response, "[*]") do
      field "id", jmes_path(col_item, "id")
      field "members_url", jmes_path(col_item, "members_url")
      field "name", jmes_path(col_item, "name")
      field "slug", jmes_path(col_item, "slug")
      field "description", jmes_path(col_item, "description")
      field "privacy", jmes_path(col_item, "privacy")
      field "parent", jmes_path(col_item, "parent")
      field "org", iter_item
    end
  end
end


datasource "ds_invalid_teams" do
  run_script $js_invalid_teams, $ds_github_org_teams, $param_team_allowlist
end

script "js_invalid_teams", type: "javascript" do
    parameters "teams","param_team_allowlist"
    result "invalid_teams"
    code <<-EOS
var invalid_teams=[];
for (var index = 0; index < teams.length; index++) {
    var team = teams[index];
    // top-level teams only
    if( typeof team.parent == "undefined" ) {
        // exclude white listed names
        if( !_.contains(param_team_allowlist, team.name) ){
            team["teamName"] = "["+team.name+"](https://github.com/orgs/"+"team.org"+"/"+team.slug+"/members)";
            invalid_teams.push(team);
        }
    }
}
EOS
end

###############################################################################
# Policy
###############################################################################

policy "pol_toplevel_teams" do
  validate_each $ds_invalid_teams do
    summary_template "GitHub.com Top-Level Teams Report"
    check lt(size($ds_invalid_teams),0)
    escalate $esc_email
    #### Policy Organization(s): {{  parameters.param_orgs }}
    #### Policy Whitelisted Teams: {{  parameters.param_team_allowlist }}
    export do
      resource_level true
      field "org" do
        label "Organization"
      end
      field "teamName" do
        label "Team Name"
      end
      field "description" do
        label "Team Description"
      end
      field "privacy" do
        label "Team Privacy"
      end
      field "id" do
        label "ID"
      end
    end
  end
end

###############################################################################
# Escalations
###############################################################################

escalation "esc_email" do
  automatic true
  label "Send Email"
  description "Send incident email"
  email $param_email
end

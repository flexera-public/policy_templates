name "GitHub.com Repository Branches without Protection"
rs_pt_ver 20180301
short_description "Gets the repositories + branches under a GitHub.com Organization and creates incidents for any that do not have protection enabled.  See the [README](https://github.com/flexera/policy_templates/tree/master/compliance/github/repository_branch_protection) and [docs.rightscale.com/policies](https://docs.rightscale.com/policies/) to learn more."
long_description ""
severity "medium"
category "Compliance"
info(
  version: "2.1",
  provider: "GitHub",
  service: "",
  policy_set: ""
)

parameter "param_email" do
  type "list"
  label "Email addresses of the recipients you wish to notify"
end

parameter "param_orgs" do
  type "list"
  label "Organizations on GitHub.com to scan"
end

parameter "param_branches" do
  type "list"
  label "Git branches that should be protected"
  default ["master"]
end

parameter "param_whitelist" do
  type "list"
  label "Git org/repo(s) that are whitelisted from this policy"
end

parameter "param_enforce_admins" do
  type "string"
  label "Protection Option: Enforce all configured restrictions for administrators. Set to true to enforce required status checks for repository administrators. Set to null to disable."
  default "false"
  allowed_values ["false","true"]
end

parameter "param_required_pull_request_reviews" do
  type "string"
  label "Protection Option: Require at least one approving review on a pull request, before merging. Set to null to disable."
  default "1"
  allowed_values ["1","2","3","4","5","null"]
end

parameter "param_automatic_action" do
  type "list"
  label "Automatic Actions"
  description "When this value is set, this policy will automatically take the selected action(s)"
  allowed_values ["Protect Branches"]
end

credentials "auth_github" do
  schemes "api_key"
  label "GitHub"
  description "Select the Github Credential from the list."
  tags "provider=github"
end

pagination "github_pagination" do
  get_page_marker do
    header "Link"
  end
  set_page_marker do
    uri true
  end
end

datasource "ds_orgs_array" do
  run_script $js_orgs_array, $param_orgs
end
script "js_orgs_array", type: "javascript" do
  parameters "param_orgs"
  result "orgs_array"
  code <<-EOS
var orgs_array = param_orgs;
EOS
end

datasource "ds_orgs_repos" do
  iterate $ds_orgs_array
  request do
    auth $auth_github
    pagination $github_pagination
    host "api.github.com"
    path join(["/orgs/",iter_item,"/repos"])
  end
  result do
    encoding "json"
    collect jmes_path(response, "[*]") do
      field "id", jmes_path(col_item, "id")
      field "name", jmes_path(col_item, "name")
      field "full_name", jmes_path(col_item, "full_name")
      field "org", jmes_path(col_item, "owner.login")
    end
  end
end

datasource "ds_repos_branches" do
  iterate $ds_orgs_repos
  request do
    auth $auth_github
    pagination $github_pagination
    host "api.github.com"
    path join(["/repos/",val(iter_item,"org"),"/",val(iter_item,"name"),"/branches"])
  end
  result do
    encoding "json"
    collect jmes_path(response, "[*]") do
      field "id", jmes_path(iter_item, "id")
      field "repo_name", jmes_path(iter_item, "name")
      field "repo_org", jmes_path(iter_item, "org")
      field "branch_name", jmes_path(col_item, "name")
      field "branch_protected", jmes_path(col_item, "protected")
      field "branch_protection", jmes_path(col_item, "protection")
    end
  end
end

datasource "ds_invalid_repo_branches" do
    run_script $js_invalid_repo_branches, $ds_repos_branches, $param_branches, $param_whitelist
end

script "js_invalid_repo_branches", type: "javascript" do
    parameters "repos_branches", "param_branches", "param_whitelist"
    result "invalid_repo_branches"
    code <<-EOS
var invalid_repo_branches = [];
for (var index = 0; index < repos_branches.length; index++) {
  var branch = repos_branches[index];
  // check if branch is in param_branches and if its protected
  if( _.contains(param_branches, branch.branch_name) && !_.contains(param_whitelist, branch.repo_org+"/"+branch.repo_name) && branch.branch_protected != true){
    branch["fullOrganizationName"] = "["+branch.repo_org+"/"+branch.repo_name+"](https://github.com/"+branch.repo_org+"/"+branch.repo_name+"/settings/branches)"
    invalid_repo_branches.push(branch);
  }
}
EOS
end

policy "invalid_repos" do
  validate $ds_invalid_repo_branches do
    summary_template "GitHub.com Unprotected Branches Report"
    check eq(size(data), 0)
    escalate $email_report
    escalate $github_repos_branch_add_protection
    #### Policy Organization(s): {{  parameters.param_orgs }}
    #### Policy Branches: {{  parameters.param_branches }}
    export do
      resource_level true
      field "fullOrganizationName" do
        label "Organization / Repository"
      end
      field "branch_name" do
        label "Unprotected Branch"
      end
      field "id" do
        label "Id"
      end
      field "repo_org" do
        label "Repository Organization"
      end
      field "repo_name" do
        label "Repository Name"
      end
    end
  end
end

escalation "email_report" do
  automatic true
  label "Send Mail"
  description "Sends incidents email"
  email $param_email
end

escalation "github_repos_branch_add_protection" do
  automatic contains($param_automatic_action, "Protect Branches")
  label "Add Branch Protection"
  description "All selected branches will be updated with protection rules"
  run "github_repos_branch_add_protection", data, $param_enforce_admins, $param_required_pull_request_reviews
end

define github_repos_branch_add_protection($data, $param_enforce_admins, $param_required_pull_request_reviews) do
  foreach $item in $data do
    task_label( join(["Updating branch protection for ",$item['repo_org'],"/",$item['repo_name'],":",$item['branch_name']]) )
    call github_repo_branch_protection_update($item['repo_org'],$item['repo_name'],$item['branch_name'],$param_enforce_admins, $param_required_pull_request_reviews) retrieve $github_repo_branch_protection_update_response
  end
end

define github_repo_branch_protection_update($owner, $repo, $branch, $enforce_admins, $required_pull_request_reviews) return $response do 
  $enforce_admins = to_b($enforce_admins)
  if $required_pull_request_reviews == "null"
    $required_pull_request_reviews = null
  else
    $required_pull_request_reviews = to_n($required_pull_request_reviews)
  end

  $attempt_count = 0
  $response = { "code": 0 }
  while $response["code"] != 200 && $attempt_count < 5 do
    sleep($attempt_count * 1)
    task_label("Attempting update branch protection for "+ join(["/repos/",$owner,"/",$repo,"/branches/",$branch,"/protection"]))
    $response = http_request(
      auth: $$auth_github,
      https: true,
      verb: "put",
      host: "api.github.com",
      href: join(["/repos/",$owner,"/",$repo,"/branches/",$branch,"/protection"]),
      headers: {
        "Accept": "application/vnd.github.luke-cage-preview+json"
      },
      body: {
        "required_status_checks":         null,
        "enforce_admins":                 $enforce_admins,
        "required_pull_request_reviews":  {
          "dismissal_restrictions":           {},
          "dismiss_stale_reviews":            false,
          "require_code_owner_reviews":       false,
          "required_approving_review_count":  $required_pull_request_reviews
        },
        "restrictions":                   null
      }
    )
    $attempt_count = $attempt_count +1
  end
  if $response["code"] == 200
    task_label("Completed update branch protection for "+ join(["/repos/",$owner,"/",$repo,"/branches/",$branch,"/protection"]))
  else
    raise "unexpected response code trying update branch protection for "+join(["/repos/",$owner,"/",$repo,"/branches/",$branch,"/protection"])+": "+to_json($response)
  end
end

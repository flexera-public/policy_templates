name "GitHub.com Repository Branches without Protection"
rs_pt_ver 20180301
short_description "Gets the repositories under a list of GitHub.com Organizations and creates incidents for any that do not have protection enabled for selected branches.  See the [README](https://github.com/flexera/policy_templates/tree/master/compliance/github/repository_branch_protection) and [docs.flexera.com/flexera/EN/Automation](https://docs.flexera.com/flexera/EN/Automation/AutomationGS.htm) to learn more."
long_description ""
severity "medium"
category "Compliance"
info(
  version: "2.4",
  provider: "GitHub",
  service: "",
  policy_set: ""
)

parameter "param_email" do
  type "list"
  label "Email addresses of the recipients you wish to notify"
end

parameter "param_orgs" do
  type "list"
  label "Organizations on GitHub.com to scan"
end

parameter "param_branches" do
  type "list"
  label "Git branches that should be protected"
  default ["master"]
end

parameter "param_include_default_branch" do
  type "string"
  label "Protect default branch"
  default "true"
  allowed_values ["false","true"]
end

parameter "param_whitelist" do
  type "list"
  label "Git org/repo(s) that are whitelisted from this policy"
end

parameter "param_enforce_admins" do
  type "string"
  label "Protection Option: Enforce all configured restrictions for administrators. Set to true to enforce required status checks for repository administrators. Set to null to disable."
  default "false"
  allowed_values ["false","true"]
end

parameter "param_required_pull_request_reviews" do
  type "string"
  label "Protection Option: Require at least one approving review on a pull request, before merging. Set to null to disable."
  default "1"
  allowed_values ["1","2","3","4","5","null"]
end

parameter "param_automatic_action" do
  type "list"
  label "Automatic Actions"
  description "When this value is set, this policy will automatically take the selected action(s)"
  allowed_values ["Protect Branches"]
end

credentials "auth_github" do
  schemes "api_key"
  label "GitHub"
  description "Select the Github Credential from the list."
  tags "provider=github"
end

pagination "github_pagination" do
  get_page_marker do
    body_path jq(response, 'if .data.search.pageInfo.hasNextPage then "{ \"currentCursor\" :\"" + .data.search.pageInfo.endCursor + "\" }" else null end')
  end
  set_page_marker do
    body_field "variables"
  end
end

datasource "ds_github_query" do
  run_script $js_github_query, $param_orgs, $param_branches
end

script "js_github_query", type: "javascript" do
  parameters "orgNames", "branches"
  result "result"
  code <<-EOS
  var query = 'query getRepositories($currentCursor: String) { \
    search(query: "%orgNames% archived:false", type: REPOSITORY, first: 100, after: $currentCursor) { \
      edges { \
        node { \
          ... on Repository { \
            id \
            name \
            nameWithOwner \
            owner { \
              login \
            } \
            defaultBranchRef { \
              ...brancheData \
            } \
            %branches% \
          } \
        } \
      } \
      pageInfo { \
        endCursor \
        hasNextPage \
      } \
    } \
    rateLimit { \
      limit \
      cost \
      remaining \
      resetAt \
    } \
  } \
  fragment brancheData on Ref { \
    name \
    branchProtectionRule { \
      pattern \
      isAdminEnforced \
      requiredApprovingReviewCount \
      dismissesStaleReviews \
      requiresCodeOwnerReviews \
    } \
  }';

  var org_names_string = "";
  _.each(orgNames, function(org) {
    org_names_string = org_names_string + " org:" + org;
  });

  var branches_string = " ";

  var branch_template = ' %branch%: refs(first: 100, refPrefix: "refs/heads/", query: "%branch%") { nodes { ...brancheData } } ';

  _.each(branches, function(branch) {
    branches_string = branches_string + branch_template.replace("%branch%", branch).replace("%branch%", branch);
  });

  var result = [query.replace("%orgNames%", org_names_string).replace("%branches%", branches_string)]

EOS
end

datasource "ds_github_repos" do
  iterate $ds_github_query # always one item
  request do
    auth $auth_github
    verb "POST"
    pagination $github_pagination
    host "api.github.com"
    path "graphql"
    body_field "query", iter_item
  end
  result do
    encoding "json"
    collect jmes_path(response, "data.search.edges[*]") do
      field "id", jmes_path(col_item, "node.id")
      field "name", jmes_path(col_item, "node.name")
      field "full_name", jmes_path(col_item, "node.nameWithOwner")
      field "default_branch", jmes_path(col_item, "node.defaultBranchRef.name")
      field "branch_protection_rule", jmes_path(col_item, "node.defaultBranchRef.branchProtectionRule")
      field "owner", jmes_path(col_item, "node.owner.login")
      field "full_data", jmes_path(col_item, "node")
    end
  end
end

datasource "ds_invalid_repo_branches" do
    run_script $js_invalid_repo_branches, $ds_github_repos, $param_whitelist, $param_branches, $param_include_default_branch
end

script "js_invalid_repo_branches", type: "javascript" do
    parameters "repos", "param_whitelist", "branches", "include_default_branch"
    result "invalid_repos_branches"
    code <<-EOS
var invalid_repos_branches = [];

_.each(repos, function(repo) {
  if(!_.contains(param_whitelist, repo.full_name)) {
    if (include_default_branch == "true" && repo.default_branch != null && repo.branch_protection_rule == null) {
      var i_repo = {};
      i_repo.id = repo.id;
      i_repo.full_name = repo.full_name;
      i_repo.branch_name = repo.default_branch;
      i_repo.repo_org = repo.owner;
      i_repo.repo_name = repo.name;

      invalid_repos_branches.push(i_repo);
    }

    _.each(branches, function(branch) {
      if(branch != repo.default_branch) {
        _.each(repo.full_data[branch].nodes, function(item) {
          if(item.name == branch && item.branchProtectionRule == null) {
            var i_repo = {};
            i_repo.id = repo.id;
            i_repo.full_name = repo.full_name;
            i_repo.branch_name = branch;
            i_repo.repo_org = repo.owner;
            i_repo.repo_name = repo.name;

            invalid_repos_branches.push(i_repo);
          }
        });
      }
    });
  }
});

EOS
end

policy "invalid_repos" do
  validate $ds_invalid_repo_branches do
    summary_template "GitHub.com Unprotected Branches Report"
    check eq(size(data), 0)
    escalate $email_report
    escalate $github_repos_branch_add_protection
    #### Policy Organization(s): {{  parameters.param_orgs }}
    #### Policy Branches: {{  parameters.param_branches }}
    export do
      resource_level true
      field "full_name" do
        label "Organization / Repository"
      end
      field "branch_name" do
        label "Unprotected Branch"
      end
      field "id" do
        label "Id"
      end
      field "repo_org" do
        label "Repository Organization"
      end
      field "repo_name" do
        label "Repository Name"
      end
    end
  end
end

escalation "email_report" do
  automatic true
  label "Send Email"
  description "Send incident email"
  email $param_email
end

escalation "github_repos_branch_add_protection" do
  automatic contains($param_automatic_action, "Protect Branches")
  label "Add Branch Protection"
  description "All selected branches will be updated with protection rules"
  run "github_repos_branch_add_protection", data, $param_enforce_admins, $param_required_pull_request_reviews
end

define github_repos_branch_add_protection($data, $param_enforce_admins, $param_required_pull_request_reviews) do
  foreach $item in $data do
    task_label( join(["Updating branch protection for ",$item['repo_org'],"/",$item['repo_name'],":",$item['default_branch']]) )
    call github_repo_branch_protection_update($item['repo_org'],$item['repo_name'],$item['default_branch'],$param_enforce_admins, $param_required_pull_request_reviews) retrieve $github_repo_branch_protection_update_response
  end
end

define github_repo_branch_protection_update($owner, $repo, $branch, $enforce_admins, $required_pull_request_reviews) return $response do
  $enforce_admins = to_b($enforce_admins)
  if $required_pull_request_reviews == "null"
    $required_pull_request_reviews = null
  else
    $required_pull_request_reviews = to_n($required_pull_request_reviews)
  end

  $attempt_count = 0
  $response = { "code": 0 }
  while $response["code"] != 200 && $attempt_count < 5 do
    sleep($attempt_count * 1)
    task_label("Attempting update branch protection for "+ join(["/repos/",$owner,"/",$repo,"/branches/",$branch,"/protection"]))
    $response = http_request(
      auth: $$auth_github,
      https: true,
      verb: "put",
      host: "api.github.com",
      href: join(["/repos/",$owner,"/",$repo,"/branches/",$branch,"/protection"]),
      headers: {
        "Accept": "application/vnd.github.luke-cage-preview+json"
      },
      body: {
        "required_status_checks":         null,
        "enforce_admins":                 $enforce_admins,
        "required_pull_request_reviews":  {
          "dismissal_restrictions":           {},
          "dismiss_stale_reviews":            false,
          "require_code_owner_reviews":       false,
          "required_approving_review_count":  $required_pull_request_reviews
        },
        "restrictions":                   null
      }
    )
    $attempt_count = $attempt_count +1
  end
  if $response["code"] == 200
    task_label("Completed update branch protection for "+ join(["/repos/",$owner,"/",$repo,"/branches/",$branch,"/protection"]))
  else
    raise "unexpected response code trying update branch protection for "+join(["/repos/",$owner,"/",$repo,"/branches/",$branch,"/protection"])+": "+to_json($response)
  end
end

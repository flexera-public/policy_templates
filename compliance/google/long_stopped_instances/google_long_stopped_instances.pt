name "Google Long-stopped instances"
rs_pt_ver 20180301
type "policy"
short_description "Report on any google instances that have been stopped for a long time with the option to Terminate them. \n See the [README](https://github.com/rightscale/policy_templates/tree/master/compliance/google/long_stopped_instances) and [docs.rightscale.com/policies](http://docs.rightscale.com/policies/) to learn more."
long_description "Version: 1.0"
category "Compliance"
severity "low"

###############################################################################
# Permissions
###############################################################################

permission "perm_read_creds" do
  actions   "rs_cm.show_sensitive","rs_cm.index_sensitive"
  resources "rs_cm.credentials"
end

###############################################################################
# Parameters
###############################################################################

parameter "param_email" do
  type "list"
  label "Email List"
  description "Email addresses of the recipients you wish to notify"
end
parameter "param_exclude_tags" do
  type "list"
  label "Tags to ignore"
  description "List of tags(Key or Key, value mentioned in object metadata.) that will exclude objects from being evaluated by this policy. Multiple tags are evaluated as an 'OR' condition. Tag keys or key/value pairs can be listed. Example: 'test,env=dev'"
end
parameter "param_stoped_days" do
  type "number"
  label "Stopped days"
  description "Number of days an instance is stopped before it is added to the report"
end
parameter "param_google_project" do
  type "string"
  label "Google Cloud Project"
  description "Google Cloud Project"
  allowed_pattern /^[0-9a-z:\.-]+$/
end

###############################################################################
# Authentication
###############################################################################

auth "auth_google", type: "oauth2" do
  token_url "https://www.googleapis.com/oauth2/v4/token"
  grant type: "jwt_bearer" do
    iss cred("GCE_PLUGIN_ACCOUNT")
    aud "https://www.googleapis.com/oauth2/v4/token"
    additional_claims do {
      "scope" => "https://www.googleapis.com/auth/monitoring.write https://www.googleapis.com/auth/cloud-platform https://www.googleapis.com/auth/monitoring.read https://www.googleapis.com/auth/monitoring https://www.googleapis.com/auth/compute https://www.googleapis.com/auth/compute.readonly"
    } end
    signing_key cred("GCE_PLUGIN_PRIVATE_KEY")
  end
end

#https://cloud.google.com/compute/docs/reference/rest/v1/zones/list
datasource "ds_zone" do
  request do
    auth $auth_google
    host "compute.googleapis.com"
    path join(["/compute/v1/projects/",$param_google_project,"/zones/"])
  end
  result do
    encoding "json"
      collect jmes_path(response, "items[*]") do
      field "zone", jmes_path(col_item, "name")
    end
  end
end

#https://cloud.google.com/compute/docs/reference/rest/v1/instances/list
datasource "ds_stoped_instances" do
  iterate $ds_zone
  request do
    auth $auth_google
    host "compute.googleapis.com"
    path join(["/compute/v1/projects/",$param_google_project,"/zones/",val(iter_item, "zone"),"/instances"])
    query "filter", 'status="TERMINATED"'
  end
  result do
    encoding "json"
    collect jmes_path(response, "items[*]") do
      field "instance_id", jmes_path(col_item, "id")
      field "instance_name", jmes_path(col_item, "name")
      field "status", jmes_path(col_item, "status")
      field "zone", val(iter_item, "zone")
      field "tags", jmes_path(col_item, "tags")
    end
  end
end

datasource "ds_stoped_instances_req_list" do
  run_script $js_stoped_instances_req_list, $ds_stoped_instances, $param_stoped_days
end

#https://cloud.google.com/monitoring/api/ref_v3/rest/v3/projects.timeSeries/list
datasource "ds_list_stoped_instances" do
  iterate $ds_stoped_instances_req_list
  request do
    auth $auth_google
    host "monitoring.googleapis.com"
    path join(["/v3/projects/",$param_google_project,"/timeSeries/"])
    query "filter", join(['metric.type = "compute.googleapis.com/instance/uptime" AND metric.labels.instance_name =', val(iter_item,"instance_name")])
    query "interval.endTime", val(iter_item,"end_at")
    query "interval.startTime", val(iter_item,"start_at")
  end
  result do
    encoding "json"
     encoding "json"
      collect jmes_path(response, "timeSeries[*]") do
      field "instance_name", val(iter_item,"instance_name")
      field "instance_id", jmes_path(col_item, "resource.labels.instance_id")
      field "zone", jmes_path(col_item, "resource.labels.zone")
    end
  end
end

datasource "ds_report" do
  run_script $js_report, $ds_stoped_instances, $ds_list_stoped_instances, $param_exclude_tags
end

###############################################################################
# Scripts
###############################################################################
script "js_stoped_instances_req_list", type: "javascript" do
 parameters "ds_stoped_instances", "param_stoped_days"  
 result "request"
  code <<-EOF
  var request=[];
 _.each(ds_stoped_instances, function(row){
   if(row["instance_name"] != null){
    var result = {
        "start_at": new Date(new Date().setDate(new Date().getDate() - parseInt(param_stoped_days))).toISOString(),
        "end_at": new Date().toISOString(),
        "instance_name": row["instance_name"]
      }
    request.push(result); 
    }
   })
EOF
end

script "js_report", type: "javascript" do
  parameters "ds_stoped_instances", "ds_list_stoped_instances", "param_exclude_tags"
  result "result"
  code <<-EOF   
   var result=[];
    var param_exclude_tags_lower=[];
    for(var i=0; i < param_exclude_tags.length; i++){
      param_exclude_tags_lower[i]=param_exclude_tags[i].toString().toLowerCase();
    } 
  _.each(ds_list_stoped_instances, function(instance_uptime){
      _.each(ds_stoped_instances, function(instance_stoped){	  
	  var tags = instance_stoped['tags'];
      var isTagMatched=false
      var tagKeyValue=""
      if(typeof(tags) !== "undefined"){
        var tagKeys = Object.keys(tags);
        for (var j = 0; j < tagKeys.length; j++){
          var tagKey = tagKeys[j];
          var tagValue = tags[tagKey];
          //Check, if the tag present in entered param_exclude_tags, ignore the google bucket object if the tag matches/present.
          if((param_exclude_tags_lower.indexOf(tagKey.toLowerCase()) !== -1) || (param_exclude_tags_lower.indexOf((tagKey+'='+tagValue).toLowerCase()) !== -1)){
            isTagMatched = true;
          }
          if(tagValue.length > 0){
            tagKeyValue = tagKeyValue + ', '+ tagKey+'='+tagValue
          }else{
            tagKeyValue = tagKeyValue + ', '+ tagKey
          }
        }
      }
	    if( instance_uptime["instance_name"] == instance_stoped["instance_name"] && instance_uptime["instance_id"] == null && !isTagMatched ){
		  result.push({
          "name": instance_stoped["instance_name"],
          "status": instance_stoped["status"],
          "instance_id": instance_stoped["instance_id"],
          "zone": instance_stoped["zone"],
		  "tagKeyValue":(tagKeyValue.slice(2))
        }) 
		} 
	  })  
  })
EOF
end

###############################################################################
# Policy
###############################################################################

policy "pol_utilization" do
  validate_each $ds_report do
    summary_template "{{ rs_project_name }} (Account ID: {{ rs_project_id }}): {{ len data }} google cloud instances in Stopped State for Over {{parameters.param_stoped_days}} Day(s)"
    detail_template <<-EOS
# Google Instance Out of Compliance
|Instance ID| Name | Status | Zone | Tags |
|:---------:|-----:|-------:|-----:|-----:|
{{ range data -}}
| {{.instance_id}} | {{.name}} | {{.status}} | {{.zone}} | {{.tagKeyValue}}
{{ end -}}
___
###### Policy Applied in Account: {{ rs_project_name }} (Account ID: {{ rs_project_id }}) within Org: {{ rs_org_name }} (Org ID: {{ rs_org_id }})
EOS
    check eq(0,1)
    escalate $esc_email
    escalate $esc_delete_instances
  end
end


###############################################################################
# Escalations
###############################################################################

escalation "esc_email" do
  email $param_email
end

escalation "esc_delete_instances" do
   request_approval  do
     label "Approve Instances Deletion"
     description "Approve escalation to terminate the instance(s)"
     parameter "approval_reason" do
     type "string"
     label "Reason for Approval"
     description "Explain why you are approving the action"
     end
   end
  run "delete_instances", data, $param_google_project
end

###############################################################################
# Cloud Workflow
###############################################################################

#https://cloud.google.com/compute/docs/reference/rest/v1/instances/delete
define delete_instances($data, $param_google_project) return $all_responses do
  call google_authenticate() retrieve $access_token
  $all_responses = []
  foreach $item in $data do
   sub on_error: skip do
      $response = http_request(
        verb: "delete",
        host: "compute.googleapis.com",
        href: join(["/compute/v1/projects/", $param_google_project, "/zones/", $item["zone"], "/instances/",$item["name"]]),
        https: true,
        headers: {
          "cache-control": "no-cache",
          "content-type": "application/json",
          "authorization": "Bearer " + $access_token
        }
      )
      $all_responses << $response
    end
  end
end

define google_authenticate() return $access_token do
  $jwt = {
    iss: cred("GCE_PLUGIN_ACCOUNT"),
    aud:"https://oauth2.googleapis.com/token",
    exp: to_n(strftime(now()+3600, "%s")),
    iat:to_n(strftime(now(), "%s")),
    scope: "https://www.googleapis.com/auth/cloud-platform https://www.googleapis.com/auth/sqlservice.admin"
  }
  $signed_signature = jwt_encode("RS256", $jwt, cred("GCE_PLUGIN_PRIVATE_KEY"),{typ:"JWT"})
  $response = http_request({
    verb: 'post',
    href: '/token',
    host: 'oauth2.googleapis.com',
    https: true,
    headers: {
      "content-type": "application/json"
    },
    body:{
      "grant_type": "urn:ietf:params:oauth:grant-type:jwt-bearer",
      "assertion": $signed_signature
    }
  })
  $access_token = $response["body"]["access_token"]
end


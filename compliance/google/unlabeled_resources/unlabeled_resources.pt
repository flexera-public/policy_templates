name "Google Unlabeled Resources"
rs_pt_ver 20180301
type "policy"
short_description "Find all Google Cloud resources(disks, images, instances, snapshots, buckets, vpnGateways), missing any of the user provided labels with the option to update the resources with the missing labels. See the [README](https://github.com/flexera/policy_templates/tree/master/compliance/google/unlabeled_resources) and [docs.rightscale.com/policies](https://docs.rightscale.com/policies/) to learn more."
category "Compliance"
severity "low"
info(
  version: "2.2",
  provider: "Google",
  service: "",
  policy_set: "Unlabeled Resources"
)

###############################################################################
# User inputs
###############################################################################

parameter "param_email" do
  type "list"
  label "Email addresses"
  description "Email addresses of the recipients you wish to notify when new incidents are created"
end

parameter "param_label_key" do
  type "list"
  label "List of Labels"
  category "Google"
  allowed_pattern /\S/
  description "List of labels to find resources which are not labeled by given inputs"
  constraint_description <<-EOS
    This is a mandatory field.
  EOS
end

###############################################################################
# Authentication
###############################################################################

# authenticate with Google
credentials "auth_google" do
  schemes "oauth2"
  label "Google"
  description "Select the Google Cloud Credential from the list."
  tags "provider=gce"
end

###############################################################################
# Pagination
###############################################################################

pagination "google_pagination" do
  get_page_marker do
    body_path "nextPageToken"
  end
  set_page_marker do
    query "pageToken"
  end
end


###############################################################################
# Datasources
###############################################################################

datasource "ds_resource_uri" do
  run_script $js_resource_uri, $ds_google_project
end

#get all google project
datasource "ds_google_project" do
  request do
    auth $auth_google
    pagination $google_pagination
    host "cloudresourcemanager.googleapis.com"
    path "/v1/projects/"
    query "filter", "lifecycleState=ACTIVE"
  end
  result do
    encoding "json"
    collect jmes_path(response, "projects[*]") do
      field "projectNumber", jmes_path(col_item,"projectNumber")
      field "projectId", jmes_path(col_item,"projectId")
    end
  end
end

#https://cloud.google.com/compute/docs/reference/rest/v1/instances/list
datasource "ds_all_resourceses" do
  iterate $ds_resource_uri
  request do
    auth $auth_google
    pagination $google_pagination
    host "compute.googleapis.com"
    path join(["/compute/v1/projects/", val(iter_item, "uri")])
    ignore_status [403,404]
  end
  result do
    encoding "json"
    collect jq(response, ".") do
      field "all_res", col_item
      field "uri", val(iter_item, "uri")
    end
  end
end

datasource "ds_storage_buckets" do
  iterate $ds_google_project
  request do
    auth $auth_google
    host "www.googleapis.com"
    path "/storage/v1/b"
    query "projection", "full"
    query "project", val(iter_item,"projectId")
    ignore_status [403,404]
  end
  result do
    encoding "json"
    collect jq(response, ".") do
      field "name", jmes_path(col_item, "name")
      field "all_res", col_item
    end
  end
end

datasource "ds_filtered_resources" do
  run_script $js_filter_resources, $ds_all_resourceses, $ds_storage_buckets, $param_label_key
end

###############################################################################
# Scripts
###############################################################################

script "js_filter_resources", type: "javascript" do
  parameters "ds_all_resourceses","ds_storage_buckets", "param_label_key"
  result "result"
  code <<-EOS
  var result = [];
  var param_label_key_lower = [];
  var all_input_labels;
  for (var j = 0; j < param_label_key.length; j++) {
    param_label_key_lower[j] = param_label_key[j].toString().toLowerCase();
    all_input_labels = all_input_labels + ',' + param_label_key_lower[j];
  }

  _.each(ds_storage_buckets, function (gr) {
    var obj = gr["all_res"];
    if (obj !== undefined && obj.items !== undefined) {
      for (var key in obj.items) {
        var isResMissedTag = false;
        var all_include_label = '';
        var all_missed_label = '';
        if (JSON.stringify(obj.items[key]["labels"]) == undefined) {
          var labels = "none";
        } else {
          var labels = obj.items[key]["labels"];
          var labels_str = JSON.stringify(labels);
        }
        for (var j = 0; j < param_label_key_lower.length; j++) {
          if (_.isEmpty(labels_str) || (labels_str.toLowerCase().indexOf(param_label_key_lower[j])) == -1) {
            isResMissedTag = true;
            all_missed_label = all_missed_label + " " + param_label_key_lower[j];
          } else {
            all_include_label = all_include_label + " " + param_label_key_lower[j];
          }
        }
        if (isResMissedTag) {
          result.push({
            id: obj.items[key]["id"],
            labels: labels,
            labelFingerprint: "labelFingerprint",
            selfLink: obj.items[key]["selfLink"],
            all_missed_label: all_missed_label,
            all_include_label: all_include_label,
            labels_str: labels_str,
            type: "buckets",
            name: obj.items[key]["name"]
          });
        }
      }
    }
  })

  // Iterate through all resources
  _.each(ds_all_resourceses, function (gr) {
    var obj = gr["all_res"];
    if (obj !== undefined && obj.items !== undefined) {
      for (var key in obj.items) {
        var type = gr["uri"].split("/")[2];
        if (gr["uri"].indexOf("aggregated") !== -1) {
          if (obj.items[key]["warning"] == undefined) {
            for (var k in obj.items[key][type]) {
              var isResMissedTag = false;
              var all_include_label = '';
              var all_missed_label = '';
              if (JSON.stringify(obj.items[key][type][k]["labels"]) == undefined) {
                var labels = "none";
              } else {
                var labels = obj.items[key][type][k]["labels"];
                var labels_str = JSON.stringify(labels);
              }
              for (var j = 0; j < param_label_key_lower.length; j++) {
                if (_.isEmpty(labels_str) || (labels_str.toLowerCase().indexOf(param_label_key_lower[j])) == -1) {
                  isResMissedTag = true;
                  all_missed_label = all_missed_label + " " + param_label_key_lower[j];
                } else {
                  all_include_label = all_include_label + " " + param_label_key_lower[j];
                }
              }
              if (isResMissedTag) {
                result.push({
                  id: obj.items[key][type][k]["id"],
                  labels: labels,
                  labelFingerprint: obj.items[key][type][k]["labelFingerprint"],
                  selfLink: obj.items[key][type][k]["selfLink"],
                  all_missed_label: all_missed_label,
                  all_include_label: all_include_label,
                  labels_str: labels_str,
                  type: type,
                  name: obj.items[key][type][k]["name"]
                });
              }
            }
          }
        } else if (gr["uri"].indexOf("global") !== -1) {
          var isResMissedTag = false;
          var all_include_label = '';
          var all_missed_label = '';
          if (JSON.stringify(obj.items[key]["labels"]) == undefined) {
            var labels = "none";
          } else {
            var labels = obj.items[key]["labels"];
            var labels_str = JSON.stringify(labels);
          }
          for (var j = 0; j < param_label_key_lower.length; j++) {
            if (_.isEmpty(labels_str) || (labels_str.toLowerCase().indexOf(param_label_key_lower[j])) == -1) {
              isResMissedTag = true;
              all_missed_label = all_missed_label + " " + param_label_key_lower[j];
            } else {
              all_include_label = all_include_label + " " + param_label_key_lower[j];
            }
          }
          if (isResMissedTag) {
            result.push({
              id: obj.items[key]["id"],
              labels: labels,
              labelFingerprint: obj.items[key]["labelFingerprint"],
              selfLink: obj.items[key]["selfLink"],
              all_missed_label: all_missed_label,
              all_include_label: all_include_label,
              labels_str: labels_str,
              type: type,
              name: obj.items[key]["name"]
            });
          }
        }
      }
    }
  })
EOS
end

script "js_resource_uri", type: "javascript" do
  parameters "ds_google_project"
  result "result"
  code <<-EOF
  var result = [];
  var endpoints = [
    "/aggregated/disks",
    "/global/externalVpnGateways",
    "/global/images",
    "/aggregated/instances",
    "/global/snapshots",
    "/aggregated/vpnGateways"
  ]
  _.each(ds_google_project, function (project) {
    _.each(endpoints, function(endpoint){
      result.push({uri: project.projectId + endpoint});
    })
  });
EOF
end


###############################################################################
# Policy
###############################################################################

policy "policy_azure_resource" do
  validate $ds_filtered_resources do
    summary_template "{{ len data }} Google Resources out of compliance."
    escalate $esc_email
    escalate $esc_label_resources
    check eq(size(data),0)
    export do
      resource_level true
      field "type" do
        label "Resource Type"
      end
      field "name" do
        label "Resource Name"
      end
      field "labels_str" do
        label "Existing Labels"
      end
      field "all_missed_label" do
        label "Missing Labels"
      end
      field "id" do
        label "Resources Id"
      end
      field "labels" do
        label "All Labels"
      end
      field "selfLink" do
        label "Self Link"
      end
      field "labelFingerprint" do
        label "labelFingerprint"
      end
    end
  end
end

###############################################################################
# Escalations
###############################################################################

escalation "esc_email" do
  automatic true
  label "Send Email"
  description "Send incident email"
  email $param_email
end

escalation "esc_label_resources" do
  automatic false
  label "Label Resources"
  description "Label the selected unlabeled resources"
  parameter "param_labels_to_add" do
    type "list"
    label "Add Labels"
    description "Add Labels to the selected resource"
  end
  run "label_resources", data, $param_labels_to_add
end

###############################################################################
# Cloud Workflow
###############################################################################

define label_resources($data, $param_labels_to_add) return $all_responses do
  $$log = []
  $all_responses = []

  foreach $item in $data do
    $new_labels = {}
    if $item["labels"] == "none"
      $new_labels = {}
    else
      $new_labels = $item["labels"]
    end
    foreach $label in $param_labels_to_add do
      if $new_labels != null
        $new_labels[first(split($label,"="))]=last(split($label,"="))
      end
      $$log << "after split: "+$new_labels[first(split($label,"="))]
    end
    sub on_error: handle_error($postResponse) do
      $$log << "after split: "+join([$item["selfLink"],"/setLabels"])
      if $item["type"] != "buckets"
        $postResponse = http_post(
          url: join([$item["selfLink"],"/setLabels"]),
          auth: $$auth_google,
          headers: {
            "cache-control": "no-cache",
            "content-type": "application/json"
          },
          body: {
            "labels": $new_labels,
            "labelFingerprint": $item["labelFingerprint"]
          }
        )
      else
        $postResponse = http_patch(
          url: $item["selfLink"],
          auth: $$auth_google,
          headers: {
            "cache-control": "no-cache",
            "content-type": "application/json"
          },
          body: {
            "labels": $new_labels
          }
        )
      end
    end
    $all_responses << $postResponse
  end
end

define handle_error($response) do
  $$log << "after split: "+to_s($response)
  $status_code = $response["code"]
  if $status_code == 404
    $_error_behavior = "skip"
  else
    $_error_behavior = "raise"
  end
end

define sys_log($subject, $detail) do
    rs_cm.audit_entries.create(
      notify: "None",
      audit_entry: {
        auditee_href: @@account,
        summary: $subject,
        detail: $detail
      }
    )
end

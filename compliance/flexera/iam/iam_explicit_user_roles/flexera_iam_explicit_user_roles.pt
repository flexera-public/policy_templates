name "Flexera Users With Explicit Roles"
rs_pt_ver 20180301
type "policy"
short_description "Reports Flexera users that have explicit user roles assigned. See the [README](https://github.com/flexera-public/policy_templates/tree/master/compliance/flexera/iam/iam_explicit_user_roles) and [docs.flexera.com/flexera/EN/Automation](https://docs.flexera.com/flexera/EN/Automation/AutomationGS.htm) to learn more."
long_description ""
doc_link "https://github.com/flexera-public/policy_templates/tree/master/compliance/flexera/iam/iam_explicit_user_roles"
category "Compliance"
severity "medium"
default_frequency "daily"
info(
  version: "4.0.3",
  provider: "Flexera",
  service: "Identity & Access Management",
  policy_set: "Identity & Access Management",
  hide_skip_approvals: "true"
)

###############################################################################
# Parameters
###############################################################################

parameter "param_email" do
  type "list"
  category "Policy Settings"
  label "Email Addresses"
  description "Email addresses of the recipients you wish to notify."
  default []
end

parameter "param_role_ignorelist" do
  type "list"
  category "Policy Settings"
  label "Role Ignore List"
  description "A list of role names/IDs to not consider when checking users for explicit roles. Leave blank to report all users with any explicit roles."
  default []
end

###############################################################################
# Authentication
###############################################################################

credentials "auth_flexera" do
  schemes "oauth2"
  label "Flexera"
  description "Select Flexera One OAuth2 credentials"
  tags "provider=flexera"
end

###############################################################################
# Datasources & Scripts
###############################################################################

# Get region-specific Flexera API endpoints
datasource "ds_flexera_api_hosts" do
  run_script $js_flexera_api_hosts, rs_optima_host
end

script "js_flexera_api_hosts", type: "javascript" do
  parameters "rs_optima_host"
  result "result"
  code <<-EOS
  host_table = {
    "api.optima.flexeraeng.com": {
	    api: "api.flexera.com",
      flexera: "api.flexera.com",
      fsm: "api.fsm.flexeraeng.com",
      grs: "grs-front.iam-us-east-1.flexeraeng.com",
      ui: "app.flexera.com",
      tld: "flexera.com"
    },
    "api.optima-eu.flexeraeng.com": {
	    api: "api.flexera.eu",
      flexera: "api.flexera.eu",
      fsm: "api.fsm-eu.flexeraeng.com",
      grs: "grs-front.eu-central-1.iam-eu.flexeraeng.com",
      ui: "app.flexera.eu",
      tld: "flexera.eu"
    },
    "api.optima-apac.flexeraeng.com": {
	    api: "api.flexera.au",
      flexera: "api.flexera.au",
      fsm: "api.fsm-apac.flexeraeng.com",
      grs: "grs-front.ap-southeast-2.iam-apac.flexeraeng.com",
      ui: "app.flexera.au",
      tld: "flexera.au"
    }
  }

  result = host_table[rs_optima_host]
EOS
end

# Get applied policy metadata for use later
datasource "ds_applied_policy" do
  request do
    auth $auth_flexera
    host val($ds_flexera_api_hosts, "flexera")
    path join(["/policy/v1/orgs/", rs_org_id, "/projects/", rs_project_id, "/applied-policies", switch(policy_id, join(["/", policy_id]), "")])
  end
end

datasource "ds_users" do
  request do
    auth $auth_flexera
    host val($ds_flexera_api_hosts, "flexera")
    path join(["/iam/v1/orgs/", rs_org_id, "/users"])
    header "User-Agent", "RS Policies"
  end
  result do
    encoding "json"
    collect jmes_path(response, "values[*]") do
      field "id", jmes_path(col_item, "id")
      field "kind", jmes_path(col_item, "kind")
      field "email", jmes_path(col_item, "email")
      field "firstName", jmes_path(col_item, "firstName")
      field "lastName", jmes_path(col_item, "lastName")
      field "lastAPILogin", jmes_path(col_item, "lastAPILogin")
      field "lastUILogin", jmes_path(col_item, "lastUILogin")
      field "ref", jmes_path(col_item, "ref")
      field "createdAt", jmes_path(col_item, "createdAt")
      field "updatedAt", jmes_path(col_item, "updatedAt")
    end
  end
end

datasource "ds_access_rules" do
  request do
    auth $auth_flexera
    host val($ds_flexera_api_hosts, "flexera")
    path join(["/iam/v1/orgs/", rs_org_id, "/access-rules"])
    header "User-Agent", "RS Policies"
  end
  result do
    encoding "json"
    collect jmes_path(response, "values[*]") do
      field "roleId", jmes_path(col_item, "role.id")
      field "roleKind", jmes_path(col_item, "role.kind")
      field "roleName", jmes_path(col_item, "role.name")
      field "roleDisplayName", jmes_path(col_item, "role.displayName")
      field "roleCategory", jmes_path(col_item, "role.category")
      field "scopeId", jmes_path(col_item, "scope.id")
      field "scopeKind", jmes_path(col_item, "scope.kind")
      field "scopeRef", jmes_path(col_item, "scope.ref")
      field "subjectId", jmes_path(col_item, "subject.id")
      field "subjectKind", jmes_path(col_item, "subject.kind")
      field "subjectRef", jmes_path(col_item, "subject.ref")
      field "kind", jmes_path(col_item, "kind")
      field "createdAt", jmes_path(col_item, "createdAt")
    end
  end
end

datasource "ds_bad_users" do
  run_script $js_bad_users, $ds_users, $ds_access_rules, $ds_applied_policy, $param_role_ignorelist
end

script "js_bad_users", type: "javascript" do
  parameters "ds_users", "ds_access_rules", "ds_applied_policy", "param_role_ignorelist"
  result "result"
  code <<-EOS
  relevant_rules = _.filter(ds_access_rules, function(rule) {
    return _.contains(param_role_ignorelist, rule['roleId']) == false && _.contains(param_role_ignorelist, rule['roleName']) == false && _.contains(param_role_ignorelist, rule['roleDisplayName']) == false && rule['subjectKind'] == 'iam:user'
  })

  rule_table = _.groupBy(relevant_rules, 'subjectId')

  bad_users = _.filter(ds_users, function(user) { return rule_table[user['id']] != undefined })

  result = _.map(bad_users, function(user) {
    createdAt = new Date(user['createdAt']).toISOString()
    updatedAt = new Date(user['updatedAt']).toISOString()
    lastAPILogin = new Date(user['lastAPILogin']).toISOString()
    lastUILogin = new Date(user['lastUILogin']).toISOString()

    if (user['createdAt'] == null) { createdAt = '' }
    if (user['updatedAt'] == null) { updatedAt = '' }
    if (user['lastAPILogin'] == null) { lastAPILogin = '' }
    if (user['lastUILogin'] == null) { lastUILogin = '' }

    return {
      id: user['id'],
      email: user['email'],
      firstName: user['firstName'],
      lastName: user['lastName'],
      createdAt: createdAt,
      updatedAt: updatedAt,
      lastAPILogin: lastAPILogin,
      lastUILogin: lastUILogin,
      roleIds: _.pluck(rule_table[user['id']], 'roleName').join(', '),
      roleNames: _.pluck(rule_table[user['id']], 'roleDisplayName').join(', '),
      policy_name: ds_applied_policy['name']
    }
  })
EOS
end

###############################################################################
# Policy
###############################################################################

policy "pol_bad_users" do
  validate_each $ds_bad_users do
    summary_template "{{ with index data 0 }}{{ .policy_name }}{{ end }}: {{ len data }} Flexera Users With Explicit Roles Found"
    check eq(val(item, "id"), "")
    escalate $esc_email
    hash_exclude "updatedAt", "lastAPILogin", "lastUILogin"
    export do
      resource_level true
      field "id" do
        label "ID"
      end
      field "email" do
        label "Email"
      end
      field "firstName" do
        label "First Name"
      end
      field "lastName" do
        label "Last Name"
      end
      field "createdAt" do
        label "Created At"
      end
      field "updatedAt" do
        label "Last Updated"
      end
      field "lastUILogin" do
        label "Last UI Login"
      end
      field "lastAPILogin" do
        label "Last API Login"
      end
      field "roleIds" do
        label "Explicit Role IDs"
      end
      field "roleNames" do
        label "Explicit Role Names"
      end
    end
  end
end

###############################################################################
# Escalations
###############################################################################

escalation "esc_email" do
  automatic true
  label "Send Email"
  description "Send incident email"
  email $param_email
end

name "AWS Untagged Resources"
rs_pt_ver 20180301
type "policy"
short_description "Find all AWS resources missing any of the user provided tags with the option to update the resources with the missing tags. See the [README](https://github.com/flexera/policy_templates/tree/master/compliance/aws/untagged_resources/) and [docs.rightscale.com/policies](https://docs.rightscale.com/policies/) to learn more."
long_description ""
category "Compliance"
severity "low"
info(
  version: "2.3",
  provider: "AWS",
  service: "",
  policy_set:"Untagged resources"
)

###############################################################################
# User inputs
###############################################################################

parameter "param_allowed_regions" do
  type "list"
  label "Allowed Regions"
  allowed_pattern /^([a-zA-Z-_]+-[a-zA-Z0-9-_]+-[0-9-_]+,*|)+$/
  description "A list of allowed regions. See the README for more details"
end

parameter "param_email" do
  type "list"
  label "Email addresses"
  description "A list of email addresses to notify"
end

parameter "param_tags_to_check" do
  type "list"
  label "Tags"
  description "List of tags of format 'Key=Value' against which the resources will be compared."
end

###############################################################################
# Authentication
###############################################################################

credentials "auth_aws" do
  schemes "aws","aws_sts"
  label "AWS"
  description "Select the AWS Cloud Credential from the list."
  tags "provider=aws"
end

###############################################################################
# Pagination
###############################################################################

pagination "aws_pagination" do
  get_page_marker do
    body_path jmes_path(response,"PaginationToken")
  end
  set_page_marker do
    body_field "PaginationToken"
  end
end

###############################################################################
# Datasources
###############################################################################

#Get list of enabled regions for an account
datasource "ds_regions_list" do
  request do
    auth $auth_aws
    verb "GET"
    host "ec2.amazonaws.com"
    path "/"
    query "Action", "DescribeRegions"
    query "Version", "2016-11-15"
  end
  result do
    encoding "xml"
    collect xpath(response, "//DescribeRegionsResponse/regionInfo/item", "array") do
      field "region", xpath(col_item, "regionName")
    end
  end
end

# Get only SCP enabled regions
datasource "ds_regions" do
  run_script $js_regions, $param_allowed_regions, $ds_regions_list
end

datasource "ds_get_all_resources" do
  iterate $ds_regions
  request do
    auth $auth_aws
    pagination $aws_pagination
    host join(["tagging.",val(iter_item, "region"),".amazonaws.com"])
    verb "POST"
    path "/"
    header "X-Amz-Target","ResourceGroupsTaggingAPI_20170126.GetResources"
    header "Content-Type","application/x-amz-json-1.1"
    body_field "ExcludeCompliantResources","false"
    body_field "IncludeComplianceDetails","true"
  end
  result do
    encoding "json"
    collect jmes_path(response,"ResourceTagMappingList[*]") do
      field "arn", jmes_path(col_item,"ResourceARN")
      field "tags" do
        collect jmes_path(col_item,"Tags[*]") do
          field "tagKey", jmes_path(col_item,"Key")
          field "tagValue", jmes_path(col_item,"Value")
        end
      end
      field "region", val(iter_item,"region")
    end
  end
end

datasource "ds_filter_resources" do
  run_script $js_filter_resources, $ds_get_all_resources, $param_tags_to_check
end

###############################################################################
# Scripts
###############################################################################

script "js_regions", type:"javascript" do
  parameters "user_entered_regions", "all_regions"
  result "regions"
  code <<-EOS
    if(_.isEmpty(user_entered_regions)){
      regions = all_regions;
    }else{
      //Filter unique regions
      var uniqueRegions = _.uniq(user_entered_regions);
      var all_regions_list = [];
      all_regions.forEach(function(all_region){
        all_regions_list.push(all_region.region)
      })

      //Filter valid regions
      var valid_regions = [];
      _.map(uniqueRegions, function(uniqueRegion){
        if(all_regions_list.indexOf(uniqueRegion) > -1){
          valid_regions.push({"region": uniqueRegion})
        }
      })

      //Throw an error if no valid regions found
      if (_.isEmpty(valid_regions)) {
        regions = all_regions;
      }else{
        regions = valid_regions
      }
    }
  EOS
end

script "js_filter_resources", type: "javascript" do
  parameters "ds_get_all_resources", "param_tags_to_check"
  result "result"
  code <<-EOS
  var result=[];
  for(var i=0;i<ds_get_all_resources.length;i++){
    var missing_tags="";
    var all_tags="";
    var instance=ds_get_all_resources[i];
    for(var j=0;j<param_tags_to_check.length;j++){
      var param_lowerCase=param_tags_to_check[j].toLowerCase();
      var notMatched=true;
      if(param_lowerCase.indexOf("=")==-1)
      {
        for(var k=0;k<instance.tags.length;k++){
          var current_tag=instance.tags[k];
          if(current_tag["tagKey"].toLowerCase()==param_lowerCase || current_tag["tagValue"].toLowerCase()==param_lowerCase){
            notMatched=false;
            break;
          }
        }
      }
      else {
        var arr=param_lowerCase.split("=");
        for(var k=0;k<instance.tags.length;k++){
          var current_tag=instance.tags[k];
          if(current_tag["tagKey"].toLowerCase()==arr[0] && current_tag["tagValue"].toLowerCase()==arr[1]){
            notMatched=false;
            break;
          }
        }
      }
      if(notMatched){
        missing_tags=missing_tags+", "+param_tags_to_check[j];
      }
    }
    for(var j=0;j<instance.tags.length;j++){
      var current_tag=instance.tags[j];
      all_tags=all_tags+", "+current_tag["tagKey"]+"="+current_tag["tagValue"];
    }
    if(all_tags.length==0){
      all_tags="< No Value >";
    }
    else{
      all_tags=all_tags.slice(2);
    }
    var id="";
    var type="";
    var arn_last=instance.arn.split(":");
    if(arn_last[arn_last.length-1].indexOf("/")!=-1){
      var arr=arn_last[arn_last.length-1].split("/")
      type=arr[0];
      id=arr[1];
    }
    else{
      type="< Not Available >";
      id=arn_last[arn_last.length-1];
    }
    if(missing_tags.length!=0){
      result.push({
        "arn":instance.arn,
        "id": id,
        "resource_type": type,
        "missing_tags":missing_tags.slice(2),
        "existing_tags":all_tags,
        "region":instance.region
      })
    }
  }
  result=_.sortBy(result, 'id');
  result=_.sortBy(result, 'region');
  EOS
end

###############################################################################
# Escalations
###############################################################################

escalation "esc_email" do
  automatic true
  label "Send Email"
  description "Send incident email"
  email $param_email
end

escalation "esc_add_tags" do
  automatic false
  label "Add Tags"
  description "Update tags of the selected resource"
  parameter "param_tags_to_add" do
    type "list"
    label "Add Tags"
    description "Add Tags of format 'Key=Value' to the resource"
  end
  run "cwf_add_tags", data, $param_tags_to_add
end

###############################################################################
# Policy
###############################################################################

policy "policy_untagged_resources" do
  validate $ds_filter_resources do
    summary_template "AWS untagged resources list"
    escalate $esc_email
    escalate $esc_add_tags
    check eq(size(data),0)
    export do
      resource_level true
      field "region" do
        label "Region"
      end
      field "id" do
        label "Resource ID"
      end
      field "resource_type" do
        label "Resource Type"
      end
      field "existing_tags" do
        label "Existing Tags"
      end
      field "missing_tags" do
        label "Missing Tags"
      end
      field "arn" do
        label "ARN"
      end
    end
  end
end

###############################################################################
# Cloud Workflow
###############################################################################

define cwf_add_tags($data,$tags_to_add) return $all_response do
  $$debug=true
  $all_response=[];
  $tags_obj={}
  foreach $tag in $tags_to_add do
    $tags_obj[first(split($tag,"="))]=last(split($tag,"="))
  end
  foreach $item in $data do
    $response=http_request(
      verb: "post",
      auth: $$auth_aws,
      host: join(["tagging."+$item["region"]+".amazonaws.com"]),
      href: "/",
      https: true,
      headers:{
        "X-Amz-Target": "ResourceGroupsTaggingAPI_20170126.TagResources",
        "content-type": "application/x-amz-json-1.1"
      },
      body: {
        "ResourceARNList": [ $item["arn"] ],
        "Tags": $tags_obj
      }
    )
    $all_response << $response
  end
  call sys_log('Response',to_s($all_response))
end

define sys_log($subject, $detail) do
  if $$debug
    rs_cm.audit_entries.create(
      notify: "None",
      audit_entry: {
        auditee_href: @@account,
        summary: "AWS add Tags "+ $subject,
        detail: $detail
      }
    )
  end
end

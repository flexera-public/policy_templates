name "AWS Untagged Resources"
rs_pt_ver 20180301
type "policy"
short_description "Find all AWS resources missing any of the user provided tags with the option to update the resources with the missing tags. See the [README](https://github.com/flexera-public/policy_templates/tree/master/compliance/aws/untagged_resources/) and [docs.flexera.com/flexera/EN/Automation](https://docs.flexera.com/flexera/EN/Automation/AutomationGS.htm) to learn more."
long_description ""
severity "low"
category "Compliance"
default_frequency "weekly"
info(
  version: "4.0",
  provider: "AWS",
  service: "",
  policy_set:"Untagged resources"
)

###############################################################################
# User inputs
###############################################################################

parameter "param_allowed_regions_allow_or_deny" do
  type "string"
  label "Allow/Deny Regions"
  description "Allow or Deny entered regions. See the README for more details"
  allowed_values "Allow", "Deny"
  default "Allow"
end

parameter "param_allowed_regions" do
  type "list"
  label "Regions"
  allowed_pattern /^([a-zA-Z-_]+-[a-zA-Z0-9-_]+-[0-9-_]+,*|)+$/
  description "A list of allowed or denied regions. See the README for more details"
end

parameter "param_email" do
  type "list"
  label "Email addresses"
  description "A list of email addresses to notify"
end

parameter "param_aws_account_number" do
  type "string"
  label "Account Number"
  description "The account number for AWS STS Cross Account Roles."
  default ""
end

parameter "param_tags_to_check" do
  type "list"
  label "Tag Keys"
  category "AWS"
  allowed_pattern /\S/
  description "List of tag keys e.g., 'Environment' to find resources which are not tagged by the given inputs."
  constraint_description <<-EOS
    This is a mandatory field.
  EOS
end

###############################################################################
# Authentication
###############################################################################

#AUTHENTICATE WITH AWS
credentials "auth_aws" do
  schemes "aws","aws_sts"
  label "AWS"
  description "Select the AWS Cloud Credential from the list."
  tags "provider=aws"
  aws_account_number $param_aws_account_number
end

#AUTHENTICATE WITH FLEXERA
credentials "auth_flexera" do
  schemes "oauth2"
  label "Flexera"
  description "Select Flexera One OAuth2 credentials"
  tags "provider=flexera"
end

###############################################################################
# Pagination
###############################################################################

pagination "aws_pagination" do
  get_page_marker do
    body_path jmes_path(response,"PaginationToken")
  end
  set_page_marker do
    body_field "PaginationToken"
  end
end

###############################################################################
# Datasources & Scripts
###############################################################################

# GET LIST OF OPTED-IN OR OPTED-IN-NOT-REQUIRED REGIONS
datasource "ds_regions_list" do
  # https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DescribeRegions.html
  request do
    auth $auth_aws
    verb "GET"
    host "ec2.amazonaws.com"
    path "/"
    query "Action", "DescribeRegions"
    query "Version", "2016-11-15"
    query "Filter.1.Name", "opt-in-status"
    query "Filter.1.Value.1", "opt-in-not-required"
    query "Filter.1.Value.2", "opted-in"
    # Header X-Meta-Flexera has no affect on datasource query, but is required for Meta Policies
    # Forces `ds_is_deleted` datasource to run first during policy execution
    header "Meta-Flexera", val($ds_is_deleted, "path")
  end
  result do
    encoding "xml"
    collect xpath(response, "//DescribeRegionsResponse/regionInfo/item", "array") do
      field "region", xpath(col_item, "regionName")
    end
  end
end

#FILTER REGIONS LIST ON 'ALLOWED REGIONS' PARAMETER
datasource "ds_regions" do
  run_script $js_get_regions, $param_allowed_regions, $ds_regions_list, $param_allowed_regions_allow_or_deny
end

script "js_get_regions", type:"javascript" do
  parameters "user_entered_regions", "all_regions", "regions_allow_or_deny"
  result "regions"
  code <<-EOS
    if (_.isEmpty(user_entered_regions)) {
      regions = all_regions
    } else {
      //Filter unique regions
      var uniqueRegions = _.uniq(user_entered_regions);
      var all_regions_list = []
      //Filter and remove denied regions from all_regions
      if (regions_allow_or_deny == "Deny"){
        var all_regions = all_regions.filter(function(obj){
          return user_entered_regions.indexOf(obj.region) === -1;
        });
      }
      all_regions.forEach(function(all_region){
        all_regions_list.push(all_region.region)
      })
      //Filter valid regions
      var valid_regions = []
      _.map(uniqueRegions, function(uniqueRegion){
        if (all_regions_list.indexOf(uniqueRegion) > -1) {
          valid_regions.push({"region": uniqueRegion})
        }
      })

      //Throw an error if no valid regions found
      if (_.isEmpty(valid_regions)) {
        regions = all_regions
      } else {
        regions = valid_regions
      }
    }
  EOS
end

#GET LIST OF ALL RESOURCES FROM AWS
datasource "ds_all_resources" do
  iterate $ds_regions
  request do
    auth $auth_aws
    pagination $aws_pagination
    host join(["tagging.",val(iter_item, "region"),".amazonaws.com"])
    verb "POST"
    path "/"
    header "X-Amz-Target","ResourceGroupsTaggingAPI_20170126.GetResources"
    header "Content-Type","application/x-amz-json-1.1"
    body_field "ExcludeCompliantResources","false"
    body_field "IncludeComplianceDetails","true"
  end
  result do
    encoding "json"
    collect jmes_path(response,"ResourceTagMappingList[*]") do
      field "arn", jmes_path(col_item,"ResourceARN")
      field "tags" do
        collect jmes_path(col_item,"Tags[*]") do
          field "tagKey", jmes_path(col_item,"Key")
          field "tagValue", jmes_path(col_item,"Value")
        end
      end
      field "region", val(iter_item,"region")
    end
  end
end

#FILTER RESOURCES BY 'TAGS TO CHECK' PARAMETER
datasource "ds_filtered_resources" do
  run_script $js_filter_resources, $ds_all_resources, $param_tags_to_check
end

script "js_filter_resources", type: "javascript" do
  parameters "ds_resources", "param_tags_to_check"
  result "result"
  code <<-EOS
  //For each Resource in Resource List
  _.each(ds_resources, function(resource){

    //Create a field for Missing tags
    resource["missingTagKeys"] = []
    resource["missingTagValues"] = []

    //For each Tag in Param Tag List
    _.each(param_tags_to_check, function(param){
      // Find Param Tag Key in Resource Tag Array
      current_tag = _.find(resource.tags, function(tag){ return tag.tagKey == param })
      // If Tag Key does not exist for Resource, create Missing Tag field and set to True
      if ( current_tag == undefined || current_tag == null) {
        resource["isMissingTagKey"] = true
        resource.missingTagKeys.push(param)
      }
      // Otherwise, if Tag Key does exist...
      else {
        // â€¦and if Tag Value is empty, create Missing Tag field and set to True
        if ( current_tag.tagValue == "" || current_tag.tagValue == null ) {
          resource["isMissingTagValue"] = true
          resource.missingTagValues.push(param)
        }
      }
    })
  })

  //Filter out all tags where isMissingTag != true
  filtered_resources = _.filter(ds_resources, function(resource){ return resource.isMissingTagKey == true || resource.isMissingTagValue == true })

  //Enrich filtered_resources data with Resource ID and Resource Type, also convert existing tags to string (so it can be viewed in Policy Incident)
  _.each(filtered_resources, function(resource){
    //Inject ID and Type
    //var resourceId = "";
    //var type = "";
    var arn_last = resource.arn.split(":")
    if ( arn_last[arn_last.length - 1].indexOf("/") != -1 ) {
        var arr = arn_last[arn_last.length - 1].split("/")
        resource["type"] = arr[0]
        resource["resourceId"] = arr[1]
    }
    else {
        resource["type"] = "< Not Available >"
        resource["resourceId"] = arn_last[arn_last.length - 1]
    }

    //Create string for existing Tags
    var existing_tags = ""
    _.each(resource.tags, function(tag){
      if ( existing_tags == "" ) { existing_tags += tag.tagKey + "=" + tag.tagValue }
      else { existing_tags += ", " + tag.tagKey + "=" + tag.tagValue }
    })
    resource["existingTags"] = existing_tags
  })

  //Sort result data
  result = _.sortBy(filtered_resources, 'resourceId')
  result = _.sortBy(result, 'region')
  EOS
end

###############################################################################
# Escalations
###############################################################################

#SEND EMAIL
escalation "esc_email" do
  automatic true
  label "Send Email"
  description "Send incident email"
  email $param_email
end

#ADD TAGS TO UNTAGGED RESOURCES
escalation "esc_add_tags" do
  automatic false
  label "Add Tags"
  description "Update tags of the selected resource"
  parameter "param_tags_to_add" do
    type "list"
    label "Add Tags - Enter the list of tags you wish to add to the selected resource. Tags should follow 'Key=Value' format."
    description "Enter the list of tags you wish to add to the selected resource. Tags should follow 'Key=Value' format."
  end
  run "cwf_add_tags", data, $param_tags_to_add
end

###############################################################################
# Policy
###############################################################################

policy "policy_untagged_resources" do
  validate $ds_filtered_resources do
    summary_template "{{ rs_project_name }} (Account ID: {{ rs_project_id }}): {{ len data }} AWS untagged resources found."
    escalate $esc_email
    escalate $esc_add_tags
    # Policy check fails and incident is created only if data is not empty and the Parent Policy has not been terminated
    check logic_or($ds_parent_policy_terminated, eq(size(data),0))
    export do
      resource_level true
      field "region" do
        label "Region"
      end
      field "resourceId" do
        label "Resource ID"
      end
      field "type" do
        label "Resource Type"
      end
      field "existingTags" do
        label "Existing Tags"
      end
      field "missingTagKeys" do
        label "Missing Tag Keys"
      end
      field "missingTagValues" do
        label "Tag Keys with Missing Tag Values"
      end
      field "id" do
        label "ARN"
        path "arn"
      end
    end
  end
end

###############################################################################
# Cloud Workflow
###############################################################################

#ADD TAGS TO UNTAGGED RESOURCE
define cwf_add_tags($data, $param_tags_to_add) return $all_responses, $list_of_tags_to_add_foreach_data do
  $$debug = true
  $all_responses = []

  #Used to show list of tags in the Output in Self-Service
  $list_of_tags_to_add_foreach_data = []

  #For each resource to action on:
  foreach $item in $data do

    #Get list of Missing Tag Keys and Tag Keys Missing Tag Values
    $missing_tag_keys = $item["missingTagKeys"]
    $missing_tag_values = $item["missingTagValues"]

    $filtered_tags_to_add_obj = {}
    foreach $tag in $param_tags_to_add do
      $tag_key_to_add = first(split( $tag, "=" ))
      $tag_value_to_add = ""
      if $tag_key_to_add != last(split( $tag, "="))
        $tag_value_to_add = last(split( $tag, "="))
      end
      $filtered_tags_to_add_obj[$tag_key_to_add] = $tag_value_to_add
    end

    $list_of_tags_to_add_foreach_data << $filtered_tags_to_add_obj

    #Create POST request to update resource with new tags
    $response = http_request(
      verb: "post",
      auth: $$auth_aws,
      host: join(["tagging.", $item["region"], ".amazonaws.com"]),
      href: "/",
      https: true,
      headers:{
        "X-Amz-Target": "ResourceGroupsTaggingAPI_20170126.TagResources",
        "content-type": "application/x-amz-json-1.1"
      },
      body: {
        "ResourceARNList": [ $item["id"] ],
        "Tags": $filtered_tags_to_add_obj
      }
    )
    call sys_log('Create AWS Tags for response: ',to_s($response))
    $all_responses << $response
  end
end

#DEFINE SYSLOG
define sys_log($subject, $detail) do
  if $$debug
    rs_cm.audit_entries.create(
      notify: "None",
      audit_entry: {
        auditee_href: @@account,
        summary: "AWS add Tags "+ $subject,
        detail: $detail
      }
    )
  end
end

define skip_error_and_append($subject) do
  $$errors << "Unexpected error for " + $subject + "\n  " + to_s($_error)
  $_error_behavior = "skip"
end

###############################################################################
# Meta Policy [alpha]
# Not intended to be modified or used by policy developers
###############################################################################

# If the meta_parent_policy_id is not set it will evaluate to an empty string and we will look for the policy itself,
# if it is set we will look for the parent policy.
datasource "ds_get_policy" do
  request do
    auth $auth_flexera
    host rs_governance_host
    ignore_status [404]
    path join(["/api/governance/projects/", rs_project_id, "/applied_policies/", switch(ne(meta_parent_policy_id,""), meta_parent_policy_id, policy_id) ])
    header "Api-Version", "1.0"
  end
  result do
    encoding "json"
    field "id", jmes_path(response, "id")
  end
end


datasource "ds_parent_policy_terminated" do
  run_script $js_decide_if_self_terminate, $ds_get_policy, policy_id, meta_parent_policy_id
end

# If the policy was applied by a meta_parent_policy we confirm it exists if it doesn't we confirm we are deleting
# This information is used in two places:
# - determining whether or not we make a delete call
# - determining if we should create an incident (we don't want to create an incident on the run where we terminate)
script "js_decide_if_self_terminate", type: "javascript" do
  parameters "found", "self_policy_id", "meta_parent_policy_id"
  result "result"
  code <<-EOS
  var result
  if (meta_parent_policy_id != "" && found.id == undefined) {
    result = true
  } else {
    result = false
  }
  EOS
end

# Two potentials ways to set this up:
# - this way and make a unneeded 'get' request when not deleting
# - make the delete request an interate and have it iterate over an empty array when not deleting and an array with one item when deleting
script "js_make_terminate_request", type: "javascript" do
  parameters "should_delete", "policy_id", "rs_project_id", "rs_governance_host"
  result "request"
  code <<-EOS

  var request = {
    auth:  'auth_flexera',
    host: rs_governance_host,
    path: "/api/governance/projects/" + rs_project_id + "/applied_policies/" + policy_id,
    headers: {
      "API-Version": "1.0",
      "Content-Type":"application/json"
    },
  }

  if (should_delete) {
    request.verb = 'DELETE'
  }
  EOS
end

datasource "ds_terminate_self" do
  request do
    run_script $js_make_terminate_request, $ds_parent_policy_terminated, policy_id, rs_project_id, rs_governance_host
  end
end

datasource "ds_is_deleted" do
  run_script $js_check_deleted, $ds_terminate_self
end

# This is just a way to have the check delete request connect to the farthest leaf from policy.
# We want the delete check to the first thing the policy does to avoid the policy erroring before it can decide whether or not it needs to self terminate
# Example a customer deletes a credential and then terminates the parent policy. We still want the children to self terminate
# The only way I could see this not happening is if the user who applied the parent_meta_policy was offboarded or lost policy access, the policies who are impersonating the user
# would not have access to self-terminate
# It may be useful for the backend to enable a mass terminate at some point for all meta_child_policies associated with an id.
script "js_check_deleted", type: "javascript" do
  parameters "response"
  result "result"
  code <<-EOS
  result = {"path":"/"}
  EOS
end

name "AWS Untagged Resources"
rs_pt_ver 20180301
type "policy"
short_description "Find all taggable AWS resources missing any of the user provided tags with the option to update the tags. See the [README](https://github.com/flexera-public/policy_templates/tree/master/compliance/aws/untagged_resources/) and [docs.flexera.com/flexera/EN/Automation](https://docs.flexera.com/flexera/EN/Automation/AutomationGS.htm) to learn more."
long_description ""
category "Compliance"
severity "low"
default_frequency "weekly"
info(
  version: "5.3.1",
  provider: "AWS",
  service: "Compute",
  policy_set: "Untagged Resources"
)

###############################################################################
# Parameters
###############################################################################

parameter "param_email" do
  type "list"
  category "Policy Settings"
  label "Email Addresses"
  description "A list of email addresses to notify."
  default []
end

parameter "param_aws_account_number" do
  type "string"
  category "Policy Settings"
  label "Account Number"
  description "Leave blank; this is for automated use with Meta Policies. See README for more details."
  default ""
end

parameter "param_include_savings" do
  type "string"
  category "Policy Settings"
  label "Include Savings"
  description "Whether or not to include the total estimated savings opportunities for each resource in the results. Disabling this can speed up policy execution but will result in the relevant fields in the report being empty."
  allowed_values "Include Savings", "Do Not Include Savings"
  default "Include Savings"
end

parameter "param_tags" do
  type "list"
  category "Filters"
  label "Tags"
  description "The policy will report resources missing the specified tags. Enter the key name to look for resources missing a key, and enter Key==Value to find resources missing a specific Key:Value pair. Other operators and regex are supported; please see the README for more details."
  default []
end

parameter "param_tags_boolean" do
  type "string"
  category "Filters"
  label "Any / All"
  description "Whether to report on instances missing any of the specified tags or all of them. Only applicable if more than one value is entered in the 'Tags' field."
  allowed_values "Any", "All"
  default "Any"
end

parameter "param_regions_allow_or_deny" do
  type "string"
  category "Filters"
  label "Allow/Deny Regions"
  description "Allow or Deny entered regions. See the README for more details."
  allowed_values "Allow", "Deny"
  default "Allow"
end

parameter "param_regions_list" do
  type "list"
  category "Filters"
  label "Allow/Deny Regions List"
  description "A list of allowed or denied regions. See the README for more details."
  allowed_pattern /^([a-zA-Z-_]+-[a-zA-Z0-9-_]+-[0-9-_]+,*|)+$/
  default []
end

parameter "param_consider_tag_dimensions" do
  type "string"
  category "Filters"
  label "Consider Tag Dimensions"
  description "Exclude results when a tag has a value for a tag key normalized by a Tag Dimension. Please see README for more details."
  allowed_values "Consider Tag Dimensions", "Do Not Consider Tag Dimensions"
  default "Consider Tag Dimensions"
end

parameter "param_include_account" do
  type "string"
  category "Filters"
  label "Include Account Tags"
  description "Whether or not to include the AWS account itself as a resource whose tags are checked and reported on."
  allowed_values "Include Account", "Do Not Include Account"
  default "Do Not Include Account"
end

###############################################################################
# Authentication
###############################################################################

credentials "auth_aws" do
  schemes "aws", "aws_sts"
  label "AWS"
  description "Select the AWS Credential from the list"
  tags "provider=aws"
  aws_account_number $param_aws_account_number
end

credentials "auth_flexera" do
  schemes "oauth2"
  label "Flexera"
  description "Select Flexera One OAuth2 credentials"
  tags "provider=flexera"
end

###############################################################################
# Pagination
###############################################################################

pagination "pagination_aws_tagging" do
  get_page_marker do
    body_path jmes_path(response, "PaginationToken")
  end
  set_page_marker do
    body_field "PaginationToken"
  end
end

###############################################################################
# Datasources & Scripts
###############################################################################

# Get applied policy metadata for use later
datasource "ds_applied_policy" do
  request do
    auth $auth_flexera
    host rs_governance_host
    path join(["/api/governance/projects/", rs_project_id, "/applied_policies/", policy_id])
    header "Api-Version", "1.0"
  end
end

# Get region-specific Flexera API endpoints
datasource "ds_flexera_api_hosts" do
  run_script $js_flexera_api_hosts, rs_optima_host
end

script "js_flexera_api_hosts", type: "javascript" do
  parameters "rs_optima_host"
  result "result"
  code <<-EOS
  host_table = {
    "api.optima.flexeraeng.com": {
      flexera: "api.flexera.com",
      fsm: "api.fsm.flexeraeng.com"
    },
    "api.optima-eu.flexeraeng.com": {
      flexera: "api.flexera.eu",
      fsm: "api.fsm-eu.flexeraeng.com"
    },
    "api.optima-apac.flexeraeng.com": {
      flexera: "api.flexera.au",
      fsm: "api.fsm-apac.flexeraeng.com"
    }
  }

  result = host_table[rs_optima_host]
EOS
end

# Get AWS account info
datasource "ds_cloud_vendor_accounts" do
  request do
    auth $auth_flexera
    host val($ds_flexera_api_hosts, 'flexera')
    path join(["/finops-analytics/v1/orgs/", rs_org_id, "/cloud-vendor-accounts"])
    header "Api-Version", "1.0"
  end
  result do
    encoding "json"
    collect jmes_path(response, "values[*]") do
      field "id", jmes_path(col_item, "aws.accountId")
      field "name", jmes_path(col_item, "name")
      field "tags", jmes_path(col_item, "tags")
    end
  end
end

datasource "ds_currency_reference" do
  request do
    host "raw.githubusercontent.com"
    path "/flexera-public/policy_templates/master/data/currency/currency_reference.json"
    header "User-Agent", "RS Policies"
  end
end

datasource "ds_currency_code" do
  request do
    auth $auth_flexera
    host rs_optima_host
    path join(["/bill-analysis/orgs/", rs_org_id, "/settings/currency_code"])
    header "Api-Version", "0.1"
    header "User-Agent", "RS Policies"
    ignore_status [403]
  end
  result do
    encoding "json"
    field "id", jmes_path(response, "id")
    field "value", jmes_path(response, "value")
  end
end

datasource "ds_currency" do
  run_script $js_currency, $ds_currency_reference, $ds_currency_code
end

script "js_currency", type:"javascript" do
  parameters "ds_currency_reference", "ds_currency_code"
  result "result"
  code <<-EOS
  symbol = "$"
  separator = ","

  if (ds_currency_code['value'] != undefined) {
    if (ds_currency_reference[ds_currency_code['value']] != undefined) {
      symbol = ds_currency_reference[ds_currency_code['value']]['symbol']

      if (ds_currency_reference[ds_currency_code['value']]['t_separator'] != undefined) {
        separator = ds_currency_reference[ds_currency_code['value']]['t_separator']
      } else {
        separator = ""
      }
    }
  }

  result = {
    symbol: symbol,
    separator: separator
  }
EOS
end

# Get Tag Dimensions
# Used for exluding resources that already have a value for one of the enable tag dimensions
datasource "ds_tag_dimensions" do
  request do
    auth $auth_flexera
    host val($ds_flexera_api_hosts, 'flexera')
    path join(["/finops-customizations/v1/orgs/", rs_org_id, "/tag-dimensions"])
    header "Api-Version", "1.0"
  end
  result do
    encoding "json"
    collect jmes_path(response, "values[*]") do
      field "id", jmes_path(col_item, "id")
      field "name", jmes_path(col_item, "name")
      field "tags", jmes_path(col_item, "tags")
    end
  end
end

# Branching logic:
# Only pull savings data if user opted to include it
datasource "ds_include_savings" do
  run_script $js_include_savings, $param_include_savings
end

script "js_include_savings", type: "javascript" do
  parameters "param_include_savings"
  result "result"
  code <<-EOS
  result = []
  if (param_include_savings == "Include Savings") { result = [1] }
EOS
end

# Recommendations List
# Used to provide the savings amount per resource in the results (if available)
# A user can then sort the untagged resource list results and sort by highest savings to prioritize tagging
datasource "ds_recommendations_all" do
  iterate $ds_include_savings
  request do
    auth $auth_flexera
    host rs_optima_host
    path join(["/recommendations/orgs/", rs_org_id, "/recommendations"])
    query "view", "extended"
    header "Api-Version", "1.0"
    header "content-type", "application/json"
  end
  result do
    encoding "json"
    collect jmes_path(response, "[*]") do
      field "resourceID", jmes_path(col_item, "resourceID")
      field "savings", jmes_path(col_item, "savings")
      field "detailsExtended", jmes_path(col_item, "detailsExtended")
    end
  end
end

datasource "ds_recommendation_resources_total_savings" do
  run_script $js_recommendation_resources_total_savings, $ds_recommendations_all, $ds_regions
end

script "js_recommendation_resources_total_savings", type: "javascript" do
  parameters "ds_recommendations_all", "ds_regions"
  result "result"
  code <<-EOS
  region_list = _.pluck(ds_regions, 'region')

  recs_in_region = _.filter(ds_recommendations_all, function(rec) {
    return rec["detailsExtended"]["region"] != undefined && _.contains(region_list, rec["detailsExtended"]["region"]["value"])
  })

  recs_with_resource = _.reject(recs_in_region, function(rec) {
    return rec['resourceID'] == "" || rec['resourceID'] == null || rec['resourceID'] == undefined
  })

  rec_object = {}

  _.each(recs_with_resource, function(rec) {
    id = rec['resourceID']
    if (rec_object[id] == undefined) { rec_object[id] = []}
    rec_object[id].push(rec)
  })

  result = []

  _.each(_.keys(rec_object), function(resourceID) {
    savings_numbers = _.compact(_.pluck(rec_object[resourceID], 'savings'))
    savings = _.reduce(savings_numbers, function(memo, num) { return memo + num }, 0)

    arn = ""
    if (rec_object[resourceID][0]["detailsExtended"]["resourceARN"] != undefined) {
      arn = rec_object[resourceID][0]["detailsExtended"]["resourceARN"]["value"]
    }

    if (arn == "" && rec_object[resourceID][0]["detailsExtended"]["resourcearn"] != undefined) {
      arn = rec_object[resourceID][0]["detailsExtended"]["resourcearn"]["value"]
    }

    if (arn == "" && rec_object[resourceID][0]["detailsExtended"]["arn"] != undefined) {
      arn = rec_object[resourceID][0]["detailsExtended"]["arn"]["value"]
    }

    if (arn == "" && rec_object[resourceID][0]["detailsExtended"]["ARN"] != undefined) {
      arn = rec_object[resourceID][0]["detailsExtended"]["ARN"]["value"]
    }

    id = ""
    if (rec_object[resourceID][0]["detailsExtended"]["id"] != undefined) {
      id = rec_object[resourceID][0]["detailsExtended"]["id"]["value"]
    }

    result.push({
      id: id,
      resourceID: resourceID,
      arn: arn,
      detailsExtended: rec_object[resourceID][0]["detailsExtended"],
      savings: savings
    })
  })
EOS
end

datasource "ds_get_caller_identity" do
  request do
    auth $auth_aws
    host "sts.amazonaws.com"
    path "/"
    query "Action", "GetCallerIdentity"
    query "Version", "2011-06-15"
    header "User-Agent", "RS Policies"
  end
  result do
    encoding "xml"
    collect xpath(response, "//GetCallerIdentityResponse/GetCallerIdentityResult") do
      field "account", xpath(col_item, "Account")
    end
  end
end

datasource "ds_aws_account" do
  run_script $js_aws_account, $ds_cloud_vendor_accounts, $ds_get_caller_identity
end

script "js_aws_account", type:"javascript" do
  parameters "ds_cloud_vendor_accounts", "ds_get_caller_identity"
  result "result"
  code <<-EOS
  result = _.find(ds_cloud_vendor_accounts, function(account) {
    return account['id'] == ds_get_caller_identity[0]['account']
  })

  // This is in case the API does not return the relevant account info
  if (result == undefined) {
    result = {
      id: ds_get_caller_identity[0]['account'],
      name: "",
      tags: {},
      type: "Account",
      region: ""
    }
  } else {
    result["type"] = "Account"
    result["region"] = ""
  }
EOS
end

datasource "ds_describe_regions" do
  request do
    auth $auth_aws
    host "ec2.amazonaws.com"
    path "/"
    query "Action", "DescribeRegions"
    query "Version", "2016-11-15"
    query "Filter.1.Name", "opt-in-status"
    query "Filter.1.Value.1", "opt-in-not-required"
    query "Filter.1.Value.2", "opted-in"
    # Header X-Meta-Flexera has no affect on datasource query, but is required for Meta Policies
    # Forces `ds_is_deleted` datasource to run first during policy execution
    header "Meta-Flexera", val($ds_is_deleted, "path")
  end
  result do
    encoding "xml"
    collect xpath(response, "//DescribeRegionsResponse/regionInfo/item", "array") do
      field "region", xpath(col_item, "regionName")
    end
  end
end

datasource "ds_regions" do
  run_script $js_regions, $ds_describe_regions, $param_regions_list, $param_regions_allow_or_deny
end

script "js_regions", type:"javascript" do
  parameters "ds_describe_regions", "param_regions_list", "param_regions_allow_or_deny"
  result "result"
  code <<-EOS
  allow_deny_test = { "Allow": true, "Deny": false }

  if (param_regions_list.length > 0) {
    result = _.filter(ds_describe_regions, function(item) {
      return _.contains(param_regions_list, item['region']) == allow_deny_test[param_regions_allow_or_deny]
    })
  } else {
    result = ds_describe_regions
  }
EOS
end

datasource "ds_aws_resources" do
  iterate $ds_regions
  request do
    auth $auth_aws
    pagination $pagination_aws_tagging
    verb "POST"
    host join(["tagging.", val(iter_item, "region"), ".amazonaws.com"])
    path "/"
    header "X-Amz-Target", "ResourceGroupsTaggingAPI_20170126.GetResources"
    header "Content-Type", "application/x-amz-json-1.1"
    body_field "ExcludeCompliantResources", "false"
    body_field "IncludeComplianceDetails", "true"
  end
  result do
    encoding "json"
    collect jmes_path(response, "ResourceTagMappingList[*]") do
      field "id", jmes_path(col_item, "ResourceARN")
      field "tags" do
        collect jmes_path(col_item, "Tags[*]") do
          field "key", jmes_path(col_item, "Key")
          field "value", jmes_path(col_item, "Value")
        end
      end
      field "region", val(iter_item, "region")
      field "type", "Resource"
    end
  end
end

datasource "ds_aws_resources_missing_tags" do
  run_script $js_aws_resources_missing_tags, $ds_aws_resources, $ds_aws_account, $ds_tag_dimensions, $param_tags, $param_tags_boolean, $param_consider_tag_dimensions, $param_include_account
end

script "js_aws_resources_missing_tags", type:"javascript" do
  parameters "ds_aws_resources", "ds_aws_account", "ds_tag_dimensions", "param_tags", "param_tags_boolean", "param_consider_tag_dimensions", "param_include_account"
  result "result"
  code <<-EOS
  result = []

  comparators = _.map(param_tags, function(item) {
    if (item.indexOf('==') != -1) {
      return { comparison: '==', key: item.split('==')[0], value: item.split('==')[1], string: item }
    }

    if (item.indexOf('!=') != -1) {
      return { comparison: '!=', key: item.split('!=')[0], value: item.split('!=')[1], string: item }
    }

    if (item.indexOf('=~') != -1) {
      value = item.split('=~')[1]
      regex = new RegExp(value.slice(1, value.length - 1))
      return { comparison: '=~', key: item.split('=~')[0], value: regex, string: item }
    }

    if (item.indexOf('!~') != -1) {
      value = item.split('!~')[1]
      regex = new RegExp(value.slice(1, value.length - 1))
      return { comparison: '!~', key: item.split('!~')[0], value: regex, string: item }
    }

    // If = is present but none of the above are, assume user error and that the user intended ==
    if (item.indexOf('=') != -1) {
      return { comparison: '==', key: item.split('=')[0], value: item.split('=')[1], string: item }
    }

    // Assume we're just testing for a key if none of the comparators are found
    return { comparison: 'key', key: item, value: null, string: item }
  })

  if (comparators.length > 0) {
    // Check each resource for missing tags. Include account when appropriate.
    resources = [].concat(ds_aws_resources)
    if (param_include_account == "Include Account") { resources.push(ds_aws_account) }

    _.each(resources, function(resource) {
      resource_tags = {}

      if (typeof(resource['tags']) == 'object') {
        if (resource["type"] == "Account") {
          resource_tags = resource['tags']
        } else {
          _.each(resource['tags'], function(tag) {
            resource_tags[tag['key']] = tag['value']
          })
        }
      }

      // Store a list of missing tags
      missing_tags = []

      _.each(comparators, function(comparator) {
        comparison = comparator['comparison']
        value = comparator['value']
        string = comparator['string']
        resource_tag = resource_tags[comparator['key']]

        if (comparison == 'key' && resource_tag == undefined) { missing_tags.push(string) }
        if (comparison == '==' && resource_tag != value) { missing_tags.push(string) }
        if (comparison == '!=' && resource_tag == value) { missing_tags.push(string) }

        if (comparison == '=~') {
          if (resource_tag == undefined) { missing_tags.push(string) }
          if (resource_tag != undefined && !value.test(resource_tag)) { missing_tags.push(string) }
        }

        if (comparison == '!~') {
          if (resource_tag != undefined && value.test(resource_tag)) { missing_tags.push(string) }
        }
      })

      missing_tags_result = missing_tags
      if (param_consider_tag_dimensions == "Consider Tag Dimension") {
        // Exclude resources that have a tag value for one of the tag dimensions
        // For each tag on the resource
        _.each(missing_tags, function(missing_tag) {
          matching_tag_dimension_tag_keys = []
          // For each missing tag
          // Check if the tag is a tag dimension
          // If it is, check if the resource has one of the tag keys under the tag dimension
          // If it does, remove the missing tag

          tag_dimension = _.find(ds_tag_dimensions, function(tag_dimension) {
            // Check if the missing tag matches any tag dimension name or ids
            return tag_dimension['id'] == missing_tag || tag_dimension['name'] == missing_tag
          })
          // Check if we found a matching tag dimension
          if (tag_dimension != undefined) {
            // Pluck tag keys from the tag dimension
            tag_dimension_tag_keys = _.pluck(tag_dimension['tags'], 'key')
            // Check if we found a value for the tag dimension
            if (typeof tag_dimension_tag_keys != "undefined") {
              // Plug tag keys from the resource
              resource_tag_keys = _.keys(resource_tags)
              // Check if the resource has any of the tag keys which are normalized under the tag dimension
              if (_.intersection(tag_dimension_tag_keys, resource_tag_keys).length > 0) {
                // If there is a resource tag matching tag key under the tag dimension, then remove the tag from missing tags result for the resource
                missing_tags_result = _.without(missing_tags_result, missing_tag)
              }
            }
          }
        });
      }

      if (missing_tags.length == comparators.length || (missing_tags.length > 0 && param_tags_boolean == 'Any')) {
        new_resource = resource
        new_resource['tags'] = resource_tags
        new_resource['missing_tags'] = missing_tags_result
        result.push(new_resource)
      }
    })
  }
EOS
end

datasource "ds_missing_tags_incident" do
  run_script $js_missing_tags_incident, $ds_aws_resources_missing_tags, $ds_aws_account, $ds_applied_policy, $ds_recommendation_resources_total_savings, $ds_currency, $param_tags, $param_tags_boolean, $param_include_savings
end

script "js_missing_tags_incident", type:"javascript" do
  parameters "ds_aws_resources_missing_tags", "ds_aws_account", "ds_applied_policy", "ds_recommendation_resources_total_savings", "ds_currency", "param_tags", "param_tags_boolean", "param_include_savings"
  result "result"
  code <<-'EOS'
  recommendations_id = {}
  recommendations_resourceid = {}
  recommendations_arn = {}

  _.each(ds_recommendation_resources_total_savings, function(rec) {
    if (typeof(rec['id']) == 'string' && rec['id'] != '') {
      recommendations_id[rec['id']] = rec
    }

    if (typeof(rec['resourceID']) == 'string' && rec['resourceID'] != '') {
      recommendations_resourceid[rec['resourceID']] = rec
    }

    if (typeof(rec['arn']) == 'string' && rec['arn'] != '') {
      recommendations_arn[rec['arn']] = rec
    }
  })

  result = _.map(ds_aws_resources_missing_tags, function(resource) {
    tags = []
    name = resource['name']

    if (typeof(resource['tags']) == 'object') {
      _.each(Object.keys(resource['tags']), function(key) {
        tags.push(key + '=' + resource['tags'][key])
      })

      if (typeof(resource['tags']['name']) == 'string' && typeof(name) != 'string') {
        name = resource['tags']['name']
      }
    }

    resourceType = resource['type']
    service = "AWS Account"

    if (resourceType == 'Resource') {
      arn_parts = resource['id'].split(':')
      service = arn_parts[2]
      resourceType = arn_parts[5].split('/')[0]
    }

    currency = null
    savings = null

    if (param_include_savings == "Include Savings" && resourceType != "Account" && typeof(resource['id']) == 'string' && resource['id'] != '') {
      currency = ds_currency['symbol']
      savings = 0.0

      if (recommendations_arn[resource['id']] != undefined) {
        savings = recommendations_arn[resource['id']]['savings']
      } else if (recommendations_resourceid[resource['id']] != undefined) {
        savings = recommendations_resourceid[resource['id']]['savings']
      } else if (recommendations_id[resource['id']] != undefined) {
        savings = recommendations_id[resource['id']]['savings']
      }
    }

    return {
      accountID: ds_aws_account['id'],
      accountName: ds_aws_account['name'],
      resourceID: resource['id'],
      resourceName: name,
      resourceType: resourceType,
      type: resource['type'],
      service: service,
      region: resource['region'],
      tags: tags.join(', '),
      tags_object: resource['tags'],
      missing_tags: resource['missing_tags'].join(', '),
      policy_name: ds_applied_policy['name'],
      savings: savings,
      savingsCurrency: currency,
      message: ''
    }
  })

  // Dummy item to ensure that the check statement in the policy executes at least once
  result.push({
    accountID: "",
    accountName: "",
    resourceID: "",
    resourceName: "",
    resourceType: "",
    service: "",
    region: "",
    tags: "",
    tags_object: "",
    missing_tags: "",
    policy_name: "",
    savings: "",
    savingsCurrency: "",
    message: ''
  })

  phrase = "one or more"
  if (param_tags_boolean == "All") { phrase = "all" }

  message = ["The following AWS resources are missing ", phrase, " of the following tags:\n\n"].join('')
  tag_list = _.map(param_tags, function(tag) { return ["- ", tag, "\n"].join('') }).join('')
  disclaimer = "\nThe above settings can be modified by editing the applied policy and changing the appropriate parameters."

  result[0]['message'] = message + tag_list + disclaimer
EOS
end

###############################################################################
# Policy
###############################################################################

policy "pol_untagged_resources" do
  validate_each $ds_missing_tags_incident do
    summary_template "{{ with index data 0 }}{{ .policy_name }}{{ end }}: {{ len data }} AWS Resources Missing Tags Found"
    detail_template "{{ with index data 0 }}{{ .message }}{{ end }}"
    # Policy check fails and incident is created only if data is not empty and the Parent Policy has not been terminated
    check logic_or($ds_parent_policy_terminated, eq(val(item, "resourceID"), ""))
    escalate $esc_email
    escalate $esc_tag_resources
    hash_exclude "message"
    export do
      resource_level true
      field "type" do
        label "Type"
      end
      field "accountID" do
        label "Account ID"
      end
      field "accountName" do
        label "Account Name"
      end
      field "resourceID" do
        label "Resource ID/ARN"
      end
      field "resourceName" do
        label "Resource Name"
      end
      field "tags" do
        label "Resource Tags"
      end
      field "missing_tags" do
        label "Missing Tags"
      end
      field "resourceType" do
        label "Resource Type"
      end
      field "region" do
        label "Region"
      end
      field "service" do
        label "Service"
      end
      field "id" do
        label "ID"
        path "resourceID"
      end
      field "savings" do
        label "Estimated Monthly Savings"
      end
      field "savingsCurrency" do
        label "Savings Currency"
      end
    end
  end
end

###############################################################################
# Escalations
###############################################################################

escalation "esc_email" do
  automatic true
  label "Send Email"
  description "Send incident email"
  email $param_email
end

escalation "esc_tag_resources" do
  automatic false
  label "Add Tags"
  description "Update tags of the selected resources"
  parameter "param_tags_to_add" do
    type "list"
    category "Actions"
    label "Add Tags (Key=Value)"
    description "Cloud native tags to add to resources with missing tags. Use Key=Value format. Example: env=production"
    allowed_pattern /^[^=]+=[^=]+$/
    # No default value, user input required
  end
  run "tag_resources", data, $param_tags_to_add
end

###############################################################################
# Cloud Workflow
###############################################################################

define tag_resources($data, $param_tags_to_add) return $all_responses do
  $$all_responses = []

  foreach $resource in $data do
    sub on_error: handle_error() do
      if $resource["type"] == "Resource"
        call tag_resource($resource, $param_tags_to_add) retrieve $tag_response
      else
        call tag_account($resource, $param_tags_to_add) retrieve $tag_response
      end
    end
  end

  if inspect($$errors) != "null"
    raise join($$errors, "\n")
  end
end

define tag_resource($resource, $param_tags_to_add) return $response do
  $tags_to_add = {}

  foreach $tag in $param_tags_to_add do
    $key = first(split($tag, "=" ))
    $value = last(split($tag, "="))
    $tags_to_add[$key] = $value
  end

  $host = "tagging." + $resource["region"] + ".amazonaws.com"
  $href = "/"
  $url = $host + $href
  task_label("POST " + $url)

  $response = http_request(
    auth: $$auth_aws,
    https: true,
    verb: "post",
    host: $host,
    href: $href,
    headers:{
      "X-Amz-Target": "ResourceGroupsTaggingAPI_20170126.TagResources",
      "content-type": "application/x-amz-json-1.1"
    },
    body: {
      "ResourceARNList": [ $resource["resourceID"] ],
      "Tags": $tags_to_add
    }
  )

  task_label("Post AWS resource response: " + $resource["resourceID"] + " " + to_json($response))
  $$all_responses << to_json({"req": "POST " + $url, "resp": $response})

  if $response["code"] != 204 && $response["code"] != 202 && $response["code"] != 200
    raise "Unexpected response posting AWS resource: "+ $resource["resourceID"] + " " + to_json($response)
  else
    task_label("Post AWS resource successful: " + $resource["resourceID"])
  end
end

define tag_account($resource, $param_tags_to_add) return $response do
  $tags_to_add = []

  foreach $tag in $param_tags_to_add do
    $new_tag = {
      "Key": first(split($tag, "=" )),
      "Value": last(split($tag, "="))
    }

    $tags_to_add << $new_tag
  end

  $host = "organizations.us-east-1.amazonaws.com"
  $href = "/v1/account/tags"
  $url = $host + $href
  task_label("POST " + $url)

  $response = http_request(
    auth: $$auth_aws,
    https: true,
    verb: "post",
    host: $host,
    href: $href,
    headers:{
      "X-Amz-Target": "AWSOrganizationsV20161128.TagResource",
      "content-type": "application/x-amz-json-1.1"
    },
    body: {
      "ResourceId": $resource["resourceID"],
      "Tags": $tags_to_add
    }
  )

  task_label("Post AWS account response: " + $resource["resourceID"] + " " + to_json($response))
  $$all_responses << to_json({"req": "POST " + $url, "resp": $response})

  if $response["code"] != 204 && $response["code"] != 202 && $response["code"] != 200
    raise "Unexpected response posting AWS account: "+ $resource["resourceID"] + " " + to_json($response)
  else
    task_label("Post AWS account successful: " + $resource["resourceID"])
  end
end

define handle_error() do
  if !$$errors
    $$errors = []
  end
  $$errors << $_error["type"] + ": " + $_error["message"]
  # We check for errors at the end, and raise them all together
  # Skip errors handled by this definition
  $_error_behavior = "skip"
end

###############################################################################
# Meta Policy [alpha]
# Not intended to be modified or used by policy developers
###############################################################################

# If the meta_parent_policy_id is not set it will evaluate to an empty string and we will look for the policy itself,
# if it is set we will look for the parent policy.
datasource "ds_get_policy" do
  request do
    auth $auth_flexera
    host rs_governance_host
    ignore_status [404]
    path join(["/api/governance/projects/", rs_project_id, "/applied_policies/", switch(ne(meta_parent_policy_id, ""), meta_parent_policy_id, policy_id) ])
    header "Api-Version", "1.0"
  end
  result do
    encoding "json"
    field "id", jmes_path(response, "id")
  end
end

datasource "ds_parent_policy_terminated" do
  run_script $js_decide_if_self_terminate, $ds_get_policy, policy_id, meta_parent_policy_id
end

# If the policy was applied by a meta_parent_policy we confirm it exists if it doesn't we confirm we are deleting
# This information is used in two places:
# - determining whether or not we make a delete call
# - determining if we should create an incident (we don't want to create an incident on the run where we terminate)
script "js_decide_if_self_terminate", type: "javascript" do
  parameters "found", "self_policy_id", "meta_parent_policy_id"
  result "result"
  code <<-EOS
  var result
  if (meta_parent_policy_id != "" && found.id == undefined) {
    result = true
  } else {
    result = false
  }
  EOS
end

# Two potentials ways to set this up:
# - this way and make a unneeded 'get' request when not deleting
# - make the delete request an interate and have it iterate over an empty array when not deleting and an array with one item when deleting
script "js_make_terminate_request", type: "javascript" do
  parameters "should_delete", "policy_id", "rs_project_id", "rs_governance_host"
  result "request"
  code <<-EOS

  var request = {
    auth:  'auth_flexera',
    host: rs_governance_host,
    path: "/api/governance/projects/" + rs_project_id + "/applied_policies/" + policy_id,
    headers: {
      "API-Version": "1.0",
      "Content-Type":"application/json"
    },
  }

  if (should_delete) {
    request.verb = 'DELETE'
  }
  EOS
end

datasource "ds_terminate_self" do
  request do
    run_script $js_make_terminate_request, $ds_parent_policy_terminated, policy_id, rs_project_id, rs_governance_host
  end
end

datasource "ds_is_deleted" do
  run_script $js_check_deleted, $ds_terminate_self
end

# This is just a way to have the check delete request connect to the farthest leaf from policy.
# We want the delete check to the first thing the policy does to avoid the policy erroring before it can decide whether or not it needs to self terminate
# Example a customer deletes a credential and then terminates the parent policy. We still want the children to self terminate
# The only way I could see this not happening is if the user who applied the parent_meta_policy was offboarded or lost policy access, the policies who are impersonating the user
# would not have access to self-terminate
# It may be useful for the backend to enable a mass terminate at some point for all meta_child_policies associated with an id.
script "js_check_deleted", type: "javascript" do
  parameters "response"
  result "result"
  code <<-EOS
  result = {"path":"/"}
  EOS
end

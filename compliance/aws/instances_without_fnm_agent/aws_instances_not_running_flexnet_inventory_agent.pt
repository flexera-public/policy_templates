name "AWS EC2 Instances not running FlexNet Inventory Agent"
rs_pt_ver 20180301
type "policy"
short_description "Check instances that are not running the FlexNet Inventory Agent. This template uses the SOAP version of the FlexNet Manager APIs. See the [README](https://github.com/flexera-public/policy_templates/tree/master/compliance/aws/instances_without_fnm_agent) and [docs.flexera.com/flexera/EN/Automation](https://docs.flexera.com/flexera/EN/Automation/AutomationGS.htm) to learn more."
long_description ""
severity "medium"
category "Compliance"
default_frequency "weekly"
info(
  version: "3.0",
  provider: "AWS",
  service: "EC2",
  policy_set: "Instances not running FlexNet Inventory Agent"
)

###############################################################################
# User inputs
###############################################################################

parameter "param_allowed_regions" do
  type "list"
  label "Allowed Regions"
  allowed_pattern /^([a-zA-Z-_]+-[a-zA-Z0-9-_]+-[0-9-_]+,*|)+$/
  description "A list of allowed regions. See the README for more details"
  default []
end

parameter "param_fnms_host" do
  type "string"
  label "FlexNet Manager host"
  description "Flexera One FlexNet Manager host"
  allowed_values "slo.app.flexera.com", "slo.app.flexera.eu", "slo.app.flexera.au", "slo-uat.app.flexera.com", "slo-uat.app.flexera.eu", "slo-uat.app.flexera.au"
  # No default value because parameter is required
end

parameter "param_report_id" do
  type "string"
  label "FNMS Report ID"
  description "FlexNet manager Custom View ID."
end

parameter "param_email" do
  type "list"
  label "Email addresses to notify"
  description "Email addresses of the recipients you wish to notify when new incidents are created"
  default []
end

parameter "param_exclude_tags" do
  type "list"
  label "Tags to ignore"
  description "List of tags that will exclude EC2 instance from being evaluated by this policy. Multiple tags are evaluated as an 'OR' condition. Tag keys or key/value pairs can be listed. Example: 'test,env=dev'"
  default []
end

parameter "param_aws_account_number" do
  type "string"
  label "Account Number"
  description "The account number for AWS STS Cross Account Roles."
  default ""
end

###############################################################################
# Pagination
###############################################################################

pagination "aws_pagination_xml" do
  get_page_marker do
    body_path "//DescribeInstancesResponse/nextToken"
  end
  set_page_marker do
    query "NextToken"
  end
end

###############################################################################
# Authentication
###############################################################################

#authenticate with AWS
credentials "auth_aws" do
  schemes "aws","aws_sts"
  label "AWS"
  description "Select the AWS Credential from the list."
  tags "provider=aws"
  aws_account_number $param_aws_account_number
end

credentials "auth_flexera" do
  schemes "oauth2"
  label "flexera"
  description "Select Flexera One OAuth2 credentials."
  tags "provider=flexera"
end

###############################################################################
# Datasources
###############################################################################

# ds_region_list is a list of regions that are opted-in or opt-in-not-required
datasource "ds_regions_list" do
  # https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DescribeRegions.html
  request do
    auth $auth_aws
    verb "GET"
    host "ec2.amazonaws.com"
    path "/"
    query "Action", "DescribeRegions"
    query "Version", "2016-11-15"
    query "Filter.1.Name", "opt-in-status"
    query "Filter.1.Value.1", "opt-in-not-required"
    query "Filter.1.Value.2", "opted-in"
  end
  result do
    encoding "xml"
    collect xpath(response, "//DescribeRegionsResponse/regionInfo/item", "array") do
      field "region", xpath(col_item, "regionName")
    end
  end
end

# Get only SCP enabled regions
datasource "ds_regions" do
  run_script $js_regions, $param_allowed_regions, $ds_regions_list
end

script "js_regions", type:"javascript" do
  parameters "user_entered_regions", "all_regions"
  result "regions"
  code <<-EOS
    if(_.isEmpty(user_entered_regions)){
      regions = all_regions;
    }else{
      //Filter unique regions
      var uniqueRegions = _.uniq(user_entered_regions);
      var all_regions_list = [];
      all_regions.forEach(function(all_region){
        all_regions_list.push(all_region.region)
      })

      //Filter valid regions
      var valid_regions = [];
      _.map(uniqueRegions, function(uniqueRegion){
        if(all_regions_list.indexOf(uniqueRegion) > -1){
          valid_regions.push({"region": uniqueRegion})
        }
      })

      //Throw an error if no valid regions found
      if (_.isEmpty(valid_regions)) {
        regions = all_regions;
      }else{
        regions = valid_regions
      }
    }
  EOS
end

#Get the list of all EC2 Instances across all regions.
#https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DescribeInstances.html
datasource "ds_aws_ec2_instances_list" do
  iterate $ds_regions
  request do
    auth $auth_aws
    verb "GET"
    host join(["ec2.",val(iter_item,"region"),".amazonaws.com"])
    path "/"
    query "Action", "DescribeInstances"
    query "Version", "2016-11-15"
  end
  result do
    encoding "xml"
    collect xpath(response, "//DescribeInstancesResponse/reservationSet/item/instancesSet/item","array") do
      field "instance_id", xpath(col_item, "instanceId")
    field "private_dns_name", xpath(col_item, "privateDnsName")
      field "instance_type", xpath(col_item, "instanceType")
      field "zone" do
        collect xpath(col_item, "placement") do
          field "availability_zone", xpath(col_item, "availabilityZone")
        end
      end
      field "instance_state", xpath(col_item, "instanceState/name")
      field "tags" do
        collect xpath(col_item, "tagSet/item") do
          field "tagKey", xpath(col_item, "key")
          field "tagValue", xpath(col_item, "value")
        end
      end
    end
  end
end

# Make API call and get the report data
datasource "ds_fnms_report" do
  request do
    auth $auth_flexera
    host $param_fnms_host
    verb "POST"
    scheme "https"
    path "/ManageSoftServices/ComplianceAPIService/ComplianceAPIService.asmx"
    query "orgid", to_s(rs_org_id) # Must convert rs_org_id to string otherwise query param does not get set
    header "Content-Type", "text/xml;charset=utf-8"
    body join(['<?xml version="1.0" encoding="utf-8"?>',
                '<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:tem="http://tempuri.org/">',
                '  <soap:Body>',
                '    <tem:GetCustomView>',
                '      <tem:customViewID>', $param_report_id, '</tem:customViewID>',
                '      <tem:rowLimit>100000</tem:rowLimit>',
                '   </tem:GetCustomView>',
                '  </soap:Body>',
                '</soap:Envelope>'])
  end
  result do
    encoding "xml"
    collect xpath(response,"//NewDataSet/SearchResults") do
      field "computerName", xpath(col_item, "ComputerName")
      field "instanceCloudID", xpath(col_item, "R2_fa9c6ab728d0ffd494dcba715bddad62_ComputerToCloudServiceInstance_InstanceCloudID")
    end
  end
end

datasource "ds_formatted_instances", type: "javascript" do
  run_script $js_format_instances,  $ds_aws_ec2_instances_list, $ds_fnms_report, $param_exclude_tags
end

#Formatter script for the Instance data
script "js_format_instances", type: "javascript" do
  parameters "ds_aws_ec2_instances_list","ds_fnms_report", "param_exclude_tags"
  result "result"
  code <<-EOS
    var result = [];

    fnms_instance_cloud_id=[];
    _.each(ds_fnms_report, function(instance){
      fnms_instance_cloud_id.push(instance["instanceCloudID"]);
    })

    var param_exclude_tags_lower=[];
    for(var i=0; i < param_exclude_tags.length; i++){
      param_exclude_tags_lower[i]=param_exclude_tags[i].toString().toLowerCase();
    }

    _.each(ds_aws_ec2_instances_list, function(instance){
      var tags = instance['tags'];
      var isTagMatched=false
      var tagKeyValue=""
      for(var k=0; k < tags.length; k++){
        tag = tags[k]
        //Check, if the tag present in entered param_exclude_tags, ignore the EC2 instance if the tag matches/present.
        if((param_exclude_tags_lower.indexOf((tag['tagKey']).toLowerCase()) !== -1) || (param_exclude_tags_lower.indexOf((tag['tagKey']+'='+tag['tagValue']).toLowerCase()) !== -1)){
          isTagMatched = true;
        }
        if((tag['tagValue']).length > 0){
          tagKeyValue = tagKeyValue + ', '+ tag['tagKey']+'='+tag['tagValue']
        }else{
          tagKeyValue = tagKeyValue + ', '+ tag['tagKey']
        }
      }
      if(!isTagMatched && fnms_instance_cloud_id.indexOf(instance["instance_id"]) === -1){
        result.push({
          id: instance['instance_id'],
          instance_type: instance['instance_type'],
          region: instance['zone'][0]['availability_zone'],
          instance_state: instance['instance_state'],
          tags: (tagKeyValue.slice(2))
        })
      }
    })
    result =  _.sortBy(result, 'region');
  EOS
end

###############################################################################
# Escalations
###############################################################################

escalation "esc_email" do
  automatic true
  label "Send Email"
  description "Send Incident Email"
  email $param_email
end

###############################################################################
# Policy
###############################################################################

policy "policy_long_running_instances" do
  validate $ds_formatted_instances do
    summary_template "{{ rs_project_name }} (Account ID: {{ rs_project_id }}): {{ len data }} EC2 instances missing in FlexNet Manager."

    export do
      resource_level true
      field "id" do
        label "Instance Id"
      end
      field "instance_type" do
        label "Instance Type"
      end
      field "region" do
        label "Region"
      end
      field "instance_state" do
        label "State"
      end
      field "tags" do
        label "Tags"
      end
    end

    escalate $esc_email
    check eq(size(data),0)
  end
end

name "AWS RDS Instances With Support Ending Soon"
rs_pt_ver 20180301
type "policy"
short_description "Report on AWS RDS Instances that are about to transition from standard support to more expensive extended support. See the [README](https://github.com/flexera-public/policy_templates/tree/master/cost/aws/rds_eos_instances) and [docs.flexera.com/flexera/EN/Automation](https://docs.flexera.com/flexera/EN/Automation/AutomationGS.htm) to learn more."
long_description ""
doc_link "https://github.com/flexera-public/policy_templates/tree/master/cost/aws/rds_eos_instances"
category "Cost"
severity "low"
default_frequency "weekly"
info(
  version: "0.1.0",
  provider: "AWS",
  service: "RDS",
  policy_set: "End Of Life",
  recommendation_type: "Usage Reduction",
  hide_skip_approvals: "true"
)

###############################################################################
# Parameters
###############################################################################

parameter "param_email" do
  type "list"
  category "Policy Settings"
  label "Email Addresses"
  description "A list of email addresses to notify."
  default []
end

parameter "param_aws_account_number" do
  type "string"
  category "Policy Settings"
  label "Account Number"
  description "Leave blank; this is for automated use with Meta Policies. See README for more details."
  default ""
end

parameter "param_regions_allow_or_deny" do
  type "string"
  category "Filters"
  label "Allow/Deny Regions"
  description "Allow or Deny entered regions. See the README for more details."
  allowed_values "Allow", "Deny"
  default "Allow"
end

parameter "param_regions_list" do
  type "list"
  category "Filters"
  label "Allow/Deny Regions List"
  description "A list of allowed or denied regions. See the README for more details."
  allowed_pattern /^([a-zA-Z-_]+-[a-zA-Z0-9-_]+-[0-9-_]+,*|)+$/
  default []
end

parameter "param_exclusion_tags" do
  type "list"
  category "Filters"
  label "Exclusion Tags"
  description "Cloud native tags to ignore resources that you don't want to produce recommendations for. Enter the Key name to filter resources with a specific Key, regardless of Value, and enter Key==Value to filter resources with a specific Key:Value pair. Other operators and regex are supported; please see the README for more details."
  default []
end

parameter "param_exclusion_tags_boolean" do
  type "string"
  category "Filters"
  label "Exclusion Tags: Any / All"
  description "Whether to filter instances containing any of the specified tags or only those that contain all of them. Only applicable if more than one value is entered in the 'Exclusion Tags' field."
  allowed_values "Any", "All"
  default "Any"
end

parameter "param_eos_notification" do
  type "number"
  category "Policy Settings"
  label "Notification Time Frame"
  description "Number of days in advance you wish to be notified prior to standard support ending."
  min_value 1
  default 90
end

###############################################################################
# Authentication
###############################################################################

credentials "auth_aws" do
  schemes "aws", "aws_sts"
  label "AWS"
  description "Select the AWS Credential from the list"
  tags "provider=aws"
  aws_account_number $param_aws_account_number
end

credentials "auth_flexera" do
  schemes "oauth2"
  label "Flexera"
  description "Select Flexera One OAuth2 credentials"
  tags "provider=flexera"
end

###############################################################################
# Pagination
###############################################################################

pagination "pagination_aws" do
  get_page_marker do
    body_path "//DescribeDBInstancesResult/Marker"
  end
  set_page_marker do
    query "Marker"
  end
end

###############################################################################
# Datasources & Scripts
###############################################################################

# Get region-specific Flexera API endpoints
datasource "ds_flexera_api_hosts" do
  run_script $js_flexera_api_hosts, rs_optima_host
end

script "js_flexera_api_hosts", type: "javascript" do
  parameters "rs_optima_host"
  result "result"
  code <<-EOS
  host_table = {
    "api.optima.flexeraeng.com": {
      api: "api.flexera.com",
      flexera: "api.flexera.com",
      fsm: "api.fsm.flexeraeng.com",
      grs: "grs-front.iam-us-east-1.flexeraeng.com",
      ui: "app.flexera.com",
      tld: "flexera.com"
    },
    "api.optima-eu.flexeraeng.com": {
      api: "api.flexera.eu",
      flexera: "api.flexera.eu",
      fsm: "api.fsm-eu.flexeraeng.com",
      grs: "grs-front.eu-central-1.iam-eu.flexeraeng.com",
      ui: "app.flexera.eu",
      tld: "flexera.eu"
    },
    "api.optima-apac.flexeraeng.com": {
      api: "api.flexera.au",
      flexera: "api.flexera.au",
      fsm: "api.fsm-apac.flexeraeng.com",
      grs: "grs-front.ap-southeast-2.iam-apac.flexeraeng.com",
      ui: "app.flexera.au",
      tld: "flexera.au"
    }
  }

  result = host_table[rs_optima_host]
EOS
end

# Get applied policy metadata for use later
datasource "ds_applied_policy" do
  request do
    auth $auth_flexera
    host val($ds_flexera_api_hosts, "flexera")
    path join(["/policy/v1/orgs/", rs_org_id, "/projects/", rs_project_id, "/applied-policies", switch(policy_id, join(["/", policy_id]), "")])
  end
end

# Get AWS account info
datasource "ds_cloud_vendor_accounts" do
  request do
    auth $auth_flexera
    host val($ds_flexera_api_hosts, 'flexera')
    path join(["/finops-analytics/v1/orgs/", rs_org_id, "/cloud-vendor-accounts"])
    header "Api-Version", "1.0"
  end
  result do
    encoding "json"
    collect jmes_path(response, "values[*]") do
      field "id", jmes_path(col_item, "aws.accountId")
      field "name", jmes_path(col_item, "name")
      field "tags", jmes_path(col_item, "tags")
    end
  end
end

datasource "ds_get_caller_identity" do
  request do
    auth $auth_aws
    host "sts.amazonaws.com"
    path "/"
    query "Action", "GetCallerIdentity"
    query "Version", "2011-06-15"
    header "User-Agent", "RS Policies"
  end
  result do
    encoding "xml"
    collect xpath(response, "//GetCallerIdentityResponse/GetCallerIdentityResult") do
      field "account", xpath(col_item, "Account")
    end
  end
end

datasource "ds_aws_account" do
  run_script $js_aws_account, $ds_cloud_vendor_accounts, $ds_get_caller_identity
end

script "js_aws_account", type:"javascript" do
  parameters "ds_cloud_vendor_accounts", "ds_get_caller_identity"
  result "result"
  code <<-EOS
  result = _.find(ds_cloud_vendor_accounts, function(account) {
    return account['id'] == ds_get_caller_identity[0]['account']
  })
  // This is in case the API does not return the relevant account info
  if (result == undefined) {
    result = {
      id: ds_get_caller_identity[0]['account'],
      name: "",
      tags: {}
    }
  }
EOS
end

datasource "ds_billing_centers" do
  request do
    auth $auth_flexera
    host rs_optima_host
    path join(["/analytics/orgs/", rs_org_id, "/billing_centers"])
    query "view", "allocation_table"
    header "Api-Version", "1.0"
    header "User-Agent", "RS Policies"
    ignore_status [403]
  end
  result do
    encoding "json"
    collect jmes_path(response, "[*]") do
      field "href", jmes_path(col_item, "href")
      field "id", jmes_path(col_item, "id")
      field "name", jmes_path(col_item, "name")
      field "parent_id", jmes_path(col_item, "parent_id")
    end
  end
end

# Gather top level billing center IDs for when we pull cost data
datasource "ds_top_level_bcs" do
  run_script $js_top_level_bcs, $ds_billing_centers
end

script "js_top_level_bcs", type: "javascript" do
  parameters "ds_billing_centers"
  result "result"
  code <<-EOS
  filtered_bcs = _.filter(ds_billing_centers, function(bc) {
    return bc['parent_id'] == null || bc['parent_id'] == undefined
  })

  result = _.compact(_.pluck(filtered_bcs, 'id'))
EOS
end

datasource "ds_currency_reference" do
  request do
    host "raw.githubusercontent.com"
    path "/flexera-public/policy_templates/master/data/currency/currency_reference.json"
    header "User-Agent", "RS Policies"
  end
end

datasource "ds_currency_code" do
  request do
    auth $auth_flexera
    host rs_optima_host
    path join(["/bill-analysis/orgs/", rs_org_id, "/settings/currency_code"])
    header "Api-Version", "0.1"
    header "User-Agent", "RS Policies"
    ignore_status [403]
  end
  result do
    encoding "json"
    field "id", jmes_path(response, "id")
    field "value", jmes_path(response, "value")
  end
end

datasource "ds_currency" do
  run_script $js_currency, $ds_currency_reference, $ds_currency_code
end

script "js_currency", type:"javascript" do
  parameters "ds_currency_reference", "ds_currency_code"
  result "result"
  code <<-EOS
  symbol = "$"
  separator = ","

  if (ds_currency_code['value'] != undefined) {
    if (ds_currency_reference[ds_currency_code['value']] != undefined) {
      symbol = ds_currency_reference[ds_currency_code['value']]['symbol']

      if (ds_currency_reference[ds_currency_code['value']]['t_separator'] != undefined) {
        separator = ds_currency_reference[ds_currency_code['value']]['t_separator']
      } else {
        separator = ""
      }
    }
  }

  result = {
    symbol: symbol,
    separator: separator
  }
EOS
end

datasource "ds_describe_regions" do
  request do
    auth $auth_aws
    host "ec2.amazonaws.com"
    path "/"
    query "Action", "DescribeRegions"
    query "Version", "2016-11-15"
    query "Filter.1.Name", "opt-in-status"
    query "Filter.1.Value.1", "opt-in-not-required"
    query "Filter.1.Value.2", "opted-in"
    # Header X-Meta-Flexera has no affect on datasource query, but is required for Meta Policies
    # Forces `ds_is_deleted` datasource to run first during policy execution
    header "Meta-Flexera", val($ds_is_deleted, "path")
  end
  result do
    encoding "xml"
    collect xpath(response, "//DescribeRegionsResponse/regionInfo/item", "array") do
      field "region", xpath(col_item, "regionName")
    end
  end
end

datasource "ds_regions" do
  run_script $js_regions, $ds_describe_regions, $param_regions_list, $param_regions_allow_or_deny
end

script "js_regions", type:"javascript" do
  parameters "ds_describe_regions", "param_regions_list", "param_regions_allow_or_deny"
  result "result"
code <<-EOS
  var allow_deny_test = { "Allow": true, "Deny": false };

  if (param_regions_list.length > 0) {
    result = _.filter(ds_describe_regions, function(item) {
      return _.contains(param_regions_list, item['region']) == allow_deny_test[param_regions_allow_or_deny];
    });
  } else {
    result = ds_describe_regions;
  }
EOS
end

datasource "ds_rds_instances_set" do
  iterate $ds_regions
  request do
    auth $auth_aws
    pagination $pagination_aws
    host join(["rds.", val(iter_item, "region"), ".amazonaws.com"])
    path "/"
    query "Action", "DescribeDBInstances"
    query "Version", "2014-10-31"
    header "User-Agent", "RS Policies"
    header "Content-Type", "text/xml"
  end
  result do
    encoding "xml"
    collect xpath(response, "//DescribeDBInstancesResponse/DescribeDBInstancesResult/DBInstances/DBInstance[*]", "array") do
      field "instanceId", xpath(col_item, "DbiResourceId")
      field "instanceArn", xpath(col_item, "DBInstanceArn")
      field "databaseEngine", xpath(col_item, "Engine")
      field "engineVersion", xpath(col_item, "EngineVersion")
      field "databaseName", xpath(col_item, "DBName")
      field "name", xpath(col_item, "DBInstanceIdentifier")
      field "dbInstanceClass", xpath(col_item, "DBInstanceClass")
      field "region", val(iter_item, "region")
      field "availabilityZone", xpath(col_item, "AvailabilityZone")
    end
  end
end

datasource "ds_resource_tags" do
  iterate $ds_rds_instances_set
  request do
    run_script $js_resource_tags, val(iter_item, "instanceArn"), val(iter_item, "region")
  end
  result do
    encoding "xml"
    collect xpath(response, "//ListTagsForResourceResponse/ListTagsForResourceResult/TagList/Tag[*]", "array") do
      field "instanceId", val(iter_item, "instanceId")
      field "key", xpath(col_item, "Key")
      field "value", xpath(col_item, "Value")
    end
  end
end

script "js_resource_tags", type: "javascript" do
  parameters "instanceArn", "region"
  result "request"
  code <<-EOS
  var request = {
    auth: "auth_aws",
    host: "rds." + region + ".amazonaws.com",
    path: "/",
    headers: {
      "User-Agent": "RS Policies",
      "Content-Type": "text/xml"
    },
    query_params: {
      "Action": "ListTagsForResource",
      "ResourceName": instanceArn,
      "Version": "2014-10-31"
    }
  };
EOS
end

datasource "ds_aws_db_instance_map" do
  request do
    host "raw.githubusercontent.com"
    path "/flexera-public/policy_templates/master/data/aws/aws_rds_db_instance_mapping.json"
    header "User-Agent", "RS Policies"
  end
end

datasource "ds_aws_db_size_map" do
  request do
    host "raw.githubusercontent.com"
    path "/flexera-public/policy_templates/master/data/aws/aws_rds_db_size_mapping.json"
    header "User-Agent", "RS Policies"
  end
end

datasource "ds_aws_db_support_cost_map" do
  request do
    host "raw.githubusercontent.com"
    path "/flexera-public/policy_templates/master/data/aws/aws_rds_extended_support_cost_mapping.json"
    header "User-Agent", "RS Policies"
  end
end

datasource "ds_rds_instances" do
  run_script $js_rds_instances, $ds_rds_instances_set, $ds_resource_tags, $ds_aws_account, $ds_applied_policy, $param_exclusion_tags, $param_exclusion_tags_boolean, $param_eos_notification, $ds_aws_db_instance_map, $ds_aws_db_size_map, $ds_aws_db_support_cost_map, $ds_billing_centers, $ds_currency
end

script "js_rds_instances", type: "javascript" do
  parameters "ds_rds_instances_set", "ds_resource_tags", "ds_aws_account", "ds_applied_policy", "param_exclusion_tags", "param_exclusion_tags_boolean", "param_eos_notification", "ds_aws_db_instance_map", "ds_aws_db_size_map", "ds_aws_db_support_cost_map", "ds_billing_centers", "ds_currency"
  result "result"
  code <<-EOS
    result = [];

    var HOURS = 720;
    var currency_symbol = ds_currency["symbol"] || "$";
    var separator = ds_currency["separator"] || ",";

    function daysUntil(dateStr) {
      var today = new Date();
      var eosDate = new Date(dateStr);
      var diffTime = eosDate.getTime() - today.getTime();
      return Math.ceil(diffTime / (1000 * 60 * 60 * 24));
    }

    function formatCurrency(value, symbol, separator) {
      var parts = value.toFixed(2).split(".");
      var integerPart = parts[0];
      var decimalPart = parts[1];
      var formattedInt = "";
      var count = 0;

      for (var i = integerPart.length - 1; i >= 0; i--, count++) {
        formattedInt = integerPart[i] + formattedInt;
        if ((count + 1) % 3 === 0 && i !== 0 && separator !== "") {
          formattedInt = separator + formattedInt;
        }
      }
      return symbol + formattedInt + "." + decimalPart;
    }
    
    function stripCurrencySymbol(formattedValue, symbol) {
      if (formattedValue.indexOf(symbol) === 0) {
        return formattedValue.substring(symbol.length);
      }
      return formattedValue;
    }

    function cleanCurrencyValue(formattedValue, symbol, separator) {
      var value = formattedValue;

      // Remove symbol if present
      if (value.indexOf(symbol) === 0) {
        value = value.substring(symbol.length);
      }

      // Remove separator (e.g., comma)
      if (separator !== "") {
        value = value.split(separator).join("");
      }
      return value;
    }

    // Build EOS lookup
    var eos_lookup = {};
    for (var i = 0; i < ds_aws_db_instance_map.length; i++) {
      var item = ds_aws_db_instance_map[i];
      var engine = item["engine"] ? item["engine"].toLowerCase() : null;
      var version = item["engineVersion"];
      var eos_date = item["endOfSupportDate"];

      if (engine && version && eos_date) {
        if (!eos_lookup[engine]) {
          eos_lookup[engine] = {};
        }
        eos_lookup[engine][version] = eos_date;
      }
    }

    // Build tag map
    var tag_map = {};
    _.each(ds_resource_tags, function(tag) {
      var id = tag.instanceId;

      if (!tag_map[id]) {
        tag_map[id] = [];
      }
   
      if (!_.isEmpty(tag.key) && !_.isEmpty(tag.value)) {
        tag_map[id].push(tag.key + "=" + tag.value);
      }

    });


    function isExcluded(instanceId) {
      var instanceTags = tag_map[instanceId] || [];
      if (param_exclusion_tags.length === 0) return false;

      if (param_exclusion_tags_boolean === "Any") {
        for (var i = 0; i < param_exclusion_tags.length; i++) {
          if (instanceTags.indexOf(param_exclusion_tags[i]) !== -1) {
            return true;
          }
        }
        return false;
      } else {
        for (var i = 0; i < param_exclusion_tags.length; i++) {
          if (instanceTags.indexOf(param_exclusion_tags[i]) === -1) {
            return false;
          }
        }
        return true;
      }
    }

    // Build billing center lookup
    var billing_center_lookup = {};
    _.each(ds_billing_centers, function(bc) {
      if (bc.id && bc.name) {
        billing_center_lookup[bc.id] = bc.name;
      }
    });

    function getBillingCenter(instanceId) {
      var tagMatch = _.find(ds_resource_tags, function(tag) {
        return tag["instanceId"] === instanceId && tag["key"] === "flexera_billing_center_id";
      });

      if (tagMatch && tagMatch["value"]) {
        return tagMatch["value"];
      }
      return null;
    }

    // Evaluate each RDS instance
    for (var k = 0; k < ds_rds_instances_set.length; k++) {
      var instance = ds_rds_instances_set[k];
      var engine = instance["databaseEngine"];
      var version = instance["engineVersion"];
      var instanceId = instance["instanceId"];
      var instanceArn = instance["instanceArn"];
      var name = instance["name"];
      var db_class = instance["dbInstanceClass"];
      
      if (!engine || !version || isExcluded(instanceId) || db_class === "db.serverless") {
        continue;
      }

      var eos_date = null;
      var engine_key = engine.toLowerCase();

      if (eos_lookup[engine_key] && eos_lookup[engine_key][version]) {
        eos_date = eos_lookup[engine_key][version];
      }

      if (eos_date != null) {
        var days_remaining = daysUntil(eos_date);

        if (days_remaining <= Number(param_eos_notification) && days_remaining > 0) {
          var raw_tags = tag_map[instanceId] || [];
          var clean_tags = _.isArray(raw_tags) ? _.filter(raw_tags, function(tag) {
            return tag && tag !== "";
          }) : [];
      }

        var vcpu = ds_aws_db_size_map[db_class] ? Number(ds_aws_db_size_map[db_class]) : 0;
        var region = instance["region"];
        var EXTENDED_SUPPORT_COST = 0.10; // default fallback

        var cost_entry = _.find(ds_aws_db_support_cost_map, function(entry) {
          return entry.region === region && entry.year1_cost_usd;
        });

        if (cost_entry) {
          EXTENDED_SUPPORT_COST = Number(cost_entry.year1_cost_usd);
        }

        var estimated_cost = HOURS * vcpu * EXTENDED_SUPPORT_COST;
        var formatted_cost = formatCurrency(estimated_cost, currency_symbol, separator);
        var estimated_savings = cleanCurrencyValue(formatted_cost, currency_symbol, separator);
        var billing_center_id_or_name = getBillingCenter(instanceId);
        var billing_center_name = "Unassigned";
        var recommendationMessage = "Your RDS instance " + name + " running " + engine +
          " version " + version + " will end standard support on " + eos_date +
          ". To avoid extended support charges, it is recommended that you upgrade to a currently supported version.";

        // Try to match by ID first
        if (billing_center_id_or_name && billing_center_lookup[billing_center_id_or_name]) {
          billing_center_name = billing_center_lookup[billing_center_id_or_name];
        } else {
          // Try to match by name
          var nameMatch = _.find(ds_billing_centers, function(bc) {
            return bc["name"] === billing_center_id_or_name;
          });

          if (nameMatch && nameMatch["name"]) {
            billing_center_name = nameMatch["name"];
          }
        }

        result.push({
          instanceId: instanceId,
          resourceArn: instanceArn,
          databaseEngine: engine,
          engineVersion: version,
          resourceName: name,
          DBInstanceClass: db_class,
          service: "AmazonRDS",
          vCPU: vcpu,
          savings: estimated_savings,
          savingsCurrency: currency_symbol,
          billingCenterName: billing_center_name,
          endOfSupport: eos_date,
          recommendationDetails: recommendationMessage,
          daysUntilEndOfSupport: days_remaining,
          tags: clean_tags.join(","),
          accountID: ds_aws_account["id"],
          accountName: ds_aws_account["name"],
          region: instance["region"]
        });
      }
    }
EOS
end

###############################################################################
# Policy
###############################################################################

policy "pol_eos_rds" do
  validate $ds_rds_instances do
    summary_template "{{ with index data 0 }}{{ .policy_name }}{{ end }}: {{ len data }} RDS Instances Approaching End of Support"
    check logic_or($ds_parent_policy_terminated, eq(size($ds_rds_instances), 0))
    escalate $esc_email
    hash_exclude "tags"
    export do
      resource_level true
      field "accountName" do
        label "Account Name"
      end      
      field "accountID" do
        label "Account ID"
      end
      field "resourceName" do
        label "Resource Name"
      end
      field "resourceID" do
        label "Resource ID"
        path "instanceId"
      end
      field "tags" do
        label "Resource Tags"
      end
      field "region" do
        label "Region"
      end
      field "databaseEngine" do
        label "Database Engine"
      end
      field "engineVersion" do
        label "Engine Version"
      end
      field "resourceType" do
        label "Instance Class"
        path "DBInstanceClass"
      end
      field "service" do
        label "Service"
      end
      field "vCPU" do
        label "vCPU Count"
      end
      field "savings" do
        label "Estimated Monthly Savings"
      end
      field "recommendationDetails" do
        label "Recommendation"
      end
      field "savingsCurrency" do
        label "Savings Currency"
      end
      field "endOfSupport" do
        label "End of Support Date"
      end
      field "daysUntilEndOfSupport" do
        label "Days Until End of Support"
      end
      field "resourceArn" do
        label "Resource ARN"
      end
      field "id" do
        label "id"
        path "instanceId"
      end
    end
  end
end

###############################################################################
# Escalations
###############################################################################

escalation "esc_email" do
  automatic true
  label "Send Email"
  description "Send incident email"
  email $param_email
end

###############################################################################
# Meta Policy [alpha]
# Not intended to be modified or used by policy developers
###############################################################################

# If the meta_parent_policy_id is not set it will evaluate to an empty string and we will look for the policy itself,
# if it is set we will look for the parent policy.
datasource "ds_get_parent_policy" do
  request do
    auth $auth_flexera
    host val($ds_flexera_api_hosts, "flexera")
    path join(["/policy/v1/orgs/", rs_org_id, "/projects/", rs_project_id, "/applied-policies/", switch(ne(meta_parent_policy_id, ""), meta_parent_policy_id, policy_id) ])
	  ignore_status [404]
  end
  result do
    encoding "json"
    field "id", jmes_path(response, "id")
  end
end

# If the policy was applied by a meta_parent_policy we confirm it exists if it doesn't we confirm we are deleting
# This information is used in two places:
# - determining whether or not we make a delete call
# - determining if we should create an incident (we don't want to create an incident on the run where we terminate)
datasource "ds_parent_policy_terminated" do
  run_script $js_parent_policy_terminated, $ds_get_parent_policy, meta_parent_policy_id
end

script "js_parent_policy_terminated", type: "javascript" do
  parameters "ds_get_parent_policy", "meta_parent_policy_id"
  result "result"
  code <<-'EOS'
  result = meta_parent_policy_id != "" && ds_get_parent_policy["id"] == undefined
EOS
end

# Two potentials ways to set this up:
# - this way and make a unneeded 'get' request when not deleting
# - make the delete request an interate and have it iterate over an empty array when not deleting and an array with one item when deleting
datasource "ds_terminate_self" do
  request do
    run_script $js_make_terminate_request, $ds_parent_policy_terminated, $ds_flexera_api_hosts, policy_id, rs_org_id, rs_project_id
  end
end

script "js_make_terminate_request", type: "javascript" do
  parameters "ds_parent_policy_terminated", "ds_flexera_api_hosts", "policy_id", "rs_org_id", "rs_project_id"
  result "request"
  code <<-EOS
  var request = {
    auth: "auth_flexera",
    host: ds_flexera_api_hosts["flexera"],
    path: [ "/policy/v1/orgs/", rs_org_id, "/projects/", rs_project_id, "/applied-policies", policy_id ? "/"+policy_id : "" ].join(''),
    verb: ds_parent_policy_terminated ? "DELETE" : "GET"
  }
EOS
end

# This is just a way to have the check delete request connect to the farthest leaf from policy.
# We want the delete check to the first thing the policy does to avoid the policy erroring before it can decide whether or not it needs to self terminate
# Example a customer deletes a credential and then terminates the parent policy. We still want the children to self terminate
# The only way I could see this not happening is if the user who applied the parent_meta_policy was offboarded or lost policy access, the policies who are impersonating the user
# would not have access to self-terminate
# It may be useful for the backend to enable a mass terminate at some point for all meta_child_policies associated with an id.
datasource "ds_is_deleted" do
  run_script $js_is_deleted, $ds_terminate_self
end

script "js_is_deleted", type: "javascript" do
  parameters "ds_terminate_self"
  result "result"
  code 'result = { path: "/"}'
end

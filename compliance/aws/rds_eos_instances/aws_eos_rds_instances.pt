name "AWS RDS instances with support ending soon"
rs_pt_ver 20180301
type "policy"
short_description "Report on AWS RDS Instances that are about to end support. See the [README](https://github.com/flexera-public/policy_templates/tree/master/compliance/aws/rds_backup) and [docs.flexera.com/flexera/EN/Automation](https://docs.flexera.com/flexera/EN/Automation/AutomationGS.htm) to learn more."
long_description ""
doc_link "https://github.com/flexera-public/policy_templates/tree/master/compliance/aws/rds_backup"
category "Compliance"
severity "medium"
default_frequency "weekly"
info(
  version: "0.1.0",
  provider: "AWS",
  service: "RDS",
  policy_set: "RDS EOS",
  hide_skip_approvals: "true"
)

###############################################################################
# Parameters
###############################################################################

parameter "param_email" do
  type "list"
  category "Policy Settings"
  label "Email Addresses"
  description "A list of email addresses to notify."
  default []
end

parameter "param_aws_account_number" do
  type "string"
  category "Policy Settings"
  label "Account Number"
  description "Leave blank; this is for automated use with Meta Policies. See README for more details."
  default ""
end

parameter "param_regions_allow_or_deny" do
  type "string"
  category "Filters"
  label "Allow/Deny Regions"
  description "Allow or Deny entered regions. See the README for more details."
  allowed_values "Allow", "Deny"
  default "Allow"
end

parameter "param_regions_list" do
  type "list"
  category "Filters"
  label "Allow/Deny Regions List"
  description "A list of allowed or denied regions. See the README for more details."
  allowed_pattern /^([a-zA-Z-_]+-[a-zA-Z0-9-_]+-[0-9-_]+,*|)+$/
  default []
end

parameter "param_exclusion_tags" do
  type "list"
  category "Filters"
  label "Exclusion Tags"
  description "Cloud native tags to ignore resources that you don't want to produce recommendations for. Enter the Key name to filter resources with a specific Key, regardless of Value, and enter Key==Value to filter resources with a specific Key:Value pair. Other operators and regex are supported; please see the README for more details."
  default []
end

parameter "param_exclusion_tags_boolean" do
  type "string"
  category "Filters"
  label "Exclusion Tags: Any / All"
  description "Whether to filter instances containing any of the specified tags or only those that contain all of them. Only applicable if more than one value is entered in the 'Exclusion Tags' field."
  allowed_values "Any", "All"
  default "Any"
end

parameter "param_eos_notification" do
  type "number"
  category "Policy Settings"
  label "End of support notification time frame"
  description "How far in advance do you want to be notified before support ends?"
  min_value 1
  default 90
end

parameter "param_static_engine_support_json" do
  type "string"
  category "Policy Settings"
  label "End Of support information"
  description "This is all the support information for mysql and postgres"
  default '[
    { "engine": "mysql", "MajorEngineVersion": "8.0", "engineVersion": "8.0.43", "endOfSupportDate": "2026-08-01" },
  { "engine": "mysql", "MajorEngineVersion": "8.0", "engineVersion": "8.0.42", "endOfSupportDate": "2026-07-11" },
  { "engine": "mysql", "MajorEngineVersion": "8.0", "engineVersion": "8.0.41", "endOfSupportDate": "2026-03-01" },
  { "engine": "mysql", "MajorEngineVersion": "8.0", "engineVersion": "8.0.40", "endOfSupportDate": "2026-03-01" },
  { "engine": "mysql", "MajorEngineVersion": "8.0", "engineVersion": "8.0.39", "endOfSupportDate": "2025-10-01" },
  { "engine": "mysql", "MajorEngineVersion": "8.0", "engineVersion": "8.0.37", "endOfSupportDate": "2025-10-01" },
  { "engine": "mysql", "MajorEngineVersion": "8.4", "engineVersion": "8.4.3", "endOfSupportDate": "2026-03-01" },
  { "engine": "mysql", "MajorEngineVersion": "8.4", "engineVersion": "8.4.4", "endOfSupportDate": "2026-03-01" },
  { "engine": "mysql", "MajorEngineVersion": "8.4", "engineVersion": "8.4.5", "endOfSupportDate": "2026-09-01" },
  { "engine": "mysql", "MajorEngineVersion": "8.4", "engineVersion": "8.4.6", "endOfSupportDate": "2026-08-01" },
  { "engine": "postgres", "MajorEngineVersion": "13", "engineVersion": "13.15", "endOfSupportDate": "2025-10-01" },
  { "engine": "postgres", "MajorEngineVersion": "13", "engineVersion": "13.16", "endOfSupportDate": "2025-10-01" },
  { "engine": "postgres", "MajorEngineVersion": "13", "engineVersion": "13.17", "endOfSupportDate": "2026-02-28" },
  { "engine": "postgres", "MajorEngineVersion": "13", "engineVersion": "13.18", "endOfSupportDate": "2026-02-28" },
  { "engine": "postgres", "MajorEngineVersion": "13", "engineVersion": "13.19", "endOfSupportDate": "2026-02-28" },
  { "engine": "postgres", "MajorEngineVersion": "13", "engineVersion": "13.20", "endOfSupportDate": "2026-02-28" },
  { "engine": "postgres", "MajorEngineVersion": "13", "engineVersion": "13.21", "endOfSupportDate": "2026-09-01" },
  { "engine": "postgres", "MajorEngineVersion": "13", "engineVersion": "13.22", "endOfSupportDate": "2026-11-01" },
  { "engine": "postgres", "MajorEngineVersion": "14", "engineVersion": "14.12", "endOfSupportDate": "2025-10-01" },
  { "engine": "postgres", "MajorEngineVersion": "14", "engineVersion": "14.13", "endOfSupportDate": "2025-10-01" },
  { "engine": "postgres", "MajorEngineVersion": "14", "engineVersion": "14.14", "endOfSupportDate": "2026-03-01" },
  { "engine": "postgres", "MajorEngineVersion": "14", "engineVersion": "14.15", "endOfSupportDate": "2026-03-01" },
  { "engine": "postgres", "MajorEngineVersion": "14", "engineVersion": "14.16", "endOfSupportDate": "2026-03-01" },
  { "engine": "postgres", "MajorEngineVersion": "14", "engineVersion": "14.17", "endOfSupportDate": "2026-03-01" },
  { "engine": "postgres", "MajorEngineVersion": "14", "engineVersion": "14.18", "endOfSupportDate": "2026-09-01" },
  { "engine": "postgres", "MajorEngineVersion": "15", "engineVersion": "15.7", "endOfSupportDate": "2025-10-01" },
  { "engine": "postgres", "MajorEngineVersion": "15", "engineVersion": "15.8", "endOfSupportDate": "2025-10-01" },
  { "engine": "postgres", "MajorEngineVersion": "15", "engineVersion": "15.9", "endOfSupportDate": "2026-03-01" },
  { "engine": "postgres", "MajorEngineVersion": "15", "engineVersion": "15.10", "endOfSupportDate": "2026-03-01" },
  { "engine": "postgres", "MajorEngineVersion": "15", "engineVersion": "15.11", "endOfSupportDate": "2026-03-01" },
  { "engine": "postgres", "MajorEngineVersion": "15", "engineVersion": "15.12", "endOfSupportDate": "2026-03-01" },
  { "engine": "postgres", "MajorEngineVersion": "15", "engineVersion": "15.13", "endOfSupportDate": "2026-09-01" },
  { "engine": "postgres", "MajorEngineVersion": "16", "engineVersion": "16.3", "endOfSupportDate": "2025-10-01" },
  { "engine": "postgres", "MajorEngineVersion": "16", "engineVersion": "16.4", "endOfSupportDate": "2025-10-01" },
  { "engine": "postgres", "MajorEngineVersion": "16", "engineVersion": "16.5", "endOfSupportDate": "2026-03-01" },
  { "engine": "postgres", "MajorEngineVersion": "16", "engineVersion": "16.6", "endOfSupportDate": "2026-03-01" },
  { "engine": "postgres", "MajorEngineVersion": "16", "engineVersion": "16.7", "endOfSupportDate": "2026-03-01" },
  { "engine": "postgres", "MajorEngineVersion": "16", "engineVersion": "16.8", "endOfSupportDate": "2026-03-01" },
  { "engine": "postgres", "MajorEngineVersion": "16", "engineVersion": "16.9", "endOfSupportDate": "2026-09-01" },
  { "engine": "postgres", "MajorEngineVersion": "17", "engineVersion": "17.1", "endOfSupportDate": "2026-03-01" },
  { "engine": "postgres", "MajorEngineVersion": "17", "engineVersion": "17.2", "endOfSupportDate": "2026-03-01" },
  { "engine": "postgres", "MajorEngineVersion": "17", "engineVersion": "17.3", "endOfSupportDate": "2026-03-01" },
  { "engine": "postgres", "MajorEngineVersion": "17", "engineVersion": "17.4", "endOfSupportDate": "2026-03-01" },
  { "engine": "postgres", "MajorEngineVersion": "17", "engineVersion": "17.5", "endOfSupportDate": "2026-09-01" }
]'
end

###############################################################################
# Authentication
###############################################################################

credentials "auth_aws" do
  schemes "aws", "aws_sts"
  label "AWS"
  description "Select the AWS Credential from the list"
  tags "provider=aws"
  aws_account_number $param_aws_account_number
end

credentials "auth_flexera" do
  schemes "oauth2"
  label "Flexera"
  description "Select Flexera One OAuth2 credentials"
  tags "provider=flexera"
end

###############################################################################
# Pagination
###############################################################################

pagination "pagination_aws" do
  get_page_marker do
    body_path "//DescribeDBInstancesResult/Marker"
  end
  set_page_marker do
    query "Marker"
  end
end

###############################################################################
# Datasources & Scripts
###############################################################################

# Get region-specific Flexera API endpoints
datasource "ds_flexera_api_hosts" do
  run_script $js_flexera_api_hosts, rs_optima_host
end

script "js_flexera_api_hosts", type: "javascript" do
  parameters "rs_optima_host"
  result "result"
  code <<-EOS
  host_table = {
    "api.optima.flexeraeng.com": {
      api: "api.flexera.com",
      flexera: "api.flexera.com",
      fsm: "api.fsm.flexeraeng.com",
      grs: "grs-front.iam-us-east-1.flexeraeng.com",
      ui: "app.flexera.com",
      tld: "flexera.com"
    },
    "api.optima-eu.flexeraeng.com": {
      api: "api.flexera.eu",
      flexera: "api.flexera.eu",
      fsm: "api.fsm-eu.flexeraeng.com",
      grs: "grs-front.eu-central-1.iam-eu.flexeraeng.com",
      ui: "app.flexera.eu",
      tld: "flexera.eu"
    },
    "api.optima-apac.flexeraeng.com": {
      api: "api.flexera.au",
      flexera: "api.flexera.au",
      fsm: "api.fsm-apac.flexeraeng.com",
      grs: "grs-front.ap-southeast-2.iam-apac.flexeraeng.com",
      ui: "app.flexera.au",
      tld: "flexera.au"
    }
  }

  result = host_table[rs_optima_host]
EOS
end

# Get applied policy metadata for use later
datasource "ds_applied_policy" do
  request do
    auth $auth_flexera
    host val($ds_flexera_api_hosts, "flexera")
    path join(["/policy/v1/orgs/", rs_org_id, "/projects/", rs_project_id, "/applied-policies", switch(policy_id, join(["/", policy_id]), "")])
  end
end

# Get AWS account info
datasource "ds_cloud_vendor_accounts" do
  request do
    auth $auth_flexera
    host val($ds_flexera_api_hosts, 'flexera')
    path join(["/finops-analytics/v1/orgs/", rs_org_id, "/cloud-vendor-accounts"])
    header "Api-Version", "1.0"
  end
  result do
    encoding "json"
    collect jmes_path(response, "values[*]") do
      field "id", jmes_path(col_item, "aws.accountId")
      field "name", jmes_path(col_item, "name")
      field "tags", jmes_path(col_item, "tags")
    end
  end
end

datasource "ds_get_caller_identity" do
  request do
    auth $auth_aws
    host "sts.amazonaws.com"
    path "/"
    query "Action", "GetCallerIdentity"
    query "Version", "2011-06-15"
    header "User-Agent", "RS Policies"
  end
  result do
    encoding "xml"
    collect xpath(response, "//GetCallerIdentityResponse/GetCallerIdentityResult") do
      field "account", xpath(col_item, "Account")
    end
  end
end

datasource "ds_aws_account" do
  run_script $js_aws_account, $ds_cloud_vendor_accounts, $ds_get_caller_identity
end

script "js_aws_account", type:"javascript" do
  parameters "ds_cloud_vendor_accounts", "ds_get_caller_identity"
  result "result"
  code <<-EOS
  result = _.find(ds_cloud_vendor_accounts, function(account) {
    return account['id'] == ds_get_caller_identity[0]['account']
  })
  // This is in case the API does not return the relevant account info
  if (result == undefined) {
    result = {
      id: ds_get_caller_identity[0]['account'],
      name: "",
      tags: {}
    }
  }
EOS
end

datasource "ds_describe_regions" do
  request do
    auth $auth_aws
    host "ec2.amazonaws.com"
    path "/"
    query "Action", "DescribeRegions"
    query "Version", "2016-11-15"
    query "Filter.1.Name", "opt-in-status"
    query "Filter.1.Value.1", "opt-in-not-required"
    query "Filter.1.Value.2", "opted-in"
    # Header X-Meta-Flexera has no affect on datasource query, but is required for Meta Policies
    # Forces `ds_is_deleted` datasource to run first during policy execution
    header "Meta-Flexera", val($ds_is_deleted, "path")
  end
  result do
    encoding "xml"
    collect xpath(response, "//DescribeRegionsResponse/regionInfo/item", "array") do
      field "region", xpath(col_item, "regionName")
    end
  end
end

datasource "ds_regions" do
  run_script $js_regions, $ds_describe_regions, $param_regions_list, $param_regions_allow_or_deny
end

script "js_regions", type:"javascript" do
  parameters "ds_describe_regions", "param_regions_list", "param_regions_allow_or_deny"
  result "result"
code <<-EOS
  var allow_deny_test = { "Allow": true, "Deny": false };

  if (param_regions_list.length > 0) {
    result = _.filter(ds_describe_regions, function(item) {
      return _.contains(param_regions_list, item['region']) == allow_deny_test[param_regions_allow_or_deny];
    });
  } else {
    result = ds_describe_regions;
  }
EOS
end

datasource "ds_static_engine_support_dates" do
  run_script $js_parse_static_support_json, $param_static_engine_support_json
end

script "js_parse_static_support_json", type: "javascript" do
  parameters "param_static_engine_support_json"
  result "result"
  code <<-EOS
    var parsed_json = JSON.parse(param_static_engine_support_json);
    result = [];

    for (var i = 0; i < parsed_json.length; i++) {
      var item = parsed_json[i];
      result.push({
        engine: item["engine"],
        engineVersion: item["engineVersion"],
        endOfSupportDate: item["endOfSupportDate"]
      });
    }
  EOS
end

datasource "ds_rds_instances_set" do
  iterate $ds_regions
  request do
    auth $auth_aws
    pagination $pagination_aws
    host join(["rds.", val(iter_item, "region"), ".amazonaws.com"])
    path "/"
    query "Action", "DescribeDBInstances"
    query "Version", "2014-10-31"
    header "User-Agent", "RS Policies"
    header "Content-Type", "text/xml"
  end
  result do
    encoding "xml"
    collect xpath(response, "//DescribeDBInstancesResponse/DescribeDBInstancesResult/DBInstances/DBInstance[*]", "array") do
      field "instanceId", xpath(col_item, "DbiResourceId")
      field "instanceArn", xpath(col_item, "DBInstanceArn")
      field "databaseEngine", xpath(col_item, "Engine")
      field "engineVersion", xpath(col_item, "EngineVersion")
      field "databaseName", xpath(col_item, "DBName")
      field "name", xpath(col_item, "DBInstanceIdentifier")
      field "instanceClass", xpath(col_item, "DBInstanceClass")
      field "region", val(iter_item, "region")
      field "availabilityZone", xpath(col_item, "AvailabilityZone")
    end
  end
end

datasource "ds_resource_tags" do
  iterate $ds_rds_instances_set
  request do
    run_script $js_resource_tags, val(iter_item, "instanceArn"), val(iter_item, "region")
  end
  result do
    encoding "xml"
    collect xpath(response, "//ListTagsForResourceResponse/ListTagsForResourceResult/TagList/Tag[*]", "array") do
      field "instanceId", val(iter_item, "instanceId")
      field "key", xpath(col_item, "Key")
      field "value", xpath(col_item, "Value")
    end
  end
end

script "js_resource_tags", type: "javascript" do
  parameters "instanceArn", "region"
  result "request"
  code <<-EOS
    var request = {
    auth: "auth_aws",
    host: "rds." + region + ".amazonaws.com",
    path: "/",
    headers: {
      "User-Agent": "RS Policies",
      "Content-Type": "text/xml"
    },
    query_params: {
      "Action": "ListTagsForResource",
      "ResourceName": instanceArn,
      "Version": "2014-10-31"
    }
    };
  EOS
end

datasource "ds_rds_instances" do
  run_script $js_rds_instances, $ds_rds_instances_set, $ds_resource_tags, $ds_aws_account, $ds_applied_policy, $param_exclusion_tags, $param_exclusion_tags_boolean, $param_eos_notification, $ds_static_engine_support_dates
end

script "js_rds_instances", type: "javascript" do
  parameters "ds_rds_instances_set", "ds_resource_tags", "ds_aws_account", "ds_applied_policy", "param_exclusion_tags", "param_exclusion_tags_boolean", "param_eos_notification", "ds_static_engine_support_dates"
  result "result"
  code <<-EOS
    result = [];

    function daysUntil(dateStr) {
      var today = new Date();
      var eosDate = new Date(dateStr);
      var diffTime = eosDate.getTime() - today.getTime();
      return Math.ceil(diffTime / (1000 * 60 * 60 * 24));
    }

    // Build lookup table from static support dates
    var eos_lookup = {};
    for (var i = 0; i < ds_static_engine_support_dates.length; i++) {
      var item = ds_static_engine_support_dates[i];
      var engine = item["engine"] ? item["engine"].toLowerCase() : null;
      var version = item["engineVersion"];
      var eos_date = item["endOfSupportDate"];

      if (engine && version && eos_date) {
        if (!eos_lookup[engine]) {
          eos_lookup[engine] = {};
        }
        eos_lookup[engine][version] = eos_date;
      }
    }

    // Build tag map
    var tag_map = {};
    for (var j = 0; j < ds_resource_tags.length; j++) {
      var tag = ds_resource_tags[j];
      var id = tag["instanceId"];

      if (!tag_map[id]) {
        tag_map[id] = [];
     }

     if (tag["key"] && tag["key"] !== "" && tag["value"] && tag["value"] !== "") {
       tag_map[id].push(tag["key"] + "=" + tag["value"]);
     }
    }

    function isExcluded(instanceId) {
      var instanceTags = tag_map[instanceId] || [];
      if (param_exclusion_tags.length === 0) return false;

      if (param_exclusion_tags_boolean === "Any") {
        for (var i = 0; i < param_exclusion_tags.length; i++) {
          if (instanceTags.indexOf(param_exclusion_tags[i]) !== -1) {
            return true;
          }
        }
        return false;
      } else {
        for (var i = 0; i < param_exclusion_tags.length; i++) {
          if (instanceTags.indexOf(param_exclusion_tags[i]) === -1) {
            return false;
          }
        }
        return true;
      }
    }

    // Evaluate each RDS instance
    for (var k = 0; k < ds_rds_instances_set.length; k++) {
      var instance = ds_rds_instances_set[k];
      var engine = instance["databaseEngine"];
      var version = instance["engineVersion"];
      var instanceId = instance["instanceId"];
      var instanceArn = instance["instanceArn"];
      var name = instance["name"];

      if (!engine || !version || isExcluded(instanceId)) {
        continue;
      }

      var eos_date = null;
      var engine_key = engine.toLowerCase();

      // Match logic: postgres uses engineVersion only, mysql may use full version
      if (eos_lookup[engine_key] && eos_lookup[engine_key][version]) {
        eos_date = eos_lookup[engine_key][version];
      }


      if (eos_date != null) {
        var days_remaining = daysUntil(eos_date);

        if (days_remaining <= Number(param_eos_notification)) {
          var raw_tags = tag_map[instanceId] || [];
          var clean_tags = [];
          for (var t = 0; t < raw_tags.length; t++) {
            if (raw_tags[t] && raw_tags[t] !== "") {
              clean_tags.push(raw_tags[t]);
            }
          }


      result.push({
        instanceId: instanceId,
        instanceArn: instanceArn,
        databaseEngine: engine,
        engineVersion: version,
        name: name,
        endOfSupport: eos_date,
        daysUntilEndOfSupport: days_remaining,
        tags: clean_tags.join(","),
        accountID: ds_aws_account["id"],
        accountName: ds_aws_account["name"],
        region: instance["region"]
  });
        }
      }
    }
  EOS
end

###############################################################################
# Policy
###############################################################################

policy "pol_eos_rds" do
  validate $ds_rds_instances do
    summary_template "{{ len data }} RDS Instances Approaching End of Support"
    check logic_or($ds_parent_policy_terminated, eq(0, 1))
    escalate $esc_email
    hash_exclude "tags"
    export do
      resource_level true
      field "accountID" do
        label "Account ID"
        path "accountID"
      end
      field "accountName" do
        label "Account Name"
        path "accountName"
      end
      field "instanceId" do
        label "Resource ID"
        path "instanceId"
      end
      field "name" do
        label "Resource Name"
        path "name"
      end
      field "tags" do
        label "Resource Tags"
        path "tags"
      end
      field "region" do
        label "Region"
        path "region"
      end
      field "databaseEngine" do
        label "Database Engine"
        path "databaseEngine"
      end
      field "engineVersion" do
        label "Engine Version"
        path "engineVersion"
      end
      field "endOfSupport" do
        label "End of Support Date"
        path "endOfSupport"
      end
      field "daysUntilEndOfSupport" do
        label "Days Until End of Support"
        path "daysUntilEndOfSupport"
      end
      field "instanceArn" do
        label "ARN"
        path "instanceArn"
      end
      field "id" do
        label "id"
        path "instanceId"
      end
    end
  end
end

###############################################################################
# Escalations
###############################################################################

escalation "esc_email" do
  automatic true
  label "Send Email"
  description "Send incident email"
  email $param_email
end

###############################################################################
# Meta Policy [alpha]
# Not intended to be modified or used by policy developers
###############################################################################

# If the meta_parent_policy_id is not set it will evaluate to an empty string and we will look for the policy itself,
# if it is set we will look for the parent policy.
datasource "ds_get_parent_policy" do
  request do
    auth $auth_flexera
    host val($ds_flexera_api_hosts, "flexera")
    path join(["/policy/v1/orgs/", rs_org_id, "/projects/", rs_project_id, "/applied-policies/", switch(ne(meta_parent_policy_id, ""), meta_parent_policy_id, policy_id) ])
	  ignore_status [404]
  end
  result do
    encoding "json"
    field "id", jmes_path(response, "id")
  end
end

# If the policy was applied by a meta_parent_policy we confirm it exists if it doesn't we confirm we are deleting
# This information is used in two places:
# - determining whether or not we make a delete call
# - determining if we should create an incident (we don't want to create an incident on the run where we terminate)
datasource "ds_parent_policy_terminated" do
  run_script $js_parent_policy_terminated, $ds_get_parent_policy, meta_parent_policy_id
end

script "js_parent_policy_terminated", type: "javascript" do
  parameters "ds_get_parent_policy", "meta_parent_policy_id"
  result "result"
  code <<-'EOS'
  result = meta_parent_policy_id != "" && ds_get_parent_policy["id"] == undefined
EOS
end

# Two potentials ways to set this up:
# - this way and make a unneeded 'get' request when not deleting
# - make the delete request an interate and have it iterate over an empty array when not deleting and an array with one item when deleting
datasource "ds_terminate_self" do
  request do
    run_script $js_make_terminate_request, $ds_parent_policy_terminated, $ds_flexera_api_hosts, policy_id, rs_org_id, rs_project_id
  end
end

script "js_make_terminate_request", type: "javascript" do
  parameters "ds_parent_policy_terminated", "ds_flexera_api_hosts", "policy_id", "rs_org_id", "rs_project_id"
  result "request"
  code <<-EOS
  var request = {
    auth: "auth_flexera",
    host: ds_flexera_api_hosts["flexera"],
    path: [ "/policy/v1/orgs/", rs_org_id, "/projects/", rs_project_id, "/applied-policies", policy_id ? "/"+policy_id : "" ].join(''),
    verb: ds_parent_policy_terminated ? "DELETE" : "GET"
  }
EOS
end

# This is just a way to have the check delete request connect to the farthest leaf from policy.
# We want the delete check to the first thing the policy does to avoid the policy erroring before it can decide whether or not it needs to self terminate
# Example a customer deletes a credential and then terminates the parent policy. We still want the children to self terminate
# The only way I could see this not happening is if the user who applied the parent_meta_policy was offboarded or lost policy access, the policies who are impersonating the user
# would not have access to self-terminate
# It may be useful for the backend to enable a mass terminate at some point for all meta_child_policies associated with an id.
datasource "ds_is_deleted" do
  run_script $js_is_deleted, $ds_terminate_self
end

script "js_is_deleted", type: "javascript" do
  parameters "ds_terminate_self"
  result "result"
  code 'result = { path: "/"}'
end

name "Azure Untagged Resources"
rs_pt_ver 20180301
type "policy"
short_description "Find all Azure resources missing any of the user provided tags with the option to update the resources with the missing tags. See the [README](https://github.com/flexera-public/policy_templates/tree/master/compliance/azure/azure_untagged_resources) and [docs.flexera.com/flexera/EN/Automation](https://docs.flexera.com/flexera/EN/Automation/AutomationGS.htm) to learn more."
long_description ""
category "Compliance"
severity "low"
default_frequency "weekly"
info(
  version: "3.0",
  provider: "Azure",
  service: "Compute",
  policy_set: "Untagged Resources"
)

###############################################################################
# Parameters
###############################################################################

parameter "param_email" do
  type "list"
  category "Policy Settings"
  label "Email addresses"
  description "A list of email addresses to notify."
  default []
end

parameter "param_azure_endpoint" do
  type "string"
  category "Policy Settings"
  label "Azure Endpoint"
  description "Select the API endpoint to use for Azure. Use default value of management.azure.com unless using Azure China."
  allowed_values "management.azure.com", "management.chinacloudapi.cn"
  default "management.azure.com"
end

parameter "param_tags" do
  type "list"
  category "Filters"
  label "Tags (Key:Value)"
  description "Cloud native tags to find resources with missing tags. Use Key:Value format for specific tag key/value pairs, and Key:* format to match any resource missing a particular key, regardless of value. Examples: env:production, DO_NOT_DELETE:*"
  allowed_pattern /(^$)|[\w]*\:.*/
  default []
end

parameter "param_subscriptions_allow_or_deny" do
  type "string"
  category "Filters"
  label "Allow/Deny Subscriptions"
  description "Allow or Deny entered Subscriptions. See the README for more details."
  allowed_values "Allow", "Deny"
  default "Allow"
end

parameter "param_subscriptions_list" do
  type "list"
  category "Filters"
  label "Allow/Deny Subscriptions List"
  description "A list of allowed or denied Subscription IDs/names. See the README for more details."
  default []
end

parameter "param_regions_allow_or_deny" do
  type "string"
  category "Filters"
  label "Allow/Deny Regions"
  description "Allow or Deny entered regions. See the README for more details."
  allowed_values "Allow", "Deny"
  default "Allow"
end

parameter "param_regions_list" do
  type "list"
  category "Filters"
  label "Allow/Deny Regions List"
  description "A list of allowed or denied regions. See the README for more details."
  default []
end

parameter "param_automatic_action" do
  type "list"
  category "Actions"
  label "Automatic Actions"
  description "When this value is set, this policy will automatically take the selected action."
  allowed_values ["Tag Instances", "Stop Instances", "Delete Instances"]
  default []
end

###############################################################################
# Authentication
###############################################################################

credentials "auth_azure" do
  schemes "oauth2"
  label "Azure"
  description "Select the Azure Resource Manager Credential from the list."
  tags "provider=azure_rm"
end

credentials "auth_flexera" do
  schemes "oauth2"
  label "Flexera"
  description "Select Flexera One OAuth2 credentials"
  tags "provider=flexera"
end

###############################################################################
# Pagination
###############################################################################

pagination "pagination_azure" do
  get_page_marker do
    body_path "nextLink"
  end
  set_page_marker do
    uri true
  end
end

###############################################################################
# Datasources & Scripts
###############################################################################

# Get applied policy metadata for use later
datasource "ds_applied_policy" do
  request do
    auth $auth_flexera
    host rs_governance_host
    path join(["/api/governance/projects/", rs_project_id, "/applied_policies/", policy_id])
    header "Api-Version", "1.0"
  end
end

datasource "ds_azure_subscriptions" do
  request do
    auth $auth_azure
    pagination $pagination_azure
    host $param_azure_endpoint
    path "/subscriptions/"
    query "api-version", "2020-01-01"
    header "User-Agent", "RS Policies"
    # Header X-Meta-Flexera has no affect on datasource query, but is required for Meta Policies
    # Forces `ds_is_deleted` datasource to run first during policy execution
    header "Meta-Flexera", val($ds_is_deleted, "path")
  end
  result do
    encoding "json"
    collect jmes_path(response, "value[*]") do
      field "id", jmes_path(col_item, "subscriptionId")
      field "name", jmes_path(col_item, "displayName")
      field "state", jmes_path(col_item, "state")
    end
  end
end

datasource "ds_azure_subscriptions_filtered" do
  run_script $js_azure_subscriptions_filtered, $ds_azure_subscriptions, $param_subscriptions_allow_or_deny, $param_subscriptions_list
end

script "js_azure_subscriptions_filtered", type: "javascript" do
  parameters "ds_azure_subscriptions", "param_subscriptions_allow_or_deny", "param_subscriptions_list"
  result "result"
  code <<-'EOS'
  if (param_subscriptions_list.length > 0) {
    result = _.filter(ds_azure_subscriptions, function(subscription) {
      include_subscription = _.contains(param_subscriptions_list, subscription['id']) || _.contains(param_subscriptions_list, subscription['name'])

      if (param_subscriptions_allow_or_deny == "Deny") {
        include_subscription = !include_subscription
      }

      return include_subscription
    })
  } else {
    result = ds_azure_subscriptions
  }
EOS
end

datasource "ds_azure_instances" do
  iterate $ds_azure_subscriptions_filtered
  request do
    auth $auth_azure
    pagination $pagination_azure
    host $param_azure_endpoint
    path join(["/subscriptions/", val(iter_item, "id"), "/providers/Microsoft.Compute/virtualMachines"])
    query "api-version", "2019-03-01"
    header "User-Agent", "RS Policies"
    # Ignore status 400, 403, and 404 which can be returned in certain (legacy) types of Azure Subscriptions
    ignore_status [400, 403, 404]
  end
  result do
    encoding "json"
    collect jmes_path(response, "value[*]") do
      field "resourceId", jmes_path(col_item, "id")
      field "resourceGroup", get(4, split(jmes_path(col_item, "id"), '/'))
      field "resourceKind", jmes_path(col_item, "type")
      field "name", jmes_path(col_item, "name")
      field "region", jmes_path(col_item, "location")
      field "osType", jmes_path(col_item, "properties.storageProfile.osDisk.osType")
      field "resourceType", jmes_path(col_item, "properties.hardwareProfile.vmSize")
      field "tags", jmes_path(col_item, "tags")
      field "subscriptionId",val(iter_item, "id")
      field "subscriptionName",val(iter_item, "name")
    end
  end
end

datasource "ds_azure_instances_region_filtered" do
  run_script $js_azure_instances_region_filtered, $ds_azure_instances, $param_regions_allow_or_deny, $param_regions_list
end

script "js_azure_instances_region_filtered", type: "javascript" do
  parameters "ds_azure_instances", "param_regions_allow_or_deny", "param_regions_list"
  result "result"
  code <<-'EOS'
  if (param_regions_list.length > 0) {
    result = _.filter(ds_azure_instances, function(vm) {
      include_vm = _.contains(param_regions_list, vm['region'])

      if (param_regions_allow_or_deny == "Deny") {
        include_vm = !include_vm
      }

      return include_vm
    })
  } else {
    result = ds_azure_instances_tag_filtered
  }
EOS
end

datasource "ds_azure_instances_missing_tags" do
  run_script $js_azure_instances_missing_tags, $ds_azure_instances_region_filtered, $param_tags
end

script "js_azure_instances_missing_tags", type: "javascript" do
  parameters "ds_azure_instances_region_filtered", "param_tags"
  result "result"
  code <<-'EOS'
  if (param_exclusion_tags.length > 0) {
    result = _.filter(ds_azure_instances, function(vm) {
      vm_tags = []

      if (typeof(vm['tags']) == 'object') {
        _.each(Object.keys(vm['tags']), function(key) {
          vm_tags.push([key, ":", vm['tags'][key]].join(''))
          vm_tags.push([key, ":*"].join(''))
        })
      }

      include_vm = false

      _.each(param_exclusion_tags, function(exclusion_tag) {
        if (_.contains(vm_tags, exclusion_tag) == false) {
          include_vm = true
        }
      })

      return include_vm
    })
  } else {
    result = []
  }
EOS
end

datasource "ds_missing_tags_incident" do
  run_script $js_missing_tags_incident, $ds_azure_instances_missing_tags, $ds_applied_policy, $param_tags
end

script "js_missing_tags_incident", type: "javascript" do
  parameters "ds_azure_instances_missing_tags", "ds_applied_policy", "param_tags"
  result "result"
  code <<-'EOS'
  result = _.map(ds_azure_instances_missing_tags, function(instance) {
    instance_tags = []

    if (typeof(instance['tags']) == 'object') {
      _.each(Object.keys(instance['tags']), function(key) {
        instance_tags.push(key + '=' + instance['tags'][key])
      })
    }

    return {
      accountID: instance['subscriptionId'],
      accountName: instance['subscriptionName'],
      resourceGroup: instance['resourceGroup'],
      resourceName: instance['name'],
      resourceID: instance['resourceId'],
      resourceType: instance['resourceType'],
      resourceKind: instance['resourceKind'],
      region: instance['region'],
      osType: instance['osType'],
      tags_object: instance['tags'],
      service: 'Microsoft.Compute',
      tags: instance_tags.join(', '),
      policy_name: ds_applied_policy['name']
    }
  })

  // Dummy item to ensure that the check statement in the policy executes at least once
  result.push({
    accountID: "",    accountName: "",   resourceGroup: "",  resourceName: "",
    resourceID: "",   resourceType: "",  resourceKind: "",   region: "",
    osType: "",       tags_object: "",   service: "",        tags: "",
    policy_name: ""
  })

  message = ["The following Azure virtual machines are missing one or more of the following tags:\n\n"]

  _.each(param_tags, function(tag) {
    key = tag.split(':')[0]
    value = tag.split(':')[1]

    message.push("- ")
    message.push(key)
    message.push("=")
    message.push(value)
    message.push("\n")
  })

  disclaimer = "\n\nThe above settings can be modified by editing the applied policy and changing the appropriate parameters."

  result[0]['message'] = message.join('') + disclaimer
EOS
end


###############################################################################
# Policy
###############################################################################

policy "pol_azure_missing_tags" do
  validate_each $ds_missing_tags_incident do
    summary_template "{{ with index data 0 }}{{ .policy_name }}{{ end }}: {{ len data }} Azure Virtual Machines Missing Tags Found"
    detail_template "{{ with index data 0 }}{{ .message }}{{ end }}"
    # Policy check fails and incident is created only if data is not empty and the Parent Policy has not been terminated
    check logic_or($ds_parent_policy_terminated, eq(val(item, "resourceID"), ""))
    escalate $esc_email
    escalate $esc_tag_instances
    escalate $esc_stop_instances
    escalate $esc_delete_instances
    hash_exclude "message"
    export do
      resource_level true
      field "accountID" do
        label "Subscription ID"
      end
      field "accountName" do
        label "Subscription Name"
      end
      field "resourceGroup" do
        label "Resource Group"
      end
      field "resourceName" do
        label "Resource Name"
      end
      field "resourceID" do
        label "Resource ID"
      end
      field "tags" do
        label "Resource Tags"
      end
      field "resourceType" do
        label "Instance Size"
      end
      field "resourceKind" do
        label "Resource Kind"
      end
      field "region" do
        label "Region"
      end
      field "osType" do
        label "Operating System"
      end
      field "service" do
        label "Service"
      end
      field "id" do
        label "ID"
        path "resourceId"
      end
    end
  end
end

###############################################################################
# Escalations
###############################################################################

escalation "esc_email" do
  automatic true
  label "Send Email"
  description "Send incident email"
  email $param_email
end

escalation "esc_tag_resources" do
  automatic false
  label "Add Tags"
  description "Update tags of the selected resource"
  parameter "param_tags_to_add" do
    type "list"
    category "Actions"
    label "Add Tags (Key:Value)"
    description "Cloud native tags to add to resources with missing tags. Use Key:Value format. Examples: env:production, team:finance"
    allowed_pattern /(^$)|[\w]*\:.*/
    default []
  end
  run "tag_instances", data, $param_azure_endpoint, $param_tags_to_add
end

escalation "esc_stop_instances" do
  automatic contains($param_automatic_action, "Stop Instances")
  label "Stop Instances"
  description "Approval to stop all selected instances"
  run "stop_instances", data, $param_azure_endpoint
end

escalation "esc_delete_instances" do
  automatic contains($param_automatic_action, "Delete Instances")
  label "Delete Instances"
  description "Approval to delete all selected instances"
  run "delete_instances", data, $param_azure_endpoint
end

###############################################################################
# Cloud Workflow
###############################################################################

define cwf_add_tags($data, $param_tags_to_add, $param_azure_endpoint) return $all_responses, $list_of_tags_to_add_foreach_data do
  $$log = []
  $all_responses = []

  $subscriptionId = first($data)["subscriptionId"]
  $$log << "SubscriptionId: "+$subscriptionId

  $providers_response = http_request(
    auth: $$azure_auth,
    verb: "get",
    host: $param_azure_endpoint,
    https: true,
    href: "/subscriptions/" + $subscriptionId +"/providers",
    query_strings: {
      "api-version": "2018-05-01"
    },
    headers: {
      "cache-control": "no-cache",
      "content-type": "application/json"
    }
  )
  $list_of_tags_to_add_foreach_data = []

  foreach $item in $data do
    #from the above request for providers, grab the body/value
    $providers_array = $providers_response["body"]["value"]
    $$log << "ID: "+$item["id"]
    $namespace = $item["namespace"]
    $$log << "Namespace: "+$namespace
    # Drop the provider's namespace from the resource type for example Microsoft.Compute/virtualMachines to virtualMachines
    $resource_type = join(split($item["resource_type"], "/")[1..], "/")
    $$log << "Resource Type: "+$resource_type
    $namespace_obj = select($providers_array, {"namespace": $namespace})
    if $namespace_obj == []
      $namespace_obj = select($providers_array, {"namespace": downcase($namespace)})
    end
    # Within the resourcetype array, get the resource type and the api version for example virtualMachines -> apiVersions = 2015-06-15
    $resource_type_obj = select($namespace_obj[0]["resourceTypes"], {"resourceType": $resource_type})
    $api_versions = $resource_type_obj[0]["apiVersions"]
    $api_version = first($api_versions)
    $$log << "API Version: "+$api_version

    #keep the old tags
    $old_tags_object = {}
    $old_tags = split( $item["existingTags"], ",")
    foreach $old_tag in $old_tags do
      $tag_key = first(split( $old_tag, "="))
      $tag_value = ""
      if $tag_key != last(split( $old_tag, "="))
        $tag_value = last(split( $old_tag, "="))
      end
      $old_tags_object[$tag_key] = $tag_value
    end

    #Tags that are entered as parameter to be applied
    $filtered_tags_to_add_obj = {}
    foreach $tag in $param_tags_to_add do
      $tag_key_to_add = first(split( $tag, "="))
      $tag_value_to_add = ""
      if $tag_key_to_add != last(split( $tag, "="))
        $tag_value_to_add = last(split( $tag, "="))
      end
      $filtered_tags_to_add_obj[$tag_key_to_add] = $tag_value_to_add
    end

    #Combine existing tags with tags to add
    $list_of_tags_to_add_foreach_data = $filtered_tags_to_add_obj + $old_tags_object

    #Update resource api is used to update tags
    #https://learn.microsoft.com/en-us/rest/api/resources/resources/update
    sub on_error: handle_error($update_resource_response) do
      $update_resource_response = http_request(
      auth: $$azure_auth,
        verb: "patch",
        host: $param_azure_endpoint,
        https: true,
        href: $item["id"],
        query_strings: {
          "api-version": $api_version
        },
        headers: {
          "cache-control": "no-cache",
          "content-type": "application/json"
        },
        body: {"tags": $list_of_tags_to_add_foreach_data}
      )
    end
    $all_responses << $update_resource_response
  end
end

define handle_error($response) do
  $status_code = $response["code"]
  if $status_code == 404
    $_error_behavior = "skip"
  else
    $_error_behavior = "raise"
  end
end

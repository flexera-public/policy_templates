name "Azure Instances not running FlexNet Inventory Agent - Cloud"
rs_pt_ver 20180301
type "policy"
short_description "Check instances that are not running the FlexNet Inventory Agent. \n See the [README](https://github.com/flexera/policy_templates/tree/master/compliance/azure/instances_without_fnm_agent) and [docs.rightscale.com/policies](https://docs.rightscale.com/policies/) to learn more."
long_description ""
severity "medium"
category "Compliance"
info(
  version: "2.0",
  provider: "Azure",
  service: "Compute",
  policy_set: "Instances not running FlexNet Inventory Agent"
)

###############################################################################
# Permissions
###############################################################################

permission "perm_read_creds" do
  actions   "rs_cm.show_sensitive","rs_cm.index_sensitive"
  resources "rs_cm.credentials"
end

###############################################################################
# User inputs
###############################################################################

parameter "param_email" do
  type "list"
  label "Email addresses to notify"
  description "Email addresses of the recipients you wish to notify when new incidents are created."
end

parameter "param_exclusion_tag_key" do
  type "string"
  category "User Inputs"
  label "Exclusion Tag Key"
  description "Azure-native Virtual machines tag to ignore VM's which has FNMS inventory agent running. Only supply the tag key. The policy assumes that the tag value is irrelevant."
end

parameter "param_fnms_url" do
  type "string"
  label "FNMS Report URL"
  description "Full FlexNet URL (e.g. https://demo.flexnetmanager.com/Suite )"
  allowed_pattern /^(https:\/\/)+[a-z0-9]+([\-\.]{1}[a-z0-9]+)*\.[a-z0-9]{2,5}(:[0-9]{1,5})?(\/.*)?$/
end

parameter "param_report_id" do
  type "string"
  label "FNMS Report ID"
  description "FlexNet manager Custom View ID."
end


###############################################################################
# Pagination
###############################################################################

pagination "azure_pagination" do
  get_page_marker do
    body_path "nextLink"
  end
  set_page_marker do
    uri true
  end
end

###############################################################################
# Authentication
###############################################################################

#authenticate with Azure
credentials "azure_auth" do
  schemes "oauth2"
  label "Azure"
  description "Select the Azure Resource Manager Credential from the list."
  tags "provider=azure_rm"
end

credentials "fnms_api_key_auth" do
  schemes "api_key"
  label "FNMS"
  description "Select the FNMS Token Credential from the list."
  tags "provider=flexera_fnms_api_key"
end

###############################################################################
# Datasources
###############################################################################

datasource "ds_subscriptions" do
  request do
    auth $azure_auth
    pagination $azure_pagination
    host "management.azure.com"
    path "/subscriptions/"
    query "api-version","2019-06-01"
    header "User-Agent", "RS Policies"
  end
  result do
    encoding "json"
    collect jmes_path(response, "value[*]") do
      field "subscriptionId", jmes_path(col_item,"subscriptionId")
      field "displayName", jmes_path(col_item,"displayName")
      field "state", jmes_path(col_item,"state")
    end
  end
end

datasource "ds_list_virtual_machines" do
  iterate $ds_subscriptions
  request do
    auth $azure_auth
    pagination $azure_pagination
    host "management.azure.com"
    path join(["/subscriptions/", val(iter_item,"subscriptionId"), "/providers/Microsoft.Compute/virtualMachines"])
    query "api-version","2018-06-01"
    header "User-Agent", "RS Policies"
  end
  result do
    encoding "json"
    collect jmes_path(response, "value[*]") do
        field "id", jmes_path(col_item,"id")
        field "name", jmes_path(col_item,"name")
        field "resourcename", get(4, split(jmes_path(col_item, "id"),"/"))
        field "location", jmes_path(col_item,"location")
        field "vmSize", jmes_path(col_item,"properties.hardwareProfile.vmSize")
        field "osType", jmes_path(col_item,"properties.storageProfile.osDisk.osType")
        field "tags", jmes_path(col_item,"tags")
        field "subscriptionId",val(iter_item,"subscriptionId")
        field "subscriptionName",val(iter_item,"displayName")
    end
  end
end

datasource 'ds_fnms_report' do
  request do
    run_script $js_fnms_report, $param_fnms_url, $param_report_id
  end
  result do
    encoding "xml"
    collect xpath(response,"//NewDataSet/SearchResults") do
      field "computerName", xpath(col_item, "ComputerName")
    end
  end
end

datasource "ds_formatted_instances", type: "javascript" do
  run_script $js_format_instances, $ds_list_virtual_machines, $ds_fnms_report, $param_exclusion_tag_key
end

###############################################################################
# Scripts
###############################################################################

#Formatter script for the Instance data
script "js_format_instances", type: "javascript" do
  parameters "azure_VMs","ds_fnms_report", "param_exclusion_tag_key"
  result "result"
  code <<-EOS
    var result = [];
  fnms_instance_name=[];
    _.each(ds_fnms_report, function(instance){
      fnms_instance_name.push(instance["computerName"])
    })

    _.each(azure_VMs, function(vm){
      if((!_.has(vm.tags, param_exclusion_tag_key)) && fnms_instance_name.indexOf(vm["name"]) === -1){
        result.push(vm)
      }
    })
    result = _.sortBy(result, 'location');
    result = _.sortBy(result, 'subscriptionName');
  EOS
end

# Build the API request object dynamically to find the right authentiocation model.
script "js_fnms_report", type: "javascript" do
  parameters "fnms_host", "report_id"
  result "request"
  code <<-EOS
    var sHost = fnms_host.substr(fnms_host.indexOf('://')+3)
    if (sHost.indexOf('/') > -1)  sHost = sHost.substr(0,sHost.indexOf('/'))

    // Find the right schema
    var sScheme = "https";
    
    //Should we use User/password or Token to authenticate
    var sAuth = "fnms_api_key_auth";

    var sBody = '<?xml version="1.0" encoding="utf-8"?>'
    sBody    += '<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:tem="http://tempuri.org/">'
    sBody    += '  <soap:Body>'
    sBody    += '    <tem:GetCustomView>'
    sBody    += '      <tem:customViewID>' +report_id+ '</tem:customViewID>'
    sBody    += '     <tem:rowLimit>100000</tem:rowLimit>'
    sBody    += '   </tem:GetCustomView>'
    sBody    += '  </soap:Body>'
    sBody    += '</soap:Envelope>'

    var request = {
      auth: sAuth,
      scheme: sScheme,
      host: sHost,
      path: "/ManageSoftServices/ComplianceAPIService/ComplianceAPIService.asmx",
      verb: "POST",
      headers: {
        "Content-Type": "text/xml;charset=utf-8"
      },
      body: sBody
    } 
  EOS
end

###############################################################################
# Escalations
###############################################################################

escalation "report_instances" do
  email $param_email
end

###############################################################################
# Policy
###############################################################################

policy "policy_long_running_instances" do
  validate $ds_formatted_instances do
    summary_template "{{ rs_project_name }} (Account ID: {{ rs_project_id }}): {{len data }} is missing in FlexNet Manager."
    detail_template <<-EOS
EOS
    export do
      field "subscriptionName" do
        label "Subscription Name"
      end
      field "name" do
        label "VM Name"
      end
      field "resourcename" do
        label "Resource Name"
      end
      field "location" do
        label "Location"
      end
      field "vmSize" do
        label "VM Size"
      end
      field "osType" do
        label "OS Type"
      end
      field "tags" do
        label "Tags"
      end
    end

    escalate $report_instances
    check eq(size(data),0)
  end
end
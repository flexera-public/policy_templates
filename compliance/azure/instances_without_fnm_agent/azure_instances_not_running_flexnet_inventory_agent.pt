name "Azure Instances not running FlexNet Inventory Agent"
rs_pt_ver 20180301
type "policy"
short_description "Check instances that are not running the FlexNet Inventory Agent. This template uses the SOAP version of the FlexNet Manager APIs. See the [README](https://github.com/flexera-public/policy_templates/tree/master/compliance/azure/instances_without_fnm_agent) and [docs.flexera.com/flexera/EN/Automation](https://docs.flexera.com/flexera/EN/Automation/AutomationGS.htm) to learn more."
long_description ""
severity "medium"
category "Compliance"
default_frequency "weekly"
info(
  version: "3.0",
  provider: "Azure",
  service: "Compute",
  policy_set: "Instances not running FlexNet Inventory Agent"
)

###############################################################################
# User inputs
###############################################################################

parameter "param_email" do
  type "list"
  label "Email addresses to notify"
  description "Email addresses of the recipients you wish to notify when new incidents are created."
  default []
end

parameter "param_azure_endpoint" do
  type "string"
  label "Azure Endpoint"
  allowed_values "management.azure.com", "management.chinacloudapi.cn"
  default "management.azure.com"
end

parameter "param_subscription_allowed_list" do
  label "Subscription Allowed List"
  type "list"
  description "Allowed Subscriptions, if empty, all subscriptions will be checked"
  default []
end

parameter "param_exclusion_tag_key" do
  type "string"
  category "User Inputs"
  label "Exclusion Tag Key"
  description "Azure-native Virtual machines tag to ignore VM's which has FNMS inventory agent running. Only supply the tag key. The policy assumes that the tag value is irrelevant."
  default ""
end

parameter "param_fnms_host" do
  type "string"
  label "FlexNet Manager host"
  description "Flexera One FlexNet Manager host"
  allowed_values "slo.app.flexera.com", "slo.app.flexera.eu", "slo.app.flexera.au", "slo-uat.app.flexera.com", "slo-uat.app.flexera.eu", "slo-uat.app.flexera.au"
  # No default value because parameter is required
end

parameter "param_report_id" do
  type "string"
  label "FNMS Report ID"
  description "FlexNet manager Custom View ID."
end


###############################################################################
# Pagination
###############################################################################

pagination "azure_pagination" do
  get_page_marker do
    body_path "nextLink"
  end
  set_page_marker do
    uri true
  end
end

###############################################################################
# Authentication
###############################################################################

#authenticate with Azure
credentials "auth_azure" do
  schemes "oauth2"
  label "Azure"
  description "Select the Azure Resource Manager Credential from the list."
  tags "provider=azure_rm"
end

credentials "auth_flexera" do
  schemes "oauth2"
  label "flexera"
  description "Select Flexera One OAuth2 credentials."
  tags "provider=flexera"
end

###############################################################################
# Datasources
###############################################################################

datasource "ds_subscriptions" do
  request do
    auth $auth_azure
    pagination $azure_pagination
    host $param_azure_endpoint
    path "/subscriptions/"
    query "api-version","2019-06-01"
    header "User-Agent", "RS Policies"
  end
  result do
    encoding "json"
    collect jmes_path(response, "value[*]") do
      field "subscriptionId", jmes_path(col_item,"subscriptionId")
      field "displayName", jmes_path(col_item,"displayName")
      field "state", jmes_path(col_item,"state")
    end
  end
end

datasource "ds_filtered_subscriptions" do
  run_script $js_filtered_subscriptions, $ds_subscriptions, $param_subscription_allowed_list
end

script "js_filtered_subscriptions", type: "javascript" do
  parameters "ds_subscriptions", "param_subscription_allowed_list"
  result "results"
  code <<-EOS
  var results = []
  if ( param_subscription_allowed_list.length != 0){
    results = []
    _.each(param_subscription_allowed_list, function(sub){
      var found = _.find(ds_subscriptions, function(item){
        return item.subscriptionId == sub || item.displayName.toLowerCase() == sub.toLowerCase();
      })
      results.push(found)
    })
  } else {
    results = ds_subscriptions
  }
EOS
end

datasource "ds_list_virtual_machines" do
  iterate $ds_filtered_subscriptions
  request do
    auth $auth_azure
    pagination $azure_pagination
    host $param_azure_endpoint
    path join(["/subscriptions/", val(iter_item,"subscriptionId"), "/providers/Microsoft.Compute/virtualMachines"])
    query "api-version","2018-06-01"
    header "User-Agent", "RS Policies"
    # Ignore status 400, 403, and 404 which can be returned in certain (legacy) types of Azure Subscriptions
    ignore_status [400,403,404]
  end
  result do
    encoding "json"
    collect jmes_path(response, "value[*]") do
        field "id", jmes_path(col_item,"id")
        field "name", jmes_path(col_item,"name")
        field "resourcename", get(4, split(jmes_path(col_item, "id"),"/"))
        field "location", jmes_path(col_item,"location")
        field "vmSize", jmes_path(col_item,"properties.hardwareProfile.vmSize")
        field "osType", jmes_path(col_item,"properties.storageProfile.osDisk.osType")
        field "tags", jmes_path(col_item,"tags")
        field "subscriptionId",val(iter_item,"subscriptionId")
        field "subscriptionName",val(iter_item,"displayName")
    end
  end
end

# Make API call and get the report data
datasource "ds_fnms_report" do
  request do
    auth $auth_flexera
    host $param_fnms_host
    verb "POST"
    scheme "https"
    path "/ManageSoftServices/ComplianceAPIService/ComplianceAPIService.asmx"
    query "orgid", to_s(rs_org_id) # Must convert rs_org_id to string otherwise query param does not get set
    header "Content-Type", "text/xml;charset=utf-8"
    body join(['<?xml version="1.0" encoding="utf-8"?>',
                '<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:tem="http://tempuri.org/">',
                '  <soap:Body>',
                '    <tem:GetCustomView>',
                '      <tem:customViewID>', $param_report_id, '</tem:customViewID>',
                '      <tem:rowLimit>100000</tem:rowLimit>',
                '   </tem:GetCustomView>',
                '  </soap:Body>',
                '</soap:Envelope>'])
  end
  result do
    encoding "xml"
    collect xpath(response,"//NewDataSet/SearchResults") do
      field "computerName", xpath(col_item, "ComputerName")
    end
  end
end

datasource "ds_formatted_instances", type: "javascript" do
  run_script $js_format_instances, $ds_list_virtual_machines, $ds_fnms_report, $param_exclusion_tag_key
end

script "js_format_instances", type: "javascript" do
  parameters "azure_VMs","ds_fnms_report", "param_exclusion_tag_key"
  result "result"
  code <<-EOS
    var result = [];
  fnms_instance_name=[];
    _.each(ds_fnms_report, function(instance){
      fnms_instance_name.push(instance["computerName"].toLowerCase())
    })

    _.each(azure_VMs, function(vm){
      if((!_.has(vm.tags, param_exclusion_tag_key)) && fnms_instance_name.indexOf(vm["name"].toLowerCase()) === -1){
        result.push(vm)
      }
    })
    result = _.sortBy(result, 'location');
    result = _.sortBy(result, 'subscriptionName');
  EOS
end

###############################################################################
# Escalations
###############################################################################

escalation "report_instances" do
  automatic true
  label "Send Email"
  description "Send incident email"
  email $param_email
end

###############################################################################
# Policy
###############################################################################

policy "policy_long_running_instances" do
  validate $ds_formatted_instances do
    summary_template "{{ rs_project_name }} (Account ID: {{ rs_project_id }}): {{len data }} is missing in FlexNet Manager."
    escalate $report_instances
    check eq(size(data),0)
    export do
      resource_level true
      field "subscriptionName" do
        label "Subscription Name"
      end
      field "id" do
        label "VM Name"
        path "name"
      end
      field "resourcename" do
        label "Resource Name"
      end
      field "location" do
        label "Location"
      end
      field "vmSize" do
        label "VM Size"
      end
      field "osType" do
        label "OS Type"
      end
      field "tags" do
        label "Tags"
      end
    end
  end
end

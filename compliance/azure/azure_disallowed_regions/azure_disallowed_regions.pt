name "Azure Disallowed Regions"
rs_pt_ver 20180301
type "policy"
short_description "Check for instances that are in a disallowed region with the option to terminate them. See the [README](https://github.com/flexera/policy_templates/tree/master/compliance/azure/azure_disallowed_regions) and [docs.rightscale.com/policies](https://docs.rightscale.com/policies/) to learn more."
long_description ""
severity "medium"
category "Compliance"
info(
  version: "2.0",
  provider: "Azure",
  service: "Compute",
  policy_set: "Disallowed Regions"
  )

###############################################################################
# Permissions
###############################################################################

permission "perm_read_creds" do
  actions   "rs_cm.show_sensitive","rs_cm.index_sensitive"
  resources "rs_cm.credentials"
end

parameter "param_email" do
  type "list"
  label "Email addresses of the recipients you wish to notify"
end

parameter "param_approved_region" do
  type "list"
  label "Approved Azure Region(s)"
  category "Azure"
end

#authenticate with Azure
credentials "azure_auth" do
  schemes "oauth2"
  label "Azure"
  description "Select the Azure Resource Manager Credential from the list."
  tags "provider=azure_rm"
end

pagination "azure_pagination" do
  get_page_marker do
    body_path "nextLink"
  end
  set_page_marker do
    uri true
  end
end

#get all subscription details.
datasource "ds_subscriptions" do
  request do
    auth $azure_auth
    pagination $azure_pagination
    host "management.azure.com"
    path "/subscriptions/"
    query "api-version","2019-06-01"
    header "User-Agent", "RS Policies"
  end
  result do
    encoding "json"
    collect jmes_path(response, "value[*]") do
      field "subscriptionId", jmes_path(col_item,"subscriptionId")
      field "displayName", jmes_path(col_item,"displayName")
      field "state", jmes_path(col_item,"state")
    end
  end
end

datasource "azure_resources" do
  iterate $ds_subscriptions
  request do
    auth $azure_auth
    pagination $azure_pagination
    host "management.azure.com"
	path join(["/subscriptions/", val(iter_item,"subscriptionId"), "/resources"])
    query "api-version","2018-02-01"
    header "User-Agent", "RS Policies"
  end
  result do
    encoding "json"
    collect jmes_path(response, "value[*]") do
      field "id", jmes_path(col_item,"id")
      field "region", jmes_path(col_item,"location")
      field "name", jmes_path(col_item,"name")
	  field "managedBy",jmes_path(col_item,"managedBy")
	  field "subscriptionId",val(iter_item,"subscriptionId")
      field "subscriptionName",val(iter_item,"displayName")
    end
  end
end

datasource "filtered_resources" do
  run_script $js_filter_resources, $azure_resources, $param_approved_region
end

script "js_filter_resources", type: "javascript" do
  parameters "azure_resources", "param_approved_region"
  result "result"
  code <<-EOS
    var result = [];

    // Iterate through all resources
    _.each(azure_resources, function(ar){
      console.log(ar.name)
      if (_.contains(param_approved_region, ar.region)) {

      } else {
	    if(ar.managedBy==null){
	      result.push({
          id: ar["id"],
          region: ar["region"],
          name: ar["name"],
		  subscriptionName: ar["subscriptionName"],
		  managedBy: "NA"
	      })
	    }else{  
          result.push({
           id: ar["id"],
           region: ar["region"],
           name: ar["name"],
		   subscriptionName: ar["subscriptionName"],	   
		   managedBy: ar["managedBy"]	
         })
        }
	  }
    })
    result = _.sortBy(result, 'subscriptionName');
    result = _.sortBy(result, 'region');
EOS
end

policy "azure_resource_policy" do
  validate $filtered_resources do
    summary_template "{{ rs_project_name }} (Account ID: {{ rs_project_id }}): {{ len data }} Azure Resources out of compliance"
    detail_template <<-EOS
# Azure Resources out of compliance
| Subscription Name | Resource Name | Azure Region | Resource ID |
| -----------| ------------ | ----------------------- | ------------- | 
{{ range data -}}
| {{.subscriptionName}} | {{.name}} | {{.region}} | {{.id}} |
{{ end -}}
EOS
    escalate $email
    escalate $delete_resources
    check eq(size(data), 0)
  end
end

escalation "email" do
   email $param_email
end

escalation "delete_resources" do
  request_approval  do
    label "Approve Resource Deletion"
    description "Approve escalation to run RightScale Cloud Workflow to destroy Azure resources in disallowed regions"
    parameter "approval_reason" do
      type "string"
      label "Reason for Approval"
      description "Explain why you are approving the action"
    end
  end
  run "delete_resources", data
end

###############################################################################
# Cloud Workflow
###############################################################################

define delete_resources($data) return $all_responses do

  $all_responses = []
  foreach $item in $data do
    sub on_error: skip do
	if($item["managedBy"]=="NA")
	$resourceName = $item["name"]
      $response = http_request(
        verb: "delete",
        host: "management.azure.com",
		auth: $$azure_auth,
        https: true,
        href: $item["id"],
        query_strings: {
          "api-version": "2019-07-01"
        },
        headers: {
          "cache-control": "no-cache",
          "content-type": "application/json"
        }
      )
	  $statusCode=to_s($response["code"])
	  if(!($statusCode=="200"||$statusCode=="202"||$statusCode=="204"))
	    $errorMessage=$response["body"]
		call sys_log('Error:Failed to delete the resource ',to_s($errorMessage))
	  end
      $all_responses << $response
	  call sys_log('Azure Disallowed Regions ',to_s($response))
	  end
	end  
  end
  
  foreach $item in $data do
    sub on_error: skip do
	if($item["managedBy"]!="NA")
	$resourceName = $item["name"]
      $response = http_request(
        verb: "delete",
        host: "management.azure.com",
		auth: $$azure_auth,
        https: true,
        href: $item["id"],
        query_strings: {
          "api-version": "2019-07-01"
        },
        headers: {
          "cache-control": "no-cache",
          "content-type": "application/json"
        }
      )
	  $statusCode=to_s($response["code"])
	  if(!($statusCode=="200"||$statusCode=="202"||$statusCode=="204"))
	    $errorMessage=$response["body"]
		call sys_log('Error:Failed to delete the resource ',to_s($errorMessage))
	  end
      $all_responses << $response
	  call sys_log('Azure Disallowed Regions ',to_s($response))
	end  
  end
 end 
end

define sys_log($subject, $detail) do
    rs_cm.audit_entries.create(
      notify: "None",
      audit_entry: {
        auditee_href: @@account,
        summary: "Azure Disallowed Regions "+ $subject,
        detail: $detail
      }
    )
end
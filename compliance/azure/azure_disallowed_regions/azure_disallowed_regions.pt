name "Azure Disallowed Regions"
rs_pt_ver 20180301
type "policy"
short_description "Check for instances that are in a disallowed region with the option to terminate them. See the [README](https://github.com/flexera/policy_templates/tree/master/compliance/azure/azure_disallowed_regions) and [docs.flexera.com/flexera/EN/Automation](https://docs.flexera.com/flexera/EN/Automation/AutomationGS.htm) to learn more."
long_description ""
severity "medium"
category "Compliance"
default_frequency "daily"
info(
  version: "2.6",
  provider: "Azure",
  service: "Compute",
  policy_set: "Disallowed Regions"
)

###############################################################################
# Parameters
###############################################################################

parameter "param_email" do
  type "list"
  label "Email addresses of the recipients you wish to notify"
end

parameter "param_azure_endpoint" do
  type "string"
  label "Azure Endpoint"
  allowed_values "management.azure.com", "management.chinacloudapi.cn"
  default "management.azure.com"
end

parameter "param_subscription_whitelist" do
  label "Subscription Whitelist"
  type "list"
  description "Whitelisted Subscriptions, if empty, all subscriptions will be checked"
end

parameter "param_approved_region" do
  type "list"
  label "Approved Azure Region(s)"
  category "Azure"
end

parameter "param_automatic_action" do
  type "list"
  label "Automatic Actions"
  description "When this value is set, this policy will automatically take the selected action(s)"
  allowed_values ["Terminate Instances"]
end

###############################################################################
# Authentication
###############################################################################

credentials "azure_auth" do
  schemes "oauth2"
  label "Azure"
  description "Select the Azure Resource Manager Credential from the list."
  tags "provider=azure_rm"
end

###############################################################################
# Pagination
###############################################################################

pagination "azure_pagination" do
  get_page_marker do
    body_path "nextLink"
  end
  set_page_marker do
    uri true
  end
end

###############################################################################
# Datasources
###############################################################################

datasource "ds_subscriptions" do
  request do
    auth $azure_auth
    pagination $azure_pagination
    host $param_azure_endpoint
    path "/subscriptions/"
    query "api-version","2019-06-01"
    header "User-Agent", "RS Policies"
  end
  result do
    encoding "json"
    collect jmes_path(response, "value[*]") do
      field "subscriptionId", jmes_path(col_item,"subscriptionId")
      field "displayName", jmes_path(col_item,"displayName")
      field "state", jmes_path(col_item,"state")
    end
  end
end

datasource "ds_filtered_subscriptions" do
  run_script $js_filtered_subscriptions, $ds_subscriptions, $param_subscription_whitelist
end

datasource "azure_resources" do
  iterate $ds_filtered_subscriptions
  request do
    auth $azure_auth
    pagination $azure_pagination
    host $param_azure_endpoint
    path join(["/subscriptions/", val(iter_item,"subscriptionId"), "/resources"])
    query "api-version","2018-02-01"
    header "User-Agent", "RS Policies"
  end
  result do
    encoding "json"
    collect jmes_path(response, "value[*]") do
      field "id", jmes_path(col_item,"id")
      field "region", jmes_path(col_item,"location")
      field "name", jmes_path(col_item,"name")
      field "managedBy",jmes_path(col_item,"managedBy")
      field "subscriptionId",val(iter_item,"subscriptionId")
      field "subscriptionName",val(iter_item,"displayName")
    end
  end
end

datasource "filtered_resources" do
  run_script $js_filter_resources, $azure_resources, $param_approved_region
end

###############################################################################
# Scripts
###############################################################################

script "js_filtered_subscriptions", type: "javascript" do
  parameters "ds_subscriptions", "param_subscription_whitelist"
  result "results"
  code <<-EOS
  var results = []
  if ( param_subscription_whitelist.length != 0){
    results = []
    _.each(param_subscription_whitelist, function(sub){
      var found = _.find(ds_subscriptions, function(item){
        return item.subscriptionId == sub || item.displayName.toLowerCase() == sub.toLowerCase();
      })
      results.push(found)
    })
  } else {
    results = ds_subscriptions
  }
EOS
end

script "js_filter_resources", type: "javascript" do
  parameters "azure_resources", "param_approved_region"
  result "result"
  code <<-EOS
    var result = [];

    // Iterate through all resources
    _.each(azure_resources, function(ar){
      console.log(ar.name)
      if (_.contains(param_approved_region, ar.region)) {

      } else {
        if(ar.managedBy==null){
          result.push({
            id: ar["id"],
            region: ar["region"],
            name: ar["name"],
            subscriptionName: ar["subscriptionName"],
            managedBy: "NA"
          })
        }else{
          result.push({
            id: ar["id"],
            region: ar["region"],
            name: ar["name"],
            subscriptionName: ar["subscriptionName"],
            managedBy: ar["managedBy"]
          })
        }
      }
    })
    result = _.sortBy(result, 'subscriptionName');
    result = _.sortBy(result, 'region');
  EOS
end

###############################################################################
# Policy
###############################################################################

policy "azure_resource_policy" do
  validate $filtered_resources do
    summary_template "{{ rs_project_name }} (Account ID: {{ rs_project_id }}): {{ len data }} Azure Resources out of compliance"
    escalate $email
    escalate $delete_resources
    check eq(size(data), 0)
    export do
      resource_level true
      field "subscriptionName" do
        label "Subscription Name"
      end
      field "name" do
        label "Resource Name"
      end
      field "region" do
        label "Location"
      end
      field "id" do
        label "Resource ID"
      end
      field "managedBy" do
        label "Managed By"
      end
    end
  end
end

###############################################################################
# Escalations
###############################################################################

escalation "email" do
  automatic true
  label "Send Email"
  description "Send incident email"
  email $param_email
end

escalation "delete_resources" do
  automatic contains($param_automatic_action, "Terminate Instances")
  label "Delete Resource"
  description "Delete the selected instance"
  run "delete_resources", data
end

###############################################################################
# Cloud Workflow
###############################################################################

define delete_resources($data) return $all_responses do
  $all_responses = []
  foreach $item in $data do
    sub on_error: reporterror($item) do
      if($item["managedBy"]=="NA")
        $resourceName = $item["name"]
        $response = http_request(
          verb: "delete",
          host: "management.azure.com",
          auth: $$azure_auth,
          https: true,
          href: $item["id"],
          query_strings: {
            "api-version": "2019-07-01"
          },
          headers: {
            "cache-control": "no-cache",
            "content-type": "application/json"
          }
        )
        $statusCode=to_s($response["code"])
        if(!($statusCode=="200"||$statusCode=="202"||$statusCode=="204"))
          $errorMessage=$response["body"]
          call sys_log('Error:Failed to delete the resource ',to_s($errorMessage))
        end
        $all_responses << $response
        call sys_log('Azure Disallowed Regions ',to_s($response))
      end
    end
  end
  foreach $item in $data do
    sub on_error: reporterror($item) do
      if($item["managedBy"]!="NA")
        $resourceName = $item["name"]
        $response = http_request(
          verb: "delete",
          host: "management.azure.com",
          auth: $$azure_auth,
          https: true,
          href: $item["id"],
          query_strings: {
            "api-version": "2019-07-01"
          },
          headers: {
            "cache-control": "no-cache",
            "content-type": "application/json"
          }
        )
        $statusCode=to_s($response["code"])
        if(!($statusCode=="200"||$statusCode=="202"||$statusCode=="204"))
          $errorMessage=$response["body"]
          call sys_log('Error:Failed to delete the resource ',to_s($errorMessage))
        end
        $all_responses << $response
        call sys_log('Azure Disallowed Regions ',to_s($response))
      end
    end
  end
end

define reporterror($item) do
    call sys_log('Error:Failed to delete the resource ',to_s($item['id']))
end

define sys_log($subject, $detail) do
  rs_cm.audit_entries.create(
    notify: "None",
    audit_entry: {
      auditee_href: @@account,
      summary: "Azure Disallowed Regions "+ $subject,
      detail: $detail
    }
  )
end

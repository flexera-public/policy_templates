name "Azure Subscription Access"
rs_pt_ver 20180301
type "policy"
short_description "**Deprecated: This policy template is no longer being updated.** Provides a report of all users with Owner or Contributor access to an Azure Subscription. See the [README](https://github.com/flexera-public/policy_templates/tree/master/compliance/azure/subscription_access) and [docs.flexera.com/flexera/EN/Automation](https://docs.flexera.com/flexera/EN/Automation/AutomationGS.htm) to learn more."
long_description ""
doc_link "https://github.com/flexera-public/policy_templates/tree/master/compliance/azure/subscription_access"
category "Compliance"
severity "low"
default_frequency "weekly"
info(
  version: "3.0.7",
  provider: "Azure",
  service: "Identity & Access Management",
  policy_set: "",
  deprecated: "true",
  publish: "false",
  hide_skip_approvals: "true"
)

###############################################################################
# Parameters
###############################################################################

parameter "param_email" do
  type "list"
  category "Policy Settings"
  label "Email Addresses"
  description "A list of email addresses to notify."
  default []
end

parameter "param_azure_endpoint" do
  type "string"
  category "Policy Settings"
  label "Azure Endpoint"
  description "Select the API endpoint to use for Azure Resource Manager API. Use default value of 'management.azure.com' unless using Azure China."
  allowed_values "management.azure.com", "management.chinacloudapi.cn"
  default "management.azure.com"
end

parameter "param_ms_graph_endpoint" do
  type "string"
  category "Policy Settings"
  label "Microsoft Graph Endpoint"
  description "Select the API endpoint to use for the Microsoft Graph API. Use default value of 'graph.microsoft.com' unless using Azure China."
  allowed_values "graph.microsoft.com", "microsoftgraph.chinacloudapi.cn"
  default "graph.microsoft.com"
end

parameter "param_roles" do
  type "string"
  category "Policy Settings"
  label "Roles"
  description "Whether to report on users that are subscription Owners, Contributors, or both."
  allowed_values "Owner", "Contributor", "Both"
  default "Both"
end

parameter "param_subscriptions_allow_or_deny" do
  type "string"
  category "Filters"
  label "Allow/Deny Subscriptions"
  description "Allow or Deny entered Subscriptions. See the README for more details."
  allowed_values "Allow", "Deny"
  default "Allow"
end

parameter "param_subscriptions_list" do
  type "list"
  category "Filters"
  label "Allow/Deny Subscriptions List"
  description "A list of allowed or denied Subscription IDs/names. See the README for more details."
  default []
end

###############################################################################
# Authentication
###############################################################################

credentials "auth_azure" do
  schemes "oauth2"
  label "Azure"
  description "Select the Azure Resource Manager Credential from the list."
  tags "provider=azure_rm"
end

credentials "auth_azure_graph" do
  schemes "oauth2"
  label "Azure"
  description "Select the Azure Resource Manager Credential for Azure Active Directory API from the list."
  tags "provider=azure_graph"
end

credentials "auth_flexera" do
  schemes "oauth2"
  label "Flexera"
  description "Select Flexera One OAuth2 credentials"
  tags "provider=flexera"
end

###############################################################################
# Pagination
###############################################################################

pagination "pagination_azure" do
  get_page_marker do
    body_path "nextLink"
  end
  set_page_marker do
    uri true
  end
end

pagination "pagination_azure_graph" do
  get_page_marker do
    body_path '"@odata.nextLink"'
  end
  set_page_marker do
    uri true
  end
end

###############################################################################
# Datasources & Scripts
###############################################################################

# Get region-specific Flexera API endpoints
datasource "ds_flexera_api_hosts" do
  run_script $js_flexera_api_hosts, rs_optima_host
end

script "js_flexera_api_hosts", type: "javascript" do
  parameters "rs_optima_host"
  result "result"
  code <<-EOS
  host_table = {
    "api.optima.flexeraeng.com": {
	    api: "api.flexera.com",
      flexera: "api.flexera.com",
      fsm: "api.fsm.flexeraeng.com",
      grs: "grs-front.iam-us-east-1.flexeraeng.com",
      ui: "app.flexera.com",
      tld: "flexera.com"
    },
    "api.optima-eu.flexeraeng.com": {
	    api: "api.flexera.eu",
      flexera: "api.flexera.eu",
      fsm: "api.fsm-eu.flexeraeng.com",
      grs: "grs-front.eu-central-1.iam-eu.flexeraeng.com",
      ui: "app.flexera.eu",
      tld: "flexera.eu"
    },
    "api.optima-apac.flexeraeng.com": {
	    api: "api.flexera.au",
      flexera: "api.flexera.au",
      fsm: "api.fsm-apac.flexeraeng.com",
      grs: "grs-front.ap-southeast-2.iam-apac.flexeraeng.com",
      ui: "app.flexera.au",
      tld: "flexera.au"
    }
  }

  result = host_table[rs_optima_host]
EOS
end

# Get applied policy metadata for use later
datasource "ds_applied_policy" do
  request do
    auth $auth_flexera
    host val($ds_flexera_api_hosts, "flexera")
    path join(["/policy/v1/orgs/", rs_org_id, "/projects/", rs_project_id, "/applied-policies", switch(policy_id, join(["/", policy_id]), "")])
  end
end

datasource "ds_azure_subscriptions" do
  request do
    auth $auth_azure
    pagination $pagination_azure
    host $param_azure_endpoint
    path "/subscriptions/"
    query "api-version", "2020-01-01"
    header "User-Agent", "RS Policies"
    # Ignore status 400, 403, and 404 which can be returned in certain (legacy) types of Azure Subscriptions
    ignore_status [400, 403, 404]
  end
  result do
    encoding "json"
    collect jmes_path(response, "value[*]") do
      field "id", jmes_path(col_item, "subscriptionId")
      field "name", jmes_path(col_item, "displayName")
      field "state", jmes_path(col_item, "state")
    end
  end
end

datasource "ds_azure_subscriptions_filtered" do
  run_script $js_azure_subscriptions_filtered, $ds_azure_subscriptions, $param_subscriptions_allow_or_deny, $param_subscriptions_list
end

script "js_azure_subscriptions_filtered", type: "javascript" do
  parameters "ds_azure_subscriptions", "param_subscriptions_allow_or_deny", "param_subscriptions_list"
  result "result"
  code <<-EOS
  if (param_subscriptions_list.length > 0) {
    result = _.filter(ds_azure_subscriptions, function(subscription) {
      include_subscription = _.contains(param_subscriptions_list, subscription['id']) || _.contains(param_subscriptions_list, subscription['name'])

      if (param_subscriptions_allow_or_deny == "Deny") {
        include_subscription = !include_subscription
      }

      return include_subscription
    })
  } else {
    result = ds_azure_subscriptions
  }
EOS
end

datasource "ds_azure_role_definitions" do
  iterate $ds_azure_subscriptions
  request do
    auth $auth_azure
    pagination $pagination_azure
    host $param_azure_endpoint
    path join(["/subscriptions/", val(iter_item, "id"), "/providers/Microsoft.Authorization/roleDefinitions"])
    query "api-version", "2015-07-01"
    header "User-Agent", "RS Policies"
    # Ignore status 400, 403, and 404 which can be returned in certain (legacy) types of Azure Subscriptions
    ignore_status [400, 403, 404]
  end
  result do
    encoding "json"
    collect jmes_path(response, "value[*]") do
      field "id", jmes_path(col_item, "id")
      field "type", jmes_path(col_item, "type")
      field "name", jmes_path(col_item, "name")
      field "properties", jmes_path(col_item, "properties")
      field "roleName", jmes_path(col_item, "properties.roleName")
      field "subscriptionId", val(iter_item, "id")
      field "subscriptionName", val(iter_item, "name")
    end
  end
end

datasource "ds_azure_role_definitions_filtered" do
  run_script $js_azure_role_definitions_filtered, $ds_azure_role_definitions, $param_roles
end

script "js_azure_role_definitions_filtered", type: "javascript" do
  parameters "ds_azure_role_definitions", "param_roles"
  result "result"
  code <<-EOS
  role_types = [param_roles]
  if (param_roles == "Both") { role_types = ["Owner", "Contributor"] }

  result = _.filter(ds_azure_role_definitions, function(definition) {
    return _.contains(role_types, definition['roleName'])
  })
EOS
end

datasource "ds_azure_role_assignments" do
  iterate $ds_azure_subscriptions_filtered
  request do
    auth $auth_azure
    pagination $pagination_azure
    host $param_azure_endpoint
    path join(["/subscriptions/", val(iter_item, "id"), "/providers/Microsoft.Authorization/roleAssignments"])
    query "api-version", "2015-07-01"
    query "$filter", "atScope()"
    header "User-Agent", "RS Policies"
    # Ignore status 400, 403, and 404 which can be returned in certain (legacy) types of Azure Subscriptions
    ignore_status [400, 403, 404]
  end
  result do
    encoding "json"
    collect jmes_path(response, "value[*]") do
      field "id", jmes_path(col_item, "id")
      field "type", jmes_path(col_item, "type")
      field "name", jmes_path(col_item, "name")
      field "properties", jmes_path(col_item, "properties")
      field "roleDefinitionId", jmes_path(col_item, "properties.roleDefinitionId")
      field "principalId", jmes_path(col_item, "properties.principalId")
      field "subscriptionId", val(iter_item, "id")
      field "subscriptionName", val(iter_item, "name")
    end
  end
end

datasource "ds_azure_users" do
  request do
    auth $auth_azure_graph
    pagination $pagination_azure_graph
    host $param_ms_graph_endpoint
    path join(["/v1.0/users"])
    header "User-Agent", "RS Policies"
    ignore_status [400, 403, 404]
  end
  result do
    encoding "json"
    collect jmes_path(response, "value[*]") do
      field "id", jmes_path(col_item, "id")
      field "businessPhones", jmes_path(col_item, "businessPhones")
      field "displayName", jmes_path(col_item, "displayName")
      field "givenName", jmes_path(col_item, "givenName")
      field "id", jmes_path(col_item, "id")
      field "jobTitle", jmes_path(col_item, "jobTitle")
      field "mail", jmes_path(col_item, "mail")
      field "mobilePhone", jmes_path(col_item, "mobilePhone")
      field "officeLocation", jmes_path(col_item, "officeLocation")
      field "preferredLanguage", jmes_path(col_item, "preferredLanguage")
      field "surname", jmes_path(col_item, "surname")
      field "userPrincipalName", jmes_path(col_item, "userPrincipalName")
    end
  end
end

datasource "ds_access_report" do
  run_script $js_access_report, $ds_azure_role_assignments, $ds_azure_role_definitions_filtered, $ds_azure_users, $ds_applied_policy
end

script "js_access_report", type: "javascript" do
  parameters "ds_azure_role_assignments", "ds_azure_role_definitions_filtered", "ds_azure_users", "ds_applied_policy"
  result "result"
  code <<-'EOS'
  assignment_object = {}

  _.each(ds_azure_role_assignments, function(item) {
    definition_id = item['roleDefinitionId']
    if (assignment_object[definition_id] == undefined) { assignment_object[definition_id] = [] }
    assignment_object[definition_id].push(item)
  })

  user_object = {}

  _.each(ds_azure_users, function(item) {
    user_object[user['id']] = item
  })

  result = []

  _.each(ds_azure_role_definitions_filtered, function(definition) {
    assignments = assignment_object[definition['id']]

    if (assignments != undefined) {
      _.each(assignments, function(assignment) {
        user = user_object[assignment['principalId']]

        if (user != undefined) {
          result.push({
            accountID: definition['subscriptionId'],
            accountName: definition['subscriptionName'],
            resourceName: user['displayName'],
            username: user['mail'],
            principalname: user['userPrincipalName'],
            role: definition['roleName'],
            id: assignment['name'],
            policy_name: ds_applied_policy['name'],
            message: ""
          })
        }
      })
    }
  })

  result = _.sortBy(result, 'accountName')
  result = _.sortBy(result, 'name')
  result = _.sortBy(result, 'username')

  if (result.length > 0) {
    result[0]["message"] = [
      result.length.toString(), " Azure users found with the following roles: ",
      _.compact(_.uniq(_.pluck(result, 'role'))).join(', ')
    ].join('')
  }
EOS
end

###############################################################################
# Policy
###############################################################################

policy "pol_subscription_access" do
  validate_each $ds_access_report do
    summary_template "{{ with index data 0 }}{{ .policy_name }}{{ end }}: {{ len data }} Azure Users Found"
    detail_template "{{ with index data 0 }}{{ .message }}{{ end }}"
    check eq(val(item, "resourceName"), "")
    escalate $esc_email
    export do
      resource_level true
      field "accountID" do
        label "Subscription ID"
      end
      field "accountName" do
        label "Subscription Name"
      end
      field "resourceName" do
        label "Display Name"
      end
      field "username" do
        label "User Name"
      end
      field "principalname" do
        label "Principal Name"
      end
      field "role" do
        label "Role"
      end
      field "id" do
        label "Role Assignment ID"
      end
    end
  end
end

###############################################################################
# Escalations
###############################################################################

escalation "esc_email" do
  automatic true
  label "Send Email"
  description "Send incident email"
  email $param_email
end

name "Azure AHUB Utilization with Manual Entry"
rs_pt_ver 20180301
type "policy"
short_description "Report when AHUB usage in Azure falls outside or inside the number of licenses specified by the user. \n See the [README](https://github.com/flexera/policy_templates/tree/master/compliance/azure/ahub_manual) and [docs.rightscale.com/policies](http://docs.rightscale.com/policies/) to learn more."
long_description "Version: 1.1"
category "Compliance"
severity "medium"

###############################################################################
# Permissions
###############################################################################

permission "perm_read_creds" do
  actions   "rs_cm.show_sensitive","rs_cm.index_sensitive"
  resources "rs_cm.credentials"
end

###############################################################################
# Parameters
###############################################################################

parameter "param_azure_tenant_id" do
  type "string"
  label "Azure AD Tenant ID"
  category "Azure"
end

parameter "param_azure_sub" do
  type "string"
  label "Azure Subscription ID"
  category "Azure"
end

parameter "param_exclusion_tag_key" do
  category "User Inputs"
  label "Exclusion Tag Key"
  description "Azure-native instance tag to ignore instances that are not using AHUB. Only supply the tag key. The policy assumes that the tag value is irrelevant."
  type "string"
  default "exclude_ahub"
end

parameter "param_license_count" do
  type "string"
  label "License Allowed Count"
  description "Specify the number of licenses allowed"
  type "number"
end

parameter "param_email" do
  type "list"
  label "Email addresses to notify"
  description "Email addresses of the recipients you wish to notify when new incidents are created"
end

###############################################################################
# Authentication
###############################################################################

auth "azure_auth", type: "oauth2" do
  token_url join(["https://login.microsoftonline.com/",$param_azure_tenant_id,"/oauth2/token"])
  grant type: "client_credentials" do
    client_id cred("AZURE_APPLICATION_ID")
    client_secret cred("AZURE_APPLICATION_KEY")
    additional_params do {
      "resource" => "https://management.azure.com/"
    } end
  end
end

###############################################################################
# Pagination
###############################################################################

pagination "azure_pagination" do
  get_page_marker do
    body_path "nextLink"
  end
  set_page_marker do
    uri true
  end
end

###############################################################################
# Datasources
###############################################################################

#https://docs.microsoft.com/en-us/rest/api/compute/virtualmachines/listall
datasource "ds_azure_instances" do
  request do
    auth $azure_auth
    pagination $azure_pagination
    host "management.azure.com"
    path join(["/subscriptions/", $param_azure_sub, "/providers/Microsoft.Compute/virtualMachines"])
    query "api-version","2018-06-01"
    header "User-Agent", "RS Policies"
  end
  result do
    encoding "json"
    collect jmes_path(response, "value") do
      field "id", jmes_path(col_item,"id")
      field "name", jmes_path(col_item,"name")
      field "location", jmes_path(col_item,"location")
      field "licenseType", jmes_path(col_item,"properties.licenseType")
      field "vmSize", jmes_path(col_item,"properties.hardwareProfile.vmSize")
      field "osType", jmes_path(col_item,"properties.storageProfile.osDisk.osType")
      field "imagePublisher", jmes_path(col_item,"properties.storageProfile.imageReference.publisher")
      field "imageOffer", jmes_path(col_item,"properties.storageProfile.imageReference.offer")
      field "imageSku", jmes_path(col_item,"properties.storageProfile.imageReference.sku")
      field "imageVersion", jmes_path(col_item,"properties.storageProfile.imageReference.version")
      field "tags", jmes_path(col_item,"tags")
    end
  end
end

datasource "ds_filtered_locations" do
  run_script $js_location_list, $ds_azure_instances
end

#https://docs.microsoft.com/en-us/rest/api/compute/virtualmachinesizes/list
datasource "ds_azure_vmsize" do
iterate $ds_filtered_locations
  request do
    auth $azure_auth
    host "management.azure.com"
    path join(["/subscriptions/", $param_azure_sub, "/providers/Microsoft.Compute/locations/",val(iter_item, "location"),"/vmSizes"])
    query "api-version","2018-06-01"
    header "User-Agent", "RS Policies"
  end
  result do
    encoding "json"
    collect jmes_path(response, "value[*]") do
      field "virtualmachineSize", jmes_path(col_item,"name")
      field "numberOfCores", jmes_path(col_item,"numberOfCores")
    end
  end
end

datasource "ds_vminstance_with_cores" do
  run_script $js_vminstances_with_cores, $ds_azure_vmsize, $ds_azure_instances, $param_exclusion_tag_key, $param_license_count
end


###############################################################################
# Scripts
###############################################################################

script "js_location_list", type: "javascript" do
  parameters "ds_azure_instances"
  result "result"
  code <<-EOS
    var result = [];
    _.each(ds_azure_instances, function(instance){
      var flag=false;
      _.each(result, function(single_location){
        var loc = single_location.location;
        if (instance.location === loc){
          flag=true;
        }
      })
    if(!flag){
       result.push({"location": instance.location});
    }
  }) 
 EOS
end

script "js_vminstances_with_cores", type: "javascript" do
  parameters "ds_azure_vmsize", "ds_azure_instances", "exclusion_tag", "param_license_count"
  result "final_result"
  code <<-EOS
    var final_result;
    var result =[];
    var vmsize_map = {};

    for (var i=0;i<ds_azure_vmsize.length;i++){
      vmsize_map[ds_azure_vmsize[i].virtualmachineSize] = ds_azure_vmsize[i].numberOfCores;
    }

    var license_cores = param_license_count*16;
    var license_ahub = param_license_count*2;
    var total_cores_with_ahub=0;
    var total_vms_with_ahub=0;
    var total_vms_without_ahub = 0;
    var with_ahub = [];
    var without_ahub = [];
    var note;
    var summary_template;
  
    _.each(ds_azure_instances, function(instance){      
      if(!(_.has(instance.tags, exclusion_tag))){
        if(instance.osType === "Windows"){
          var resourceGroup = instance.id.split('/')[4]
          var tags = JSON.stringify(instance["tags"]);  
          if(instance.licenseType === "Windows_Server"){
            var instance_core=vmsize_map[instance.vmSize];
            total_cores_with_ahub = total_cores_with_ahub+parseInt(vmsize_map[instance.vmSize]);
            total_vms_with_ahub = total_vms_with_ahub+1;
            with_ahub.push({
              id: instance["id"],
              name: instance["name"],
              resourceGroup: resourceGroup,
              location: instance["location"],
              vmSize: instance["vmSize"],
              imagePublisher: instance["imagePublisher"],
              imageOffer: instance["imageOffer"],
              imageSku: instance["imageSku"],
              imageVersion: instance["imageVersion"],
              tags: tags,
              numberofcores: vmsize_map[instance.vmSize]
            })
          }else{
            total_vms_without_ahub = total_vms_without_ahub+1;
            without_ahub.push({
              id: instance["id"],
              name: instance["name"],
              resourceGroup: resourceGroup,
              location: instance["location"],
              vmSize: instance["vmSize"],
              imagePublisher: instance["imagePublisher"],
              imageOffer: instance["imageOffer"],
              imageSku: instance["imageSku"],
              imageVersion: instance["imageVersion"],
              tags: tags,
              numberofcores: vmsize_map[instance.vmSize]
            })
          }          
        }
      }
    })
	
    var vm = "VM's";
    if(total_vms_with_ahub > license_ahub || total_cores_with_ahub > license_cores){    
      result=with_ahub;
      if(total_vms_with_ahub == 1){
        vm = "VM";
      }
      if(total_cores_with_ahub > license_cores && total_vms_with_ahub > license_ahub){
        final_result={note:"It is observed that a greater number of licenses have been consumed than allocated licenses, Please disable AHUB for any of the "+(total_vms_with_ahub - license_ahub)+" "+vm+" listed above whose sum of cores should be minimum "+(total_cores_with_ahub - license_cores)+" cores.",
          result:result,
          summary_template: total_vms_with_ahub+" "+vm+" with AHUB enabled whose sum of cores is "+total_cores_with_ahub
	    };
      }else if(total_cores_with_ahub < license_cores && total_vms_with_ahub > license_ahub){
        final_result={note:"It is observed that a greater number of licenses have been consumed than allocated licenses, Please disable AHUB for any of the "+(total_vms_with_ahub - license_ahub)+" "+vm+" listed above.",
          result:result,
          summary_template: total_vms_with_ahub+" "+vm+" with AHUB enabled whose sum of cores is "+total_cores_with_ahub
	    };
	  }else if(total_cores_with_ahub > license_cores && total_vms_with_ahub < license_ahub){
        final_result={note:"It is observed that a greater number of licenses have been consumed than allocated licenses, Please disable AHUB for VMs listed above whose sum of cores should be minimum "+(total_cores_with_ahub - license_cores)+" cores.",
          result:result,
          summary_template: total_vms_with_ahub+" "+vm+" with AHUB enabled whose sum of cores is "+total_cores_with_ahub
	    };
	  }
    }else if(total_cores_with_ahub < license_cores && total_vms_with_ahub < license_ahub){
      result=without_ahub;
	  if(total_vms_without_ahub == 1){
        vm = "VM";
	  }
      final_result={note:"It is observed that a lesser number of licenses have been consumed than allocated licenses, You can enable AHUB upto "+(license_ahub - total_vms_with_ahub)+" "+vm+" whose sum of cores should be lesser or equal to "+(license_cores - total_cores_with_ahub)+" cores.",
        result:result,
        summary_template: total_vms_without_ahub+" "+vm+" with AHUB disabled"
	  };
    }else{
      final_result={result:result};
    }
  EOS
end


###############################################################################
# Policy
###############################################################################

policy 'azure_ahub_policy' do
  validate $ds_vminstance_with_cores do
    summary_template "{{ rs_project_name }} (Account ID: {{ rs_project_id }}): {{data.summary_template}}"
    detail_template <<-EOS
# Azure AHUB Utilization with Manual Entry
| Instance Name | Resource Group | Location | Instance Size | Image Publisher | Image Offer | Image Sku | Image Version |  Tags | Number Cores |
| ------------- | -------------- | -------- | ------------- | --------------- | ----------- | --------- | ------------- |  ---- | ------------ |
{{ range data.result -}}
| {{.name}} | {{.resourceGroup}} | {{.location}} | {{.vmSize}} | {{.imagePublisher}} | {{.imageOffer}} | {{.imageSku}} | {{.imageVersion}} | {{.tags}} | {{.numberofcores}} |
{{ end -}}
##### Note: {{data.note}}
  EOS
  escalate $email
  check eq(size(val(data, "result")), 0)
  end
end

###############################################################################
# Escalations
###############################################################################

escalation "email" do
  email $param_email
end
name "Okta Inactive Users"
rs_pt_ver 20180301
type "policy"
short_description "This policy will identify Okta users that have not logged in within a specified number of days and deactivate the users upon approval. See the [README](https://github.com/rightscale/policy_templates/tree/master/fsm/okta/inactive_users/) and [docs.rightscale.com/policies](http://docs.rightscale.com/policies/) to learn more."
long_description "Version: 1.1"
severity "medium"
category "SaaS Management"
tenancy "single"

parameter "param_okta_org_name" do
  label "Okta Organization Name"
  type "string"
  description "For example, if you navigate to https://contoso.okta.com to login to Okta, the value in this parameter would be `contoso`"
end

parameter "param_days" do
  label "Number of Days Since Last Login"
  type "number"
  default 30
  description "This value will be the threshold for which incidents will be raised"
end 

parameter "param_email" do
  type "list"
  label "Email addresses to notify"
  description "Email addresses of the recipients you wish to notify when new incidents are created"
end

auth "auth_okta", type: "api_key" do
  location "header"
  field "Authorization"
  type "SSWS"
  key cred("OKTA_API_KEY")
end

datasource "ds_okta_users" do
  request do
    auth $auth_okta
    host join([$param_okta_org_name,".okta.com"])
    path "/api/v1/users"
    header "User-Agent", "RS Policies"
    query "filter", 'status eq "ACTIVE"'
    query "limit", "200"
  end
  result do
    encoding "json"
    collect jmes_path(response,"[*]") do
      field "id", jmes_path(col_item,"id")
      field "status", jmes_path(col_item,"status")
      field "created", jmes_path(col_item,"created")
      field "lastLogin", jmes_path(col_item,"lastLogin")
      field "passwordChanged", jmes_path(col_item,"passwordChanged")
      field "firstName", jmes_path(col_item,"profile.firstName")
      field "lastName", jmes_path(col_item,"profile.lastName")
      field "email", jmes_path(col_item,"profile.email")
    end
  end
end

datasource "ds_filtered_users" do
  run_script $js_filtered_users, $ds_okta_users, $param_days
end

script "js_filtered_users", type: "javascript" do
  parameters "users","param_days"
  result "result"
  code <<-EOS
    var result = [];
    
    var date = new Date(new Date().setDate(new Date().getDate() - param_days)).toISOString();

    _.each(users, function(user){
      if (date > user["lastLogin"]){
        result.push(user)
      }
    })
  EOS
end

escalation "esc_email" do
  email $param_email
end

escalation "esc_deactivate_users" do
  request_approval  do
    label "Approve User Deactivation"
    description "Approve escalation to run RightScale Cloud Workflow to deactivate the inactive Okta Users"
    parameter "approval_reason" do
      type "string"
      label "Reason for Approval"
      description "Explain why you are approving the action"
    end
  end
  run "deactivate_users", data, $param_okta_org_name
end

policy "policy_inactive_users" do
  validate $ds_filtered_users do
    summary_template "Inactive Okta Users"
    detail_template <<-EOS
# Inactive Okta Users

### Okta Org: {{ parameters.param_okta_org_name }}
### Minimum Number of Days Since Last Login: {{ parameters.param_days }}

| First Name | Last Name | Email Address | Last Login | 
| ---------- | --------- | ------------- | ---------- |
{{ range data -}}
| {{ .firstName }} | {{.lastName}} | {{.email}} | {{.lastLogin}} |
{{ end -}}

EOS
    escalate $esc_email
    escalate $esc_deactivate_users
    check eq(size(data), 0)
  end
end

define deactivate_users($data, $param_okta_org_name) do 

  foreach $user in $data do 
    http_request(
      verb: "post",
      host: join([$param_okta_org_name,".okta.com"]),
      https: true,
      href: join(["api/v1/users/",$user["id"],"/lifecycle/deactivate"]),
      headers: {
        "Content-Type": "application/json",
        "Accept": "application/json",
        "Authorization": "SSWS " + cred("OKTA_API_KEY")
      }
    )
  end 

end
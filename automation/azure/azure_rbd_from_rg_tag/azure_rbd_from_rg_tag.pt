name "Azure Rule-Based Dimension From Resource Group Tags"
rs_pt_ver 20180301
type "policy"
short_description "Creates and/or updates individual Rule-Based Dimensions based on Azure Resource Group tags. See the [README](https://github.com/flexera-public/policy_templates/tree/master/automation/azure/azure_rbd_from_rg_tag) and [docs.flexera.com/flexera/EN/Automation](https://docs.flexera.com/flexera/EN/Automation/AutomationGS.htm) to learn more."
long_description ""
severity "low"
category "Cost"
default_frequency "daily"
info(
  version: "1.0",
  provider: "Flexera",
  service: "Optima",
  policy_set: "Automation",
  publish: "false"
)

###############################################################################
# Parameters
###############################################################################

parameter "param_tag_list" do
  type "list"
  label "Tag Keys"
  description "A list of Azure account tag keys to build Rule-Based Dimensions from"
end

parameter "param_effective_date" do
  type "string"
  label "Effective Date"
  description "Year/month you want rules to start applying in YYYY-MM format"
  default "2010-01"
end

parameter "param_subscription_fallback" do
  type "string"
  label "Subscription Fallback Rules"
  description "Whether or not to create rules for Subscription tags as a fallback for untagged Resource Groups."
  allowed_values "Yes", "No"
  default "No"
end

###############################################################################
# Authentication
###############################################################################

credentials "auth_azure" do
  schemes "oauth2"
  label "Azure"
  description "Select the Azure Resource Manager Credential from the list."
  tags "provider=azure_rm"
end

credentials "auth_flexera" do
  schemes "oauth2"
  label "flexera"
  description "Select FlexeraOne OAuth2 credential."
  tags "provider=flexera"
end

###############################################################################
# Pagination
###############################################################################

pagination "pagination_azure" do
  get_page_marker do
    body_path "nextLink"
  end
  set_page_marker do
    uri true
  end
end

###############################################################################
# Datasources & Scripts
###############################################################################

datasource "ds_existing_rbds" do
  request do
    auth $auth_flexera
    host rs_optima_host
    path join(["/bill-analysis/orgs/", rs_org_id, "/settings/rule_based_dimensions"])
    verb "GET"
    header "Api-Version", "1.0"
    header "content-type", "application/json"
  end
  result do
    encoding "json"
    collect jmes_path(response, "rule_based_dimensions") do
      field "id", jmes_path(col_item, "id")
      field "name", jmes_path(col_item, "name")
      field "dated_rules", jmes_path(col_item, "dated_rules")
    end
  end
end

datasource "ds_azure_subscriptions" do
  request do
    auth $auth_azure
    pagination $pagination_azure
    host "management.azure.com"
    path "/subscriptions/"
    query "api-version","2018-06-01"
    header "User-Agent", "RS Policies"
  end
  result do
    encoding "json"
    collect jmes_path(response, "value[*]") do
      field "id", jmes_path(col_item, "subscriptionId")
      field "name", jmes_path(col_item, "displayName")
    end
  end
end

datasource "ds_azure_subscriptions_with_tags" do
  iterate $ds_azure_subscriptions
  request do
    auth $auth_azure
    pagination $pagination_azure
    host "management.azure.com"
    path join(["/subscriptions/", val(iter_item, "id"), "/providers/Microsoft.Resources/tags/default"])
    query "api-version","2021-04-01"
    header "User-Agent", "RS Policies"
  end
  result do
    encoding "json"
    field "id", val(iter_item, "id")
    field "name", val(iter_item, "name")
    field "tags", jmes_path(response, "properties.tags")
  end
end

datasource "ds_azure_subscriptions_normalized" do
  run_script $js_azure_subscriptions_normalized, $ds_azure_subscriptions_with_tags
end

script "js_azure_subscriptions_normalized", type: "javascript" do
  parameters "accounts"
  result "result"
  code <<-'EOS'
  result = []

  _.each(accounts, function(account) {
    tags = {}

    if (account['tags'] != null && account['tags'] != undefined) {
      _.each(Object.keys(account['tags']), function(key) {
        normalized_key = key.toLowerCase().trim()
        tags[normalized_key] = account['tags'][key]
      })
    }

    result.push({
      id: account['id'],
      name: account['name'],
      tags: tags
    })
  })
EOS
end

datasource "ds_azure_resource_groups" do
  iterate $ds_azure_subscriptions
  request do
    auth $auth_azure
    pagination $pagination_azure
    host "management.azure.com"
    path join(["/subscriptions/", val(iter_item, "id"), "/resourcegroups"])
    query "api-version", "2021-04-01"
    header "User-Agent", "RS Policies"
  end
  result do
    encoding "json"
    collect jmes_path(response, "value[*]") do
      field "subscriptionId", val(iter_item, "id")
      field "subscriptionName", val(iter_item, "name")
      field "id", jmes_path(col_item, "id")
      field "name", jmes_path(col_item, "name")
      field "tags", jmes_path(col_item, "tags")
    end
  end
end

datasource "ds_azure_resource_groups_normalized" do
  run_script $js_azure_resource_groups_normalized, $ds_azure_resource_groups
end

script "js_azure_resource_groups_normalized", type: "javascript" do
  parameters "rgs"
  result "result"
  code <<-'EOS'
  result = []

  _.each(rgs, function(rg) {
    tags = {}

    if (rg['tags'] != null && rg['tags'] != undefined) {
      _.each(Object.keys(rg['tags']), function(key) {
        normalized_key = key.toLowerCase().trim()
        tags[normalized_key] = rg['tags'][key]
      })
    }

    result.push({
      subscriptionId: rg['subscriptionId'],
      subscriptionName: rg['subscriptionName'],
      id: rg['id'],
      name: rg['name'],
      tags: tags
    })
  })
EOS
end

datasource "ds_rbds" do
  run_script $js_rbds, $ds_azure_resource_groups_normalized, $ds_azure_subscriptions_normalized, $ds_existing_rbds, $param_tag_list, $param_effective_date, $param_subscription_fallback
end

script "js_rbds", type: "javascript" do
  parameters "rgs", "accounts", "existing_rbds", "param_tag_list", "param_effective_date", "param_subscription_fallback"
  result "result"
  code <<-'EOS'
  result = []

  rbd_id_list = _.pluck(existing_rbds, 'id')

  _.each(param_tag_list, function(tag) {
    rbd_id = "rbd_" + tag.toLowerCase().replace(/\s+/g, '').replace(/\W/g, "").replace('.', '').replace('-', '').trim()
    rbd_name = tag.replace('.', ' ').replace('-', ' ')
    rbd_name = rbd_name.replace(/\W/g, " ").trim()
    tag_key = tag.toLowerCase().trim()
    verb = "POST"

    if (_.contains(rbd_id_list, rbd_id)) {
      verb = "PATCH"
    }

    rules = []

    _.each(rgs, function(rg) {
      if (rg['tags'][tag_key] != undefined && rg['tags'][tag_key] != null) {
        if (rg['tags'][tag_key].trim() != '') {
          rules.push({
            "condition": {
              "type": "and",
              "expressions": [
                {
                  "type": "dimension_equals",
                  "dimension": "resource_group",
                  "value": rg['name'].trim()
                },
                {
                  "type": "dimension_equals",
                  "dimension": "vendor_account",
                  "value": rg['subscriptionId'].trim().toLowerCase()
                }
              ]
            },
            "value": {
              "text": rg['tags'][tag_key].toLowerCase().trim()
            }
          })

          if (rg['name'].trim() != rg['name'].trim().toLowerCase()) {
            rules.push({
              "condition": {
                "type": "and",
                "expressions": [
                  {
                    "type": "dimension_equals",
                    "dimension": "resource_group",
                    "value": rg['name'].trim().toLowerCase()
                  },
                  {
                    "type": "dimension_equals",
                    "dimension": "vendor_account",
                    "value": rg['subscriptionId'].trim().toLowerCase()
                  }
                ]
              },
              "value": {
                "text": rg['tags'][tag_key].toLowerCase().trim()
              }
            })
          }
        }
      }
    })

    if (param_subscription_fallback == "Yes") {
      _.each(accounts, function(account) {
        if (account['tags'][tag_key] != undefined && account['tags'][tag_key] != null) {
          if (account['tags'][tag_key].trim() != '') {
            rules.push({
              "condition": {
                "type": "dimension_equals",
                "dimension": "vendor_account",
                "value": account['id']
              },
              "value": {
                "text": account['tags'][tag_key].toLowerCase().trim()
              }
            })
          }
        }
      })
    }

    if (rules.length > 0) {
      result.push({
        id: rbd_id,
        name: rbd_name,
        verb: verb,
        dated_rules: [
          {
            "effective_at": param_effective_date,
            "rules": rules
          }
        ]
      })
    }
  })
EOS
end

datasource "ds_apply_rbds" do
  iterate $ds_rbds
  request do
    run_script $js_apply_rbds, val(iter_item, "id"), val(iter_item, "verb"), val(iter_item, "name"), val(iter_item, "dated_rules"), rs_optima_host, rs_org_id
  end
  result do
    encoding "text"
  end
end

script "js_apply_rbds", type: "javascript" do
  parameters "id", "verb", "name", "dated_rules", "rs_optima_host", "rs_org_id"
  result "request"
  code <<-EOS
  request = {
    auth: "auth_flexera",
    host: rs_optima_host,
    path: ["/bill-analysis/orgs/", rs_org_id, "/settings/rule_based_dimensions/", id].join(''),
    verb: verb,
    headers: {
      "Api-Version": "1.0",
      "content-type": "application/json"
    },
    body_fields: {
      "name": name,
      "dated_rules": dated_rules
    }
  }
EOS
end

###############################################################################
# Policy
###############################################################################

policy "pol_rbds" do
  validate $ds_apply_rbds do
    summary_template "RBDs Generated & Applied"
    check eq(0, 0)
    detail_template ''
  end
end

name "Flexera Automation Credential Management"
rs_pt_ver 20180301
type "policy"
short_description "Reports any credentials that are going to expire soon. Also reports any credentials outside of the user-specified allow list. Optionally, credentials can be deleted. See the [README](https://github.com/flexera-public/policy_templates/tree/master/automation/flexera/credential_management) and [docs.flexera.com/flexera/EN/Automation](https://docs.flexera.com/flexera/EN/Automation/AutomationGS.htm) to learn more."
long_description ""
severity "low"
category "Operational"
default_frequency "weekly"
info(
  version: "0.1.0",
  provider: "Flexera",
  service: "Automation",
  policy_set: "Automation"
)

###############################################################################
# Parameters
###############################################################################

parameter "param_email" do
  type "list"
  category "Policy Settings"
  label "Email Addresses"
  description "A list of email addresses to notify."
  default []
end

parameter "param_cred_scope" do
  type "list"
  category "Policy Settings"
  label "Credential Scope"
  description "Whether to report on Organization or Project credentials. Select both to report on all credentials."
  allowed values [ "Organization", "Project" ]
  default [ "Organization", "Project" ]
end

parameter "param_cred_no_expiration_date" do
  type "string"
  category "Policy Settings"
  label "Report Credentials With No Expiration Date"
  description "Whether or not to consider credentials with no expiration date as expired and report on them."
  allowed_values "Yes", "No"
  default "No"
end

parameter "param_cred_expiration_days" do
  type "number"
  category "Policy Settings"
  label "Days Until Expiration"
  description "The number of days before expiration to report on an expiring credential. Set to 0 to only report on already-expired credentials."
  min_value 0
  default 90
end

parameter "param_cred_allow_list" do
  type "list"
  category "Filters"
  label "Credential Allow List"
  description "A list of allowed credential names or IDs. All other credentials will be reported on. Leave blank to not report on disallowed credentials."
  default []
end

parameter "param_automatic_action" do
  type "list"
  category "Actions"
  label "Automatic Actions"
  description "When this value is set, this policy will automatically take the selected action(s)"
  allowed_values [ "Delete Disallowed Credentials" ]
  default []
end

###############################################################################
# Authentication
###############################################################################

credentials "auth_flexera" do
  schemes "oauth2"
  label "Flexera"
  description "Select Flexera One OAuth2 credentials"
  tags "provider=flexera"
end

###############################################################################
# Datasources & Scripts
###############################################################################

# Get applied policy metadata for use later
datasource "ds_applied_policy" do
  request do
    auth $auth_flexera
    host rs_governance_host
    path join(["/api/governance/projects/", rs_project_id, "/applied_policies/", policy_id])
    header "Api-Version", "1.0"
  end
end

# Get region-specific Flexera API endpoints
datasource "ds_flexera_api_hosts" do
  run_script $js_flexera_api_hosts, rs_optima_host
end

script "js_flexera_api_hosts", type: "javascript" do
  parameters "rs_optima_host"
  result "result"
  code <<-EOS
  host_table = {
    "api.optima.flexeraeng.com": {
      flexera: "api.flexera.com",
      fsm: "api.fsm.flexeraeng.com"
    },
    "api.optima-eu.flexeraeng.com": {
      flexera: "api.flexera.eu",
      fsm: "api.fsm-eu.flexeraeng.com"
    },
    "api.optima-apac.flexeraeng.com": {
      flexera: "api.flexera.au",
      fsm: "api.fsm-apac.flexeraeng.com"
    }
  }

  result = host_table[rs_optima_host]
EOS
end

datasource "ds_org_credentials" do
  request do
    auth $auth_flexera
    host val(ds_flexera_api_hosts, 'flexera')
    path join(["/cred/v2/orgs/", rs_org_id, "/credentials"])
    header "Api-Version", "1.0"
  end
  result do
    encoding "json"
    collect jmes_path(response, "values[*]") do
      field "id", jmes_path(col_item, "id")
      field "name", jmes_path(col_item, "name")
      field "tags", jmes_path(col_item, "tags")
      field "scheme", jmes_path(col_item, "scheme")
      field "createdAt", jmes_path(col_item, "createdAt")
      field "createdBy", jmes_path(col_item, "createdBy.email")
      field "updatedAt", jmes_path(col_item, "updatedAt")
      field "updatedBy", jmes_path(col_item, "updatedBy.email")
      field "scope", "Organization"
    end
  end
end

datasource "ds_project_credentials" do
  request do
    auth $auth_flexera
    host val(ds_flexera_api_hosts, 'flexera')
    path join(["/cred/v2/projects/", rs_project_id, "/credentials"])
    header "Api-Version", "1.0"
  end
  result do
    encoding "json"
    collect jmes_path(response, "values[*]") do
      field "id", jmes_path(col_item, "id")
      field "name", jmes_path(col_item, "name")
      field "tags", jmes_path(col_item, "tags")
      field "scheme", jmes_path(col_item, "scheme")
      field "createdAt", jmes_path(col_item, "createdAt")
      field "createdBy", jmes_path(col_item, "createdBy.email")
      field "updatedAt", jmes_path(col_item, "updatedAt")
      field "updatedBy", jmes_path(col_item, "updatedBy.email")
      field "scope", "Project"
    end
  end
end

datasource "ds_credentials_combined" do
  run_script $js_credentials_combined, $ds_org_credentials, $ds_project_credentials, $param_cred_scope, rs_org_id, rs_project_id
end

script "js_credentials_combined", type: "javascript" do
  parameters "ds_org_credentials", "ds_project_credentials", "param_cred_scope", "rs_org_id", "rs_project_id"
  result "result"
  code <<-'EOS'
  credentials = []
  if (_.contains(param_cred_scope, "Organization")) { credentials = credentials.concat(ds_org_credentials) }
  if (_.contains(param_cred_scope, "Project")) { credentials = credentials.concat(ds_project_credentials) }

  result = _.map(credentials, function(cred) {
    new_cred = {}
    _.each(_.keys(cred), function(key) { new_cred[key] = cred[key] })

    tags = {}
    new_cred['tags'] = []

    if (cred['tags']) {
      _.each(cred['tags'], function(tag) {
        tags[tag['key']] = tag['value']
        new_cred['tags'].push([ tag['key'], tag['value'] ].join("="))
      })
    }

    new_cred['tags'] = new_cred['tags'].join(", ")

    new_cred['orgId'] = rs_org_id
    new_cred['projectId'] = new_cred['scope'] == "Project" ? rs_project_id : "N/A"

    new_cred['expirationDate'] = tags['expirationDate'] ? tags['expirationDate'] : "N/A"
    new_cred['provider'] = tags['provider'] ? tags['provider'] : "Unknown"

    return new_cred
  })
EOS
end

datasource "ds_disallowed_credentials" do
  run_script $js_disallowed_credentials, $ds_credentials_combined, $param_cred_allow_list
end

script "js_disallowed_credentials", type: "javascript" do
  parameters "ds_credentials", "param_cred_allow_list"
  result "result"
  code <<-'EOS'
  result = []

  if (param_cred_allow_list.length > 0) {
    result = _.reject(ds_credentials, function(cred) {
      return _.contains(param_cred_allow_list, cred['name']) || _.contains(param_cred_allow_list, cred['id'])
    })
  }
EOS
end

datasource "ds_allowed_credentials" do
  run_script $js_allowed_credentials, $ds_credentials, $param_cred_allow_list
end

script "js_allowed_credentials", type: "javascript" do
  parameters "ds_credentials", "param_cred_allow_list"
  result "result"
  code <<-'EOS'
  if (param_cred_allow_list.length > 0) {
    result = _.filter(ds_credentials, function(cred) {
      return _.contains(param_cred_allow_list, cred['name']) || _.contains(param_cred_allow_list, cred['id'])
    })
  } else {
    result = ds_credentials
  }
EOS
end

datasource "ds_expiring_credentials" do
  run_script $js_expiring_credentials, $ds_allowed_credentials, $param_cred_expiration_days
end

script "js_expiring_credentials", type: "javascript" do
  parameters "ds_allowed_credentials", "param_cred_expiration_days"
  result "result"
  code <<-'EOS'
  result = []

  _.each(ds_allowed_credentials, function(cred) {

  })
EOS
end

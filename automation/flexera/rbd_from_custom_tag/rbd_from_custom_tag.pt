name "Rule-Based Dimension From Custom Tags"
rs_pt_ver 20180301
type "policy"
short_description "Creates and/or updates individual Rule-Based Dimensions based on Custom Tags. See the [README](https://github.com/flexera-public/policy_templates/tree/master/automation/flexera/rbd_from_custom_tag/) and [docs.flexera.com/flexera/EN/Automation](https://docs.flexera.com/flexera/EN/Automation/AutomationGS.htm) to learn more."
long_description ""
severity "low"
category "Cost"
default_frequency "daily"
info(
  version: "0.1.0",
  provider: "Flexera",
  service: "Cloud Cost Optimization",
  policy_set: "Automation",
  publish: "false"
)

###############################################################################
# Parameters
###############################################################################

parameter "param_tag_list" do
  type "list"
  category "Policy Settings"
  label "Custom Tags"
  description "A list of Custom Tags keys to build Rule-Based Dimensions from. Can be either the Custom Tag name as seen in the Flexera platform or the ID returned by Flexera APIs."
  # No default value, user input required
end

parameter "param_name_list" do
  type "list"
  category "Policy Settings"
  label "Dimension Names"
  description "A list of names to give the Rule-Based Dimensions in the Flexera platform. Needs to be in the same order as the 'Custom Tags' parameter. Names will be derived automatically from Custom Tag names if this list is empty."
  default []
end

parameter "param_effective_date" do
  type "string"
  category "Policy Settings"
  label "Effective Date"
  description "Year/month you want rules to start applying in YYYY-MM format"
  default "2010-01"
end

parameter "param_normalize_case" do
  type "string"
  category "Policy Settings"
  label "Lowercase Values"
  description "Whether or not to normalize all values by converting them to lowercase. Note that, if the same value appears multiple times with different casing, and this option is disabled, the rule-based dimension will be rejected and this policy template will fail."
  allowed_values "Yes", "No"
  default "Yes"
end

###############################################################################
# Authentication
###############################################################################

credentials "auth_flexera" do
  schemes "oauth2"
  label "flexera"
  description "Select FlexeraOne OAuth2 credential."
  tags "provider=flexera"
end

###############################################################################
# Datasources & Scripts
###############################################################################

# Get applied policy metadata for use later
datasource "ds_applied_policy" do
  request do
    auth $auth_flexera
    host rs_governance_host
    path join(["/api/governance/projects/", rs_project_id, "/applied_policies/", policy_id])
    header "Api-Version", "1.0"
  end
end

# Get region-specific Flexera API endpoints
datasource "ds_flexera_api_hosts" do
  run_script $js_flexera_api_hosts, rs_optima_host
end

script "js_flexera_api_hosts", type: "javascript" do
  parameters "rs_optima_host"
  result "result"
  code <<-EOS
  host_table = {
    "api.optima.flexeraeng.com": {
      flexera: "api.flexera.com",
      fsm: "api.fsm.flexeraeng.com"
    },
    "api.optima-eu.flexeraeng.com": {
      flexera: "api.flexera.eu",
      fsm: "api.fsm-eu.flexeraeng.com"
    },
    "api.optima-apac.flexeraeng.com": {
      flexera: "api.flexera.au",
      fsm: "api.fsm-apac.flexeraeng.com"
    }
  }

  result = host_table[rs_optima_host]
EOS
end

datasource "ds_billing_centers" do
  request do
    auth $auth_flexera
    host rs_optima_host
    path join(["/analytics/orgs/", rs_org_id, "/billing_centers"])
    query "view", "allocation_table"
    header "Api-Version", "1.0"
    header "User-Agent", "RS Policies"
  end
  result do
    encoding "json"
    collect jmes_path(response, "[*]") do
      field "href", jmes_path(col_item, "href")
      field "id", jmes_path(col_item, "id")
      field "name", jmes_path(col_item, "name")
      field "parent_id", jmes_path(col_item, "parent_id")
    end
  end
end

datasource "ds_top_level_bcs" do
  run_script $js_top_level_bcs, $ds_billing_centers
end

script "js_top_level_bcs", type: "javascript" do
  parameters "ds_billing_centers"
  result "result"
  code <<-'EOS'
  filtered_bcs = _.reject(ds_billing_centers, function(bc) { return bc['parent_id'] })
  result = _.compact(_.pluck(filtered_bcs, 'id'))
EOS
end

datasource "ds_dimensions" do
  request do
    auth $auth_flexera
    host rs_optima_host
    path join(["/bill-analysis/orgs/", rs_org_id, "/costs/dimensions"])
    header "Api-Version", "1.0"
    header "User-Agent", "RS Policies"
  end
  result do
    encoding "json"
    collect jmes_path(response, "dimensions") do
      field "id", jmes_path(col_item, "id")
      field "name", jmes_path(col_item, "name")
      field "type", jmes_path(col_item, "type")
    end
  end
end

datasource "ds_custom_tags" do
  run_script $js_custom_tags, $ds_dimensions, $param_tag_list
end

script "js_custom_tags", type: "javascript" do
  parameters "ds_dimensions", "param_tag_list"
  result "result"
  code <<-EOS
  result = _.filter(ds_dimensions, function(dimension) {
    return dimension["type"] == "Tags" && (_.contains(param_tag_list, dimension['name']) || _.contains(param_tag_list, dimension['id']))
  })
EOS
end

datasource "ds_costs_by_tag" do
  iterate $ds_custom_tags
  request do
    run_script $js_costs_by_tag, val(iter_item, "id"), $ds_top_level_bcs, rs_optima_host, rs_org_id
  end
  result do
    encoding "json"
    collect jmes_path(response, "rows") do
      field "value", jmes_path(col_item, "dimensions")
      field "id", val(iter_item, "id")
      field "name", val(iter_item, "name")
    end
  end
end

script "js_costs_by_tag", type: "javascript" do
  parameters "tag_id", "ds_top_level_bcs", "rs_optima_host", "rs_org_id"
  result "request"
  code <<-EOS
  now = new Date().toISOString()
  month = Number(now.substring(5, 7))
  year = Number(now.substring(0, 4))

  month += 1
  if (month == 13) { month = 1; year += 1 }
  if (month < 10) { month = "0" + month }

  start_year = year - 1

  start_at = start_year.toString() + "-" + month.toString()
  end_at = year.toString() + "-" + month.toString()

  payload = {
    start_at: start_at,
    end_at: end_at,
    billing_center_ids: ds_top_level_bcs,
    dimensions: [ tag_id ],
    granularity: "month",
    metrics: [ "cost_amortized_blended_adj" ]
  }

  var request = {
    auth: "auth_flexera",
    host: rs_optima_host,
    path: [ "/bill-analysis/orgs/", rs_org_id, "/costs/aggregated" ].join(''),
    verb: "POST",
    body_fields: payload,
    headers: { "User-Agent": "RS Policies" }
  }
EOS
end

datasource "ds_tag_values" do
  run_script $js_tag_values, $ds_costs_by_tag
end

script "js_tag_values", type: "javascript" do
  parameters "ds_costs_by_tag"
  result "result"
  code <<-EOS
  value_table = {}

  _.each(ds_costs_by_tag, function(entry) {
    if (entry["value"][entry["id"]] && entry["value"][entry["id"]] != "None") {
      if (value_table[entry["id"]] == undefined) {
        value_table[entry["id"]] = {
          name: entry['name'],
          values: []
        }
      }

      value_table[entry["id"]]["values"].push(entry["value"][entry["id"]])
    }
  })

  result = _.map(_.keys(value_table), function(id) {
    return {
      id: id,
      name: value_table[id]["name"],
      values: _.compact(_.uniq(value_table[id]["values"]))
    }
  })
EOS
end

datasource "ds_new_rules" do
  run_script $js_new_rules, $ds_tag_values, $param_name_list, $param_effective_date, $param_normalize_case
end

script "js_new_rules", type: "javascript" do
  parameters "ds_tag_values", "param_name_list", "param_effective_date", "param_normalize_case"
  result "result"
  code <<-'EOS'
  rule_lists = []

  _.each(ds_tag_values, function(item, index) {
    rbd_id = "rbd_" + item["id"].split("tag_")[1]
    rbd_name = ds_tag_values.length == param_name_list.length ? rbd_name = param_name_list[index] : rbd_name = item["name"] + " (RBD)"

    rules = _.map(item["values"], function(value) {
      rule_value = param_normalize_case == "Yes" ? value.trim().toLowerCase() : value.trim()

      return {
        condition: {
          type: "dimension_equals",
          dimension: item["id"],
          value: rule_value,
          caseInsensitive: true
        },
        value: {
          text: rule_value
        }
      }
    })

    if (rules.length > 0) {
      rule_lists.push({
        id: rbd_id,
        name: rbd_name,
        effective_at: param_effective_date,
        rules: rules
      })
    }
  })

  result = {
    rule_lists: rule_lists,
    dummy: "dummy"
  }
EOS
end

datasource "ds_existing_rbds" do
  request do
    auth $auth_flexera
    host val($ds_flexera_api_hosts, "flexera")
    path join(["/finops-customizations/v1/orgs/", rs_org_id, "/rule-based-dimensions"])
    # This is just to ensure that the new rules are generated before we gather existing RBDs
    header "dummy", val($ds_new_rules, "dummy")
  end
  result do
    encoding "json"
    collect jmes_path(response, "values[*]") do
      field "id", jmes_path(col_item, "id")
      field "name", jmes_path(col_item, "name")
    end
  end
end

datasource "ds_existing_rbds_that_match" do
  run_script $js_existing_rbds_that_match, $ds_existing_rbds, $ds_new_rules
end

script "js_existing_rbds_that_match", type: "javascript" do
  parameters "ds_existing_rbds", "ds_new_rules"
  result "result"
  code <<-'EOS'
  new_ids = _.pluck(ds_new_rules["rule_lists"], "id")
  result = _.filter(ds_existing_rbds, function(rbd) { return _.contains(new_ids, rbd["id"]) })
EOS
end

datasource "ds_existing_rbds_with_rules" do
  iterate $ds_existing_rbds_that_match
  request do
    auth $auth_flexera
    host val($ds_flexera_api_hosts, "flexera")
    path join(["/finops-customizations/v1/orgs/", rs_org_id, "/rule-based-dimensions/", val(iter_item, "id"), "/rules/", $param_effective_date])
    # We simply skip RBDs that don't have a ruleset with a conflicting date
    ignore_status [ 400, 401, 403, 404, 429 ]
  end
  result do
    encoding "json"
    field "rules", jmes_path(response, "rules")
    field "id", val(iter_item, "id")
    field "name", val(iter_item, "name")
  end
end

datasource "ds_rbds" do
  run_script $js_rbds, $ds_new_rules, $ds_existing_rbds, $ds_existing_rbds_with_rules, $ds_applied_policy
end

script "js_rbds", type: "javascript" do
  parameters "ds_new_rules", "ds_existing_rbds", "ds_existing_rbds_with_rules", "ds_applied_policy"
  result "result"
  code <<-'EOS'
  existing_rbd_ids = _.pluck(ds_existing_rbds, "id")

  // Create rules that mark the beginning and end of the generated AWS rules.
  start_block_value = "Start: " + ds_applied_policy["name"]
  end_block_value = "End: " + ds_applied_policy["name"]

  block_start_rule = {
    condition: { dimension: "vendor", type: "dimension_equals", value: start_block_value },
    value: { text: start_block_value }
  }

  block_end_rule = {
    condition: { dimension: "vendor", type: "dimension_equals", value: end_block_value },
    value: { text: end_block_value }
  }

  // Create tables to easily reference the existing rules and our generated rules by RBD ID
  new_rules_table = {}
  _.each(ds_new_rules["rule_lists"], function(rbd) { new_rules_table[rbd["id"]] = rbd })

  existing_rules_table = {}
  _.each(ds_existing_rbds_with_rules, function(rbd) { existing_rules_table[rbd["id"]] = rbd["rules"] })

  result = []

  // Build combined rule sets
  _.each(_.keys(new_rules_table), function(rbd_id) {
    rules = []

    // Track whether we've found an existing block of generated rules or not.
    // Also track whether we've replaced them with the newly generated rules
    found_block = false
    injected_rules = false

    if (existing_rules_table[rbd_id]) {
      _.each(existing_rules_table[rbd_id], function(rule) {
        if (!found_block) {
          // When we find the beginning of the existing block of generated rules,
          // replace them with our new rules
          if (rule["condition"]["value"] == start_block_value) {
            found_block = true
            injected_rules = true

            rules.push(block_start_rule)
            rules = rules.concat(new_rules_table[rbd_id]["rules"])
            rules.push(block_end_rule)
          } else {
            rules.push(rule)
          }
        }

        if (found_block && rule["condition"]["value"] == end_block_value) { found_block = false }
      })
    }

    // If we never injected the rules because we never found an existing block of generated rules,
    // add them now to the end of the rules instead.
    if (!injected_rules) {
      rules.push(block_start_rule)
      rules = rules.concat(new_rules_table[rbd_id]["rules"])
      rules.push(block_end_rule)
    }

    if (rules.length > 0) {
      result.push({
        id: rbd_id,
        name: new_rules_table[rbd_id]["name"],
        verb: _.contains(existing_rbd_ids, rbd_id) ? "PATCH" : "POST",
        effective_at: new_rules_table[rbd_id]["effective_at"],
        rules: rules
      })
    }
  })
EOS
end

datasource "ds_create_rbds" do
  iterate $ds_rbds
  request do
    run_script $js_create_rbds, val(iter_item, "id"), val(iter_item, "verb"), val(iter_item, "name"), val($ds_flexera_api_hosts, "flexera"), rs_org_id
  end
  result do
    encoding "text"
  end
end

script "js_create_rbds", type: "javascript" do
  parameters "rbd_id", "verb", "name", "api_host", "rs_org_id"
  result "request"
  code <<-EOS
  var request = {
    auth: "auth_flexera",
    verb: verb,
    host: api_host,
    path: ["/finops-customizations/v1/orgs/", rs_org_id, "/rule-based-dimensions/", rbd_id].join(''),
    body_fields: { name: name }
  }
EOS
end

datasource "ds_apply_rbds" do
  iterate $ds_rbds
  request do
    # ds_create_rbds is a parameter to ensure that it executes before ds_apply_rbds does
    run_script $js_apply_rbds, val(iter_item, "id"), val(iter_item, "effective_at"), val(iter_item, "rules"), val($ds_flexera_api_hosts, "flexera"), $ds_create_rbds, rs_org_id
  end
  result do
    encoding "text"
  end
end

script "js_apply_rbds", type: "javascript" do
  parameters "rbd_id", "effective_at", "rules", "api_host", "ds_create_rbds", "rs_org_id"
  result "request"
  code <<-EOS
  var request = {
    auth: "auth_flexera",
    verb: "PUT",
    host: api_host,
    path: ["/finops-customizations/v1/orgs/", rs_org_id, "/rule-based-dimensions/", rbd_id, "/rules/", effective_at].join(''),
    body_fields: { rules: rules }
  }
EOS
end

###############################################################################
# Policy
###############################################################################

policy "pol_rbds" do
  validate $ds_apply_rbds do
    summary_template "RBDs Generated & Applied"
    detail_template ""
    check eq(0, 0)
  end
end

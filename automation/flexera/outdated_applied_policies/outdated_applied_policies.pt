name "Flexera Automation Outdated Applied Policies"
rs_pt_ver 20180301
type "policy"
short_description "Reports any applied policies in Flexera Automation that are not using the latest version of that policy from the catalog. See the [README](https://github.com/flexera-public/policy_templates/tree/master/automation/flexera/outdated_applied_policies) and [docs.flexera.com/flexera/EN/Automation](https://docs.flexera.com/flexera/EN/Automation/AutomationGS.htm) to learn more."
long_description ""
severity "low"
category "Operational"
default_frequency "weekly"
info(
  version: "0.1",
  provider: "Flexera",
  service: "Automation",
  policy_set: "Automation"
)

###############################################################################
# Parameters
###############################################################################

parameter "param_email" do
  type "list"
  category "Policy Settings"
  label "Email Addresses"
  description "A list of email addresses to notify."
  default []
end

parameter "param_automatic_action" do
  type "list"
  category "Actions"
  label "Automatic Actions"
  description "When this value is set, this policy will automatically take the selected action(s)"
  default []
  allowed_values ["Update Applied Policies"]
end

###############################################################################
# Authentication
###############################################################################

credentials "auth_flexera" do
  schemes "oauth2"
  label "Flexera"
  description "Select Flexera One OAuth2 credentials"
  tags "provider=flexera"
end

###############################################################################
# Datasources & Scripts
###############################################################################

datasource "ds_self_policy" do
  request do
    auth $auth_flexera
    host rs_governance_host
    path join(["/api/governance/projects/", rs_project_id, "/applied_policies/", policy_id])
    header "Api-Version", "1.0"
  end
end

datasource "ds_applied_policies" do
  request do
    auth $auth_flexera
    host rs_governance_host
    path join(["/api/governance/projects/", rs_project_id, "/applied_policies"])
    header "Api-Version", "1.0"
  end
  result do
    encoding "json"
    collect jmes_path(response, "items[*]") do
      field "id", jmes_path(col_item, "id")
      field "href", jmes_path(col_item, "href")
      field "name", jmes_path(col_item, "name")
      field "description", jmes_path(col_item, "description")
      field "category", jmes_path(col_item, "category")
      field "created_at", jmes_path(col_item, "created_at")
      field "created_by", jmes_path(col_item, "created_by.email")
      field "frequency", jmes_path(col_item, "frequency")
      field "category", jmes_path(col_item, "category")
      field "credentials", jmes_path(col_item, "credentials")
      field "options", jmes_path(col_item, "options")
      field "severity", jmes_path(col_item, "severity")
      field "skip_approvals", jmes_path(col_item, "skip_approvals")
      field "scope", jmes_path(col_item, "scope")
      field "dry_run", jmes_path(col_item, "dry_run")
      field "log_level", jmes_path(col_item, "log_level")
      field "version", jmes_path(col_item, "info.version")
      field "policy_template", jmes_path(col_item, "policy_template")
      field "published_template", jmes_path(col_item, "published_template")
    end
  end
end

datasource "ds_catalog_policies" do
  request do
    verb "GET"
    host "raw.githubusercontent.com"
    path "/flexera-public/policy_templates/master/data/active_policy_list/active_policy_list.json"
    header "User-Agent", "RS Policies"
  end
  result do
    encoding "json"
    collect jmes_path(response, "policies[*]") do
      field "name", jmes_path(col_item, "name")
      field "file_name", jmes_path(col_item, "file_name")
      field "version", jmes_path(col_item, "version")
      field "change_log", jmes_path(col_item, "change_log")
      field "description", jmes_path(col_item, "description")
      field "category", jmes_path(col_item, "category")
      field "severity", jmes_path(col_item, "severity")
      field "readme", jmes_path(col_item, "readme")
      field "provider", jmes_path(col_item, "provider")
      field "service", jmes_path(col_item, "service")
      field "policy_set", jmes_path(col_item, "policy_set")
    end
  end
end

datasource "ds_outdated_policies" do
  run_script $js_outdated_policies, $ds_applied_policies, $ds_catalog_policies, $ds_self_policy, policy_id
end

script "js_outdated_policies", type: "javascript" do
  parameters "ds_applied_policies", "ds_catalog_policies", "ds_self_policy", "policy_id"
  result "result"
  code <<-'EOS'
  catalog_object = {}

  _.each(ds_catalog_policies, function(policy) {
    catalog_object[policy['name']] = policy
  })

  applied_from_catalog = _.reject(ds_applied_policies, function(policy) {
    return policy['published_template'] == null
  })

  combined_data = _.map(applied_from_catalog, function(policy) {
    catalog_policy = catalog_object[policy['published_template']['name']]

    return {
      id: policy['id'],
      href: policy['href'],
      name: policy['name'],
      description: policy['description'],
      category: policy['category'],
      created_at: policy['created_at'],
      created_by: policy['created_by'],
      frequency: policy['frequency'],
      version: policy['version'],
      credentials: policy['credentials'],
      options: policy['options'],
      severity: policy['severity'],
      skip_approvals: policy['skip_approvals'],
      scope: policy['scope'],
      dry_run: policy['dry_run'],
      log_level: policy['log_level'],
      catalog_id: policy['published_template']['id'],
      catalog_href: policy['published_template']['href'],
      catalog_name: catalog_policy['name'],
      catalog_file_name: catalog_policy['file_name'],
      catalog_version: catalog_policy['version'],
      catalog_change_log: catalog_policy['change_log'],
      catalog_description: catalog_policy['description'],
      catalog_category: catalog_policy['category'],
      catalog_severity: catalog_policy['severity'],
      catalog_readme: catalog_policy['readme'],
      catalog_provider: catalog_policy['provider'],
      catalog_service: catalog_policy['service'],
      catalog_policy_set: catalog_policy['policy_set'],
      self_policy_name: ds_self_policy['name']
    }
  })

  result = _.filter(combined_data, function(policy) {
    return true
    //return policy['version'] != policy['catalog_version'] && typeof(policy['catalog_version']) == 'string' && policy['id'] != policy_id
  })
EOS
end

##############################################################################
# Policy
###############################################################################

policy "pol_outdated_policies" do
  validate_each $ds_outdated_policies do
    summary_template "{{ with index data 0 }}{{ .self_policy_name }}{{ end }}: {{ len data }} Outdated Policies Found"
    check eq(val(item, "id"), "")
    escalate $esc_email
    escalate $esc_update_policies
    export do
      resource_level true
      field "id" do
        label "Applied Policy ID"
      end
      field "name" do
        label "Applied Policy Name"
      end
      field "version" do
        label "Applied Policy Version"
      end
      field "catalog_version" do
        label "Catalog Policy Version"
      end
      field "catalog_id" do
        label "Catalog Policy ID"
      end
      field "catalog_name" do
        label "Catalog Policy Name"
      end
      field "catalog_href" do
        label "Catalog Policy HREF"
      end
      field "href" do
        label "Applied Policy HREF"
      end
      field "credentials" do
        label "Applied Policy Credentials"
      end
      field "description" do
        label "Applied Policy Description"
      end
      field "frequency" do
        label "Applied Policy Frequency"
      end
      field "options" do
        label "Applied Policy Parameters"
      end
      field "severity" do
        label "Applied Policy Severity"
      end
      field "skip_approvals" do
        label "Applied Policy Skip Approvals"
      end
      field "scope" do
        label "Applied Policy Scope"
      end
      field "dry_run" do
        label "Applied Policy Dry Run"
      end
      field "log_level" do
        label "Applied Policy Log Level"
      end
    end
  end
end

###############################################################################
# Escalations
###############################################################################

escalation "esc_email" do
  automatic true
  label "Send Email"
  description "Send incident email"
  email $param_email
end

escalation "esc_update_policies" do
  automatic contains($param_automatic_action, "Update Applied Policies")
  label "Update Applied Policies"
  description "Approval to update all selected applied policies to the latest version"
  run "update_policies", data, rs_governance_host, rs_project_id
end

###############################################################################
# Cloud Workflow
###############################################################################

define update_policies($data, $rs_governance_host, $rs_project_id) return $all_responses do
  $$all_responses = []

  foreach $policy in $data do
    sub on_error: handle_error() do

      if split($policy['version'], '.')[0] == split($policy['catalog_version'], '.')[0]
        call apply_policy($policy, $rs_governance_host, $rs_project_id) retrieve $apply_response

        if $apply_response['code'] == 204 || $apply_policy_response['code'] == 202 || $apply_policy_response['code'] == 200
          call delete_policy($policy, $rs_governance_host) retrieve $delete_response
        end
      else
        raise "Applied Policy " + $policy["name"] + " (" + $policy["id"] + ") not updated due to major version change. Please update manually."
      end
    end
  end

  if inspect($$errors) != "null"
    raise join($$errors, "\n")
  end
end

define apply_policy($policy, $rs_governance_host, $rs_project_id) return $response do
  $host = $rs_governance_host
  $href = "/api/governance/projects/" + $rs_project_id + "/applied_policies"
  $url = $host + $href
  task_label("POST " + $url)

  $response = http_request(
    auth: $$auth_flexera,
    host: $host,
    href: $href,
    https: true,
    verb: "post",
    headers: { "Api-Version": "1.0" },
    body: {
      "credentials": $policy["credentials"],
      "description": $policy["description"],
      "dry_run": $policy["dry_run"],
      "frequency": $policy["frequency"],
      "name": $policy["name"],
      "options": $policy["options"],
      "severity": $policy["severity"],
      "skip_approvals": $policy["skip_approvals"],
      "template_href": $policy["catalog_href"]
    }
  )

  task_label("Apply Catalog Policy response: " + $policy["catalog_id"] + " " + to_json($response))
  $$all_responses << to_json({"req": "POST " + $url, "resp": $response})

  if $response["code"] != 204 && $response["code"] != 202 && $response["code"] != 200
    raise "Unexpected response applying Catalog Policy: " + $policy["catalog_id"] + " " + to_json($response)
  else
    task_label("Apply Catalog Policy successful: " + $policy["catalog_id"])
  end
end

define delete_policy($policy, $rs_governance_host) return $response do
  $host = $rs_governance_host
  $href = $policy['href']
  $url = $host + $href
  task_label("DELETE " + $url)

  $response = http_request(
    auth: $$auth_flexera,
    host: $host,
    href: $href,
    https: true,
    verb: "delete",
    headers: { "Api-Version": "1.0" }
  )

  task_label("Delete Applied Policy response: " + $policy["id"] + " " + to_json($response))
  $$all_responses << to_json({"req": "POST " + $url, "resp": $response})

  if $response["code"] != 204 && $response["code"] != 202 && $response["code"] != 200
    raise "Unexpected response deleting Applied Policy: " + $policy["id"] + " " + to_json($response)
  else
    task_label("Delete Applied Policy successful: " + $policy["id"])
  end
end

define handle_error() do
  if !$$errors
    $$errors = []
  end
  $$errors << $_error["type"] + ": " + $_error["message"]
  # We check for errors at the end, and raise them all together
  # Skip errors handled by this definition
  $_error_behavior = "skip"
end

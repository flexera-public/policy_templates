name "Flexera Automation Disallowed Credentials"
rs_pt_ver 20180301
type "policy"
short_description "Reports any Flexera Automation credentials that are not on a user-provided list and, optionally, deletes them. See the [README](https://github.com/flexera-public/policy_templates/tree/master/automation/flexera/disallowed_credentials) and [docs.flexera.com/flexera/EN/Automation](https://docs.flexera.com/flexera/EN/Automation/AutomationGS.htm) to learn more."
long_description ""
doc_link "https://github.com/flexera-public/policy_templates/tree/master/automation/flexera/disallowed_credentials"
severity "high"
category "Operational"
default_frequency "weekly"
info(
  version: "0.1.2",
  provider: "Flexera",
  service: "Automation",
  policy_set: "Automation"
)

###############################################################################
# Parameters
###############################################################################

parameter "param_email" do
  type "list"
  category "Policy Settings"
  label "Email Addresses"
  description "A list of email addresses to notify."
  default []
end

parameter "param_cred_scope" do
  type "list"
  category "Policy Settings"
  label "Credential Scope"
  description "Whether to report on Organization-level or Project-level credentials. Select both to report both. Only Project-level credentials in the specific project this policy template is applied in will be reported."
  allowed_values [ "Organization", "Project" ]
  default [ "Organization", "Project" ]
end

parameter "param_cred_allow_list" do
  type "list"
  category "Policy Settings"
  label "Credential Allow List"
  description "The names/IDs of credentials that are allowed to exist in Flexera Automation. If a credential is not on this list, it will be reported as disallowed."
  default []
end

parameter "param_automatic_action" do
  type "list"
  category "Actions"
  label "Automatic Actions"
  description "When this value is set, this policy will automatically take the selected action(s)"
  allowed_values [ "Delete Disallowed Credentials" ]
  default []
end

###############################################################################
# Authentication
###############################################################################

credentials "auth_flexera" do
  schemes "oauth2"
  label "Flexera"
  description "Select Flexera One OAuth2 credentials"
  tags "provider=flexera"
end

###############################################################################
# Datasources & Scripts
###############################################################################

# Get region-specific Flexera API endpoints
datasource "ds_flexera_api_hosts" do
  run_script $js_flexera_api_hosts, rs_optima_host
end

script "js_flexera_api_hosts", type: "javascript" do
  parameters "rs_optima_host"
  result "result"
  code <<-EOS
  host_table = {
    "api.optima.flexeraeng.com": {
	    api: "api.flexera.com",
      flexera: "api.flexera.com",
      fsm: "api.fsm.flexeraeng.com",
      grs: "grs-front.iam-us-east-1.flexeraeng.com",
      ui: "app.flexera.com",
      tld: "flexera.com"
    },
    "api.optima-eu.flexeraeng.com": {
	    api: "api.flexera.eu",
      flexera: "api.flexera.eu",
      fsm: "api.fsm-eu.flexeraeng.com",
      grs: "grs-front.eu-central-1.iam-eu.flexeraeng.com",
      ui: "app.flexera.eu",
      tld: "flexera.eu"
    },
    "api.optima-apac.flexeraeng.com": {
	    api: "api.flexera.au",
      flexera: "api.flexera.au",
      fsm: "api.fsm-apac.flexeraeng.com",
      grs: "grs-front.ap-southeast-2.iam-apac.flexeraeng.com",
      ui: "app.flexera.au",
      tld: "flexera.au"
    }
  }

  result = host_table[rs_optima_host]
EOS
end

# Get applied policy metadata for use later
datasource "ds_applied_policy" do
  request do
    auth $auth_flexera
    host val($ds_flexera_api_hosts, "flexera")
    path join(["/policy/v1/orgs/", rs_org_id, "/projects/", rs_project_id, "/applied-policies", switch(policy_id, join(["/", policy_id]), "")]])
  end
end

datasource "ds_org_credentials" do
  request do
    auth $auth_flexera
    host val($ds_flexera_api_hosts, 'flexera')
    path join(["/cred/v2/orgs/", rs_org_id, "/credentials"])
    header "Api-Version", "1.0"
  end
  result do
    encoding "json"
    collect jmes_path(response, "values[*]") do
      field "id", jmes_path(col_item, "id")
      field "name", jmes_path(col_item, "name")
      field "tags", jmes_path(col_item, "tags")
      field "scheme", jmes_path(col_item, "scheme")
      field "createdAt", jmes_path(col_item, "createdAt")
      field "createdBy", jmes_path(col_item, "createdBy.email")
      field "updatedAt", jmes_path(col_item, "updatedAt")
      field "updatedBy", jmes_path(col_item, "updatedBy.email")
      field "scope", "Organization"
    end
  end
end

datasource "ds_project_credentials" do
  request do
    auth $auth_flexera
    host val($ds_flexera_api_hosts, 'flexera')
    path join(["/cred/v2/projects/", rs_project_id, "/credentials"])
    header "Api-Version", "1.0"
  end
  result do
    encoding "json"
    collect jmes_path(response, "values[*]") do
      field "id", jmes_path(col_item, "id")
      field "name", jmes_path(col_item, "name")
      field "tags", jmes_path(col_item, "tags")
      field "scheme", jmes_path(col_item, "scheme")
      field "createdAt", jmes_path(col_item, "createdAt")
      field "createdBy", jmes_path(col_item, "createdBy.email")
      field "updatedAt", jmes_path(col_item, "updatedAt")
      field "updatedBy", jmes_path(col_item, "updatedBy.email")
      field "scope", "Project"
    end
  end
end

datasource "ds_credentials_combined" do
  run_script $js_credentials_combined, $ds_org_credentials, $ds_project_credentials, $ds_applied_policy, $ds_flexera_api_hosts, $param_cred_scope, rs_org_id, rs_project_id
end

script "js_credentials_combined", type: "javascript" do
  parameters "ds_org_credentials", "ds_project_credentials", "ds_applied_policy", "ds_flexera_api_hosts", "param_cred_scope", "rs_org_id", "rs_project_id"
  result "result"
  code <<-'EOS'
  credentials = []
  if (_.contains(param_cred_scope, "Organization")) { credentials = credentials.concat(ds_org_credentials) }
  if (_.contains(param_cred_scope, "Project")) { credentials = credentials.concat(ds_project_credentials) }

  result = _.map(credentials, function(cred) {
    new_cred = {}
    _.each(_.keys(cred), function(key) { new_cred[key] = cred[key] })

    tags = {}
    new_cred['tags'] = []

    if (cred['tags']) {
      _.each(cred['tags'], function(tag) {
        tags[tag['key']] = tag['value']
        new_cred['tags'].push([ tag['key'], tag['value'] ].join('='))
      })
    }

    new_cred['tags'] = new_cred['tags'].join(', ')

    new_cred['orgId'] = rs_org_id
    new_cred['projectId'] = new_cred['scope'] == "Project" ? rs_project_id : "N/A"
    new_cred['provider'] = tags['provider'] ? tags['provider'] : "Unknown"
    new_cred['api_host'] = ds_flexera_api_hosts['flexera']
    new_cred['policy_name'] = ds_applied_policy['name']

    new_cred['expirationDate'] = tags['expirationDate'] ? tags['expirationDate'].substring(0, 10) : "N/A"

    return new_cred
  })
EOS
end

datasource "ds_disallowed_credentials" do
  run_script $js_disallowed_credentials, $ds_credentials_combined, $param_cred_allow_list
end

script "js_disallowed_credentials", type: "javascript" do
  parameters "ds_credentials_combined", "param_cred_allow_list"
  result "result"
  code <<-'EOS'
  result = _.reject(ds_credentials_combined, function(cred) {
    return _.contains(param_cred_allow_list, cred['id']) || _.contains(param_cred_allow_list, cred['name'])
  })
EOS
end

###############################################################################
# Policy
###############################################################################

policy "pol_disallowed_creds" do
  validate_each $ds_disallowed_credentials do
    summary_template "{{ with index data 0 }}{{ .policy_name }}{{ end }}: {{ len data }} Disallowed Automation Credentials Found"
    check eq(val(item, "id"), "")
    escalate $esc_email
    escalate $esc_delete_credentials
    export do
      resource_level true
      field "id" do
        label "ID"
      end
      field "name" do
        label "Name"
      end
      field "provider" do
        label "Provider"
      end
      field "scheme" do
        label "Scheme"
      end
      field "scope" do
        label "Scope"
      end
      field "orgId" do
        label "Organization ID"
      end
      field "projectId" do
        label "Project ID"
      end
      field "expirationDate" do
        label "Expiration Date"
      end
      field "createdBy" do
        label "Created By"
      end
      field "api_host" do
        label "API Host"
      end
    end
  end
end

###############################################################################
# Escalations
###############################################################################

escalation "esc_email" do
  automatic true
  label "Send Email"
  description "Send incident email"
  email $param_email
end

escalation "esc_delete_credentials" do
  automatic contains($param_automatic_action, "Delete Disallowed Credentials")
  label "Delete Disallowed Credentials"
  description "Approval to delete all selected credentials"
  run "delete_credentials", data
end

###############################################################################
# Cloud Workflow
###############################################################################

define delete_credentials($data) return $all_responses do
  $$all_responses = []

  foreach $credential in $data do
    sub on_error: handle_error() do
      call delete_credential($credential) retrieve $delete_response
    end
  end

  if inspect($$errors) != "null"
    raise join($$errors, "\n")
  end
end

define delete_credential($credential) return $response do
  $host = $credential['api_host']

  if $credential["scope"] == "Project"
    $href = "/cred/v2/projects/" + $credential["projectId"] + "/credentials/" + $credential["scheme"] + "/" + $credential["id"]
  else
    $href = "/cred/v2/orgs/" + $credential["orgId"] + "/credentials/" + $credential["scheme"] + "/" + $credential["id"]
  end

  $url = $host + $href
  task_label("DELETE " + $url)

  $response = http_request(
    auth: $$auth_flexera,
    https: true,
    verb: "delete",
    host: $host,
    href: $href
  )

  task_label("Delete Credential response: " + $credential["id"] + " " + to_json($response))
  $$all_responses << to_json({"req": "DELETE " + $url, "resp": $response})

  if $response["code"] != 204 && $response["code"] != 202 && $response["code"] != 200
    raise "Unexpected response deleting Credential: " + $credential["id"] + " " + to_json($response)
  else
    task_label("Delete Credential successful: " + $credential["id"])
  end
end

define handle_error() do
  if !$$errors
    $$errors = []
  end
  $$errors << $_error["type"] + ": " + $_error["message"]
  # We check for errors at the end, and raise them all together
  # Skip errors handled by this definition
  $_error_behavior = "skip"
end

name "Google Missing Projects"
rs_pt_ver 20180301
type "policy"
short_description "Reports any Google Projects present in Flexera One that are not accessible via the Google automation credential. See the [README](https://github.com/flexera-public/policy_templates/tree/master/automation/google/google_missing_projects) and [docs.flexera.com/flexera/EN/Automation](https://docs.flexera.com/flexera/EN/Automation/AutomationGS.htm) to learn more."
long_description ""
doc_link "https://github.com/flexera-public/policy_templates/tree/master/automation/google/google_missing_projects"
category "Cost"
severity "low"
default_frequency "weekly"
info(
  version: "0.1.2",
  provider: "Flexera",
  service: "Cloud Cost Optimization",
  policy_set: "Automation",
  publish: "false"
)

###############################################################################
# Parameters
###############################################################################

parameter "param_email" do
  type "list"
  category "Policy Settings"
  label "Email Addresses"
  description "A list of email addresses to notify."
  default []
end

parameter "param_report_selection" do
  type "string"
  category "Policy Settings"
  label "Report Selection"
  description "Whether to report Projects missing in the Google Cloud Resource Manager API but present in CCO data, the opposite, or both."
  allowed_values "Missing in Google API", "Missing in CCO", "Both"
  default "Missing in Google API"
end

parameter "param_projects_list" do
  type "list"
  category "Filters"
  label "Projects Ignore List"
  description "A list of Project IDs/names to never include in the results. Leave blank to not filter results."
  default []
end

###############################################################################
# Authentication
###############################################################################

credentials "auth_google" do
  schemes "oauth2"
  label "Google"
  description "Select the Google Cloud Credential from the list."
  tags "provider=gce"
end

credentials "auth_flexera" do
  schemes "oauth2"
  label "Flexera"
  description "Select Flexera One OAuth2 credentials"
  tags "provider=flexera"
end

###############################################################################
# Pagination
###############################################################################

pagination "pagination_google" do
  get_page_marker do
    body_path "nextPageToken"
  end
  set_page_marker do
    query "pageToken"
  end
end

###############################################################################
# Datasources & Scripts
###############################################################################

# Get region-specific Flexera API endpoints
datasource "ds_flexera_api_hosts" do
  run_script $js_flexera_api_hosts, rs_optima_host
end

script "js_flexera_api_hosts", type: "javascript" do
  parameters "rs_optima_host"
  result "result"
  code <<-EOS
  host_table = {
    "api.optima.flexeraeng.com": {
	    api: "api.flexera.com",
      flexera: "api.flexera.com",
      fsm: "api.fsm.flexeraeng.com",
      grs: "grs-front.iam-us-east-1.flexeraeng.com",
      ui: "app.flexera.com",
      tld: "flexera.com"
    },
    "api.optima-eu.flexeraeng.com": {
	    api: "api.flexera.eu",
      flexera: "api.flexera.eu",
      fsm: "api.fsm-eu.flexeraeng.com",
      grs: "grs-front.eu-central-1.iam-eu.flexeraeng.com",
      ui: "app.flexera.eu",
      tld: "flexera.eu"
    },
    "api.optima-apac.flexeraeng.com": {
	    api: "api.flexera.au",
      flexera: "api.flexera.au",
      fsm: "api.fsm-apac.flexeraeng.com",
      grs: "grs-front.ap-southeast-2.iam-apac.flexeraeng.com",
      ui: "app.flexera.au",
      tld: "flexera.au"
    }
  }

  result = host_table[rs_optima_host]
EOS
end

# Get applied policy metadata for use later
datasource "ds_applied_policy" do
  request do
    auth $auth_flexera
    host val($ds_flexera_api_hosts, "flexera")
    path join(["/policy/v1/orgs/", rs_org_id, "/projects/", rs_project_id, "/applied-policies", switch(policy_id, join(["/", policy_id]), "")])
  end
end

datasource "ds_billing_centers" do
  request do
    auth $auth_flexera
    host rs_optima_host
    path join(["/analytics/orgs/", rs_org_id, "/billing_centers"])
    query "view", "allocation_table"
    header "Api-Version", "1.0"
    header "User-Agent", "RS Policies"
    ignore_status [403]
  end
  result do
    encoding "json"
    collect jmes_path(response, "[*]") do
      field "href", jmes_path(col_item, "href")
      field "id", jmes_path(col_item, "id")
      field "name", jmes_path(col_item, "name")
      field "parent_id", jmes_path(col_item, "parent_id")
    end
  end
end

# Gather top level billing center IDs for when we pull cost data
datasource "ds_top_level_bcs" do
  run_script $js_top_level_bcs, $ds_billing_centers
end

script "js_top_level_bcs", type: "javascript" do
  parameters "ds_billing_centers"
  result "result"
  code <<-EOS
  filtered_bcs = _.filter(ds_billing_centers, function(bc) {
    return bc['parent_id'] == null || bc['parent_id'] == undefined
  })

  result = _.compact(_.pluck(filtered_bcs, 'id'))
EOS
end

datasource "ds_flexera_cco_data" do
  request do
    run_script $js_flexera_cco_data, $ds_top_level_bcs, rs_org_id, rs_optima_host
  end
  result do
    encoding "json"
    collect jmes_path(response, "rows[*]") do
      field "bill_source", jmes_path(col_item, "dimensions.bill_source")
      field "vendor_account", jmes_path(col_item, "dimensions.vendor_account")
      field "vendor_account_name", jmes_path(col_item, "dimensions.vendor_account_name")
    end
  end
end

script "js_flexera_cco_data", type: "javascript" do
  parameters "ds_top_level_bcs", "rs_org_id", "rs_optima_host"
  result "request"
  code <<-EOS
  end_date = new Date()
  end_date.setDate(end_date.getDate() - 2)
  end_date = end_date.toISOString().split('T')[0]

  start_date = new Date()
  start_date.setDate(start_date.getDate() - 3)
  start_date = start_date.toISOString().split('T')[0]

  var request = {
    auth: "auth_flexera",
    host: rs_optima_host,
    verb: "POST",
    path: "/bill-analysis/orgs/" + rs_org_id + "/costs/aggregated",
    body_fields: {
      dimensions: ["bill_source", "vendor_account", "vendor_account_name"],
      granularity: "day",
      start_at: start_date,
      end_at: end_date,
      metrics: ["cost_amortized_unblended_adj"],
      billing_center_ids: ds_top_level_bcs,
      limit: 100000,
      filter: {
        "type": "or",
        "expressions": [
          { "dimension": "vendor", "type": "equal", "value": "Google" },
          { "dimension": "vendor", "type": "equal", "value": "google" },
          { "dimension": "vendor", "type": "equal", "value": "Google Cloud" },
          { "dimension": "vendor", "type": "equal", "value": "google cloud" },
          { "dimension": "vendor", "type": "equal", "value": "Google Cloud Platform" },
          { "dimension": "vendor", "type": "equal", "value": "google cloud platform" },
          { "dimension": "vendor", "type": "equal", "value": "GCP" },
          { "dimension": "vendor", "type": "equal", "value": "gcp" }
        ]
      }
    },
    headers: {
      'User-Agent': "RS Policies",
      'Api-Version': "1.0"
    },
    ignore_status: [400]
  }
EOS
end

datasource "ds_google_projects" do
  request do
    auth $auth_google
    pagination $pagination_google
    host "cloudresourcemanager.googleapis.com"
    path "/v1/projects/"
    query "filter", "lifecycleState=ACTIVE"
    ignore_status [400, 403, 404]
  end
  result do
    encoding "json"
    collect jmes_path(response, "projects[*]") do
      field "id", jmes_path(col_item, "projectId")
      field "number", jmes_path(col_item, "projectNumber")
      field "name", jmes_path(col_item, "name")
      field "parent", jmes_path(col_item, "parent")
      field "createTime", jmes_path(col_item, "createTime")
      field "lifecycleState", jmes_path(col_item, "lifecycleState")
      field "tags", jmes_path(col_item, "labels")
    end
  end
end

datasource "ds_missing_projects_api" do
  run_script $js_missing_projects_api, $ds_flexera_cco_data, $ds_google_projects, $ds_applied_policy, $param_projects_list, $param_report_selection
end

script "js_missing_projects_api", type: "javascript" do
  parameters "ds_flexera_cco_data", "ds_google_projects", "ds_applied_policy", "param_projects_list", "param_report_selection"
  result "result"
  code <<-'EOS'
  result = []

  if (param_report_selection != 'Missing in CCO') {
    automation_ids = _.map(ds_google_projects, function(project) {
      return project['id'].toLowerCase().trim()
    })

    missing_projects = _.reject(ds_flexera_cco_data, function(project) {
      return _.contains(automation_ids, project['vendor_account'].toLowerCase().trim())
    })

    result = _.map(missing_projects, function(project) {
      return {
        accountID: project['vendor_account'].toLowerCase().trim(),
        accountName: project['vendor_account_name'],
        bill_source: project['bill_source'],
        policy_name: ds_applied_policy['name']
      }
    })

    // Remove filtered results
    result = _.reject(result, function(project) {
      return _.contains(param_projects_list, project['accountID']) || _.contains(param_projects_list, project['accountName'])
    })

    result = _.sortBy(result, 'accountID')
    result = _.sortBy(result, 'bill_source')
  }
EOS
end

datasource "ds_missing_projects_cco" do
  run_script $js_missing_projects_cco, $ds_flexera_cco_data, $ds_google_projects, $ds_applied_policy, $param_projects_list, $param_report_selection
end

script "js_missing_projects_cco", type: "javascript" do
  parameters "ds_flexera_cco_data", "ds_google_projects", "ds_applied_policy", "param_projects_list", "param_report_selection"
  result "result"
  code <<-'EOS'
  result = []

  if (param_report_selection != 'Missing in Google API') {
    cco_ids = _.map(ds_flexera_cco_data, function(project) {
      return project['vendor_account'].toLowerCase().trim()
    })

    missing_projects = _.reject(ds_google_projects, function(project) {
      return _.contains(cco_ids, project['id'].toLowerCase().trim())
    })

    result = _.map(missing_projects, function(project) {
      return {
        accountID: project['id'].toLowerCase().trim(),
        accountName: project['name'],
        policy_name: ds_applied_policy['name']
      }
    })

    // Remove filtered results
    result = _.reject(result, function(project) {
      return _.contains(param_projects_list, project['accountID']) || _.contains(param_projects_list, project['accountName'])
    })

    result = _.sortBy(result, 'accountID')
  }
EOS
end

###############################################################################
# Policy
###############################################################################

policy "pol_missing_projects" do
  validate_each $ds_missing_projects_api do
    summary_template "{{ with index data 0 }}{{ .policy_name }}{{ end }}: {{ len data }} Google API Missing Projects"
    check eq(val(item, "accountID"), "")
    escalate $esc_email
    export do
      resource_level false
      field "accountID" do
        label "Project ID"
      end
      field "accountName" do
        label "Project Name"
      end
      field "bill_source" do
        label "Bill Connection"
      end
    end
  end
  validate_each $ds_missing_projects_cco do
    summary_template "{{ with index data 0 }}{{ .policy_name }}{{ end }}: {{ len data }} Google CCO Missing Projects"
    check eq(val(item, "accountID"), "")
    escalate $esc_email
    export do
      resource_level false
      field "accountID" do
        label "Project ID"
      end
      field "accountName" do
        label "Project Name"
      end
    end
  end
end

###############################################################################
# Escalations
###############################################################################

escalation "esc_email" do
  automatic true
  label "Send Email"
  description "Send incident email"
  email $param_email
end

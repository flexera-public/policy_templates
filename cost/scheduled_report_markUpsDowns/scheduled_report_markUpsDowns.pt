name "Scheduled Report with Markups and Markdowns"
rs_pt_ver 20180301
type "policy"
short_description "This policy allows you to set up scheduled reports that will provide summaries of cloud cost across all resources in the billing centers with a markup or markdown % for the last month. See the [README](https://github.com/rightscale/policy_templates/tree/master/cost/scheduled_report_markupsDowns/) and [docs.rightscale.com/policies](http://docs.rightscale.com/policies/) to learn more."
long_description "Version: 0.0"
severity "low"
category "Cost"
tenancy "single"

parameter "param_email" do
  type "list"
  label "Email List"
  description "Email addresses of the recipients you wish to notify"
end

parameter "param_billing_centers" do
  type "list"
  label "Billing Center List"
  description "List of Billing Center names you want to report on.  Leave blank to select all top level Billing Centers."
end

parameter "param_cost_metric" do
  type "string"
  label "Cost Metric"
  allowed_values "Unamortized Unblended","Amortized Unblended","Unamortized Blended","Amortized Blended"
  default "Unamortized Unblended"
  description "Select the cost metric for your report.  See the README file for more details"
end

parameter "param_compute_markup" do
  type "number"
  default 0
  label "Compute markup or markdown percentage"
  description "Write the markup for the Compute category in number value (20 being 20% markup -20 being a 20% markdown. Leave 0 to apply the general markup)."
end

parameter "param_app_service_markup" do
  type "number"
  default 0
  label "Application Services markup or markdown percentage"
  description "Write the markup for the Application Services category in number value (20 being 20% markup -20 being a 20% markdown. Leave 0 to apply the general markup)."
end

parameter "param_database_markup" do
  type "number"
  default 0
  label "DataBase markup or markdown percentage"
  description "Write the markup for the DataBase category in number value (20 being 20% markup -20 being a 20% markdown.Leave 0 to apply the general markup)."
end

parameter "param_network_markup" do
  type "number"
  default 0
  label "Network markup or markdown percentage"
  description "Write the markup for the Network category in number value (20 being 20% markup -20 being a 20% markdown.Leave 0 to apply the general markup).-"
end

parameter "param_storage_markup" do
  type "number"
  default 0
  label "Storage markup or markdown percentage"
  description "Write the markup for the Storage category in number value (20 being 20% markup -20 being a 20% markdown.Leave 0 to apply the general markup)."
end

parameter "param_ri_markup" do
  type "number"
  default 0
  label "Reserved Instances markup or markdown percentage"
  description "Write the markup for the Reserved Instances category in number value (20 being 20% markup -20 being a 20% markdown.Leave 0 to apply the general markup)."
end

parameter "param_markud_percentage" do
  type "number"
  default 0
  label "General markup or markdown percentage"
  description "Write the general markup for the rest of the categories in number value (20 being 20% markup -20 being a 20% markdown) OR SCROLL DOWN FOR THE REST OF THE CATEGORIES"
end

parameter "param_admin_markup" do
  type "number"
  default 0
  label "Admin markup or markdown percentage"
  description "Write the markup for the Admin category in number value (20 being 20% markup -20 being a 20% markdown.Leave 0 to apply the general markup)."
end

parameter "param_ai_markup" do
  type "number"
  default 0
  label "Artificial Intelligence markup or markdown percentage)"
  description "Write the markup for the ai category in number value (20 being 20% markup -20 being a 20% markdown.Leave 0 to apply the general markup)."
end

parameter "param_application_markup" do
  type "number"
  default 0
  label "Application markup or markdown percentage"
  description "Write the markup for the application category in number value (20 being 20% markup -20 being a 20% markdown.Leave 0 to apply the general markup)."
end

parameter "param_machine_learning_markup" do
  type "number"
  default 0
  label "Machine learning markup or markdown percentage"
  description "Write the markup for the Machine Learning category in number value (20 being 20% markup -20 being a 20% markdown.Leave 0 to apply the general markup)."
end

parameter "param_marketplace_markup" do
  type "number"
  default 0
  label "Marketplace markup or markdown percentage"
  description "Write the markup for the Marketplace category in number value (20 being 20% markup -20 being a 20% markdown.Leave 0 to apply the general markup)."
end

parameter "param_streaming_markup" do
  type "number"
  default 0
  label "Streaming markup or markdown percentage"
  description "Write the markup for the streaming category in number value (20 being 20% markup -20 being a 20% markdown.Leave 0 to apply the general markup)."
end

parameter "param_support_markup" do
  type "number"
  default 0
  label "Support markup or markdown percentage"
  description "Write the markup for the support category in number value (20 being 20% markup -20 being a 20% markdown.Leave 0 to apply the general markup)."
end

parameter "param_IOT_markup" do
  type "number"
  default 0
  label "IOT markup or markdown percentage"
  description "Write the markup for the IOT category in number value (20 being 20% markup -20 being a 20% markdown.Leave 0 to apply the general markup)."
end


parameter "param_other_markup" do
  type "number"
  default 0
  label "Other markup or markdown percentage"
  description "Write the markup for the other category in number value (20 being 20% markup -20 being a 20% markdown.Leave 0 to apply the general markup)."
end

auth "auth_rs", type: "rightscale"

datasource "ds_currency_reference" do
  request do
    host "raw.githubusercontent.com"
    path "/rightscale/policy_templates/master/cost/scheduled_reports/currency_reference.json"
    header "User-Agent", "RS Policies"
  end
end

datasource "ds_currency_code" do
  request do
    auth $auth_rs
    host rs_optima_host
    path join(["/bill-analysis/orgs/",rs_org_id,"/settings/currency_code"])
    header "Api-Version", "0.1"
    header "User-Agent", "RS Policies"
  end
  result do
    encoding "json"
    field "id", jmes_path(response,"id")
    field "value", jmes_path(response,"value")
  end
end

datasource "ds_billing_centers" do
  request do
    auth $auth_rs
    host rs_optima_host
    path join(["/analytics/orgs/",rs_org_id,"/billing_centers"])
    header "Api-Version", "1.0"
    header "User-Agent", "RS Policies"
    query "view", "allocation_table"
  end
  result do
    encoding "json"
    collect jmes_path(response,"[*]") do
      field "href", jmes_path(col_item,"href")
      field "id", jmes_path(col_item,"id")
      field "name", jmes_path(col_item,"name")
      field "parent_id", jmes_path(col_item,"parent_id")
      field "ancestor_ids", jmes_path(col_item,"ancestor_ids")
      field "allocation_table", jmes_path(col_item,"allocation_table")
    end
  end
end

datasource "ds_previous_month_costs" do
  request do
    run_script $js_previous_month_cost_request, $param_billing_centers, $param_cost_metric, $param_markud_percentage, rs_org_id, rs_optima_host, $ds_billing_centers 
  end
  result do
    encoding "json"
    collect jmes_path(response,"rows[*]") do
      field "billingCenterID", jmes_path(col_item,"dimensions.billing_center_id")
      field "vendor", jmes_path(col_item,"dimensions.vendor")
      field "category", jmes_path(col_item,"dimensions.category")
      field "service", jmes_path(col_item,"dimensions.service")
      field "unamortizedUnblended", jmes_path(col_item,"metrics.cost_nonamortized_unblended_adj")
      field "amortizedUnblended", jmes_path(col_item,"metrics.cost_amortized_unblended_adj")
      field "unamortizedBlended", jmes_path(col_item,"metrics.cost_nonamortized_blended_adj")
      field "amortizedBlended", jmes_path(col_item,"metrics.cost_amortized_blended_adj")
    end
  end  
end

script "js_previous_month_cost_request", type: "javascript" do
  parameters "param_billing_centers", "param_cost_metric", "param_markUD_Percentage" , "rs_org_id", "rs_optima_host", "ds_billing_centers"
  result "request"
  code <<-EOS
    var range = "monthly";
    var scale = "previous";
        
    function getFormattedDailyDate(date) {
      var year = date.getFullYear();

      var month = (1 + date.getMonth()).toString();
      month = month.length > 1 ? month : '0' + month;

      var day = date.getDate().toString();
      day = day.length > 1 ? day : '0' + day;
      return year + '-' + month;
    }

    // adds day(s) to the current day
    function addDays(date, days) {
      var result = new Date(date);
      result.setDate(result.getDate() + days);
      return result;
    }
    var start_at = "";
    var end_at = "";
    var now = new Date();
    // start_at from beginning of last month
    start_at = getFormattedDailyDate(new Date(now.getFullYear(), now.getMonth() - 1, 1))
    // end_at to end of last month
    end_at = getFormattedDailyDate(addDays(new Date(now.setDate(0)),1))

    var billing_center_ids = []
    if (param_billing_centers.length === 0){
      var top_billing_centers = _.reject(ds_billing_centers, function(bc){ return bc.parent_id != null });
      billing_center_ids = _.map(top_billing_centers, function(value, key){ return value.id });
    } else {
      // get array of billing center id's that match the names in param_billing_centers.
      billing_center_names = _.map(param_billing_centers, function(name){ return name.toLowerCase(); });
      billing_center_ids = _.compact(_.map(ds_billing_centers, function(value){ if(_.contains(billing_center_names, value.name.toLowerCase())){return value.id} }));
    }

    var body = {
      "dimensions":["billing_center_id","vendor","category","service"],
      "granularity":"month",
      "start_at": start_at ,
      "end_at": end_at,
      "metrics":["cost_amortized_blended_adj","cost_nonamortized_blended_adj","cost_amortized_unblended_adj","cost_nonamortized_unblended_adj"],
      "billing_center_ids": billing_center_ids
    }
    
    var request = {
      auth:  'auth_rs',
      host:  rs_optima_host,
      scheme: 'https',
      verb: 'POST',
      path:  "/bill-analysis/orgs/"+ rs_org_id + "/costs/aggregated",
      headers: {
        "API-Version": "1.0",
        "Content-Type":"application/json"
      },
      body: JSON.stringify(body)
    }
  EOS
end

datasource "ds_marked_up_results" do
  run_script $js_do_markups, $ds_previous_month_costs, $param_cost_metric, $param_markud_percentage, $ds_currency_code, $ds_billing_centers, $param_compute_markup, $param_app_service_markup, $param_database_markup, $param_network_markup, $param_storage_markup, $param_ri_markup, $param_admin_markup, $param_ai_markup, $param_application_markup, $param_machine_learning_markup, $param_marketplace_markup, $param_streaming_markup, $param_support_markup, $param_other_markup, $param_IOT_markup 

end
script "js_do_markups", type: "javascript" do
  parameters "ds_previous_month_costs", "ds_param_cost_metric", "ds_param_markUD_Percentage", "ds_currency_code", "ds_billing_centers", "ds_param_compute_markup", "ds_param_app_service_markup", "ds_param_dataBase_markup", "ds_param_network_markup", "ds_param_storage_markup", "ds_param_ri_markup", "ds_param_admin_markup", "ds_param_ai_markup", "ds_param_application_markup", "ds_param_machine_learning_markup", "ds_param_marketplace_markup", "ds_param_streaming_markup", "ds_param_support_markup", "ds_param_other_markup", "ds_param_IOT_markup"
  result "result"
  code <<-EOS
    var result = [];
    // Iterate through all Services

    _.each(ds_previous_month_costs, function(ar){
      
      console.log('service: '+ar.service)
      console.log('service: '+ar.category)

      var MarkedUpValue = 0;
      var OriginalValue = 0;
      
      //swtch based on cost metric "Unamortized Unblended","Amortized Unblended","Unamortized Blended","Amortized Blended"
      switch (ds_param_cost_metric) {
        case "Unamortized Unblended":
          OriginalValue = Number(ar.unamortizedUnblended).toFixed(2);
        break;
        case "Amortized Unblended":
          OriginalValue = Number(ar.amortizedUnblended).toFixed(2);
        break;
        case "Unamortized Blended":
          OriginalValue = Number(ar.unamortizedBlended).toFixed(2);
        break;
        case "Amortized Blended":
          OriginalValue = Number(ar.amortizedBlended).toFixed(2)
        break;   
      }
      
      //switch to select markup based on category

      var markupToUse=ds_param_markUD_Percentage
      switch (ar.category) {
        case "Admin":
          markupToUse = Number(ds_param_admin_markup).toFixed(2);
        break;
        case "Compute":
          markupToUse = Number(ds_param_compute_markup).toFixed(2);
        break;
        case "Database":
          markupToUse = Number(ds_param_dataBase_markup).toFixed(2);
        break;
        case "Network":
          markupToUse = Number(ds_param_network_markup).toFixed(2)
        break;   
        case "Other":
          markupToUse = Number(ds_param_other_markup).toFixed(2)
        break;   
        case "Storage":
          markupToUse = Number(ds_param_storage_markup).toFixed(2)
        break;   
        case "Streaming":
          markupToUse = Number(ds_param_streaming_markup).toFixed(2)
        break;   
        case "AI":
          markupToUse = Number(ds_param_ai_markup).toFixed(2)
        break;   
        case "App-Service":
          markupToUse = Number(ds_param_app_service_markup).toFixed(2)
        break;   
        case "IOT":
          markupToUse = Number(ds_param_IOT_markup).toFixed(2)
        break;   
        case "Marketplace":
          markupToUse = Number(ds_param_marketplace_markup).toFixed(2)
        break;   
        case "RI/CUD":
          markupToUse = Number(ds_param_ri_markup).toFixed(2)
        break;   
        case "Network":
          markupToUse = Number(ds_param_network_markup).toFixed(2)
        break;   
        case "MachineLearning":
          markupToUse = Number(ds_param_machine_learning_markup).toFixed(2)
        break;   
        case "Applications":
          markupToUse = Number(ds_param_application_markup).toFixed(2)
        break;   
      }

      //If markup is still 0 apply default markup
      if (markupToUse == 0){
        markupToUse = Number(ds_param_markUD_Percentage).toFixed(2)
      }
      MarkedUpValue = (OriginalValue*((100+Number(markupToUse))/100)).toFixed(2);
      
      //Get Currency Code
      if( ds_currency_code['value'] !== undefined ) {
        var cur = ds_currency_code['value']
      } else {
        var cur = "USD"
      }
      //get the name of the billing center
      var billingCenterName = '';
      _.each(ds_billing_centers, function(value){
        if(ar["billingCenterID"] == value.id){
          billingCenterName = value.name;
          return;
        }
      })
      
      
      result.push({
        billingCenter: billingCenterName,
        vendor: ar["vendor"],
        category: ar["category"],
        percentage: markupToUse
        service: ar["service"],
        originalValue: OriginalValue,
        markedUpValue: MarkedUpValue,
        currencyCode: cur
      })

    })
  EOS
end


escalation "escalation_send_email" do
  email $param_email
end

### Bill Currency: {{ data[0].currencyCode }}
### markup/down Value %: {{ parameters.param_markud_percentage }}

policy "policy_Scheduled_Report_with_markups" do
  validate_each $ds_marked_up_results do
    summary_template "{{ rs_org_name }} (Org ID: {{ rs_org_id }}): Cost Report with markups"
    detail_template <<-EOS

## Billing Centers: {{ parameters.param_billing_centers }}
### Cost Metric: {{ parameters.param_cost_metric }}




|Billing Center     |Vendor     |Category      |Percentage applied |Service      |Original cost   |Marked up or down Cost|
|:-----------------:|----------:|-------------:|------------------:|------------:|---------------:|---------------------:|
{{ range data -}}
  | {{ .billingCenter }} | {{ .vendor }} | {{ .category}} | {{ .percentage }} | {{ .service }} |{{ .originalValue }} |{{ .markedUpValue }} |
{{ end -}}

___
###### Policy Applied in Account: {{ rs_project_name }} (Account ID: {{ rs_project_id }}) within Org: {{ rs_org_name }} (Org ID: {{ rs_org_id }})
EOS
    escalate $escalation_send_email
    check eq(0,1)
  end
end
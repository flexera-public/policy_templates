name "Scheduled Report for Unallocated Costs"
rs_pt_ver 20180301
type "policy"
short_description "This policy allows you to set up scheduled reports that will provide summaries of cloud cost that are unallocated for the dimensions you specify, delivered to any email addresses you specify."
long_description ""
severity "low"
category "Cost"
default_frequency "monthly"
tenancy "single"
info(
  version: "0.1.0",
  provider: "Flexera Optima",
  service: "",
  policy_set: ""
  )

parameter "param_email" do
  type "list"
  label "Email List"
  description "Email addresses of the recipients you wish to notify"
  default []
end

parameter "param_cost_dimensions" do
  type "list"
  label "Dimensions List"
  description "List of Dimensions you want to report on (i.e. billing_center_id). Must provide at least one dimension"
  default ["billing_center_id"]
end

parameter "param_cost_filters" do
  type "string"
  label "Cost Filters"
  description "JSON object of filters to apply to the report.  Example: `{\"dimension\": \"vendor\",\"type\": \"equal\",\"value\": \"aws\"}`"
  default ""
end

parameter "param_cost_metric" do
  type "string"
  label "Cost Metric"
  allowed_values "Unamortized Unblended","Amortized Unblended","Unamortized Blended","Amortized Blended"
  default "Unamortized Unblended"
  description "Select the cost metric for your report.  See the README file for more details"
end

# parameter "param_graph_dimension" do
#   type "string"
#   label "Graph Dimension"
#   allowed_values "Category","Billing Centers","Instance Type","Region","Resource Group","Resource Type","Service","Usage Type","Usage Unit","Cloud Vendor","Cloud Vendor Account","Cloud Vendor Account Name"
#   default "Category"
#   description "Select which dimension you'd like to be broken out on the graph in the report."
# end

parameter "param_cost_time_period" do
  type "string"
  label "Date Range"
  allowed_values "Last 7 Days", "Last 30 Days", "Last 45 Days", "Last 90 Days", "Previous Month", "Previous 3 Months"
  default "Last 30 Days"
end

credentials "auth_flexera" do
  schemes "oauth2"
  label "flexera"
  description "Select Flexera One OAuth2 credentials"
  tags "provider=flexera"
end

datasource "ds_currency_reference" do
  request do
    host "raw.githubusercontent.com"
    path "/rightscale/policy_templates/master/cost/scheduled_reports/currency_reference.json"
    header "User-Agent", "RS Policies"
  end
end

datasource "ds_currency_code" do
  request do
    auth $auth_flexera
    host rs_optima_host
    path join(["/bill-analysis/orgs/",rs_org_id,"/settings/currency_code"])
    header "Api-Version", "0.1"
    header "User-Agent", "RS Policies"
  end
  result do
    encoding "json"
    field "id", jmes_path(response,"id")
    field "value", jmes_path(response,"value")
  end
end

datasource "ds_currency" do
  run_script $js_currency, $ds_currency_reference, $ds_currency_code
end

script "js_currency", type:"javascript" do
  parameters "ds_currency_reference", "ds_currency_code"
  result "result"
  code <<-EOS
  symbol = "$"
  separator = ","

  if (ds_currency_code['value'] != undefined) {
    if (ds_currency_reference[ds_currency_code['value']] != undefined) {
      symbol = ds_currency_reference[ds_currency_code['value']]['symbol']

      if (ds_currency_reference[ds_currency_code['value']]['t_separator'] != undefined) {
        separator = ds_currency_reference[ds_currency_code['value']]['t_separator']
      } else {
        separator = ""
      }
    }
  }

  result = {
    symbol: symbol,
    separator: separator
  }
EOS
end

datasource "ds_toplevel_billing_centers" do
  request do
    auth $auth_flexera
    host rs_optima_host
    path join(["/analytics/orgs/",rs_org_id,"/billing_centers"])
    header "Api-Version", "1.0"
    header "User-Agent", "RS Policies"
    query "view", "allocation_table"
  end
  result do
    encoding "json"
    # Select the Billing Centers that have "parent_id" undefined or "" (i.e. top-level Billing Centers)
    collect jq(response, '.[] | select(.parent_id == null)' ) do
      field "href", jq(col_item,".href")
      field "id", jq(col_item,".id")
      field "name", jq(col_item,".name")
      field "parent_id", jq(col_item,".parent_id")
      field "ancestor_ids", jq(col_item,".ancestor_ids")
      field "allocation_table", jq(col_item,".allocation_table")
    end
  end
end

datasource "ds_costs_aggregated" do
  iterate $ds_toplevel_billing_centers
  request do
    run_script $js_costs_aggregated, rs_optima_host, rs_org_id, $param_cost_dimensions, $param_cost_filters, $param_cost_metric, $param_cost_time_period, val(iter_item, "id")
  end
  result do
    encoding "json"
    collect jmes_path(response, "rows[*]") do
      field "bc_id", val(iter_item, "id")
      field "bc_name", val(iter_item, "name")
      field "dimensions", jmes_path(col_item, "dimensions")
      field "metrics", jmes_path(col_item, "metrics")
    end
  end
end

script "js_costs_aggregated", type: "javascript" do
  parameters "rs_optima_host", "rs_org_id", "param_cost_dimensions", "param_cost_filters", "param_cost_metric", "param_cost_time_period", "bc_id"
  result "request"
  code <<-EOS
  var cost_metric = {
    "Unamortized Unblended": "cost_nonamortized_unblended_adj",
    "Amortized Unblended": "cost_amortized_unblended_adj",
    "Unamortized Blended": "cost_nonamortized_blended_adj",
    "Amortized Blended": "cost_amortized_blended_adj"
  }

  var now = new Date()
  var start_at
  var end_at
  switch(param_cost_time_period) {
    case "Last 7 Days":
      start_at = new Date(now.getFullYear(), now.getMonth(), now.getDate() - 7);
      end_at = now;
      break;
    case "Last 30 Days":
      start_at = new Date(now.getFullYear(), now.getMonth(), now.getDate() - 30);
      end_at = now;
      break;
    case "Last 45 Days":
      start_at = new Date(now.getFullYear(), now.getMonth(), now.getDate() - 45);
      end_at = now;
      break;
    case "Last 90 Days":
      start_at = new Date(now.getFullYear(), now.getMonth(), now.getDate() - 90);
      end_at = now;
      break;
    case "Previous Month":
      start_at = new Date(now.getFullYear(), now.getMonth() - 1, 1);
      end_at = new Date(now.getFullYear(), now.getMonth(), 0);
      break;
    case "Previous 3 Months":
      start_at = new Date(now.getFullYear(), now.getMonth() - 3, 1);
      end_at = new Date(now.getFullYear(), now.getMonth(), 0);
      break;
  }

  // Formet start_at and end_at into strings with format YYYY-MM
  start_at_string = start_at.getFullYear() + "-" + ("0" + (start_at.getMonth() + 1)).slice(-2)
  end_at_string = end_at.getFullYear() + "-" + ("0" + (end_at.getMonth() + 1)).slice(-2)

  filters = null
  if (param_cost_filters.length > 0) {
    filters = JSON.parse(param_cost_filters)
  }

  var request = {
    auth: "auth_flexera",
    host: rs_optima_host,
    verb: "POST",
    path: "/bill-analysis/orgs/" + rs_org_id + "/costs/aggregated",
    body_fields: {
      "filter": filters,
      "dimensions": param_cost_dimensions,
      "granularity": "month",
      "start_at": start_at_string,
      "end_at": end_at_string,
      "metrics": [cost_metric[param_cost_metric]],
      "billing_center_ids": [bc_id]
    },
    headers: {
      "User-Agent": "RS Policies",
      "Api-Version": "1.0"
    }
  }
EOS
end

datasource "ds_costs_flattened" do
  run_script $js_costs_flattened, $ds_currency, $ds_costs_aggregated, $param_cost_metric
end

script "js_costs_flattened", type: "javascript" do
  parameters "ds_currency", "ds_costs_aggregated", "param_cost_metric"
  result "result"
  code <<-EOS
  var cost_metric = {
    "Unamortized Unblended": "cost_nonamortized_unblended_adj",
    "Amortized Unblended": "cost_amortized_unblended_adj",
    "Unamortized Blended": "cost_nonamortized_blended_adj",
    "Amortized Blended": "cost_amortized_blended_adj"
  }
  var total_spend = 0
  var unallocated_spend = 0
  rows = ds_costs_aggregated.map(function(row) {
    var flattened = {}
    // flattened["unallocated"] = false
    _.each(row.metrics, function(value, key) {
      if (key == cost_metric[param_cost_metric]) {
        total_spend = total_spend + value
      }
      // Round the metric values to 2 decimal places for report
      if (typeof value == "number") {
        flattened[key] = Math.round(value * 100) / 100
      } else {
        flattened[key] = value
      }
    })
    _.each(row.dimensions, function(value, key) {
      flattened[key] = value
      // If billing_center_id dimension, add billing_center_name dimension to results
      if (key == "billing_center_id") {
        flattened["billing_center_name"] = row.bc_name
      }
      // For billing_center_id dimension, unallocated costs are in "unallocated" billing_center_id
      // For all other dimensions (tag, rbd), unallocated costs are in "None" or "" value for that dimension
      if ((key != "billing_center_id" && (value == "None" || value == "")) || (key == "billing_center_id" && value == "undefined")) {
        // flattened["unallocated"] = true
        unallocated_spend = unallocated_spend + flattened[cost_metric[param_cost_metric]]
      }
    })
    return flattened
  })
  // calculate the percent_of_total now that we have the total_spend
  rows_with_total = []
  _.each(rows, function(row) {
    row[cost_metric[param_cost_metric]+"_percent_of_total"] = ((row[cost_metric[param_cost_metric]] / total_spend) * 100).toFixed(2)
    rows_with_total.push(row)
  })
  // Get the column order from the first row
  // Put any cost_* columns at the end
  columns = []
  columns_unsorted = Object.keys(rows[0]) // Reverse the order so that when we push/append them they are in their original order
  _.each(columns_unsorted, function(key) {
    if (!key.match(/^cost_.*/)) {
      columns.push(key)
    }
  })
  _.each(columns_unsorted, function(key) {
    if (key.match(/^cost_.*/)) {
      columns.push(key)
    }
  })
  result = {
    "columns": columns,
    "currency_code": ds_currency.symbol,
    "total_spend": total_spend.toFixed(2),
    "unallocated_spend": unallocated_spend.toFixed(2),
    "percent_allocated": ((1 - (unallocated_spend / total_spend)) *100).toFixed(2),
    "percent_unallocated": ((unallocated_spend / total_spend) *100).toFixed(2),
    "rows": rows_with_total
  }
  EOS
end

escalation "escalation_send_email" do
  automatic true
  label "Send Email"
  description "Send incident email"
  email $param_email
end

policy "policy_scheduled_report" do
  validate $ds_costs_flattened do
    summary_template "{{ rs_org_name }} (Org ID: {{ rs_org_id }}): Full Cost Scheduled Report"
    detail_template <<-EOS
###### Policy Applied in Account: {{ rs_project_name }} (Account ID: {{ rs_project_id }}) within Org: {{ rs_org_name }} (Org ID: {{ rs_org_id }})

## Summary

| Total Spend | Unallocated Spend | Percent Unallocated | Percent Allocated |
| ----------- | ----------------- | ------------------- | ----------------- |
| {{ data.currency_code }}{{ data.total_spend }} | {{ data.currency_code }}{{ data.unallocated_spend }} | {{ data.percent_unallocated}}% | {{ data.percent_allocated }}% |

## Details

{{- range $i,$r := data.rows }}
{{ if eq $i 0 -}}
|{{ range $c := data.columns }} {{ $c }} |{{ end }}
|{{ range $c := data.columns }} --- |{{ end }}
{{- else -}}
| {{ range $col := data.columns -}}
{{- $value := (index $r $col) -}}
{{- if eq (printf "%T" $value) "string" -}}
{{- if or (eq $value "None") (eq $value "unallocated") (eq $value "Unallocated") (eq $value "") -}}**{{ end -}}
  {{- $value -}}
{{- if or (eq $value "None") (eq $value "unallocated") (eq $value "Unallocated") (eq $value "") -}}**{{ end -}}
{{- else -}}
  {{- $value -}}
{{- end }} | {{ end -}}
{{- end -}}
{{ end }}
    EOS
    escalate $escalation_send_email
    check eq(1,0) # Always trigger
  end
end

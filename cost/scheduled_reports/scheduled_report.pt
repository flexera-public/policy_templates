name "Scheduled Report"
rs_pt_ver 20180301
type "policy"
short_description "This policy allows you to configure scheduled reports that will provide summaries of cloud cost. See the [README](https://github.com/flexera-public/policy_templates/tree/master/cost/scheduled_reports/) and [docs.flexera.com/flexera/EN/Automation](https://docs.flexera.com/flexera/EN/Automation/AutomationGS.htm) to learn more."
long_description ""
severity "low"
category "Cost"
default_frequency "monthly"
info(
  version: "3.0",
  provider: "Flexera Optima",
  service: "",
  policy_set: ""
)

##############################################################################
# Parameters
##############################################################################

parameter "param_email" do
  type "list"
  category "Policy Settings"
  label "Email Addresses"
  description "A list of email addresses to notify."
  default []
end

parameter "param_cost_metric" do
  type "string"
  category "Policy Settings"
  label "Cost Metric"
  description "Select the cost metric for your report. See the README file for more details"
  allowed_values "Unamortized Unblended", "Amortized Unblended", "Unamortized Blended", "Amortized Blended"
  default "Unamortized Unblended"
end

parameter "param_graph_dimension" do
  type "string"
  category "Policy Settings"
  label "Graph Dimension"
  description "Select which dimension you'd like to be broken out on the graph in the report."
  allowed_values "Category", "Billing Centers", "Instance Type", "Region", "Resource Group", "Resource Type", "Service", "Usage Type", "Usage Unit", "Cloud Vendor", "Cloud Vendor Account", "Cloud Vendor Account Name"
  default "Category"
end

parameter "param_date_range" do
  type "string"
  category "Date/Time Settings"
  label "Date Range"
  description "Select the Date Range options you'd like to be display on the graph in the report."
  allowed_values "1 month", "3 month", "6 month", "12 month"
  default "6 month"
end

parameter "param_billing_term" do
  type "string"
  category "Date/Time Settings"
  label "Billing Term"
  description "Select the Billing Term options you'd like to be display on the graph in the report."
  allowed_values "Day", "Week", "Month"
  default "Month"
end

parameter "param_billing_centers" do
  type "list"
  category "Filters"
  label "Billing Center List"
  description "List of Billing Center names or IDs you want to report on. Leave blank to select all top level Billing Centers."
  default []
end

###############################################################################
# Authentication
###############################################################################

credentials "auth_flexera" do
  schemes "oauth2"
  label "flexera"
  description "Select Flexera One OAuth2 credentials"
  tags "provider=flexera"
end

###############################################################################
# Datasources & Scripts
###############################################################################

# Gather applied policy metadata for use later
datasource "ds_applied_policy" do
  request do
    auth $auth_flexera
    host rs_governance_host
    path join(["/api/governance/projects/", rs_project_id, "/applied_policies/", policy_id])
    header "Api-Version", "1.0"
  end
end

datasource "ds_billing_centers" do
  request do
    auth $auth_flexera
    host rs_optima_host
    path join(["/analytics/orgs/", rs_org_id, "/billing_centers"])
    header "Api-Version", "1.0"
    header "User-Agent", "RS Policies"
    query "view", "allocation_table"
    ignore_status [403]
  end
  result do
    encoding "json"
    collect jmes_path(response, "[*]") do
      field "href", jmes_path(col_item, "href")
      field "id", jmes_path(col_item, "id")
      field "name", jmes_path(col_item, "name")
      field "parent_id", jmes_path(col_item, "parent_id")
      field "ancestor_ids", jmes_path(col_item, "ancestor_ids")
      field "allocation_table", jmes_path(col_item, "allocation_table")
    end
  end
end

# Filter billing centers based on parameter
datasource "ds_filtered_bcs" do
  run_script $js_filtered_bcs, $ds_billing_centers, $param_billing_centers
end

script "js_filtered_bcs", type: "javascript" do
  parameters "ds_billing_centers", "param_billing_centers"
  result "result"
  code <<-EOS
  if (param_billing_centers.length > 0) {
    result = _.filter(ds_billing_centers, function(bc) {
      return _.contains(param_billing_centers, bc['name']) || _.contains(param_billing_centers, bc['name'].toLowerCase()) || _.contains(param_billing_centers, bc['id'])
    })
  } else {
    result = _.filter(ds_billing_centers, function(bc) {
      return bc['parent_id'] == null || bc['parent_id'] == undefined
    })
  }
EOS
end

datasource "ds_currency_reference" do
  request do
    host "raw.githubusercontent.com"
    path "/rightscale/policy_templates/master/cost/scheduled_reports/currency_reference.json"
    header "User-Agent", "RS Policies"
  end
end

datasource "ds_currency_code" do
  request do
    auth $auth_flexera
    host rs_optima_host
    path join(["/bill-analysis/orgs/", rs_org_id, "/settings/currency_code"])
    header "Api-Version", "0.1"
    header "User-Agent", "RS Policies"
    ignore_status [403]
  end
  result do
    encoding "json"
    field "id", jmes_path(response, "id")
    field "value", jmes_path(response, "value")
  end
end

datasource "ds_currency" do
  run_script $js_currency, $ds_currency_reference, $ds_currency_code
end

script "js_currency", type:"javascript" do
  parameters "ds_currency_reference", "ds_currency_code"
  result "result"
  code <<-EOS
  symbol = "$"
  separator = ","

  if (ds_currency_code['value'] != undefined) {
    if (ds_currency_reference[ds_currency_code['value']] != undefined) {
      symbol = ds_currency_reference[ds_currency_code['value']]['symbol']

      if (ds_currency_reference[ds_currency_code['value']]['t_separator'] != undefined) {
        separator = ds_currency_reference[ds_currency_code['value']]['t_separator']
      } else {
        separator = ""
      }
    }
  }

  result = {
    symbol: symbol,
    separator: separator
  }
EOS
end

datasource "ds_current_week_costs" do
  request do
    run_script $js_get_costs, $ds_filtered_bcs, $param_cost_metric, rs_org_id, rs_optima_host, "current_week"
  end
end

datasource "ds_previous_week_costs" do
  request do
    run_script $js_get_costs, $ds_filtered_bcs, $param_cost_metric, rs_org_id, rs_optima_host, "previous_week"
  end
end

datasource "ds_current_month_costs" do
  request do
    run_script $js_get_costs, $ds_filtered_bcs, $param_cost_metric, rs_org_id, rs_optima_host, "current_month"
  end
end

datasource "ds_previous_month_costs" do
  request do
    run_script $js_get_costs, $ds_filtered_bcs, $param_cost_metric, rs_org_id, rs_optima_host, "previous_month"
  end
end

script "js_get_costs", type: "javascript" do
  parameters "ds_filtered_bcs", "param_cost_metric", "rs_org_id", "rs_optima_host", "time_period"
  result "request"
  code <<-EOS
  // Function to take date object or YYYY-MM formatted string and move it backwards or forwards by month
  function move_month(date_string, amount) {
    clean_date = new Date(date_string).toISOString()
    year = Number(clean_date.split('-')[0])
    month = Number(clean_date.split('-')[1])

    if (amount > 0) {
      for (var i = 1; i <= amount; i++) {
        if (month == 12) {
          year += 1; month = 1
        } else {
          month += 1
        }
      }
    } else {
      for (var i = -1; i >= amount; i--) {
        if (month == 1) {
          year -= 1; month = 12
        } else {
          month -= 1
        }
      }
    }

    if (month < 10) { month = '0' + month }

    return [year, month].join('-')
  }

  billing_center_ids = _.pluck(ds_filtered_bcs, 'id')

  // create a map to use in the request metric field.
  cost_metric_table = {
    "Unamortized Unblended": "cost_nonamortized_unblended_adj",
    "Amortized Unblended": "cost_amortized_unblended_adj",
    "Unamortized Blended": "cost_nonamortized_blended_adj",
    "Amortized Blended": "cost_amortized_blended_adj"
  }

  if (time_period == 'current_week' || time_period == 'previous_week') {
    start_at = new Date()
    if (time_period == 'previous_week') { start_at.setDate(start_at.getDate() - 7) }
    if (start_at.getDay() || 7 != 1) { start_at.setHours(-24 * ((start_at.getDay() || 7) - 1)) }
    start_at = start_at.toISOString().split('T')[0]

    today = new Date()
    if (time_period == 'previous_week') { today.setDate(today.getDate() - 7) }
    end_at = new Date(today.setDate((today.getDate() + (6 + (8 - today.getDay())) % 7)))
    end_at.setDate(end_at.getDate() + 1)
    end_at = end_at.toISOString().split('T')[0]
  }

  if (time_period == 'current_month' || time_period == 'previous_month') {
    start_at = new Date().toISOString()
    start_at = start_at.split('-')[0] + '-' + start_at.split('-')[1]
    if (time_period == 'previous_month') { start_at = move_month(start_at, -1) }
    end_at = move_month(start_at, 1)

    start_at += "-01"
    end_at += "-01"
  }

  body = {
    dimensions: [],
    granularity: "day",
    start_at: start_at,
    end_at: end_at,
    metrics: [ cost_metric_table[param_cost_metric] ],
    billing_center_ids: billing_center_ids
  }

  var request = {
    auth: "auth_flexera",
    host: rs_optima_host,
    verb: "POST",
    path: "/bill-analysis/orgs/" + rs_org_id + "/costs/aggregated",
    headers: {
      "API-Version": "1.0",
      "Content-Type": "application/json"
    },
    body: JSON.stringify(body)
  }
EOS
end

datasource "ds_current_report" do
  run_script $js_current_report, $ds_current_week_costs, $ds_previous_week_costs, $ds_current_month_costs, $ds_previous_month_costs, $ds_currency, $param_cost_metric
end

script "js_current_report", type: "javascript" do
  parameters "ds_current_week_costs", "ds_previous_week_costs", "ds_current_month_costs", "ds_previous_month_costs", "ds_currency", "param_cost_metric"
  result "report"
  code <<-EOS
  // Function to return the total_costs of a cost list
  function total_costs(cost_list) {
    total = 0.0
    _.each(cost_list['rows'], function(row) { total += row['metrics'][metric] })
    return total
  }

  // Function to format cost numbers
  function format_cost(number, separator) {
    numString = number.toString()
    formatted_number = ''

    while (numString.length > 3) {
      chunk = numString.substr(-3)
      numString = numString.substr(0, numString.length - 3)
      formatted_number = separator + chunk + formatted_number
    }

    if (numString.length > 0) { formatted_number = numString + formatted_number }

    return formatted_number
  }

  // create a map to use in the request metric field.
  cost_metric_table = {
    "Unamortized Unblended": "cost_nonamortized_unblended_adj",
    "Amortized Unblended": "cost_amortized_unblended_adj",
    "Unamortized Blended": "cost_nonamortized_blended_adj",
    "Amortized Blended": "cost_amortized_blended_adj"
  }

  metric = cost_metric_table[param_cost_metric]

  current_week_total = total_costs(ds_current_week_costs)
  previous_week_total = total_costs(ds_previous_week_costs)
  current_month_total = total_costs(ds_current_month_costs)
  previous_month_total = total_costs(ds_previous_month_costs)

  weekly_avg = 0.0
  if (ds_current_week_costs['rows'].length > 0) {
    weekly_avg = (current_week_total + previous_week_total) / (7 + ds_current_week_costs['rows'].length)
  }

  monthly_avg = 0.0
  if (ds_current_month_costs['rows'].length > 0) {
    days_this_month = ds_current_month_costs['rows'].length
    days_last_month = ds_previous_month_costs['rows'].length
    monthly_avg = (current_month_total + previous_month_total) / (days_last_month + days_this_month)
  }

  weekly_change = 0.0
  if (current_week_total > 0) {
    weekly_change = Number((current_week_total - previous_week_total) / previous_week_total * 100).toFixed(1)
  }

  monthly_change = 0.0
  if (current_month_total > 0) {
    monthly_change = Number(( current_month_total - previous_month_total) / previous_month_total * 100).toFixed(1)
  }

  cw_total = ds_currency['symbol'] + ' ' + format_cost(Math.round(current_week_total), ds_currency['separator'])
  pw_total = ds_currency['symbol'] + ' ' + format_cost(Math.round(previous_week_total), ds_currency['separator'])
  week_avg = ds_currency['symbol'] + ' ' + format_cost(Math.round(weekly_avg), ds_currency['separator'])
  cm_total = ds_currency['symbol'] + ' ' + format_cost(Math.round(current_month_total), ds_currency['separator'])
  pm_total = ds_currency['symbol'] + ' ' + format_cost(Math.round(previous_month_total), ds_currency['separator'])
  month_avg = ds_currency['symbol'] + ' ' + format_cost(Math.round(monthly_avg), ds_currency['separator'])

  var report = [
    { range: 'Weekly', current: cw_total, previous: pw_total, avg: week_avg, change: weekly_change },
    { range: 'Monthly', current: cm_total, previous: pm_total, avg: month_avg, change: monthly_change }
  ]
EOS
end

datasource "ds_n_month_cost_request_list" do
  run_script $js_n_month_cost_request_list, $ds_filtered_bcs, $param_cost_metric, $param_graph_dimension, $param_date_range, $param_billing_term
end

script "js_n_month_cost_request_list", type: "javascript" do
  parameters "ds_filtered_bcs", "param_cost_metric", "param_graph_dimension", "param_date_range", "param_billing_term"
  result "result"
  code <<-EOS
  // Function to take date object or YYYY-MM formatted string and move it backwards or forwards by month
  function move_month(date_string, amount) {
    clean_date = new Date(date_string).toISOString()
    year = Number(clean_date.split('-')[0])
    month = Number(clean_date.split('-')[1])

    if (amount > 0) {
      for (var i = 1; i <= amount; i++) {
        if (month == 12) {
          year += 1; month = 1
        } else {
          month += 1
        }
      }
    } else {
      for (var i = -1; i >= amount; i--) {
        if (month == 1) {
          year -= 1; month = 12
        } else {
          month -= 1
        }
      }
    }

    if (month < 10) { month = '0' + month }

    return [year, month].join('-')
  }

  // Function to generate a request
  function generate_request(graph_dimension, cost_metric, granularity, start_at, end_at) {
    graph_dimension_table = {
      "Category": "category",
      "Billing Centers": "billing_center_id",
      "Instance Type": "instance_type",
      "Region": "region",
      "Resource Group": "resource_group",
      "Resource Type": "resource_type",
      "Service": "service",
      "Usage Type": "usage_type",
      "Usage Unit": "usage_unit",
      "Cloud Vendor": "vendor",
      "Cloud Vendor Account": "vendor_account",
      "Cloud Vendor Account Name": "vendor_account_name"
    }

    cost_metric_table = {
      "Unamortized Unblended": "cost_nonamortized_unblended_adj",
      "Amortized Unblended": "cost_amortized_unblended_adj",
      "Unamortized Blended": "cost_nonamortized_blended_adj",
      "Amortized Blended": "cost_amortized_blended_adj"
    }

    return {
      "dimensions": [ graph_dimension_table[graph_dimension] ],
      "granularity": granularity,
      "start_at": start_at,
      "end_at": end_at,
      "metrics": [ cost_metric_table[cost_metric] ],
      "billing_center_ids": billing_center_ids
    }
  }

  result = []
  totalMonth = parseInt(param_date_range)
  billing_center_ids = _.pluck(ds_filtered_bcs, 'id')

  if (param_billing_term == "Day" || param_billing_term == "Week") {
    for (var i = 0; i < totalMonth; i++) {
      start_at = new Date().toISOString()
      start_at = move_month(start_at, -i) + '-01'
      end_at = move_month(start_at, 1) + '-01'

      result.push(generate_request(param_graph_dimension, param_cost_metric, "day", start_at, end_at))
    }
  } else {
    end_at = new Date().toISOString()
    end_at = move_month(end_at, 1)
    start_at = move_month(end_at, -totalMonth)

    result.push(generate_request(param_graph_dimension, param_cost_metric, "month", start_at, end_at))
  }
EOS
end

datasource "ds_previous_n_month_costs" do
  iterate $ds_n_month_cost_request_list
  request do
    auth $auth_flexera
    host rs_optima_host
    path join(["/bill-analysis/orgs/", rs_org_id, "/costs/aggregated"])
    verb  "POST"
    header "Api-Version", "1.0"
    header "Content-Type", "application/json"
    body_field "dimensions", val(iter_item, "dimensions")
    body_field "granularity", val(iter_item, "granularity")
    body_field "start_at", val(iter_item, "start_at")
    body_field "end_at", val(iter_item, "end_at")
    body_field "metrics", val(iter_item, "metrics")
    body_field "billing_center_ids", val(iter_item, "billing_center_ids")
  end
  result do
    encoding "json"
    collect jmes_path(response, "rows[*]") do
      field "dimensions", jmes_path(col_item, "dimensions")
      field "metrics", jmes_path(col_item, "metrics")
      field "timestamp", jmes_path(col_item, "timestamp")
    end
  end
end

datasource "ds_generated_report" do
  run_script $js_generated_report, $ds_previous_n_month_costs, $ds_billing_centers, $ds_filtered_bcs, $ds_current_report, $ds_currency, $param_cost_metric, $param_graph_dimension, $param_date_range, $param_billing_term, $param_billing_centers
end

script "js_generated_report", type: "javascript" do
  parameters "ds_previous_n_month_costs", "ds_billing_centers", "ds_filtered_bcs", "ds_current_report", "ds_currency", "param_cost_metric", "param_graph_dimension", "param_date_range", "param_billing_term", "param_billing_centers"
  result "report"
  code <<-'EOS'
  // Function to take date object or YYYY-MM formatted string and move it backwards or forwards by month
  function move_month(date_string, amount) {
    clean_date = new Date(date_string).toISOString()
    year = Number(clean_date.split('-')[0])
    month = Number(clean_date.split('-')[1])

    if (amount > 0) {
      for (var i = 1; i <= amount; i++) {
        if (month == 12) {
          year += 1; month = 1
        } else {
          month += 1
        }
      }
    } else {
      for (var i = -1; i >= amount; i--) {
        if (month == 1) {
          year -= 1; month = 12
        } else {
          month -= 1
        }
      }
    }

    if (month < 10) { month = '0' + month }

    return [year, month].join('-')
  }

  // Set metric based on parameter
  cost_metric_table = {
    "Unamortized Unblended": "cost_nonamortized_unblended_adj",
    "Amortized Unblended": "cost_amortized_unblended_adj",
    "Unamortized Blended": "cost_nonamortized_blended_adj",
    "Amortized Blended": "cost_amortized_blended_adj"
  }

  metric = cost_metric_table[param_cost_metric]

  // Set dimension based on parameter
  graph_dimension_table = {
    "Category": "category",
    "Billing Centers": "billing_center_id",
    "Instance Type": "instance_type",
    "Region": "region",
    "Resource Group": "resource_group",
    "Resource Type": "resource_type",
    "Service": "service",
    "Usage Type": "usage_type",
    "Usage Unit": "usage_unit",
    "Cloud Vendor": "vendor",
    "Cloud Vendor Account": "vendor_account",
    "Cloud Vendor Account Name": "vendor_account_name"
  }

  dimension = graph_dimension_table[param_graph_dimension]

  // Create table for finding billing center names based on id
  bc_names = {}
  _.each(ds_billing_centers, function(bc) { bc_names[bc['id']] = bc['name'] })

  // Chart color values for later use
  colors = ['D05A5A', 'F78741', 'FCC419', '007D76', '37AA77', '92DA71', '0F77B3', '7BACD1', 'BCC7E1', 'B80C83', 'E06C96', 'FBB3BB', '5F3DC4', '00A2F3', '99E9F2', '5C940D', '8EBF45', 'C0EB75']

  // Prepare date information for later use
  now = new Date()
  currentMonth = now.toISOString().split('-')[0] + '-' + now.toISOString().split('-')[1]
  currentMonthName = now.toLocaleString('en-US', { month: 'long' })
  totalMonth = parseInt(param_date_range)

  // Insert billing center names if we're reporting on that dimension.
  // Otherwise, use the data as-is.
  previous_n_month_costs = ds_previous_n_month_costs

  if (dimension == "billing_center_id") {
    previous_n_month_costs = _.map(previous_n_month_costs, function(row) {
      return {
        dimensions: {
          billing_center_id: row['dimensions']['billing_center_id'],
          billing_center_name: bc_names[row['dimensions']['billing_center_id']]
        },
        metrics: row['metrics'],
        timestamp: row['timestamp']
      }
    })
  }

  // Collate the previous_n_month_costs data.
  // Variables are mostly for keeping track of weeks to insert weekly data.
  collated_data = []
  count = -1
  tempDayNo = 0
  stringWeek = ""

  _.each(previous_n_month_costs, function (row) {
    timestamp = new Date(row['timestamp'])
    month_name = timestamp.toLocaleString('en-US', { month: 'short' })

    if (count == -1) {
      tempDayNo = timestamp.getDate()
      stringWeek = month_name + "-" + timestamp.getDate()
      count = 0
    }

    if (timestamp.getDate() != tempDayNo) {
      tempDayNo = timestamp.getDate()
      count++
    }

    if (count >= 7) {
      stringWeek = month_name + "-" + timestamp.getDate()
      count = 0
    }

    category = dimension
    if (category == "billing_center_id") { category = "billing_center_name" }

    collated_data.push({
      stringMonth: month_name,
      stringDay: month_name + "-" + timestamp.getDate(),
      stringWeek: stringWeek,
      yearMonth: timestamp.toISOString().split('-')[0] + '-' + timestamp.toISOString().split('-')[1],
      category: row['dimensions'][category],
      cost: row['metrics'][metric]
    })
  })

  // Top 10 categories
  categories = _.filter(collated_data, function(item) { return item['category'] != "" })
  categories = _.pluck(_.sortBy(categories, 'cost').reverse(), 'category').slice(0, 10)

  // Store data that is not in the top 10 categories for later use
  otherData = []

  bottom_data = _.reject(collated_data, function(item) {
    return _.contains(categories, item['category'])
  })

  if (param_billing_term == "Month") { group_by = "yearMonth"  }
  if (param_billing_term == "Day")   { group_by = "stringDay"  }
  if (param_billing_term == "Week")  { group_by = "stringWeek" }

  bottom_data = _.groupBy(bottom_data, function(item) { return item[group_by] })

  _.each(bottom_data, function(value, key) {
    data_item = { cost: _.reduce(value, function(total, item) { return total + item['cost'] }, 0) }

    if (param_billing_term == "Month") { data_item["yearMonth"] = key  }
    if (param_billing_term == "Day")   { data_item["stringDay"] = key  }
    if (param_billing_term == "Week")  { data_item["stringWeek"] = key }

    otherData.push(data_item)
  })

  // get unique dates
  previousMonths = _.compact(_.uniq(_.pluck(collated_data, 'yearMonth')))
  stringMonths = _.compact(_.uniq(_.pluck(collated_data, 'stringMonth')))
  stringDays = _.compact(_.uniq(_.pluck(collated_data, 'stringDay')))
  stringWeeks =_.compact(_.uniq(_.pluck(collated_data, 'stringWeek')))

  // get current month data
  current_month_costs = _.filter(collated_data, function(item) { return item['yearMonth'] == currentMonth })
  current_month_totals = _.pluck(current_month_costs, 'cost')
  current_month_total = _.reduce(current_month_totals, function (memo, num) { return memo + num }, 0)

  // build out the chart data for the top categories
  chartDataArray = []

  if (param_billing_term == "Month") {
    _.each(categories, function(category) {
      seriesData = []

      _.each(previousMonths, function(month) {
        tempTotal = _.where(collated_data, { yearMonth: month, category: category })

        if (tempTotal.length == 0) { seriesData.push("_") }
        if (tempTotal.length != 0) { seriesData.push(Math.round(tempTotal[0].cost)) }
      })

      chartDataArray.push(seriesData.join())
    })

    // Add the "Other" category and associated data
    if (otherData.length > 0) {
      categories.push("Other")
      seriesData = []

      _.each(previousMonths, function(month) {
        var tempTotal = _.where(otherData, { yearMonth: month })

        if (tempTotal.length == 0) { seriesData.push("_") }
        if (tempTotal.length != 0) { seriesData.push(Math.round(tempTotal[0].cost)) }
      })

      chartDataArray.push(seriesData.join())
    }
  }

  if (param_billing_term == "Day") {
    _.each(categories, function(category) {
      seriesData = []

      _.each(stringDays, function(day) {
        tempTotal = _.where(collated_data, { stringDay: day, category: category })

        if (tempTotal.length == 0) { seriesData.push("_") }
        if (tempTotal.length != 0) { seriesData.push(Math.round(tempTotal[0].cost)) }
      })

      chartDataArray.push(seriesData.join())
    })

    // Add the "Other" category and associated data
    if (otherData.length > 0) {
      categories.push("Other")
      seriesData = []

      _.each(stringDays, function(month) {
        var tempTotal = _.where(otherData, { stringDay: day })

        if (tempTotal.length == 0) { seriesData.push("_") }
        if (tempTotal.length != 0) { seriesData.push(Math.round(tempTotal[0].cost)) }
      })

      chartDataArray.push(seriesData.join())
    }
  }

  if (param_billing_term == "Week") {
    _.each(categories, function(category) {
      seriesData = []

      _.each(stringWeeks, function(week) {
        tempTotal = _.where(collated_data, { stringWeek: week, category: category })

        if (tempTotal.length == 0) { seriesData.push("_") }
        if (tempTotal.length != 0) { seriesData.push(Math.round(tempTotal[0].cost)) }
      })

      chartDataArray.push(seriesData.join())
    })

    // Add the "Other" category and associated data
    if (otherData.length > 0) {
      categories.push("Other")
      seriesData = []

      _.each(stringWeeks, function(week) {
        var tempTotal = _.where(otherData, { stringWeek: week })

        if (tempTotal.length == 0) { seriesData.push("_") }
        if (tempTotal.length != 0) { seriesData.push(Math.round(tempTotal[0].cost)) }
      })

      chartDataArray.push(seriesData.join())
    }
  }

  chartData = "chd=a:" + chartDataArray.join('|')
  chartColors = "chco=" + colors.slice(0, categories.length).join()

  encodedCategories = encodeURIComponent(categories.join('|')).replace(/[(]/gi, '%28').replace(/[)]/gi, '%29')
  if (encodedCategories.length < 1)  { chartCategories = "chdl=Unknown" }
  if (encodedCategories.length >= 1) { chartCategories = "chdl=" + encodedCategories }

  if (param_billing_term == "Month") { chartXAxis = "chxl=0:|" + stringMonths.join('|') }
  if (param_billing_term == "Day")   { chartXAxis = "chxl=0:|" + stringDays.join('|')   }
  if (param_billing_term == "Week")  { chartXAxis = "chxl=0:|" + stringWeeks.join('|')  }

  if (param_billing_centers.length == 0) { billingCenters = "All" }
  if (param_billing_centers.length != 0) { billingCenters = param_billing_centers.join() }

  report = {
    currentMonthName: currentMonthName,
    billingCenters: billingCenters,
    chartType: encodeURI('cht=bvs'),
    chartSize: encodeURI('chs=999x500'),
    chartTitle: encodeURI('chtt=Spending+Overview'),
    chartAxis: encodeURI('chxt=x,y'),
    chartXAxis: encodeURI(chartXAxis),
    chartAxisFormat: encodeURI('chxs=1N*c' + ds_currency['symbol'] + 's*'),
    chartData: encodeURI(chartData),
    chartCategories: chartCategories,
    chartColors: encodeURI(chartColors),
    chartExtension: encodeURI('chof=.png'),
    chartKeyLocation: encodeURI('chdlp=b'),
    currentSpend: Math.round(current_month_total),
    currencyCode: ds_currency['symbol'],
    reportData: ds_current_report,
    dataPresent: previous_n_month_costs.length
  }
EOS
end

###############################################################################
# Policy
###############################################################################

policy "policy_scheduled_report" do
  validate $ds_generated_report do
    summary_template "{{ rs_org_name }} (Org ID: {{ rs_org_id }}): Full Cost Scheduled Report"
    detail_template <<-EOS
# Full Cost Report for {{ rs_org_name }} - {{ data.currentMonthName }}
## Billing Centers: {{ data.billingCenters }}
### Cost Metric: {{ parameters.param_cost_metric }}
### Chart Dimension: {{ parameters.param_graph_dimension }}
### Bill Currency: {{ data.currencyCode }}
### Date Range: {{ parameters.param_date_range }}
### Billing Term: {{ parameters.param_billing_term }}
![Spending Overview Chart](https://image-charts.com/chart?{{ data.chartType }}&{{ data.chartSize }}&{{ data.chartTitle }}&{{ data.chartAxis }}&{{ data.chartXAxis }}&{{ data.chartAxisFormat }}&{{ data.chartData }}&{{ data.chartCategories }}&{{ data.chartColors }}&{{ data.chartKeyLocation }}&{{ data.chartExtension }} "Spending Overview Chart")
### For more detailed cost information, visit [Optima](https://analytics.rightscale.com/orgs/{{ rs_org_id }}/dashboard).
For more information on this report, please view the [README](https://github.com/flexera-public/policy_templates/tree/master/cost/scheduled_reports).
___
###### Policy Applied in Account: {{ rs_project_name }} (Account ID: {{ rs_project_id }}) within Org: {{ rs_org_name }} (Org ID: {{ rs_org_id }})
    EOS
    check eq(val(data, "dataPresent"),0)
    escalate $esc_email
    export "reportData" do
      field "range" do
        label "Range"
      end
      field "avg" do
        label "Daily Average"
      end
      field "previous" do
        label "Previous"
      end
      field "current" do
        label "Current (Incomplete)"
      end
    end
  end
end

###############################################################################
# Escalations
###############################################################################

escalation "esc_email" do
  automatic true
  label "Send Email"
  description "Send incident email"
  email $param_email
end

name "Scheduled Report"
rs_pt_ver 20180301
type "policy"
short_description "This policy allows you to configure scheduled reports that will provide summaries of cloud cost. See the [README](https://github.com/flexera-public/policy_templates/tree/master/cost/scheduled_reports/) and [docs.flexera.com/flexera/EN/Automation](https://docs.flexera.com/flexera/EN/Automation/AutomationGS.htm) to learn more."
long_description ""
severity "low"
category "Cost"
default_frequency "monthly"
info(
  version: "3.0",
  provider: "Flexera Optima",
  service: "",
  policy_set: ""
)

##############################################################################
# Parameters
##############################################################################

parameter "param_email" do
  type "list"
  category "Policy Settings"
  label "Email Addresses"
  description "A list of email addresses to notify."
  default []
end

parameter "param_cost_metric" do
  type "string"
  category "Policy Settings"
  label "Cost Metric"
  description "Select the cost metric for your report. See the README file for more details"
  allowed_values "Unamortized Unblended", "Amortized Unblended", "Unamortized Blended", "Amortized Blended"
  default "Unamortized Unblended"
end

parameter "param_graph_dimension" do
  type "string"
  category "Policy Settings"
  label "Graph Dimension"
  description "Select which dimension you'd like to be broken out on the graph in the report. Select 'Custom' to specify the name of a custom dimension, such as a Custom Tag or Custom Rule-Based Dimension, or the name of any dimension not on the list."
  allowed_values "Custom", "Category", "Billing Centers", "Instance Type", "Region", "Resource Group", "Resource Type", "Service", "Usage Type", "Usage Unit", "Cloud Vendor", "Cloud Vendor Account", "Cloud Vendor Account Name"
  default "Category"
end

parameter "param_custom_dimension" do
  type "string"
  category "Policy Settings"
  label "Custom Graph Dimension"
  description "Specify the name of the custom dimension you want to break costs out by. Spelling and capitalization must match what is shown in the Flexera CCO platform. Only applicable if 'Custom' is selected for the Graph Dimension."
  default ""
end

parameter "param_filter_dimensions" do
  type "list"
  category "Policy Settings"
  label "Filter Dimensions"
  description "Specify the names of the dimensions you wish to filter the costs by along with their values in dimension=value format. Spelling and capitalization must match what is shown in the Flexera CCO platform. Examples: Environment=Production, Cost Owner=John Doe"
  allowed_pattern /^[^=]+=[^=]+$/
  default []
end

parameter "param_filter_functionality" do
  type "string"
  category "Policy Settings"
  label "Filter Functionality"
  description "Whether to filter for costs that meet all of the criteria specified in 'Filter Dimensions' or costs that meet any of the criteria. Only applicable if at least two values are entered for 'Filter Dimensions'"
  allowed_values "All", "Any"
  default "All"
end

parameter "param_date_range" do
  type "string"
  category "Date/Time Settings"
  label "Date Range"
  description "Select the Date Range options you'd like to be display on the graph in the report."
  allowed_values "1 month", "3 month", "6 month", "12 month"
  default "6 month"
end

parameter "param_billing_term" do
  type "string"
  category "Date/Time Settings"
  label "Billing Term"
  description "Select the Billing Term options you'd like to be display on the graph in the report."
  allowed_values "Day", "Week", "Month"
  default "Month"
end

parameter "param_billing_centers" do
  type "list"
  category "Filters"
  label "Billing Center List"
  description "List of Billing Center names or IDs you want to report on. Leave blank to select all top level Billing Centers."
  default []
end

###############################################################################
# Authentication
###############################################################################

credentials "auth_flexera" do
  schemes "oauth2"
  label "flexera"
  description "Select Flexera One OAuth2 credentials"
  tags "provider=flexera"
end

###############################################################################
# Datasources & Scripts
###############################################################################

# Misc. immutable data used by other parts of the policy
datasource "ds_data_tables" do
  run_script $js_data_tables
end

script "js_data_tables", type:"javascript" do
  result "result"
  code <<-EOS
  result = {
    cost_metrics: {
      "Unamortized Unblended": "cost_nonamortized_unblended_adj",
      "Amortized Unblended": "cost_amortized_unblended_adj",
      "Unamortized Blended": "cost_nonamortized_blended_adj",
      "Amortized Blended": "cost_amortized_blended_adj"
    },
    dimensions: {
      "Category": "category",
      "Billing Centers": "billing_center_id",
      "Instance Type": "instance_type",
      "Region": "region",
      "Resource Group": "resource_group",
      "Resource Type": "resource_type",
      "Service": "service",
      "Usage Type": "usage_type",
      "Usage Unit": "usage_unit",
      "Cloud Vendor": "vendor",
      "Cloud Vendor Account": "vendor_account",
      "Cloud Vendor Account Name": "vendor_account_name",
      "Custom": ""
    },
    graph_colors: [
      'D05A5A', 'F78741', 'FCC419', '007D76', '37AA77', '92DA71',
      '0F77B3', '7BACD1', 'BCC7E1', 'B80C83', 'E06C96', 'FBB3BB',
      '5F3DC4', '00A2F3', '99E9F2', '5C940D', '8EBF45', 'C0EB75'
    ],
    months_short: [
      'None', 'Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun',
      'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'
    ],
    months_long: [
      'None', 'January', 'February', 'March', 'April', 'May', 'June',
      'July', 'August', 'September', 'October', 'November', 'December'
    ]
  }
EOS
end

# Store details about graph dimension in datasource
datasource "ds_cost_dimensions" do
  request do
    auth $auth_flexera
    host rs_optima_host
    path join(["/bill-analysis/orgs/", rs_org_id, "/costs/dimensions"])
    header "Api-Version", "1.0"
  end
  result do
    encoding "json"
    collect jmes_path(response, "dimensions[*]") do
      field "id", jmes_path(col_item, "id")
      field "name", jmes_path(col_item, "name")
      field "type", jmes_path(col_item, "type")
    end
  end
end

datasource "ds_cost_dimension_table" do
  run_script $js_cost_dimension_table, $ds_cost_dimensions
end

script "js_cost_dimension_table", type: "javascript" do
  parameters "ds_cost_dimensions"
  result "result"
  code <<-EOS
  result = {}

  _.each(ds_cost_dimensions, function(item) {
    result[item['name']] = item['id']
  })
EOS
end

datasource "ds_graph_dimension" do
  run_script $js_graph_dimension, $ds_cost_dimension_table, $ds_data_tables, $param_graph_dimension, $param_custom_dimension
end

script "js_graph_dimension", type: "javascript" do
  parameters "ds_cost_dimension_table", "ds_data_tables", "param_graph_dimension", "param_custom_dimension"
  result "result"
  code <<-EOS
  result = { id: "category", name: "Category" }

  if (param_graph_dimension == 'Custom') {
    id = ds_cost_dimension_table[param_custom_dimension]

    // Attempt to correct for possible user error when entering dimension names
    if (id == undefined) { id = ds_cost_dimension_table[param_custom_dimension.trim()] }
    if (id == undefined) { id = ds_cost_dimension_table[param_custom_dimension.toLowerCase()] }
    if (id == undefined) { id = ds_cost_dimension_table[param_custom_dimension.toLowerCase().trim()] }

    if (id != undefined) {
      result = {
        id: ds_cost_dimension_table[param_custom_dimension],
        name: param_custom_dimension
      }
    }
  } else {
    result = {
      id: ds_data_tables['dimensions'][param_graph_dimension],
      name: param_graph_dimension
    }
  }
EOS
end

# Gather applied policy metadata for use later
datasource "ds_applied_policy" do
  request do
    auth $auth_flexera
    host rs_governance_host
    path join(["/api/governance/projects/", rs_project_id, "/applied_policies/", policy_id])
    header "Api-Version", "1.0"
  end
end

datasource "ds_billing_centers" do
  request do
    auth $auth_flexera
    host rs_optima_host
    path join(["/analytics/orgs/", rs_org_id, "/billing_centers"])
    header "Api-Version", "1.0"
    header "User-Agent", "RS Policies"
    query "view", "allocation_table"
    ignore_status [403]
  end
  result do
    encoding "json"
    collect jmes_path(response, "[*]") do
      field "href", jmes_path(col_item, "href")
      field "id", jmes_path(col_item, "id")
      field "name", jmes_path(col_item, "name")
      field "parent_id", jmes_path(col_item, "parent_id")
      field "ancestor_ids", jmes_path(col_item, "ancestor_ids")
      field "allocation_table", jmes_path(col_item, "allocation_table")
    end
  end
end

# Filter billing centers based on parameter
datasource "ds_filtered_bcs" do
  run_script $js_filtered_bcs, $ds_billing_centers, $param_billing_centers
end

script "js_filtered_bcs", type: "javascript" do
  parameters "ds_billing_centers", "param_billing_centers"
  result "result"
  code <<-EOS
  if (param_billing_centers.length > 0) {
    result = _.filter(ds_billing_centers, function(bc) {
      return _.contains(param_billing_centers, bc['name']) || _.contains(param_billing_centers, bc['name'].toLowerCase()) || _.contains(param_billing_centers, bc['id'])
    })
  } else {
    result = _.filter(ds_billing_centers, function(bc) {
      return bc['parent_id'] == null || bc['parent_id'] == undefined
    })
  }
EOS
end

datasource "ds_currency_reference" do
  request do
    host "raw.githubusercontent.com"
    path "/rightscale/policy_templates/master/cost/scheduled_reports/currency_reference.json"
    header "User-Agent", "RS Policies"
  end
end

datasource "ds_currency_code" do
  request do
    auth $auth_flexera
    host rs_optima_host
    path join(["/bill-analysis/orgs/", rs_org_id, "/settings/currency_code"])
    header "Api-Version", "0.1"
    header "User-Agent", "RS Policies"
    ignore_status [403]
  end
  result do
    encoding "json"
    field "id", jmes_path(response, "id")
    field "value", jmes_path(response, "value")
  end
end

datasource "ds_currency" do
  run_script $js_currency, $ds_currency_reference, $ds_currency_code
end

script "js_currency", type:"javascript" do
  parameters "ds_currency_reference", "ds_currency_code"
  result "result"
  code <<-EOS
  symbol = "$"
  symbol_native = "$"
  code = "USD"
  separator = ","

  if (ds_currency_code['value'] != undefined) {
    if (ds_currency_reference[ds_currency_code['value']] != undefined) {
      symbol = ds_currency_reference[ds_currency_code['value']]['symbol']
      symbol_native = ds_currency_reference[ds_currency_code['value']]['symbol_native']
      code = ds_currency_reference[ds_currency_code['value']]['code']

      if (ds_currency_reference[ds_currency_code['value']]['t_separator'] != undefined) {
        separator = ds_currency_reference[ds_currency_code['value']]['t_separator']
      } else {
        separator = ""
      }
    }
  }

  result = {
    symbol: symbol,
    symbol_native: symbol_native,
    code: code,
    separator: separator
  }
EOS
end

datasource "ds_cost_request_list" do
  run_script $js_cost_request_list, $ds_filtered_bcs, $ds_graph_dimension, $ds_cost_dimension_table, $ds_data_tables, $param_cost_metric, $param_date_range, $param_billing_term, $param_filter_dimensions, $param_filter_functionality
end

script "js_cost_request_list", type: "javascript" do
  parameters "ds_filtered_bcs", "ds_graph_dimension", "ds_cost_dimension_table", "ds_data_tables", "param_cost_metric", "param_date_range", "param_billing_term", "param_filter_dimensions", "param_filter_functionality"
  result "result"
  code <<-EOS
  // Function to take date object or YYYY-MM formatted string and move it backwards or forwards by month
  function move_month(date_string, amount) {
    clean_date = new Date(date_string).toISOString()
    year = Number(clean_date.split('-')[0])
    month = Number(clean_date.split('-')[1])

    if (amount > 0) {
      for (var i = 1; i <= amount; i++) {
        if (month == 12) {
          year += 1; month = 1
        } else {
          month += 1
        }
      }
    } else {
      for (var i = -1; i >= amount; i--) {
        if (month == 1) {
          year -= 1; month = 12
        } else {
          month -= 1
        }
      }
    }

    if (month < 10) { month = '0' + month }

    return [year, month].join('-')
  }

  // Configure cost filters if specified by user
  filter = null
  filter_expressions = []
  boolean_table = { 'Any': 'or', 'All': 'and' }

  _.each(param_filter_dimensions, function(item) {
    key = item.split('=')[0]
    value = item.split('=')[1]
    dimension_id = ds_cost_dimension_table[key]

    // Attempt to correct for possible user error when entering dimension names
    if (dimension_id == undefined) { dimension_id = ds_cost_dimension_table[key.trim()] }
    if (dimension_id == undefined) { dimension_id = ds_cost_dimension_table[key.toLowerCase()] }
    if (dimension_id == undefined) { dimension_id = ds_cost_dimension_table[key.toLowerCase().trim()] }

    if (dimension_id != undefined) {
      filter_expressions.push({ type: "equal", dimension: dimension_id, value: value })
    }
  })

  if (filter_expressions.length > 0) {
    filter = {
      "type": boolean_table[param_filter_functionality],
      "expressions": filter_expressions
    }
  }

  result = []
  totalMonth = parseInt(param_date_range)
  dimensions = [ ds_graph_dimension['id'] ]
  metrics = [ ds_data_tables['cost_metrics'][param_cost_metric] ]
  billing_center_ids = _.pluck(ds_filtered_bcs, 'id')

  if (param_billing_term == "Day" || param_billing_term == "Week") {
    for (var i = 0; i < totalMonth; i++) {
      start_at = new Date().toISOString()
      start_at = move_month(start_at, -i) + '-01'
      end_at = move_month(start_at, 1) + '-01'

      request = {
        "billing_center_ids": billing_center_ids,
        "dimensions": dimensions,
        "metrics": metrics,
        "granularity": "day",
        "start_at": start_at,
        "end_at": end_at
      }

      if (filter != null) { request['filter'] = filter }

      result.push(request)
    }
  } else {
    end_at = new Date().toISOString()
    end_at = move_month(end_at, 1)
    start_at = move_month(end_at, -totalMonth)

    request = {
      "billing_center_ids": billing_center_ids,
      "dimensions": dimensions,
      "metrics": metrics,
      "granularity": "month",
      "start_at": start_at,
      "end_at": end_at
    }

    if (filter != null) { request['filter'] = filter }

    result.push(request)
  }
EOS
end

datasource "ds_pulled_costs" do
  iterate $ds_cost_request_list
  request do
    auth $auth_flexera
    host rs_optima_host
    path join(["/bill-analysis/orgs/", rs_org_id, "/costs/aggregated"])
    verb  "POST"
    header "Api-Version", "1.0"
    header "Content-Type", "application/json"
    body_field "dimensions", val(iter_item, "dimensions")
    body_field "granularity", val(iter_item, "granularity")
    body_field "start_at", val(iter_item, "start_at")
    body_field "end_at", val(iter_item, "end_at")
    body_field "metrics", val(iter_item, "metrics")
    body_field "billing_center_ids", val(iter_item, "billing_center_ids")
  end
  result do
    encoding "json"
    collect jmes_path(response, "rows[*]") do
      field "dimensions", jmes_path(col_item, "dimensions")
      field "metrics", jmes_path(col_item, "metrics")
      field "timestamp", jmes_path(col_item, "timestamp")
    end
  end
end

datasource "ds_collated_data" do
  run_script $js_collated_data, $ds_pulled_costs, $ds_billing_centers, $ds_graph_dimension, $ds_data_tables, $ds_currency, $param_cost_metric, $param_billing_term
end

script "js_collated_data", type: "javascript" do
  parameters "ds_pulled_costs", "ds_billing_centers", "ds_graph_dimension", "ds_data_tables", "ds_currency", "param_cost_metric", "param_billing_term"
  result "result"
  code <<-'EOS'
  // Set metric based on parameters
  metric = ds_data_tables['cost_metrics'][param_cost_metric]

  // Create table for finding billing center names based on id
  bc_names = {}
  _.each(ds_billing_centers, function(bc) { bc_names[bc['id']] = bc['name'] })

  // Insert billing center names if we're reporting on that dimension.
  // Otherwise, use the data as-is.
  pulled_costs = ds_pulled_costs

  if (ds_graph_dimension['id'] == "billing_center_id") {
    pulled_costs = _.map(pulled_costs, function(row) {
      return {
        dimensions: {
          billing_center_id: row['dimensions']['billing_center_id'],
          billing_center_name: bc_names[row['dimensions']['billing_center_id']]
        },
        metrics: row['metrics'],
        timestamp: row['timestamp']
      }
    })
  }

  // Collate the pulled_costs data.
  // Variables are mostly for keeping track of weeks to insert weekly data.
  result = []
  count = -1
  tempDayNo = 0
  stringWeek = ""

  _.each(pulled_costs, function(row) {
    timestamp = new Date(row['timestamp'])
    day = timestamp.toISOString().split('-')[2].split('T')[0]
    year = timestamp.toISOString().split('-')[0]
    month = timestamp.toISOString().split('-')[1]
    stringMonth = ds_data_tables['months_short'][Number(timestamp.toISOString().split('-')[1])]
    longMonth = ds_data_tables['months_long'][Number(timestamp.toISOString().split('-')[1])]
    stringDay = stringMonth + "-" + day

    if (count == -1) {
      tempDayNo = day
      stringWeek = stringMonth + "-" + day
      count = 0
    }

    if (day != tempDayNo) {
      tempDayNo = day
      count++
    }

    if (count >= 7) {
      stringWeek = stringMonth + "-" + day
      count = 0
    }

    category = ds_graph_dimension['id']
    if (category == "billing_center_id") { category = "billing_center_name" }

    if (param_billing_term == 'Day') { timeUnit = timestamp.toISOString().split('T')[0] }

    if (param_billing_term == 'Month') { timeUnit = [year, month].join('-') }

    if (param_billing_term == 'Week') {
      weekMonth = ds_data_tables['months_short'].indexOf(stringWeek.split('-')[0])
      if (weekMonth < 10) { weekMonth = '0' + weekMonth }
      weekDay = stringWeek.split('-')[1]

      timeUnit = [year, weekMonth, weekDay].join('-')
    }

    result.push({
      stringMonth: stringMonth,
      stringDay: stringDay,
      stringWeek: stringWeek,
      timeUnit: timeUnit,
      yearMonth: timestamp.toISOString().split('-')[0] + '-' + timestamp.toISOString().split('-')[1],
      category: row['dimensions'][category],
      cost: row['metrics'][metric],
      displayCost: Number(row['metrics'][metric].toFixed(3)),
      currency: ds_currency['symbol']
    })
  })
EOS
end

datasource "ds_generated_report" do
  run_script $js_generated_report, $ds_collated_data, $ds_graph_dimension, $ds_data_tables, $ds_currency, $ds_applied_policy, $param_cost_metric, $param_date_range, $param_billing_term, $param_billing_centers, $param_filter_dimensions, $param_filter_functionality
end

script "js_generated_report", type: "javascript" do
  parameters "ds_collated_data", "ds_graph_dimension", "ds_data_tables", "ds_currency", "ds_applied_policy", "param_cost_metric", "param_date_range", "param_billing_term", "param_billing_centers", "param_filter_dimensions", "param_filter_functionality"
  result "result"
  code <<-'EOS'
  // Prepare date information for later use
  now = new Date()
  currentMonth = now.toISOString().split('-')[0] + '-' + now.toISOString().split('-')[1]
  currentMonthName = ds_data_tables['months_long'][Number(now.toISOString().split('-')[1])]

  totalMonth = parseInt(param_date_range)

  // Top 10 categories
  top_categories = _.filter(ds_collated_data, function(item) { return item['category'] != "" })
  top_categories = _.sortBy(top_categories, 'cost').reverse()
  categories = []

  _.each(top_categories, function(item) {
    if (!_.contains(categories, item['category']) && categories.length < 10) {
      categories.push(item['category'])
    }
  })

  // Store data that is not in the top 10 categories for later use
  otherData = []

  bottom_data = _.reject(ds_collated_data, function(item) {
    return _.contains(categories, item['category'])
  })

  if (param_billing_term == "Month") { group_by = "yearMonth"  }
  if (param_billing_term == "Day")   { group_by = "stringDay"  }
  if (param_billing_term == "Week")  { group_by = "stringWeek" }

  bottom_data = _.groupBy(bottom_data, function(item) { return item[group_by] })

  _.each(bottom_data, function(value, key) {
    data_item = { cost: _.reduce(value, function(total, item) { return total + item['cost'] }, 0) }

    if (param_billing_term == "Month") { data_item["yearMonth"] = key  }
    if (param_billing_term == "Day")   { data_item["stringDay"] = key  }
    if (param_billing_term == "Week")  { data_item["stringWeek"] = key }

    otherData.push(data_item)
  })

  // get unique dates
  previousMonths = _.compact(_.uniq(_.pluck(ds_collated_data, 'yearMonth')))
  stringMonths = _.compact(_.uniq(_.pluck(ds_collated_data, 'stringMonth')))
  stringDays = _.compact(_.uniq(_.pluck(ds_collated_data, 'stringDay')))
  stringWeeks =_.compact(_.uniq(_.pluck(ds_collated_data, 'stringWeek')))

  // get current month data
  current_month_costs = _.filter(ds_collated_data, function(item) { return item['yearMonth'] == currentMonth })
  current_month_totals = _.pluck(current_month_costs, 'cost')
  current_month_total = _.reduce(current_month_totals, function (memo, num) { return memo + num }, 0)

  // build out the chart data for the top categories
  chartDataArray = []

  if (param_billing_term == "Month") {
    _.each(categories, function(category) {
      seriesData = []

      _.each(previousMonths, function(month) {
        tempTotal = _.where(ds_collated_data, { yearMonth: month, category: category })

        if (tempTotal.length == 0) { seriesData.push("_") }
        if (tempTotal.length != 0) { seriesData.push(Math.round(tempTotal[0].cost)) }
      })

      chartDataArray.push(seriesData.join())
    })

    // Add the "Other" category and associated data
    if (otherData.length > 0) {
      categories.push("Other")
      seriesData = []

      _.each(previousMonths, function(month) {
        var tempTotal = _.where(otherData, { yearMonth: month })

        if (tempTotal.length == 0) { seriesData.push("_") }
        if (tempTotal.length != 0) { seriesData.push(Math.round(tempTotal[0].cost)) }
      })

      chartDataArray.push(seriesData.join())
    }
  }

  if (param_billing_term == "Day") {
    _.each(categories, function(category) {
      seriesData = []

      _.each(stringDays, function(day) {
        tempTotal = _.where(ds_collated_data, { stringDay: day, category: category })

        if (tempTotal.length == 0) { seriesData.push("_") }
        if (tempTotal.length != 0) { seriesData.push(Math.round(tempTotal[0].cost)) }
      })

      chartDataArray.push(seriesData.join())
    })

    // Add the "Other" category and associated data
    if (otherData.length > 0) {
      categories.push("Other")
      seriesData = []

      _.each(stringDays, function(day) {
        var tempTotal = _.where(otherData, { stringDay: day })

        if (tempTotal.length == 0) { seriesData.push("_") }
        if (tempTotal.length != 0) { seriesData.push(Math.round(tempTotal[0].cost)) }
      })

      chartDataArray.push(seriesData.join())
    }
  }

  if (param_billing_term == "Week") {
    _.each(categories, function(category) {
      seriesData = []

      _.each(stringWeeks, function(week) {
        tempTotal = _.where(ds_collated_data, { stringWeek: week, category: category })

        if (tempTotal.length == 0) { seriesData.push("_") }
        if (tempTotal.length != 0) { seriesData.push(Math.round(tempTotal[0].cost)) }
      })

      chartDataArray.push(seriesData.join())
    })

    // Add the "Other" category and associated data
    if (otherData.length > 0) {
      categories.push("Other")
      seriesData = []

      _.each(stringWeeks, function(week) {
        var tempTotal = _.where(otherData, { stringWeek: week })

        if (tempTotal.length == 0) { seriesData.push("_") }
        if (tempTotal.length != 0) { seriesData.push(Math.round(tempTotal[0].cost)) }
      })

      chartDataArray.push(seriesData.join())
    }
  }

  chartData = "chd=a:" + chartDataArray.join('|')
  chartColors = "chco=" + ds_data_tables['graph_colors'].slice(0, categories.length).join()

  encodedCategories = encodeURIComponent(categories.join('|')).replace(/[(]/gi, '%28').replace(/[)]/gi, '%29')
  if (encodedCategories.length < 1)  { chartCategories = "chdl=Unknown" }
  if (encodedCategories.length >= 1) { chartCategories = "chdl=" + encodedCategories }

  if (param_billing_term == "Month") { chartXAxis = "chxl=0:|" + stringMonths.join('|') }
  if (param_billing_term == "Day")   { chartXAxis = "chxl=0:|" + stringDays.join('|')   }
  if (param_billing_term == "Week")  { chartXAxis = "chxl=0:|" + stringWeeks.join('|')  }

  if (param_billing_centers.length == 0) { billingCenters = "All" }
  if (param_billing_centers.length != 0) { billingCenters = param_billing_centers.join() }

  filterList = "None"

  if (param_filter_dimensions.length > 0) {
    if (param_filter_functionality == 'All') {
      filterList = "Costs that match all of the following: "
      filterList += param_filter_dimensions.join(', ')
    } else {
      filterList = "Costs that match any of the following: "
      filterList += param_filter_dimensions.join(', ')
    }
  }

  result = {
    currentMonthName: currentMonthName,
    billingCenters: billingCenters,
    chartType: encodeURI('cht=bvs'),
    chartSize: encodeURI('chs=999x500'),
    chartTitle: encodeURI('chtt=Spending+Overview'),
    chartAxis: encodeURI('chxt=x,y'),
    chartXAxis: encodeURI(chartXAxis),
    chartAxisFormat: encodeURI('chxs=1N*c' + ds_currency['code'] + 's*'),
    chartData: encodeURI(chartData),
    chartCategories: chartCategories,
    chartColors: encodeURI(chartColors),
    chartExtension: encodeURI('chof=.png'),
    chartKeyLocation: encodeURI('chdlp=b'),
    currentSpend: Math.round(current_month_total),
    currencyCode: ds_currency['symbol'],
    reportData: ds_collated_data,
    dataPresent: ds_collated_data.length,
    graphDimension: ds_graph_dimension['name'],
    policyName: ds_applied_policy['name'],
    filterList: filterList
  }
EOS
end

###############################################################################
# Policy
###############################################################################

policy "policy_scheduled_report" do
  validate $ds_generated_report do
    summary_template "{{ data.policyName }}"
    detail_template <<-EOS
# Full Cost Report for {{ rs_org_name }} - {{ data.currentMonthName }}
## Billing Centers: {{ data.billingCenters }}
### Cost Metric: {{ parameters.param_cost_metric }}
### Chart Dimension: {{ data.graphDimension }}
### Filters: {{ data.filterList }}
### Bill Currency: {{ data.currencyCode }}
### Date Range: {{ parameters.param_date_range }}
### Billing Term: {{ parameters.param_billing_term }}
![Spending Overview Chart](https://image-charts.com/chart?{{ data.chartType }}&{{ data.chartSize }}&{{ data.chartTitle }}&{{ data.chartAxis }}&{{ data.chartXAxis }}&{{ data.chartAxisFormat }}&{{ data.chartData }}&{{ data.chartCategories }}&{{ data.chartColors }}&{{ data.chartKeyLocation }}&{{ data.chartExtension }} "Spending Overview Chart")
### For more detailed cost information, see [Tabular View](https://app.flexera.com/orgs/{{ rs_org_id }}/optima/tabular-view).
For more information on this report, please view the [README](https://github.com/flexera-public/policy_templates/tree/master/cost/scheduled_reports).
___
###### Policy Applied in Account: {{ rs_project_name }} (Account ID: {{ rs_project_id }}) within Org: {{ rs_org_name }} (Org ID: {{ rs_org_id }})
    EOS
    check eq(val(data, "dataPresent"), 0)
    escalate $esc_email
    export "reportData" do
      field "timeUnit" do
        label "Date"
      end
      field "category" do
        label "Dimension Value"
      end
      field "displayCost" do
        label "Cost"
      end
      field "currency" do
        label "Currency"
      end
    end
  end
end

###############################################################################
# Escalations
###############################################################################

escalation "esc_email" do
  automatic true
  label "Send Email"
  description "Send incident email"
  email $param_email
end

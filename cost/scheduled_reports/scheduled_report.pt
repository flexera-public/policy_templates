name "Scheduled Report"
rs_pt_ver 20180301
type "policy"
short_description "This policy allows you to set up scheduled reports that will provide summaries of cloud cost across all resources in the billing centers you specify, delivered to any email addresses you specify. The policy will report the following:

Chart of the previous 6 months of utilization based on [category](https://docs.rightscale.com/optima/reference/rightscale_dimensions.html#category).  
Daily average cost across the last week and last month.  
Total cost during previous full week (Monday-Sunday) and previous full month.  
Total cost during current (incomplete) week and month.  

We recommend running this policy on a weekly cadence and applying it to your master account.

_Note 1: The last 3 days of data in the current week or month will contain incomplete data._  
_Note 2: The account you apply the policy to is unimportant as Optima metrics are scoped to the Org._

See [README](https://github.com/rightscale/policy_templates/tree/master/cost/scheduled_reports) for more details"
long_description "Version: 1.4"
severity "low"
category "Cost"

## commented out until the optima resource is added to policies.
# permission "optima" do
#   label "Access Optima Resources"
#   resources "rs_optima.costs"
#   actions "rs_optima.aggregated"
# end

parameter "param_email" do
  type "list"
  label "Email List"
  description "Email addresses of the recipients you wish to notify"
end

parameter "param_billing_centers" do
  type "list"
  label "Billing Center List"
  description "List of top level Billing Center names you want to report on.  Leave blank to select all top level Billing Centers."
end

parameter "param_cost_metric" do
  type "string"
  label "Cost Metric"
  allowed_values "Unamortized Unblended","Amortized Unblended","Unamortized Blended","Amortized Blended"
  default "Unamortized Unblended"
  description "Select the cost metric for your report.  See the README file for more details"
end

##  the below params are used to pass values to the `costs` datasources
##  these are temporary until we can pass literal values to the datasource parameters
parameter "param_daily_range" do
  type "string"
  label "param_daily_range"
  description "DO NOT CHANGE"
  default  "daily"
end
parameter "param_monthly_range" do
  type "string"
  label "param_monthly_range"
  description "DO NOT CHANGE"
  default  "monthly"
end
parameter "param_scale_current" do
  type "string"
  label "param_scale_current"
  description "DO NOT CHANGE"
  default "current"
end
parameter "param_scale_previous" do
  type "string"
  label "param_scale_previous"
  description "DO NOT CHANGE"
  default "previous"
end

auth "auth_rs", type: "rightscale"

datasource "billing_centers" do
  request do
    auth $auth_rs
    host rs_optima_host
    path join(["/analytics/orgs/",rs_org_id,"/billing_centers"])
    header "Api-Version", "1.0"
    header "User-Agent", "RS Policies"
    query "view", "allocation_table"
  end
  result do
    encoding "json"
    collect jmes_path(response,"[*]") do
      field "href", jmes_path(col_item,"href")
      field "id", jmes_path(col_item,"id")
      field "name", jmes_path(col_item,"name")
      field "parent_id", jmes_path(col_item,"parent_id")
      field "ancestor_ids", jmes_path(col_item,"ancestor_ids")
      field "allocation_table", jmes_path(col_item,"allocation_table")
    end
  end
end

datasource "current_week_costs" do
  request do
   run_script $cost_request, $param_billing_centers, $param_cost_metric, rs_org_id, rs_optima_host, $param_daily_range, $param_scale_current,$billing_centers
  end
end

datasource "previous_week_costs" do
  request do
   run_script $cost_request, $param_billing_centers, $param_cost_metric, rs_org_id, rs_optima_host, $param_daily_range, $param_scale_previous,$billing_centers
  end
end

datasource "current_month_costs" do
  request do
   run_script $cost_request, $param_billing_centers, $param_cost_metric, rs_org_id, rs_optima_host, $param_monthly_range, $param_scale_current,$billing_centers
  end
end

datasource "previous_month_costs" do
  request do
   run_script $cost_request, $param_billing_centers, $param_cost_metric, rs_org_id, rs_optima_host, $param_monthly_range, $param_scale_previous,$billing_centers
  end
end

script "cost_request", type: "javascript" do
  parameters "param_billing_centers","param_cost_metric","rs_org_id", "rs_optima_host", "range", "scale","billing_centers"
  result "request"
  code <<-EOS
    // format the date for the `daily` API
    // returns date formatted as string: YYYY-mm-dd
    function getFormattedDailyDate(date) {
      var year = date.getFullYear();

      var month = (1 + date.getMonth()).toString();
      month = month.length > 1 ? month : '0' + month;

      var day = date.getDate().toString();
      day = day.length > 1 ? day : '0' + day;

      return year + '-' + month + '-' + day;
    }

    // format the date for the `monthly` API
    // returns date formatted as string: YYYY-mm
    function getFormattedMonthlyDate(date) {
      var year = date.getFullYear();

      var month = (1 + date.getMonth()).toString();
      month = month.length > 1 ? month : '0' + month;

      var day = date.getDate().toString();
      day = day.length > 1 ? day : '0' + day;

      return year + '-' + month ;
    }

    // finds first day of week
    function getMonday( date ) {
      var day = date.getDay() || 7;
      if( day !== 1 )
          date.setHours(-24 * (day - 1));
      return date;
    }

    // create a map to use in the request metric field.
    var cost_metric = {
      "Unamortized Unblended":"cost_nonamortized_unblended_adj",
      "Amortized Unblended":"cost_amortized_unblended_adj",
      "Unamortized Blended": "cost_nonamortized_blended_adj",
      "Amortized Blended":"cost_amortized_blended_adj"
    }

    var start_at = "";
    var end_at = "";
    var now = new Date();
    //set the start_at and end_at values for the various reports
    if (range === "daily" && scale==="previous"){
      //end_at to end of last week and set time to sunday
      end_at = getFormattedDailyDate(new Date(now.setDate(now.getDate() - now.getDay())))
      // from beginning of last week, get sunday(end_at) and subtract 6
      start_at = getFormattedDailyDate(new Date(now.setDate(now.getDate() - 6)))
    } else if (range === "daily" && scale==="current") {
      // start_at beginning of week
      start_at = getFormattedDailyDate(getMonday(new Date()))
      // end_at to end of week
      end_at = getFormattedDailyDate(new Date(now.setDate((now.getDate() + (6 + (8 - now.getDay())) % 7))))
    } else if (range === "monthly" && scale==="current"){
      // start_at from beginning of this month
      start_at = getFormattedDailyDate(new Date(now.getFullYear(), now.getMonth(), 1))
      // end_at to end of this month
      end_at = getFormattedDailyDate(new Date(now.getFullYear(), now.getMonth() + 1, 0))
    } else if (range === "monthly" && scale==="previous") {
      // start_at from beginning of last month
      start_at = getFormattedDailyDate(new Date(now.getFullYear(), now.getMonth() - 1, 1))
      // end_at to end of last month
      end_at = getFormattedDailyDate(new Date(now.setDate(0)))
    }

    var top_billing_centers = _.reject(billing_centers, function(bc){ return bc.parent_id != null });
    var billing_center_ids = []
    if (param_billing_centers.length === 0){
      billing_center_ids = _.map(top_billing_centers, function(value, key){ return value.id });
    } else {
      // get array of billing center id's that match the names in param_billing_centers.
      billing_center_names = _.map(param_billing_centers, function(name){ return name.toLowerCase(); });
      billing_center_ids = _.compact(_.map(top_billing_centers, function(value){ if(_.contains(billing_center_names, value.name.toLowerCase())){return value.id} }));
    }
    console.log('billing_centers:'+JSON.stringify(billing_centers))
    console.log('billing_centers_ids:'+ billing_center_ids)
        console.log('top_billing_centers:'+ JSON.stringify(top_billing_centers))

    var body = {
      "dimensions":[]
      "granularity":"day",
      "start_at": start_at ,
      "end_at": end_at
      "metrics":[cost_metric[param_cost_metric]],
      "billing_center_ids": billing_center_ids
      }

    var request = {
      auth:  'auth_rs',
      host:  rs_optima_host,
      scheme: 'https',
      verb: 'POST',
      path:  "/bill-analysis/orgs/"+ rs_org_id + "/costs/aggregated",
      headers: {
        "API-Version": "1.0",
        "Content-Type":"application/json"
      },
      body: JSON.stringify(body)
    }
  EOS
end

datasource "ds_report" do
  run_script $js_report,$current_week_costs,$previous_week_costs,$current_month_costs,$previous_month_costs,$param_cost_metric
end

script "js_report", type: "javascript" do
  parameters "current_week_costs","previous_week_costs","current_month_costs","previous_month_costs","param_cost_metric"
  result "report"
  code <<-EOS
      // create a map to use in the request metric field.
      var cost_metric = {
        "Unamortized Unblended":"cost_nonamortized_unblended_adj",
        "Amortized Unblended":"cost_amortized_unblended_adj",
        "Unamortized Blended": "cost_nonamortized_blended_adj",
        "Amortized Blended":"cost_amortized_blended_adj"
      }

      var metric = cost_metric[param_cost_metric]
      var current_week_total = 0.00
      for (var i = 0; i < current_week_costs['rows'].length; i++) {
        var row =  current_week_costs['rows'][i]
        current_week_total += row['metrics'][metric]
      }

      var previous_week_total = 0.00
      for (var i = 0; i < previous_week_costs['rows'].length; i++) {
        var row =  previous_week_costs['rows'][i]
        previous_week_total += row['metrics'][metric]
      }

      var previous_month_total = 0.00
      for (var i = 0; i < previous_month_costs['rows'].length; i++) {
        var row =  previous_month_costs['rows'][i]
        previous_month_total += row['metrics'][metric]
      }

      var current_month_total = 0.00
      for (var i = 0; i < current_month_costs['rows'].length; i++) {
        var row =  current_month_costs['rows'][i]
        current_month_total += row['metrics'][metric]
      }

      var weekly_avg = 0
      if (current_week_costs['rows'].length > 0){
        var days_this_week = current_week_costs['rows'].length
        weekly_avg = (current_week_total + previous_week_total) / (7 + days_this_week)
      }

      var monthly_avg = 0
      if (current_month_costs['rows'].length > 0){
        var days_this_month = current_month_costs['rows'].length
        var days_last_month = previous_month_costs['rows'].length
        monthly_avg = (current_month_total + previous_month_total) / ( days_last_month + days_this_month)
      }

      var weekly_change = 0
      if (current_week_total > 0){
        weekly_change = Number((current_week_total - previous_week_total) / previous_week_total * 100).toFixed(1)
      }
      var monthly_change = 0
      if (current_month_total > 0){
        monthly_change = Number(( current_month_total - previous_month_total) / previous_month_total * 100).toFixed(1)
      }
      var report = [{
        range: 'Weekly',
        current:  Math.round(current_week_total),
        previous: Math.round(previous_week_total),
        avg: Math.round(weekly_avg),
        change: weekly_change
      },
      {
        range: 'Monthly',
        current:  Math.round(current_month_total),
        previous: Math.round(previous_month_total),
        avg: Math.round(monthly_avg),
        change: monthly_change
      },
      ]

  EOS
end

datasource "previous_six_month_costs" do
  request do
   run_script $six_month_cost_request, $param_billing_centers, $param_cost_metric, rs_org_id, rs_optima_host, $billing_centers
  end
end

script "six_month_cost_request", type: "javascript" do
  parameters "param_billing_centers", "param_cost_metric", "rs_org_id", "rs_optima_host", "billing_centers"
  result "request"
  code <<-EOS
    // format the date for the `monthly` API
    // returns date formatted as string: YYYY-mm
    function getFormattedMonthlyDate(date) {
      var year = date.getFullYear();

      var month = (1 + date.getMonth()).toString();
      month = month.length > 1 ? month : '0' + month;

      var day = date.getDate().toString();
      day = day.length > 1 ? day : '0' + day;

      return year + '-' + month ;
    }

    // add months to date
    // returns date object
    function addMonths(date, months) {
      date.setMonth(date.getMonth() + months);
      return date;
    }

    // create a map to use in the request metric field.
    var cost_metric = {
      "Unamortized Unblended":"cost_nonamortized_unblended_adj",
      "Amortized Unblended":"cost_amortized_unblended_adj",
      "Unamortized Blended": "cost_nonamortized_blended_adj",
      "Amortized Blended":"cost_amortized_blended_adj"
    }

    var now = new Date();
    var end_at = getFormattedMonthlyDate(addMonths(now, +1));
    var start_at = getFormattedMonthlyDate(addMonths(now, -6));
    var top_billing_centers = _.reject(billing_centers, function(bc){ return bc.parent_id != null });
    var billing_center_ids = []
    
    if (param_billing_centers.length === 0){
      billing_center_ids = _.map(top_billing_centers, function(value, key){ return value.id });
    } else {
      // get array of billing center id's that match the names in param_billing_centers.
      billing_center_names = _.map(param_billing_centers, function(name){ return name.toLowerCase(); });
      billing_center_ids = _.compact(_.map(top_billing_centers, function(value){ if(_.contains(billing_center_names, value.name.toLowerCase())){return value.id} }));
    }
    console.log('billing_centers:' + JSON.stringify(billing_centers))
    console.log('billing_centers_ids:' + billing_center_ids)
    console.log('top_billing_centers:' + JSON.stringify(top_billing_centers))

    var body = {
      "dimensions":["category"]
      "granularity":"month",
      "start_at": start_at ,
      "end_at": end_at
      "metrics":[cost_metric[param_cost_metric]],
      "billing_center_ids": billing_center_ids
      }

    var request = {
      auth:  'auth_rs',
      host:  rs_optima_host,
      scheme: 'https',
      verb: 'POST',
      path:  "/bill-analysis/orgs/"+ rs_org_id + "/costs/aggregated",
      headers: {
        "API-Version": "1.0",
        "Content-Type":"application/json"
      },
      body: JSON.stringify(body)
    }
  EOS
end


datasource "ds_generated_report" do
  run_script $js_generate_report,$previous_six_month_costs,$param_cost_metric,$param_billing_centers, $ds_report
end

script "js_generate_report", type: "javascript" do
  parameters "previous_six_month_costs","param_cost_metric","param_billing_centers","ds_report"
  result "report"
  code <<-EOS
    // format the date for the `monthly` API
    // returns date formatted as string: YYYY-mm
    function getFormattedMonthlyDate(date) {
      var year = date.getFullYear();

      var month = (1 + date.getMonth()).toString();
      month = month.length > 1 ? month : '0' + month;

      var day = date.getDate().toString();
      day = day.length > 1 ? day : '0' + day;

      return year + '-' + month ;
    }

    // create a map to use in the request metric field.
    var cost_metric = {
      "Unamortized Unblended":"cost_nonamortized_unblended_adj",
      "Amortized Unblended":"cost_amortized_unblended_adj",
      "Unamortized Blended": "cost_nonamortized_blended_adj",
      "Amortized Blended":"cost_amortized_blended_adj"
    };

    var now = new Date();
    var report = {};
    var collated_data = [];
    var current_month_totals = [];
    var metric = cost_metric[param_cost_metric];

    var colorArray = ['D05A5A','F78741','FCC419','007D76','37AA77','92DA71','0F77B3','7BACD1','BCC7E1','B80C83','E06C96','FBB3BB','5F3DC4','00A2F3','99E9F2','5C940D','8EBF45','C0EB75'];
    var longMonthNames = ["None","January","February","March","April","May","June","July","August","September","October","November","December"];
    var shortMonthNames = ["None","Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"];
    var currentMonth = getFormattedMonthlyDate(now);
    var currentMonthName = longMonthNames[parseInt(currentMonth.split('-')[1])];
    
    _.each(previous_six_month_costs["rows"], function(row){
      var yearMonth = row['timestamp'].split('-')[0] + '-' + row['timestamp'].split('-')[1]
      var numberMonth = row['timestamp'].split('-')[1]
      var stringMonth = shortMonthNames[parseInt(numberMonth)]

      collated_data.push({
        stringMonth: stringMonth,
        yearMonth: yearMonth,
        category: row['dimensions']['category'],
        cost: row['metrics'][metric]
      })
    })

    console.log('collated_data:', collated_data)

    // get unique categories
    var categories = _.unique(_.chain(collated_data).map(function(line) {return line.category}).value());
    console.log('categories: ' + categories)

    // get unique dates
    var previousMonths = _.unique(_.chain(collated_data).map(function(line) {return line.yearMonth}).value());
    var stringMonths = _.unique(_.chain(collated_data).map(function(line) {return line.stringMonth}).value());

    // get current month data
    var current_month_costs = (_.where(collated_data, {yearMonth: currentMonth}));
    
    _.each(current_month_costs, function(line){ current_month_totals.push(line.cost)})
    
    var current_month_total = _.reduce(current_month_totals, function(memo, num){ return memo + num; }, 0);

    // build out the chart data
    var chartDataArray = [];
    _.each(categories, function(category){
      var seriesData = [];
      _.each(previousMonths, function(month){
        var tempTotal = _.where(collated_data, {yearMonth: month, category: category});
        if ( tempTotal.length === 0 ) {
          seriesData.push("_")
        } else {
          seriesData.push(Math.round(tempTotal[0].cost))
        }
      })
      chartDataArray.push(seriesData.join())
    })

    var chartData = "chd=a:" + chartDataArray.join('|')
    var encodedCategories = encodeURIComponent(categories.join('|'))//.replace(/%7C/gi,'|');
    var chartCategories = "chdl=" + encodedCategories
    var chartColors = "chco=" + colorArray.slice(0,categories.length).join();
    var chartXAxis = "chxl=0:|" + stringMonths.join('|')
    
    if (param_billing_centers.length === 0){
      var billingCenters = "All";
    } else {
      var billingCenters = param_billing_centers.join()
    }

    report = {
      currentMonthName: currentMonthName,
      billingCenters: billingCenters,
      chartType: "cht=bvs",
      chartSize: "chs=700x400",
      chartTitle: "chtt=Spending+Overview",
      chartAxis: "chxt=x,y",
      chartXAxis: chartXAxis,
      chartData: chartData,
      chartCategories: chartCategories,
      chartColors: chartColors,
      chartExtension: "chof=.png",
      currentSpend:  Math.round(current_month_total),
      reportData: ds_report
    };
  EOS
end


# send report to email list
escalation "send_email" do
  email $param_email
end

policy "scheduled_report" do
  validate $ds_generated_report do
    summary_template "{{ rs_org_name }} (Org ID: {{ rs_org_id }}): Full Cost Scheduled Report"
    detail_template <<-EOS
# Full Cost Report for {{ rs_org_name }} - {{ data.currentMonthName }}

## Billing Centers: {{ data.billingCenters }}
### Cost Metric: {{ parameters.param_cost_metric }}

![Spending Overview Chart](https://image-charts.com/chart?{{ data.chartType }}&{{ data.chartSize }}&{{ data.chartTitle }}&{{ data.chartAxis }}&{{ data.chartXAxis }}&{{ data.chartData }}&{{ data.chartCategories }}&{{ data.chartColors }}&{{ data.chartExtension }} "Spending Overview Chart")

|Range|Daily Average|Previous|Current (incomplete)|
|:---:|------------:|-------:|-------------------:|
{{ range data.reportData -}}
  | {{ .range }} | {{ .avg }} | {{ .previous}} | {{ .current }} |
{{ end -}}

___
###### Policy Applied in Account: {{ rs_project_name }} (Account ID: {{ rs_project_id }})
EOS
    escalate $send_email
    check eq(0,1)
  end
end

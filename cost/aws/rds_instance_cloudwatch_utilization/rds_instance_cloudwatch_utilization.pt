name "AWS Rightsize RDS Instances"
rs_pt_ver 20180301
type "policy"
short_description "Check for Inefficient database services that are inside or outside the CPU threshold for the last 30 days and resizes them after approval. See the [README](https://github.com/flexera/policy_templates/tree/master/cost/aws/rds_instance_cloudwatch_utilization/) and [docs.rightscale.com/policies](https://docs.rightscale.com/policies/) to learn more."
long_description ""
severity "low"
category "Cost"
info(
  version: "2.0",
  provider: "AWS",
  service: "RDS",
  policy_set: "RightSize Database Services"
)

###############################################################################
# Permissions
###############################################################################

permission "perm_read_creds" do
  actions   "rs_cm.show_sensitive","rs_cm.index_sensitive"
  resources "rs_cm.credentials"
end

###############################################################################
# Parameters
###############################################################################

parameter "param_email" do
  type "list"
  label "Email addresses to notify"
  description "Email addresses of the recipients you wish to notify when new incidents are created"
end

parameter "param_avg_cpu_upsize" do
  type "number"
  label "Average used CPU % - Upsize threshold"
  description "Set to -1 to ignore CPU utilization"
  default 80
  min_value -1
  max_value 100
end

parameter "param_avg_cpu_downsize" do
  type "number"
  label "Average used CPU % - Downsize Threshold"
  description "Set to -1 to ignore CPU utilization"
  default 60
  min_value -1
  max_value 100
end

parameter "param_exclusion_tag_key" do
  label "Exclusion Tag Key:Value"
  description "AWS tag key to ignore instances. Format: Key:Value"
  type "string"
end

###############################################################################
# Authentication
###############################################################################

#authenticate with AWS
credentials "auth_aws" do
  schemes "aws","aws_sts"
  label "AWS"
  description "Select the AWS Credential from the list."
  tags "provider=aws"
end

###############################################################################
# Datasources
###############################################################################

#Generates list of Regions
datasource "ds_regions_list" do
  request do
    verb "GET"
    host "raw.githubusercontent.com"
    path "/rightscale/policy_templates/master/data/aws/regions.json"
    header "User-Agent", "RS Policies"
  end
end

datasource "ds_instances_set" do
  iterate $ds_regions_list
  request do
    run_script $js_instances_set, val(iter_item,"region")
  end
  result do
    encoding "xml"
    collect xpath(response, "//DescribeDBInstancesResponse/DescribeDBInstancesResult/DBInstances/DBInstance[*]", "array") do
      field "availabilityZone", xpath(col_item,"AvailabilityZone")
      field "instanceId", xpath(col_item,"DbiResourceId")
      field "dbInstanceArn", xpath(col_item,"DBInstanceArn")
      field "dbInstanceIdentifier", xpath(col_item, "DBInstanceIdentifier")
      field "dbInstanceClass", xpath(col_item, "DBInstanceClass")
      field "engine", xpath(col_item, "Engine")
      field "region", val(iter_item, "region")
    end
  end
end

# get AWS instance size map
datasource "ds_aws_instance_size_map" do
  request do
    verb "GET"
    host "raw.githubusercontent.com"
    path "/flexera/policy_templates/master/data/aws/instance_types.json"
    header "User-Agent", "RS Policies"
  end
end

#get the tags for the rds instance
datasource "ds_list_tags_for_resource" do
  iterate $ds_instances_set
  request do
    run_script $js_list_tags_for_resource, val(iter_item,"dbInstanceArn"), val(iter_item,"region")
  end
  result do
    encoding "xml"
    collect xpath(response, "//ListTagsForResourceResponse/ListTagsForResourceResult/TagList/Tag[*]", "array") do
          field "instanceId", val(iter_item,"instanceId")
          field "key", xpath(col_item, "Key")
          field "value", xpath(col_item, "Value")
    end
  end
end

# get all the RDS instances merged together with the tags and CloudWatch
datasource "ds_instances" do
  run_script $js_instances, $ds_instances_set, $ds_list_tags_for_resource, $param_exclusion_tag_key, $ds_aws_instance_size_map
end

datasource "ds_cloudwatch_cpu_usage" do
  iterate $ds_instances
  request do
    run_script $js_cloudwatch_cpu_mem_usage, val(iter_item, "region"), val(iter_item, "dbInstanceIdentifier"), "CPUUtilization"
  end
  result do
    encoding "json"
    collect jmes_path(response, "GetMetricStatisticsResponse.GetMetricStatisticsResult.Datapoints[*]") do
      field "region", val(iter_item, "region")
      field "instanceId", val(iter_item, "dbInstanceIdentifier")
      field "cpu_unit", jmes_path(col_item,"Unit")
      field "cpu_maximum", jmes_path(col_item, "Maximum")
      field "cpu_minimum", jmes_path(col_item, "Minimum")
      field "cpu_average", jmes_path(col_item, "Average")
    end
  end
end

datasource "ds_merged_metrics" do
  run_script $js_merged_metrics, $ds_instances, $ds_cloudwatch_cpu_usage
end

datasource "ds_filtered_results" do
  run_script $js_filtered_results, $ds_merged_metrics, $param_avg_cpu_downsize, $param_avg_cpu_upsize
end

###############################################################################
# Scripts
###############################################################################

script "js_instances", type: "javascript" do
  result "results"
  parameters "ds_instance_set", "ds_list_tags_for_resource", "param_exclusion_tag_key", "ds_aws_instance_size_map"
  code <<-EOS
  var tag_key = param_exclusion_tag_key.split(':')[0]
  var tag_value = param_exclusion_tag_key.split(':')[1]
  var results = []

  for ( n=0; n < ds_instance_set.length; n++) {
      var instance = ds_instance_set[n]

      var instances_w_tags = _.where(ds_list_tags_for_resource, {instanceId: instance.instanceId})
      var instance_tags = {}
      var tag_set = []
      _.each(instances_w_tags, function(instance){
        tag_set.push(instance.key+':'+instance.value)
      })
      instance_tags[instance.instanceId] = tag_set

      if ( _.contains(instance_tags[instance.instanceId], param_exclusion_tag_key) ){
        continue
      } else {
        var instance_type = instance.dbInstanceClass
        var size_up = ds_aws_instance_size_map[instance_type.toString()]["up"]
        var size_down = ds_aws_instance_size_map[instance_type.toString()]["down"]
        results.push ({
          "region": instance.region,
          "availabilityZone": instance.availabilityZone,
          "dbInstanceArn": instance.dbInstanceArn,
          "dbInstanceIdentifier": instance.dbInstanceIdentifier,
          "dbInstanceClass": instance.dbInstanceClass,
          "engine": instance.engine,
          "upsize": size_up,
          "downsize": size_down
        })
      }

  }
EOS
end

script "js_instances_set", type: "javascript" do
  result "results"
  parameters "region"
  code <<-EOS
  results = {
    "auth": "auth_aws",
    "host": 'rds.'+region+'.amazonaws.com',
    "verb": "GET",
    "path": "/",
    "headers": {
      "User-Agent": "RS Policies",
      "Content-Type": "text/xml"
    }
    "query_params": {
      'Action': 'DescribeDBInstances',
      'Version': '2014-10-31'
    }
  }
EOS
end

script "js_list_tags_for_resource", type: "javascript" do
  result "results"
  parameters "instanceArn","region"
  code <<-EOS
  var end_date = new Date().toISOString()
  var start_date = new Date(new Date().setDate(new Date().getDate() - 30)).toISOString();
  results = {
    "auth": "auth_aws",
    "host": 'rds.'+region+'.amazonaws.com',
    "verb": "GET",
    "path": "/",
    "headers": {
      "User-Agent": "RS Policies",
      "Content-Type": "text/xml"
    }
    "query_params": {
      'Action': 'ListTagsForResource',
      'ResourceName': instanceArn,
      'Version': '2014-10-31'
    }
  }
EOS
end

script "js_cloudwatch_cpu_mem_usage", type: "javascript" do
  result "results"
  parameters "region","instance_id", "MetricName"
  code <<-EOS
  var end_date_tmp = new Date()
  end_date_tmp.setMilliseconds(0)
  end_date_tmp.setSeconds(0)
  end_date_tmp.setMinutes(0)
  var end_date = new Date(end_date_tmp).toISOString()

  var start_date_tmp = new Date(new Date().setDate(new Date().getDate() - 30))
  start_date_tmp.setMilliseconds(0)
  start_date_tmp.setSeconds(0)
  start_date_tmp.setMinutes(0)
  var start_date = new Date(start_date_tmp).toISOString()

  results = {
    "auth": "auth_aws",
    "host": 'monitoring.'+region+'.amazonaws.com',
    "verb": "GET",
    "path": "/",
    "headers": {
      "User-Agent": "RS Policies",
      "Content-Type": "application/json",
      "x-amz-target": "GraniteServiceVersion20100801.GetMetricStatistics",
      "Accept": "application/json",
      "Content-Encoding": "amz-1.0"
    }
    "query_params": {
      'Action': 'GetMetricStatistics',
      'Version': '2010-08-01',
      'Namespace': 'AWS/RDS',
      'MetricName': MetricName,
      'Dimensions.member.1.Name': 'DBInstanceIdentifier',
      'Dimensions.member.1.Value': instance_id,
      'StartTime': start_date,
      'EndTime': end_date,
      'Period': "2592000",
      'Statistics.member.1': 'Maximum',
      'Statistics.member.2': 'Average',
      'Statistics.member.3': 'Minimum'
    }
  }
EOS
end

script "js_merged_metrics", type: "javascript" do
  parameters "ds_instances", "ds_cloudwatch_cpu_usage"
  result "results"
 code <<-EOS
 var results = []

 for (n=0; n < ds_instances.length; n++) {
   var instance = ds_instances[n]
   var dbInstanceIdentifier = instance["dbInstanceIdentifier"]
   //console.log("dbInstanceIdentifier is " + dbInstanceIdentifier)
   for (x=0; x < ds_cloudwatch_cpu_usage.length; x++) {
     var cpu_data=ds_cloudwatch_cpu_usage[x]
     var cpu_instanceid=cpu_data["instanceId"]
     //console.log("cpu_instanceid is " + cpu_instanceid)
     if (dbInstanceIdentifier == cpu_instanceid) {
      var cpu_average=parseFloat(cpu_data["cpu_average"]).toFixed(2)
      //console.log("cpu_average is " + cpu_average)
     }

   }
   results.push (
     {
       "region": instance["region"],
       "availabilityZone": instance["availabilityZone"],
       "dbInstanceArn": instance["dbInstanceArn"],
       "dbInstanceIdentifier": instance["dbInstanceIdentifier"],
       "dbInstanceClass": instance["dbInstanceClass"],
       "engine": instance["engine"],
       "percent_cpu_avg": cpu_average,
       "upsize": instance["upsize"],
       "downsize": instance["downsize"]
     }
   )
 }
EOS
end


script "js_filtered_results", type: "javascript" do
  parameters "ds_merged_metrics", "param_avg_cpu_downsize", "param_avg_cpu_upsize"
  result "results"
  code <<-EOS
  var results = []
  _.each(ds_merged_metrics, function(instance){
    if (instance["percent_cpu_avg"] > param_avg_cpu_upsize){
      if (instance["upsize"] == null){
        // skip
      } else {
        results.push (
          {
            "region": instance["region"],
            "availabilityZone": instance["availabilityZone"],
            "dbInstanceArn": instance["dbInstanceArn"],
            "dbInstanceIdentifier": instance["dbInstanceIdentifier"],
            "dbInstanceClass": instance["dbInstanceClass"],
            "engine": instance["engine"],
            "percent_cpu_avg": instance["percent_cpu_avg"],
            "recommended_size": instance["upsize"]
          }
        )
      }
    }
    if (instance["percent_cpu_avg"] < param_avg_cpu_downsize){
      if (instance["downsize"] == null){
        // skip
      } else {
        results.push (
          {
            "region": instance["region"],
            "availabilityZone": instance["availabilityZone"],
            "dbInstanceArn": instance["dbInstanceArn"],
            "dbInstanceIdentifier": instance["dbInstanceIdentifier"],
            "dbInstanceClass": instance["dbInstanceClass"],
            "engine": instance["engine"],
            "percent_cpu_avg": instance["percent_cpu_avg"],
            "recommended_size": instance["downsize"]
          }
        )
      }
    }
  })

 EOS
end

###############################################################################
# Policy
###############################################################################

policy "pol_utilization" do
  validate $ds_filtered_results do
    summary_template "AWS RDS instances to Resize"
    detail_template <<-EOS
# AWS RDS Instances to Resize

###### Policy Applied in Account: {{ rs_project_name }} (Account ID: {{ rs_project_id }}) within Org: {{ rs_org_name }} (Org ID: {{ rs_org_id }})
EOS
    export do
      field "region" do
        label "Region"
      end
      field "dbInstanceIdentifier" do
        label "instanceID"
      end
      field "engine" do
        label "Engine"
      end
      field "dbInstanceClass" do
        label "Current Instance Class"
      end
      field "recommended_size" do
        label "Recommended Instance Class"
      end
      field "availabilityZone" do
        label "Availability Zone"
      end
      field "percent_cpu_avg" do
        label "CPU Average %"
      end
    end

    check eq(size(data),0)
    escalate $email
    escalate $resize_instances
  end
end


###############################################################################
# Escalations
###############################################################################

escalation "email" do
  email $param_email
end

escalation "resize_instances" do
  request_approval  do
    label "Escalation approval"
    description "Approve RDS RightSizing action"
    parameter "approval_reason" do
      type "string"
      label "Reason for approval"
      description "Explain why you are approving the action"
    end
  end
  run "rightsize_rds", data
end

define rightsize_rds($data) return $all_responses do
  $$debug=true
  $$log = []
  $all_responses = []

  $syslog_subject = "AWS RDS Instances to RightSize: "
  call sys_log(join([$syslog_subject, "Identified Instances"]),to_s($data))
  foreach $item in $data do
    sub on_error: skip do
      $get_response = http_request(
        auth: $$auth_aws,
		https: true,
        verb: "get",
        host: "rds."+$item["region"]+".amazonaws.com",
        href: "/",
        query_strings: {
          "Action": "DescribeDBInstances",
          "Version": "2014-10-31",
          "DBInstanceIdentifier": $item["dbInstanceIdentifier"]
        }
      )
      $all_responses << $get_response

      $state = $get_response["body"]["DescribeDBInstancesResponse"]["DescribeDBInstancesResult"]["DBInstances"]["DBInstance"]["DBInstanceStatus"]

      if $state == "available"
        $modify_response = http_request(
          auth: $$auth_aws,
		  https: true,
          verb: "get",
          host: "rds."+$item["region"]+".amazonaws.com",
          href: "/",
          query_strings: {
            "Action": "ModifyDBInstance",
            "Version": "2014-10-31",
            "DBInstanceIdentifier": $item["dbInstanceIdentifier"],
            "DBInstanceClass": $item["recommended_size"]
          }
        )
        $all_responses << $modify_response
      end
    end
  end
  call sys_log(join([$syslog_subject, "Responses"]),to_s($all_responses))
end

define handle_error($response) do
  $status_code = $response["code"]
  if $status_code == 404
    $_error_behavior = "skip"
  else
    $_error_behavior = "raise"
  end
end

define sys_log($subject, $detail) do
  if $$debug
    rs_cm.audit_entries.create(
      notify: "None",
      audit_entry: {
        auditee_href: @@account,
        summary: $subject,
        detail: $detail
      }
    )
  end
end
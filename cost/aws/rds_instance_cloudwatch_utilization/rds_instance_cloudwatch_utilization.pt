name "AWS Instance CloudWatch Utilization"
rs_pt_ver 20180301
type "policy"
short_description "Gathers AWS CloudWatch data for instances on 30 day intervals. See the [README](https://github.com/rightscale/policy_templates/tree/master/cost/aws/instance_cloudwatch_utilization/) and [docs.rightscale.com/policies](http://docs.rightscale.com/policies/) to learn more."
long_description "Version: 1.4"
severity "low"
category "Cost"

###############################################################################
# Permissions
###############################################################################

permission "perm_read_creds" do
  actions   "rs_cm.show_sensitive","rs_cm.index_sensitive"
  resources "rs_cm.credentials"
end

###############################################################################
# Parameters
###############################################################################

parameter "param_email" do
  type "list"
  label "Email addresses to notify"
  description "Email addresses of the recipients you wish to notify when new incidents are created"
end

parameter "param_avg_used_memory" do
  type "number"
  label "Average used memory percentage"
  description "Set to -1 to ignore memory utilization"
  default 60
  min_value -1
  max_value 100
end

parameter "param_avg_cpu" do
  type "number"
  label "Average used CPU percentage"
  description "Set to -1 to ignore CPU utilization"
  default 60
  min_value -1
  max_value 100
end

parameter "param_exclusion_tag_key" do
  category "User Inputs"
  label "Exclusion Tag Key:Value"
  description "Cloud native tag key to ignore instances. Format: Key:Value"
  type "string"
  allowed_pattern /([\w]?)+\:([\w]?)+/
end

parameter "param_take_action_tag" do
  category "User Inputs"
  label "Action Tag Key:Value"
  description "Cloud native instance tag key and value that will be added to an instance identified for action. Example: downsize:true"
  type "string"
  allowed_pattern /([\w]?)+\:([\w]?)+/
end

###############################################################################
# Authentication
###############################################################################

auth "rds_auth_aws", type: "aws" do
  version 4
  service "rds"
  access_key cred('AWS_ACCESS_KEY_ID')
  secret_key cred('AWS_SECRET_ACCESS_KEY')
end

auth "monitoring_auth_aws", type: "aws" do
  version 4
  service "monitoring"
  access_key cred('AWS_ACCESS_KEY_ID')
  secret_key cred('AWS_SECRET_ACCESS_KEY')
end

###############################################################################
# Datasources
###############################################################################

#Generates list of Regions
datasource "ds_regions_list" do
  request do
    verb "GET"
    host "raw.githubusercontent.com"
    path "/rightscale/policy_templates/master/data/aws/regions.json"
    header "User-Agent", "RS Policies"
  end
end

datasource "ds_instances" do 
  run_script $js_instances, $ds_instances_set, $param_exclusion_tag_key
end

datasource "ds_instances_set" do
  iterate $ds_regions_list
  request do
    run_script $js_instances_set, val(iter_item,"region")
  end
  result do
    encoding "xml"
    collect xpath(response, "//DescribeDBInstancesResponse/DescribeDBInstancesResult", "array") do
      field "instances_set" do
        collect xpath(col_item,"DBInstances/DBInstance","array") do
          field "availabilityZone", xpath(col_item,"AvailabilityZone")
          field "dbInstanceArn", xpath(col_item,"DBInstanceArn")
          field "dbInstanceIdentifier", xpath(col_item, "DBInstanceIdentifier")
          field "dbInstanceClass", xpath(col_item, "DBInstanceClass")
          field "engine", xpath(col_item, "Engine")
          field "region", val(iter_item, "region")
        end
      end
    end
  end
end

datasource "ds_cloudwatch_cpu_usage" do
  iterate $ds_instances
  request do
    run_script $js_cloudwatch_cpu_mem_usage, val(iter_item, "region"), val(iter_item, "dbInstanceIdentifier"), "CPUUtilization"
  end
  result do
    encoding "json"
    collect jmes_path(response, "GetMetricStatisticsResponse.GetMetricStatisticsResult.Datapoints[*]") do
      field "region", val(iter_item, "region")
      field "instanceId", val(iter_item, "dbInstanceIdentifier")
      field "cpu_unit", jmes_path(col_item,"Unit")
      field "cpu_maximum", jmes_path(col_item, "Maximum")
      field "cpu_minimum", jmes_path(col_item, "Minimum")
      field "cpu_average", jmes_path(col_item, "Average")
    end
  end
end

datasource "ds_cloudwatch_mem_usage" do
  iterate $ds_instances
  request do
    run_script $js_cloudwatch_cpu_mem_usage, val(iter_item, "region"), val(iter_item, "dbInstanceIdentifier"), "FreeableMemory"
  end
  result do
    encoding "json"
    collect jmes_path(response, "GetMetricStatisticsResponse.GetMetricStatisticsResult.Datapoints[*]") do
      field "region", val(iter_item, "region")
      field "instanceId", val(iter_item, "dbInstanceIdentifier")
      field "mem_unit", jmes_path(col_item,"Unit")
      field "mem_maximum", jmes_path(col_item, "Maximum")
      field "mem_minimum", jmes_path(col_item, "Minimum")
      field "mem_average", jmes_path(col_item, "Average")
    end
  end
end

# datasource "ds_merged_metrics_orig" do
#   run_script $js_merged_metrics_orig, $ds_cloudwatch_cpu_usage, $ds_cloudwatch_mem_usage
# end

datasource "ds_merged_metrics" do
  run_script $js_merged_metrics, $ds_instances, $ds_cloudwatch_cpu_usage, $ds_cloudwatch_mem_usage
end

###############################################################################
# Scripts
###############################################################################

script "js_instances", type: "javascript" do
  result "results"
  parameters "ds_instance_set", "param_exclusion_tag_key"
  code <<-EOS
  //var tag_key = param_exclusion_tag_key.split(':')[0]
  //var tag_value = param_exclusion_tag_key.split(':')[1]
  var results = []
  for ( n=0; n < ds_instance_set.length; n++) {
    var instance_set = ds_instance_set[n].instances_set
    for ( i=0; i < instance_set.length; i++) {
      var instance = instance_set[i]
      //var tags = instance.tag_set
      //if (_.contains(_.pluck(tags,'key'), tag_key) && _.contains(_.pluck(tags,'value'), tag_value)){
      //  continue
      //}
      //else {
      //  results.push({
      //    "region": instance.region,
      //    "instanceId": instance.instanceId,
      //    "imageId": instance.imageId,
      //    "instanceType": instance.instanceType,
      //    "platform": instance.platform,
      //    "privateDnsName": instance.privateDnsName,
      //    "tag_set": instance.tag_set
      //  })
      //}
      results.push ({
        "region": instance.region,
        "availabilityZone": instance.availabilityZone,
        "dbInstanceArn": instance.dbInstanceArn,
        "dbInstanceIdentifier": instance.dbInstanceIdentifier,
        "dbInstanceClass": instance.dbInstanceClass,
        "engine": instance.engine
      })
    }
  }
EOS
end

script "js_instances_set", type: "javascript" do
  result "results"
  parameters "region"
  code <<-EOS
  results = {
    "auth": "rds_auth_aws",
    "host": 'rds.'+region+'.amazonaws.com',
    "verb": "GET",
    "path": "/",
    "headers": {
      "User-Agent": "RS Policies",
      "Content-Type": "text/xml"
    }
    "query_params": {
      'Action': 'DescribeDBInstances',
      'Version': '2014-10-31'
    }
  }
EOS
end

script "js_cloudwatch_cpu_mem_usage", type: "javascript" do
  result "results"
  parameters "region","instance_id", "MetricName"
  code <<-EOS
  var end_date_tmp = new Date()
  end_date_tmp.setMilliseconds(0)
  end_date_tmp.setSeconds(0)
  end_date_tmp.setMinutes(0)
  var end_date = new Date(end_date_tmp).toISOString()
  
  var start_date_tmp = new Date(new Date().setDate(new Date().getDate() - 30))
  start_date_tmp.setMilliseconds(0)
  start_date_tmp.setSeconds(0)
  start_date_tmp.setMinutes(0)
  var start_date = new Date(start_date_tmp).toISOString()
  
  results = {
    "auth": "monitoring_auth_aws",
    "host": 'monitoring.'+region+'.amazonaws.com',
    "verb": "GET",
    "path": "/",
    "headers": {
      "User-Agent": "RS Policies",
      "Content-Type": "application/json",
      "x-amz-target": "GraniteServiceVersion20100801.GetMetricStatistics",
      "Accept": "application/json",
      "Content-Encoding": "amz-1.0"
    }
    "query_params": {
      'Action': 'GetMetricStatistics',
      'Version': '2010-08-01',
      'Namespace': 'AWS/RDS',
      'MetricName': MetricName,
      'Dimensions.member.1.Name': 'DBInstanceIdentifier',
      'Dimensions.member.1.Value': instance_id,
      'StartTime': start_date,
      'EndTime': end_date,
      'Period': "2592000",
      'Statistics.member.1': 'Maximum',
      'Statistics.member.2': 'Average',
      'Statistics.member.3': 'Minimum'
    }
  }
EOS
end

script "js_merged_metrics_orig", type: "javascript" do
  parameters "ds_cloudwatch_cpu_usage", "ds_cloudwatch_mem_usage"
  result "merged_results"
 code <<-EOS
  var merged_results = []
  for ( i = 0; i < ds_cloudwatch_cpu_usage.length; i++){
    var instance = ds_cloudwatch_cpu_usage[i]
    var instance_id = instance.instanceId
    console.log("instance_id is " + instance.instance_id);
    var mem_usage_record = _.find(ds_cloudwatch_mem_usage, function(record) { return record.instanceId == instance_id; })
    console.log("mem_usage_record is " + mem_usage_record)
      
    if (mem_usage_record != null && mem_usage_record !== undefined) {
      var mem_maximum = parseFloat(mem_usage_record.mem_maximum).toFixed(2)
      var mem_average = parseFloat(mem_usage_record.mem_average).toFixed(2)
      var mem_minimum = parseFloat(mem_usage_record.mem_minimum).toFixed(2)
    } else {
      var mem_maximum = "101"
      var mem_average = "101"
      var mem_minimum = "101"
    }
    
    merged_results.push(
      {
        "availabilityZone": instance.availabilityZone,
        "dbInstanceArn": instance.dbInstanceArn,
        "dbInstanceIdentifier": instance.dbInstanceIdentifier,
        "dbInstanceClass": instance.dbInstanceClass,
        "engine": instance.engine,
        //"tag_set": instance.tag_set,
        "cpu_minimum": parseFloat(instance.cpu_minimum).toFixed(2),
        "cpu_maximum": parseFloat(instance.cpu_maximum).toFixed(2),
        "cpu_average": parseFloat(instance.cpu_average).toFixed(2),
        "mem_maximum": mem_maximum,
        "mem_minimum": mem_minimum,
        "mem_average": mem_average
      }
    )
  }
EOS
end

script "js_merged_metrics", type: "javascript" do
  parameters "ds_instances", "ds_cloudwatch_cpu_usage", "ds_cloudwatch_mem_usage"
  result "results"
 code <<-EOS
 var results = []

 for (n=0; n < ds_instances.length; n++) {
   var instance = ds_instances[n]
   var dbInstanceIdentifier = instance["dbInstanceIdentifier"]
   //console.log("dbInstanceIdentifier is " + dbInstanceIdentifier)
   for (x=0; x < ds_cloudwatch_cpu_usage.length; x++) {
     var cpu_data=ds_cloudwatch_cpu_usage[x]     
     var cpu_instanceid=cpu_data["instanceId"]     
     //console.log("cpu_instanceid is " + cpu_instanceid)
     if (dbInstanceIdentifier == cpu_instanceid) {
      var cpu_average=parseFloat(cpu_data["cpu_average"]).toFixed(2)
      //console.log("cpu_average is " + cpu_average)
      for (y=0; y < ds_cloudwatch_mem_usage.length; y++) {
        var mem_data=ds_cloudwatch_mem_usage[y]
        var mem_instanceid=mem_data["instanceId"]
        //console.log("mem_instanceid is " + mem_instanceid)
        if (dbInstanceIdentifier == mem_instanceid) {
          var mem_average=parseFloat(mem_data["mem_average"]).toFixed(2)
          //console.log("mem_average is " + mem_average)
        }
      }
     }
     
   }
   results.push (
     {
       "region": instance["region"],
       "availabilityZone": instance["availabilityZone"],
       "dbInstanceArn": instance["dbInstanceArn"],
       "dbInstanceIdentifier": instance["dbInstanceIdentifier"],
       "dbInstanceClass": instance["dbInstanceClass"],
       "engine": instance["engine"],
       "percent_cpu_avg": cpu_average,
       "free_bytes_mem_avg": mem_average
     }
   )
 }
EOS
end

###############################################################################
# Policy
###############################################################################

policy "pol_utilization" do
  validate_each $ds_merged_metrics do
    summary_template "{{ rs_project_name }} (Account ID: {{ rs_project_id }}): {{ len data }} rows containing AWS instance CloudWatch utilization data"
    detail_template <<-EOS
# AWS Instance Utilization
| Region | instanceID | Engine | Class | Availability Zone | CPU Average % | Memory Bytes Free |
| ------ | ---------- | -------- | -------- | ---------------- | ------------- | ------------- |
{{ range data -}}
| {{.region}} | {{.dbInstanceIdentifier}} | {{.engine}} | {{.dbInstanceClass}} |  {{.availabilityZone }} | {{ .percent_cpu_avg }} | {{ .free_bytes_mem_avg }} |
{{ end -}}

###### Policy Applied in Account: {{ rs_project_name }} (Account ID: {{ rs_project_id }}) within Org: {{ rs_org_name }} (Org ID: {{ rs_org_id }})
EOS
    escalate $email
    check false
    # escalate $tag_resources
    # check logic_or(eq($param_avg_used_memory, -1), gt(to_n(val(item,"mem_average")), $param_avg_used_memory))
    # check logic_or(eq($param_avg_cpu, -1), gt(to_n(val(item,"cpu_average")),$param_avg_cpu))
  end
end


###############################################################################
# Escalations
###############################################################################

escalation "email" do
  email $param_email
end

# escalation "tag_resources" do
#   run "tag_resources", data, $param_take_action_tag
# end

###############################################################################
# Cloud Workflow
###############################################################################

define tag_resources($data, $param_take_action_tag) return $all_responses do
  $$debug=true
  $$log = []
  $all_responses = []
  $key = first(split($param_take_action_tag,':'))
  $value = last(split($param_take_action_tag,':'))

  $syslog_subject = "AWS Instance Utilization with CloudWatch: "
  call sys_log(join([$syslog_subject, "Identified Instances"]),to_s($data))
  foreach $item in $data do
    $response = http_request(
      https: true,
      verb: "post",
      host: "ec2."+$item["region"]+".amazonaws.com",
      signature: { "type": "aws" },
      query_strings: {
        "Action": "CreateTags",
        "Version": "2012-06-01",
        "ResourceId.1": $item["instanceId"],
        "Tag.1.Key": $key,
        "Tag.1.Value": $value
      }
    )
    $all_responses << $response
  end
  call sys_log(join([$syslog_subject, "Responses"]),to_s($all_responses))
end

define handle_error($response) do 
  $status_code = $response["code"]
  if $status_code == 404
    $_error_behavior = "skip"
  else 
    $_error_behavior = "raise"
  end 
end 

define sys_log($subject, $detail) do
  if $$debug
    rs_cm.audit_entries.create(
      notify: "None",
      audit_entry: {
        auditee_href: @@account,
        summary: $subject,
        detail: $detail
      }
    )
  end
end
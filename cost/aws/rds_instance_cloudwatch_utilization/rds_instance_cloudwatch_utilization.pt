name "AWS Rightsize RDS Instances"
rs_pt_ver 20180301
type "policy"
short_description "Check for Inefficient database services that are inside or outside the CPU threshold for the last 30 days and resizes them after approval. See the [README](https://github.com/flexera-public/policy_templates/tree/master/cost/aws/rds_instance_cloudwatch_utilization/) and [docs.flexera.com/flexera/EN/Automation](https://docs.flexera.com/flexera/EN/Automation/AutomationGS.htm) to learn more."
long_description ""
severity "low"
category "Cost"
default_frequency "daily"
info(
  version: "3.1",
  provider: "AWS",
  service: "RDS",
  policy_set: "RightSize Database Services"
)

###############################################################################
# Parameters
###############################################################################

parameter "param_allowed_regions_allow_or_deny" do
  type "string"
  label "Allow/Deny Regions"
  description "Allow or Deny entered regions. See the README for more details"
  allowed_values "Allow", "Deny"
  default "Allow"
end

parameter "param_allowed_regions" do
  type "list"
  label "Regions"
  allowed_pattern /^([a-zA-Z-_]+-[a-zA-Z0-9-_]+-[0-9-_]+,*|)+$/
  description "A list of allowed or denied regions. See the README for more details"
end

parameter "param_email" do
  type "list"
  label "Email addresses to notify"
  description "Email addresses of the recipients you wish to notify when new incidents are created"
end

parameter "param_aws_account_number" do
  type "string"
  label "Account Number"
  description "The account number for AWS STS Cross Account Roles."
  default ""
end

parameter "param_avg_cpu_upsize" do
  type "number"
  label "Average used CPU % - Upsize threshold"
  description "Set to -1 to ignore CPU utilization"
  default 80
  min_value -1
  max_value 100
end

parameter "param_avg_cpu_downsize" do
  type "number"
  label "Average used CPU % - Downsize Threshold"
  description "Set to -1 to ignore CPU utilization"
  default 60
  min_value -1
  max_value 100
end

parameter "param_exclusion_tag_key" do
  label "Exclusion Tag Key:Value"
  description "AWS tag key to ignore instances. Format: Key:Value"
  type "string"
end

parameter "param_automatic_action" do
  type "list"
  label "Automatic Actions"
  description "When this value is set, this policy will automatically take the selected action(s)"
  allowed_values ["Resize Instances"]
end

parameter "param_log_to_cm_audit_entries" do
  type "string"
  label "Log to CM Audit Entries"
  description "Boolean for whether or not to log any debugging information from actions to CM Audit Entries, this should be left set to No on Flexera EU"
  default "No"
  allowed_values "Yes", "No"
end

###############################################################################
# Authentication
###############################################################################

#authenticate with AWS
credentials "auth_aws" do
  schemes "aws","aws_sts"
  label "AWS"
  description "Select the AWS Credential from the list."
  tags "provider=aws"
  aws_account_number $param_aws_account_number
end

credentials "auth_flexera" do
  schemes "oauth2"
  label "flexera"
  description "Select Flexera One OAuth2 credentials."
  tags "provider=flexera"
end

###############################################################################
# Datasources
###############################################################################

datasource "ds_get_caller_identity" do
  request do
    auth $auth_aws
    verb "GET"
    host "sts.amazonaws.com"
    path "/"
    header "User-Agent", "RS Policies"
    query "Action", "GetCallerIdentity"
    query "Version", "2011-06-15"
  end
  result do
    encoding "xml"
    collect xpath(response, "//GetCallerIdentityResponse/GetCallerIdentityResult") do
      field "account",xpath(col_item, "Account")
    end
  end
end

datasource "ds_billing_centers" do
  request do
    auth $auth_flexera
    host rs_optima_host
    path join(["/analytics/orgs/", rs_org_id, "/billing_centers"])
    header "Api-Version", "1.0"
    header "User-Agent", "RS Policies"
    query "view", "allocation_table"
    ignore_status [403]
  end
  result do
    encoding "json"
    collect jmes_path(response, "[*]") do
      field "href", jmes_path(col_item, "href")
      field "id", jmes_path(col_item, "id")
      field "name", jmes_path(col_item, "name")
      field "parent_id", jmes_path(col_item, "parent_id")
    end
  end
end

datasource "ds_top_level_billing_centers" do
  run_script $js_top_level_bc, $ds_billing_centers
end

datasource "ds_account_name" do
  request do
    run_script $js_get_account_name, $ds_get_caller_identity, $ds_top_level_billing_centers, rs_org_id, rs_optima_host
  end
  result do
    encoding "json"
    collect jmes_path(response, "rows[*]") do
      field "vendor_account_name", jmes_path(col_item, "dimensions.vendor_account_name")
    end
  end
end

# ds_region_list is a list of regions that are opted-in or opt-in-not-required
datasource "ds_regions_list" do
  # https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DescribeRegions.html
  request do
    auth $auth_aws
    verb "GET"
    host "ec2.amazonaws.com"
    path "/"
    query "Action", "DescribeRegions"
    query "Version", "2016-11-15"
    query "Filter.1.Name", "opt-in-status"
    query "Filter.1.Value.1", "opt-in-not-required"
    query "Filter.1.Value.2", "opted-in"
  end
  result do
    encoding "xml"
    collect xpath(response, "//DescribeRegionsResponse/regionInfo/item", "array") do
      field "region", xpath(col_item, "regionName")
    end
  end
end

# Get only SCP enabled regions
datasource "ds_regions" do
  run_script $js_regions, $param_allowed_regions, $ds_regions_list, $param_allowed_regions_allow_or_deny
end

datasource "ds_instances_set" do
  iterate $ds_regions
  request do
    run_script $js_instances_set, val(iter_item,"region")
  end
  result do
    encoding "xml"
    collect xpath(response, "//DescribeDBInstancesResponse/DescribeDBInstancesResult/DBInstances/DBInstance[*]", "array") do
      field "availabilityZone", xpath(col_item,"AvailabilityZone")
      field "instanceId", xpath(col_item,"DbiResourceId")
      field "dbInstanceArn", xpath(col_item,"DBInstanceArn")
      field "dbInstanceIdentifier", xpath(col_item, "DBInstanceIdentifier")
      field "dbInstanceClass", xpath(col_item, "DBInstanceClass")
      field "engine", xpath(col_item, "Engine")
      field "engineVersion", xpath(col_item, "EngineVersion")
      field "region", val(iter_item, "region")
    end
  end
end

# get AWS instance size map
datasource "ds_aws_instance_size_map" do
  request do
    verb "GET"
    host "raw.githubusercontent.com"
    path "/flexera/policy_templates/master/data/aws/instance_types.json"
    header "User-Agent", "RS Policies"
  end
end

#get the tags for the rds instance
datasource "ds_list_tags_for_resource" do
  iterate $ds_instances_set
  request do
    run_script $js_list_tags_for_resource, val(iter_item,"dbInstanceArn"), val(iter_item,"region")
  end
  result do
    encoding "xml"
    collect xpath(response, "//ListTagsForResourceResponse/ListTagsForResourceResult/TagList/Tag[*]", "array") do
          field "instanceId", val(iter_item,"instanceId")
          field "key", xpath(col_item, "Key")
          field "value", xpath(col_item, "Value")
    end
  end
end

# get all the RDS instances merged together with the tags and CloudWatch
datasource "ds_instances" do
  run_script $js_instances, $ds_instances_set, $ds_list_tags_for_resource, $param_exclusion_tag_key, $ds_aws_instance_size_map
end

datasource "ds_cloudwatch_cpu_usage" do
  iterate $ds_instances
  request do
    run_script $js_cloudwatch_cpu_mem_usage, val(iter_item, "region"), val(iter_item, "dbInstanceIdentifier"), "CPUUtilization"
  end
  result do
    encoding "json"
    collect jmes_path(response, "GetMetricStatisticsResponse.GetMetricStatisticsResult.Datapoints[*]") do
      field "region", val(iter_item, "region")
      field "instanceId", val(iter_item, "dbInstanceIdentifier")
      field "cpu_unit", jmes_path(col_item,"Unit")
      field "cpu_maximum", jmes_path(col_item, "Maximum")
      field "cpu_minimum", jmes_path(col_item, "Minimum")
      field "cpu_average", jmes_path(col_item, "Average")
    end
  end
end

datasource "ds_merged_metrics" do
  run_script $js_merged_metrics, $ds_instances, $ds_cloudwatch_cpu_usage
end

datasource "ds_filtered_results" do
  run_script $js_filtered_results, $ds_merged_metrics, $param_avg_cpu_downsize, $param_avg_cpu_upsize, $ds_get_caller_identity, $ds_account_name
end

###############################################################################
# Scripts
###############################################################################

script "js_regions", type:"javascript" do
  parameters "user_entered_regions", "all_regions", "regions_allow_or_deny"
  result "regions"
  code <<-EOS
    if(_.isEmpty(user_entered_regions)){
      regions = all_regions;
    }else{
      //Filter unique regions
      var uniqueRegions = _.uniq(user_entered_regions);
      var all_regions_list = [];
      //Filter and remove denied regions from all_regions
      if (regions_allow_or_deny == "Deny"){
        var all_regions = all_regions.filter(function(obj){
          return user_entered_regions.indexOf(obj.region) === -1;
        });
      }
      all_regions.forEach(function(all_region){
        all_regions_list.push(all_region.region)
      })

      //Filter valid regions
      var valid_regions = [];
      _.map(uniqueRegions, function(uniqueRegion){
        if(all_regions_list.indexOf(uniqueRegion) > -1){
          valid_regions.push({"region": uniqueRegion})
        }
      })

      //Throw an error if no valid regions found
      if (_.isEmpty(valid_regions)) {
        regions = all_regions;
      }else{
        regions = valid_regions
      }
    }
  EOS
end

script "js_instances", type: "javascript" do
  result "results"
  parameters "ds_instance_set", "ds_list_tags_for_resource", "param_exclusion_tag_key", "ds_aws_instance_size_map"
  code <<-EOS
  var tag_key = param_exclusion_tag_key.split(':')[0]
  var tag_value = param_exclusion_tag_key.split(':')[1]
  var results = []

  for ( n=0; n < ds_instance_set.length; n++) {
      var instance = ds_instance_set[n]

      var instances_w_tags = _.where(ds_list_tags_for_resource, {instanceId: instance.instanceId})
      var instance_tags = {}
      var tag_set = []
      _.each(instances_w_tags, function(instance){
        tag_set.push(instance.key+':'+instance.value)
      })
      instance_tags[instance.instanceId] = tag_set

      if ( _.contains(instance_tags[instance.instanceId], param_exclusion_tag_key) ){
        continue
      } else {
        var instance_type = instance.dbInstanceClass
        if(ds_aws_instance_size_map[instance_type.toString()] !== undefined && ds_aws_instance_size_map[instance_type.toString()] != null){
          var size_up = ds_aws_instance_size_map[instance_type.toString()]["up"]
          var size_down = ds_aws_instance_size_map[instance_type.toString()]["down"]
        } else {
          var size_up = "N/A"
          var size_down = "N/A"
        }
        results.push ({
          "region": instance.region,
          "availabilityZone": instance.availabilityZone,
          "dbInstanceArn": instance.dbInstanceArn,
          "dbInstanceIdentifier": instance.dbInstanceIdentifier,
          "dbInstanceClass": instance.dbInstanceClass,
          "engine": instance.engine,
          "engineVersion": instance["engineVersion"],
          "upsize": size_up,
          "downsize": size_down
        })
      }

  }
EOS
end

script "js_instances_set", type: "javascript" do
  result "results"
  parameters "region"
  code <<-EOS
  results = {
    "auth": "auth_aws",
    "host": 'rds.'+region+'.amazonaws.com',
    "verb": "GET",
    "path": "/",
    "headers": {
      "User-Agent": "RS Policies",
      "Content-Type": "text/xml"
    }
    "query_params": {
      'Action': 'DescribeDBInstances',
      'Version': '2014-10-31'
    }
  }
EOS
end

script "js_list_tags_for_resource", type: "javascript" do
  result "results"
  parameters "instanceArn","region"
  code <<-EOS
  var end_date = new Date().toISOString()
  var start_date = new Date(new Date().setDate(new Date().getDate() - 30)).toISOString();
  results = {
    "auth": "auth_aws",
    "host": 'rds.'+region+'.amazonaws.com',
    "verb": "GET",
    "path": "/",
    "headers": {
      "User-Agent": "RS Policies",
      "Content-Type": "text/xml"
    }
    "query_params": {
      'Action': 'ListTagsForResource',
      'ResourceName': instanceArn,
      'Version': '2014-10-31'
    }
  }
EOS
end

script "js_cloudwatch_cpu_mem_usage", type: "javascript" do
  result "results"
  parameters "region","instance_id", "MetricName"
  code <<-EOS
  var end_date_tmp = new Date()
  end_date_tmp.setMilliseconds(0)
  end_date_tmp.setSeconds(0)
  end_date_tmp.setMinutes(0)
  var end_date = new Date(end_date_tmp).toISOString()

  var start_date_tmp = new Date(new Date().setDate(new Date().getDate() - 30))
  start_date_tmp.setMilliseconds(0)
  start_date_tmp.setSeconds(0)
  start_date_tmp.setMinutes(0)
  var start_date = new Date(start_date_tmp).toISOString()

  results = {
    "auth": "auth_aws",
    "host": 'monitoring.'+region+'.amazonaws.com',
    "verb": "GET",
    "path": "/",
    "headers": {
      "User-Agent": "RS Policies",
      "Content-Type": "application/json",
      "x-amz-target": "GraniteServiceVersion20100801.GetMetricStatistics",
      "Accept": "application/json",
      "Content-Encoding": "amz-1.0"
    }
    "query_params": {
      'Action': 'GetMetricStatistics',
      'Version': '2010-08-01',
      'Namespace': 'AWS/RDS',
      'MetricName': MetricName,
      'Dimensions.member.1.Name': 'DBInstanceIdentifier',
      'Dimensions.member.1.Value': instance_id,
      'StartTime': start_date,
      'EndTime': end_date,
      'Period': "2592000",
      'Statistics.member.1': 'Maximum',
      'Statistics.member.2': 'Average',
      'Statistics.member.3': 'Minimum'
    }
  }
EOS
end

script "js_merged_metrics", type: "javascript" do
  parameters "ds_instances", "ds_cloudwatch_cpu_usage"
  result "results"
  code <<-EOS
  var results = []

  for (n = 0; n < ds_instances.length; n++) {
    var instance = ds_instances[n]
    var dbInstanceIdentifier = instance["dbInstanceIdentifier"]
    //console.log("dbInstanceIdentifier is " + dbInstanceIdentifier)
    for (x = 0; x < ds_cloudwatch_cpu_usage.length; x++) {
      var cpu_data = ds_cloudwatch_cpu_usage[x]
      var cpu_instanceid = cpu_data["instanceId"]
      //console.log("cpu_instanceid is " + cpu_instanceid)
      if (dbInstanceIdentifier == cpu_instanceid) {
        var cpu_average = parseFloat(cpu_data["cpu_average"]).toFixed(2)
        //console.log("cpu_average is " + cpu_average)
      }
    }

    results.push(
      {
        "region": instance["region"],
        "availabilityZone": instance["availabilityZone"],
        "dbInstanceArn": instance["dbInstanceArn"],
        "dbInstanceIdentifier": instance["dbInstanceIdentifier"],
        "dbInstanceClass": instance["dbInstanceClass"],
        "engine": instance["engine"],
        "engineVersion": instance["engineVersion"],
        "percent_cpu_avg": cpu_average,
        "upsize": instance["upsize"],
        "downsize": instance["downsize"]
      }
    )
  }
EOS
end

script "js_top_level_bc", type: "javascript" do
  parameters "billing_centers"
  result "filtered_billing_centers"
  code <<-EOS
  var filtered_billing_centers =
    _.reject(billing_centers, function(bc){ return bc.parent_id != null });
EOS
end

script "js_get_account_name", type: "javascript" do
  parameters "account_id", "billing_centers", "org", "optima_host"
  result "request"
  code <<-EOS
    // returns date formatted as string: YYYY-mm-dd
    function getFormattedDailyDate(date) {
      var year = date.getFullYear();
      var month = (1 + date.getMonth()).toString();
      month = month.length > 1 ? month : '0' + month;
      var day = date.getDate().toString();
      day = day.length > 1 ? day : '0' + day;
      return year + '-' + month + '-' + day;
    }
    var start_date = getFormattedDailyDate(new Date(new Date().setDate(new Date().getDate() - 3)));
    var end_date = getFormattedDailyDate(new Date(new Date().setDate(new Date().getDate() - 2)));
    var request = {
      auth: "auth_flexera",
      host: optima_host,
      verb: "POST",
      path: "/bill-analysis/orgs/" + org + "/costs/select",
      body_fields: {
        "dimensions": ["vendor_account_name"],
        "granularity": "day",
        "start_at": start_date,
        "end_at": end_date,
        "metrics": ["cost_nonamortized_unblended_adj"],
        "billing_center_ids": _.compact(_.map(billing_centers, function(value){ return value.id})),
        "limit": 1,
        "filter": {
          "dimension": "vendor_account",
          "type": "equal",
          "value": account_id[0]["account"]
        }
      },
      headers: {
        "User-Agent": "RS Policies",
        "Api-Version": "1.0"
      },
      ignore_status: [400]
    }
  EOS
end

script "js_filtered_results", type: "javascript" do
  parameters "ds_merged_metrics", "param_avg_cpu_downsize", "param_avg_cpu_upsize", "ds_get_caller_identity", "ds_account_name"
  result "results"
  code <<-EOS
  var results = []
  accountName = ""
  if (ds_account_name[0] != null) {
    accountName = ds_account_name[0]['vendor_account_name']
  }
  _.each(ds_merged_metrics, function (instance) {
    var res = {
      "accountId": ds_get_caller_identity[0]['account'],
      "accountName": accountName,
      "region": instance["region"],
      "availabilityZone": instance["availabilityZone"],
      "dbInstanceArn": instance["dbInstanceArn"],
      "dbInstanceIdentifier": instance["dbInstanceIdentifier"],
      "dbInstanceClass": instance["dbInstanceClass"],
      "databaseEngine": instance["engine"],
      "engineVersion": instance["engineVersion"],
      "percent_cpu_avg": instance["percent_cpu_avg"],
      "lookbackPeriod": '30 days',
    };

    if (instance["percent_cpu_avg"] > param_avg_cpu_upsize && instance["upsize"] != null) {
      res["recommended_size"] = instance["upsize"]
      res["threshold"] = "> " + param_avg_cpu_upsize
      results.push(res)
    }
    if (instance["percent_cpu_avg"] < param_avg_cpu_downsize && instance["downsize"] != null) {
      res["recommended_size"] = instance["downsize"]
      res["threshold"] = "< " + param_avg_cpu_downsize
      results.push(res)
    }
  })
  results = _.sortBy(results, 'region');
EOS
end

###############################################################################
# Policy
###############################################################################

policy "pol_utilization" do
  validate $ds_filtered_results do
    summary_template "AWS Account ID: {{with index data 0}}{{ .accountId }}{{end}} - {{ len data }} AWS RDS instances with inefficient utilization"
    check eq(size(data),0)
    escalate $email
    escalate $resize_instances
    export do
      resource_level true
      field "accountID" do
        label "Account Id"
        path "accountId"
      end
      field "accountName" do
        label "Account Name"
      end
      field "region" do
        label "Region"
      end
      field "id" do
        label "Instance Id"
        path "dbInstanceIdentifier"
      end
      field "platform" do
        label "Platform"
        path "databaseEngine"
      end
      field "resourceType" do
        label "Current Instance Class"
        path "dbInstanceClass"
      end
      field "newResourceType" do
        label "Recommended Instance Class"
        path "recommended_size"
      end
      field "availabilityZone" do
        label "Availability Zone"
      end
      field "cpuAverage" do
        label "CPU Average %"
        path "percent_cpu_avg"
      end
      field "lookbackPeriod" do
        label "Lookback Period"
      end
      field "databaseEngine" do
        label "Database Engine"
      end
      field "engineVersion" do
        label "Engine Version"
      end
      field "threshold" do
        label "CPU Threshold"
      end
    end
  end
end


###############################################################################
# Escalations
###############################################################################

escalation "email" do
  automatic true
  label "Send Email"
  description "Send incident email"
  email $param_email
end

###############################################################################
# Cloud Workflow
###############################################################################

escalation "resize_instances" do
  automatic contains($param_automatic_action, "Resize Instances")
  label "Update Instance"
  description "Approve selected RDS RightSizing"
  run "rightsize_rds", data, $param_log_to_cm_audit_entries, rs_optima_host
end

define rightsize_rds($data,$param_log_to_cm_audit_entries, $$rs_optima_host) return $all_responses do
  $$debug = $param_log_to_cm_audit_entries == "Yes"
  $$log = []
  $all_responses = []

  $syslog_subject = "AWS RDS Instances to RightSize: "
  call sys_log(join([$syslog_subject, "Identified Instances"]),to_s($data))
  foreach $item in $data do
    sub on_error: skip do
      $get_response = http_request(
        auth: $$auth_aws,
        https: true,
        verb: "get",
        host: "rds."+$item["region"]+".amazonaws.com",
        href: "/",
        query_strings: {
          "Action": "DescribeDBInstances",
          "Version": "2014-10-31",
          "DBInstanceIdentifier": $item["id"]
        }
      )
      $all_responses << $get_response

      $state = $get_response["body"]["DescribeDBInstancesResponse"]["DescribeDBInstancesResult"]["DBInstances"]["DBInstance"]["DBInstanceStatus"]

      if $state == "available"
        $modify_response = http_request(
          auth: $$auth_aws,
          https: true,
          verb: "get",
          host: "rds."+$item["region"]+".amazonaws.com",
          href: "/",
          query_strings: {
            "Action": "ModifyDBInstance",
            "Version": "2014-10-31",
            "DBInstanceIdentifier": $item["id"],
            "DBInstanceClass": $item["recommended_size"]
          }
        )
        $all_responses << $modify_response
      end
    end
  end
  call sys_log(join([$syslog_subject, "Responses"]),to_s($all_responses))
end

define handle_error($response) do
  $status_code = $response["code"]
  if $status_code == 404
    $_error_behavior = "skip"
  else
    $_error_behavior = "raise"
  end
end

define sys_log($subject, $detail) do
  # Create empty errors array if doesn't already exist
  if !$$errors
    $$errors = []
  end
  # Check if debug is enabled
  if $$debug
    # Append to global $$errors
    # This is the suggested way to capture errors
    $$errors << "Unexpected error for " + $subject + "\n  " + to_s($detail)
    # If Flexera NAM Zone, create audit_entries [to be deprecated]
    # This is the legacy method for capturing errors and only supported on Flexera NAM
    if $$rs_optima_host == "api.optima.flexeraeng.com"
      # skip_error_and_append is used to catch error if rs_cm.audit_entries.create fails unexpectedly
      $task_label = "Creating audit entry for " + $subject
      sub task_label: $task, on_error: skip_error_and_append($task) do
        rs_cm.audit_entries.create(
          notify: "None",
          audit_entry: {
            auditee_href: @@account,
            summary: $subject,
            detail: $detail
          }
        )
      end # End sub on_error
    end # End if rs_optima_host
  end # End if debug is enabled
end

define skip_error_and_append($subject) do
  $$errors << "Unexpected error for " + $subject + "\n  " + to_s($_error)
  $_error_behavior = "skip"
end

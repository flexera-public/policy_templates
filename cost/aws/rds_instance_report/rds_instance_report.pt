name "AWS Rightsize RDS Instances"
rs_pt_ver 20180301
type "policy"
short_description "Collects all RDS instances in an account. See the [README](https://github.com/flexera/policy_templates/tree/master/cost/aws/rds_instance_report/) and [docs.rightscale.com/policies](https://docs.rightscale.com/policies/) to learn more."
long_description ""
severity "low"
category "Cost"
info(
  version: "2.0",
  provider: "AWS",
  service: "RDS",
  policy_set: "RightSize Database Services"
)

###############################################################################
# Permissions
###############################################################################

permission "perm_read_creds" do
  actions   "rs_cm.show_sensitive","rs_cm.index_sensitive"
  resources "rs_cm.credentials"
end

###############################################################################
# Parameters
###############################################################################

parameter "param_email" do
  type "list"
  label "Email addresses to notify"
  description "Email addresses of the recipients you wish to notify when new incidents are created"
end

###############################################################################
# Authentication
###############################################################################

#authenticate with AWS
credentials "auth_aws" do
  schemes "aws","aws_sts"
  label "AWS"
  description "Select the AWS Credential from the list."
  tags "provider=aws"
end

###############################################################################
# Datasources
###############################################################################

#Generates list of Regions
datasource "ds_regions_list" do
  request do
    verb "GET"
    host "raw.githubusercontent.com"
    path "/rightscale/policy_templates/master/data/aws/regions.json"
    header "User-Agent", "RS Policies"
  end
end

datasource "ds_instances_set" do
  iterate $ds_regions_list
  #request do
  #  run_script $js_instances_set, val(iter_item,"region")
  #end
  request do
    auth $auth_aws
    host join(["rds.", val(iter_item, "region"), ".amazonaws.com"])
    path "/"
    header "User-Agent", "RS Policies"
    header "Content-Type", "text/xml"
    query 'Action': 'DescribeDBInstances',
    query 'Version': '2014-10-31'
  end
  result do
    encoding "xml"
    collect xpath(response, "//DescribeDBInstancesResponse/DescribeDBInstancesResult/DBInstances/DBInstance[*]", "array") do
      field "availabilityZone", xpath(col_item,"AvailabilityZone")
      field "instanceId", xpath(col_item,"DbiResourceId")
      field "dbInstanceArn", xpath(col_item,"DBInstanceArn")
      field "dbInstanceIdentifier", xpath(col_item, "DBInstanceIdentifier")
      field "dbInstanceClass", xpath(col_item, "DBInstanceClass")
      field "engine", xpath(col_item, "Engine")
      field "engineVersion", xpath(col_item, "EngineVersion")
      field "region", val(iter_item, "region")
      field "processorFeatures", xpath(col_item, "ProcessorFeatures")
      field "licenseModel", xpath(col_item, "LicenseModel")
    end
  end
end

datasource "ds_aws_instance_size_map" do
  request do
    verb "GET"
    host "raw.githubusercontent.com"
    #path "/flexera/policy_templates/master/data/aws/instance_types.json"
    path "/flexera/policy_templates/master/data/aws/instance_types.json"
    header "User-Agent", "RS Policies"
  end
end

datasource "ds_filtered_results" do
  run_script $js_filtered_results, $ds_instances_set, $ds_aws_instance_size_map
end

###############################################################################
# Scripts
###############################################################################

script "js_instances_set", type: "javascript" do
  result "results"
  parameters "region"
  code <<-EOS
  results = {
    "auth": "auth_aws",
    "host": 'rds.'+region+'.amazonaws.com',
    "verb": "GET",
    "path": "/",
    "headers": {
      "User-Agent": "RS Policies",
      "Content-Type": "text/xml"
    }
    "query_params": {
      'Action': 'DescribeDBInstances',
      'Version': '2014-10-31'
    }
  }
EOS
end

script "js_filtered_results", type: "javascript" do
  parameters "ds_instances_set", "ds_aws_instance_size_map"
  result "results"
  code <<-EOS
  var results = []

  _.each(ds_instances_set, function(instance){
    var vcpu = "Unknown"
    
    if (instance["processorFeatures"] != null){
      vcpu = ds_aws_instance_size_map[instance.dbInstanceClass][vcpu]
    } else {
      var cores = _.findWhere(instance["processorFeatures"], {"name": "coreCount"})
      var threads = _.findWhere(instance["processorFeatures"], {"name": "threadsPerCore"})
      vcpu = cores * threads
    }

    results.push (
      {
        "region": instance["region"],
        "availabilityZone": instance["availabilityZone"],
        "dbInstanceArn": instance["dbInstanceArn"],
        "dbInstanceIdentifier": instance["dbInstanceIdentifier"],
        "dbInstanceClass": instance["dbInstanceClass"],
        "engine": instance["engine"],
        "engineVersion": instance["engineVersion"]
        "vcpu": vcpu
      }
    )
  })
 EOS
end

###############################################################################
# Policy
###############################################################################

policy "pol_rds_instances" do
  validate $ds_filtered_results do
    summary_template "AWS RDS Instances"
    detail_template <<-EOS
# AWS RDS Instances
| Region | Instance ID | Engine | Engine Version | Instance Class | Availability Zone | vCPU |
| ------ | ----------- | ------ | -------------- | -------------- | ----------------- | ---- |
{{ range data -}}
| {{.region}} | {{.dbInstanceIdentifier}} | {{.engine}} | {{.engineVersion}} | {{.dbInstanceClass}} | {{.availabilityZone }} | {{.vcpu}} |
{{ end -}}

###### Policy Applied in Account: {{ rs_project_name }} (Account ID: {{ rs_project_id }}) within Org: {{ rs_org_name }} (Org ID: {{ rs_org_id }})
EOS
    check eq(size(data),0)
    escalate $email
    escalate $resize_instances
  end
end


###############################################################################
# Escalations
###############################################################################

escalation "email" do
  email $param_email
end

escalation "resize_instances" do
  request_approval  do
    label "Escalation approval"
    description "Approve RDS RightSizing action"
    parameter "approval_reason" do
      type "string"
      label "Reason for approval"
      description "Explain why you are approving the action"
    end
  end
  run "rightsize_rds", data
end

define rightsize_rds($data) return $all_responses do
  $$debug=true
  $$log = []
  $all_responses = []

  $syslog_subject = "AWS RDS Instances to RightSize: "
  call sys_log(join([$syslog_subject, "Identified Instances"]),to_s($data))
  foreach $item in $data do
    sub on_error: skip do
      $get_response = http_request(
        auth: $$auth_aws,
		https: true,
        verb: "get",
        host: "rds."+$item["region"]+".amazonaws.com",
        href: "/",
        query_strings: {
          "Action": "DescribeDBInstances",
          "Version": "2014-10-31",
          "DBInstanceIdentifier": $item["dbInstanceIdentifier"]
        }
      )
      $all_responses << $get_response

      $state = $get_response["body"]["DescribeDBInstancesResponse"]["DescribeDBInstancesResult"]["DBInstances"]["DBInstance"]["DBInstanceStatus"]

      if $state == "available"
        $modify_response = http_request(
          auth: $$auth_aws,
		  https: true,
          verb: "get",
          host: "rds."+$item["region"]+".amazonaws.com",
          href: "/",
          query_strings: {
            "Action": "ModifyDBInstance",
            "Version": "2014-10-31",
            "DBInstanceIdentifier": $item["dbInstanceIdentifier"],
            "DBInstanceClass": $item["recommended_size"]
          }
        )
        $all_responses << $modify_response
      end
    end
  end
  call sys_log(join([$syslog_subject, "Responses"]),to_s($all_responses))
end

define handle_error($response) do
  $status_code = $response["code"]
  if $status_code == 404
    $_error_behavior = "skip"
  else
    $_error_behavior = "raise"
  end
end

define sys_log($subject, $detail) do
  if $$debug
    rs_cm.audit_entries.create(
      notify: "None",
      audit_entry: {
        auditee_href: @@account,
        summary: $subject,
        detail: $detail
      }
    )
  end
end

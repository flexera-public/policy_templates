name "AWS Delete Unused Classic Load Balancers"
rs_pt_ver 20180301
type "policy"
short_description "Report and remediate any Classic Load Balancers (CLB) that are not currently in use. \n See the [README](https://github.com/rightscale/policy_templates/tree/master/cost/aws/elb/clb_unused) and [docs.rightscale.com/policies](http://docs.rightscale.com/policies/) to learn more."
long_description "Version: 1.2"
category "Cost"
severity "low"

###############################################################################
# Permissions
###############################################################################

permission "perm_read_creds" do
  actions   "rs_cm.show_sensitive","rs_cm.index_sensitive"
  resources "rs_cm.credentials"
end

###############################################################################
# User inputs
###############################################################################

parameter "param_email" do
  type "list"
  label "Email addresses of the recipients you wish to notify"
end

parameter "param_exclude_tags" do
  type "list"
  label "List of one or more Tags that will exclude Classic Load Balancer from actions being taken. Format: Key=Value"
  allowed_pattern /([\w]?)+\=([\w]?)+/
end

###############################################################################
# Authentication
###############################################################################

auth "auth_aws", type: "aws" do
  version 4
  service "elasticloadbalancing"
  access_key cred('AWS_ACCESS_KEY_ID')
  secret_key cred('AWS_SECRET_ACCESS_KEY')
end

###############################################################################
# Datasources
###############################################################################

#Generates list of Regions
datasource "ds_regions_list" do
  request do
    verb "GET"
    host "raw.githubusercontent.com"
    path "/rightscale/policy_templates/master/data/aws/regions.json"
    header "User-Agent", "RS Policies"
  end
end

#To get list of All LoadBalancers.
#https://docs.aws.amazon.com/elasticloadbalancing/2012-06-01/APIReference/API_DescribeLoadBalancers.html
datasource "ds_clb_list" do
  iterate $ds_regions_list
  request do
    auth $auth_aws
    host join(["elasticloadbalancing.",val(iter_item,"region"),".amazonaws.com"])
    path "/"
    verb "GET"
    query "Action", "DescribeLoadBalancers"
    query "Version", "2012-06-01"
    header "Accept", "application/json"
  end
  result do
    encoding "json"
    collect jmes_path(response, "DescribeLoadBalancersResponse.DescribeLoadBalancersResult.LoadBalancerDescriptions[*]") do
      field "loadBalancerName", jmes_path(col_item, "LoadBalancerName")
      field "availabilityZones", jmes_path(col_item, "AvailabilityZones")
      field "instancesList", jmes_path(col_item, "Instances[*].InstanceId")
      field "region", val(iter_item,"region")
    end
  end
end

#To get list of All LoadBalancers with Tags.
#https://docs.aws.amazon.com/elasticloadbalancing/2012-06-01/APIReference/API_DescribeTags.html
datasource "ds_clb_list_tags" do
  iterate $ds_clb_list
  request do
    auth $auth_aws
    host join(["elasticloadbalancing.",val(iter_item,"region"),".amazonaws.com"])
    path "/"
    verb "GET"
    query "Action", "DescribeTags"
    query "Version", "2012-06-01"
    query "LoadBalancerNames.member.1",val(iter_item, "loadBalancerName")
    header "Accept", "application/json"
  end
  result do
    encoding "json"
    collect jmes_path(response, "DescribeTagsResponse.DescribeTagsResult.TagDescriptions[*]") do
      field "tags" do
        collect jmes_path(col_item,"Tags") do
          field "tagKey", jmes_path(col_item,"Key")
          field "tagValue", jmes_path(col_item,"Value")
        end
      end
      field "loadBalancerName", val(iter_item, "loadBalancerName")
      field "availabilityZones", val(iter_item, "availabilityZones")
      field "instancesList", val(iter_item, "instancesList")
      field "region", val(iter_item,"region")
    end
  end
end

#https://docs.aws.amazon.com/elasticloadbalancing/2012-06-01/APIReference/API_DescribeInstanceHealth.html
datasource "ds_instances_health" do
  iterate $ds_clb_list
   request do
    auth $auth_aws
    host join(["elasticloadbalancing.",val(iter_item,"region"),".amazonaws.com"])
    path "/"
    verb "GET"
    query "Action", "DescribeInstanceHealth"
    query "Version", "2012-06-01"
    query "LoadBalancerName",val(iter_item, "loadBalancerName")
    header "Accept", "application/json"
  end
  result do
    encoding "json"
    collect jmes_path(response, "DescribeInstanceHealthResponse.DescribeInstanceHealthResult.InstanceStates[*]") do
      field "description", jmes_path(col_item,"Description")
      field "state", jmes_path(col_item,"State")
      field "instanceId", jmes_path(col_item,"InstanceId")
      field "loadBalancerName", val(iter_item, "loadBalancerName")
    end
  end
end


datasource "ds_unused_clb_map" do
  run_script $js_aws_clb_filter_map, $ds_clb_list_tags,$ds_instances_health,$param_exclude_tags
end

###############################################################################
# Script
###############################################################################

script "js_aws_clb_filter_map", type: "javascript" do
  parameters "ds_clb_list_tags","ds_instances_health","param_exclude_tags"
  result "content"
  code <<-EOS
    var param_exclude_tags_lower=[];
    for(var j=0; j < param_exclude_tags.length; j++){
      param_exclude_tags_lower[j]=param_exclude_tags[j].toString().toLowerCase();
    }

    var content=[]
    for(var i=0; i<ds_clb_list_tags.length; i++){
      clb=ds_clb_list_tags[i]

      // Constructing availabilityZones with comma separated to display in detail_template
      var availabilityZones=clb['availabilityZones']
      var s_availabilityZones=""
      for(var j=0; j < availabilityZones.length; j++){
        availabilityZone = availabilityZones[j]
        s_availabilityZones = s_availabilityZones + ', '+ availabilityZone
      }

      // Constructing IntanceIds with comma separated to display in detail_template
      var instancesList = clb['instancesList']
      var s_instanceIds=""
      for(var j=0; j < instancesList.length; j++){
        instanceId = instancesList[j]
        s_instanceIds = s_instanceIds + ', '+ instanceId
      }

      //Constructing Tags of individual CLB into key=value format. Check, if the tag present in entered param_exclude_tags, ignore the CLB if the tag matches/present.
      var tags = clb['tags']
      var isTagMatched=false
      var tagKeyValue=""
      for(var j=0; j < tags.length; j++){
        tag = tags[j]
        if(param_exclude_tags_lower.indexOf((tag['tagKey']+'='+tag['tagValue']).toLowerCase()) !== -1){
          isTagMatched = true;
        }
        // Constructing tags with comma separated to display in detail_template
        tagKeyValue = tagKeyValue + ', '+ tag['tagKey']+'='+tag['tagValue']
      }

      //If the CLB tag does not match with entered param_exclude_tags, then check if any instance exists in the CLB and check for instances health.
      if(!(isTagMatched)){
        clb_details={
          loadBalancerName: clb['loadBalancerName'],
          instanceId:(s_instanceIds.slice(2)),
          availabilityZones:(s_availabilityZones.slice(2)),
          tagKeyValue:(tagKeyValue.slice(2)),
          region: clb['region']
        }
        if(instancesList.length > 0){
          var isInstanceNotHealthy=false
          // Check if the CLB has no healthy instance with state and description matches for the values mentioned below
          var state= "OutOfService"
          var description= "Instance has failed at least the UnhealthyThreshold number of health checks consecutively."
          for(var k=0; k < ds_instances_health.length; k++){
            instance= ds_instances_health[k]
            if(((instance['loadBalancerName']) == (clb['loadBalancerName'])) && (instance['state'] == state && instance['description'] == description)){
              isInstanceNotHealthy=true
            }
          }
          if(isInstanceNotHealthy){
            content.push(clb_details)
          }
        }else{
          content.push(clb_details)
        }
      }
    }
  EOS
end

###############################################################################
# Policy
###############################################################################

policy "policy_delete_unused_CLB" do
  validate $ds_unused_clb_map do
    summary_template "{{ rs_project_name }} (Account ID: {{ rs_project_id }}): {{ len data }} Unused Classic Load Balancers Found in AWS"
    detail_template <<-EOS
## List of Unused Classic Load Balancers
| LoadBalancer_Name | Region | Instance_ID | Availability_Zones | TAG_Value |
| ----------------- | ------ | ----------- | ------------------ | --------- |
{{ range data -}}
| {{ .loadBalancerName }} | {{.region}} | {{ .instanceId }} | {{ .availabilityZones }} | {{.tagKeyValue}} |
{{ end -}}
###### Policy Applied in Account: {{ rs_project_name }} (Account ID: {{ rs_project_id }}) within Org: {{ rs_org_name }} (Org ID: {{ rs_org_id }})
EOS
    escalate $report_unused_CLB
    escalate $approve_delete_CLB
    check eq(size(data),0)
  end
end

###############################################################################
# Escalations
###############################################################################

escalation "report_unused_CLB" do
  email $param_email
end

escalation "approve_delete_CLB" do
  request_approval  do
    label "Approve Resource Deletion"
    description "Approve escalation to run RightScale Cloud Workflow to delete unused CLB"
    parameter "approval_reason" do
      type "string"
      label "Reason for Approval"
      description "Explain why you are approving the action"
    end
  end
  run "delete_CLB", data
end

###############################################################################
# Cloud Workflow
###############################################################################

#https://docs.aws.amazon.com/elasticloadbalancing/2012-06-01/APIReference/API_DeleteLoadBalancer.html
define delete_CLB($data) return $all_responses do
  $$debug=true
  $all_responses = []
  foreach $item in $data do
    sub on_error: skip do
      $response = http_get(
        url: "https://elasticloadbalancing."+$item["region"]+".amazonaws.com/?Action=DeleteLoadBalancer&Version=2012-06-01&LoadBalancerName="+ $item["loadBalancerName"],
        "signature": { type: "aws" }
      )
      $all_responses << $response
      call sys_log('CLB delete response',to_s($response))
    end
  end
end

define sys_log($subject, $detail) do
  if $$debug
    rs_cm.audit_entries.create(
      notify: "None",
      audit_entry: {
        auditee_href: @@account,
        summary: "AWS Delete Unused Classic Load Balancers Policy "+ $subject,
        detail: $detail
      }
    )
  end
end

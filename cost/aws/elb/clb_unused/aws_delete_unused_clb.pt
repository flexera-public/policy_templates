name "AWS Delete Unused Classic Load Balancers"
rs_pt_ver 20180301
type "policy"
short_description "Report and remediate any Classic Load Balancers (CLB) that are not currently in use. \n See the [README](https://github.com/flexera/policy_templates/tree/master/cost/aws/elb/clb_unused) and [docs.rightscale.com/policies](https://docs.rightscale.com/policies/) to learn more."
long_description ""
category "Cost"
severity "low"
info(
  version: "2.3",
  provider: "AWS",
  service: "ELB",
  policy_set: ""
)

###############################################################################
# User inputs
###############################################################################

parameter "param_email" do
  type "list"
  label "Email addresses of the recipients you wish to notify"
end

parameter "param_exclude_tags" do
  type "list"
  label "List of one or more Tags that will exclude Classic Load Balancer from actions being taken. Format: Key=Value"
  allowed_pattern /([\w]?)+\=([\w]?)+/
end

parameter "param_automatic_action" do
  type "list"
  label "Automatic Actions"
  description "When this value is set, this policy will automatically take the selected action(s)"
  allowed_values ["Delete Load balancers"]
end

###############################################################################
# Authentication
###############################################################################

#authenticate with AWS
credentials "auth_aws" do
  schemes "aws","aws_sts"
  label "AWS"
  description "Select the AWS Credential from the list"
  tags "provider=aws"
end

###############################################################################
# Datasources
###############################################################################

#Get list of enabled regions for an account
datasource "ds_regions_list" do
  request do
    auth $auth_aws
    verb "GET"
    host "ec2.amazonaws.com"
    path "/"
    query "Action", "DescribeRegions"
    query "Version", "2016-11-15"
  end
  result do
    encoding "xml"
    collect xpath(response, "//DescribeRegionsResponse/regionInfo/item", "array") do
      field "region", xpath(col_item, "regionName")
    end
  end
end

# Get only SCP enabled regions
datasource "ds_regions" do
  iterate $ds_regions_list
    request do
      auth $auth_aws
      verb "GET"
      host "ec2.amazonaws.com"
      host join(["ec2.",val(iter_item,"region"),".amazonaws.com"])
      path "/"
      query "Action", "DescribeRegions"
      query "Version", "2016-11-15"
      ignore_status [403]
    end
    result do
      encoding "xml"
      field "region", val(iter_item, "region")
    end
end

#To get list of All LoadBalancers.
#https://docs.aws.amazon.com/elasticloadbalancing/2012-06-01/APIReference/API_DescribeLoadBalancers.html
datasource "ds_clb_list" do
  iterate $ds_regions
  request do
    auth $auth_aws
    host join(["elasticloadbalancing.",val(iter_item,"region"),".amazonaws.com"])
    path "/"
    verb "GET"
    query "Action", "DescribeLoadBalancers"
    query "Version", "2012-06-01"
    header "Accept", "application/json"
  end
  result do
    encoding "json"
    collect jmes_path(response, "DescribeLoadBalancersResponse.DescribeLoadBalancersResult.LoadBalancerDescriptions[*]") do
      field "loadBalancerName", jmes_path(col_item, "LoadBalancerName")
      field "availabilityZones", jmes_path(col_item, "AvailabilityZones")
      field "instancesList", jmes_path(col_item, "Instances[*].InstanceId")
      field "region", val(iter_item,"region")
    end
  end
end

#To get list of All LoadBalancers with Tags.
#https://docs.aws.amazon.com/elasticloadbalancing/2012-06-01/APIReference/API_DescribeTags.html
datasource "ds_clb_list_tags" do
  iterate $ds_clb_list
  request do
    auth $auth_aws
    host join(["elasticloadbalancing.",val(iter_item,"region"),".amazonaws.com"])
    path "/"
    verb "GET"
    query "Action", "DescribeTags"
    query "Version", "2012-06-01"
    query "LoadBalancerNames.member.1",val(iter_item, "loadBalancerName")
    header "Accept", "application/json"
  end
  result do
    encoding "json"
    collect jmes_path(response, "DescribeTagsResponse.DescribeTagsResult.TagDescriptions[*]") do
      field "tags" do
        collect jmes_path(col_item,"Tags") do
          field "tagKey", jmes_path(col_item,"Key")
          field "tagValue", jmes_path(col_item,"Value")
        end
      end
      field "loadBalancerName", val(iter_item, "loadBalancerName")
      field "availabilityZones", val(iter_item, "availabilityZones")
      field "instancesList", val(iter_item, "instancesList")
      field "region", val(iter_item,"region")
    end
  end
end

#https://docs.aws.amazon.com/elasticloadbalancing/2012-06-01/APIReference/API_DescribeInstanceHealth.html
datasource "ds_instances_health" do
  iterate $ds_clb_list
   request do
    auth $auth_aws
    host join(["elasticloadbalancing.",val(iter_item,"region"),".amazonaws.com"])
    path "/"
    verb "GET"
    query "Action", "DescribeInstanceHealth"
    query "Version", "2012-06-01"
    query "LoadBalancerName",val(iter_item, "loadBalancerName")
    header "Accept", "application/json"
  end
  result do
    encoding "json"
    collect jmes_path(response, "DescribeInstanceHealthResponse.DescribeInstanceHealthResult.InstanceStates[*]") do
      field "description", jmes_path(col_item,"Description")
      field "state", jmes_path(col_item,"State")
      field "instanceId", jmes_path(col_item,"InstanceId")
      field "loadBalancerName", val(iter_item, "loadBalancerName")
    end
  end
end


datasource "ds_unused_clb_map" do
  run_script $js_aws_clb_filter_map, $ds_clb_list_tags,$ds_instances_health,$param_exclude_tags
end

###############################################################################
# Script
###############################################################################

script "js_aws_clb_filter_map", type: "javascript" do
  parameters "ds_clb_list_tags","ds_instances_health","param_exclude_tags"
  result "content"
  code <<-EOS
    var param_exclude_tags_lower=[];
    for(var j=0; j < param_exclude_tags.length; j++){
      param_exclude_tags_lower[j]=param_exclude_tags[j].toString().toLowerCase();
    }

    var content=[]
    for(var i=0; i<ds_clb_list_tags.length; i++){
      clb=ds_clb_list_tags[i]

      // Constructing availabilityZones with comma separated to display in detail_template
      var availabilityZones=clb['availabilityZones']
      var s_availabilityZones=""
      for(var j=0; j < availabilityZones.length; j++){
        availabilityZone = availabilityZones[j]
        s_availabilityZones = s_availabilityZones + ', '+ availabilityZone
      }

      // Constructing IntanceIds with comma separated to display in detail_template
      var instancesList = clb['instancesList']
      var s_instanceIds=""
      for(var j=0; j < instancesList.length; j++){
        instanceId = instancesList[j]
        s_instanceIds = s_instanceIds + ', '+ instanceId
      }

      //Constructing Tags of individual CLB into key=value format. Check, if the tag present in entered param_exclude_tags, ignore the CLB if the tag matches/present.
      var tags = clb['tags']
      var isTagMatched=false
      var tagKeyValue=""
      for(var j=0; j < tags.length; j++){
        tag = tags[j]
        if(param_exclude_tags_lower.indexOf((tag['tagKey']+'='+tag['tagValue']).toLowerCase()) !== -1){
          isTagMatched = true;
        }
        // Constructing tags with comma separated to display in detail_template
        tagKeyValue = tagKeyValue + ', '+ tag['tagKey']+'='+tag['tagValue']
      }

      //If the CLB tag does not match with entered param_exclude_tags, then check if any instance exists in the CLB and check for instances health.
      if(!(isTagMatched)){
        clb_details={
          id: clb['loadBalancerName'],
          instanceId:(s_instanceIds.slice(2)),
          availabilityZones:(s_availabilityZones.slice(2)),
          tagKeyValue:(tagKeyValue.slice(2)),
          region: clb['region']
        }
        if(instancesList.length > 0){
          var isInstanceNotHealthy=false
          // Check if the CLB has no healthy instance with state and description matches for the values mentioned below
          var state= "OutOfService"
          var description= "Instance has failed at least the UnhealthyThreshold number of health checks consecutively."
          for(var k=0; k < ds_instances_health.length; k++){
            instance= ds_instances_health[k]
            if(((instance['loadBalancerName']) == (clb['loadBalancerName'])) && (instance['state'] == state && instance['description'] == description)){
              isInstanceNotHealthy=true
            }
          }
          if(isInstanceNotHealthy){
            content.push(clb_details)
          }
        }else{
          content.push(clb_details)
        }
      }
    }
  EOS
end

###############################################################################
# Escalations
###############################################################################

escalation "esc_email" do
  automatic true
  label "Send Mail"
  description "Sends incident email"
  email $param_email
end

escalation "esc_delete_clb" do
  automatic contains($param_automatic_action, "Delete Load balancers")
  label "Delete CLB"
  description "Delete selected unused CLB"
  run "delete_CLB", data
end

###############################################################################
# Policy
###############################################################################

policy "policy_delete_unused_CLB" do
  validate $ds_unused_clb_map do
    summary_template "{{ rs_project_name }} (Account ID: {{ rs_project_id }}): {{ len data }} Unused Classic Load Balancers Found in AWS"
    export do
      field "id" do
        label "LoadBalancer Name"
      end
      field "region" do
        label "Region"
      end
      field "instanceId" do
        label "Instance ID"
      end
      field "availabilityZones" do
        label "Availability Zones"
      end
      field "tagKeyValue" do
        label "Tag Value"
      end
    end

    check eq(size(data),0)
    escalate $esc_email
    escalate $esc_delete_clb
  end
end

###############################################################################
# Cloud Workflow
###############################################################################

#https://docs.aws.amazon.com/elasticloadbalancing/2012-06-01/APIReference/API_DeleteLoadBalancer.html
define delete_CLB($data) return $all_responses do
  $$debug=true
  $all_responses = []
  foreach $item in $data do
    sub on_error: skip do
	$response = http_request(
      verb: "get",
      host: join(["elasticloadbalancing.",$item["region"],".amazonaws.com"]),
      auth: $$auth_aws,
      href: join(["/", "?Action=DeleteLoadBalancer", "&LoadBalancerName=", $item["id"], "&Version=2012-06-01"]),
      https: true,
      headers:{
        "cache-control": "no-cache",
        "content-type": "application/json"
      }
    )
      $all_responses << $response
      call sys_log('CLB delete response',to_s($response))
    end
  end
end

define sys_log($subject, $detail) do
  if $$debug
    rs_cm.audit_entries.create(
      notify: "None",
      audit_entry: {
        auditee_href: @@account,
        summary: "AWS Delete Unused Classic Load Balancers Policy "+ $subject,
        detail: $detail
      }
    )
  end
end

name "AWS Rightsize EBS Volumes"
rs_pt_ver 20180301
type "policy"
short_description "This policy finds AWS GP2 volume types and recommends them for an upgrade to GP3 if this would result in savings. See the [README](https://github.com/flexera-public/policy_templates/tree/master/cost/aws/rightsize_ebs_volumes/) and [docs.flexera.com/flexera/EN/Automation](https://docs.flexera.com/flexera/EN/Automation/AutomationGS.htm) to learn more."
long_description ""
severity "low"
category "Cost"
default_frequency "weekly"
info(
  version: "4.0",
  provider: "AWS",
  service: "Compute",
  policy_set: "Inefficient Disk Usage",
  recommendation_type: "Usage Reduction"
)

###############################################################################
# Parameters
###############################################################################

parameter "param_email" do
  type "list"
  category "Policy Settings"
  label "Email Addresses"
  description "Email addresses of the recipients you wish to notify when new incidents are created"
  default []
end

parameter "param_aws_account_number" do
  type "string"
  category "Policy Settings"
  label "Account Number"
  description "The account number for AWS STS Cross Account Roles."
  default ""
end

parameter "param_min_savings" do
  type "number"
  category "Policy Settings"
  label "Minimum Savings Threshold"
  description "Minimum potential savings required to generate a recommendation"
  min_value 0
  default 0
end

parameter "param_regions_allow_or_deny" do
  type "string"
  category "Filters"
  label "Allow/Deny Regions"
  description "Allow or Deny entered regions. See the README for more details"
  allowed_values "Allow", "Deny"
  default "Allow"
end

parameter "param_regions_list" do
  type "list"
  category "Filters"
  label "Allow/Deny Regions List"
  allowed_pattern /^([a-zA-Z-_]+-[a-zA-Z0-9-_]+-[0-9-_]+,*|)+$/
  description "A list of allowed or denied regions. See the README for more details"
  default []
end

parameter "param_exclusion_tags" do
  category "User Inputs"
  label "Exclusion Tag Key:Value"
  description "Cloud native tag to ignore instances that you don't want to consider for downsizing or termination. Format: Key:Value"
  type "string"
  allowed_pattern /(^$)|([\w]?)+\:([\w]?)+/
  default ""
end

parameter "param_automatic_action" do
  type "list"
  category "Actions"
  label "Automatic Actions"
  description "When this value is set, this policy will automatically take the selected action(s)"
  allowed_values ["Upgrade Volumes to GP3"]
  default []
end

###############################################################################
# Authentication
###############################################################################

credentials "auth_aws" do
  schemes "aws", "aws_sts"
  label "AWS"
  description "Select the AWS Credential from the list"
  tags "provider=aws"
  aws_account_number $param_aws_account_number
end

credentials "auth_flexera" do
  schemes "oauth2"
  label "Flexera"
  description "Select Flexera One OAuth2 credentials"
  tags "provider=flexera"
end

###############################################################################
# Pagination
###############################################################################

pagination "pagination_aws_volumes" do
  get_page_marker do
    body_path "//DescribeVolumesResponse/nextToken"
  end
  set_page_marker do
    query "NextToken"
  end
end

pagination "pagination_aws_pricing" do
  get_page_marker do
    body_path "NextToken"
  end
  set_page_marker do
    body_field "NextToken"
  end
end

###############################################################################
# Datasources & Scripts
###############################################################################

# Get applied policy metadata for use later
datasource "ds_applied_policy" do
  request do
    auth $auth_flexera
    host rs_governance_host
    path join(["/api/governance/projects/", rs_project_id, "/applied_policies/", policy_id])
    header "Api-Version", "1.0"
  end
end

# Get region-specific Flexera API endpoints
datasource "ds_flexera_api_hosts" do
  run_script $js_flexera_api_hosts, rs_optima_host
end

script "js_flexera_api_hosts", type: "javascript" do
  parameters "rs_optima_host"
  result "result"
  code <<-EOS
  host_table = {
    "api.optima.flexeraeng.com": {
      flexera: "api.flexera.com",
      fsm: "api.fsm.flexeraeng.com"
    },
    "api.optima-eu.flexeraeng.com": {
      flexera: "api.flexera.eu",
      fsm: "api.fsm-eu.flexeraeng.com"
    },
    "api.optima-au.flexeraeng.com": {
      flexera: "api.flexera.au",
      fsm: "api.fsm-au.flexeraeng.com"
    }
  }

  result = host_table[rs_optima_host]
EOS
end

# Get AWS account info
datasource "ds_cloud_vendor_accounts" do
  request do
    auth $auth_flexera
    host val($ds_flexera_api_hosts, 'flexera')
    path join(["/finops-analytics/v1/orgs/", rs_org_id, "/cloud-vendor-accounts"])
    header "Api-Version", "1.0"
  end
  result do
    encoding "json"
    collect jmes_path(response, "values[*]") do
      field "id", jmes_path(col_item, "aws.accountId")
      field "name", jmes_path(col_item, "name")
      field "tags", jmes_path(col_item, "tags")
    end
  end
end

datasource "ds_get_caller_identity" do
  request do
    auth $auth_aws
    verb "GET"
    host "sts.amazonaws.com"
    path "/"
    header "User-Agent", "RS Policies"
    query "Action", "GetCallerIdentity"
    query "Version", "2011-06-15"
  end
  result do
    encoding "xml"
    collect xpath(response, "//GetCallerIdentityResponse/GetCallerIdentityResult") do
      field "account", xpath(col_item, "Account")
    end
  end
end

datasource "ds_aws_account" do
  run_script $js_aws_account, $ds_cloud_vendor_accounts, $ds_get_caller_identity
end

script "js_aws_account", type:"javascript" do
  parameters "ds_cloud_vendor_accounts", "ds_get_caller_identity"
  result "result"
  code <<-EOS
  result = _.find(ds_cloud_vendor_accounts, function(account) {
    return account['id'] == ds_get_caller_identity[0]['account']
  })

  // This is in case the API does not return the relevant account info
  if (result == undefined) {
    result = {
      id: ds_get_caller_identity[0]['account'],
      name: "",
      tags: {}
    }
  }
EOS
end

datasource "ds_billing_centers" do
  request do
    auth $auth_flexera
    host rs_optima_host
    path join(["/analytics/orgs/", rs_org_id, "/billing_centers"])
    header "Api-Version", "1.0"
    header "User-Agent", "RS Policies"
    query "view", "allocation_table"
    ignore_status [403]
  end
  result do
    encoding "json"
    collect jmes_path(response, "[*]") do
      field "href", jmes_path(col_item, "href")
      field "id", jmes_path(col_item, "id")
      field "name", jmes_path(col_item, "name")
      field "parent_id", jmes_path(col_item, "parent_id")
    end
  end
end

# Gather top level billing center IDs for when we pull cost data
datasource "ds_top_level_bcs" do
  run_script $js_top_level_bcs, $ds_billing_centers
end

script "js_top_level_bcs", type: "javascript" do
  parameters "ds_billing_centers"
  result "result"
  code <<-EOS
  filtered_bcs = _.filter(ds_billing_centers, function(bc) {
    return bc['parent_id'] == null || bc['parent_id'] == undefined
  })

  result = _.compact(_.pluck(filtered_bcs, 'id'))
EOS
end

# Gather local currency info
datasource "ds_currency_reference" do
  request do
    host "raw.githubusercontent.com"
    path "/rightscale/policy_templates/master/cost/scheduled_reports/currency_reference.json"
    header "User-Agent", "RS Policies"
  end
end

datasource "ds_currency_code" do
  request do
    auth $auth_flexera
    host rs_optima_host
    path join(["/bill-analysis/orgs/", rs_org_id, "/settings/currency_code"])
    header "Api-Version", "0.1"
    header "User-Agent", "RS Policies"
    ignore_status [403]
  end
  result do
    encoding "json"
    field "id", jmes_path(response, "id")
    field "value", jmes_path(response, "value")
  end
end

datasource "ds_currency_target" do
  run_script $js_currency_target, $ds_currency_reference, $ds_currency_code
end

script "js_currency_target", type:"javascript" do
  parameters "ds_currency_reference", "ds_currency_code"
  result "result"
  code <<-EOS
  // Default to USD if currency is not found
  result = ds_currency_reference['USD']

  if (ds_currency_code['value'] != undefined && ds_currency_reference[ds_currency_code['value']] != undefined) {
    result = ds_currency_reference[ds_currency_code['value']]
  }
EOS
end

# Branching logic:
# This datasource returns an empty array if the target currency is USD.
# This prevents ds_currency_conversion from running if it's not needed.
datasource "ds_conditional_currency_conversion" do
  run_script $js_conditional_currency_conversion, $ds_currency_target
end

script "js_conditional_currency_conversion", type: "javascript" do
  parameters "ds_currency_target"
  result "result"
  code <<-EOS
  result = []
  // Make the request only if the target currency is not USD
  if (ds_currency_target['code'] != 'USD') {
    result = [1]
  }
EOS
end

datasource "ds_currency_conversion" do
  # Only make a request if the target currency is not USD
  iterate $ds_conditional_currency_conversion
  request do
    host "api.xe-auth.flexeraeng.com"
    path "/prod/{proxy+}"
    query "from", "USD"
    query "to", val($ds_currency_target, 'code')
    query "amount", "1"
    # Ignore currency conversion if API has issues
    ignore_status [400, 404, 502]
  end
  result do
    encoding "json"
    field "from", jmes_path(response, "from")
    field "to", jmes_path(response, "to")
    field "amount", jmes_path(response, "amount")
    field "year", jmes_path(response, "year")
  end
end

datasource "ds_currency" do
  run_script $js_currency, $ds_currency_target, $ds_currency_conversion
end

script "js_currency", type:"javascript" do
  parameters "ds_currency_target", "ds_currency_conversion"
  result "result"
  code <<-EOS
  result = ds_currency_target
  result['exchange_rate'] = 1

  if (ds_currency_conversion['to'] != undefined) {
    currency_code = ds_currency_target['code']
    current_month = parseInt(new Date().toISOString().split('-')[1])

    conversion_block = _.find(ds_currency_conversion['to'][currency_code], function(item) {
      return item['month'] == current_month
    })

    if (conversion_block != undefined) {
      result['exchange_rate'] = conversion_block['monthlyAverage']
    }
  }
EOS
end

datasource "ds_describe_regions" do
  request do
    auth $auth_aws
    verb "GET"
    host "ec2.amazonaws.com"
    path "/"
    query "Action", "DescribeRegions"
    query "Version", "2016-11-15"
    query "Filter.1.Name", "opt-in-status"
    query "Filter.1.Value.1", "opt-in-not-required"
    query "Filter.1.Value.2", "opted-in"
    # Header X-Meta-Flexera has no affect on datasource query, but is required for Meta Policies
    # Forces `ds_is_deleted` datasource to run first during policy execution
    header "Meta-Flexera", val($ds_is_deleted, "path")
  end
  result do
    encoding "xml"
    collect xpath(response, "//DescribeRegionsResponse/regionInfo/item", "array") do
      field "region", xpath(col_item, "regionName")
    end
  end
end

datasource "ds_regions" do
  run_script $js_regions, $ds_describe_regions, $param_regions_list, $param_regions_allow_or_deny
end

script "js_regions", type:"javascript" do
  parameters "ds_describe_regions", "param_regions_list", "param_regions_allow_or_deny"
  result "result"
  code <<-EOS
  allow_deny_test = { "Allow": true, "Deny": false }

  if (param_regions_list.length > 0) {
    result = _.filter(ds_describe_regions, function(item) {
      return _.contains(param_regions_list, item['region']) == allow_deny_test[param_regions_allow_or_deny]
    })
  } else {
    result = ds_describe_regions
  }
EOS
end

datasource "ds_volumes" do
  iterate $ds_regions
  request do
    verb "GET"
    auth $auth_aws
    pagination $pagination_aws_volumes
    host join(["ec2.", val(iter_item, "region"), ".amazonaws.com"])
    path "/"
    query "Action", "DescribeVolumes"
    query "Version", "2016-11-15"
    header "User-Agent", "RS Policies"
    header "Content-Type", "text/xml"
  end
  result do
    encoding "xml"
    collect xpath(response, "//DescribeVolumesResponse/volumeSet/item", "array") do
      field "volumeId", xpath(col_item, "volumeId")
      field "volumeType", xpath(col_item, "volumeType")
      field "encrypted", xpath(col_item, "encrypted")
      field "createTime", xpath(col_item, "createTime")
      field "iops", xpath(col_item, "iops")
      field "size", xpath(col_item, "size")
      field "status", xpath(col_item, "status")
      field "throughput", xpath(col_item, "throughput")
      field "attachmentSet" do
        collect xpath(col_item, "attachmentSet/item", "array") do
          field "instanceId", xpath(col_item, "instanceId")
          field "attachmentStatus", xpath(col_item, "status")
        end
      end
      field "tags" do
        collect xpath(col_item,"tagSet/item", "array") do
          field "key", xpath(col_item, "key")
          field "value", xpath(col_item, "value")
        end
      end
      field "region", val(iter_item, "region")
    end
  end
end

datasource "ds_volumes_tag_filtered" do
  run_script $js_volumes_tag_filtered, $ds_volumes, $param_exclusion_tags
end

script "js_volumes_tag_filtered", type: "javascript" do
  parameters "ds_volumes", "param_exclusion_tags"
  result "result"
  code <<-EOS
  if (param_exclusion_tags.length > 0) {
    result = _.reject(ds_volumes, function(volume) {
      volume_tags = []

      if (volume['tags'] != null && volume['tags'] != undefined) {
        _.each(volume['tags'], function(tag) {
          volume_tags.push([tag['key'], tag['value']].join(':'))
          volume_tags.push([tag['key'], '*'].join(':'))
        })
      }

      exclude_volume = false

      _.each(param_exclusion_tags, function(exclusion_tag) {
        if (_.contains(volume_tags, exclusion_tag)) {
          exclude_volume = true
        }
      })

      return exclude_volume && volume['volumeType'] != 'gp2'
    })
  } else {
    result = _.reject(ds_volumes, function(volume) {
      return volume['volumeType'] != 'gp2'
    })
  }
EOS
end

datasource "ds_gp2_prices" do
  request do
    run_script $js_volume_prices, "gp2"
  end
end

datasource "ds_gp3_prices" do
  request do
    run_script $js_volume_prices, "gp3"
  end
end

script "js_volume_prices", type: "javascript" do
  parameters "volumeApiName"
  result "request"
  code <<-EOS
  var request = {
    "auth": "auth_aws",
    "host": "api.pricing.us-east-1.amazonaws.com",
    "verb": "POST",
    "path": "/",
    "headers": {
      "User-Agent": "RS Policies",
      "Content-Type": "application/x-amz-json-1.1",
      "x-amz-target": "AWSPriceListService.GetProducts",
      "Accept": "application/json"
    },
    "body_fields": {
      "Filters": [
        {
          "Type": "TERM_MATCH",
          "Field": "ServiceCode",
          "Value": "AmazonEC2"
        },
        {
          "Type": "TERM_MATCH",
          "Field": "volumeApiName",
          "Value": volumeApiName
        }
      ],
      "FormatVersion": "aws_v1",
      "NextToken": null,
      "MaxResults": 100,
      "ServiceCode": "AmazonEC2"
    }
  }
EOS
end

datasource "ds_volumes_with_prices" do
  run_script $js_volumes_with_prices, $ds_volumes_tag_filtered, $ds_gp2_prices, $ds_gp3_prices, $ds_currency
end

script "js_volumes_with_prices", type: "javascript" do
  parameters "ds_volumes_tag_filtered", "ds_gp2_prices", "ds_gp3_prices", "ds_currency"
  result "result"
  code <<-EOS
  // Function to convert price lists to proper JSON
  function convertPriceList(priceList) {
    convertedPriceList = {}

    _.each(priceList, function(price) {
      entry = JSON.parse(price.replace(/\\"/g,'"'))
      region = entry['product']['attributes']['regionCode']

      if (convertedPriceList[region] == undefined) {
        convertedPriceList[region] = []
      }

      convertedPriceList[region].push(entry)
    })

    return convertedPriceList
  }

  // Function to grab price on GP2 price list
  function getGP2Price(instance, priceList) {
    hourly_cost_multiplier = 365.25 / 12 * 24
    region = instance['region']

    size = 0
    if (instance['size'] != "") {
      size = Number(instance['size'])
    }

    foundPrice = 0.0

    if (priceList[region] != undefined) {
      _.each(priceList[region], function(item) {
        on_demand_pricing = item['terms']['OnDemand']

        _.each(_.keys(on_demand_pricing), function(odKey) {
          price_dimensions = on_demand_pricing[odKey]['priceDimensions']

          _.each(_.keys(price_dimensions), function(priceKey) {
            foundPrice = Number(price_dimensions[priceKey]['pricePerUnit']['USD']) * size
          })
        })
      })
    }

    return foundPrice * hourly_cost_multiplier
  }

  // Function to grab price on GP3 price list
  function getGP3Price(instance, priceList) {
    hourly_cost_multiplier = 365.25 / 12 * 24
    region = instance['region']

    size = 0
    if (instance['size'] != "") {
      size = Number(instance['size'])
    }

    iops = 3000
    if (instance['iops'] != "" && Number(instance['iops']) >= 3000) {
      iops = Number(instance['iops'])
    }

    throughput = 125
    if (instance['throughput'] != "" && Number(instance['throughput']) >= 125) {
      throughput = Number(instance['throughput'])
    }

    foundPrice = 0.0

    if (priceList[region] != undefined) {
      _.each(priceList[region], function(item) {
        prePrice = 0.0

        on_demand_pricing = item['terms']['OnDemand']

        _.each(_.keys(on_demand_pricing), function(odKey) {
          price_dimensions = on_demand_pricing[odKey]['priceDimensions']

          _.each(_.keys(price_dimensions), function(priceKey) {
            prePrice = Number(price_dimensions[priceKey]['pricePerUnit']['USD'])
          })
        })

        if (item['product']['productFamily'] == "System Operation") {
          foundPrice += prePrice * (iops - 3000)
        }

        if (item['product']['productFamily'] == "Provisioned Throughput") {
          foundPrice += prePrice * (throughput - 125)
        }

        if (item['product']['productFamily'] == "Storage") {
          foundPrice += prePrice * size
        }
      })
    }

    return foundPrice * hourly_cost_multiplier
  }

  result = []
  gp2_pricelist = convertPriceList(ds_gp2_prices['PriceList'])
  gp3_pricelist = convertPriceList(ds_gp3_prices['PriceList'])

  _.each(ds_volumes_tag_filtered, function(volume) {
    gp2_price = getGP2Price(volume, gp2_pricelist) * ds_currency['exchange_rate']
    gp3_price = getGP3Price(volume, gp3_pricelist) * ds_currency['exchange_rate']
    savings = gp2_price - gp3_price

    if (savings >= 0 && gp2_price != 0 && gp3_price != 0) {
      tags = []
      volumeName = ""

      if (volume['tags'] != null && volume['tags'] != undefined) {
        _.each(volume['tags'], function(tag) {
          tags.push([tag['key'], tag['value']].join('='))

          if (tag['key'] == 'Name') { volumeName = tag['value'] }
        })
      }

      attachmentStatus = []

      _.each(volume['attachmentSet'], function(attachment) {
        if (attachmentStatus.length != 0) { attachmentStatus.push(", ") }

        attachmentStatus.push(attachment['instanceId'])
        attachmentStatus.push("=")
        attachmentStatus.push(attachment['attachmentStatus'])
      })

      result.push({
        volumeId: volume['volumeId'],
        volumeName: volumeName,
        volumeType: volume['volumeType'],
        encrypted: volume['encrypted'],
        createTime: volume['createTime'],
        iops: volume['iops'],
        size: volume['size'],
        status: volume['status'],
        throughput: volume['throughput'],
        attachmentStatus: attachmentStatus.join(''),
        tags: tags.join(', '),
        region: volume['region'],
        gp2_price: gp2_price,
        gp3_price: gp3_price,
        savings: savings,
        savingsCurrency: ds_currency['symbol']
      })
    }
  })
EOS
end

datasource "ds_volume_costs" do
  request do
    run_script $js_volume_costs, $ds_aws_account, $ds_top_level_bcs, rs_org_id, rs_optima_host
  end
  result do
    encoding "json"
    collect jmes_path(response,"rows[*]") do
      field "resourceId", jmes_path(col_item, "dimensions.resource_id")
      field "resourceType", jmes_path(col_item, "dimensions.resource_type")
      field "vendorAccountName", jmes_path(col_item, "dimensions.vendor_account_name")
      field "adjustmentName", jmes_path(col_item, "dimensions.adjustment_name")
      field "cost", jmes_path(col_item, "metrics.cost_amortized_unblended_adj")
    end
  end
end

script "js_volume_costs", type: "javascript" do
  parameters "ds_aws_account", "ds_top_level_bcs", "rs_org_id", "rs_optima_host"
  result "request"
  code <<-EOS
  end_date = new Date()
  end_date.setDate(end_date.getDate() - 2)
  end_date = end_date.toISOString().split('T')[0]

  start_date = new Date()
  start_date.setDate(start_date.getDate() - 3)
  start_date = start_date.toISOString().split('T')[0]

  var request = {
    auth: "auth_flexera",
    host: rs_optima_host,
    verb: "POST",
    path: "/bill-analysis/orgs/" + rs_org_id + "/costs/select",
    body_fields: {
      dimensions: ["resource_id", "vendor_account_name", "resource_type", "adjustment_name"],
      granularity: "day",
      start_at: start_date,
      end_at: end_date,
      metrics: ["cost_amortized_unblended_adj"],
      billing_center_ids: ds_top_level_bcs,
      limit: 100000,
      "filter": {
        "type": "and",
        "expressions": [
          {
            "dimension": "service",
            "type": "equal",
            "value": "AmazonEC2"
          },
          {
            "dimension": "resource_type",
            "type": "equal",
            "value": "Storage"
          },
          {
            "dimension": "vendor_account",
            "type": "equal",
            "value": ds_aws_account['id']
          },
          {
            type: "not",
            expression: {
              dimension: "adjustment_name",
              type: "substring",
              substring: "Shared"
            }
          }
        ]
      }
    },
    headers: {
      'User-Agent': "RS Policies",
      'Api-Version': "1.0"
    },
    ignore_status: [400]
  }
EOS
end

datasource "ds_volume_costs_grouped" do
  run_script $js_volume_costs_grouped, $ds_volume_costs
end

script "js_volume_costs_grouped", type: "javascript" do
  parameters "ds_volume_costs"
  result "result"
  code <<-EOS
  // Multiple a single day's cost by the average number of days in a month.
  // The 0.25 is to account for leap years for extra precision.
  cost_multiplier = 365.25 / 12

  // Group cost data by resourceId for later use
  result = {}

  _.each(ds_volume_costs, function(item) {
    id = item['resourceId'].toLowerCase()

    if (result[id] == undefined) { result[id] = 0.0 }
    result[id] += item['cost'] * cost_multiplier
  })
EOS
end

datasource "ds_underutil_volumes" do
  run_script $js_underutil_volumes, $ds_volumes_tag_filtered, $ds_volumes_with_prices, $ds_volume_costs_grouped, $ds_aws_account, $ds_currency, $ds_currency_conversion, $ds_applied_policy, $param_min_savings
end

script "js_underutil_volumes", type: "javascript" do
  parameters "ds_volumes_tag_filtered", "ds_volumes_with_prices", "ds_volume_costs_grouped", "ds_aws_account", "ds_currency", "ds_currency_conversion", "ds_applied_policy", "param_min_savings"
  result "result"
  code <<-'EOS'
  // Used for formatting numbers to look pretty
  function formatNumber(number, separator){
    numString = number.toString()
    values = numString.split(".")
    formatted_number = ''

    while (values[0].length > 3) {
      var chunk = values[0].substr(-3)
      values[0] = values[0].substr(0, values[0].length - 3)
      formatted_number = separator + chunk + formatted_number
    }

    if (values[0].length > 0) { formatted_number = values[0] + formatted_number }
    if (values[1] == undefined) { return formatted_number }

    return formatted_number + "." + values[1]
  }

  result = []
  total_savings = 0.0

  _.each(ds_volumes_with_prices, function(volume) {
    if (volume['savings'] >= param_min_savings) {
      total_savings += volume['savings']

      id = volume['volumeId'].toLowerCase()
      cost = ds_volume_costs_grouped[id]
      if (typeof(cost) != 'number') { cost = 0.0 }

      startDate = new Date(volume['createTime']) // Volume Created Date
      endDate = new Date()
      timeDifference = endDate.getTime() - startDate.getTime()
      daysDifference = (timeDifference / (1000 * 3600 * 24)).toFixed(2)

      recommendationDetails = [
        "Upgrade volume ", volume['volumeId'], " ",
        "in AWS Account ", ds_aws_account['name'], " ",
        "(", ds_aws_account['id'], ") from GP2 to GP3"
      ].join('')

      result.push({
        resourceID: volume['volumeId'],
        resourceName: volume['volumeName'],
        resourceType: volume['volumeType'],
        encrypted: volume['encrypted'],
        createTime: startDate.toISOString(),
        iops: volume['iops'],
        size: volume['size'],
        state: volume['status'],
        throughput: volume['throughput'],
        attachmentStatus: volume['attachmentStatus'],
        tags: volume['tags'],
        region: volume['region'],
        gp2_price: parseFloat(volume['gp2_price'].toFixed(3)),
        gp3_price: parseFloat(volume['gp3_price'].toFixed(3)),
        savings: parseFloat(volume['savings'].toFixed(3)),
        savingsCurrency: volume['savingsCurrency'],
        cost: parseFloat(cost.toFixed(3)),
        age: parseFloat(daysDifference),
        accountID: ds_aws_account['id'],
        accountName: ds_aws_account['name'],
        recommendationDetails: recommendationDetails,
        policy_name: ds_applied_policy['name'],
        service: "AmazonEC2",
        total_savings: "",
        message: ""
      })
    }
  })

  result = _.sortBy(result, function(item) { return item['savings'] * -1 })

  savings_message = [
    ds_currency['symbol'], ' ',
    formatNumber(parseFloat(total_savings).toFixed(2), ds_currency['t_separator'])
  ].join('')

  total_volumes = ds_volumes_tag_filtered.length.toString()
  total_underutil_volumes = result.length.toString()
  underutil_volumes_percentage = (total_underutil_volumes / total_volumes * 100).toFixed(2).toString() + '%'

  volume_noun = "volume"
  if (total_volumes > 1) { volume_noun = "volumes" }

  volume_verb = "is"
  if (total_underutil_volumes > 1) { volume_verb = "are" }

  findings = [
    "Out of ", total_volumes, " GP2 ", volume_noun, " analyzed, ",
    total_underutil_volumes, " (", underutil_volumes_percentage,
    ") ", volume_verb, " recommended for upgrade to GP3."
  ].join('')

  api_disclaimer = ""

  if (ds_currency_conversion['to'] == undefined && ds_currency['code'] != 'USD') {
    api_disclaimer = "\n\nPrice and savings values are in USD due to a malfunction with Flexera's internal currency conversion API. Please contact Flexera support to report this issue."
  }

  // Dummy item to ensure the policy's check statement always executes at least once
  result.push({
    resourceID: "",          resourceName: "",    resourceType: "",
    encrypted: "",           createTime: "",      iops: "",
    size: "",                state: "",           throughput: "",
    attachmentStatus: "",    tags: "",            region: "",
    gp2_price: "",           gp3_price: "",       savings: "",
    savingsCurrency: "",     cost: "",            age: "",
    accountID: "",           accountName: "",     recommendationDetails: "",
    policy_name: "",         service: "",         total_savings: "",
    message: ""
  })

  result[0]['total_savings'] = savings_message
  result[0]['message'] = findings + api_disclaimer
EOS
end

###############################################################################
# Policy
###############################################################################

policy "pol_underutil_volumes" do
  validate_each $ds_underutil_volumes do
    summary_template "{{ with index data 0 }}{{ .policy_name }}{{ end }}: {{ len data }} AWS Underutilized GP2 Volumes Found"
    detail_template <<-'EOS'
    **Potential Monthly Savings:** {{ with index data 0 }}{{ .total_savings }}{{ end }}

    {{ with index data 0 }}{{ .message }}{{ end }}
    EOS
    check logic_or($ds_parent_policy_terminated, eq(val(item, "resourceID"), ""))
    escalate $esc_email
    escalate $esc_upgrade_volumes
    hash_exclude "age", "tags", "resourceName", "savings", "savingsCurrency", "total_savings", "message", "attachmentStatus"
    export do
      resource_level true
      field "accountID" do
        label "Account ID"
      end
      field "accountName" do
        label "Account Name"
      end
      field "resourceID" do
        label "Resource ID"
      end
      field "resourceName" do
        label "Resource Name"
      end
      field "tags" do
        label "Resource Tags"
      end
      field "age" do
        label "Age (Days)"
      end
      field "recommendationDetails" do
        label "Recommendation"
      end
      field "resourceType" do
        label "Resource Type"
      end
      field "region" do
        label "Region"
      end
      field "size" do
        label "Size (GB)"
      end
      field "state" do
        label "Status"
      end
      field "iops" do
        label "IOPS"
      end
      field "attachmentStatus" do
        label "Attachment Status"
      end
      field "cost" do
        label "Estimated Monthly Cost"
      end
      field "gp2_price" do
        label "Current Monthly List Price"
      end
      field "gp3_price" do
        label "New Monthly List Price"
      end
      field "savings" do
        label "Estimated Monthly Savings"
      end
      field "savingsCurrency" do
        label "Savings Currency"
      end
      field "service" do
        label "Service"
      end
      field "id" do
        label "ID"
        path "resourceID"
      end
    end
  end
end

###############################################################################
# Escalations
###############################################################################

escalation "esc_email" do
  automatic true
  label "Send Email"
  description "Send incident email"
  email $param_email
end

escalation "esc_upgrade_volumes" do
  automatic contains($param_automatic_action, "Upgrade Volumes to GP3")
  label "Upgrade Volumes to GP3"
  description "Approval to upgrade all selected volumes to GP3"
  run "upgrade_volumes", data
end

###############################################################################
# Cloud Workflow
###############################################################################

# Core CWF function to upgrade volumes to GP3
define upgrade_volumes($data) return $all_responses do
  $$all_responses = []

  foreach $volume in $data do
    sub on_error: handle_error() do
      call upgrade_volume($volume) retrieve $upgrade_response
    end
  end

  if inspect($$errors) != "null"
    raise join($$errors,"\n")
  end
end

# CWF function to upgrade a volume to GP3
define upgrade_volume($volume) return $response do
  $upgrade_url = "https://ec2." + $volume['region'] + ".amazonaws.com/?Action=ModifyVolume&Version=2016-11-15&VolumeType=gp3&VolumeId=" + $volume["resourceID"]
  task_label("POST " + $upgrade_url)

  $response = http_request(
    auth: $$auth_aws,
    https: true,
    verb: "post",
    href: "/",
    host: "ec2." + $volume['region'] + ".amazonaws.com",
    query_strings: {
      "Action": "ModifyVolume",
      "Version": "2016-11-15",
      "VolumeType": "gp3",
      "VolumeId": $volume["resourceID"]
    }
  )

  task_label("Post AWS volume response: " + $volume["resourceID"] + " " + to_json($response))
  $$all_responses << to_json({"req": "POST " + $upgrade_url, "resp": $response})

  if $response["code"] != 202 && $response["code"] != 200
    raise "Unexpected response posting AWS volume: "+ $volume["resourceID"] + " " + to_json($response)
  else
    task_label("Post AWS volume successful: " + $volume["resourceID"])
  end
end

define handle_error() do
  if !$$errors
    $$errors = []
  end
  $$errors << $_error["type"] + ": " + $_error["message"]
  # We check for errors at the end, and raise them all together
  # Skip errors handled by this definition
  $_error_behavior = "skip"
end

###############################################################################
# Meta Policy [alpha]
# Not intended to be modified or used by policy developers
###############################################################################

# If the meta_parent_policy_id is not set it will evaluate to an empty string and we will look for the policy itself,
# if it is set we will look for the parent policy.
datasource "ds_get_policy" do
  request do
    auth $auth_flexera
    host rs_governance_host
    ignore_status [404]
    path join(["/api/governance/projects/", rs_project_id, "/applied_policies/", switch(ne(meta_parent_policy_id,""), meta_parent_policy_id, policy_id) ])
    header "Api-Version", "1.0"
  end
  result do
    encoding "json"
    field "id", jmes_path(response, "id")
  end
end

datasource "ds_parent_policy_terminated" do
  run_script $js_decide_if_self_terminate, $ds_get_policy, policy_id, meta_parent_policy_id
end

# If the policy was applied by a meta_parent_policy we confirm it exists if it doesn't we confirm we are deleting
# This information is used in two places:
# - determining whether or not we make a delete call
# - determining if we should create an incident (we don't want to create an incident on the run where we terminate)
script "js_decide_if_self_terminate", type: "javascript" do
  parameters "found", "self_policy_id", "meta_parent_policy_id"
  result "result"
  code <<-EOS
  var result
  if (meta_parent_policy_id != "" && found.id == undefined) {
    result = true
  } else {
    result = false
  }
  EOS
end

# Two potentials ways to set this up:
# - this way and make a unneeded 'get' request when not deleting
# - make the delete request an interate and have it iterate over an empty array when not deleting and an array with one item when deleting
script "js_make_terminate_request", type: "javascript" do
  parameters "should_delete", "policy_id", "rs_project_id", "rs_governance_host"
  result "request"
  code <<-EOS

  var request = {
    auth:  'auth_flexera',
    host: rs_governance_host,
    path: "/api/governance/projects/" + rs_project_id + "/applied_policies/" + policy_id,
    headers: {
      "API-Version": "1.0",
      "Content-Type":"application/json"
    },
  }

  if (should_delete) {
    request.verb = 'DELETE'
  }
  EOS
end

datasource "ds_terminate_self" do
  request do
    run_script $js_make_terminate_request, $ds_parent_policy_terminated, policy_id, rs_project_id, rs_governance_host
  end
end

datasource "ds_is_deleted" do
  run_script $js_check_deleted, $ds_terminate_self
end

# This is just a way to have the check delete request connect to the farthest leaf from policy.
# We want the delete check to the first thing the policy does to avoid the policy erroring before it can decide whether or not it needs to self terminate
# Example a customer deletes a credential and then terminates the parent policy. We still want the children to self terminate
# The only way I could see this not happening is if the user who applied the parent_meta_policy was offboarded or lost policy access, the policies who are impersonating the user
# would not have access to self-terminate
# It may be useful for the backend to enable a mass terminate at some point for all meta_child_policies associated with an id.
script "js_check_deleted", type: "javascript" do
  parameters "response"
  result "result"
  code <<-EOS
  result = {"path":"/"}
  EOS
end

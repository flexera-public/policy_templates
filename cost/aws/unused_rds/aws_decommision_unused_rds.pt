name "AWS Decommision Unused RDS Instance"
rs_pt_ver 20180301
type "policy"
short_description "Gathers AWS CloudWatch data for instances on 30 day intervals. See the [README](https://github.com/rightscale/policy_templates/tree/master/cost/aws/instance_cloudwatch_utilization/) and [docs.rightscale.com/policies](http://docs.rightscale.com/policies/) to learn more."
long_description "Version: 1.4"
severity "low"
category "Cost"

###############################################################################
# Permissions
###############################################################################

permission "perm_read_creds" do
  actions   "rs_cm.show_sensitive","rs_cm.index_sensitive"
  resources "rs_cm.credentials"
end

###############################################################################
# Parameters
###############################################################################

parameter "param_email" do
  type "list"
  label "Email addresses to notify"
  description "Email addresses of the recipients you wish to notify when new incidents are created"
end

parameter "param_days" do
  type "number"
  label "Days"
  description "Number of days of inactivity before decommision"
  default 30
  min_value 0
end

parameter "param_exclusion_tag_key" do
  category "User Inputs"
  label "Exclusion Tag Key:Value"
  description "Cloud native tag key to ignore instances. Format: Key:Value"
  type "string"
  allowed_pattern /([\w]?)+\:([\w]?)+/
end


###############################################################################
# Authentication
###############################################################################

auth "auth_aws", type: "aws" do
  version 4
  service "rds"
  access_key cred('AWS_ACCESS_KEY_ID')
  secret_key cred('AWS_SECRET_ACCESS_KEY')
end

auth "monitoring_auth_aws", type: "aws" do
  version 4
  service "monitoring"
  access_key cred('AWS_ACCESS_KEY_ID')
  secret_key cred('AWS_SECRET_ACCESS_KEY')
end

###############################################################################
# Datasources
###############################################################################

#Generates list of Regions
datasource "ds_regions_list" do
  request do
    verb "GET"
    host "raw.githubusercontent.com"
    path "/rightscale/policy_templates/master/data/aws/regions.json"
    header "User-Agent", "RS Policies"
  end
end

datasource "ds_rds_instances" do
  run_script $js_rds_instances, $ds_rds_instances_set, $ds_list_tags_for_resource,$ds_cloudwatch_connections, $param_exclusion_tag_key
end

datasource "ds_rds_instances_set" do
  iterate $ds_regions_list
  request do
    run_script $js_rds_instances_set_request, val(iter_item,"region")
  end
  result do
    encoding "xml"
    collect xpath(response, "//DescribeDBInstancesResponse/DescribeDBInstancesResult/DBInstances/DBInstance[*]", "array") do
          field "region",val(iter_item,"region")
          field "instanceId", xpath(col_item,"DbiResourceId")
          field "instanceArn", xpath(col_item, "DBInstanceArn")
          field "instanceType", xpath(col_item, "DBInstanceClass")
          field "name", xpath(col_item,"DBInstanceIdentifier")
          field "status", xpath(col_item,"DBInstanceStatus")
          field "privateDnsName", xpath(col_item, "Endpoint/Address")

    end
  end
end

datasource "ds_list_tags_for_resource" do
  iterate $ds_rds_instances_set
  request do
    run_script $js_list_tags_for_resource, val(iter_item,"instanceArn"), val(iter_item,"region")
  end
  result do
  encoding "xml"
  collect xpath(response, "//ListTagsForResourceResponse/ListTagsForResourceResult/TagList/Tag[*]", "array") do
      field "instanceId", val(iter_item,"instanceId")
      field "key",        xpath(col_item,"Key")
      field "value",      xpath(col_item,"Value")
    end
  end
end

datasource "ds_cloudwatch_connections" do
  iterate $ds_rds_instances_set
  request do
    run_script $js_cloudwatch_connections, val(iter_item, "region"), val(iter_item, "name"), $param_days
  end
  result do
    encoding "json"
    collect jmes_path(response, "GetMetricStatisticsResponse.GetMetricStatisticsResult.Datapoints[*]") do
      field "region", val(iter_item, "region")
      field "instanceId", val(iter_item, "instanceId")
      field "name", val(iter_item, "name")
      field "privateDnsName", val(iter_item, "privateDnsName")
      field "sample_count", jmes_path(col_item, "SampleCount")
    end
  end
end

###############################################################################
# Scripts
###############################################################################

# merge the instances and tags and remove instances that have the exclusion tag
script "js_rds_instances", type: "javascript" do
  result "results"
  parameters "ds_rds_instance_set", "ds_list_tags_for_resource", "ds_cloudwatch_connections", "param_exclusion_tag_key"
  code <<-EOS
  var tag_key = param_exclusion_tag_key.split(':')[0]
  var tag_value = param_exclusion_tag_key.split(':')[1]
  var results = []

  console.log('ds_cloudwatch_connections:'+JSON.stringify(ds_cloudwatch_connections))
  console.log('ds_list_tags_for_resource:'+JSON.stringify(ds_list_tags_for_resource))

  /*var instance_tags = {}
  for ( n=0; n < ds_list_tags_for_resource.length; n++) {
    var tag_set = ds_list_tags_for_resource[n]
    instance_tags[tagset.instanceId]={
      tag_set: tag_set.key+':'+tag_set.value
    }
  }*/

  for ( n=0; n < ds_rds_instance_set.length; n++) {
    var instance = ds_rds_instance_set[n]
    // get metrics for instance
    var metrics = _.where(ds_cloudwatch_connections, {instanceId: instance.instanceId})
    var sample_count = _.pluck(metrics, 'sample_count')
    var connections = _.reduce(sample_count, function(memo, num){ return memo + num; }, 0);

    //check tags for instance
    //var tags = instance_tags[instance.instanceId]
    //if (_.contains(_.pluck(tags,'key'), tag_key) && _.contains(_.pluck(tags,'value'), tag_value)){
    //  continue
    //} else {
      results.push({
        region: instance.region,
        name: instance.name,
        arn: instance.instanceArn,
        instanceId: instance.instanceId,
        instanceType: instance.instanceType,
        privateDnsName: instance.privateDnsName,
        status: instance.status,
        connections: connections,
        //tag_set: instance_tags[instance.instanceId].tag_set
      })
    //}
  }
EOS
end

#get list of the rds instances thier properties
script "js_rds_instances_set_request", type: "javascript" do
  result "results"
  parameters "region"
  code <<-EOS
  var end_date = new Date().toISOString()
  var start_date = new Date(new Date().setDate(new Date().getDate() - 30)).toISOString();
  results = {
    "auth": "auth_aws",
    "host": 'rds.'+region+'.amazonaws.com',
    "verb": "GET",
    "path": "/",
    "headers": {
      "User-Agent": "RS Policies",
      "Content-Type": "text/xml"
    }
    "query_params": {
      'Action': 'DescribeDBInstances',
      'Version': '2014-10-31'
    }
  }
EOS
end

#get list of the rds tags for instances
script "js_list_tags_for_resource", type: "javascript" do
  result "results"
  parameters "instanceArn","region"
  code <<-EOS
  var end_date = new Date().toISOString()
  var start_date = new Date(new Date().setDate(new Date().getDate() - 30)).toISOString();
  results = {
    "auth": "auth_aws",
    "host": 'rds.'+region+'.amazonaws.com',
    "verb": "GET",
    "path": "/",

    "headers": {
      "User-Agent": "RS Policies",
      "Content-Type": "text/xml"
    }
    "query_params": {
      'Action': 'ListTagsForResource',
      'ResourceName': instanceArn,
      'Version': '2014-10-31'
    }
  }
EOS
end

script "js_cloudwatch_connections", type: "javascript" do
  result "results"
  parameters "region","name","param_days"
  code <<-EOS
  var days = parseInt(param_days)
  var end_date = new Date().toISOString()
  var start_date = new Date(new Date().setDate(new Date().getDate() - days )).toISOString();
  results = {
    "auth": "monitoring_auth_aws",
    "host": 'monitoring.'+region+'.amazonaws.com',
    "verb": "GET",
    "path": "/",
    "headers": {
      "User-Agent": "RS Policies",
      "Content-Type": "application/json",
      "x-amz-target": "GraniteServiceVersion20100801.GetMetricStatistics",
      "Accept": "application/json",
      "Content-Encoding": "amz-1.0"
    }
    "query_params": {
      'Action': 'GetMetricStatistics',
      'Version': '2010-08-01',
      'Namespace': 'AWS/RDS',
      //'MetricName':'CPUUtilization',
      'MetricName': 'DatabaseConnections',
      'Dimensions.member.1.Name': 'DBInstanceIdentifier',
      'Dimensions.member.1.Value': name,
      'StartTime': start_date,
      'EndTime': end_date,
      'Period': "2592000",
      //Period: "3600"
      'Statistics.member.1': 'SampleCount',
    }
  }
EOS
end

###############################################################################
# Policy
###############################################################################

policy "pol_unused_rds" do
  validate_each $ds_rds_instances do
    summary_template "{{ rs_project_name }} (Account ID: {{ rs_project_id }}): {{ len data }} rows containing AWS Used RDS Instances"
    detail_template <<-EOS
# AWS Instance Utilization
| Region | Name | Status | Instance ID | Private DNS Name | Instance Type | Connections | ARN |
| ------ | ---- | ------ | ---------- | ---------------- | ------------- | ------------ | --- |
{{ range data -}}
| {{.region}} | {{.name}} | {{.status}} | {{.instanceId}} | {{.privateDnsName }} | {{.instanceType}} | {{.connections}} | {{.arn}}
{{ end -}}
___
###### Policy Applied in Account: {{ rs_project_name }} (Account ID: {{ rs_project_id }}) within Org: {{ rs_org_name }} (Org ID: {{ rs_org_id }})
EOS
    #escalate $email
    #escalate $decommision_rds
    check eq(to_n(val(item,"connections")),0)
    #check eq(size(data), 0)
  end
end


###############################################################################
# Escalations
###############################################################################

escalation "email" do
  email $param_email
end

escalation "decommision_rds" do
  run "decommision_rds", data
end

###############################################################################
# Cloud Workflow
###############################################################################

define decommision_rds($data) return $all_responses do
  $$debug=true
  $$log = []
  $all_responses = []
  $key = first(split($param_take_action_tag,':'))
  $value = last(split($param_take_action_tag,':'))

  $syslog_subject = "AWS Instance Utilization with CloudWatch: "
  call sys_log(join([$syslog_subject, "Identified Instances"]),to_s($data))
  foreach $item in $data do
    $response = http_request(
      https: true,
      verb: "post",
      host: "ec2."+$item["region"]+".amazonaws.com",
      signature: { "type": "aws" },
      query_strings: {
        "Action": "CreateTags",
        "Version": "2012-06-01",
        "ResourceId.1": $item["instanceId"],
        "Tag.1.Key": $key,
        "Tag.1.Value": $value
      }
    )
    $all_responses << $response
  end
  call sys_log(join([$syslog_subject, "Responses"]),to_s($all_responses))
end

define handle_error($response) do
  $status_code = $response["code"]
  if $status_code == 404
    $_error_behavior = "skip"
  else
    $_error_behavior = "raise"
  end
end

define sys_log($subject, $detail) do
  if $$debug
    rs_cm.audit_entries.create(
      notify: "None",
      audit_entry: {
        auditee_href: @@account,
        summary: $subject,
        detail: $detail
      }
    )
  end
end

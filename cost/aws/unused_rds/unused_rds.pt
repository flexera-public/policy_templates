name "AWS Unused RDS Instances"
rs_pt_ver 20180301
type "policy"
short_description "Check for database services that have no connections and delete them after approval. See the [README](https://github.com/flexera-public/policy_templates/tree/master/cost/aws/unused_rds) and [docs.flexera.com/flexera/EN/Automation](https://docs.flexera.com/flexera/EN/Automation/AutomationGS.htm) to learn more."
long_description ""
severity "low"
category "Cost"
default_frequency "weekly"
info(
  version: "6.1",
  provider: "AWS",
  service: "RDS",
  policy_set: "Unused Database Services",
  recommendation_type: "Usage Reduction"
)

###############################################################################
# Parameters
###############################################################################

parameter "param_email" do
  type "list"
  category "Policy Settings"
  label "Email Addresses"
  description "A list of email addresses to notify."
  default []
end

parameter "param_aws_account_number" do
  type "string"
  category "Policy Settings"
  label "Account Number"
  description "The account number for AWS STS Cross Account Roles."
  default ""
end

parameter "param_unusedtime" do
  type "number"
  category "Policy Settings"
  label "Unused Days"
  description "The number of days an RDS instance needs to have had no connections to consider it unused."
  default 30
  min_value 1
end

parameter "param_min_savings" do
  type "number"
  category "Policy Settings"
  label "Minimum Savings Threshold"
  description "Minimum potential savings required to generate a recommendation."
  min_value 0
  default 0
end

parameter "param_regions_allow_or_deny" do
  type "string"
  category "Filters"
  label "Allow/Deny Regions"
  description "Allow or Deny entered regions. See the README for more details"
  allowed_values "Allow", "Deny"
  default "Allow"
end

parameter "param_regions_list" do
  type "list"
  category "Filters"
  label "Allow/Deny Regions List"
  allowed_pattern /^([a-zA-Z-_]+-[a-zA-Z0-9-_]+-[0-9-_]+,*|)+$/
  description "A list of allowed or denied regions. See the README for more details"
  default []
end

parameter "param_exclusion_tags" do
  type "list"
  category "Filters"
  label "Exclusion Tags (Key:Value)"
  description "Cloud native tags to ignore resources that you don't want to produce recommendations for. Use Key:Value format for specific tag key/value pairs, and Key:* format to match any resource with a particular key, regardless of value. Examples: env:production, DO_NOT_DELETE:*"
  allowed_pattern /(^$)|[\w]*\:.*/
  default []
end

parameter "param_automatic_action" do
  type "list"
  category "Actions"
  label "Automatic Actions"
  description "When this value is set, this policy will automatically take the selected action(s)"
  allowed_values ["Terminate Instances"]
end

###############################################################################
# Authentication
###############################################################################

credentials "auth_aws" do
  schemes "aws", "aws_sts"
  label "AWS"
  description "Select the AWS Credential from the list"
  tags "provider=aws"
  aws_account_number $param_aws_account_number
end

credentials "auth_flexera" do
  schemes "oauth2"
  label "Flexera"
  description "Select Flexera One OAuth2 credentials"
  tags "provider=flexera"
end

###############################################################################
# Pagination
###############################################################################

pagination "pagination_aws_getmetricdata" do
  get_page_marker do
    body_path "NextToken"
  end
  set_page_marker do
    body_field "NextToken"
  end
end

###############################################################################
# Datasources
###############################################################################

# Get applied policy metadata for use later
datasource "ds_applied_policy" do
  request do
    auth $auth_flexera
    host rs_governance_host
    path join(["/api/governance/projects/", rs_project_id, "/applied_policies/", policy_id])
    header "Api-Version", "1.0"
  end
end

# Get region-specific Flexera API endpoints
datasource "ds_flexera_api_hosts" do
  run_script $js_flexera_api_hosts, rs_optima_host
end

script "js_flexera_api_hosts", type: "javascript" do
  parameters "rs_optima_host"
  result "result"
  code <<-EOS
  host_table = {
    "api.optima.flexeraeng.com": {
      flexera: "api.flexera.com",
      fsm: "api.fsm.flexeraeng.com"
    },
    "api.optima-eu.flexeraeng.com": {
      flexera: "api.flexera.eu",
      fsm: "api.fsm-eu.flexeraeng.com"
    },
    "api.optima-au.flexeraeng.com": {
      flexera: "api.flexera.au",
      fsm: "api.fsm-au.flexeraeng.com"
    }
  }

  result = host_table[rs_optima_host]
EOS
end

# Get AWS account info
datasource "ds_cloud_vendor_accounts" do
  request do
    auth $auth_flexera
    host val($ds_flexera_api_hosts, 'flexera')
    path join(["/finops-analytics/v1/orgs/", rs_org_id, "/cloud-vendor-accounts"])
    header "Api-Version", "1.0"
  end
  result do
    encoding "json"
    collect jmes_path(response, "values[*]") do
      field "id", jmes_path(col_item, "aws.accountId")
      field "name", jmes_path(col_item, "name")
      field "tags", jmes_path(col_item, "tags")
    end
  end
end

datasource "ds_get_caller_identity" do
  request do
    auth $auth_aws
    verb "GET"
    host "sts.amazonaws.com"
    path "/"
    header "User-Agent", "RS Policies"
    query "Action", "GetCallerIdentity"
    query "Version", "2011-06-15"
  end
  result do
    encoding "xml"
    collect xpath(response, "//GetCallerIdentityResponse/GetCallerIdentityResult") do
      field "account", xpath(col_item, "Account")
    end
  end
end

datasource "ds_aws_account" do
  run_script $js_aws_account, $ds_cloud_vendor_accounts, $ds_get_caller_identity
end

script "js_aws_account", type:"javascript" do
  parameters "ds_cloud_vendor_accounts", "ds_get_caller_identity"
  result "result"
  code <<-EOS
  result = _.find(ds_cloud_vendor_accounts, function(account) {
    return account['id'] == ds_get_caller_identity[0]['account']
  })

  // This is in case the API does not return the relevant account info
  if (result == undefined) {
    result = {
      id: ds_get_caller_identity[0]['account'],
      name: "",
      tags: {}
    }
  }
EOS
end

datasource "ds_billing_centers" do
  request do
    auth $auth_flexera
    host rs_optima_host
    path join(["/analytics/orgs/", rs_org_id, "/billing_centers"])
    header "Api-Version", "1.0"
    header "User-Agent", "RS Policies"
    query "view", "allocation_table"
    ignore_status [403]
  end
  result do
    encoding "json"
    collect jmes_path(response, "[*]") do
      field "href", jmes_path(col_item, "href")
      field "id", jmes_path(col_item, "id")
      field "name", jmes_path(col_item, "name")
      field "parent_id", jmes_path(col_item, "parent_id")
    end
  end
end

# Gather top level billing center IDs for when we pull cost data
datasource "ds_top_level_bcs" do
  run_script $js_top_level_bcs, $ds_billing_centers
end

script "js_top_level_bcs", type: "javascript" do
  parameters "ds_billing_centers"
  result "result"
  code <<-EOS
  filtered_bcs = _.filter(ds_billing_centers, function(bc) {
    return bc['parent_id'] == null || bc['parent_id'] == undefined
  })

  result = _.compact(_.pluck(filtered_bcs, 'id'))
EOS
end

datasource "ds_currency_reference" do
  request do
    host "raw.githubusercontent.com"
    path "/rightscale/policy_templates/master/cost/scheduled_reports/currency_reference.json"
    header "User-Agent", "RS Policies"
  end
end

datasource "ds_currency_code" do
  request do
    auth $auth_flexera
    host rs_optima_host
    path join(["/bill-analysis/orgs/", rs_org_id, "/settings/currency_code"])
    header "Api-Version", "0.1"
    header "User-Agent", "RS Policies"
    ignore_status [403]
  end
  result do
    encoding "json"
    field "id", jmes_path(response, "id")
    field "value", jmes_path(response, "value")
  end
end

datasource "ds_currency" do
  run_script $js_currency, $ds_currency_reference, $ds_currency_code
end

script "js_currency", type:"javascript" do
  parameters "ds_currency_reference", "ds_currency_code"
  result "result"
  code <<-EOS
  symbol = "$"
  separator = ","

  if (ds_currency_code['value'] != undefined) {
    if (ds_currency_reference[ds_currency_code['value']] != undefined) {
      symbol = ds_currency_reference[ds_currency_code['value']]['symbol']

      if (ds_currency_reference[ds_currency_code['value']]['t_separator'] != undefined) {
        separator = ds_currency_reference[ds_currency_code['value']]['t_separator']
      } else {
        separator = ""
      }
    }
  }

  result = {
    symbol: symbol,
    separator: separator
  }
EOS
end

datasource "ds_describe_regions" do
  request do
    auth $auth_aws
    verb "GET"
    host "ec2.amazonaws.com"
    path "/"
    query "Action", "DescribeRegions"
    query "Version", "2016-11-15"
    query "Filter.1.Name", "opt-in-status"
    query "Filter.1.Value.1", "opt-in-not-required"
    query "Filter.1.Value.2", "opted-in"
    # Header X-Meta-Flexera has no affect on datasource query, but is required for Meta Policies
    # Forces `ds_is_deleted` datasource to run first during policy execution
    header "Meta-Flexera", val($ds_is_deleted, "path")
  end
  result do
    encoding "xml"
    collect xpath(response, "//DescribeRegionsResponse/regionInfo/item", "array") do
      field "region", xpath(col_item, "regionName")
    end
  end
end

datasource "ds_regions" do
  run_script $js_regions, $ds_describe_regions, $param_regions_list, $param_regions_allow_or_deny
end

script "js_regions", type:"javascript" do
  parameters "ds_describe_regions", "param_regions_list", "param_regions_allow_or_deny"
  result "result"
  code <<-EOS
  allow_deny_test = { "Allow": true, "Deny": false }

  if (param_regions_list.length > 0) {
    result = _.filter(ds_describe_regions, function(item) {
      return _.contains(param_regions_list, item['region']) == allow_deny_test[param_regions_allow_or_deny]
    })
  } else {
    result = ds_describe_regions
  }
EOS
end

datasource "ds_rds_instances_set" do
  iterate $ds_regions
  request do
    run_script $js_rds_instances_set, val(iter_item,"region")
  end
  result do
    encoding "xml"
    collect xpath(response, "//DescribeDBInstancesResponse/DescribeDBInstancesResult/DBInstances/DBInstance[*]", "array") do
      field "instanceId", xpath(col_item, "DbiResourceId")
      field "instanceArn", xpath(col_item, "DBInstanceArn")
      field "resourceType", xpath(col_item, "DBInstanceClass")
      field "name", xpath(col_item, "DBInstanceIdentifier")
      field "status", xpath(col_item, "DBInstanceStatus")
      field "privateDnsName", xpath(col_item, "Endpoint/Address")
      field "databaseEngine", xpath(col_item, "Engine")
      field "engineVersion", xpath(col_item, "EngineVersion")
      field "region",val(iter_item, "region")
    end
  end
end

script "js_rds_instances_set", type: "javascript" do
  parameters "region"
  result "request"
  code <<-EOS
  end_date = new Date()
  end_date = end_date.toISOString()

  start_date = new Date()
  start_date.setDate(start_date.getDate() - 30)
  start_date = start_date.toISOString()

  var request = {
    auth: "auth_aws",
    host: "rds." + region + ".amazonaws.com",
    verb: "GET",
    path: "/",
    headers: {
      "User-Agent": "RS Policies",
      "Content-Type": "text/xml"
    }
    query_params: {
      "Action": "DescribeDBInstances",
      "Version": "2014-10-31"
    }
  }
EOS
end

datasource "ds_resource_tags" do
  iterate $ds_rds_instances_set
  request do
    run_script $js_resource_tags, val(iter_item, "instanceArn"), val(iter_item, "region")
  end
  result do
    encoding "xml"
    collect xpath(response, "//ListTagsForResourceResponse/ListTagsForResourceResult/TagList/Tag[*]", "array") do
      field "instanceId", val(iter_item, "instanceId")
      field "key", xpath(col_item, "Key")
      field "value", xpath(col_item, "Value")
    end
  end
end

script "js_resource_tags", type: "javascript" do
  parameters "instanceArn", "region"
  result "request"
  code <<-EOS
  end_date = new Date()
  end_date = end_date.toISOString()

  start_date = new Date()
  start_date.setDate(start_date.getDate() - 30)
  start_date = start_date.toISOString()

  var request = {
    auth: "auth_aws",
    host: "rds." + region + ".amazonaws.com",
    verb: "GET",
    path: "/",
    headers: {
      "User-Agent": "RS Policies",
      "Content-Type": "text/xml"
    }
    query_params: {
      "Action": "ListTagsForResource",
      "ResourceName": instanceArn,
      "Version": "2014-10-31"
    }
  }
EOS
end

datasource "ds_rds_instances" do
  run_script $js_rds_instances, $ds_rds_instances_set, $ds_resource_tags, $param_exclusion_tags
end

script "js_rds_instances", type: "javascript" do
  parameters "ds_rds_instances_set", "ds_resource_tags", "param_exclusion_tags"
  result "result"
  code <<-EOS
  tag_object = {}

  _.each(ds_resource_tags, function(item) {
    id = item['instanceId'].toLowerCase()
    key = item['key']
    value = item['value']

    if (tag_object[id] == undefined) {
      tag_object[id] = {}
    }

    tag_object[id][key] = value
  })

  result = []

  _.each(ds_rds_instances_set, function(instance) {
    id = instance['instanceId'].toLowerCase()

    tags = {}
    if (tag_object[id] != undefined) { tags = tag_object[id] }

    include_instance = true

    _.each(param_exclusion_tags, function(tag) {
      key = tag.split(':')[0]
      value = tag.split(':')[1]

      if (tags[key] == value) {
        include_instance = false
      }

      if (tags[key] != undefined && value == '*') {
        include_instance = false
      }
    })

    tag_string = []

    _.each(Object.keys(tags), function(key) {
      tag_string.push(key + '=' + tags[key])
    })

    tag_string = tag_string.join(', ')

    if (include_instance) {
      result.push({
        instanceId: instance['instanceId'],
        instanceArn: instance['instanceArn'],
        resourceType: instance['resourceType'],
        name: instance['name'],
        status: instance['status'],
        databaseEngine: instance['databaseEngine'],
        engineVersion: instance['engineVersion'],
        privateDnsName: instance['privateDnsName'],
        region: instance['region'],
        tags: tag_string
      })
    }
  })
EOS
end

datasource "ds_cloudwatch_queries" do
  run_script $js_cloudwatch_queries, $ds_rds_instances, $param_unusedtime
end

script "js_cloudwatch_queries", type: "javascript" do
  parameters "ds_rds_instances", "param_unusedtime"
  result "result"
  code <<-EOS
  queries = {}

  _.each(ds_rds_instances, function(resource) {
    _.each(["DatabaseConnections"], function(metric) {
      _.each(["Average"], function(statistic) {
        query = {
          // Replace `-` with `_` in the Id to avoid CloudWatch API error
          "Id": resource['name'].replace(/\-/g, '_') + "_" + metric + "_" + statistic,
          "Label": resource['name'] + " " + metric + " " + statistic,
          "MetricStat": {
            "Metric": {
              "Namespace": "AWS/RDS",
              "MetricName": metric,
              "Dimensions": [
                { "Name": "DBInstanceIdentifier", "Value": resource['name'] }
              ]
            },
            "Period": 2592000,
            "Stat": statistic
          },
          "ReturnData": true
        }

        if (queries[resource['region']] == undefined || queries[resource['region']] == null) {
          queries[resource['region']] = []
        }

        queries[resource['region']].push(query)
      })
    })
  })

  result = []

  end_date = new Date()
  end_date = parseInt(end_date.getTime() / 1000)

  start_date = new Date()
  start_date.setDate(start_date.getDate() - param_unusedtime)
  start_date = parseInt(start_date.getTime() / 1000)

  chunk_size = 500

  _.each(Object.keys(queries), function(region) {
    for (i = 0; i < queries[region].length; i += chunk_size) {
      chunk = queries[region].slice(i, i + chunk_size)

      result.push({
        'MetricDataQueries': chunk,
        'region': region
      })
    }
  })
EOS
end

datasource "ds_cloudwatch_data" do
  iterate $ds_cloudwatch_queries
  request do
    run_script $js_cloudwatch_data, val(iter_item, "region"), val(iter_item, "MetricDataQueries")
  end
  result do
    encoding "json"
    collect jmes_path(response, "MetricDataResults[*]") do
      field "region", val(iter_item, "region")
      field "id", jmes_path(col_item, "Id")
      field "label", jmes_path(col_item, "Label")
      field "values", jmes_path(col_item, "Values")
    end
  end
end

script "js_cloudwatch_data", type: "javascript" do
  parameters "region", "MetricDataQueries"
  result "request"
  code <<-EOS
  // Slow down rate of requests to prevent throttling
  api_wait = 5
  var now = new Date().getTime()
  while(new Date().getTime() < now + (api_wait * 1000)) { /* Do nothing */ }

  end_date = parseInt(new Date().getTime() / 1000)
  start_date = parseInt(new Date(new Date().setDate(new Date().getDate() - 30)).getTime() / 1000)

  var request = {
    auth: "auth_aws",
    host: "monitoring." + region + ".amazonaws.com",
    verb: "POST",
    path: "/",
    pagination: "pagination_aws_getmetricdata",
    headers: {
      "User-Agent": "RS Policies",
      "Content-Type": "application/json",
      "x-amz-target": "GraniteServiceVersion20100801.GetMetricData",
      "Accept": "application/json",
      "Content-Encoding": "amz-1.0"
    }
    query_params: {
      "Action": "GetMetricData",
      "Version": "2010-08-01"
    },
    body: JSON.stringify({
      "StartTime": start_date,
      "EndTime": end_date,
      "MetricDataQueries": MetricDataQueries
    })
  }
EOS
end

datasource "ds_rds_idle_instances" do
  run_script $js_rds_idle_instances, $ds_rds_instances, $ds_cloudwatch_data
end

script "js_rds_idle_instances", type: "javascript" do
  parameters "ds_rds_instances", "ds_cloudwatch_data"
  result "result"
  code <<-EOS
  result = []
  cloudwatch_activity = {}

  _.each(ds_cloudwatch_data, function(item) {
    instanceId = item['label'].split(' ')[0].toLowerCase()

    if (cloudwatch_activity[instanceId] == undefined) {
      cloudwatch_activity[instanceId] = 0
    }

    if (typeof(item['values']) == 'object') {
      _.each(item['values'], function(value) {
        cloudwatch_activity[instanceId] += value
      })
    }
  })

  _.each(ds_rds_instances, function(instance) {
    instanceId = instance['instanceId'].toLowerCase()

    if (cloudwatch_activity[instanceId] == undefined || cloudwatch_activity[instanceId] == 0) {
      result.push(instance)
    }
  })
EOS
end

datasource "ds_instance_costs" do
  request do
    run_script $js_instance_costs, $ds_aws_account, $ds_top_level_bcs, rs_org_id, rs_optima_host
  end
  result do
    encoding "json"
    collect jmes_path(response,"rows[*]") do
      field "resource_id", jmes_path(col_item, "dimensions.resource_id")
      field "vendorAccountName", jmes_path(col_item, "dimensions.vendor_account_name")
      field "resource_type", jmes_path(col_item, "dimensions.resource_type")
      field "cost", jmes_path(col_item,"metrics.cost_amortized_blended_adj")
    end
  end
end

script "js_instance_costs", type:"javascript" do
  parameters "ds_aws_account", "ds_top_level_bcs", "rs_org_id", "rs_optima_host"
  result "request"
  code <<-EOS
  start_date = new Date()
  start_date.setDate(start_date.getDate() - 3)
  start_date = start_date.toISOString().split('T')[0]

  end_date = new Date()
  end_date.setDate(end_date.getDate() - 2)
  end_date = end_date.toISOString().split('T')[0]

  var request = {
    auth: "auth_flexera",
    host: rs_optima_host,
    verb: "POST",
    path: "/bill-analysis/orgs/" + rs_org_id + "/costs/select",
    body_fields: {
      "dimensions": ["resource_id", "resource_type", "vendor_account_name"],
      "granularity": "day",
      "start_at": start_date,
      "end_at": end_date,
      "metrics": ["cost_amortized_blended_adj"],
      "billing_center_ids": ds_top_level_bcs,
      "limit": 100000,
      "filter": {
        "type": "and",
        "expressions": [
          {
            "dimension": "service",
            "type": "equal",
            "value": "AmazonRDS"
          },
          {
            "dimension": "vendor_account",
            "type": "equal",
            "value": ds_aws_account['id']
          }
        ]
      }
    },
    headers: {
      "User-Agent": "RS Policies",
      "Api-Version": "1.0"
    },
    ignore_status: [400]
  }
EOS
end

datasource "ds_instance_costs_grouped" do
  run_script $js_instance_costs_grouped, $ds_instance_costs
end

script "js_instance_costs_grouped", type: "javascript" do
  parameters "ds_instance_costs"
  result "result"
  code <<-EOS
  // Multiple a single day's cost by the average number of days in a month.
  // The 0.25 is to account for leap years for extra precision.
  cost_multiplier = 365.25 / 12

  // Group cost data by resourceId for later use
  result = {}

  _.each(ds_instance_costs, function(item) {
    id = item['resource_id'].toLowerCase()

    if (result[id] == undefined) { result[id] = 0.0 }
    result[id] += item['cost'] * cost_multiplier
  })
EOS
end

datasource "ds_instance_cost_mapping" do
  run_script $js_instance_cost_mapping, $ds_rds_instances, $ds_rds_idle_instances, $ds_instance_costs_grouped, $ds_cloudwatch_data, $ds_currency, $ds_aws_account, $ds_applied_policy, $param_unusedtime, $param_min_savings
end

script "js_instance_cost_mapping", type: "javascript" do
  parameters "ds_rds_instances", "ds_rds_idle_instances", "ds_instance_costs_grouped", "ds_cloudwatch_data", "ds_currency", "ds_aws_account", "ds_applied_policy", "param_unusedtime", "param_min_savings"
  result "result"
  code <<-'EOS'
  // Used for formatting numbers to look pretty
  function formatNumber(number, separator){
    numString = number.toString()
    values = numString.split(".")
    formatted_number = ''

    while (values[0].length > 3) {
      var chunk = values[0].substr(-3)
      values[0] = values[0].substr(0, values[0].length - 3)
      formatted_number = separator + chunk + formatted_number
    }

    if (values[0].length > 0) { formatted_number = values[0] + formatted_number }
    if (values[1] == undefined) { return formatted_number }

    return formatted_number + "." + values[1]
  }

  result = []
  total_savings = 0.0

  _.each(ds_rds_idle_instances, function(instance) {
    instanceId = instance['instanceId'].toLowerCase()

    savings = 0.0
    if (ds_instance_costs_grouped[instanceId] != undefined) {
      savings = ds_instance_costs_grouped[instanceId]
    }

    if (savings >= param_min_savings) {
      total_savings += savings

      recommendationDetails = [
        "Terminate RDS instance ", instance['instanceId'], " ",
        "in AWS Account ", ds_aws_account['name'], " (", ds_aws_account['id'], ")"
      ].join('')

      result.push({
        accountID: ds_aws_account['id'],
        accountName: ds_aws_account['name'],
        resourceID: instance['instanceId'],
        resourceName: instance['name'],
        recommendationDetails: recommendationDetails,
        tags: instance['tags'],
        resourceType: instance['resourceType'],
        region: instance['region'],
        arn: instance['instanceArn'],
        privateDnsName: instance['privateDnsName'],
        state: instance['status'],
        databaseEngine: instance['databaseEngine'],
        engineVersion: instance['engineVersion'],
        savings: parseFloat(savings.toFixed(3)),
        savingsCurrency: ds_currency['symbol'],
        lookbackPeriod: param_unusedtime,
        service: "AmazonRDS"
        // Dummy values to ensure hash_exclude works properly
        total_savings: "",
        message: "",
        policy_name: ""
      })
    }
  })

  total_instances = ds_rds_instances.length.toString()
  total_unused_instances = result.length.toString()
  unused_percentage = (total_unused_instances / total_instances * 100).toFixed(2).toString() + '%'

  instance_noun = "instance"
  if (total_instances != 1) { instance_noun += "s" }

  instance_verb = "is"
  if (total_unused_instances != 1) { instance_verb = "are" }

  findings = [
    "Out of ", total_instances, " AWS RDS ", instance_noun,
    " analyzed, ", total_unused_instances, " (", unused_percentage,
    ") ", instance_verb, " unused and recommended for termination. "
  ].join('')

  day_noun = "day"
  if (param_unusedtime != 1) { day_noun += "s" }

  idle_message = [
    "An RDS instance is considered unused if it has not had any connections ",
    "for at least ", param_unusedtime, " ", day_noun, ".\n\n"
  ].join('')

  disclaimer = "The above settings can be modified by editing the applied policy and changing the appropriate parameters."

  savings_message = [
    ds_currency['symbol'], ' ',
    formatNumber(parseFloat(total_savings).toFixed(2), ds_currency['separator'])
  ].join('')

  // Sort by descending order of savings value
  result = _.sortBy(result, function(item) { return item['savings'] * -1 })

  // Dummy entry to ensure the check statement in validation always runs at least once
  result.push({
    resourceID: "",
    tags: "",
    total_savings: "",
    message: "",
    savings: "",
    savingsCurrency: ""
  })

  result[0]['total_savings'] = savings_message
  result[0]['message'] = findings + idle_message + disclaimer
  result[0]['policy_name'] = ds_applied_policy['name']
EOS
end

###############################################################################
# Policy
###############################################################################

policy "pol_unused_rds" do
  validate_each $ds_instance_cost_mapping do
    summary_template "{{ with index data 0 }}{{ .policy_name }}{{ end }}: {{ len data }} AWS Unused RDS Instances Found"
    detail_template <<-'EOS'
    **Potential Monthly Savings:** {{ with index data 0 }}{{ .total_savings }}{{ end }}

    {{ with index data 0 }}{{ .message }}{{ end }}
    EOS
    # Policy check fails and incident is created only if data is not empty and the Parent Policy has not been terminated
    check logic_or($ds_parent_policy_terminated, eq(val(item, "resourceID"), ""))
    escalate $esc_email
    escalate $esc_terminate_rds
    hash_exclude "tags", "total_savings", "message", "savings", "savingsCurrency"
    export do
      resource_level true
      field "accountID" do
        label "Account ID"
      end
      field "accountName" do
        label "Account Name"
      end
      field "resourceID" do
        label "Resource ID"
      end
      field "resourceName" do
        label "Resource Name"
      end
      field "tags" do
        label "Resource Tags"
      end
      field "region" do
        label "Region"
      end
      field "state" do
        label "State"
      end
      field "savings" do
        label "Estimated Monthly Savings"
      end
      field "savingsCurrency" do
        label "Savings Currency"
      end
      field "privateDnsName" do
        label "Private DNS Name"
      end
      field "resourceType" do
        label "Resource Type"
      end
      field "databaseEngine" do
        label "Database Engine"
      end
      field "engineVersion" do
        label "Engine Version"
      end
      field "arn" do
        label "ARN"
      end
      field "platform" do
        label "Platform"
        path "databaseEngine"
      end
      field "service" do
        label "Service"
      end
      field "lookbackPeriod" do
        label "Look Back Period (Days)"
      end
      field "id" do
        label "id"
        path "resourceID"
      end
    end
  end
end

###############################################################################
# Escalations
###############################################################################

escalation "esc_email" do
  automatic true
  label "Send Email"
  description "Send incident email"
  email $param_email
end

escalation "esc_terminate_rds" do
  automatic contains($param_automatic_action, "Terminate Instances")
  label "Terminate RDS Instances"
  description "Terminate selected RDS Instances"
  run "terminate_rds", data, rs_optima_host
end

###############################################################################
# Cloud Workflow
###############################################################################

define terminate_rds($data, $$rs_optima_host) return $all_responses do
  $$debug=true
  $$log = []
  $all_responses = []

  $syslog_subject = "AWS Unused RDS Instance: "
  call sys_log(join([$syslog_subject, "Identified Instances"]),to_s($data))
  foreach $item in $data do
    $response = http_request(
      auth: $$auth_aws,
      https: true,
      verb: "get",
      host: "rds." + $item["region"] + ".amazonaws.com",
      href: "/",
      query_strings: {
        "Action": "DeleteDBInstance",
        "Version": "2014-09-01",
        "DBInstanceIdentifier": $item["resourceName"],
        "SkipFinalSnapshot":"true"
      }
    )
    $all_responses << $response
  end
  call sys_log(join([$syslog_subject, "Responses"]),to_s($all_responses))
end

define handle_error($response) do
  $status_code = $response["code"]
  if $status_code == 404
    $_error_behavior = "skip"
  else
    $_error_behavior = "raise"
  end
end

define sys_log($subject, $detail) do
  # Create empty errors array if doesn't already exist
  if !$$errors
    $$errors = []
  end
  # Check if debug is enabled
  if $$debug
    # Append to global $$errors
    # This is the suggested way to capture errors
    $$errors << "Unexpected error for " + $subject + "\n  " + to_s($detail)
    # If Flexera NAM Zone, create audit_entries [to be deprecated]
    # This is the legacy method for capturing errors and only supported on Flexera NAM
    if $$rs_optima_host == "api.optima.flexeraeng.com"
      # skip_error_and_append is used to catch error if rs_cm.audit_entries.create fails unexpectedly
      $task_label = "Creating audit entry for " + $subject
      sub task_label: $task, on_error: skip_error_and_append($task) do
        rs_cm.audit_entries.create(
          notify: "None",
          audit_entry: {
            auditee_href: @@account,
            summary: $subject,
            detail: $detail
          }
        )
      end # End sub on_error
    end # End if rs_optima_host
  end # End if debug is enabled
end

define skip_error_and_append($subject) do
  $$errors << "Unexpected error for " + $subject + "\n  " + to_s($_error)
  $_error_behavior = "skip"
end

###############################################################################
# Meta Policy [alpha]
# Not intended to be modified or used by policy developers
###############################################################################

# If the meta_parent_policy_id is not set it will evaluate to an empty string and we will look for the policy itself,
# if it is set we will look for the parent policy.
datasource "ds_get_policy" do
  request do
    auth $auth_flexera
    host rs_governance_host
    ignore_status [404]
    path join(["/api/governance/projects/", rs_project_id, "/applied_policies/", switch(ne(meta_parent_policy_id,""), meta_parent_policy_id, policy_id) ])
    header "Api-Version", "1.0"
  end
  result do
    encoding "json"
    field "id", jmes_path(response, "id")
  end
end


datasource "ds_parent_policy_terminated" do
  run_script $js_decide_if_self_terminate, $ds_get_policy, policy_id, meta_parent_policy_id
end

# If the policy was applied by a meta_parent_policy we confirm it exists if it doesn't we confirm we are deleting
# This information is used in two places:
# - determining whether or not we make a delete call
# - determining if we should create an incident (we don't want to create an incident on the run where we terminate)
script "js_decide_if_self_terminate", type: "javascript" do
  parameters "found", "self_policy_id", "meta_parent_policy_id"
  result "result"
  code <<-EOS
  var result
  if (meta_parent_policy_id != "" && found.id == undefined) {
    result = true
  } else {
    result = false
  }
  EOS
end

# Two potentials ways to set this up:
# - this way and make a unneeded 'get' request when not deleting
# - make the delete request an interate and have it iterate over an empty array when not deleting and an array with one item when deleting
script "js_make_terminate_request", type: "javascript" do
  parameters "should_delete", "policy_id", "rs_project_id", "rs_governance_host"
  result "request"
  code <<-EOS

  var request = {
    auth:  'auth_flexera',
    host: rs_governance_host,
    path: "/api/governance/projects/" + rs_project_id + "/applied_policies/" + policy_id,
    headers: {
      "API-Version": "1.0",
      "Content-Type":"application/json"
    },
  }

  if (should_delete) {
    request.verb = 'DELETE'
  }
  EOS
end

datasource "ds_terminate_self" do
  request do
    run_script $js_make_terminate_request, $ds_parent_policy_terminated, policy_id, rs_project_id, rs_governance_host
  end
end

datasource "ds_is_deleted" do
  run_script $js_check_deleted, $ds_terminate_self
end

# This is just a way to have the check delete request connect to the farthest leaf from policy.
# We want the delete check to the first thing the policy does to avoid the policy erroring before it can decide whether or not it needs to self terminate
# Example a customer deletes a credential and then terminates the parent policy. We still want the children to self terminate
# The only way I could see this not happening is if the user who applied the parent_meta_policy was offboarded or lost policy access, the policies who are impersonating the user
# would not have access to self-terminate
# It may be useful for the backend to enable a mass terminate at some point for all meta_child_policies associated with an id.
script "js_check_deleted", type: "javascript" do
  parameters "response"
  result "result"
  code <<-EOS
  result = {"path":"/"}
  EOS
end

name "AWS Unused RDS Instance"
rs_pt_ver 20180301
type "policy"
short_description "Check for database services that have no connections and delete them after approval. See the [README](https://github.com/flexera/policy_templates/tree/master/cost/aws/unused_rds) and [docs.flexera.com/flexera/EN/Automation](https://docs.flexera.com/flexera/EN/Automation/AutomationGS.htm) to learn more."
long_description ""
severity "low"
category "Cost"
default_frequency "daily"
info(
  version: "3.5",
  provider: "AWS",
  service: "RDS",
  policy_set: "Unused Database Services"
  )

###############################################################################
# Parameters
###############################################################################

parameter "param_allowed_regions" do
  type "list"
  label "Allowed Regions"
  allowed_pattern /^([a-zA-Z-_]+-[a-zA-Z0-9-_]+-[0-9-_]+,*|)+$/
  description "A list of allowed regions. See the README for more details"
end

parameter "param_email" do
  type "list"
  label "Email addresses to notify"
  description "Email addresses of the recipients you wish to notify when new incidents are created"
end

parameter "param_exclusion_tag_key" do
  label "Exclusion Tag Key:Value"
  description "AWS tag key to ignore instances. Format: Key:Value"
  type "string"
end

parameter "param_aws_account_number" do
  type "string"
  label "Account Number"
  description "The account number for AWS STS Cross Account Roles."
  default ""
end

parameter "param_automatic_action" do
  type "list"
  label "Automatic Actions"
  description "When this value is set, this policy will automatically take the selected action(s)"
  allowed_values ["Delete Instances"]
end

parameter "param_api_wait" do
  type "number"
  label "CloudWatch API Wait Time"
  description "Amount of time to wait between CloudWatch API requests to avoid throttling (seconds)"
  default 5
  min_value 1
  max_value 60
end

###############################################################################
# Authentication
###############################################################################

#authenticate with AWS
credentials "auth_aws" do
  schemes "aws","aws_sts"
  label "AWS"
  description "Select the AWS Credential from the list."
  tags "provider=aws"
  aws_account_number $param_aws_account_number
end

credentials "auth_rs" do
  schemes "oauth2"
  label "flexera"
  description "Select FlexeraOne OAuth2 credentials"
  tags "provider=flexera"
end

###############################################################################
# Pagination
###############################################################################

pagination "aws_getmetricdata_pagination" do
  get_page_marker do
    body_path "NextToken"
  end
  set_page_marker do
    body_field "NextToken"
  end
end

###############################################################################
# Pagination
###############################################################################

pagination "aws_getmetricdata_pagination" do
  get_page_marker do
    body_path "NextToken"
  end
  set_page_marker do
    body_field "NextToken"
  end
end

###############################################################################
# Pagination
###############################################################################

pagination "aws_getmetricdata_pagination" do
  get_page_marker do
    body_path "NextToken"
  end
  set_page_marker do
    body_field "NextToken"
  end
end

###############################################################################
# Pagination
###############################################################################

pagination "aws_getmetricdata_pagination" do
  get_page_marker do
    body_path "NextToken"
  end
  set_page_marker do
    body_field "NextToken"
  end
end

###############################################################################
# Pagination
###############################################################################

pagination "aws_getmetricdata_pagination" do
  get_page_marker do
    body_path "NextToken"
  end
  set_page_marker do
    body_field "NextToken"
  end
end

###############################################################################
# Pagination
###############################################################################

pagination "aws_getmetricdata_pagination" do
  get_page_marker do
    body_path "NextToken"
  end
  set_page_marker do
    body_field "NextToken"
  end
end

###############################################################################
# Pagination
###############################################################################

pagination "aws_getmetricdata_pagination" do
  get_page_marker do
    body_path "NextToken"
  end
  set_page_marker do
    body_field "NextToken"
  end
end

###############################################################################
# Datasources
###############################################################################

#Get list of enabled regions for an account
datasource "ds_regions_list" do
  request do
    auth $auth_aws
    verb "GET"
    host "ec2.amazonaws.com"
    path "/"
    query "Action", "DescribeRegions"
    query "Version", "2016-11-15"
  end
  result do
    encoding "xml"
    collect xpath(response, "//DescribeRegionsResponse/regionInfo/item", "array") do
      field "region", xpath(col_item, "regionName")
    end
  end
end

# Get only SCP enabled regions
datasource "ds_regions" do
  run_script $js_regions, $param_allowed_regions, $ds_regions_list
end

# get all the RDS instances merged together with the tags and CloudWatch
datasource "ds_rds_instances_without_connections" do
  run_script $js_rds_instances_without_connections, $ds_rds_instances_set, $ds_list_tags_for_resource, $ds_cloudwatch_getmetricdata, $param_exclusion_tag_key, $ds_currency_code, $ds_currency_reference, $ds_get_caller_identity
end

# get all the RDS instances
datasource "ds_rds_instances_set" do
  iterate $ds_regions
  request do
    run_script $js_rds_instances_set_request, val(iter_item,"region")
  end
  result do
    encoding "xml"
    collect xpath(response, "//DescribeDBInstancesResponse/DescribeDBInstancesResult/DBInstances/DBInstance[*]", "array") do
          field "region",val(iter_item,"region")
          field "instanceId", xpath(col_item,"DbiResourceId")
          field "instanceArn", xpath(col_item, "DBInstanceArn")
          field "resourceType", xpath(col_item, "DBInstanceClass")
          field "name", xpath(col_item,"DBInstanceIdentifier")
          field "status", xpath(col_item,"DBInstanceStatus")
          field "privateDnsName", xpath(col_item, "Endpoint/Address")
    end
  end
end

#get the tags for the rds instance
datasource "ds_list_tags_for_resource" do
  iterate $ds_rds_instances_set
  request do
    run_script $js_list_tags_for_resource, val(iter_item,"instanceArn"), val(iter_item,"region")
  end
  result do
    encoding "xml"
    collect xpath(response, "//ListTagsForResourceResponse/ListTagsForResourceResult/TagList/Tag[*]", "array") do
          field "instanceId", val(iter_item,"instanceId")
          field "key", xpath(col_item, "Key")
          field "value", xpath(col_item, "Value")
    end
  end
end

# get the DBConnections from CloudWatch
datasource "ds_metricdataqueries" do
  run_script $js_metricdataqueries, $ds_rds_instances_set
end

script "js_metricdataqueries", type: "javascript" do
  result "result"
  parameters "ds_rds_instances_set"
  code <<-EOS
queries = {};
// Construct MetricDataQueries for each resource
_.each(ds_rds_instances_set, function(resource) {
  // Foreach Metric that is used by the Policy Template
  _.each(["DatabaseConnections"], function(metric) {
    // Foreach statistic that is used by the Policy Template
    _.each(["Average"], function(statistic) {
      query = {
        // Replace `-` with `_` in the Id to avoid CloudWatch API error
        "Id": resource['name'].replace(/\-/g, '_') + "_" + metric + "_" + statistic,
        "Label": resource['name'] + " " + metric + " " + statistic,
        "MetricStat": {
          "Metric": {
            "Namespace": "AWS/RDS",
            "MetricName": metric,
            "Dimensions": [
              { "Name": "DBInstanceIdentifier", "Value": resource['name'] }
            ]
          },
          "Period": 2592000,
          "Stat": statistic
        },
        "ReturnData": true
      };
      if (queries[resource['region']] == undefined || queries[resource['region']] == null) {
        queries[resource['region']] = [];
      }
      queries[resource['region']].push(query);
    });
  });
});
result = [];

end_date = parseInt(new Date().getTime() / 1000);
start_date = parseInt(new Date(new Date().setDate(new Date().getDate() - 30)).getTime() / 1000);
// MetricDataQueries[] max is 500
chunk_size=500;
// Chunk MetricDataQueries to iterate and collect all with multiple requests
_.each(Object.keys(queries), function(region) {
  for (i = 0; i < queries[region].length; i += chunk_size) {
    // Select the next chunk of queries
    chunk = queries[region].slice(i, i + chunk_size);
    // Construct the request and append to result[]
    result.push({
      'MetricDataQueries': chunk,
      'region': region
    });
  }
});
EOS
end

datasource "ds_cloudwatch_getmetricdata" do
  iterate $ds_metricdataqueries
  request do
    run_script $js_cloudwatch_getmetricdata, val(iter_item, "region"), val(iter_item, "MetricDataQueries"), $param_api_wait
  end
  result do
    encoding "json"
    collect jmes_path(response, "MetricDataResults[*]") do
      field "region", val(iter_item, "region")
      field "id", jmes_path(col_item, "Id")
      field "label", jmes_path(col_item, "Label")
      field "values", jmes_path(col_item, "Values")
    end
  end
end

script "js_cloudwatch_getmetricdata", type: "javascript" do
  parameters "region", "MetricDataQueries", "param_api_wait"
  result "results"
  code <<-EOS
  // Slow down rate of requests to prevent throttling
  var now = new Date().getTime()
  while(new Date().getTime() < now + (param_api_wait * 1000)) { /* Do nothing */ }
  // Difference between start and end time is 28 days
  // Period for each metricdataquery is 30 days.
  // This combination results in average over larger time returned as one value [because period > (end_date - start_date)]
  end_date = parseInt(new Date().getTime() / 1000);
  start_date = parseInt(new Date(new Date().setDate(new Date().getDate() - 28)).getTime() / 1000);
  results = {
    "auth": "auth_aws",
    "host": 'monitoring.' + region + '.amazonaws.com',
    "verb": "POST",
    "path": "/",
    "pagination": 'aws_getmetricdata_pagination',
    "headers": {
      "User-Agent": "RS Policies",
      "Content-Type": "application/json",
      "x-amz-target": "GraniteServiceVersion20100801.GetMetricData",
      "Accept": "application/json",
      "Content-Encoding": "amz-1.0"
    }
    "query_params": {
      'Action': 'GetMetricData',
      'Version': '2010-08-01'
    },
    body: JSON.stringify({ "StartTime": start_date, "EndTime": end_date, "MetricDataQueries": MetricDataQueries })
  }
EOS
end

datasource "ds_currency_reference" do
  request do
    host "raw.githubusercontent.com"
    path "/flexera-public/policy_templates/master/cost/scheduled_reports/currency_reference.json"
    header "User-Agent", "RS Policies"
  end
end

datasource "ds_currency_code" do
  request do
    auth $auth_rs
    host rs_optima_host
    path join(["/bill-analysis/orgs/",rs_org_id,"/settings/currency_code"])
    header "Api-Version", "0.1"
    header "User-Agent", "RS Policies"
    ignore_status [403]
  end
  result do
    encoding "json"
    field "id", jmes_path(response,"id")
    field "value", jmes_path(response,"value")
  end
end

datasource "ds_billing_centers" do
  request do
    auth $auth_rs
    host rs_optima_host
    path join(["/analytics/orgs/",rs_org_id,"/billing_centers"])
    header "Api-Version", "1.0"
    header "User-Agent", "RS Policies"
    query "view", "allocation_table"
    ignore_status [403]
  end
  result do
    encoding "json"
    collect jmes_path(response,"[*]") do
      field "href", jmes_path(col_item,"href")
      field "id", jmes_path(col_item,"id")
      field "name", jmes_path(col_item,"name")
      field "parent_id", jmes_path(col_item,"parent_id")
    end
  end
end

datasource "ds_get_caller_identity" do
  request do
    auth $auth_aws
    verb "GET"
    host "sts.amazonaws.com"
    path "/"
    header "User-Agent", "RS Policies"
    query "Action", "GetCallerIdentity"
    query "Version", "2011-06-15"
  end
  result do
    encoding "xml"
    collect xpath(response, "//GetCallerIdentityResponse/GetCallerIdentityResult") do
      field "account",xpath(col_item, "Account")
    end
  end
end

datasource "ds_top_level_billing_centers" do
  run_script $js_top_level_bc, $ds_billing_centers
end

datasource "ds_instance_costs" do
  request do
    run_script $js_instance_costs, $ds_get_caller_identity, $ds_top_level_billing_centers, rs_org_id, rs_optima_host
  end
  result do
    encoding "json"
    collect jmes_path(response,"rows[*]") do
      field "resource_id", jmes_path(col_item, "dimensions.resource_id")
      field "resource_type", jmes_path(col_item, "dimensions.resource_type")
      field "cost_nonamortized_unblended_adj", jmes_path(col_item,"metrics.cost_nonamortized_unblended_adj")
    end
  end
end

datasource "ds_instance_cost_mapping" do
  run_script $js_instance_cost_mapping, $ds_rds_instances_without_connections, $ds_instance_costs, $ds_currency_code, $ds_currency_reference, $ds_billing_centers, $ds_get_caller_identity
end

###############################################################################
# Scripts
###############################################################################

script "js_regions", type:"javascript" do
  parameters "user_entered_regions", "all_regions"
  result "regions"
  code <<-EOS
    if(_.isEmpty(user_entered_regions)){
      regions = all_regions;
    }else{
      //Filter unique regions
      var uniqueRegions = _.uniq(user_entered_regions);
      var all_regions_list = [];
      all_regions.forEach(function(all_region){
        all_regions_list.push(all_region.region)
      })

      //Filter valid regions
      var valid_regions = [];
      _.map(uniqueRegions, function(uniqueRegion){
        if(all_regions_list.indexOf(uniqueRegion) > -1){
          valid_regions.push({"region": uniqueRegion})
        }
      })

      //Throw an error if no valid regions found
      if (_.isEmpty(valid_regions)) {
        regions = all_regions;
      }else{
        regions = valid_regions
      }
    }
  EOS
end

script "js_top_level_bc", type: "javascript" do
  parameters "billing_centers"
  result "filtered_billing_centers"
  code <<-EOS
  var filtered_billing_centers =
    _.reject(billing_centers, function(bc){ return bc.parent_id != null });
EOS
end

script "js_instance_costs", type:"javascript" do
  parameters  "account_id","billing_centers","org","rs_optima_host"
  result "request"
  code <<-EOS
    // returns date formatted as string: YYYY-mm-dd
    function getFormattedDailyDate(date) {
      var year = date.getFullYear();
      var month = (1 + date.getMonth()).toString();
      month = month.length > 1 ? month : '0' + month;
      var day = date.getDate().toString();
      day = day.length > 1 ? day : '0' + day;
      return year + '-' + month + '-' + day;
    }
    var start_date = getFormattedDailyDate(new Date(new Date().setDate(new Date().getDate() - 3)));
    var end_date = getFormattedDailyDate(new Date(new Date().setDate(new Date().getDate() - 2)));
      var request = {
        auth: "auth_rs",
        host: rs_optima_host,
        verb: "POST",
        path: "/bill-analysis/orgs/" + org + "/costs/select",
        body_fields: {
          "dimensions": ["resource_id", "resource_type"],
          "granularity": "day",
          "start_at": start_date,
          "end_at": end_date,
          "metrics": ["cost_nonamortized_unblended_adj"],
          "billing_center_ids": _.compact(_.map(billing_centers, function(value){ return value.id})),
          "limit": 10000,
          "filter": {
            "expressions": [
              {
                "dimension": "service",
                "type": "equal",
                "value": "AmazonRDS"
              },
              {
                "dimension": "vendor_account",
                "type": "equal",
                "value": account_id[0]["account"]
              }
            ],
            "type": "and"
          }
        },
        headers: {
          "User-Agent": "RS Policies",
          "Api-Version": "1.0"
        },
        ignore_status: [400]
      }
  EOS
end

# merge the instances and tags and remove instances that have the exclusion tag
script "js_rds_instances_without_connections", type: "javascript" do
  result "results"
  parameters "ds_rds_instance_set", "ds_list_tags_for_resource", "ds_cloudwatch_getmetricdata", "param_exclusion_tag_key", "ds_currency_code", "ds_currency_reference", "ds_get_caller_identity"
  code <<-EOS
  var tag_key = param_exclusion_tag_key.split(':')[0]
  var tag_value = param_exclusion_tag_key.split(':')[1]
  var results = []
  // Format costs with currency symbol and thousands separator
  if( ds_currency_code['value'] !== undefined ) {
    if (ds_currency_reference[ds_currency_code['value']] !== undefined ) {
      var cur = ds_currency_reference[ds_currency_code['value']]['symbol']
    if( ds_currency_reference[ds_currency_code['value']]['t_separator'] !== undefined ) {
        var separator = ds_currency_reference[ds_currency_code['value']]['t_separator']
      } else {
        var separator = ""
      }
    } else {
      var cur = ""
      var separator = ""
    }
  } else {
    var cur = "$"
    var separator = ","
  }
  _.each(ds_rds_instance_set, function(instance){
    // get tags for instance
    var instances_w_tags = _.where(ds_list_tags_for_resource, {instanceId: instance.instanceId})
    var instance_tags = {}
    var tags = []
    _.each(instances_w_tags, function(instance){
      tags.push(instance.key+':'+instance.value)
    })
    instance_tags[instance.instanceId] = tags;
    console.log(instance_tags);

    // Use _.findWhere() to find any Average MetricDataQuery results for the instance
    // Select DatabaseConnections Average from GetMetricData results
    var metrics = _.findWhere(ds_cloudwatch_getmetricdata, {label: instance.name+' DatabaseConnections Average'})

    // Check if metric values were found
    if ( !_.isUndefined(metrics) ) {
      // Calculate total connections with underscorejs reduce function
      // https://underscorejs.org/#reduce
      connections_total = _.reduce(metrics.values, function(memo, num){ return memo + num; }, 0);
      // There have been recent database connections for this instance if DatabaseConnections Average > 0
      if ( !_.contains(instance_tags[instance.instanceId], param_exclusion_tag_key) && connections_total == 0){
        // Add instance to results if it does not have the exclusion tag and has not been recently used
        results.push({
          accountID: ds_get_caller_identity[0]['account'],
          region: instance.region,
          name: instance.name,
          arn: instance.instanceArn,
          id: instance.instanceId,
          resourceType: instance.resourceType,
          resourceID: instance.instanceId,
          privateDnsName: instance.privateDnsName,
          status: instance.status,
          tags: instance_tags[instance.instanceId],
          // Savings is 0.0 [float] until later where we estimate savings
          savings: 0.0,
          savingsCurrency: cur
        });
      }
    }
  });
EOS
end

#get list of the rds instances their properties
script "js_rds_instances_set_request", type: "javascript" do
  result "results"
  parameters "region"
  code <<-EOS
  var end_date = new Date().toISOString()
  var start_date = new Date(new Date().setDate(new Date().getDate() - 30)).toISOString();
  results = {
    "auth": "auth_aws",
    "host": 'rds.'+region+'.amazonaws.com',
    "verb": "GET",
    "path": "/",
    "headers": {
      "User-Agent": "RS Policies",
      "Content-Type": "text/xml"
    }
    "query_params": {
      'Action': 'DescribeDBInstances',
      'Version': '2014-10-31'
    }
  }
EOS
end

#get list of the rds tags for instances
script "js_list_tags_for_resource", type: "javascript" do
  result "results"
  parameters "instanceArn","region"
  code <<-EOS
  var end_date = new Date().toISOString()
  var start_date = new Date(new Date().setDate(new Date().getDate() - 30)).toISOString();
  results = {
    "auth": "auth_aws",
    "host": 'rds.'+region+'.amazonaws.com',
    "verb": "GET",
    "path": "/",
    "headers": {
      "User-Agent": "RS Policies",
      "Content-Type": "text/xml"
    }
    "query_params": {
      'Action': 'ListTagsForResource',
      'ResourceName': instanceArn,
      'Version': '2014-10-31'
    }
  }
EOS
end

script "js_cloudwatch_connections", type: "javascript" do
  result "results"
  parameters "region","name"
  code <<-EOS
  var days = parseInt("30") // use $param_days for future enhancement
  var end_date = new Date().toISOString()
  var start_date = new Date(new Date().setDate(new Date().getDate() - days )).toISOString();
  results = {
    "auth": "auth_aws",
    "host": 'monitoring.'+region+'.amazonaws.com',
    "verb": "GET",
    "path": "/",
    "headers": {
      "User-Agent": "RS Policies",
      "Content-Type": "application/json",
      "x-amz-target": "GraniteServiceVersion20100801.GetMetricStatistics",
      "Accept": "application/json",
      "Content-Encoding": "amz-1.0"
    }
    "query_params": {
      'Action': 'GetMetricStatistics',
      'Version': '2010-08-01',
      'Namespace': 'AWS/RDS',
      'MetricName': 'DatabaseConnections',
      'Dimensions.member.1.Name': 'DBInstanceIdentifier',
      'Dimensions.member.1.Value': name,
      'StartTime': start_date,
      'EndTime': end_date,
      'Period': "2592000",
      'Statistics.member.1': 'Average',
    }
  }
EOS
end

script "js_instance_cost_mapping", type:"javascript" do
  parameters  "ds_rds_instances_without_connections","ds_instance_costs","ds_currency_code","ds_currency_reference", "ds_billing_centers","ds_get_caller_identity"
  result "result"
  code <<-EOS
  var unused_rds_instance_list=[];
  var result = {};
  var message='';
  var savings_found=false;
  function formatNumber(number, separator){
    var numString =number.toString();
    var values=numString.split(".");
    var result = ''
    while (values[0].length > 3){
      var chunk = values[0].substr(-3)
      values[0] = values[0].substr(0, values[0].length - 3)
      result = separator + chunk + result
    }
    if (values[0].length > 0){
      result = values[0] + result
    }
    if(values[1]==undefined){
      return result;
    }
    return result+"."+values[1];
  }

  // Check if ds_billing_centers results empty
  if(ds_billing_centers.length==0){
    unused_rds_instance_list=ds_rds_instances_without_connections;
    message="You do not have the minimum required role of billing_center_viewer to view the savings";
  }
  else {
    // There is potentially cost savings to calculate if we have access to billing centers

    // Format costs with currency symbol and thousands separator
    if( ds_currency_code['value'] !== undefined ) {
      if (ds_currency_reference[ds_currency_code['value']] !== undefined ) {
        var cur = ds_currency_reference[ds_currency_code['value']]['symbol'];
        if( ds_currency_reference[ds_currency_code['value']]['t_separator'] !== undefined ) {
          var separator = ds_currency_reference[ds_currency_code['value']]['t_separator'];
        } else {
          var separator = "";
        }
      } else {
        var cur = "";
        var separator = "";
      }
    } else {
      var cur = "$";
      var separator = ",";
    }

    // Total potential savings starts at 0
    var total_savings=0;
    // Loop through all instances without connections
    _.each(ds_rds_instances_without_connections, function(instance){
      instance['resourceType'] = instance.resourceType;
      instance['service'] = "RDS";
      // Select all costs related to instance from ds_instance_costs
      var cost_objects = _.where(ds_instance_costs, {'resource_id': 'db:'+instance.name});
      if (_.size(cost_objects) == 0){
        // If no volume cost found, assume 0.0 monthly costs/savings estimation
        instance['savings']= 0.0;
        instance['savingsCurrency']= cur;
        unused_rds_instance_list.push(instance);
      }
      else {
        // If cost(s) exists, lets calculate estimated monthly cost for the volume
        // Set savings_found flag to true
        savings_found = true;
        // Sum of costs from cost_objects is the estimated 24hr cost of instance which can include storage, compute, and transfer costs
        // Calculate sum of costs for instance with underscorejs reduce function
        // https://underscorejs.org/#reduce
        var one_day_cost = _.reduce(_.compact(_.map(cost_objects, function(value){return value.cost_nonamortized_unblended_adj})), function(memo, num){ return memo + num; }, 0);
        // Estimate monthly [30day] cost of volume
        var monthly_savings = one_day_cost*30;
        // Add volume cost to total_potential_savings
        total_savings=total_savings+monthly_savings;
        instance['savings']= (Math.round(monthly_savings * 1000) / 1000);
        instance['savingsCurrency']= cur;
        unused_rds_instance_list.push(instance);
      }
    });
    if(savings_found){
      total_savings=cur + ' '+formatNumber((Math.round(total_savings * 100) / 100), separator);
      message="The total estimated monthly savings are "+total_savings;
    }
    else{
      message="The Flexera Optima system does not have any data to calculate savings for these resources";
    }
  }

  result={
    "instance_list": unused_rds_instance_list,
    "message": message,
    "accountID": ds_get_caller_identity[0]['account']
  };
  result.instance_list = _.sortBy(result.instance_list,"region");
  result.instance_list = _.sortBy(result.instance_list,"id");
EOS
end

###############################################################################
# Policy
###############################################################################

policy "pol_unused_rds" do
  validate $ds_instance_cost_mapping do
    summary_template "AWS Account ID: {{ data.accountID }} - {{ len data.instance_list }} rows containing AWS RDS Unused Instances"
    detail_template <<-EOS
{{data.message}}
EOS
    escalate $email
    escalate $decommission_rds
    check eq(size(val(data,"instance_list")),0)
    export "instance_list" do
      resource_level true
      field "accountID" do
        label "Account ID"
      end
      field "region" do
        label "Region"
      end
      field "name" do
        label "Name"
      end
      field "status" do
        label "Status"
      end
      field "savings" do
        label "Estimated Monthly Savings"
      end
      field "savingsCurrency" do
        label "Savings Currency"
      end
      field "resourceID" do
        label "Resource Id"
      end
      field "privateDnsName" do
        label "Private DNS Name"
      end
      field "resourceType" do
        label "Resource Type"
      end
      field "arn" do
        label "ARN"
      end
      field "tags" do
        label "Tags"
      end
      field "id" do
        label "id"
        path "resourceID"
      end
      field "service" do
        label "Service"
      end
    end
  end
end

###############################################################################
# Escalations
###############################################################################

escalation "email" do
  automatic true
  label "Send Email"
  description "Send incident email"
  email $param_email
end

escalation "decommission_rds" do
  automatic contains($param_automatic_action, "Delete Instances")
  label "Delete RDS Instance"
  description "Delete selected RDS Instances"
  run "decommission_rds", data
end

###############################################################################
# Cloud Workflow
###############################################################################

define decommission_rds($data) return $all_responses do
  $$debug=true
  $$log = []
  $all_responses = []

  $syslog_subject = "AWS Unused RDS Instance: "
  call sys_log(join([$syslog_subject, "Identified Instances"]),to_s($data))
  foreach $item in $data do
    $response = http_request(
      auth: $$auth_aws,
      https: true,
      verb: "get",
      host: "rds."+$item["region"]+".amazonaws.com",
      href: "/",
      query_strings: {
        "Action": "DeleteDBInstance",
        "Version": "2014-09-01",
        "DBInstanceIdentifier": $item["name"],
        "SkipFinalSnapshot":"true"
      }
    )
    $all_responses << $response
  end
  call sys_log(join([$syslog_subject, "Responses"]),to_s($all_responses))
end

define handle_error($response) do
  $status_code = $response["code"]
  if $status_code == 404
    $_error_behavior = "skip"
  else
    $_error_behavior = "raise"
  end
end

define sys_log($subject, $detail) do
  if $$debug
    rs_cm.audit_entries.create(
      notify: "None",
      audit_entry: {
        auditee_href: @@account,
        summary: $subject,
        detail: $detail
      }
    )
  end
end

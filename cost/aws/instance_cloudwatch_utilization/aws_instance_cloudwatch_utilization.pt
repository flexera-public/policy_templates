name "AWS Instance CloudWatch Utilization"
rs_pt_ver 20180301
type "policy"
short_description "Gathers AWS CloudWatch data for instances on 30 day intervals. See the [README](https://github.com/rightscale/policy_templates/tree/master/cost/native_utilization/) and [docs.rightscale.com/policies](http://docs.rightscale.com/policies/) to learn more."
long_description "Version: 1.0"
severity "low"
category "Cost"

###############################################################################
# Permissions
###############################################################################

permission "perm_read_creds" do
  actions   "rs_cm.show_sensitive","rs_cm.index_sensitive"
  resources "rs_cm.credentials"
end

###############################################################################
# Parameters
###############################################################################

parameter "param_email" do
  type "list"
  label "Email addresses to notify"
  description "Email addresses of the recipients you wish to notify when new incidents are created"
end

###############################################################################
# Authentication
###############################################################################

auth "auth_us_east_1", type: "aws" do
  version 4
  service "ec2"
  region 'us-east-1'
  access_key cred('AWS_ACCESS_KEY_ID')
  secret_key cred('AWS_SECRET_ACCESS_KEY')
end

auth "auth_us_east_2", type: "aws" do
  version 4
  service "ec2"
  region 'us-east-2'
  access_key cred('AWS_ACCESS_KEY_ID')
  secret_key cred('AWS_SECRET_ACCESS_KEY')
end

auth "auth_us_west_1", type: "aws" do
  version 4
  service "ec2"
  region 'us-west-1'
  access_key cred('AWS_ACCESS_KEY_ID')
  secret_key cred('AWS_SECRET_ACCESS_KEY')
end

auth "auth_us_west_2", type: "aws" do
  version 4
  service "ec2"
  region 'us-west-2'
  access_key cred('AWS_ACCESS_KEY_ID')
  secret_key cred('AWS_SECRET_ACCESS_KEY')
end

auth "auth_ap_south_1", type: "aws" do
  version 4
  service "ec2"
  region 'ap-south-1'
  access_key cred('AWS_ACCESS_KEY_ID')
  secret_key cred('AWS_SECRET_ACCESS_KEY')
end

auth "auth_ap_northeast_2", type: "aws" do
  version 4
  service "ec2"
  region 'ap-northeast-2'
  access_key cred('AWS_ACCESS_KEY_ID')
  secret_key cred('AWS_SECRET_ACCESS_KEY')
end

auth "auth_ap_southeast_1", type: "aws" do
  version 4
  service "ec2"
  region 'ap-southeast-1'
  access_key cred('AWS_ACCESS_KEY_ID')
  secret_key cred('AWS_SECRET_ACCESS_KEY')
end

auth "auth_ap_southeast_2", type: "aws" do
  version 4
  service "ec2"
  region 'ap-southeast-2'
  access_key cred('AWS_ACCESS_KEY_ID')
  secret_key cred('AWS_SECRET_ACCESS_KEY')
end

auth "auth_ap_northeast_1", type: "aws" do
  version 4
  service "ec2"
  region 'ap-northeast-1'
  access_key cred('AWS_ACCESS_KEY_ID')
  secret_key cred('AWS_SECRET_ACCESS_KEY')
end

auth "auth_ca_central_1", type: "aws" do
  version 4
  service "ec2"
  region 'ca-central-1'
  access_key cred('AWS_ACCESS_KEY_ID')
  secret_key cred('AWS_SECRET_ACCESS_KEY')
end

auth "auth_eu_central_1", type: "aws" do
  version 4
  service "ec2"
  region 'eu-central-1'
  access_key cred('AWS_ACCESS_KEY_ID')
  secret_key cred('AWS_SECRET_ACCESS_KEY')
end

auth "auth_eu_west_1", type: "aws" do
  version 4
  service "ec2"
  region 'eu-west-1'
  access_key cred('AWS_ACCESS_KEY_ID')
  secret_key cred('AWS_SECRET_ACCESS_KEY')
end

auth "auth_eu_west_2", type: "aws" do
  version 4
  service "ec2"
  region 'eu-west-2'
  access_key cred('AWS_ACCESS_KEY_ID')
  secret_key cred('AWS_SECRET_ACCESS_KEY')
end

auth "auth_eu_west_3", type: "aws" do
  version 4
  service "ec2"
  region 'eu-west-3'
  access_key cred('AWS_ACCESS_KEY_ID')
  secret_key cred('AWS_SECRET_ACCESS_KEY')
end

auth "auth_sa_east_1", type: "aws" do
  version 4
  service "ec2"
  region 'sa-east-1'
  access_key cred('AWS_ACCESS_KEY_ID')
  secret_key cred('AWS_SECRET_ACCESS_KEY')
end

auth "auth_eu_north_1", type: "aws" do
  version 4
  service "ec2"
  region 'eu-north-1'
  access_key cred('AWS_ACCESS_KEY_ID')
  secret_key cred('AWS_SECRET_ACCESS_KEY')
end


auth "monitoring_auth_us_east_1", type: "aws" do
  version 4
  service "monitoring"
  region 'us-east-1'
  access_key cred('AWS_ACCESS_KEY_ID')
  secret_key cred('AWS_SECRET_ACCESS_KEY')
end

auth "monitoring_auth_us_east_2", type: "aws" do
  version 4
  service "monitoring"
  region 'us-east-2'
  access_key cred('AWS_ACCESS_KEY_ID')
  secret_key cred('AWS_SECRET_ACCESS_KEY')
end

auth "monitoring_auth_us_west_1", type: "aws" do
  version 4
  service "monitoring"
  region 'us-west-1'
  access_key cred('AWS_ACCESS_KEY_ID')
  secret_key cred('AWS_SECRET_ACCESS_KEY')
end

auth "monitoring_auth_us_west_2", type: "aws" do
  version 4
  service "monitoring"
  region 'us-west-2'
  access_key cred('AWS_ACCESS_KEY_ID')
  secret_key cred('AWS_SECRET_ACCESS_KEY')
end

auth "monitoring_auth_ap_south_1", type: "aws" do
  version 4
  service "monitoring"
  region 'ap-south-1'
  access_key cred('AWS_ACCESS_KEY_ID')
  secret_key cred('AWS_SECRET_ACCESS_KEY')
end

auth "monitoring_auth_ap_northeast_2", type: "aws" do
  version 4
  service "monitoring"
  region 'ap-northeast-2'
  access_key cred('AWS_ACCESS_KEY_ID')
  secret_key cred('AWS_SECRET_ACCESS_KEY')
end

auth "monitoring_auth_ap_southeast_1", type: "aws" do
  version 4
  service "monitoring"
  region 'ap-southeast-1'
  access_key cred('AWS_ACCESS_KEY_ID')
  secret_key cred('AWS_SECRET_ACCESS_KEY')
end

auth "monitoring_auth_ap_southeast_2", type: "aws" do
  version 4
  service "monitoring"
  region 'ap-southeast-2'
  access_key cred('AWS_ACCESS_KEY_ID')
  secret_key cred('AWS_SECRET_ACCESS_KEY')
end

auth "monitoring_auth_ap_northeast_1", type: "aws" do
  version 4
  service "monitoring"
  region 'ap-northeast-1'
  access_key cred('AWS_ACCESS_KEY_ID')
  secret_key cred('AWS_SECRET_ACCESS_KEY')
end

auth "monitoring_auth_ca_central_1", type: "aws" do
  version 4
  service "monitoring"
  region 'ca-central-1'
  access_key cred('AWS_ACCESS_KEY_ID')
  secret_key cred('AWS_SECRET_ACCESS_KEY')
end

auth "monitoring_auth_eu_central_1", type: "aws" do
  version 4
  service "monitoring"
  region 'eu-central-1'
  access_key cred('AWS_ACCESS_KEY_ID')
  secret_key cred('AWS_SECRET_ACCESS_KEY')
end

auth "monitoring_auth_eu_west_1", type: "aws" do
  version 4
  service "monitoring"
  region 'eu-west-1'
  access_key cred('AWS_ACCESS_KEY_ID')
  secret_key cred('AWS_SECRET_ACCESS_KEY')
end

auth "monitoring_auth_eu_west_2", type: "aws" do
  version 4
  service "monitoring"
  region 'eu-west-2'
  access_key cred('AWS_ACCESS_KEY_ID')
  secret_key cred('AWS_SECRET_ACCESS_KEY')
end

auth "monitoring_auth_eu_west_3", type: "aws" do
  version 4
  service "monitoring"
  region 'eu-west-3'
  access_key cred('AWS_ACCESS_KEY_ID')
  secret_key cred('AWS_SECRET_ACCESS_KEY')
end

auth "monitoring_auth_sa_east_1", type: "aws" do
  version 4
  service "monitoring"
  region 'sa-east-1'
  access_key cred('AWS_ACCESS_KEY_ID')
  secret_key cred('AWS_SECRET_ACCESS_KEY')
end

auth "monitoring_auth_eu_north_1", type: "aws" do
  version 4
  service "monitoring"
  region 'eu-north-1'
  access_key cred('AWS_ACCESS_KEY_ID')
  secret_key cred('AWS_SECRET_ACCESS_KEY')
end

###############################################################################
# Datasources
###############################################################################

#Generates list of Regions
datasource "ds_regions_list" do
  run_script $js_regions_map
end

datasource "ds_instances" do 
  run_script $js_instances, $ds_instances_set
end

datasource "ds_instances_set" do
  iterate $ds_regions_list
  request do
    run_script $js_instances_set, val(iter_item,"region")
  end
  result do
    encoding "xml"
    collect xpath(response, "//DescribeInstancesResponse/reservationSet/item", "array") do
      field "instances_set" do
        collect xpath(col_item,"instancesSet/item","array") do
          field "region",val(iter_item, "region")
          field "instanceId", xpath(col_item,"instanceId")
          field "privateDnsName", xpath(col_item, "privateDnsName")
          field "tag_set" do
            collect xpath(col_item,"tagSet/item","array") do
              field "key", xpath(col_item, "key")
              field "value", xpath(col_item, "value")
            end
          end
        end
      end
    end
  end
end

datasource "ds_cloudwatch_cpu_usage" do
  iterate $ds_instances
  request do
    run_script $js_cloudwatch_cpu_usage, val(iter_item, "region"), val(iter_item, "instanceId")
  end
  result do
    encoding "json"
    collect jmes_path(response, "GetMetricStatisticsResponse.GetMetricStatisticsResult.Datapoints[*]") do
      field "region", val(iter_item, "region")
      field "instanceId", val(iter_item, "instanceId")
      field "privateDnsName", val(iter_item, "privateDnsName")
      field "tag_set", val(iter_item, "tag_set")
      field "cpu_unit", jmes_path(col_item,"Unit")
      field "cpu_maximum", jmes_path(col_item, "Maximum")
      field "cpu_minimum", jmes_path(col_item, "Minimum")
      field "cpu_average", jmes_path(col_item, "Average")
    end
  end
end

datasource "ds_cloudwatch_disk_usage" do
  iterate $ds_instances
  request do
    run_script $js_cloudwatch_disk_usage, val(iter_item, "region"), val(iter_item, "instanceId"), val(iter_item,"privateDnsName")
  end
  result do
    encoding "json"
    collect jmes_path(response,"GetMetricStatisticsResponse.GetMetricStatisticsResult.Datapoints[*]") do
      field "region", val(iter_item, "region")
      field "instanceId", val(iter_item, "instanceId")
      field "privateDnsName", val(iter_item, "privateDnsName")
      field "tag_set", val(iter_item, "tag_set")
      field "disk_unit", jmes_path(col_item,"Unit")
      field "disk_maximum", jmes_path(col_item, "Maximum")
      field "disk_minimum", jmes_path(col_item, "Minimum")
      field "disk_average", jmes_path(col_item, "Average")
    end
  end
end

datasource "ds_cloudwatch_mem_usage" do
  iterate $ds_instances
  request do
    run_script $js_cloudwatch_mem_usage, val(iter_item, "region"), val(iter_item, "instanceId"), val(iter_item,"privateDnsName")
  end
  result do
    encoding "json"
    collect jmes_path(response,"GetMetricStatisticsResponse.GetMetricStatisticsResult.Datapoints[*]") do
      field "region", val(iter_item, "region")
      field "instanceId", val(iter_item, "instanceId")
      field "privateDnsName", val(iter_item, "privateDnsName")
      field "tag_set", val(iter_item, "tag_set")
      field "mem_unit", jmes_path(col_item,"Unit")
      field "mem_maximum", jmes_path(col_item, "Maximum")
      field "mem_minimum", jmes_path(col_item, "Minimum")
      field "mem_average", jmes_path(col_item, "Average")
    end
  end
end

datasource "ds_merged_metrics" do
  run_script $js_merged_metrics, $ds_cloudwatch_cpu_usage, $ds_cloudwatch_disk_usage, $ds_cloudwatch_mem_usage
end

###############################################################################
# Scripts
###############################################################################

script "js_regions_map", type: "javascript" do
  result "regions_map"
  code <<-EOS
    var regions_map=[]
    regions_map.push(
      {"region": "us-east-1"},
      {"region": "us-east-2"},
      {"region": "us-west-1"},
      {"region": "us-west-2"},
      {"region": "ap-south-1"},
      {"region": "ap-northeast-2"},
      {"region": "ap-southeast-1"},
      {"region": "ap-southeast-2"},
      {"region": "ap-northeast-1"},
      {"region": "ca-central-1"},
      {"region": "eu-central-1"},
      {"region": "eu-west-1"},
      {"region": "eu-west-2"},
      {"region": "eu-west-3"},
      {"region": "sa-east-1"},
      {"region": "eu-north-1"}
    )
  EOS
end

script "js_instances", type: "javascript" do
  result "results"
  parameters "ds_instance_set"
  code <<-EOS
  var results = []
  for ( n=0; n < ds_instance_set.length; n++) {
    var instance_set = ds_instance_set[n].instances_set
    for ( i=0; i < instance_set.length; i++) {
      var instance = instance_set[i]
      results.push({
        "region": instance.region,
        "instanceId": instance.instanceId,
        "privateDnsName": instance.privateDnsName,
        "tag_set": instance.tag_set
      })
    }
  }
EOS
end

script "js_instances_set", type: "javascript" do
  result "results"
  parameters "region"
  code <<-EOS
  var end_date = new Date().toISOString()
  var start_date = new Date(new Date().setDate(new Date().getDate() - 30)).toISOString();
  results = {
    "auth": "auth_"+region.replace(/-/g,"_"),
    "host": 'ec2.'+region+'.amazonaws.com',
    "verb": "GET",
    "path": "/",
    "headers": {
      "User-Agent": "RS Policies",
      "Content-Type": "text/xml"
    }
    "query_params": {
      'Action': 'DescribeInstances',
      'Version': '2016-11-15'
    }
  }
EOS
end

script "js_cloudwatch_cpu_usage", type: "javascript" do
  result "results"
  parameters "region","instance_id"
  code <<-EOS
  var end_date = new Date().toISOString()
  var start_date = new Date(new Date().setDate(new Date().getDate() - 30)).toISOString();
  results = {
    "auth": "monitoring_auth_"+region.replace(/-/g,"_"),
    "host": 'monitoring.'+region+'.amazonaws.com',
    "verb": "GET",
    "path": "/",
    "headers": {
      "User-Agent": "RS Policies",
      "Content-Type": "application/json",
      "x-amz-target": "GraniteServiceVersion20100801.GetMetricStatistics",
      "Accept": "application/json",
      "Content-Encoding": "amz-1.0"
    }
    "query_params": {
      'Action': 'GetMetricStatistics',
      'Version': '2010-08-01',
      'Namespace': 'AWS/EC2',
      'MetricName': 'CPUUtilization',
      'Dimensions.member.1.Name': 'InstanceId',
      'Dimensions.member.1.Value': instance_id,
      'StartTime': start_date,
      'EndTime': end_date,
      'Period': "2592000",
      'Statistics.member.1': 'Maximum',
      'Statistics.member.2': 'Average',
      'Statistics.member.3': 'Minimum'
    }
  }
EOS
end

script "js_cloudwatch_disk_usage", type: "javascript" do
  result "results"
  parameters "region","instance_id","privateDnsName"
  code <<-EOS
  var end_date = new Date().toISOString()
  var start_date = new Date(new Date().setDate(new Date().getDate() - 30)).toISOString();
  if (privateDnsName != null && privateDnsName !== undefined && privateDnsName.length != 0) {
    var hostname = privateDnsName.split('.')[0]
  } else {
    var hostname = "ip-127-0-0-1"
  }
  results = {
    "auth": "monitoring_auth_"+region.replace(/-/g,"_"),
    "host": 'monitoring.'+region+'.amazonaws.com',
    "verb": "GET",
    "path": "/",
    "headers": {
      "User-Agent": "RS Policies",
      "Content-Type": "application/json",
      "x-amz-target": "GraniteServiceVersion20100801.GetMetricStatistics",
      "Accept": "application/json",
      "Content-Encoding": "amz-1.0"
    }
    "query_params": {
      'Action': 'GetMetricStatistics',
      'Version': '2010-08-01',
      'Namespace': 'CWAgent',
      'MetricName': 'disk_used_percent',
      'Dimensions.member.1.Name': 'host',
      'Dimensions.member.1.Value': hostname,
      'Dimensions.member.2.Name': 'device',
      'Dimensions.member.2.Value': 'xvda1',
      'Dimensions.member.3.Name': 'fstype',
      'Dimensions.member.3.Value': 'ext4',
      'Dimensions.member.4.Name': 'path',
      'Dimensions.member.4.Value': '/',
      'StartTime': start_date,
      'EndTime': end_date,
      'Period': "2592000",
      'Statistics.member.1': 'Maximum',
      'Statistics.member.2': 'Average',
      'Statistics.member.3': 'Minimum'
    }
  }
EOS
end

script "js_cloudwatch_mem_usage", type: "javascript" do
  result "results"
  parameters "region","instance_id","privateDnsName"
  code <<-EOS
  if (privateDnsName != null && privateDnsName !== undefined && privateDnsName.length != 0) {
    var hostname = privateDnsName.split('.')[0]
  } else {
    var hostname = "ip-127-0-0-1"
  }
  var end_date = new Date().toISOString()
  var start_date = new Date(new Date().setDate(new Date().getDate() - 30)).toISOString();
  results = {
    "auth": "monitoring_auth_"+region.replace(/-/g,"_"),
    "host": 'monitoring.'+region+'.amazonaws.com',
    "verb": "GET",
    "path": "/",
    "headers": {
      "User-Agent": "RS Policies",
      "Content-Type": "application/json",
      "x-amz-target": "GraniteServiceVersion20100801.GetMetricStatistics",
      "Accept": "application/json",
      "Content-Encoding": "amz-1.0"
    }
    "query_params": {
      'Action': 'GetMetricStatistics',
      'Version': '2010-08-01',
      'Namespace': 'CWAgent',
      'MetricName': 'mem_used_percent',
      'Dimensions.member.1.Name': 'host',
      'Dimensions.member.1.Value': hostname,
      'StartTime': start_date,
      'EndTime': end_date,
      'Period': "2592000",
      'Statistics.member.1': 'Maximum',
      'Statistics.member.2': 'Average',
      'Statistics.member.3': 'Minimum'
    }
  }
EOS
end

script "js_merged_metrics", type: "javascript" do
  parameters "ds_cloudwatch_cpu_usage", "ds_cloudwatch_disk_usage", "ds_cloudwatch_mem_usage"
  result "merged_results"
code <<-EOS
  var merged_results = []
  for ( i = 0; i < ds_cloudwatch_cpu_usage.length; i++){
    var instance_id = ds_cloudwatch_cpu_usage[i].instanceId
    var disk_usage_record = _.find(ds_cloudwatch_disk_usage, function(record) { return record.instanceId == instance_id; })
    if (disk_usage_record != null && disk_usage_record !== undefined) {
      var disk_maximum = parseFloat(disk_usage_record.disk_maximum).toFixed(2)
      var disk_average = parseFloat(disk_usage_record.disk_average).toFixed(2)
      var disk_minimum = parseFloat(disk_usage_record.disk_minimum).toFixed(2)
    } else {
      var disk_maximum = "N/A"
      var disk_average = "N/A"
      var disk_minimum = "N/A"
    }
    var mem_usage_record = _.find(ds_cloudwatch_mem_usage, function(record) { return record.instanceId == instance_id; })
    if (mem_usage_record != null && mem_usage_record !== undefined) {
      var mem_maximum = parseFloat(mem_usage_record.mem_maximum).toFixed(2)
      var mem_average = parseFloat(mem_usage_record.mem_average).toFixed(2)
      var mem_minimum = parseFloat(mem_usage_record.mem_minimum).toFixed(2)
    } else {
      var mem_maximum = "N/A"
      var mem_average = "N/A"
      var mem_minimum = "N/A"
    }
    merged_results.push(
      {
        "region": ds_cloudwatch_cpu_usage[i].region,
        "instanceId": ds_cloudwatch_cpu_usage[i].instanceId,
        "privateDnsName": ds_cloudwatch_cpu_usage[i].privateDnsName,
        "hostname": ds_cloudwatch_cpu_usage[i].privateDnsName.split('.')[0],
        "tag_set": ds_cloudwatch_cpu_usage[i].tag_set,
        "cpu_minimum": parseFloat(ds_cloudwatch_cpu_usage[i].cpu_minimum).toFixed(2),
        "cpu_maximum": parseFloat(ds_cloudwatch_cpu_usage[i].cpu_maximum).toFixed(2),
        "cpu_average": parseFloat(ds_cloudwatch_cpu_usage[i].cpu_average).toFixed(2),
        "disk_maximum": disk_maximum,
        "disk_average": disk_average,
        "disk_minimum": disk_minimum,
        "mem_maximum": mem_maximum,
        "mem_minimum": mem_minimum,
        "mem_average": mem_average
      }
    )
  }
EOS
end


###############################################################################
# Policy
###############################################################################

policy "pol_utilization" do
  validate_each $ds_merged_metrics do
    summary_template "{{ rs_project_name }} (Account ID: {{ rs_project_id }}): {{ len data }} rows containing AWS instance CloudWatch utilization data"
    detail_template <<-EOS
# AWS Instance Utilization
| Region | instanceID | Hostname | Private DNS Name | CPU Maximum % | CPU Minimum % | CPU Average % | Disk Maximum % | Disk Minimum % | Disk Average % | Memory Minimum % | Memory Maximum % | Memory Average % |
| ------ | ---------- | -------- | ---------------- | ------------- | ------------- | ------------- | -------------- | -------------- | -------------- | ---------------- | ---------------- | ---------------- |
{{ range data -}}
| {{.region}} | {{.instanceId}} | {{.hostname}} |  {{.privateDnsName }} | {{ .cpu_maximum }} | {{.cpu_minimum}} | {{ .cpu_average }} | {{.disk_maximum}} | {{.disk_minimum}} | {{.disk_average}} | {{.mem_minimum}} | {{.mem_maximum}} | {{.mem_average}} |
{{ end -}}
___
###### Policy Applied in Account: {{ rs_project_name }} (Account ID: {{ rs_project_id }}) within Org: {{ rs_org_name }} (Org ID: {{ rs_org_id }})
EOS
    check eq(0,1)
    escalate $email
  end
end


###############################################################################
# Escalations
###############################################################################

escalation "email" do
  email $param_email
end
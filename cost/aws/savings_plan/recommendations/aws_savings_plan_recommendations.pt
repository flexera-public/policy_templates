name "AWS Savings Plan Recommendations"
rs_pt_ver 20180301
type "policy"
short_description "A policy that sends email notifications when AWS Savings Plan Recommendations are identified. NOTE: These  Recommendations are generated by AWS. See the [README](https://github.com/flexera/policy_templates/tree/master/cost/aws/savings_plan/recommendations) and [docs.rightscale.com/policies](https://docs.rightscale.com/policies/) to learn more."
long_description "Version: 1.0"
severity "medium"
tenancy "single"
category "Cost"

permission "perm_read_creds" do
  actions   "rs_cm.show_sensitive","rs_cm.index_sensitive"
  resources "rs_cm.credentials"
end

parameter "param_days" do 
  category "Savings Plan"
  label "Look Back Period"
  default "Last 7 Days"
  description "Number of days of prior usage to analyze"
  allowed_values "Last 7 Days","Last 30 Days","Last 60 Days"
  type "string"
end  

parameter "param_term" do 
  category "Savings Plan"
  label "Savings Plan Term"
  description "Length of Savings Plan term"
  allowed_values "1 Year","3 Year"
  default "1 Year"
  type "string"
end 

parameter "param_payment_option" do
  category "Savings Plan"
  label "Payment Option"
  default "No Upfront"
  allowed_values "No Upfront","Partial Upfront","All Upfront","Light Utilization","Medium Utilization","Heavy Utilization"
  type "string"
  description "Savings Plan purchase option."
end 

parameter "param_savings_plan_type" do 
  category "Savings Plan"
  label "Savings Plan Type"
  default "Compute Savings Plan"
  allowed_values "Compute Savings Plan","EC2 Instance Savings Plan"
  type "string"
end 

parameter "param_savings_threshold" do
  category "Savings Plan"
  label "Monthly Savings Threshold"
  description "Specify the minimum estimated monthly savings that should result in a recommendation"
  default 100
  type "number"
end

parameter "param_email" do
  type "list"
  label "Email addresses to notify"
  description "Email addresses of the recipients you wish to notify"
end

auth "aws", type: "aws" do
  version "4"
  service "ce"
  region "us-east-1"
  access_key cred("AWS_ACCESS_KEY_ID")
  secret_key cred("AWS_SECRET_ACCESS_KEY")
end

pagination "aws_pagination" do
  get_page_marker do
    body_path "NextPageToken"
  end
  set_page_marker do
    body_field "NextPageToken"
  end
end

script "js_sp_request", type: "javascript" do
  parameters "param_days","param_payment_option","param_term","param_savings_plan_type"
  result "request"
  code <<-EOS

    var period = {
      "Last 7 Days":"SEVEN_DAYS",
      "Last 30 Days":"THIRTY_DAYS",
      "Last 60 Days":"SIXTY_DAYS"
    }

    var term = {
      "1 Year":"ONE_YEAR",
      "3 Year":"THREE_YEARS"
    }

    var option = {
      "No Upfront":"NO_UPFRONT",
      "Partial Upfront":"PARTIAL_UPFRONT",
      "All Upfront":"ALL_UPFRONT",
      "Light Utilization":"LIGHT_UTILIZATION",
      "Medium Utilization":"MEDIUM_UTILIZATION",
      "Heavy Utilization":"HEAVY_UTILIZATION"
    }

    var plan = {
      "Compute Savings Plan":"COMPUTE_SP",
      "EC2 Instance Savings Plan":"EC2_INSTANCE_SP"
    }

    var payload = {}
    payload['LookbackPeriodInDays'] = period[param_days]
    payload['PaymentOption'] = option[param_payment_option]
    payload['TermInYears'] = term[param_term]
    payload['SavingsPlansType'] = plan[param_savings_plan_type]

    var request = {
      auth: "aws",
      pagination: "aws_pagination",
      host: "ce.us-east-1.amazonaws.com",
      path: '/',
      verb: 'POST',
      body_fields: payload,
      headers: {
        "User-Agent": "RS Policies",
        "X-Amz-Target": "AWSInsightsIndexService.GetSavingsPlansPurchaseRecommendation",
        "Content-Type": "application/x-amz-json-1.1",
      }
    } 
  EOS
end

datasource "ds_sp_recommendations" do
  request do
    run_script $js_sp_request, $param_days, $param_payment_option, $param_term, $param_savings_plan_type
  end
  result do
    encoding "json"
    collect jmes_path(response, "SavingsPlansPurchaseRecommendation.SavingsPlansPurchaseRecommendationDetails[*]") do
      field "accountId", jmes_path(col_item,"AccountId")
      field "currencyCode", jmes_path(col_item,"CurrencyCode")
      field "currentAverageHourlyOnDemandSpend", jmes_path(col_item,"CurrentAverageHourlyOnDemandSpend")
      field "currentMaximumHourlyOnDemandSpend", jmes_path(col_item,"CurrentMaximumHourlyOnDemandSpend")
      field "currentMinimumHourlyOnDemandSpend", jmes_path(col_item,"CurrentMinimumHourlyOnDemandSpend")
      field "estimatedAverageUtilization", jmes_path(col_item,"EstimatedAverageUtilization")
      field "estimatedMonthlySavingsAmount", jmes_path(col_item,"EstimatedMonthlySavingsAmount")
      field "estimatedOnDemandCost", jmes_path(col_item,"EstimatedOnDemandCost")
      field "estimatedROI", jmes_path(col_item,"EstimatedROI")
      field "estimatedSavingsAmount", jmes_path(col_item,"EstimatedSavingsAmount")
      field "estimatedSavingsPercentage", jmes_path(col_item,"EstimatedSavingsPercentage")
      field "estimatedSavingsPlanCost", jmes_path(col_item,"EstimatedSPCost")
      field "hourlyCommitmentToPurchase", jmes_path(col_item,"HourlyCommitmentToPurchase")
      field "instanceFamily", jmes_path(col_item,"SavingsPlansDetails.InstanceFamily")
      field "offeringId", jmes_path(col_item,"SavingsPlansDetails.OfferingId")
      field "region", jmes_path(col_item,"SavingsPlansDetails.Region")
      field "upfrontCost", jmes_path(col_item,"UpfrontCost")
    end
  end
end

datasource "ds_sp_normalization" do 
  run_script $js_sp_cleanup, $ds_sp_recommendations
end

script "js_sp_cleanup", type: "javascript" do
  parameters "sp_recos"
  result "result"
  code <<-EOS
    var result = [];
    _.each(sp_recos, function(reco){
        result.push({
          accountId: reco["accountId"],
          currencyCode: reco["currencyCode"],
          currentAverageHourlyOnDemandSpend: (Math.round(reco["currentAverageHourlyOnDemandSpend"] * 100) / 100).toString(10),
          currentMaximumHourlyOnDemandSpend: (Math.round(reco["currentMaximumHourlyOnDemandSpend"] * 100) / 100).toString(10),
          currentMinimumHourlyOnDemandSpend: (Math.round(reco["currentMinimumHourlyOnDemandSpend"] * 100) / 100).toString(10),
          estimatedAverageUtilization: (Math.round(reco["estimatedAverageUtilization"] * 100) / 100).toString(10),
          estimatedMonthlySavingsAmount: (Math.round(reco["estimatedMonthlySavingsAmount"] * 100) / 100).toString(10),
          estimatedOnDemandCost: (Math.round(reco["estimatedOnDemandCost"] * 100) / 100).toString(10),
          estimatedROI: (Math.round(reco["estimatedROI"] * 100) / 100).toString(10),
          estimatedSavingsAmount: (Math.round(reco["estimatedSavingsAmount"] * 100) / 100).toString(10),
          estimatedSavingsPercentage: (Math.round(reco["estimatedSavingsPercentage"] * 100) / 100).toString(10),
          estimatedSavingsPlanCost: (Math.round(reco["estimatedSavingsPlanCost"] * 100) / 100).toString(10),
          hourlyCommitmentToPurchase: (Math.round(reco["hourlyCommitmentToPurchase"] * 100) / 100).toString(10),
          instanceFamily: reco["instanceFamily"],
          offeringId: reco["offeringId"],
          region: reco["region"],
          upfrontCost: (Math.round(reco["upfrontCost"] * 100) / 100).toString(10),
        })
      })
EOS
end


policy "aws_sp_recommendations" do
  validate_each $ds_sp_normalization do
    summary_template "AWS Savings Plan Purchase Recommendations"
    detail_template <<-EOS
# AWS Savings Plan Purchase Recommendations

### Savings Plan Term: {{parameters.param_term}}
### Savings Plan Type: {{parameters.param_savings_plan_type}}
### Savings Plan Purchase Option: {{parameters.param_payment_option}}
### Lookback Period: {{parameters.param_days}}

| Estimated Monthly Savings | Estimated Savings Percentage | Estimated Savings Plan Cost | Hourly Commitment to Purchase | Upfront Cost | Instance Family | Region | Current Avg Hourly OnDemand Spend | Current Max Hourly OnDemand Spend | Current Min Hourly OnDemand Spend | Offering ID |
| ------------------------- | ---------------------------- | --------------------------- | ----------------------------- | ------------ | --------------- | ------ | --------------------------------- | --------------------------------- | --------------------------------- | ----------- |
{{ range data -}}
| {{.estimatedMonthlySavingsAmount}} ({{.currencyCode}}) | {{.estimatedSavingsPercentage}}% | {{.estimatedSavingsPlanCost}} ({{.currencyCode}}) | {{.hourlyCommitmentToPurchase}} ({{.currencyCode}}) | {{.upfrontCost}} ({{.currencyCode}}) | {{.instanceFamily}} | {{.region}} | {{.currentAverageHourlyOnDemandSpend}} ({{.currencyCode}}) | {{.currentMaximumHourlyOnDemandSpend}} ({{.currencyCode}}) | {{.currentMinimumHourlyOnDemandSpend}} ({{.currencyCode}}) | {{.offeringId}}
{{ end -}}

###### Policy Applied in Account: {{ rs_project_name }} (Account ID: {{ rs_project_id }}) within Org: {{ rs_org_name }} (Org ID: {{ rs_org_id }})
EOS
    escalate $email
    check lt(to_n(val(item,"estimatedMonthlySavingsAmount")),$param_savings_threshold)
  end
end

escalation "email" do
   email $param_email
end

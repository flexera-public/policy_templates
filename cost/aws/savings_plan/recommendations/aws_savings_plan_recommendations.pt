name "AWS Savings Plan Recommendations"
rs_pt_ver 20180301
type "policy"
short_description "A policy that sends email notifications when AWS Savings Plan Recommendations are identified. NOTE: These  Recommendations are generated by AWS. See the [README](https://github.com/flexera-public/policy_templates/tree/master/cost/aws/savings_plan/recommendations) and [docs.flexera.com/flexera/EN/Automation](https://docs.flexera.com/flexera/EN/Automation/AutomationGS.htm) to learn more."
long_description ""
severity "medium"
category "Cost"
default_frequency "daily"
info(
  version: "2.13",
  provider: "AWS",
  service: "",
  policy_set: ""
)

##############################################################################
# Parameters
##############################################################################

parameter "param_days" do
  category "Savings Plan"
  label "Look Back Period"
  default "Last 7 Days"
  description "Number of days of prior usage to analyze"
  allowed_values "Last 7 Days","Last 30 Days","Last 60 Days"
  type "string"
end

parameter "param_term" do
  category "Savings Plan"
  label "Savings Plan Term"
  description "Length of Savings Plan term"
  allowed_values "1 Year","3 Year"
  default "1 Year"
  type "string"
end

parameter "param_payment_option" do
  category "Savings Plan"
  label "Payment Option"
  default "No Upfront"
  allowed_values "No Upfront","Partial Upfront","All Upfront","Light Utilization","Medium Utilization","Heavy Utilization"
  type "string"
  description "Savings Plan purchase option."
end

parameter "param_aws_account_number" do
  type "string"
  label "Account Number"
  description "The account number for AWS STS Cross Account Roles."
  default ""
end

parameter "param_scope" do
  category "Savings Plan"
  label "Account Scope"
  description "The account scope that you want your recommendations for"
  allowed_values "Payer","Linked"
  default "Payer"
  type "string"
end

parameter "param_savings_plan_type" do
  category "Savings Plan"
  label "Savings Plan Type"
  default "Compute Savings Plan"
  allowed_values "Compute Savings Plan","EC2 Instance Savings Plan","SageMaker Savings Plans"
  type "string"
end

parameter "param_savings_threshold" do
  category "Savings Plan"
  label "Monthly Savings Threshold"
  description "Specify the minimum estimated monthly savings that should result in a recommendation"
  default 100
  type "number"
end

parameter "param_email" do
  type "list"
  label "Email addresses to notify"
  description "Email addresses of the recipients you wish to notify"
end

parameter "param_currency_adjustment" do
  label "Currency Adjustment"
  description "adjusts recommendation savings based on USD conversion rate where USD is 100%"
  default 1.00
  max_value 5.00
  type "number"
end

###############################################################################
# Authentication
###############################################################################

#Authenticate with AWS
credentials "auth_aws" do
  schemes "aws","aws_sts"
  label "AWS"
  description "Select the AWS Credential from the list"
  tags "provider=aws"
  aws_account_number $param_aws_account_number
end

credentials "auth_rs" do
  schemes "oauth2"
  label "Flexera_Automation"
  description "Select FlexeraOne OAuth2 credentials"
  tags "provider=flexera"
end

###############################################################################
# Pagination
###############################################################################

pagination "aws_pagination" do
  get_page_marker do
    body_path "NextPageToken"
  end
  set_page_marker do
    body_field "NextPageToken"
  end
end

###############################################################################
# Datasources
###############################################################################

datasource "ds_get_caller_identity" do
  request do
    auth $auth_aws
    verb "GET"
    host "sts.amazonaws.com"
    path "/"
    header "User-Agent", "RS Policies"
    query "Action", "GetCallerIdentity"
    query "Version", "2011-06-15"
  end
  result do
    encoding "xml"
    collect xpath(response, "//GetCallerIdentityResponse/GetCallerIdentityResult") do
      field "account",xpath(col_item, "Account")
    end
  end
end

datasource "ds_billing_centers" do
  request do
    auth $auth_rs
    host rs_optima_host
    path join(["/analytics/orgs/", rs_org_id, "/billing_centers"])
    header "Api-Version", "1.0"
    header "User-Agent", "RS Policies"
    query "view", "allocation_table"
  ignore_status [403]
  end
  result do
    encoding "json"
    collect jmes_path(response, "[*]") do
      field "href", jmes_path(col_item, "href")
      field "id", jmes_path(col_item, "id")
      field "name", jmes_path(col_item, "name")
      field "parent_id", jmes_path(col_item, "parent_id")
    end
  end
end

datasource "ds_top_level_billing_centers" do
  run_script $js_top_level_bc, $ds_billing_centers
end

datasource "ds_account_name" do
  request do
    run_script $js_get_account_name, $ds_get_caller_identity, $ds_top_level_billing_centers, rs_org_id, rs_optima_host
  end
  result do
    encoding "json"
    collect jmes_path(response, "rows[*]") do
      field "vendorAccountName", jmes_path(col_item, "dimensions.vendor_account_name")
    end
  end
end

datasource "ds_sp_recommendations" do
  request do
    run_script $js_sp_request, $param_days, $param_payment_option, $param_term, $param_savings_plan_type, $param_scope
  end
  result do
    encoding "json"
    collect jmes_path(response, "SavingsPlansPurchaseRecommendation.SavingsPlansPurchaseRecommendationDetails[*]") do
      field "accountID", jmes_path(col_item,"AccountId")
      field "currencyCode", jmes_path(col_item,"CurrencyCode")
      field "currentAverageHourlyOnDemandSpend", jmes_path(col_item,"CurrentAverageHourlyOnDemandSpend")
      field "currentMaximumHourlyOnDemandSpend", jmes_path(col_item,"CurrentMaximumHourlyOnDemandSpend")
      field "currentMinimumHourlyOnDemandSpend", jmes_path(col_item,"CurrentMinimumHourlyOnDemandSpend")
      field "estimatedAverageUtilization", jmes_path(col_item,"EstimatedAverageUtilization")
      field "estimatedMonthlySavingsAmount", jmes_path(col_item,"EstimatedMonthlySavingsAmount")
      field "estimatedOnDemandCost", jmes_path(col_item,"EstimatedOnDemandCost")
      field "estimatedROI", jmes_path(col_item,"EstimatedROI")
      field "estimatedSavingsAmount", jmes_path(col_item,"EstimatedSavingsAmount")
      field "estimatedSavingsPercentage", jmes_path(col_item,"EstimatedSavingsPercentage")
      field "estimatedSavingsPlanCost", jmes_path(col_item,"EstimatedSPCost")
      field "hourlyCommitmentToPurchase", jmes_path(col_item,"HourlyCommitmentToPurchase")
      field "instanceFamily", jmes_path(col_item,"SavingsPlansDetails.InstanceFamily")
      field "offeringId", jmes_path(col_item,"SavingsPlansDetails.OfferingId")
      field "region", jmes_path(col_item,"SavingsPlansDetails.Region")
      field "upfrontCost", jmes_path(col_item,"UpfrontCost")
    end
  end
end

datasource "ds_sp_normalization" do
  run_script $js_sp_cleanup, $ds_sp_recommendations, $param_currency_adjustment, $ds_account_name
end

###############################################################################
# Scripts
###############################################################################
script "js_get_account_name", type: "javascript" do
  parameters "account_id", "billing_centers", "org", "optima_host"
  result "request"
  code <<-EOS
    // returns date formatted as string: YYYY-mm-dd
    function getFormattedDailyDate(date) {
      var year = date.getFullYear();
      var month = (1 + date.getMonth()).toString();
      month = month.length > 1 ? month : '0' + month;
      var day = date.getDate().toString();
      day = day.length > 1 ? day : '0' + day;
      return year + '-' + month + '-' + day;
    }
    var start_date = getFormattedDailyDate(new Date(new Date().setDate(new Date().getDate() - 3)));
    var end_date = getFormattedDailyDate(new Date(new Date().setDate(new Date().getDate() - 2)));
    var request = {
      auth: "auth_rs",
      host: optima_host,
      verb: "POST",
      path: "/bill-analysis/orgs/" + org + "/costs/select",
      body_fields: {
        "dimensions": ["vendor_account_name"],
        "granularity": "day",
        "start_at": start_date,
        "end_at": end_date,
        "metrics": ["cost_nonamortized_unblended_adj"],
        "billing_center_ids": _.compact(_.map(billing_centers, function(value){ return value.id})),
        "limit": 1,
        "filter": {
          "dimension": "vendor_account",
          "type": "equal",
          "value": account_id[0]["account"]
        }
      },
      headers: {
        "User-Agent": "RS Policies",
        "Api-Version": "1.0"
      },
      ignore_status: [400]
    }
  EOS
end

script "js_top_level_bc", type: "javascript" do
  parameters "billing_centers"
  result "filtered_billing_centers"
  code <<-EOS
    var filtered_billing_centers =_.reject(billing_centers, function(bc){ return bc.parent_id != null });
  EOS
end

script "js_sp_cleanup", type: "javascript" do
  parameters "sp_recos", "currency_adjustment", "ds_account_name"
  result "result"
  code <<-EOS
    var result = [];
    accountName = ""
    if (ds_account_name[0] != null) {
      accountName = ds_account_name[0]['vendorAccountName']
    }
    _.each(sp_recos, function(reco){
        result.push({
          accountID: reco["accountID"],
          accountName: accountName,
          currencyCode: reco["currencyCode"],
          currentAverageHourlyOnDemandSpend: (Math.round(reco["currentAverageHourlyOnDemandSpend"] * 100) / 100).toString(10),
          currentMaximumHourlyOnDemandSpend: (Math.round(reco["currentMaximumHourlyOnDemandSpend"] * 100) / 100).toString(10),
          currentMinimumHourlyOnDemandSpend: (Math.round(reco["currentMinimumHourlyOnDemandSpend"] * 100) / 100).toString(10),
          estimatedAverageUtilization: (Math.round(reco["estimatedAverageUtilization"] * 100) / 100).toString(10),
          estimatedMonthlySavingsAmount: (Math.round(reco["estimatedMonthlySavingsAmount"] * 100) / 100 * currency_adjustment).toString(10),
          estimatedOnDemandCost: (Math.round(reco["estimatedOnDemandCost"] * 100) / 100).toString(10),
          estimatedROI: (Math.round(reco["estimatedROI"] * 100) / 100).toString(10),
          estimatedSavingsAmount: (Math.round(reco["estimatedSavingsAmount"] * 100) / 100).toString(10),
          estimatedSavingsPercentage: (Math.round(reco["estimatedSavingsPercentage"] * 100) / 100).toString(10),
          estimatedSavingsPlanCost: (Math.round(reco["estimatedSavingsPlanCost"] * 100) / 100).toString(10),
          hourlyCommitmentToPurchase: (Math.round(reco["hourlyCommitmentToPurchase"] * 100) / 100).toString(10),
          instanceFamily: reco["instanceFamily"],
          offeringId: reco["offeringId"],
          region: reco["region"],
          upfrontCost: (Math.round(reco["upfrontCost"] * 100) / 100).toString(10),
          estimatedMonthlySavingsAmountWithCurrencyCode : (Math.round(reco["estimatedMonthlySavingsAmount"] * 100) / 100).toString(10)+" "+reco["currencyCode"],
          estimatedSavingsPlanCostWithCurrencyCode : (Math.round(reco["estimatedSavingsPlanCost"] * 100) / 100).toString(10)+" "+reco["currencyCode"],
          hourlyCommitmentToPurchaseWithCurrencyCode : (Math.round(reco["hourlyCommitmentToPurchase"] * 100) / 100).toString(10)+" "+reco["currencyCode"],
          upfrontCostWithCurrencyCode : (Math.round(reco["upfrontCost"] * 100) / 100).toString(10)+" "+reco["currencyCode"],
          currentAverageHourlyOnDemandSpendWithCurrencyCode : (Math.round(reco["currentAverageHourlyOnDemandSpend"] * 100) / 100).toString(10)+" "+reco["currencyCode"],
          currentMaximumHourlyOnDemandSpendWithCurrencyCode : (Math.round(reco["currentMaximumHourlyOnDemandSpend"] * 100) / 100).toString(10)+" "+reco["currencyCode"],
          currentMinimumHourlyOnDemandSpendWithCurrencyCode : (Math.round(reco["currentMinimumHourlyOnDemandSpend"] * 100) / 100).toString(10)+" "+reco["currencyCode"]
      })
    })
EOS
end


script "js_sp_request", type: "javascript" do
  parameters "param_days","param_payment_option","param_term","param_savings_plan_type", "param_scope"
  result "request"
  code <<-EOS

    var period = {
      "Last 7 Days":"SEVEN_DAYS",
      "Last 30 Days":"THIRTY_DAYS",
      "Last 60 Days":"SIXTY_DAYS"
    }

    var term = {
      "1 Year":"ONE_YEAR",
      "3 Year":"THREE_YEARS"
    }

    var scope = {
      "Payer":"PAYER",
      "Linked":"LINKED"
    }

    var option = {
      "No Upfront":"NO_UPFRONT",
      "Partial Upfront":"PARTIAL_UPFRONT",
      "All Upfront":"ALL_UPFRONT",
      "Light Utilization":"LIGHT_UTILIZATION",
      "Medium Utilization":"MEDIUM_UTILIZATION",
      "Heavy Utilization":"HEAVY_UTILIZATION"
    }

    var plan = {
      "Compute Savings Plan":"COMPUTE_SP",
      "EC2 Instance Savings Plan":"EC2_INSTANCE_SP",
      "SageMaker Savings Plans":"SAGEMAKER_SP"
    }

    var payload = {}
    payload['LookbackPeriodInDays'] = period[param_days]
    payload['AccountScope'] = scope[param_scope]
    payload['PaymentOption'] = option[param_payment_option]
    payload['TermInYears'] = term[param_term]
    payload['SavingsPlansType'] = plan[param_savings_plan_type]
    var request = {
      auth: "auth_aws",
      pagination: "aws_pagination",
      host: "ce.us-east-1.amazonaws.com",
      path: '/',
      verb: 'POST',
      body_fields: payload,
      headers: {
        "User-Agent": "RS Policies",
        "X-Amz-Target": "AWSInsightsIndexService.GetSavingsPlansPurchaseRecommendation",
        "Content-Type": "application/x-amz-json-1.1",
      }
    }
  EOS
end

###############################################################################
# Policy
##############################################################################

policy "aws_sp_recommendations" do
  validate_each $ds_sp_normalization do
    summary_template "AWS Savings Plan Purchase Recommendations"
    hash_include 'estimatedMonthlySavingsAmount'
    escalate $email
    check lt(to_n(val(item,"estimatedMonthlySavingsAmount")),$param_savings_threshold)
    # AWS Savings Plan Purchase Recommendations

    ### Savings Plan Term: {{parameters.param_term}}
    ### Savings Plan Type: {{parameters.param_savings_plan_type}}
    ### Savings Plan Purchase Option: {{parameters.param_payment_option}}
    ### Lookback Period: {{parameters.param_days}}
    export do
      resource_level true
      field "accountID" do
        label "Account ID"
      end
      field "accountName" do
        label "Account Name"
      end
      field "region" do
        label "Region"
      end
      field "estimatedMonthlySavingsAmountWithCurrencyCode" do
        label "Estimated Monthly Savings"
      end
      field "estimatedSavingsPercentage" do
        label "Estimated Savings Percentage"
      end
      field "estimatedSavingsPlanCostWithCurrencyCode" do
        label "Estimated Savings Plan Cost"
      end
      field "hourlyCommitmentToPurchaseWithCurrencyCode" do
        label "Hourly Commitment To Purchase"
      end
      field "upfrontCostWithCurrencyCode" do
        label "Upfront Cost"
      end
      field "instanceFamily" do
        label "Instance Family"
      end
      field "currentAverageHourlyOnDemandSpendWithCurrencyCode" do
        label "Current Avg Hourly OnDemand Spend"
      end
      field "currentMaximumHourlyOnDemandSpendWithCurrencyCode" do
        label "Current Max Hourly OnDemand Spend"
      end
      field "currentMinimumHourlyOnDemandSpendWithCurrencyCode" do
        label "Current Min Hourly OnDemand Spend"
      end
      field "offeringId" do
        label "Offering Id"
      end
      field "id" do
        label "Account Id"
        path "accountID"
      end
    end
  end
end

###############################################################################
# Escalations
###############################################################################

escalation "email" do
  automatic true
  label "Send Email"
  description "Send incident email"
  email $param_email
end

name "AWS Savings Plan Utilization"
rs_pt_ver 20180301
type "policy"
short_description "A policy that sends email notifications when AWS Savings Plan Utilizations are identified. NOTE: These  Utilizations are generated by AWS. See the [README](https://github.com/flexera-public/policy_templates/tree/master/cost/aws/savings_plan/utilization) and [docs.flexera.com/flexera/EN/Automation](https://docs.flexera.com/flexera/EN/Automation/AutomationGS.htm) to learn more."
long_description ""
severity "medium"
category "Cost"
default_frequency "monthly"
info(
  version: "3.1",
  provider: "AWS",
  service: "Cost Explorer",
  policy_set: "Savings Plan Utilization"
)

###############################################################################
# Parameters
###############################################################################

parameter "param_savings_threshold" do
  category "Savings Plan"
  label "Savings Plan Utilization Threshold"
  description "Specify the minimum Savings Plan Utilization threshold as a percentage that should result in an alert"
  default 100
  type "number"
end

parameter "param_email" do
  type "list"
  label "Email addresses to notify"
  default []
  description "Email addresses of the recipients you wish to notify"
end

parameter "param_time_period" do
  category "Savings Plan"
  label "Look Back Period"
  default "Last 7 days"
  description "The number of days of past AWS Savings Plans Utilization data to analyze"
  allowed_values "Last 7 days","Last 30 days"
  type "string"
end

parameter "param_sp_arn" do
  category "Savings Plan"
  label "Savings Plan ARN"
  description "Optional; The unique Amazon Resource Name (ARN) for a particular Savings Plan.  If no ARN is specified, all Savings Plans will have utilization reported."
  default "" # Default value of empty string indicates that all Savings Plans will be checked
  allowed_pattern /(arn:aws:savingsplans::[a-zA-Z0-9]*|^$)/ # Regex to validate ARN format, or allow empty string
  type "string"
end

###############################################################################
# Authentication
###############################################################################

#AUTHENTICATE WITH FLEXERA/OPTIMA
credentials "auth_flexera" do
  schemes "oauth2"
  label "flexera"
  description "Select Flexera One OAuth2 credentials"
  tags "provider=flexera"
end

#AUTHENTICATE WITH AWS
credentials "auth_aws" do
  schemes "aws","aws_sts"
  label "AWS"
  description "Select the AWS Credential from the list"
  tags "provider=aws"
end

###############################################################################
# Pagination
###############################################################################

pagination "pagination_aws_savingsplans" do
  get_page_marker do
    body_path jmes_path(response, "nextToken")
  end
  set_page_marker do
    body_field "nextToken"
  end
end

###############################################################################
# Datasources and Scripts
###############################################################################

#GET CURRENCY REFERENCE
datasource "ds_currency_reference" do
  request do
    host "raw.githubusercontent.com"
    path "/rightscale/policy_templates/master/cost/scheduled_reports/currency_reference.json"
    header "User-Agent", "RS Policies"
  end
end

#GET CURRENCY CODE FOR ORG
datasource "ds_currency_code" do
  request do
    auth $auth_flexera
    host rs_optima_host
    path join(["/bill-analysis/orgs/",rs_org_id,"/settings/currency_code"])
    header "Api-Version", "0.1"
    header "User-Agent", "RS Policies"
  end
  result do
    encoding "json"
    field "id", jmes_path(response,"id")
    field "value", jmes_path(response,"value")
  end
end

# GET SAVINGS PLANS LIST FROM AWS API
datasource "ds_savings_plans" do
  request do
    auth $auth_aws
    pagination $pagination_aws_savingsplans
    host "savingsplans.us-east-1.amazonaws.com"
    verb "POST"
    path "/DescribeSavingsPlans"
    header "User-Agent", "RS Policies"
    header "Content-Type", "application/json"
  end
  result do
    encoding "json"
    # Use jq to select from response only where savingsPlan.state not equal "retired"
    collect jq(response, '.savingsPlans[] | select( .state != "retired" )') do
      field "savingsPlanArn", jmes_path(col_item, "savingsPlanArn")
    end
  end
end

datasource "ds_savings_plan_selected" do
  run_script $js_savings_plan_selected, $ds_savings_plans, $param_sp_arn
end

script "js_savings_plan_selected", type: "javascript" do
  parameters "ds_savings_plans", "param_sp_arn"
  result "results"
  code <<-EOS
  var results = [];
  if (param_sp_arn === ""){
    results = ds_savings_plans;
  } else {
    results = _.filter(ds_savings_plans, function(sp){
      return sp.savingsPlanArn === param_sp_arn;
    });
  }
  EOS
end

#GET SAVINGS PLANS UTILIZATIONS DATA FROM AWS API
datasource "ds_aws_utilization" do
  iterate $ds_savings_plan_selected
  request do
    run_script $js_get_aws_utilization, $param_time_period, val(iter_item, "savingsPlanArn")
  end
  result do
    encoding "json"
    collect jmes_path(response, "SavingsPlansUtilizationsByTime[*].Utilization") do
      field "savingsPlanArn", jmes_path(iter_item,"savingsPlanArn")
      field "total_commitment", jmes_path(col_item,"TotalCommitment")
      field "unused_commitment", jmes_path(col_item,"UnusedCommitment")
      field "used_commitment", jmes_path(col_item,"UsedCommitment")
      field "utilization_percentage", jmes_path(col_item,"UtilizationPercentage")
    end
  end
end

script "js_get_aws_utilization", type: "javascript" do
  parameters "time_period", "savingsPlanArn"
  result "request"
  code <<-EOS

  var start_date = new Date(), end_date = new Date()
  if(time_period === "Last 7 days"){
    end_date.setDate(end_date.getDate() - 1)
    start_date.setDate(start_date.getDate() - 8)
  } else if(time_period === "Last 30 days"){
    end_date.setDate(end_date.getDate() - 1)
    start_date.setDate(start_date.getDate() - 31)
  }

  var payload = {
    "Filter": {
      "Dimensions": {
        "Key": "SAVINGS_PLAN_ARN",
        "Values": [ savingsPlanArn ]
      }
    },
    "SortBy": {
      "Key": "UtilizationPercentage",
      "SortOrder": "ASCENDING"
    },
    "Granularity": "MONTHLY",
    "TimePeriod": {
      "End": end_date.toLocaleDateString("en-US"),
      "Start": start_date.toLocaleDateString("en-US")
    }
  }

  var request = {
    auth: "auth_aws",
    host: "ce.us-east-1.amazonaws.com",
    path: '/',
    verb: 'POST',
    body_fields: payload,
    headers: {
      "User-Agent": "RS Policies",
      "X-Amz-Target": "AWSInsightsIndexService.GetSavingsPlansUtilization",
      "Content-Type": "application/x-amz-json-1.1",
    }
  }
  EOS
end

#PROCESS RESPONSE AND DEFINE CHART DATA
datasource "ds_chart_data" do
  run_script $js_define_chart_data, $ds_aws_utilization, $ds_currency_reference, $ds_currency_code, $param_savings_threshold
end

script "js_define_chart_data", type: "javascript" do
  parameters "aws_utilization_data", "curr_ref", "curr_code", "savings_threshold"
  result "outputs"
  code <<-EOS

  var curr = "$", separator = ","
  if (curr_code.value !== undefined){
    curr = curr_ref[curr_code.value].symbol,
    separator = curr_ref[curr_code.value].t_separator
  }

  function formatNumber(number, separator){
    var values = parseFloat(number).toFixed(2).toString().split(".")
    var result = ''

    while (values[0].length > 3){
      var chunk = values[0].substr(-3)
      values[0] = values[0].substr(0, values[0].length - 3)
      result = separator + chunk + result
    }
    if (values[0].length > 0){
      result = values[0] + result
    }
    if(values[1]==undefined){
      return result
    }
    return result + "." + values[1]
  }

  var outputs = []
  _.each(aws_utilization_data, function(util){
    utilization_percentage = Number(util.used_commitment)/Number(util.total_commitment)
    if ( utilization_percentage < savings_threshold){
      report = {
        payer_account_id: util.savingsPlanArn.split(":")[4],
        arn: util.savingsPlanArn,
        unused_commitment: parseFloat(util.unused_commitment).toFixed(3),
        used_commitment: parseFloat(util.used_commitment).toFixed(3),
        total_commitment: parseFloat(util.total_commitment).toFixed(3),
        utilization_percentage: parseFloat(util.utilization_percentage).toFixed(3),
        chart_title: encodeURI("chtt=Utilization for Savings Plan ARN: '" + util.savingsPlanArn + "'"),
        chart_type: encodeURI("cht=pd"),
        chart_size: encodeURI("chs=800x200"),
        chart_data: encodeURI("chd=t:" + util.unused_commitment + "," + util.used_commitment), //remove currency/separator from this line
        chart_image: encodeURI("chof=.png"),
        chart_scale: encodeURI('chds=a'),
        chart_label: encodeURI("chdl=Unused+Commitment|Used+Commitment"),
        chart_inside_label: encodeURI("chli=" + curr + formatNumber(util.total_commitment, separator)),
        chart_data_label: encodeURI("chl=" + curr+ formatNumber(util.unused_commitment, separator) + "|" + curr + formatNumber(util.used_commitment, separator)) //add currency/separator to this line
      }
      outputs.push(report)
    }
  })
  EOS
end

###############################################################################
# Escalations
###############################################################################

escalation "esc_savings_plans_utilizations" do
  automatic true
  label "Send Email"
  description "Send incident email"
  email $param_email
end

###############################################################################
# Policy
###############################################################################

policy "policy_aws_sp_utilization" do
  validate_each $ds_chart_data do
    summary_template "AWS Savings Plan Utilization Details for Account {{with(index data 0)}}{{.payer_account_id}}{{end}}"
    detail_template <<-EOS
# Savings Plan Utilization
{{ range data }}
### ARN: {{ .arn }}
### Utilization for {{ parameters.param_time_period }}
![Spending Overview Chart](https://api.image-charts-auth.flexeraeng.com/ic-function?rs_org_id={{ rs_org_id }}&rs_project_id={{ rs_project_id }}&{{.chart_type}}&{{.chart_size}}&{{.chart_data}}&{{.chart_image}}&{{.chart_scale}}&{{.chart_label}}&{{.chart_inside_label}}&{{.chart_data_label}})
___
{{ end }}
###### Policy Applied in Account: {{ rs_project_name }} (Account ID: {{ rs_project_id }}) within Org: {{ rs_org_name }} (Org ID: {{ rs_org_id }})
EOS
    escalate $esc_savings_plans_utilizations
    check eq(0,1)
    export do
      # no actions so resource_level can be false
      resource_level false
      field "arn" do
        label "Savings Plan ARN"
      end
      field "total_commitment" do
        label "Total Commitment"
      end
      field "unused_commitment" do
        label "Unused Commitment"
      end
      field "used_commitment" do
        label "Used Commitment"
      end
      field "utilization_percentage" do
        label "Utilization Percentage"
      end
    end
  end
end

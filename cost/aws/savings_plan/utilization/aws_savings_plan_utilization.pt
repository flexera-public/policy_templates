name "AWS Savings Plan Utilization"
rs_pt_ver 20180301
type "policy"
short_description "Reports when AWS Savings Plan utilization is too low. See the [README](https://github.com/flexera-public/policy_templates/tree/master/cost/aws/savings_plan/utilization) and [docs.flexera.com/flexera/EN/Automation](https://docs.flexera.com/flexera/EN/Automation/AutomationGS.htm) to learn more."
long_description ""
doc_link "https://github.com/flexera-public/policy_templates/tree/master/cost/aws/savings_plan/utilization"
severity "medium"
category "Cost"
default_frequency "monthly"
info(
  version: "4.0.6",
  provider: "AWS",
  service: "Compute",
  policy_set: "Savings Plans",
  hide_skip_approvals: "true"
)

###############################################################################
# Parameters
###############################################################################

parameter "param_email" do
  type "list"
  category "Policy Settings"
  label "Email Addresses"
  description "A list of email addresses to notify."
  default []
end

parameter "param_savings_threshold" do
  type "number"
  category "Savings Plan"
  label "Utilization Threshold"
  description "Specify the minimum Savings Plan Utilization threshold as a percentage that should result in an alert"
  default 100
end

parameter "param_lookback" do
  type "number"
  category "Savings Plan"
  label "Look Back Period (Days)"
  description "The number of days of past AWS Savings Plans Utilization data to analyze."
  min_value 7
  max_value 365
  default 7
end

parameter "param_savings_plan_arns" do
  type "list"
  category "Savings Plan"
  label "Savings Plan ARNs"
  description "The unique Amazon Resource Names (ARNs) for particular Savings Plans to report on. Leave blank to report on all Savings Plans."
  allowed_pattern /(arn:aws:savingsplans::[a-zA-Z0-9]*|^$)/
  default []
end

###############################################################################
# Authentication
###############################################################################

credentials "auth_aws" do
  schemes "aws", "aws_sts"
  label "AWS"
  description "Select the AWS Credential from the list"
  tags "provider=aws"
  aws_account_number $param_aws_account_number
end

credentials "auth_flexera" do
  schemes "oauth2"
  label "Flexera"
  description "Select Flexera One OAuth2 credentials"
  tags "provider=flexera"
end

###############################################################################
# Pagination
###############################################################################

pagination "pagination_aws" do
  get_page_marker do
    body_path jmes_path(response, "NextToken")
  end
  set_page_marker do
    body_field "NextToken"
  end
end

###############################################################################
# Datasources & Scripts
###############################################################################

# Get region-specific Flexera API endpoints
datasource "ds_flexera_api_hosts" do
  run_script $js_flexera_api_hosts, rs_optima_host
end

script "js_flexera_api_hosts", type: "javascript" do
  parameters "rs_optima_host"
  result "result"
  code <<-EOS
  host_table = {
    "api.optima.flexeraeng.com": {
	    api: "api.flexera.com",
      flexera: "api.flexera.com",
      fsm: "api.fsm.flexeraeng.com",
      grs: "grs-front.iam-us-east-1.flexeraeng.com",
      ui: "app.flexera.com",
      tld: "flexera.com"
    },
    "api.optima-eu.flexeraeng.com": {
	    api: "api.flexera.eu",
      flexera: "api.flexera.eu",
      fsm: "api.fsm-eu.flexeraeng.com",
      grs: "grs-front.eu-central-1.iam-eu.flexeraeng.com",
      ui: "app.flexera.eu",
      tld: "flexera.eu"
    },
    "api.optima-apac.flexeraeng.com": {
	    api: "api.flexera.au",
      flexera: "api.flexera.au",
      fsm: "api.fsm-apac.flexeraeng.com",
      grs: "grs-front.ap-southeast-2.iam-apac.flexeraeng.com",
      ui: "app.flexera.au",
      tld: "flexera.au"
    }
  }

  result = host_table[rs_optima_host]
EOS
end

# Get applied policy metadata for use later
datasource "ds_applied_policy" do
  request do
    auth $auth_flexera
    host val($ds_flexera_api_hosts, "flexera")
    path join(["/policy/v1/orgs/", rs_org_id, "/projects/", rs_project_id, "/applied-policies", switch(policy_id, join(["/", policy_id]), "")])
  end
end

datasource "ds_currency_reference" do
  request do
    host "raw.githubusercontent.com"
    path "/flexera-public/policy_templates/master/data/currency/currency_reference.json"
    header "User-Agent", "RS Policies"
  end
end

datasource "ds_currency_code" do
  request do
    auth $auth_flexera
    host rs_optima_host
    path join(["/bill-analysis/orgs/", rs_org_id, "/settings/currency_code"])
    header "Api-Version", "0.1"
    header "User-Agent", "RS Policies"
    ignore_status [403]
  end
  result do
    encoding "json"
    field "id", jmes_path(response, "id")
    field "value", jmes_path(response, "value")
  end
end

datasource "ds_currency" do
  run_script $js_currency, $ds_currency_reference, $ds_currency_code
end

script "js_currency", type:"javascript" do
  parameters "ds_currency_reference", "ds_currency_code"
  result "result"
  code <<-EOS
  symbol = "$"
  separator = ","

  if (ds_currency_code['value'] != undefined) {
    if (ds_currency_reference[ds_currency_code['value']] != undefined) {
      symbol = ds_currency_reference[ds_currency_code['value']]['symbol']

      if (ds_currency_reference[ds_currency_code['value']]['t_separator'] != undefined) {
        separator = ds_currency_reference[ds_currency_code['value']]['t_separator']
      } else {
        separator = ""
      }
    }
  }

  result = {
    symbol: symbol,
    separator: separator
  }
EOS
end

datasource "ds_savings_plans" do
  request do
    auth $auth_aws
    pagination $pagination_aws
    verb "POST"
    host "savingsplans.us-east-1.amazonaws.com"
    path "/DescribeSavingsPlans"
    header "User-Agent", "RS Policies"
    header "Content-Type", "application/json"
  end
  result do
    encoding "json"
    collect jq(response, '.savingsPlans[] | select( .state != "retired" )') do
      field "arn", jmes_path(col_item, "savingsPlanArn")
    end
  end
end

datasource "ds_savings_plans_filtered" do
  run_script $js_savings_plans_filtered, $ds_savings_plans, $param_savings_plan_arns
end

script "js_savings_plans_filtered", type: "javascript" do
  parameters "ds_savings_plans", "param_savings_plan_arns"
  result "result"
  code <<-EOS
  if (param_savings_plan_arns.length == 0) {
    result = ds_savings_plans
  } else {
    result = _.filter(ds_savings_plans, function(sp) {
      return _.contains(param_savings_plan_arns, sp['arn'])
    })
  }
EOS
end

datasource "ds_savings_plans_utilization" do
  iterate $ds_savings_plans_filtered
  request do
    run_script $js_savings_plans_utilization, val(iter_item, "arn"), $param_lookback
  end
  result do
    encoding "json"
    collect jmes_path(response, "SavingsPlansUtilizationsByTime[*].Utilization") do
      field "total_commitment", jmes_path(col_item, "TotalCommitment")
      field "unused_commitment", jmes_path(col_item, "UnusedCommitment")
      field "used_commitment", jmes_path(col_item, "UsedCommitment")
      field "utilization_percentage", jmes_path(col_item, "UtilizationPercentage")
      field "arn", jmes_path(iter_item, "arn")
    end
  end
end

script "js_savings_plans_utilization", type: "javascript" do
  parameters "arn", "param_lookback"
  result "request"
  code <<-EOS
  end_date = new Date()
  end_date.setDate(end_date.getDate() - 1)
  end_date = end_date.toLocaleDateString("en-US")

  start_date = new Date()
  start_date.setDate(start_date.getDate() - 1 - param_lookback)
  start_date = start_date.toLocaleDateString("en-US")

  var request = {
    auth: "auth_aws",
    verb: 'POST',
    host: "ce.us-east-1.amazonaws.com",
    path: '/',
    headers: {
      "User-Agent": "RS Policies",
      "X-Amz-Target": "AWSInsightsIndexService.GetSavingsPlansUtilization",
      "Content-Type": "application/x-amz-json-1.1",
    },
    body_fields: {
      "Filter": {
        "Dimensions": {
          "Key": "SAVINGS_PLAN_ARN",
          "Values": [ arn ]
        }
      },
      "SortBy": {
        "Key": "UtilizationPercentage",
        "SortOrder": "ASCENDING"
      },
      "Granularity": "MONTHLY",
      "TimePeriod": {
        "End": end_date,
        "Start": start_date
      }
    },
    ignore_status: [400, 403, 404]
  }
EOS
end

datasource "ds_chart_data" do
  run_script $js_chart_data, $ds_savings_plans_utilization, $ds_currency, $ds_applied_policy, $param_savings_threshold, $param_lookback
end

script "js_chart_data", type: "javascript" do
  parameters "ds_savings_plans_utilization", "ds_currency", "ds_applied_policy", "param_savings_threshold", "param_lookback"
  result "result"
  code <<-EOS
  // Function for formatting currency numbers later
  function formatNumber(number, separator) {
    formatted_number = "0"

    if (number) {
      formatted_number = (Math.round(number * 100) / 100).toString().split(".")[0]

      if (separator) {
        withSeparator = ""

        for (var i = 0; i < formatted_number.length; i++) {
          if (i > 0 && (formatted_number.length - i) % 3 == 0) { withSeparator += separator }
          withSeparator += formatted_number[i]
        }

        formatted_number = withSeparator
      }

      decimal = (Math.round(number * 100) / 100).toString().split(".")[1]
      if (decimal) { formatted_number += "." + decimal }
    }

    return formatted_number
  }

  end_date = new Date()
  end_date.setDate(end_date.getDate() - 1)
  end_date = end_date.toISOString().split('T')[0]

  start_date = new Date()
  start_date.setDate(start_date.getDate() - 1 - param_lookback)
  start_date = start_date.toISOString().split('T')[0]

  result = []

  _.each(ds_savings_plans_utilization, function(util) {
    utilization_percentage = Number(util['used_commitment']) / Number(util['total_commitment'])

    if (utilization_percentage < param_savings_threshold) {
      result.push({
        payer_account_id: util['arn'].split(":")[4],
        arn: util['arn'],
        unused_commitment: Math.round(util['unused_commitment'] * 1000) / 1000,
        used_commitment: Math.round(util['used_commitment'] * 1000) / 1000,
        total_commitment: Math.round(util['total_commitment'] * 1000) / 1000,
        utilization_percentage: Math.round(util['utilization_percentage'] * 1000) / 1000,
        chart_title: encodeURI("chtt=Utilization for Savings Plan ARN: '" + util['arn'] + "'"),
        chart_type: encodeURI("cht=pd"),
        chart_size: encodeURI("chs=800x200"),
        chart_data: encodeURI("chd=t:" + util['unused_commitment'] + "," + util['used_commitment']),
        chart_image: encodeURI("chof=.png"),
        chart_scale: encodeURI('chds=a'),
        chart_label: encodeURI("chdl=Unused+Commitment|Used+Commitment"),
        chart_inside_label: encodeURI("chli=" + ds_currency['symbol'] + formatNumber(util['total_commitment'], ds_currency['separator'])),
        chart_data_label: encodeURI("chl=" + ds_currency['symbol'] + formatNumber(util['unused_commitment'], ds_currency['separator']) + "|" + ds_currency['symbol'] + formatNumber(util['used_commitment'], ds_currency['separator'])),
        start_date: start_date,
        end_date: end_date,
        policy_name: ds_applied_policy['name']
      })
    }
  })
EOS
end

###############################################################################
# Policy
###############################################################################

policy "pol_aws_sp_utilization" do
  validate_each $ds_chart_data do
    summary_template "{{ with index data 0 }}{{ .policy_name }}{{ end }}: AWS Account {{ with index data 0 }}{{ .payer_account_id }}{{ end }}"
    detail_template <<-EOS
# Savings Plan Utilization
### Date Range: {{ with index data 0 }}{{ .start_date }}{{ end }} -> {{ with index data 0 }}{{ .end_date }}{{ end }}
___
{{ range data }}
**ARN:** {{ .arn }}\n
\n
![Spending Overview Chart](https://api.image-charts-auth.flexeraeng.com/ic-function?rs_org_id={{ rs_org_id }}&rs_project_id={{ rs_project_id }}&{{.chart_type}}&{{.chart_size}}&{{.chart_data}}&{{.chart_image}}&{{.chart_scale}}&{{.chart_label}}&{{.chart_inside_label}}&{{.chart_data_label}})
___
{{ end }}
EOS
    check eq(0, 1)
    escalate $esc_email
    export do
      resource_level false
      field "arn" do
        label "Savings Plan ARN"
      end
      field "total_commitment" do
        label "Total Commitment"
      end
      field "unused_commitment" do
        label "Unused Commitment"
      end
      field "used_commitment" do
        label "Used Commitment"
      end
      field "utilization_percentage" do
        label "Utilization (%)"
      end
    end
  end
end

###############################################################################
# Escalations
###############################################################################

escalation "esc_email" do
  automatic true
  label "Send Email"
  description "Send incident email"
  email $param_email
end

name "AWS Rightsize ElastiCache"
rs_pt_ver 20180301
type "policy"
short_description "Reports any underutilized AWS ElastiCache resources and resizes them after approval. See the [README](https://github.com/flexera-public/policy_templates/tree/master/cost/aws/rightsize_elasticache/) and [docs.flexera.com/flexera/EN/Automation](https://docs.flexera.com/flexera/EN/Automation/AutomationGS.htm) to learn more."
long_description ""
doc_link "https://github.com/flexera-public/policy_templates/tree/master/cost/aws/rightsize_elasticache/"
category "Cost"
severity "low"
default_frequency "weekly"
info(
  version: "0.4.0",
  provider: "AWS",
  service: "Database",
  policy_set: "Rightsize Database Instances",
  recommendation_type: "Usage Reduction",
  hide_skip_approvals: "true"
)

###############################################################################
# Parameters
###############################################################################

parameter "param_email" do
  type "list"
  category "Policy Settings"
  label "Email Addresses"
  description "Email addresses of the recipients you wish to notify."
  default []
end

parameter "param_aws_account_number" do
  type "string"
  category "Policy Settings"
  label "Account Number"
  description "Leave blank; this is for automated use with Meta Policies. See README for more details."
  default ""
end

parameter "param_min_savings" do
  type "number"
  category "Policy Settings"
  label "Minimum Savings Threshold"
  description "Minimum potential savings required to generate a recommendation"
  min_value 0
  default 0
end

parameter "param_downsize_multiple" do
  type "string"
  category "Policy Settings"
  label "Skip Instance Sizes"
  description "Whether to recommend downsizing multiple sizes. When set to 'No', only the next smaller size will ever be recommended for downsizing. When set to 'Yes', more aggressive downsizing recommendations will be made when appropriate."
  allowed_values "Yes", "No"
  default "No"
end

parameter "param_exclusion_tags" do
  type "list"
  category "Filters"
  label "Exclusion Tags"
  description "Cloud native tags to ignore clusters that you don't want to produce recommendations for. Enter the Key name to filter clusters with a specific Key, regardless of Value, and enter Key==Value to filter clusters with a specific Key:Value pair. Other operators and regex are supported; please see the README for more details."
  default []
end

parameter "param_exclusion_tags_boolean" do
  type "string"
  category "Filters"
  label "Exclusion Tags: Any / All"
  description "Whether to filter clusters containing any of the specified tags or only those that contain all of them. Only applicable if more than one value is entered in the 'Exclusion Tags' field."
  allowed_values "Any", "All"
  default "Any"
end

parameter "param_regions_allow_or_deny" do
  type "string"
  category "Filters"
  label "Allow/Deny Regions"
  description "Allow or Deny entered regions. See the README for more details"
  allowed_values "Allow", "Deny"
  default "Allow"
end

parameter "param_regions_list" do
  type "list"
  category "Filters"
  label "Allow/Deny Regions List"
  description "A list of allowed or denied regions. See the README for more details"
  allowed_pattern /^([a-zA-Z-_]+-[a-zA-Z0-9-_]+-[0-9-_]+,*|)+$/
  default []
end

parameter "param_stats_lookback" do
  type "number"
  category "Statistics"
  label "Statistic Lookback Period"
  description "How many days back to look at CPU and memory usage data for clusters. This value cannot be set higher than 90 because AWS does not retain metrics for longer than 90 days."
  min_value 1
  max_value 90
  default 30
end

parameter "param_stats_threshold" do
  type "string"
  category "Statistics"
  label "Threshold Statistic"
  description "Statistic to use when determining if a cluster is underutilized"
  allowed_values "Average", "Maximum", "p99", "p95", "p90"
  default "Average"
end

parameter "param_stats_threshold_cpu_value" do
  type "number"
  category "Statistics"
  label "CPU Threshold (%)"
  description "The CPU threshold at which to consider a cluster to be 'underutilized' and therefore be flagged for downsizing. Set to -1 to ignore CPU utilization"
  min_value -1
  max_value 100
  default 40
end

parameter "param_stats_threshold_mem_value" do
  type "number"
  category "Statistics"
  label "Freeable Memory Threshold (%)"
  description "The freeable memory threshold at which to consider a cluster to be 'underutilized' and therefore be flagged for downsizing. Set to -1 to ignore memory utilization"
  min_value -1
  max_value 100
  default 60
end

parameter "param_automatic_action" do
  type "list"
  category "Actions"
  label "Automatic Actions"
  description "When this value is set, this policy will automatically take the selected action(s)"
  allowed_values ["Downsize ElastiCache Nodes"]
  default []
end

###############################################################################
# Authentication
###############################################################################

credentials "auth_aws" do
  schemes "aws", "aws_sts"
  label "AWS"
  description "Select the AWS Credential from the list"
  tags "provider=aws"
  aws_account_number $param_aws_account_number
end

credentials "auth_flexera" do
  schemes "oauth2"
  label "Flexera"
  description "Select Flexera One OAuth2 credentials"
  tags "provider=flexera"
end

###############################################################################
# Pagination
###############################################################################

pagination "pagination_aws_getmetricdata" do
  get_page_marker do
    body_path "NextToken"
  end
  set_page_marker do
    body_field "NextToken"
  end
end

###############################################################################
# Datasources & Scripts
###############################################################################

# Get applied policy metadata for use later
datasource "ds_applied_policy" do
  request do
    auth $auth_flexera
    host rs_governance_host
    path join(["/api/governance/projects/", rs_project_id, "/applied_policies/", policy_id])
    header "Api-Version", "1.0"
  end
end

# Get region-specific Flexera API endpoints
datasource "ds_flexera_api_hosts" do
  run_script $js_flexera_api_hosts, rs_optima_host
end

script "js_flexera_api_hosts", type: "javascript" do
  parameters "rs_optima_host"
  result "result"
  code <<-EOS
  host_table = {
    "api.optima.flexeraeng.com": {
      flexera: "api.flexera.com",
      fsm: "api.fsm.flexeraeng.com"
    },
    "api.optima-eu.flexeraeng.com": {
      flexera: "api.flexera.eu",
      fsm: "api.fsm-eu.flexeraeng.com"
    },
    "api.optima-apac.flexeraeng.com": {
      flexera: "api.flexera.au",
      fsm: "api.fsm-apac.flexeraeng.com"
    }
  }

  result = host_table[rs_optima_host]
EOS
end

# Get AWS account info
datasource "ds_cloud_vendor_accounts" do
  request do
    auth $auth_flexera
    host val($ds_flexera_api_hosts, 'flexera')
    path join(["/finops-analytics/v1/orgs/", rs_org_id, "/cloud-vendor-accounts"])
    header "Api-Version", "1.0"
  end
  result do
    encoding "json"
    collect jmes_path(response, "values[*]") do
      field "id", jmes_path(col_item, "aws.accountId")
      field "name", jmes_path(col_item, "name")
      field "tags", jmes_path(col_item, "tags")
    end
  end
end

datasource "ds_get_caller_identity" do
  request do
    auth $auth_aws
    host "sts.amazonaws.com"
    path "/"
    query "Action", "GetCallerIdentity"
    query "Version", "2011-06-15"
    header "User-Agent", "RS Policies"
  end
  result do
    encoding "xml"
    collect xpath(response, "//GetCallerIdentityResponse/GetCallerIdentityResult") do
      field "account", xpath(col_item, "Account")
    end
  end
end

datasource "ds_aws_account" do
  run_script $js_aws_account, $ds_cloud_vendor_accounts, $ds_get_caller_identity
end

script "js_aws_account", type:"javascript" do
  parameters "ds_cloud_vendor_accounts", "ds_get_caller_identity"
  result "result"
  code <<-EOS
  result = _.find(ds_cloud_vendor_accounts, function(account) {
    return account['id'] == ds_get_caller_identity[0]['account']
  })

  // This is in case the API does not return the relevant account info
  if (result == undefined) {
    result = {
      id: ds_get_caller_identity[0]['account'],
      name: "",
      tags: {}
    }
  }
EOS
end

datasource "ds_billing_centers" do
  request do
    auth $auth_flexera
    host rs_optima_host
    path join(["/analytics/orgs/", rs_org_id, "/billing_centers"])
    query "view", "allocation_table"
    header "Api-Version", "1.0"
    header "User-Agent", "RS Policies"
    ignore_status [403]
  end
  result do
    encoding "json"
    collect jmes_path(response, "[*]") do
      field "href", jmes_path(col_item, "href")
      field "id", jmes_path(col_item, "id")
      field "name", jmes_path(col_item, "name")
      field "parent_id", jmes_path(col_item, "parent_id")
    end
  end
end

# Gather top level billing center IDs for when we pull cost data
datasource "ds_top_level_bcs" do
  run_script $js_top_level_bcs, $ds_billing_centers
end

script "js_top_level_bcs", type: "javascript" do
  parameters "ds_billing_centers"
  result "result"
  code <<-EOS
  filtered_bcs = _.filter(ds_billing_centers, function(bc) {
    return bc['parent_id'] == null || bc['parent_id'] == undefined
  })

  result = _.compact(_.pluck(filtered_bcs, 'id'))
EOS
end

datasource "ds_currency_reference" do
  request do
    host "raw.githubusercontent.com"
    path "/flexera-public/policy_templates/master/data/currency/currency_reference.json"
    header "User-Agent", "RS Policies"
  end
end

datasource "ds_currency_code" do
  request do
    auth $auth_flexera
    host rs_optima_host
    path join(["/bill-analysis/orgs/", rs_org_id, "/settings/currency_code"])
    header "Api-Version", "0.1"
    header "User-Agent", "RS Policies"
    ignore_status [403]
  end
  result do
    encoding "json"
    field "id", jmes_path(response, "id")
    field "value", jmes_path(response, "value")
  end
end

datasource "ds_currency" do
  run_script $js_currency, $ds_currency_reference, $ds_currency_code
end

script "js_currency", type:"javascript" do
  parameters "ds_currency_reference", "ds_currency_code"
  result "result"
  code <<-EOS
  symbol = "$"
  separator = ","

  if (ds_currency_code['value'] != undefined) {
    if (ds_currency_reference[ds_currency_code['value']] != undefined) {
      symbol = ds_currency_reference[ds_currency_code['value']]['symbol']

      if (ds_currency_reference[ds_currency_code['value']]['t_separator'] != undefined) {
        separator = ds_currency_reference[ds_currency_code['value']]['t_separator']
      } else {
        separator = ""
      }
    }
  }

  result = {
    symbol: symbol,
    separator: separator
  }
EOS
end

datasource "ds_describe_regions" do
  request do
    auth $auth_aws
    host "ec2.amazonaws.com"
    path "/"
    query "Action", "DescribeRegions"
    query "Version", "2016-11-15"
    query "Filter.1.Name", "opt-in-status"
    query "Filter.1.Value.1", "opt-in-not-required"
    query "Filter.1.Value.2", "opted-in"
    # Header X-Meta-Flexera has no affect on datasource query, but is required for Meta Policies
    # Forces `ds_is_deleted` datasource to run first during policy execution
    header "Meta-Flexera", val($ds_is_deleted, "path")
  end
  result do
    encoding "xml"
    collect xpath(response, "//DescribeRegionsResponse/regionInfo/item", "array") do
      field "region", xpath(col_item, "regionName")
    end
  end
end

datasource "ds_regions" do
  run_script $js_regions, $ds_describe_regions, $param_regions_list, $param_regions_allow_or_deny
end

script "js_regions", type:"javascript" do
  parameters "ds_describe_regions", "param_regions_list", "param_regions_allow_or_deny"
  result "result"
  code <<-EOS
  allow_deny_test = { "Allow": true, "Deny": false }

  if (param_regions_list.length > 0) {
    result = _.filter(ds_describe_regions, function(item) {
      return _.contains(param_regions_list, item['region']) == allow_deny_test[param_regions_allow_or_deny]
    })
  } else {
    result = ds_describe_regions
  }
EOS
end

datasource "ds_elasticache_clusters" do
  iterate $ds_regions
  request do
    auth $auth_aws
    host join(["elasticache.", val(iter_item, "region"), ".amazonaws.com"])
    path "/"
    query "Action", "DescribeCacheClusters"
    query "Version", "2015-02-02"
    header "User-Agent", "RS Policies"
    header "Content-Type", "text/xml"
  end
  result do
    encoding "xml"
    collect xpath(response, "//DescribeCacheClustersResponse/DescribeCacheClustersResult/CacheClusters/CacheCluster", "array") do
      field "id", xpath(col_item, "CacheClusterId")
      field "status", xpath(col_item, "CacheClusterStatus")
      field "nodeType", xpath(col_item, "CacheNodeType")
      field "numberOfNodes", xpath(col_item, "NumCacheNodes")
      field "autoMinorVersionUpgrade", xpath(col_item, "AutoMinorVersionUpgrade")
      field "availabilityZone", xpath(col_item, "PreferredAvailabilityZone")
      field "createTime", xpath(col_item, "CacheClusterCreateTime")
      field "engine", xpath(col_item, "Engine")
      field "engineVersion", xpath(col_item, "EngineVersion")
      field "region", val(iter_item, "region")
    end
  end
end

datasource "ds_elasticache_size_list" do
  request do
    host "raw.githubusercontent.com"
    path "/flexera-public/policy_templates/master/data/aws/elasticache_types.json"
    header "User-Agent", "RS Policies"
  end
end

datasource "ds_aws_instance_types" do
  request do
    host "raw.githubusercontent.com"
    path "/flexera-public/policy_templates/master/data/aws/aws_ec2_instance_types.json"
    header "User-Agent", "RS Policies"
  end
end

datasource "ds_aws_instance_type_map" do
  run_script $js_aws_instance_type_map, $ds_aws_instance_types, $ds_elasticache_size_list
end

script "js_aws_instance_type_map", type: "javascript" do
  parameters "ds_aws_instance_types", "ds_elasticache_size_list"
  result "result"
  code <<-'EOS'
  result = {}

  _.each(ds_aws_instance_types, function(entry) {
    if (_.contains(ds_elasticache_size_list, entry["name"])) { result[entry["name"]] = entry }
  })
EOS
end

datasource "ds_aws_instance_types_by_family" do
  run_script $js_aws_instance_types_by_family, $ds_aws_instance_types, $ds_elasticache_size_list
end

script "js_aws_instance_types_by_family", type: "javascript" do
  parameters "ds_aws_instance_types", "ds_elasticache_size_list"
  result "result"
  code <<-'EOS'
  result = {
    all: _.filter(ds_aws_instance_types, function(entry) {
      return _.contains(ds_elasticache_size_list, entry["name"])
    })
  }

  result["all"] = _.sortBy(result["all"], function(type) {
    return type['memory'] && type['memory']['sizeInMiB'] ? type['memory']['sizeInMiB'] : 99999999
  })

  result["all"] = _.sortBy(result["all"], function(type) {
    return type['cpu'] && type['cpu']['cores'] ? type['cpu']['cores'] : 9999
  })

  _.each(ds_aws_instance_types, function(type) {
    if (_.contains(ds_elasticache_size_list, type["name"])) {
      if (result[type['family']] == undefined) { result[type['family']] = [] }
      result[type['family']].push(type)
    }
  })

  _.each(_.keys(result), function(family) {
    result[family] = _.sortBy(result[family], function(type) {
      return type['size_rank'] ? type['size_rank'] : 99999999
    })
  })
EOS
end

# Filter out any clusters where a smaller size isn't available since we can't downsize them anyway
datasource "ds_elasticache_clusters_resize_filtered" do
  run_script $js_elasticache_clusters_resize_filtered, $ds_elasticache_clusters, $ds_aws_instance_type_map, $ds_aws_instance_type_map, $ds_aws_account
end

script "js_elasticache_clusters_resize_filtered", type: "javascript" do
  parameters "ds_elasticache_clusters", "ds_aws_instance_type_map", "ds_aws_instance_types_by_family", "ds_aws_account"
  result "result"
  code <<-EOS
  result = []

  // Function to find the index of a resource type in a list
  // This is so we can easily go up and down.
  // If a type has an index of 5, we know 4 is the next size down.
  function findTypeIndex(type_list, name) {
    type_index = null

    _.each(type_list, function(type, index) {
      if (type_index == null && type['name'] == name) { type_index = index }
    })

    return type_index
  }

  _.each(ds_elasticache_clusters, function(cluster) {
    normalizedType = cluster["nodeType"].split("cache.")[1]
    family = normalizedType.split('.')[0]
    typeIndex = null
    if (ds_aws_instance_types_by_family[family]) { typeIndex = findTypeIndex(ds_aws_instance_types_by_family[family], instance['resourceType']) }

    if (typeIndex && typeIndex > 0) {
      resourceARN = [
        "arn:aws:elasticache:", cluster["region"], ":",
        ds_aws_account["id"], ":cluster:", cluster["id"]
      ].join("")

      result.push({
        id: cluster["id"],
        statId: cluster["id"].replace(/-/g, '_'),
        resourceID: cluster["id"],
        resourceName: cluster["id"],
        resourceARN: resourceARN,
        family: family,
        status: cluster["status"],
        numberOfNodes: cluster["numberOfNodes"],
        autoMinorVersionUpgrade: cluster["autoMinorVersionUpgrade"],
        availabilityZone: cluster["availabilityZone"],
        createTime: cluster["createTime"],
        engine: cluster["engine"],
        engineVersion: cluster["engineVersion"],
        region: cluster["region"],
        resourceType: cluster["nodeType"],
        normalizedType: normalizedType,
        vcpu: ds_aws_instance_type_map[normalizedType]["cpu"]["vcpus"],
        memory: Math.round(ds_aws_instance_type_map[normalizedType]["memory"]["sizeInMiB"] / 1024)
      })
    }
  })
EOS
end

datasource "ds_elasticache_clusters_with_tags" do
  iterate $ds_elasticache_clusters_resize_filtered
  request do
    auth $auth_aws
    host join(["elasticache.", val(iter_item, "region"), ".amazonaws.com"])
    path "/"
    query "ResourceName", val(iter_item, "resourceARN")
    query "Action", "ListTagsForResource"
    query "Version", "2015-02-02"
    header "User-Agent", "RS Policies"
    header "Content-Type", "application/json"
    header "Accept", "application/json"
  end
  result do
    encoding "json"
    field "tags", jmes_path(response, "ListTagsForResourceResponse.ListTagsForResourceResult.TagList")
    field "id", val(iter_item, "id")
    field "statId", val(iter_item, "statId")
    field "resourceID", val(iter_item, "resourceID")
    field "resourceName", val(iter_item, "resourceName")
    field "resourceARN", val(iter_item, "resourceARN")
    field "family", val(iter_item, "family")
    field "status", val(iter_item, "status")
    field "numberOfNodes", val(iter_item, "numberOfNodes")
    field "autoMinorVersionUpgrade", val(iter_item, "autoMinorVersionUpgrade")
    field "availabilityZone", val(iter_item, "availabilityZone")
    field "createTime", val(iter_item, "createTime")
    field "engine", val(iter_item, "engine")
    field "engineVersion", val(iter_item, "engineVersion")
    field "region", val(iter_item, "region")
    field "resourceType", val(iter_item, "resourceType")
    field "normalizedType", val(iter_item, "normalizedType")
    field "vcpu", val(iter_item, "vcpu")
    field "memory", val(iter_item, "memory")
  end
end

datasource "ds_elasticache_clusters_tag_filtered" do
  run_script $js_elasticache_clusters_tag_filtered, $ds_elasticache_clusters_with_tags, $param_exclusion_tags, $param_exclusion_tags_boolean
end

script "js_elasticache_clusters_tag_filtered", type: "javascript" do
  parameters "ds_elasticache_clusters_with_tags", "param_exclusion_tags", "param_exclusion_tags_boolean"
  result "result"
  code <<-EOS
  comparators = _.map(param_exclusion_tags, function(item) {
    if (item.indexOf('==') != -1) {
      return { comparison: '==', key: item.split('==')[0], value: item.split('==')[1], string: item }
    }

    if (item.indexOf('!=') != -1) {
      return { comparison: '!=', key: item.split('!=')[0], value: item.split('!=')[1], string: item }
    }

    if (item.indexOf('=~') != -1) {
      value = item.split('=~')[1]
      regex = new RegExp(value.slice(1, value.length - 1))
      return { comparison: '=~', key: item.split('=~')[0], value: regex, string: item }
    }

    if (item.indexOf('!~') != -1) {
      value = item.split('!~')[1]
      regex = new RegExp(value.slice(1, value.length - 1))
      return { comparison: '!~', key: item.split('!~')[0], value: regex, string: item }
    }

    // If = is present but none of the above are, assume user error and that the user intended ==
    if (item.indexOf('=') != -1) {
      return { comparison: '==', key: item.split('=')[0], value: item.split('=')[1], string: item }
    }

    // Assume we're just testing for a key if none of the comparators are found
    return { comparison: 'key', key: item, value: null, string: item }
  })

  if (param_exclusion_tags.length > 0) {
    result = _.reject(ds_elasticache_clusters_with_tags, function(resource) {
      resource_tags = {}

      if (typeof(resource['tags']) == 'object') {
        _.each(resource['tags'], function(tag) {
          resource_tags[tag['Key']] = tag['Value']
        })
      }

      // Store a list of found tags
      found_tags = []

      _.each(comparators, function(comparator) {
        comparison = comparator['comparison']
        value = comparator['value']
        string = comparator['string']
        resource_tag = resource_tags[comparator['key']]

        if (comparison == 'key' && resource_tag != undefined) { found_tags.push(string) }
        if (comparison == '==' && resource_tag == value) { found_tags.push(string) }
        if (comparison == '!=' && resource_tag != value) { found_tags.push(string) }

        if (comparison == '=~') {
          if (resource_tag != undefined && value.test(resource_tag)) { found_tags.push(string) }
        }

        if (comparison == '!~') {
          if (resource_tag == undefined) { found_tags.push(string) }
          if (resource_tag != undefined && value.test(resource_tag)) { found_tags.push(string) }
        }
      })

      all_tags_found = found_tags.length == comparators.length
      any_tags_found = found_tags.length > 0 && param_exclusion_tags_boolean == 'Any'

      return all_tags_found || any_tags_found
    })
  } else {
    result = ds_elasticache_clusters_with_tags
  }
EOS
end

datasource "ds_cloudwatch_queries" do
  run_script $js_cloudwatch_queries, $ds_elasticache_clusters_tag_filtered, $param_stats_lookback
end

script "js_cloudwatch_queries", type: "javascript" do
  parameters "ds_elasticache_clusters_tag_filtered", "param_stats_lookback"
  result "result"
  code <<-EOS
  // Create the various queries we're going to send to CloudWatch for each instance
  result = {}

  _.each(ds_elasticache_clusters_tag_filtered, function(cluster) {
    // Make sure the queries object has an array for the region to push items to
    if (result[cluster['region']] == undefined || result[cluster['region']] == null) {
      result[cluster['region']] = []
    }

    metrics = ["CPUUtilization", "FreeableMemory"]
    stats = ["Average", "Minimum", "Maximum", "p99", "p95", "p90"]
    lookback = param_stats_lookback * 86400

    _.each(metrics, function(metric) {
      _.each(stats, function(stat) {
        id_metric = "cpu"
        if (metric == "FreeableMemory") { id_metric = "mem" }

        query = {
          "Id": cluster['statId'] + "___" + id_metric + "___" + stat,
          "MetricStat": {
            "Metric": {
              "Namespace": "AWS/ElastiCache",
              "MetricName": metric,
              "Dimensions": [
                { "Name": "CacheClusterId", "Value": cluster['id'] }
              ]
            },
            "Period": lookback,
            "Stat": stat
          },
          "ReturnData": true
        }

        result[cluster['region']].push(query)
      })
    })
  })
EOS
end

# Combine queries into 500 item blocks so we can make bulk requests to Cloudwatch
datasource "ds_cloudwatch_requests" do
  run_script $js_cloudwatch_requests, $ds_cloudwatch_queries, $param_stats_lookback
end

script "js_cloudwatch_requests", type: "javascript" do
  parameters "ds_cloudwatch_queries", "param_stats_lookback"
  result "result"
  code <<-EOS
  // Organize the queries into discrete requests to send in.
  // Queries are first sorted by region and then split into 500 item blocks.
  result = []
  query_block_size = 500

  // Round down to beginning of the hour to avoid getting multiple values
  // from CloudWatch due to how the data is sliced
  end_date = new Date()
  end_date.setMinutes(0, 0, 0)
  end_date = parseInt(end_date.getTime() / 1000)

  start_date = new Date()
  start_date.setDate(start_date.getDate() - param_stats_lookback)
  start_date.setMinutes(0, 0, 0)
  start_date = parseInt(start_date.getTime() / 1000)

  _.each(_.keys(ds_cloudwatch_queries), function(region) {
    for (i = 0; i < ds_cloudwatch_queries[region].length; i += query_block_size) {
      chunk = ds_cloudwatch_queries[region].slice(i, i + query_block_size)

      result.push({
        body: {
          "StartTime": start_date,
          "EndTime": end_date,
          "MetricDataQueries": chunk
        },
        region: region
      })
    }
  })
EOS
end

datasource "ds_cloudwatch_data" do
  iterate $ds_cloudwatch_requests
  request do
    run_script $js_cloudwatch_data, val(iter_item, "region"), val(iter_item, "body")
  end
  result do
    encoding "json"
    collect jmes_path(response, "MetricDataResults[*]") do
      field "region", val(iter_item, "region")
      field "id", jmes_path(col_item, "Id")
      field "label", jmes_path(col_item, "Label")
      field "statusCode", jmes_path(col_item, "StatusCode")
      field "values", jmes_path(col_item, "Values")
    end
  end
end

script "js_cloudwatch_data", type: "javascript" do
  parameters "region", "body"
  result "request"
  code <<-EOS
  // Slow down rate of requests to prevent
  api_wait = 5
  var now = new Date().getTime()
  while(new Date().getTime() < now + (api_wait * 1000)) { /* Do nothing */ }

  var request = {
    auth: "auth_aws",
    host: 'monitoring.' + region + '.amazonaws.com',
    pagination: "pagination_aws_getmetricdata",
    verb: "POST",
    path: "/",
    headers: {
      "User-Agent": "RS Policies",
      "Content-Type": "application/json",
      "x-amz-target": "GraniteServiceVersion20100801.GetMetricData",
      "Accept": "application/json",
      "Content-Encoding": "amz-1.0"
    }
    query_params: {
      'Action': 'GetMetricData',
      'Version': '2010-08-01'
    },
    body: JSON.stringify(body)
  }
EOS
end

datasource "ds_cloudwatch_data_sorted" do
  run_script $js_cloudwatch_data_sorted, $ds_cloudwatch_data
end

script "js_cloudwatch_data_sorted", type: "javascript" do
  parameters "ds_cloudwatch_data"
  result "result"
  code <<-EOS
  // Sort the CloudWatch data into an object with keys for regions and instance names.
  // This eliminates the need to "double loop" later on to match it with our instances list.
  result = {}

  _.each(ds_cloudwatch_data, function(item) {
    region = item['region']
    id = item['id'].split('___')[0]
    metric = item['id'].split('___')[1]
    stat = item['id'].split('___')[2]

    // Grabbing index 0 SHOULD be safe because we should only get one result.
    // Just in case AWS slices the data weirdly and returns 2 results, we make
    // sure we grab the last item every time, which contains the actual data we need.
    value = item['values'][item['values'].length - 1]

    if (result[region] == undefined) { result[region] = {} }
    if (result[region][id] == undefined) { result[region][id] = {} }
    if (result[region][id][metric] == undefined) { result[region][id][metric] = {} }

    result[region][id][metric][stat] = value
  })
EOS
end

datasource "ds_elasticache_clusters_with_metrics" do
  run_script $js_elasticache_clusters_with_metrics, $ds_elasticache_clusters_tag_filtered, $ds_cloudwatch_data_sorted
end

script "js_elasticache_clusters_with_metrics", type: "javascript" do
  parameters "ds_elasticache_clusters_tag_filtered", "ds_cloudwatch_data_sorted"
  result "result"
  code <<-EOS
  result = _.map(ds_elasticache_clusters_tag_filtered, function(cluster) {
    memoryBytes = cluster["memory"] * 1024 * 1024 * 1024

    metrics = null

    cpuAverage = null
    cpuMinimum = null
    cpuMaximum = null
    cpuP90 = null
    cpuP95 = null
    cpuP99 = null

    memAverage = null
    memMinimum = null
    memMaximum = null
    memP90 = null
    memP95 = null
    memP99 = null

    if (ds_cloudwatch_data_sorted[cluster['region']]) {
      if (ds_cloudwatch_data_sorted[cluster['region']][cluster['statId']]) {
        metrics = ds_cloudwatch_data_sorted[cluster['region']][cluster['statId']]
      }
    }

    if (metrics) {
      if (metrics["cpu"]) {
        if (metrics["cpu"]["Average"]) { cpuAverage = metrics["cpu"]["Average"] }
        if (metrics["cpu"]["Minimum"]) { cpuMinimum = metrics["cpu"]["Minimum"] }
        if (metrics["cpu"]["Maximum"]) { cpuMaximum = metrics["cpu"]["Maximum"] }
        if (metrics["cpu"]["p90"]) { cpuP90 = metrics["cpu"]["p90"] }
        if (metrics["cpu"]["p95"]) { cpuP95 = metrics["cpu"]["p95"] }
        if (metrics["cpu"]["p99"]) { cpuP99 = metrics["cpu"]["p99"] }
      }

      if (metrics["mem"]) {
        if (metrics["mem"]["Average"]) { memAverage = metrics["mem"]["Average"] / memoryBytes * 100 }
        if (metrics["mem"]["Minimum"]) { memMinimum = metrics["mem"]["Minimum"] / memoryBytes * 100 }
        if (metrics["mem"]["Maximum"]) { memMaximum = metrics["mem"]["Maximum"] / memoryBytes * 100 }
        if (metrics["mem"]["p90"]) { memP90 = metrics["mem"]["p90"] / memoryBytes * 100 }
        if (metrics["mem"]["p95"]) { memP95 = metrics["mem"]["p95"] / memoryBytes * 100 }
        if (metrics["mem"]["p99"]) { memP99 = metrics["mem"]["p99"] / memoryBytes * 100 }
      }
    }

    return {
      id: cluster["id"],
      statId: cluster["statId"],
      resourceID: cluster["resourceID"],
      resourceName: cluster["resourceName"],
      resourceARN: cluster["resourceARN"],
      family: cluster["family"],
      tags: cluster["tags"],
      status: cluster["status"],
      numberOfNodes: cluster["numberOfNodes"],
      autoMinorVersionUpgrade: cluster["autoMinorVersionUpgrade"],
      availabilityZone: cluster["availabilityZone"],
      createTime: cluster["createTime"],
      engine: cluster["engine"],
      engineVersion: cluster["engineVersion"],
      region: cluster["region"],
      resourceType: cluster["resourceType"],
      normalizedType: cluster["normalizedType"],
      vcpu: cluster["vcpu"],
      memory: cluster["memory"],
      cpuAverage: cpuAverage,
      cpuMinimum: cpuMinimum,
      cpuMaximum: cpuMaximum,
      cpuP90: cpuP90,
      cpuP95: cpuP95,
      cpuP99: cpuP99,
      memAverage: memAverage,
      memMinimum: memMinimum,
      memMaximum: memMaximum,
      memP90: memP90,
      memP95: memP95,
      memP99: memP99
    }
  })
EOS
end

datasource "ds_cluster_costs" do
  request do
    run_script $js_cluster_costs, $ds_aws_account, $ds_top_level_bcs, rs_org_id, rs_optima_host
  end
  result do
    encoding "json"
    collect jmes_path(response, "rows[*]") do
      field "resourceId", jmes_path(col_item, "dimensions.resource_id")
      field "resourceType", jmes_path(col_item, "dimensions.resource_type")
      field "vendorAccountName", jmes_path(col_item, "dimensions.vendor_account_name")
      field "adjustmentName", jmes_path(col_item, "dimensions.adjustment_name")
      field "cost", jmes_path(col_item, "metrics.cost_amortized_unblended_adj")
    end
  end
end

script "js_cluster_costs", type: "javascript" do
  parameters "ds_aws_account", "ds_top_level_bcs", "rs_org_id", "rs_optima_host"
  result "request"
  code <<-EOS
  end_date = new Date()
  end_date.setDate(end_date.getDate() - 2)
  end_date = end_date.toISOString().split('T')[0]

  start_date = new Date()
  start_date.setDate(start_date.getDate() - 3)
  start_date = start_date.toISOString().split('T')[0]

  var request = {
    auth: "auth_flexera",
    host: rs_optima_host,
    verb: "POST",
    path: "/bill-analysis/orgs/" + rs_org_id + "/costs/select",
    body_fields: {
      dimensions: ["resource_id", "vendor_account_name", "resource_type", "adjustment_name"],
      granularity: "day",
      start_at: start_date,
      end_at: end_date,
      metrics: ["cost_amortized_unblended_adj"],
      billing_center_ids: ds_top_level_bcs,
      limit: 100000,
      filter: {
        type: "and",
        expressions: [
          {
            dimension: "service",
            type: "equal",
            value: "AmazonElastiCache"
          },
          {
            dimension: "vendor_account",
            type: "equal",
            value: ds_aws_account['id']
          },
          {
            type: "not",
            expression: {
              dimension: "adjustment_name",
              type: "substring",
              substring: "Shared"
            }
          }
        ]
      }
    },
    headers: {
      'User-Agent': "RS Policies",
      'Api-Version': "1.0"
    },
    ignore_status: [400]
  }
EOS
end

datasource "ds_cluster_costs_grouped" do
  run_script $js_cluster_costs_grouped, $ds_cluster_costs
end

script "js_cluster_costs_grouped", type: "javascript" do
  parameters "ds_cluster_costs"
  result "result"
  code <<-EOS
  // Multiple a single day's cost by the average number of days in a month.
  // The 0.25 is to account for leap years for extra precision.
  cost_multiplier = 365.25 / 12

  // Group cost data by resourceId for later use
  result = {}

  _.each(ds_cluster_costs, function(item) {
    if (typeof(item['resourceId']) == 'string' && item['resourceId'].indexOf("cluster:") == 0) {
      id = item['resourceId'].split("cluster:")[1].toLowerCase()

      if (result[id] == undefined) { result[id] = 0.0 }
      result[id] += item['cost'] * cost_multiplier
    }
  })
EOS
end

datasource "ds_underutilized_elasticache_clusters" do
  run_script $js_underutilized_elasticache_clusters, $ds_elasticache_clusters_with_metrics, $ds_cluster_costs_grouped, $ds_aws_instance_types_by_family, $ds_aws_account, $ds_currency, $ds_applied_policy, $param_stats_lookback, $param_stats_threshold, $param_stats_threshold_cpu_value, $param_stats_threshold_mem_value, $param_min_savings, $param_downsize_multiple
end

script "js_underutilized_elasticache_clusters", type: "javascript" do
  parameters "ds_elasticache_clusters_with_metrics", "ds_cluster_costs_grouped", "ds_aws_instance_types_by_family", "ds_aws_account", "ds_currency", "ds_applied_policy", "param_stats_lookback", "param_stats_threshold", "param_stats_threshold_cpu_value", "param_stats_threshold_mem_value", "param_min_savings", "param_downsize_multiple"
  result "result"
  code <<-'EOS'
  // Used for formatting numbers to look pretty
  function formatNumber(number, separator) {
    formatted_number = "0"

    if (number) {
      formatted_number = (Math.round(number * 100) / 100).toString().split(".")[0]

      if (separator) {
        withSeparator = ""

        for (var i = 0; i < formatted_number.length; i++) {
          if (i > 0 && (formatted_number.length - i) % 3 == 0) { withSeparator += separator }
          withSeparator += formatted_number[i]
        }

        formatted_number = withSeparator
      }

      decimal = (Math.round(number * 100) / 100).toString().split(".")[1]
      if (decimal) { formatted_number += "." + decimal }
    }

    return formatted_number
  }

  // Function to find the index of a resource type in a list
  // This is so we can easily go up and down.
  // If a type has an index of 5, we know 4 is the next size down.
  function findTypeIndex(type_list, name) {
    type_index = null

    _.each(type_list, function(type, index) {
      if (type_index == null && type['name'] == name) { type_index = index }
    })

    return type_index
  }

  result = []
  total_savings = 0.0

  // Find specs for current and potential downsize in the size map
  _.each(ds_elasticache_clusters_with_metrics, function(cluster) {
    // Determine if the resource is underutilized based on user inputs
    cpu_stat = null
    mem_stat = null

    if (param_stats_threshold == "Average") {
      cpu_stat = cluster["cpuAverage"]
      mem_stat = cluster["memAverage"]
    }

    if (param_stats_threshold == "Maximum") {
      cpu_stat = cluster["cpuMaximum"]
      mem_stat = cluster["memMaximum"]
    }

    if (param_stats_threshold == "p90") {
      cpu_stat = cluster["cpuP90"]
      mem_stat = cluster["memP90"]
    }

    if (param_stats_threshold == "p95") {
      cpu_stat = cluster["cpuP95"]
      mem_stat = cluster["memP95"]
    }

    if (param_stats_threshold == "p99") {
      cpu_stat = cluster["cpuP99"]
      mem_stat = cluster["memP99"]
    }

    cpu_underutilized = cpu_stat < param_stats_threshold_cpu_value || param_stats_threshold_cpu_value == -1
    mem_underutilized = mem_stat > param_stats_threshold_mem_value || param_stats_threshold_mem_value == -1

    type_index = findTypeIndex(ds_aws_instance_types_by_family[cluster['family']], cluster['normalizedType'])

    // Check if cluster is underutilized and if savings is above threshold
    if (cpu_underutilized && mem_underutilized && type_index > 0) {
      type_index = type_index - 1
      normalizedNewType = ds_aws_instance_types_by_family[cluster['family']][type_index]['name']
      savingsMultiplier = 1

      if (param_downsize_multiple == "Yes") {
        if (param_stats_threshold_cpu_value != -1 && param_stats_threshold_mem_value != -1) {
          while (type_index >= 0 && cpu_stat * 2 < param_stats_threshold_cpu_value && mem_stat / 2 > param_stats_threshold_mem_value) {
            cpu_stat = cpu_stat * 2
            mem_stat = mem_stat / 2
            type_index = type_index - 1
            normalizedNewType = ds_aws_instance_types_by_family[cluster['family']][type_index]['name']
            savingsMultiplier += 1
          }
        }

        if (param_stats_threshold_mem_value == -1) {
          while (type_index >= 0 && cpu_stat * 2 < param_stats_threshold_cpu_value) {
            cpu_stat = cpu_stat * 2
            type_index = type_index - 1
            normalizedNewType = ds_aws_instance_types_by_family[cluster['family']][type_index]['name']
            savingsMultiplier += 1
          }
        }

        if (param_stats_threshold_cpu_value == -1) {
          while (type_index >= 0 && mem_stat / 2 > param_stats_threshold_mem_value) {
            mem_stat = mem_stat / 2
            type_index = type_index - 1
            normalizedNewType = ds_aws_instance_types_by_family[cluster['family']][type_index]['name']
            savingsMultiplier += 1
          }
        }
      }

      cluster['newResourceType'] = "cache." + normalizedNewType

      cost = 0.0
      savings = 0.0

      if (ds_cluster_costs_grouped[cluster['id']]) {
        cost = ds_cluster_costs_grouped[cluster['id']]
        savings = ds_cluster_costs_grouped[cluster['id']] / (2 * savingsMultiplier)
      }

      if (savings >= param_min_savings) {
        total_savings += savings

        recommendationDetails = [
          "Change node type of ElastiCache cluster ", cluster['id'], " ",
          "in AWS Account ", ds_aws_account['name'], " ",
          "(", ds_aws_account['id'], ") ",
          "from ", cluster['resourceType'], " ",
          "to ", cluster['newResourceType']
        ].join('')

        tags = []

        if (typeof(cluster['tags']) == 'object') {
          tags = _.map(cluster['tags'], function(tag) { return [tag['Key'], tag['Value']].join('=') })
        }

        result.push({
          accountID: ds_aws_account['id'],
          accountName: ds_aws_account['name'],
          id: cluster["id"],
          resourceID: cluster["resourceID"],
          resourceName: cluster["resourceName"],
          resourceARN: cluster["resourceARN"],
          status: cluster["status"],
          numberOfNodes: cluster["numberOfNodes"],
          autoMinorVersionUpgrade: cluster["autoMinorVersionUpgrade"],
          availabilityZone: cluster["availabilityZone"],
          createTime: cluster["createTime"],
          engine: cluster["engine"],
          engineVersion: cluster["engineVersion"],
          region: cluster["region"],
          resourceType: cluster["resourceType"],
          newResourceType: cluster["newResourceType"],
          tags: tags.join(', '),
          cpuAverage: Math.round(cluster["cpuAverage"] * 100) / 100,
          cpuMinimum: Math.round(cluster["cpuMinimum"] * 100) / 100,
          cpuMaximum: Math.round(cluster["cpuMaximum"] * 100) / 100,
          cpuP90: Math.round(cluster["cpuP90"] * 100) / 100,
          cpuP95: Math.round(cluster["cpuP95"] * 100) / 100,
          cpuP99: Math.round(cluster["cpuP99"] * 100) / 100,
          memAverage: Math.round(cluster["memAverage"] * 100) / 100,
          memMinimum: Math.round(cluster["memMinimum"] * 100) / 100,
          memMaximum: Math.round(cluster["memMaximum"] * 100) / 100,
          memP90: Math.round(cluster["memP90"] * 100) / 100,
          memP95: Math.round(cluster["memP95"] * 100) / 100,
          memP99: Math.round(cluster["memP99"] * 100) / 100,
          service: "AmazonElastiCache",
          recommendationDetails: recommendationDetails,
          cost: Math.round(cost * 1000) / 1000,
          savings: Math.round(savings * 1000) / 1000,
          savingsCurrency: ds_currency['symbol'],
          policy_name: ds_applied_policy['name'],
          // These are to avoid errors when we hash_exclude these fields
          message: "",
          total_savings: ""
        })
      }
    }
  })

  // Message for incident output
  total_clusters = ds_elasticache_clusters_with_metrics.length.toString()
  total_oversized = result.length.toString()
  oversized_percentage = (total_oversized / total_clusters * 100).toFixed(2).toString() + '%'

  cluster_noun = "cluster"
  if (total_clusters > 1) { cluster_noun += "s" }

  cluster_verb = "is"
  if (total_oversized > 1) { cluster_verb = "are" }

  findings = [
    "Out of ", total_clusters, " AWS ElastiCache ", cluster_noun, " analyzed, ",
    total_oversized, " (", oversized_percentage,
    ") ", cluster_verb, " underutilized and recommended for downsizing. "
  ].join('')

  if (param_stats_threshold_cpu_value != -1 && param_stats_threshold_mem_value == -1) {
    settings = [
      "A cluster is considered underutilized if its ", param_stats_threshold.toLowerCase(),
      " CPU usage is below ", param_stats_threshold_cpu_value, "%, ",
      "regardless of its memory usage.\n\n"
    ].join('')
  } else if (param_stats_threshold_cpu_value == -1 && param_stats_threshold_mem_value != -1) {
    settings = [
      "A cluster is considered underutilized if its ", param_stats_threshold.toLowerCase(),
      " freeable memory is above ", param_stats_threshold_mem_value, "%, ",
      "regardless of its CPU usage.\n\n"
    ].join('')
  } else if (param_stats_threshold_cpu_value != -1 && param_stats_threshold_mem_value != -1) {
    settings = [
      "A cluster is considered underutilized if its ", param_stats_threshold.toLowerCase(),
      " CPU usage is below ", param_stats_threshold_cpu_value, "% and its ",
      param_stats_threshold.toLowerCase(), " freeable memory is above ",
      param_stats_threshold_mem_value, "%.\n\n"
    ].join('')
  } else {
    settings = [
      "All clusters are considered underutilized due to both the ",
      "CPU Threshold (%) and Freeable Memory Threshold (%) parameters being set to -1.\n\n"
    ].join('')
  }

  disclaimer = "The above settings can be modified by editing the applied policy and changing the appropriate parameters."

  total_savings = ds_currency['symbol'] + ' ' + formatNumber(Math.round(total_savings * 100) / 100, ds_currency['separator'])

  // Dummy item to ensure the policy's check statement always executes at least once
  result.push({
    accountID: "",
    accountName: "",
    id: "",
    resourceID: "",
    resourceName: "",
    resourceARN: "",
    tags: "",
    status: "",
    numberOfNodes: "",
    autoMinorVersionUpgrade: "",
    availabilityZone: "",
    createTime: "",
    engine: "",
    engineVersion: "",
    region: "",
    resourceType: "",
    newResourceType: "",
    cpuAverage: "",
    cpuMinimum: "",
    cpuMaximum: "",
    cpuP90: "",
    cpuP95: "",
    cpuP99: "",
    memAverage: "",
    memMinimum: "",
    memMaximum: "",
    memP90: "",
    memP95: "",
    memP99: "",
    service: "",
    recommendationDetails: "",
    cost: "",
    savings: "",
    savingsCurrency: "",
    policy_name: "",
    message: "",
    total_savings: ""
  })

  result[0]['message'] = findings + settings + disclaimer
  result[0]['total_savings'] = total_savings
EOS
end

###############################################################################
# Policy
###############################################################################

policy "pol_underutilized_elasticache_clusters" do
  validate_each $ds_underutilized_elasticache_clusters do
    summary_template "{{ with index data 0 }}{{ .policy_name }}{{ end }}: {{ len data }} AWS Underutilized ElastiCache Clusters Found"
    detail_template <<-'EOS'
    **Potential Monthly Savings:** {{ with index data 0 }}{{ .total_savings }}{{ end }}

    {{ with index data 0 }}{{ .message }}{{ end }}
    EOS
    check logic_or($ds_parent_policy_terminated, eq(val(item, "resourceID"), ""))
    escalate $esc_email
    escalate $esc_resize_clusters
    hash_exclude "message", "total_savings", "tags", "cost", "savings", "savingsCurrency"
    export do
      resource_level true
      field "accountID" do
        label "Account ID"
      end
      field "accountName" do
        label "Account Name"
      end
      field "resourceID" do
        label "Cluster ID"
      end
      field "region" do
        label "Cluster Region"
      end
      field "tags" do
        label "Cluster Tags"
      end
      field "numberOfNodes" do
        label "Nodes (#)"
      end
      field "resourceType" do
        label "Node Type"
      end
      field "newResourceType" do
        label "Recommended Node Type"
      end
      field "recommendationDetails" do
        label "Recommendation"
      end
      field "savingsCurrency" do
        label "Currency"
      end
      field "monthlyResourceCost" do
        label "Monthly Resource Cost"
        path "cost"
      end
      field "savings" do
        label "Estimated Monthly Savings"
      end
      field "cpuMaximum" do
        label "CPU Maximum %"
      end
      field "cpuMinimum" do
        label "CPU Minimum %"
      end
      field "cpuAverage" do
        label "CPU Average %"
      end
      field "cpuP99" do
        label "CPU p99"
      end
      field "cpuP95" do
        label "CPU p95"
      end
      field "cpuP90" do
        label "CPU p90"
      end
      field "memMaximum" do
        label "Freeable Memory Maximum %"
      end
      field "memMinimum" do
        label "Freeable Memory Minimum %"
      end
      field "memAverage" do
        label "Freeable Memory Average %"
      end
      field "memP99" do
        label "Freeable Memory p99"
      end
      field "memP95" do
        label "Freeable Memory p95"
      end
      field "memP90" do
        label "Freeable Memory p90"
      end
      field "status" do
        label "Cluster Status"
      end
      field "engine" do
        label "Engine"
      end
      field "engineVersion" do
        label "Engine Version"
      end
      field "service" do
        label "Service"
      end
      field "resourceARN" do
        label "Resource ARN"
      end
      field "resourceName" do
        label "Resource Name"
      end
      field "id" do
        label "ID"
      end
    end
  end
end

###############################################################################
# Escalations
###############################################################################

escalation "esc_email" do
  automatic true
  label "Send Email"
  description "Send incident email"
  email $param_email
end

escalation "esc_resize_clusters" do
  automatic contains($param_automatic_action, "Downsize ElastiCache Nodes")
  label "Downsize ElastiCache Nodes"
  description "Approval to downsize nodes in all selected ElastiCache clusters"
  run "resize_clusters", data
end

###############################################################################
# Cloud Workflow
###############################################################################

define resize_clusters($data) return $all_responses do
  $$all_responses = []

  foreach $clb in $data do
    sub on_error: handle_error() do
      call resize_cluster($cluster) retrieve $response
    end
  end

  if inspect($$errors) != "null"
    raise join($$errors, "\n")
  end
end

define resize_cluster($cluster) return $response do
  $host = "elasticache." + $cluster["region"] + ".amazonaws.com"
  $href = "/"
  $params = "?Action=ModifyCacheCluster&Version=2015-02-02&ApplyImmediately=true&CacheClusterId=" + $cluster["resourceID"] + "&CacheNodeType=" + $cluster["newResourceType"]
  $url = $host + $href + $params
  task_label("POST " + $url)

  $response = http_request(
    auth: $$auth_aws,
    https: true,
    verb: "post",
    host: $host,
    href: $href,
    query_strings: {
      "Action": "ModifyCacheCluster",
      "Version": "2015-02-02",
      "CacheClusterId": $cluster["resourceID"],
      "CacheNodeType": $cluster["newResourceType"],
      "ApplyImmediately": "true"
    }
  )

  task_label("POST AWS ElastiCache cluster response: " + $cluster["resourceID"] + " " + to_json($response))
  $$all_responses << to_json({"req": "POST " + $url, "resp": $response})

  if $response["code"] != 204 && $response["code"] != 202 && $response["code"] != 200
    raise "Unexpected response from POST AWS ElastiCache cluster: "+ $cluster["resourceID"] + " " + to_json($response)
  else
    task_label("POST AWS ElastiCache cluster successful: " + $cluster["resourceID"])
  end
end

define handle_error() do
  if !$$errors
    $$errors = []
  end
  $$errors << $_error["type"] + ": " + $_error["message"]
  # We check for errors at the end, and raise them all together
  # Skip errors handled by this definition
  $_error_behavior = "skip"
end

###############################################################################
# Meta Policy [alpha]
# Not intended to be modified or used by policy developers
###############################################################################

# If the meta_parent_policy_id is not set it will evaluate to an empty string and we will look for the policy itself,
# if it is set we will look for the parent policy.
datasource "ds_get_policy" do
  request do
    auth $auth_flexera
    host rs_governance_host
    ignore_status [404]
    path join(["/api/governance/projects/", rs_project_id, "/applied_policies/", switch(ne(meta_parent_policy_id, ""), meta_parent_policy_id, policy_id)])
    header "Api-Version", "1.0"
  end
  result do
    encoding "json"
    field "id", jmes_path(response, "id")
  end
end

datasource "ds_parent_policy_terminated" do
  run_script $js_decide_if_self_terminate, $ds_get_policy, policy_id, meta_parent_policy_id
end

# If the policy was applied by a meta_parent_policy we confirm it exists if it doesn't we confirm we are deleting
# This information is used in two places:
# - determining whether or not we make a delete call
# - determining if we should create an incident (we don't want to create an incident on the run where we terminate)
script "js_decide_if_self_terminate", type: "javascript" do
  parameters "found", "self_policy_id", "meta_parent_policy_id"
  result "result"
  code <<-EOS
  var result
  if (meta_parent_policy_id != "" && found.id == undefined) {
    result = true
  } else {
    result = false
  }
EOS
end

# Two potentials ways to set this up:
# - this way and make a unneeded 'get' request when not deleting
# - make the delete request an interate and have it iterate over an empty array when not deleting and an array with one item when deleting
script "js_make_terminate_request", type: "javascript" do
  parameters "should_delete", "policy_id", "rs_project_id", "rs_governance_host"
  result "request"
  code <<-EOS

  var request = {
    auth:  'auth_flexera',
    host: rs_governance_host,
    path: "/api/governance/projects/" + rs_project_id + "/applied_policies/" + policy_id,
    headers: {
      "API-Version": "1.0",
      "Content-Type":"application/json"
    },
  }

  if (should_delete) {
    request.verb = 'DELETE'
  }
  EOS
end

datasource "ds_terminate_self" do
  request do
    run_script $js_make_terminate_request, $ds_parent_policy_terminated, policy_id, rs_project_id, rs_governance_host
  end
end

datasource "ds_is_deleted" do
  run_script $js_check_deleted, $ds_terminate_self
end

# This is just a way to have the check delete request connect to the farthest leaf from policy.
# We want the delete check to the first thing the policy does to avoid the policy erroring before it can decide whether or not it needs to self terminate
# Example a customer deletes a credential and then terminates the parent policy. We still want the children to self terminate
# The only way I could see this not happening is if the user who applied the parent_meta_policy was offboarded or lost policy access, the policies who are impersonating the user
# would not have access to self-terminate
# It may be useful for the backend to enable a mass terminate at some point for all meta_child_policies associated with an id.
script "js_check_deleted", type: "javascript" do
  parameters "response"
  result "result"
  code <<-EOS
  result = {"path":"/"}
  EOS
end

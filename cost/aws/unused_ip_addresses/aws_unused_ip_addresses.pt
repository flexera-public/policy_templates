name "AWS Unused IP Addresses"
rs_pt_ver 20180301
type "policy"
short_description "Checks AWS for unused IP Addresses and deletes them. See the [README](https://github.com/flexera/policy_templates/tree/master/cost/aws/unused_ip_addresses/) and [docs.rightscale.com/policies](https://docs.rightscale.com/policies/) to learn more."
long_description ""
severity "low"
category "Cost"
info(
    version: "2.10",
    provider: "AWS",
    service: "EC2",
    policy_set: "Unused IP Addresses"
  )

##############################################################################
# Parameters
##############################################################################

parameter "param_exclude_tags" do
  type "list"
  label "Exclusion Tags"
  description "A list of AWS tags to ignore Elastic IPs. Format: Key=Value"
end

parameter "param_email" do
  type "list"
  label "Email addresses"
  description "Email addresses of the recipients you wish to notify when new incidents are created"
end


parameter "param_automatic_action" do
  type "list"
  label "Automatic Actions"
  description "When this value is set, this policy will automatically take the selected action(s)"
  allowed_values ["Delete Unused IPs"]
end

###############################################################################
# Authentication
###############################################################################

credentials "auth_aws" do
  schemes "aws","aws_sts"
  label "AWS"
  description "Select the AWS Cloud Credential from the list."
  tags "provider=aws"
end

auth "auth_rs", type: "rightscale"

pagination "aws_pagination" do
  get_page_marker do
    body_path "//DescribeAddressesResponse/nextToken"
  end
  set_page_marker do
    query "nextToken"
  end
end

###############################################################################
# Datasources
###############################################################################

#Get list of enabled regions for an account
datasource "ds_regions_list" do
  request do
    auth $auth_aws
    verb "GET"
    host "ec2.amazonaws.com"
    path "/"
    query "Action", "DescribeRegions"
    query "Version", "2016-11-15"
  end
  result do
    encoding "xml"
    collect xpath(response, "//DescribeRegionsResponse/regionInfo/item", "array") do
      field "region", xpath(col_item, "regionName")
    end
  end
end

# Get only SCP enabled regions
datasource "ds_regions" do
  iterate $ds_regions_list
    request do
      auth $auth_aws
      verb "GET"
      host join(["ec2.",val(iter_item,"region"),".amazonaws.com"])
      path "/"
      query "Action", "DescribeAddresses"
      query "Version", "2016-11-15"
      ignore_status [403]
    end
    result do
      encoding "xml"
      field "region", val(iter_item, "region")
    end
end

datasource "ds_aws_elastic_ip_address" do
  iterate $ds_regions
  request do
    auth $auth_aws
    pagination $aws_pagination
    host join(["ec2.",val(iter_item,"region"), ".amazonaws.com"])
    path "/"
    query "Action", "DescribeAddresses"
    query "Version", "2016-11-15"
  end
  result do
    encoding "xml"
    collect xpath(response, "//DescribeAddressesResponse/addressesSet/item") do
      field "publicIp", xpath(col_item,"publicIp")
      field "domain" , xpath(col_item,"domain")
      field "instance_id", xpath(col_item, "instanceId")
      field "region", xpath(col_item,"networkBorderGroup")
      field "association_id", xpath(col_item,"associationId")
      field "allocation_id", xpath(col_item,"allocationId")
      field "tags" do
        collect xpath(col_item, "tagSet/item") do
          field "tagKey", xpath(col_item, "key")
          field "tagValue", xpath(col_item, "value")
        end
      end
    end
  end
end

datasource "ds_currency_reference" do
  request do
    host "raw.githubusercontent.com"
    path "/rightscale/policy_templates/master/cost/scheduled_reports/currency_reference.json"
    header "User-Agent", "RS Policies"
  end
end

datasource "ds_currency_code" do
  request do
    auth $auth_rs
    host rs_optima_host
    path join(["/bill-analysis/orgs/",rs_org_id,"/settings/currency_code"])
    header "Api-Version", "0.1"
    header "User-Agent", "RS Policies"
    ignore_status [403]
  end
  result do
    encoding "json"
    field "id", jmes_path(response,"id")
    field "value", jmes_path(response,"value")
  end
end

datasource "ds_billing_centers" do
  request do
    auth $auth_rs
    host rs_optima_host
    path join(["/analytics/orgs/",rs_org_id,"/billing_centers"])
    header "Api-Version", "1.0"
    header "User-Agent", "RS Policies"
    query "view", "allocation_table"
    ignore_status [403]
  end
  result do
    encoding "json"
    collect jmes_path(response,"[*]") do
      field "href", jmes_path(col_item,"href")
      field "id", jmes_path(col_item,"id")
      field "name", jmes_path(col_item,"name")
      field "parent_id", jmes_path(col_item,"parent_id")
    end
  end
end

datasource "ds_top_level_billing_centers" do
  run_script $js_top_level_bc, $ds_billing_centers
end

datasource "ds_get_caller_identity" do
  request do
    auth $auth_aws
    verb "GET"
    host "sts.amazonaws.com"
    path "/"
    header "User-Agent", "RS Policies"
    query "Action", "GetCallerIdentity"
    query "Version", "2011-06-15"
  end
  result do
    encoding "xml"
    collect xpath(response, "//GetCallerIdentityResponse/GetCallerIdentityResult") do
      field "account",xpath(col_item, "Account")
    end
 end
end

datasource "ds_ip_costs" do
  request do
    run_script $js_get_costs, $ds_get_caller_identity, $ds_top_level_billing_centers, rs_org_id
  end
  result do
    encoding "json"
    collect jmes_path(response,"rows[*]") do
      field "cost_nonamortized_unblended_adj", jmes_path(col_item,"metrics.cost_nonamortized_unblended_adj")
    end
  end
end

datasource "ds_filter_ip" do
  run_script $js_filter_ip_response, $ds_aws_elastic_ip_address, $param_exclude_tags, $ds_get_caller_identity
end

datasource "ds_ip_cost_mapping" do
  run_script $js_ip_cost_mapping, $ds_filter_ip, $ds_ip_costs, $ds_currency_code, $ds_currency_reference, $ds_billing_centers, $ds_get_caller_identity
end

###############################################################################
# Scripts
###############################################################################

script "js_top_level_bc", type: "javascript" do
  parameters "billing_centers"
  result "filtered_billing_centers"
  code <<-EOS
  var filtered_billing_centers =
    _.reject(billing_centers, function(bc){ return bc.parent_id != null });
EOS
end

script "js_get_costs", type:"javascript" do
  parameters  "account_id","billing_centers","org"
  result "request"
  code <<-EOS
    // returns date formatted as string: YYYY-mm-dd
    function getFormattedDailyDate(date) {
      var year = date.getFullYear();
      var month = (1 + date.getMonth()).toString();
      month = month.length > 1 ? month : '0' + month;
      var day = date.getDate().toString();
      day = day.length > 1 ? day : '0' + day;
      return year + '-' + month + '-' + day;
    }
    var start_date = getFormattedDailyDate(new Date(new Date().setDate(new Date().getDate() - 3)));
    var end_date = getFormattedDailyDate(new Date(new Date().setDate(new Date().getDate() - 2)));
    var request = {
      auth: "auth_rs",
      host: "optima.rightscale.com",
      verb: "POST",
      path: "/bill-analysis/orgs/" + org + "/costs/select",
      body_fields: {
        "dimensions": ["resource_id"],
        "granularity": "day",
        "start_at": start_date,
        "end_at": end_date,
        "metrics": ["cost_nonamortized_unblended_adj"],
        "billing_center_ids": _.compact(_.map(billing_centers, function(value){ return value.id})),
        "limit": 10000,
        "filter": {
          "expressions": [
            {
              "dimension": "vendor_account",
              "type": "equal",
              "value": account_id[0]["account"]
            },
            {
              "dimension": "service",
              "type": "equal",
              "value": "AmazonEC2"
            },
            {
              "dimension": "resource_type",
              "type": "equal",
              "value": "IP Address"
            }
          ],
          "type": "and"
        }
      },
      headers: {
        "User-Agent": "RS Policies",
        "Api-Version": "1.0"
      },
      ignore_status: [400]
    }
  EOS
end

script "js_filter_ip_response", type: "javascript" do
  parameters "ds_aws_elastic_ip_address", "exclusion_tag", "ds_get_caller_identity"
  result "result"
  code <<-EOS
    var result=[];
    var param_exclude_tags_lower=[];
    for(var j=0;j<exclusion_tag.length;j++){
      param_exclude_tags_lower[j] = exclusion_tag[j].toString().toLowerCase();
    }
    for(var i=0;i<ds_aws_elastic_ip_address.length;i++){
      instance = ds_aws_elastic_ip_address[i];
      var tags = instance['tags'];
      var isTagMatched = false;
      var tagKeyValue = "";
      for(var k=0; k < tags.length; k++){
        tag = tags[k];
        if((param_exclude_tags_lower.indexOf((tag['tagKey']).toLowerCase()) !== -1) || (param_exclude_tags_lower.indexOf((tag['tagKey']+'='+tag['tagValue']).toLowerCase()) !== -1)){
          isTagMatched = true;
        }
        // Constructing tags with comma separated to display in detail_template
        if((tag['tagValue']).length > 0){
          tagKeyValue = tagKeyValue+" , "+tag['tagKey']+'='+tag['tagValue'];
        }
        else{
          tagKeyValue = tagKeyValue+" , "+tag['tagKey'];
        }
      }
      if(tagKeyValue === "" || tagKeyValue === " " || tagKeyValue == ""){
        tagKeyValue = "< No Value >";
      }
      else{
        tagKeyValue=tagKeyValue.slice(2);
      }
      //If the instance id is empty and IP tag does not match with entered param_exclude_tags
      if(instance['instance_id']=="" && instance['association_id'] == ""){
        if(!(isTagMatched)){
          result.push({
            accountId: ds_get_caller_identity[0]['account'],
            all_tags: (tagKeyValue),
            domain: instance['domain'],
            publicIp: instance['publicIp'],
            region: instance["region"],
            allocation_id: instance["allocation_id"]
          })
        }
      }
    }
  EOS
end

script "js_ip_cost_mapping", type:"javascript" do
  parameters  "ip_list","ip_costs","ds_currency_code","ds_currency_reference", "ds_billing_centers", "ds_get_caller_identity"
  result "result"
  code <<-EOS
    var result = {};
    var unused_ip_list=[];
    var message='';
    var count=0;
    function formatNumber(number, separator){
      var numString =number.toString();
      var values=numString.split(".");
      var result = ''
      while (values[0].length > 3){
        var chunk = values[0].substr(-3)
        values[0] = values[0].substr(0, values[0].length - 3)
        result = separator + chunk + result
      }
      if (values[0].length > 0){
        result = values[0] + result
      }
      if(values[1]==undefined){
        return result;
      }
      return result+"."+values[1];
    }
    // Format costs with currency symbol and thousands separator
    if(ds_billing_centers.length!=0){
      if( ds_currency_code['value'] !== undefined ) {
        if (ds_currency_reference[ds_currency_code['value']] !== undefined ) {
          var cur = ds_currency_reference[ds_currency_code['value']]['symbol']
          if( ds_currency_reference[ds_currency_code['value']]['t_separator'] !== undefined ) {
            var separator = ds_currency_reference[ds_currency_code['value']]['t_separator']
          } else {
            var separator = ""
          }
        } else {
          var cur = ""
          var separator = ""
        }
      } else {
        var cur = "$"
        var separator = ","
      }
      var total_savings=0;
      _.each(ip_costs, function(ip){
        total_savings=total_savings+ip.cost_nonamortized_unblended_adj
        count++;
      })
      if(count){
        total_savings=cur + ' '+formatNumber((Math.round((total_savings*30) * 100) / 100), separator);
        message = "The total estimated monthly savings are "+ total_savings;
      }
      else{
        message="The Flexera Optima system does not have any data to calculate savings for these resources";
      }
    }
    else{
      message="You do not have the least required role of billing_center_viewer to view the savings"
    }
    result={
      "ip_list": ip_list,
      "message": message,
      "accountId": ds_get_caller_identity[0]['account']
    }
    result.ip_list=_.sortBy(result.ip_list,"region")
  EOS
end

###############################################################################
# Escalations
###############################################################################

escalation "esc_email" do
  automatic true
  label "Sends Email"
  description "Sends Incident Email"
  email $param_email
end

escalation "esc_delete_ip_address" do
  automatic contains($param_automatic_action, "Delete Unused IPs")
  label "Delete IP"
  description "Delete Selected Unused IP"
  run "delete_unused_instances", data
end

###############################################################################
# Policy
##############################################################################

policy "policy_unused_ip_addresses" do
  validate $ds_ip_cost_mapping do
    summary_template "AWS Account ID: {{ data.accountId }} - {{ len data.ip_list }} Unused IP Addresses Found"
    detail_template <<-EOS
    {{data.message}}
    EOS
    check eq(size(val(data, "ip_list")),0)
    escalate $esc_email
    escalate $esc_delete_ip_address
    export "ip_list" do
      resource_level true
      field "accountId" do
        label "Account Id"
      end
      field "id" do
        label "Public IP"
        path "publicIp"
      end
      field "domain" do
        label "Domain"
      end
      field "region" do
        label "Region"
      end
      field "all_tags" do
        label "Tags"
      end
      field "allocation_id" do
        label "Allocation Id"
      end
    end
  end
end

###############################################################################
# Cloud Workflow
###############################################################################

define delete_unused_instances($data) return $all_responses do
  $all_responses = []
  foreach $item in $data do
    sub on_error: skip do
      if $item["domain"]=="standard"
        $response = http_request(
          verb: "get",
          host: join(["ec2.", $item["region"],".amazonaws.com"]),
          auth: $$auth_aws,
          href: "/",
          query_strings:{
            "Action":"ReleaseAddress",
            "PublicIp":$item["publicIp"],
            "Version":"2016-11-15"
          },
          https: true
        )
      elsif $item["domain"]=="vpc"
        $response = http_request(
          verb: "get",
          host: join(["ec2.", $item["region"],".amazonaws.com"]),
          auth: $$auth_aws,
          href: "/",
          query_strings:{
            "Action":"ReleaseAddress",
            "AllocationId":$item["allocation_id"],
            "Version":"2016-11-15"
          },
          https: true
        )
      end
      $all_responses << $response
    end
  end
  call sys_log('Unused Elastic IPs response',to_s($all_responses))
end

define sys_log($subject, $detail) do
  rs_cm.audit_entries.create(
    notify: "None",
    audit_entry: {
      auditee_href: @@account,
      summary: "AWS Delete "+ $subject,
      detail: $detail
    }
  )
end

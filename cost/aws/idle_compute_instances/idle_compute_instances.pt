name "AWS Idle Compute Instances"
rs_pt_ver 20180301
type "policy"
short_description "Check for instances that are idle for the last 30 days and terminates them after approval. See the [README](https://github.com/flexera/policy_templates/tree/master/cost/aws/idle_compute_instances/) and [docs.rightscale.com/policies](https://docs.rightscale.com/policies/) to learn more."
long_description ""
severity "low"
category "Cost"
default_frequency "daily"
info(
  version: "2.13",
  provider: "AWS",
  service: "EC2",
  policy_set: "Idle Compute Instances"
)

###############################################################################
# Parameters
###############################################################################

parameter "param_allowed_regions" do
  type "list"
  label "Allowed Regions"
  allowed_pattern /^([a-zA-Z-_]+-[a-zA-Z0-9-_]+-[0-9-_]+,*|)+$/
  description "A list of allowed regions. See the README for more details"
end

parameter "param_email" do
  type "list"
  label "Email addresses to notify"
  description "Email addresses of the recipients you wish to notify when new incidents are created"
end

parameter "param_avg_used_memory" do
  type "number"
  label "Average used memory percentage"
  description "Set to -1 to ignore memory utilization"
  default -1
  min_value -1
  max_value 100
end

parameter "param_avg_cpu" do
  type "number"
  label "Average used CPU percentage"
  description "Set to -1 to ignore CPU utilization"
  default -1
  min_value -1
  max_value 100
end

parameter "param_exclusion_tag_key" do
  category "User Inputs"
  label "Exclusion Tag Key:Value"
  description "Cloud native tag to ignore instances. Format: Key:Value"
  type "string"
  allowed_pattern /(^$)|([\w]?)+\:([\w]?)+/
end

parameter "param_automatic_action" do
  type "list"
  label "Automatic Actions"
  description "When this value is set, this policy will automatically take the selected action(s)"
  allowed_values ["Terminate Instances"]
end

parameter "param_log_to_cm_audit_entries" do
  type "string"
  label "Log to CM Audit Entries"
  description "Boolean for whether or not to log any debugging information from actions to CM Audit Entries, this should be left set to No on Flexera EU"
  default "No"
  allowed_values "Yes", "No"
end

###############################################################################
# Authentication
###############################################################################

#authenticate with AWS
credentials "auth_aws" do
  schemes "aws","aws_sts"
  label "AWS"
  description "Select the AWS Credential from the list"
  tags "provider=aws"
end

credentials "auth_rs" do
  schemes "oauth2"
  label "flexera"
  description "Select FlexeraOne OAuth2 credentials"
  tags "provider=flexera"
end

###############################################################################
# Datasources
###############################################################################

#Get list of enabled regions for an account
datasource "ds_regions_list" do
  request do
    auth $auth_aws
    verb "GET"
    host "ec2.amazonaws.com"
    path "/"
    query "Action", "DescribeRegions"
    query "Version", "2016-11-15"
  end
  result do
    encoding "xml"
    collect xpath(response, "//DescribeRegionsResponse/regionInfo/item", "array") do
      field "region", xpath(col_item, "regionName")
    end
  end
end

# Get only SCP enabled regions
datasource "ds_regions" do
  run_script $js_regions, $param_allowed_regions, $ds_regions_list
end

datasource "ds_instances" do
  run_script $js_instances, $ds_instances_set, $param_exclusion_tag_key
end

datasource "ds_instances_set" do
  iterate $ds_regions
  request do
    run_script $js_instances_set, val(iter_item,"region")
  end
  result do
    encoding "xml"
    collect xpath(response, "//DescribeInstancesResponse/reservationSet/item", "array") do
      field "instances_set" do
        collect xpath(col_item,"instancesSet/item","array") do
          field "region",val(iter_item, "region")
          field "instanceId", xpath(col_item,"instanceId")
          field "imageId", xpath(col_item,"imageId")
          field "instanceType", xpath(col_item, "instanceType")
          field "platform", xpath(col_item, "platform")
          field "privateDnsName", xpath(col_item, "privateDnsName")
          field "tag_set" do
            collect xpath(col_item,"tagSet/item","array") do
              field "key", xpath(col_item, "key")
              field "value", xpath(col_item, "value")
            end
          end
        end
      end
    end
  end
end

datasource "ds_cloudwatch_cpu_usage" do
  iterate $ds_instances
  request do
    run_script $js_cloudwatch_cpu_usage, val(iter_item, "region"), val(iter_item, "instanceId")
  end
  result do
    encoding "json"
    collect jmes_path(response, "GetMetricStatisticsResponse.GetMetricStatisticsResult.Datapoints[*]") do
      field "region", val(iter_item, "region")
      field "instanceId", val(iter_item, "instanceId")
      field "platform", val(iter_item, "platform")
      field "privateDnsName", val(iter_item, "privateDnsName")
      field "tag_set", val(iter_item, "tag_set")
      field "cpu_unit", jmes_path(col_item,"Unit")
      field "cpu_maximum", jmes_path(col_item, "Maximum")
      field "cpu_minimum", jmes_path(col_item, "Minimum")
      field "cpu_average", jmes_path(col_item, "Average")
    end
  end
end

datasource "ds_cloudwatch_mem_usage" do
  iterate $ds_instances
  request do
    run_script $js_cloudwatch_mem_usage, val(iter_item, "region"), val(iter_item, "instanceId"), val(iter_item,"privateDnsName")
  end
  result do
    encoding "json"
    collect jmes_path(response,"GetMetricStatisticsResponse.GetMetricStatisticsResult.Datapoints[*]") do
      field "region", val(iter_item, "region")
      field "instanceId", val(iter_item, "instanceId")
      field "privateDnsName", val(iter_item, "privateDnsName")
      field "tag_set", val(iter_item, "tag_set")
      field "mem_unit", jmes_path(col_item,"Unit")
      field "mem_maximum", jmes_path(col_item, "Maximum")
      field "mem_minimum", jmes_path(col_item, "Minimum")
      field "mem_average", jmes_path(col_item, "Average")
    end
  end
end

datasource "ds_cloudwatch_windows_mem_usage" do
  iterate $ds_instances
  request do
    run_script $js_cloudwatch_windows_memory_usage, val(iter_item, "region"), val(iter_item, "instanceId"), val(iter_item, "imageId"), val(iter_item, "instanceType")
  end
  result do
    encoding "json"
    collect jmes_path(response,"GetMetricStatisticsResponse.GetMetricStatisticsResult.Datapoints[*]") do
      field "region", val(iter_item, "region")
      field "instanceId", val(iter_item, "instanceId")
      field "privateDnsName", val(iter_item, "privateDnsName")
      field "tag_set", val(iter_item, "tag_set")
      field "mem_unit", jmes_path(col_item,"Unit")
      field "mem_maximum", jmes_path(col_item, "Maximum")
      field "mem_minimum", jmes_path(col_item, "Minimum")
      field "mem_average", jmes_path(col_item, "Average")
    end
  end
end

datasource "ds_merged_metrics" do
  run_script $js_merged_metrics, $ds_cloudwatch_cpu_usage, $ds_cloudwatch_mem_usage, $ds_cloudwatch_windows_mem_usage, $param_avg_used_memory, $param_avg_cpu
end

datasource "ds_currency_reference" do
  request do
    host "raw.githubusercontent.com"
    path "/rightscale/policy_templates/master/cost/scheduled_reports/currency_reference.json"
    header "User-Agent", "RS Policies"
  end
end

datasource "ds_currency_code" do
  request do
    auth $auth_rs
    host rs_optima_host
    path join(["/bill-analysis/orgs/",rs_org_id,"/settings/currency_code"])
    header "Api-Version", "0.1"
    header "User-Agent", "RS Policies"
    ignore_status [403]
  end
  result do
    encoding "json"
    field "id", jmes_path(response,"id")
    field "value", jmes_path(response,"value")
  end
end

datasource "ds_billing_centers" do
  request do
    auth $auth_rs
    host rs_optima_host
    path join(["/analytics/orgs/",rs_org_id,"/billing_centers"])
    header "Api-Version", "1.0"
    header "User-Agent", "RS Policies"
    query "view", "allocation_table"
    ignore_status [403]
  end
  result do
    encoding "json"
    collect jmes_path(response,"[*]") do
      field "href", jmes_path(col_item,"href")
      field "id", jmes_path(col_item,"id")
      field "name", jmes_path(col_item,"name")
      field "parent_id", jmes_path(col_item,"parent_id")
    end
  end
end

datasource "ds_top_level_billing_centers" do
  run_script $js_top_level_bc, $ds_billing_centers
end

datasource "ds_get_caller_identity" do
  request do
    auth $auth_aws
    verb "GET"
    host "sts.amazonaws.com"
    path "/"
    header "User-Agent", "RS Policies"
    query "Action", "GetCallerIdentity"
    query "Version", "2011-06-15"
  end
  result do
    encoding "xml"
    collect xpath(response, "//GetCallerIdentityResponse/GetCallerIdentityResult") do
      field "account",xpath(col_item, "Account")
    end
 end
end

datasource "ds_instances_costs" do
  request do
    run_script $js_get_costs, $ds_get_caller_identity, $ds_top_level_billing_centers, rs_org_id, rs_optima_host
  end
  result do
    encoding "json"
    collect jmes_path(response,"rows[*]") do
      field "resource_id", jmes_path(col_item,"dimensions.resource_id")
      field "cost_nonamortized_unblended_adj", jmes_path(col_item,"metrics.cost_nonamortized_unblended_adj")
    end
  end
end

datasource "ds_instance_cost_mapping" do
  run_script $js_instance_cost_mapping, $ds_merged_metrics, $ds_instances_costs, $ds_currency_code, $ds_currency_reference, $ds_billing_centers, $ds_get_caller_identity
end

###############################################################################
# Scripts
###############################################################################

script "js_regions", type:"javascript" do
  parameters "user_entered_regions", "all_regions"
  result "regions"
  code <<-EOS
    if(_.isEmpty(user_entered_regions)){
      regions = all_regions;
    }else{
      //Filter unique regions
      var uniqueRegions = _.uniq(user_entered_regions);
      var all_regions_list = [];
      all_regions.forEach(function(all_region){
        all_regions_list.push(all_region.region)
      })

      //Filter valid regions
      var valid_regions = [];
      _.map(uniqueRegions, function(uniqueRegion){
        if(all_regions_list.indexOf(uniqueRegion) > -1){
          valid_regions.push({"region": uniqueRegion})
        }
      })

      //Throw an error if no valid regions found
      if (_.isEmpty(valid_regions)) {
        regions = all_regions;
      }else{
        regions = valid_regions
      }
    }
  EOS
end

script "js_instances", type: "javascript" do
  result "results"
  parameters "ds_instance_set", "param_exclusion_tag_key"
  code <<-EOS
  var tag_key = param_exclusion_tag_key.split(':')[0]
  var tag_value = param_exclusion_tag_key.split(':')[1]
  var results = []
  for ( n=0; n < ds_instance_set.length; n++) {
    var instance_set = ds_instance_set[n].instances_set
    for ( i=0; i < instance_set.length; i++) {
      var instance = instance_set[i]
      var tags = instance.tag_set
      if (_.contains(_.pluck(tags,'key'), tag_key) && _.contains(_.pluck(tags,'value'), tag_value)){
        continue
      } else {
        results.push({
          "region": instance.region,
          "instanceId": instance.instanceId,
          "imageId": instance.imageId,
          "instanceType": instance.instanceType,
          "platform": instance.platform,
          "privateDnsName": instance.privateDnsName,
          "tag_set": instance.tag_set
        })
      }
    }
  }
EOS
end

script "js_instances_set", type: "javascript" do
  result "results"
  parameters "region"
  code <<-EOS
  var end_date = new Date().toISOString()
  var start_date = new Date(new Date().setDate(new Date().getDate() - 30)).toISOString();
  results = {
    "auth": "auth_aws",
    "host": 'ec2.'+region+'.amazonaws.com',
    "verb": "GET",
    "path": "/",
    "headers": {
      "User-Agent": "RS Policies",
      "Content-Type": "text/xml"
    }
    "query_params": {
      'Action': 'DescribeInstances',
      'Version': '2016-11-15',
      'Filter.1.Name': 'instance-state-name',
      'Filter.1.Value.1': 'running'
    }
  }
EOS
end

script "js_cloudwatch_cpu_usage", type: "javascript" do
  result "results"
  parameters "region","instance_id"
  code <<-EOS
  var end_date = new Date().toISOString()
  var start_date = new Date(new Date().setDate(new Date().getDate() - 30)).toISOString();
  results = {
    "auth": "auth_aws",
    "host": 'monitoring.'+region+'.amazonaws.com',
    "verb": "GET",
    "path": "/",
    "headers": {
      "User-Agent": "RS Policies",
      "Content-Type": "application/json",
      "x-amz-target": "GraniteServiceVersion20100801.GetMetricStatistics",
      "Accept": "application/json",
      "Content-Encoding": "amz-1.0"
    }
    "query_params": {
      'Action': 'GetMetricStatistics',
      'Version': '2010-08-01',
      'Namespace': 'AWS/EC2',
      'MetricName': 'CPUUtilization',
      'Dimensions.member.1.Name': 'InstanceId',
      'Dimensions.member.1.Value': instance_id,
      'StartTime': start_date,
      'EndTime': end_date,
      'Period': "2592000",
      'Statistics.member.1': 'Maximum',
      'Statistics.member.2': 'Average',
      'Statistics.member.3': 'Minimum'
    }
  }
EOS
end

script "js_cloudwatch_mem_usage", type: "javascript" do
  result "results"
  parameters "region","instance_id","privateDnsName"
  code <<-EOS
  if (privateDnsName != null && privateDnsName !== undefined && privateDnsName.length != 0) {
    var hostname = privateDnsName.split('.')[0]
  } else {
    var hostname = "ip-127-0-0-1"
  }
  var end_date = new Date().toISOString()
  var start_date = new Date(new Date().setDate(new Date().getDate() - 30)).toISOString();
  results = {
    "auth": "auth_aws",
    "host": 'monitoring.'+region+'.amazonaws.com',
    "verb": "GET",
    "path": "/",
    "headers": {
      "User-Agent": "RS Policies",
      "Content-Type": "application/json",
      "x-amz-target": "GraniteServiceVersion20100801.GetMetricStatistics",
      "Accept": "application/json",
      "Content-Encoding": "amz-1.0"
    }
    "query_params": {
      'Action': 'GetMetricStatistics',
      'Version': '2010-08-01',
      'Namespace': 'CWAgent',
      'MetricName': 'mem_used_percent',
      'Dimensions.member.1.Name': 'host',
      'Dimensions.member.1.Value': hostname,
      'StartTime': start_date,
      'EndTime': end_date,
      'Period': "2592000",
      'Statistics.member.1': 'Maximum',
      'Statistics.member.2': 'Average',
      'Statistics.member.3': 'Minimum'
    }
  }
EOS
end

script "js_cloudwatch_windows_memory_usage", type: "javascript" do
  result "results"
  parameters "region","instance_id", "image_id", "instance_type"
  code <<-EOS
  var end_date = new Date().toISOString()
  var start_date = new Date(new Date().setDate(new Date().getDate() - 30)).toISOString();
  results = {
    "auth": "auth_aws",
    "host": 'monitoring.'+region+'.amazonaws.com',
    "verb": "GET",
    "path": "/",
    "headers": {
      "User-Agent": "RS Policies",
      "Content-Type": "application/json",
      "x-amz-target": "GraniteServiceVersion20100801.GetMetricStatistics",
      "Accept": "application/json",
      "Content-Encoding": "amz-1.0"
    }
    "query_params": {
      'Action': 'GetMetricStatistics',
      'Version': '2010-08-01',
      'Namespace': 'CWAgent',
      'MetricName': 'Memory % Committed Bytes In Use',
      'Dimensions.member.1.Name': 'ImageId',
      'Dimensions.member.1.Value': image_id,
      'Dimensions.member.2.Name': 'InstanceId',
      'Dimensions.member.2.Value': instance_id,
      'Dimensions.member.3.Name': 'InstanceType',
      'Dimensions.member.3.Value': instance_type,
      'Dimensions.member.4.Name': 'objectname',
      'Dimensions.member.4.Value': 'Memory',
      'StartTime': start_date,
      'EndTime': end_date,
      'Period': "2592000",
      'Statistics.member.1': 'Maximum',
      'Statistics.member.2': 'Average',
      'Statistics.member.3': 'Minimum'
    }
  }
EOS
end

script "js_merged_metrics", type: "javascript" do
  parameters "ds_cloudwatch_cpu_usage", "ds_cloudwatch_mem_usage", "ds_cloudwatch_windows_mem_usage", "param_avg_used_memory", "param_avg_cpu"
  result "merged_results"
  code <<-EOS
  var merged_results = []
  for ( i = 0; i < ds_cloudwatch_cpu_usage.length; i++){
    var instance = ds_cloudwatch_cpu_usage[i]
    var instance_id = instance.instanceId
    if (instance.platform == 'windows'){
      var mem_usage_record = _.find(ds_cloudwatch_windows_mem_usage, function(record) { return record.instanceId == instance_id; })

      if (mem_usage_record != null && mem_usage_record !== undefined) {
        var mem_maximum = parseFloat(mem_usage_record.mem_maximum).toFixed(2)
        var mem_average = parseFloat(mem_usage_record.mem_average).toFixed(2)
        var mem_minimum = parseFloat(mem_usage_record.mem_minimum).toFixed(2)
      } else {
        var mem_maximum = "101"
        var mem_average = "101"
        var mem_minimum = "101"
        var mem_maximum_value = "NA"
        var mem_minimum_value = "NA"
        var mem_average_value = "NA"
      }
    } else {
      instance.platform = 'linux'
      var mem_usage_record = _.find(ds_cloudwatch_mem_usage, function(record) { return record.instanceId == instance_id; })

      if (mem_usage_record != null && mem_usage_record !== undefined) {
        var mem_maximum = parseFloat(mem_usage_record.mem_maximum).toFixed(2)
        var mem_average = parseFloat(mem_usage_record.mem_average).toFixed(2)
        var mem_minimum = parseFloat(mem_usage_record.mem_minimum).toFixed(2)
      } else {
        var mem_maximum = "101"
        var mem_average = "101"
        var mem_minimum = "101"
        var mem_maximum_value = "NA"
        var mem_minimum_value = "NA"
        var mem_average_value = "NA"
      }
    }
    if((param_avg_used_memory >= mem_average && param_avg_used_memory != -1) || (param_avg_cpu >= parseFloat(instance.cpu_average).toFixed(2) && param_avg_cpu != -1)){
      merged_results.push(
        {
          "region": instance.region,
          "id": instance.instanceId,
          "platform": instance.platform,
          "privateDnsName": instance.privateDnsName,
          "hostname": instance.privateDnsName.split('.')[0],
          "tag_set": instance.tag_set,
          "cpu_minimum": parseFloat(instance.cpu_minimum).toFixed(2),
          "cpu_maximum": parseFloat(instance.cpu_maximum).toFixed(2),
          "cpu_average": parseFloat(instance.cpu_average).toFixed(2),
          "mem_maximum": mem_maximum,
          "mem_minimum": mem_minimum,
          "mem_average": mem_average,
          "mem_maximum_value": mem_maximum_value,
          "mem_average_value": mem_average_value,
          "savings":"N/A"
        }
      )
    }
  }
EOS
end

script "js_top_level_bc", type: "javascript" do
  parameters "billing_centers"
  result "filtered_billing_centers"
  code <<-EOS
  var filtered_billing_centers =
    _.reject(billing_centers, function(bc){ return bc.parent_id != null });
EOS
end

script "js_get_costs", type:"javascript" do
  parameters  "account_id","billing_centers","org", "optima_host"
  result "request"
  code <<-EOS
    // returns date formatted as string: YYYY-mm-dd
    function getFormattedDailyDate(date) {
      var year = date.getFullYear();
      var month = (1 + date.getMonth()).toString();
      month = month.length > 1 ? month : '0' + month;
      var day = date.getDate().toString();
      day = day.length > 1 ? day : '0' + day;
      return year + '-' + month + '-' + day;
    }
    var start_date = getFormattedDailyDate(new Date(new Date().setDate(new Date().getDate() - 3)));
    var end_date = getFormattedDailyDate(new Date(new Date().setDate(new Date().getDate() - 2)));
    var request = {
      auth: "auth_rs",
      host: optima_host,
      verb: "POST",
      path: "/bill-analysis/orgs/" + org + "/costs/select",
      body_fields: {
        "dimensions": ["resource_id"],
        "granularity": "day",
        "start_at": start_date,
        "end_at": end_date,
        "metrics": ["cost_nonamortized_unblended_adj"],
        "billing_center_ids": _.compact(_.map(billing_centers, function(value){ return value.id})),
        "limit": 10000,
        "filter": {
          "expressions": [
            {
              "dimension": "service",
              "type": "equal",
              "value": "AmazonEC2"
            },
            {
              "dimension": "resource_type",
              "type": "equal",
              "value": "Compute Instance"
            },
            {
              "dimension": "vendor_account",
              "type": "equal",
              "value": account_id[0]["account"]
            }
          ],
          "type": "and"
        }
      },
      headers: {
        "User-Agent": "RS Policies",
        "Api-Version": "1.0"
      },
      ignore_status: [400]
    }
  EOS
end

script "js_instance_cost_mapping", type:"javascript" do
  parameters  "instances","instance_costs","ds_currency_code","ds_currency_reference", "ds_billing_centers", "ds_get_caller_identity"
  result "result"
  code <<-EOS
  var result = {};
  var message='';
  var count=0;
  var idle_instance=[];
  function formatNumber(number, separator){
    var numString =number.toString();
    var values=numString.split(".");
    var result = ''
    while (values[0].length > 3){
      var chunk = values[0].substr(-3)
      values[0] = values[0].substr(0, values[0].length - 3)
      result = separator + chunk + result
    }
    if (values[0].length > 0){
      result = values[0] + result
    }
    if(values[1]==undefined){
      return result;
    }
    return result+"."+values[1];
  }
  if(ds_billing_centers.length!=0){
    // Put costs into a map by resource ID and only include them for resource IDs we actually need
    var costs_by_resource_id = {};
    _.each(instances, function(instance) {
      costs_by_resource_id[instance.id] = [];
    });
    _.each(instance_costs, function(cost) {
      var costs = costs_by_resource_id[cost.resource_id];
      if (costs != null) {
        costs.push(cost);
      }
    });
    // Format costs with currency symbol and thousands separator
    if( ds_currency_code['value'] !== undefined ) {
      if (ds_currency_reference[ds_currency_code['value']] !== undefined ) {
        var cur = ds_currency_reference[ds_currency_code['value']]['symbol']
        if( ds_currency_reference[ds_currency_code['value']]['t_separator'] !== undefined ) {
          var separator = ds_currency_reference[ds_currency_code['value']]['t_separator']
        } else {
          var separator = ""
        }
      } else {
        var cur = ""
        var separator = ""
      }
    } else {
      var cur = "$"
      var separator = ","
    }
    var total_savings=0;
    _.each(instances, function(instance){
      var cost_objects = costs_by_resource_id[instance.id];
      if (_.size(cost_objects) > 0){
        count++;
        var sum = _.reduce(_.compact(_.map(cost_objects, function(value){ return value.cost_nonamortized_unblended_adj})), function(memo, num){ return memo + num; }, 0);
        var monthly_savings = sum*30;
        total_savings=total_savings+monthly_savings;
        idle_instance.push({
          "accountId": ds_get_caller_identity[0]['account']
          "region": instance["region"],
          "id": instance["id"],
          "platform": instance["platform"],
          "privateDnsName": instance["privateDnsName"],
          "hostname": instance["hostname"],
          "tag_set": instance["tag_set"],
          "cpu_minimum": instance["cpu_minimum"],
          "cpu_maximum": instance["cpu_maximum"],
          "cpu_average": instance["cpu_average"],
          "mem_maximum": instance["mem_maximum"],
          "mem_minimum": instance["mem_minimum"],
          "mem_average": instance["mem_average"],
          "mem_maximum_value": instance["mem_maximum_value"],
          "mem_average_value": instance["mem_average_value"]
          "savings": cur + ' '+formatNumber(monthly_savings.toFixed(3), separator)
        })
      } else {
        idle_instance.push({
          "accountId": ds_get_caller_identity[0]['account']
          "region": instance["region"],
          "id": instance["id"],
          "platform": instance["platform"],
          "privateDnsName": instance["privateDnsName"],
          "hostname": instance["hostname"],
          "tag_set": instance["tag_set"],
          "cpu_minimum": instance["cpu_minimum"],
          "cpu_maximum": instance["cpu_maximum"],
          "cpu_average": instance["cpu_average"],
          "mem_maximum": instance["mem_maximum"],
          "mem_minimum": instance["mem_minimum"],
          "mem_average": instance["mem_average"],
          "mem_maximum_value": instance["mem_maximum_value"],
          "mem_average_value": instance["mem_average_value"]
          "savings": "N/A"
        })
      }
    })
    if(count){
      total_savings=cur + ' '+formatNumber(total_savings.toFixed(3), separator);
      message="The total estimated monthly savings are "+total_savings;
    }
    else{
      message="The Flexera Optima system does not have any data to calculate savings for these resources";
    }
  }
  else{
    idle_instance=instances;
    message="You do not have the minimum required role of billing_center_viewer to view the savings";
  }
  result={
    "idle_instances":idle_instance,
    "message":message
  }
  result.idle_instances=_.sortBy(result.idle_instances, 'region');
  EOS
end

###############################################################################
# Policy
###############################################################################

policy "pol_utilization" do
  validate $ds_instance_cost_mapping do
    summary_template "AWS Account ID: {{with index data.idle_instances 0}}{{ .accountId }}{{end}} - {{ len data.idle_instances}} rows containing AWS instance CloudWatch utilization data"
    detail_template <<-EOS
{{data.message}}
EOS
    escalate $email
    escalate $terminate_resources
    check eq(size(val(data, "idle_instances")), 0)
    export "idle_instances" do
      resource_level true
      field "accountId" do
        label "Account Id"
      end
      field "region" do
        label "Region"
      end
      field "platform" do
        label "Platform"
      end
      field "hostname" do
        label "Hostname"
      end
      field "savings" do
        label "Estimated Monthly Savings"
      end
      field "privateDnsName" do
        label "Private DNS Name"
      end
      field "cpu_maximum" do
        label "CPU Maximum %"
      end
      field "cpu_average" do
        label "CPU Average %"
      end
      field "mem_maximum_value" do
        label "Memory Maximum %"
      end
      field "mem_average_value" do
        label "Memory Average %"
      end
      field "id" do
        label "Instance ID"
      end
    end
  end
end


###############################################################################
# Escalations
###############################################################################

escalation "email" do
  automatic true
  label "Send Email"
  description "Send incident email"
  email $param_email
end

escalation "terminate_resources" do
  automatic contains($param_automatic_action, "Terminate Instances")
  label "Terminate Instances"
  description "Approval to terminate all selected instances"
  run "terminate_resources", data, $param_log_to_cm_audit_entries
end

###############################################################################
# Cloud Workflow
###############################################################################

define terminate_resources($data,$param_log_to_cm_audit_entries) return $all_responses do
  $$debug = $param_log_to_cm_audit_entries == "Yes"
  $$log = []
  $all_responses = []
  $syslog_subject = "AWS Idle Compute: "
  call sys_log(join([$syslog_subject, "Identified Instances"]),to_s($data))
  foreach $item in $data do
    $response = http_request(
      auth: $$auth_aws,
      https: true,
      verb: "post",
      href: "/",
      host: "ec2."+$item["region"]+".amazonaws.com",
      query_strings: {
        "Action": "TerminateInstances",
        "Version": "2012-06-01",
        "InstanceId.1": $item["id"]
      }
    )
    $all_responses << $response
  end
  call sys_log(join([$syslog_subject, "Responses"]),to_s($all_responses))
end

define handle_error($response) do
  $status_code = $response["code"]
  $syslog_subject = "AWS Idle Compute Termination Error: "
  call sys_log(join([$syslog_subject, $status_code]),to_s($response))
  $_error_behavior = "skip"
end

define sys_log($subject, $detail) do
  if $$debug
    rs_cm.audit_entries.create(
      notify: "None",
      audit_entry: {
        auditee_href: @@account,
        summary: $subject,
        detail: $detail
      }
    )
  end
end

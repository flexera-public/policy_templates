name "AWS RDS Instances"
rs_pt_ver 20180301
type "policy"
short_description "Collects all RDS instances in an account. See the [README](https://github.com/flexera/policy_templates/tree/master/cost/aws/rds_instance_license_info/) and [docs.flexera.com/flexera/EN/Automation](https://docs.flexera.com/flexera/EN/Automation/AutomationGS.htm) to learn more."
long_description ""
severity "low"
category "Cost"
default_frequency "daily"
info(
  version: "2.8",
  provider: "AWS",
  service: "RDS",
  policy_set: ""
)

###############################################################################
# Permissions
###############################################################################

###############################################################################
# Parameters
###############################################################################

parameter "param_allowed_regions" do
  type "list"
  label "Allowed Regions"
  allowed_pattern /^([a-zA-Z-_]+-[a-zA-Z0-9-_]+-[0-9-_]+,*|)+$/
  description "A list of allowed regions. See the README for more details"
end

parameter "param_aws_account_number" do
  type "string"
  label "Account Number"
  description "The account number for AWS STS Cross Account Roles."
  default ""
end

parameter "param_email" do
  type "list"
  label "Email addresses to notify"
  description "Email addresses of the recipients you wish to notify when new incidents are created"
end

###############################################################################
# Authentication
###############################################################################

#authenticate with AWS
credentials "auth_aws" do
  schemes "aws","aws_sts"
  label "AWS"
  description "Select the AWS Credential from the list."
  tags "provider=aws"
  aws_account_number $param_aws_account_number
end

###############################################################################
# Datasources
###############################################################################

datasource "ds_get_caller_identity" do
  request do
    auth $auth_aws
    verb "GET"
    host "sts.amazonaws.com"
    path "/"
    header "User-Agent", "RS Policies"
    query "Action", "GetCallerIdentity"
    query "Version", "2011-06-15"
  end
  result do
    encoding "xml"
    collect xpath(response, "//GetCallerIdentityResponse/GetCallerIdentityResult") do
      field "account",xpath(col_item, "Account")
    end
  end
end

#Get list of enabled regions for an account
datasource "ds_regions_list" do
  request do
    auth $auth_aws
    verb "GET"
    host "ec2.amazonaws.com"
    path "/"
    query "Action", "DescribeRegions"
    query "Version", "2016-11-15"
  end
  result do
    encoding "xml"
    collect xpath(response, "//DescribeRegionsResponse/regionInfo/item", "array") do
      field "region", xpath(col_item, "regionName")
    end
  end
end

# Get only SCP enabled regions
datasource "ds_regions" do
  run_script $js_regions, $param_allowed_regions, $ds_regions_list
end

datasource "ds_instances_set" do
  iterate $ds_regions
  request do
    auth $auth_aws
    host join(["rds.", val(iter_item, "region"), ".amazonaws.com"])
    path "/"
    header "User-Agent", "RS Policies"
    header "Content-Type", "text/xml"
    query "Action", "DescribeDBInstances"
    query "Version", "2014-10-31"
  end
  result do
    encoding "xml"
    collect xpath(response, "//DescribeDBInstancesResponse/DescribeDBInstancesResult/DBInstances/DBInstance[*]", "array") do
      field "availabilityZone", xpath(col_item,"AvailabilityZone")
      field "instanceId", xpath(col_item,"DbiResourceId")
      field "dbInstanceArn", xpath(col_item,"DBInstanceArn")
      field "dbInstanceIdentifier", xpath(col_item, "DBInstanceIdentifier")
      field "dbInstanceClass", xpath(col_item, "DBInstanceClass")
      field "engine", xpath(col_item, "Engine")
      field "engineVersion", xpath(col_item, "EngineVersion")
      field "region", val(iter_item, "region")
      field "processorFeatures", xpath(col_item, "ProcessorFeatures")
      field "licenseModel", xpath(col_item, "LicenseModel")
      field "processorFeatures" do
        collect xpath(col_item, "ProcessorFeatures/ProcessorFeature") do
          field "name", xpath(col_item, "Name")
          field "value", xpath(col_item, "Value")
        end
      end
    end
  end
end

datasource "ds_aws_instance_size_map" do
  request do
    verb "GET"
    host "raw.githubusercontent.com"
    path "/flexera/policy_templates/master/data/aws/instance_types.json"
    header "User-Agent", "RS Policies"
  end
end

datasource "ds_filtered_results" do
  run_script $js_filtered_results, $ds_instances_set, $ds_aws_instance_size_map, $ds_get_caller_identity
end

###############################################################################
# Scripts
###############################################################################

script "js_regions", type:"javascript" do
  parameters "user_entered_regions", "all_regions"
  result "regions"
  code <<-EOS
    if(_.isEmpty(user_entered_regions)){
      regions = all_regions;
    }else{
      //Filter unique regions
      var uniqueRegions = _.uniq(user_entered_regions);
      var all_regions_list = [];
      all_regions.forEach(function(all_region){
        all_regions_list.push(all_region.region)
      })

      //Filter valid regions
      var valid_regions = [];
      _.map(uniqueRegions, function(uniqueRegion){
        if(all_regions_list.indexOf(uniqueRegion) > -1){
          valid_regions.push({"region": uniqueRegion})
        }
      })

      //Throw an error if no valid regions found
      if (_.isEmpty(valid_regions)) {
        regions = all_regions;
      }else{
        regions = valid_regions
      }
    }
  EOS
end

script "js_filtered_results", type: "javascript" do
  parameters "ds_instances_set", "ds_aws_instance_size_map", "ds_get_caller_identity"
  result "results"
  code <<-EOS
  var results = []

  _.each(ds_instances_set, function(instance){
    var vcpu = "Unknown"

    if (_.isEmpty(instance["processorFeatures"])){
      vcpu = ds_aws_instance_size_map[instance["dbInstanceClass"]]["vcpu"]
    } else {
      var cores = _.findWhere(instance["processorFeatures"], {"name": "coreCount"})["value"]
      var threads = _.findWhere(instance["processorFeatures"], {"name": "threadsPerCore"})["value"]
      vcpu = cores * threads
    }

    results.push (
      {
        "accountId": ds_get_caller_identity[0]['account'],
        "region": instance["region"],
        "availabilityZone": instance["availabilityZone"],
        "dbInstanceArn": instance["dbInstanceArn"],
        "dbInstanceIdentifier": instance["dbInstanceIdentifier"],
        "dbInstanceClass": instance["dbInstanceClass"],
        "engine": instance["engine"],
        "engineVersion": instance["engineVersion"]
        "vcpu": vcpu.toString()
        "licenseModel": instance["licenseModel"]
      }
    )
  })
  results = _.sortBy(results, 'region');
EOS
end

###############################################################################
# Policy
###############################################################################

policy "pol_rds_instances" do
  validate $ds_filtered_results do
    summary_template "AWS Account ID: {{with index data 0}}{{ .accountId }}{{end}} - RDS Instances"
    check eq(size(data),0)
    export do
      resource_level true
      field "accountId" do
        label "Account Id"
      end
      field "region" do
        label "Region"
      end
      field "id" do
        path "dbInstanceIdentifier"
        label "Instance ID"
      end
      field "engine" do
        label "Engine"
      end
      field "engineVersion" do
        label "Engine Version"
      end
      field "dbInstanceClass" do
        label "Instance Class"
      end
      field "availabilityZone" do
        label "Availability Zone"
      end
      field "vcpu" do
        label "vCPUs"
      end
      field "licenseModel" do
        label "License Model"
      end
    end
    escalate $email
  end
end

###############################################################################
# Escalations
###############################################################################

escalation "email" do
  automatic true
  label "Send Email"
  description "Send incident email"
  email $param_email
end

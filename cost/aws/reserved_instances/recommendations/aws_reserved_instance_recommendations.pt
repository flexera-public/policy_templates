name "AWS Reserved Instances Recommendations"
rs_pt_ver 20180301
type "policy"
short_description "A policy that sends email notifications when AWS RI Recommendations are identified. NOTE: These RI Purchase Recommendations are generated by AWS. See the [README](https://github.com/flexera/policy_templates/tree/master/cost/aws/reserved_instances/recommendations) and [docs.rightscale.com/policies](https://docs.rightscale.com/policies/) to learn more."
long_description ""
severity "medium"
category "Cost"
info(
  version: "2.0",
  provider: "AWS",
  service: "EC2",
  policy_set: ""
)

###############################################################################
# Permissions
###############################################################################

permission "perm_read_creds" do
  actions   "rs_cm.show_sensitive","rs_cm.index_sensitive"
  resources "rs_cm.credentials"
end

###############################################################################
# User Inputs
###############################################################################

parameter "param_days" do 
  category "RI"
  label "Look Back Period"
  default "Last 7 Days"
  description "Number of days of prior usage to analyze"
  allowed_values "Last 7 Days","Last 30 Days","Last 60 Days"
  type "string"
end 

parameter "param_service" do 
  category "RI"
  label "Service"
  default "Elastic Compute Cloud (EC2)"
  description "AWS Service for which to scan for RI Recommendations"
  allowed_values "ElastiCache","Elastic Compute Cloud (EC2)","Elasticsearch Service (ES)","Redshift","Relational Database Service (RDS)"
  type "string"
end 

parameter "param_service_spec" do 
  category "RI"
  label "EC2 Specification"
  allowed_values "Standard","Convertible"
  default "Standard"
  description "EC2 RI type. Note: this parameter will be ignored if the Service parameter is not \"Elastic Compute Cloud (EC2)\""
  type "string"
end 

parameter "param_term" do 
  category "RI"
  label "RI Term"
  description "Length of RI term"
  allowed_values "Any","1 Year","3 Year"
  default "Any"
  type "string"
end 

parameter "param_payment_option" do
  category "RI"
  label "(Optional) Payment Option"
  default ""
  allowed_values "","No Upfront","Partial Upfront","All Upfront","Light Utilization","Medium Utilization","Heavy Utilization"
  type "string"
  description "RI purchase option.  Leave blank to include all RI purchase options"
end 

parameter "param_savings_threshold" do
  category "RI"
  label "Net Savings Threshold"
  description "Specify the minimum estimated monthly savings that should result in a recommendation"
  default 100
  type "number"
end

parameter "param_email" do
  type "list"
  label "Email addresses to notify"
  description "Email addresses of the recipients you wish to notify"
end

###############################################################################
# Authentication
###############################################################################

#authenticate with AWS
credentials "auth_aws" do
  schemes "aws","aws_sts"
  label "AWS"
  description "Select the AWS Credential from the list"
  tags "provider=aws"
end

###############################################################################
# Pagination
###############################################################################

pagination "aws_pagination" do
  get_page_marker do
    body_path "NextPageToken"
  end
  set_page_marker do
    body_field "NextPageToken"
  end
end

script "js_ri_request", type: "javascript" do
  parameters "param_days","param_payment_option","param_service","param_service_spec","param_term"
  result "request"
  code <<-EOS

    var period = {
      "Last 7 Days":"SEVEN_DAYS",
      "Last 30 Days":"THIRTY_DAYS",
      "Last 60 Days":"SIXTY_DAYS"
    }
    
    var service = {
      "Elastic Compute Cloud (EC2)":"Amazon Elastic Compute Cloud - Compute",
      "Relational Database Service (RDS)":"Amazon Relational Database Service",
      "ElastiCache":"Amazon ElastiCache",
      "Redshift":"Amazon Redshift",
      "Elasticsearch Service (ES)":"Amazon Elasticsearch Service"
    }

    var service_spec = {
      "Standard":"STANDARD",
      "Convertible":"CONVERTIBLE"
    }

    var term = {
      "1 Year":"ONE_YEAR",
      "3 Year":"THREE_YEARS"
    }

    var option = {
      "No Upfront":"NO_UPFRONT",
      "Partial Upfront":"PARTIAL_UPFRONT",
      "All Upfront":"ALL_UPFRONT",
      "Light Utilization":"LIGHT_UTILIZATION",
      "Medium Utilization":"MEDIUM_UTILIZATION",
      "Heavy Utilization":"HEAVY_UTILIZATION"
    }

    var payload = {}
    payload['LookbackPeriodInDays'] = period[param_days]
    payload['AccountScope'] = "PAYER"
    payload['Service'] = service[param_service]
    
    if(param_payment_option !== ""){
      payload['PaymentOption'] = option[param_payment_option]
    }

    if(param_service === "Elastic Compute Cloud (EC2)"){
      payload['ServiceSpecification'] = {}
      payload['ServiceSpecification']['EC2Specification'] = {}
      payload['ServiceSpecification']['EC2Specification']['OfferingClass'] = service_spec[param_service_spec]
    }

    if(param_term !== "Any"){
      payload['TermInYears'] = term[param_term]
    }

    var request = {
      auth: "auth_aws",
      pagination: "aws_pagination",
      host: "ce.us-east-1.amazonaws.com",
      path: '/',
      verb: 'POST',
      body_fields: payload,
      headers: {
        "User-Agent": "RS Policies",
        "X-Amz-Target": "AWSInsightsIndexService.GetReservationPurchaseRecommendation",
        "Content-Type": "application/x-amz-json-1.1",
      }
    } 
  EOS
end

###############################################################################
# Datasources
###############################################################################

datasource "ds_ri_recommendations" do
  request do
    run_script $js_ri_request, $param_days, $param_payment_option, $param_service, $param_service_spec, $param_term
  end
  result do
    encoding "json"
    collect jmes_path(response, "Recommendations[*]") do
      field "accountScope", jmes_path(col_item,"AccountScope")
      field "lookbackPeriodInDays", jmes_path(col_item,"LookbackPeriodInDays")
      field "paymentOption", jmes_path(col_item,"PaymentOption")
      field "termInYears", jmes_path(col_item,"TermInYears")
      field "recommendationDetails" do
        collect jmes_path(col_item, "RecommendationDetails[*]") do
          field "accountId", jmes_path(col_item,"AccountId")
          field "averageNormalizedUnitsUsedPerHour", jmes_path(col_item,"AverageNormalizedUnitsUsedPerHour")
          field "averageNumberOfInstancesUsedPerHour", jmes_path(col_item,"AverageNumberOfInstancesUsedPerHour")
          field "averageUtilization", jmes_path(col_item,"AverageUtilization")
          field "estimatedBreakEvenInMonths", jmes_path(col_item,"EstimatedBreakEvenInMonths")
          field "estimatedMonthlyOnDemandCost", jmes_path(col_item,"EstimatedMonthlyOnDemandCost")
          field "estimatedMonthlySavingsAmount", jmes_path(col_item,"EstimatedMonthlySavingsAmount")
          field "estimatedMonthlySavingsPercentage", jmes_path(col_item,"EstimatedMonthlySavingsPercentage")
          field "estimatedReservationCostForLookbackPeriod", jmes_path(col_item,"EstimatedReservationCostForLookbackPeriod")
          field "availabilityZone", jmes_path(col_item,"InstanceDetails.*.AvailabilityZone")
          field "currentGeneration", jmes_path(col_item,"InstanceDetails.*.CurrentGeneration")
          field "family", jmes_path(col_item,"InstanceDetails.*.Family")
          field "instanceType", jmes_path(col_item,"InstanceDetails.*.InstanceType")
          field "platform", jmes_path(col_item,"InstanceDetails.*.Platform")
          field "region", jmes_path(col_item,"InstanceDetails.*.Region")
          field "sizeFlexEligible", jmes_path(col_item,"InstanceDetails.*.SizeFlexEligible")
          field "tenancy", jmes_path(col_item,"InstanceDetails.*.Tenancy")
          field "nodeType", jmes_path(col_item,"InstanceDetails.*.NodeType")
          field "productDescription", jmes_path(col_item,"InstanceDetails.*.ProductDescription")
          field "instanceClass", jmes_path(col_item,"InstanceDetails.*.InstanceClass")
          field "instanceSize", jmes_path(col_item,"InstanceDetails.*.InstanceSize")
          field "databaseEngine", jmes_path(col_item,"InstanceDetails.*.DatabaseEngine")
          field "databaseEdition", jmes_path(col_item,"InstanceDetails.*.DatabaseEdition")
          field "deploymentOption", jmes_path(col_item,"InstanceDetails.*.DeploymentOption")
          field "licenseModel", jmes_path(col_item,"InstanceDetails.*.LicenseModel")
          field "maximumNormalizedUnitsUsedPerHour", jmes_path(col_item,"MaximumNormalizedUnitsUsedPerHour")
          field "maximumNumberOfInstancesUsedPerHour", jmes_path(col_item,"MaximumNumberOfInstancesUsedPerHour")
          field "minimumNormalizedUnitsUsedPerHour", jmes_path(col_item,"MinimumNormalizedUnitsUsedPerHour")
          field "minimumNumberOfInstancesUsedPerHour", jmes_path(col_item,"MinimumNumberOfInstancesUsedPerHour")
          field "recommendedNormalizedUnitsToPurchase", jmes_path(col_item,"RecommendedNormalizedUnitsToPurchase")
          field "recommendedNumberOfInstancesToPurchase", jmes_path(col_item,"RecommendedNumberOfInstancesToPurchase")
          field "recurringStandardMonthlyCost", jmes_path(col_item,"RecurringStandardMonthlyCost")
          field "upfrontCost", jmes_path(col_item,"UpfrontCost")
        end
      end
    end
  end
end

datasource "ds_ri_normalization" do 
  run_script $js_ri_cleanup, $ds_ri_recommendations
end

script "js_ri_cleanup", type: "javascript" do
  parameters "ri_recos"
  result "result"
  code <<-EOS
    var result = [];
    _.each(ri_recos, function(recos){
      var reco_details = recos["recommendationDetails"];

      _.each(reco_details, function(reco){
        result.push({
          accountScope: recos["accountScope"],
          lookbackPeriodInDays: recos["lookbackPeriodInDays"],
          paymentOption: recos["paymentOption"],
          availabilityZone: reco["availabilityZone"].toString(),
          averageNormalizedUnitsUsedPerHour: (Math.round(reco["averageNormalizedUnitsUsedPerHour"] * 100) / 100).toString(10),
          averageNumberOfInstancesUsedPerHour: (Math.round(reco["averageNumberOfInstancesUsedPerHour"] * 100) / 100).toString(10),
          averageUtilization: (Math.round(reco["averageUtilization"] * 100) / 100).toString(10),
          databaseEdition: reco["databaseEdition"].toString(),
          databaseEngine: reco["databaseEngine"].toString(),
          deploymentOption: reco["deploymentOption"].toString(),
          estimatedBreakEvenInMonths: (Math.round(reco["estimatedBreakEvenInMonths"] * 100) / 100).toString(10),
          estimatedMonthlyOnDemandCost: (Math.round(reco["estimatedMonthlyOnDemandCost"] * 100) / 100).toString(10),
          estimatedMonthlySavingsAmount: (Math.round(reco["estimatedMonthlySavingsAmount"] * 100) / 100).toString(10),
          estimatedMonthlySavingsPercentage: (Math.round(reco["estimatedMonthlySavingsPercentage"] * 100) / 100).toString(10),
          estimatedReservationCostForLookbackPeriod: (Math.round(reco["estimatedReservationCostForLookbackPeriod"] * 100) / 100).toString(10),
          family: reco["family"].toString(),
          instanceClass: reco["instanceClass"].toString(),
          instanceSize: reco["instanceSize"].toString(),
          instanceType: reco["instanceType"].toString(),
          licenseModel: reco["licenseModel"].toString(),
          maximumNormalizedUnitsUsedPerHour: (Math.round(reco["maximumNormalizedUnitsUsedPerHour"] * 100) / 100).toString(10),
          maximumNumberOfInstancesUsedPerHour: (Math.round(reco["maximumNumberOfInstancesUsedPerHour"] * 100) / 100).toString(10),
          minimumNormalizedUnitsUsedPerHour: (Math.round(reco["minimumNormalizedUnitsUsedPerHour"] * 100) / 100).toString(10),
          minimumNumberOfInstancesUsedPerHour: (Math.round(reco["minimumNumberOfInstancesUsedPerHour"] * 100) / 100).toString(10),
          nodeType: reco["nodeType"].toString(),
          platform: reco["platform"].toString(),
          productDescription: reco["productDescription"].toString(),
          recommendedNormalizedUnitsToPurchase: reco["recommendedNormalizedUnitsToPurchase"].toString(),
          recommendedNumberOfInstancesToPurchase: reco["recommendedNumberOfInstancesToPurchase"].toString(),
          recurringStandardMonthlyCost: (Math.round(reco["recurringStandardMonthlyCost"] * 100) / 100).toString(10),
          region: reco["region"].toString(),
          sizeFlexEligible: reco["sizeFlexEligible"].toString(),
          tenancy: reco["tenancy"].toString(),
          upfrontCost: (Math.round(reco["upfrontCost"] * 100) / 100).toString(10)

        })
      })
    }) 
  EOS
end

policy "aws_ri_recommendations" do
  validate_each $ds_ri_normalization do
    summary_template "{{ len data }} AWS Reserved Instances Purchase Recommendations"
    detail_template <<-EOS
# AWS Reserved Instances Purchase Recommendations
| Estimated Monthly Savings Amount | Account Scope | Availability Zone | Average Normalized Units Used Per Hour | Average Number of Instances Used Per Hour | Average Utilization | Database Edition | Database Engine | Deployment Option | Estimated Break Even In Months | Estimated Monthly On Demand Cost | Estimated Monthly Savings Percentage | Estimated Reservation Cost For Lookback Period | Family | Instance Class | Instance Size | Instance Type | License Model | Lookback Period in Days | Maximum Normalized Units Used Per Hour | Maximum Number Of Instances Used Per Hour | Minimum Normalize Units Used Per Hour | Minimum Number Of Instances Used Per Hour | Node Type | Payment Option | Platform | Product Description | Recommended Normalized Units To Purchase | Recommended Number Of Instances To Purchase | Recurring Standard Monthly Cost | Region | Flex Eligible | Tenancy | Upfront Cost |
| -------------------------------- | ------------- | ----------------- | -------------------------------------- | ----------------------------------------- | ------------------- | ---------------- | --------------- | ----------------- | ------------------------------ | -------------------------------- | ------------------------------------ | ---------------------------------------------- | ------ | -------------- | ------------- | ------------- | ------------- | ----------------------- | -------------------------------------- | ----------------------------------------- | ------------------------------------- | ----------------------------------------- | --------- | -------------- | -------- | ------------------- | ---------------------------------------- | ------------------------------------------- | ------------------------------- | ------ | ------------- | ------- | ------------ | 
{{ range data -}}
| {{.estimatedMonthlySavingsAmount}} | {{.accountScope}} | {{.availabilityZone}} | {{.averageNormalizedUnitsUsedPerHour}} | {{.averageNumberOfInstancesUsedPerHour}} | {{.averageUtilization}} | {{.databaseEdition}} | {{.databaseEngine}} | {{.deploymentOption}} | {{.estimatedBreakEvenInMonths}} | {{.estimatedMonthlyOnDemandCost}} | {{.estimatedMonthlySavingsPercentage}} | {{.estimatedReservationCostForLookbackPeriod}} | {{.family}} | {{.instanceClass}} | {{.instanceSize}} | {{.instanceType}} | {{.licenseModel}} | {{.lookbackPeriodInDays}} | {{.maximumNormalizedUnitsUsedPerHour}} | {{.maximumNumberOfInstancesUsedPerHour}} | {{.minimumNormalizedUnitsUsedPerHour}} | {{.minimumNumberOfInstancesUsedPerHour}} | {{.nodeType}} | {{.paymentOption}} | {{.platform}} | {{.productDescription}} | {{.recommendedNormalizedUnitsToPurchase}} | {{.recommendedNumberOfInstancesToPurchase}} | {{.recurringStandardMonthlyCost}} | {{.region}} | {{.sizeFlexEligible}} | {{.tenancy}} | {{.upfrontCost}} |
{{ end -}}


###### Policy Applied in Account: {{ rs_project_name }} (Account ID: {{ rs_project_id }}) within Org: {{ rs_org_name }} (Org ID: {{ rs_org_id }})
EOS
    escalate $email
    check lt(to_n(val(item,"estimatedMonthlySavingsAmount")),$param_savings_threshold)
  end
end

escalation "email" do
   email $param_email
end

name "AWS Reserved Instances Utilization"
rs_pt_ver 20180301
type "policy"
short_description "A policy that sends email notifications when utilization falls below a threshold. See the [README](https://github.com/flexera-public/policy_templates/tree/master/cost/aws/reserved_instances/utilization) and [docs.flexera.com/flexera/EN/Automation](https://docs.flexera.com/flexera/EN/Automation/AutomationGS.htm) to learn more."
long_description ""
severity "high"
category "Cost"
default_frequency "daily"
info(
  version: "2.2",
  provider: "AWS",
  service: "Compute",
  policy_set: "Reserved Instances"
)

###############################################################################
# Parameters
###############################################################################

parameter "param_utilization" do
  category "RI"
  label "Show Reservations with utilization below this value (%)"
  type "number"
  min_value 1
  max_value 100
  default 100
end

parameter "param_email" do
  label "Email addresses of the recipients you wish to notify"
  type "list"
end

parameter "param_billing_centers" do
  label "Billing Center Name"
  description "Filter reservations for a specific Billing Center/s by entering Billing Center names"
  type "list"
  default []
end

###############################################################################
# Authentication
###############################################################################

credentials "auth_flexera" do
  schemes "oauth2"
  label "Flexera"
  description "Select Flexera One OAuth2 credentials"
  tags "provider=flexera"
end

###############################################################################
# Datasources & Scripts
###############################################################################

#GET ALL BILLING CENTERS FOR ORG
datasource "ds_billing_centers" do
  request do
    auth $auth_flexera
    host rs_optima_host
    path join(["/analytics/orgs/", rs_org_id, "/billing_centers"])
    header "Api-Version", "1.0"
    header "User-Agent", "RS Policies"
    query "view", "allocation_table"
  end
  result do
    encoding "json"
    collect jmes_path(response, "[*]") do
      field "href", jmes_path(col_item, "href")
      field "id", jmes_path(col_item, "id")
      field "name", jmes_path(col_item, "name")
      field "parent_id", jmes_path(col_item, "parent_id")
      field "ancestor_ids", jmes_path(col_item,"ancestor_ids")
      field "allocation_table", jmes_path(col_item,"allocation_table")
    end
  end
end

#FILTER USING BILLING CENTERS PARAMETER IF APPLICABLE
datasource "ds_filtered_billing_centers" do
  run_script $js_filter_billing_centers_with_param, $ds_billing_centers, $param_billing_centers
end

script "js_filter_billing_centers_with_param", type: "javascript" do
  parameters "ds_billing_centers", "param_billing_centers"
  result "result"
  code <<-EOS
  //Get billing centers. If user specifies no billing centers, retrieve all billing centers. Else get array of billing centers that match the names stated in BC param
  if (param_billing_centers.length === 0) {
    result = ds_billing_centers
  } else {
		var billing_center_names_ids = _.map(param_billing_centers, function(name) { return name.toLowerCase() })
    var filtered_bcs = _.filter(ds_billing_centers, function(bc) {
			return _.contains(billing_center_names_ids, bc.name.toLowerCase()) || _.contains(billing_center_names_ids, bc.id.toLowerCase())
    })

    //Check that there are no child billing centers specified that conflict with parent billing centers specified
    var bc_ids = _.map(filtered_bcs, function(bc) { return bc.id.toLowerCase() })

		var conflicting_child_bcs = _.filter(filtered_bcs, function(bc) {
      if (!(bc.parent_id == null || bc.parent_id == undefined)) {
        return _.contains(bc_ids, bc.parent_id.toLowerCase())
      }
    })

    if (conflicting_child_bcs != undefined) {
			conflicting_child_bc_ids = _.pluck(conflicting_child_bcs, "id")
			result = _.reject(filtered_bcs, function(bc) {
				return _.contains(conflicting_child_bc_ids, bc.id)
			})
    } else {
			result = filtered_bcs
		}
  }
EOS
end

#GET LIST OF ACCOUNTS FOR BILLING CENTERS
datasource "ds_accounts_by_billing_center" do
  request do
    run_script $js_get_accounts_by_bc, rs_optima_host, rs_org_id, $ds_filtered_billing_centers
  end
  result do
    encoding "json"
    collect jmes_path(response, "rows[*]") do
      field "cost", jmes_path(col_item, "metrics.cost_amortized_unblended_adj")
      field "billing_center_id", jmes_path(col_item, "dimensions.billing_center_id")
      field "vendor_account_id", jmes_path(col_item, "dimensions.vendor_account")
      field "vendor_account_name", jmes_path(col_item, "dimensions.vendor_account_name")
      field "timestamp", jmes_path(col_item, "timestamp")
    end
  end
end

script "js_get_accounts_by_bc", type: "javascript" do
  parameters "rs_optima_host", "org_id", "ds_filtered_billing_centers"
  result "request"
  code <<-EOS
  //Get start and end date for previous month
	var date = new Date()

	var start_date = new Date(date.getFullYear(), date.getMonth(), 1);  // Set to the 1st of the current month
	start_date.setMonth( date.getMonth() - 1 )  // Subtract a month
	var start_month = start_date.toISOString().split("T")[0].split("-")[0] + "-" + start_date.toISOString().split("T")[0].split("-")[1]

	var end_date = new Date(date.getFullYear(), date.getMonth(), 1)  // Set to the 1st of the next month
	var end_month = end_date.toISOString().split("T")[0].split("-")[0] + "-" + end_date.toISOString().split("T")[0].split("-")[1]

  var billing_center_ids = _.pluck(ds_filtered_billing_centers, "id")

  //Dimensions
  var dimensions = [
    "billing_center_id",
    "vendor_account",
    "vendor_account_name"
  ]

  //POST Request
  var request = {
    auth: "auth_flexera",
    verb: "POST",
    host: rs_optima_host,
    path: "/bill-analysis/orgs/" + org_id + "/costs/aggregated",
    body_fields: {
      "dimensions": dimensions,
      "granularity": "month",
      "metrics": [ "cost_amortized_unblended_adj" ],
      "billing_center_ids": billing_center_ids,
      "start_at": start_month,
      "end_at": end_month
    }
  }
EOS
end

#GET LIST OF EXISTING RESERVATIONS
datasource "ds_reservations" do
  request do
    auth $auth_flexera
    host rs_optima_host
    path join(["/reserved_instances/orgs/",rs_org_id,"/clouds/aws"])
  end
  result do
    encoding "json"
    collect jmes_path(response,"[*]") do
      field "utilization_percentage", jmes_path(col_item,"utilization.utilization_percentage")
      field "end_datetime", jmes_path(col_item,"end_datetime")
      field "start_datetime", jmes_path(col_item,"start_datetime")
      field "account_name", jmes_path(col_item,"account_name")
      field "account_id", jmes_path(col_item,"account_id")
      field "region", jmes_path(col_item,"region")
      field "instance_type", jmes_path(col_item,"instance_type")
      field "instance_count", jmes_path(col_item,"number_of_instances")
      field "scope", jmes_path(col_item,"scope")
      field "type", jmes_path(col_item,"offering_type")
    end
  end
end

#FILTER RESERVATIONS BASED ON THEIR ACCOUNT IDS BY MATCHING THEM WITH BILLING CENTER ACCOUNT IDS
datasource "ds_filtered_reservations" do
  run_script $js_filter_reservations_by_bc, $ds_accounts_by_billing_center, $ds_reservations
end

script "js_filter_reservations_by_bc", type: "javascript" do
  parameters "ds_accounts_by_billing_center", "ds_reservations"
  result "result"
  code <<-EOS

  //Filter reservations for billing centers that contain a matching account ID
  var bc_account_ids = _.uniq(_.pluck(ds_accounts_by_billing_center, "vendor_account_id"))
  var filtered_reservations = _.filter(ds_reservations, function(ri) {
    return _.contains(bc_account_ids, ri.account_id);
  })

  result = filtered_reservations
  EOS
end

#ENRICH FILTERED RESERVATION DATA WITH BILLING CENTER DATA
datasource "ds_enriched_reservation_data" do
	run_script $js_enrich_reservation_data_with_bc_data, $ds_filtered_reservations, $ds_accounts_by_billing_center, $ds_filtered_billing_centers
end

script "js_enrich_reservation_data_with_bc_data", type: "javascript" do
	parameters "ds_filtered_reservations", "ds_accounts_by_billing_center", "ds_filtered_billing_centers"
	result "result"
	code <<-EOS
  _.each(ds_filtered_reservations, function(ri) {

    //Get associated billing centers for reservation
    var associated_billing_centers = _.filter(ds_accounts_by_billing_center, function(bc) {
      return bc.vendor_account_id == ri.account_id
    })

    //Get list of associated billing center names and convert the list to a string
    var list_of_associated_bcs_string = ""
    _.each(associated_billing_centers, function(bc) {
      var billing_center_name = ""
      var billing_center_details = _.find(ds_filtered_billing_centers, function(fbc) { return bc.billing_center_id == fbc.id })
      if (billing_center_details != undefined) {
        billing_center_name = billing_center_details.name
      }

      if (list_of_associated_bcs_string == "") {
        list_of_associated_bcs_string = billing_center_name
      } else {
        list_of_associated_bcs_string += ", " + billing_center_name
      }
    })

    //Add list of associated billing center names string to reservation object for policy incident
    ri["billing_centers"] = list_of_associated_bcs_string
  })

  result = ds_filtered_reservations
EOS
end

###############################################################################
# Policy
###############################################################################

policy "pol_ri_utilization" do
  validate_each $ds_enriched_reservation_data do
    summary_template "{{ rs_project_name }} (Account ID: {{ rs_project_id }}): Reserved Instance Utilization"
    escalate $esc_email
    check gt(to_n(val(item,"utilization_percentage")),$param_utilization)
    export do
      resource_level true
      field "region" do
        label "Region"
      end
      field "account_name" do
        label "Account Name"
      end
      field "id" do
        label "Account Id"
        path "account_id"
      end
			field "billing_centers" do
				label "Associated Billing Center(s)"
			end
      field "scope" do
        label "Scope"
      end
      field "type" do
        label "Type"
      end
      field "instance_type" do
        label "Instance Type"
      end
      field "instance_count" do
        label "Instance Count"
      end
      field "utilization_percentage" do
        label "Utilization Percentage"
      end
    end
  end
end

###############################################################################
# Escalations
###############################################################################

escalation "esc_email" do
  automatic true
  label "Send Email"
  description "Send incident email"
  email $param_email
end

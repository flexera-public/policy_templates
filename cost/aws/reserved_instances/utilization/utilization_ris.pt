name "AWS Reserved Instances Utilization"
rs_pt_ver 20180301
type "policy"
short_description "Reports when Reserved Instance utilization falls below a threshold. See the [README](https://github.com/flexera-public/policy_templates/tree/master/cost/aws/reserved_instances/utilization) and [docs.flexera.com/flexera/EN/Automation](https://docs.flexera.com/flexera/EN/Automation/AutomationGS.htm) to learn more."
long_description ""
doc_link "https://github.com/flexera-public/policy_templates/tree/master/cost/aws/reserved_instances/utilization"
severity "high"
category "Cost"
default_frequency "daily"
info(
  version: "3.0.4",
  provider: "AWS",
  service: "Compute",
  policy_set: "Reserved Instances",
  hide_skip_approvals: "true"
)

###############################################################################
# Parameters
###############################################################################

parameter "param_email" do
  type "list"
  category "Policy Settings"
  label "Email Addresses"
  description "Email addresses of the recipients you wish to notify when new incidents are created."
  default []
end

parameter "param_utilization" do
  type "number"
  category "Policy Settings"
  label "Utilization Threshold (%)"
  description "Reservations with utilization below this percentage will be included in the results."
  min_value 1
  max_value 100
  default 100
end

parameter "param_bc_allow_or_deny" do
  type "string"
  category "Filters"
  label "Allow/Deny Billing Centers"
  description "Allow or Deny entered Billing Centers."
  allowed_values "Allow", "Deny"
  default "Allow"
end

parameter "param_billing_centers" do
  type "list"
  category "Filters"
  label "Allow/Deny Billing Center List"
  description "A list of allowed or denied Billing Center names/IDs. Leave blank to report on reservations in all Billing Centers."
  default []
end

###############################################################################
# Authentication
###############################################################################

credentials "auth_flexera" do
  schemes "oauth2"
  label "Flexera"
  description "Select Flexera One OAuth2 credentials"
  tags "provider=flexera"
end

###############################################################################
# Datasources & Scripts
###############################################################################

# Get region-specific Flexera API endpoints
datasource "ds_flexera_api_hosts" do
  run_script $js_flexera_api_hosts, rs_optima_host
end

script "js_flexera_api_hosts", type: "javascript" do
  parameters "rs_optima_host"
  result "result"
  code <<-EOS
  host_table = {
    "api.optima.flexeraeng.com": {
	    api: "api.flexera.com",
      flexera: "api.flexera.com",
      fsm: "api.fsm.flexeraeng.com",
      grs: "grs-front.iam-us-east-1.flexeraeng.com",
      ui: "app.flexera.com",
      tld: "flexera.com"
    },
    "api.optima-eu.flexeraeng.com": {
	    api: "api.flexera.eu",
      flexera: "api.flexera.eu",
      fsm: "api.fsm-eu.flexeraeng.com",
      grs: "grs-front.eu-central-1.iam-eu.flexeraeng.com",
      ui: "app.flexera.eu",
      tld: "flexera.eu"
    },
    "api.optima-apac.flexeraeng.com": {
	    api: "api.flexera.au",
      flexera: "api.flexera.au",
      fsm: "api.fsm-apac.flexeraeng.com",
      grs: "grs-front.ap-southeast-2.iam-apac.flexeraeng.com",
      ui: "app.flexera.au",
      tld: "flexera.au"
    }
  }

  result = host_table[rs_optima_host]
EOS
end

# Get applied policy metadata for use later
datasource "ds_applied_policy" do
  request do
    auth $auth_flexera
    host val($ds_flexera_api_hosts, "flexera")
    path join(["/policy/v1/orgs/", rs_org_id, "/projects/", rs_project_id, "/applied-policies", switch(policy_id, join(["/", policy_id]), "")])
  end
end

datasource "ds_billing_centers" do
  request do
    auth $auth_flexera
    host rs_optima_host
    path join(["/analytics/orgs/", rs_org_id, "/billing_centers"])
    header "Api-Version", "1.0"
    header "User-Agent", "RS Policies"
  end
  result do
    encoding "json"
    collect jmes_path(response, "[*]") do
      field "href", jmes_path(col_item, "href")
      field "id", jmes_path(col_item, "id")
      field "name", jmes_path(col_item, "name")
      field "parent_id", jmes_path(col_item, "parent_id")
    end
  end
end

datasource "ds_billing_centers_filtered" do
  run_script $js_billing_centers_filtered, $ds_billing_centers, $param_bc_allow_or_deny, $param_billing_centers
end

script "js_billing_centers_filtered", type: "javascript" do
  parameters "ds_billing_centers", "param_bc_allow_or_deny", "param_billing_centers"
  result "result"
  code <<-EOS
  allow_deny_test = { "Allow": true, "Deny": false }

  if (param_billing_centers.length > 0) {
    billing_centers = _.filter(ds_billing_centers, function(item) {
      id_found = _.contains(param_billing_centers, item['id']) == allow_deny_test[param_bc_allow_or_deny]
      name_found = _.contains(param_billing_centers, item['name']) == allow_deny_test[param_bc_allow_or_deny]
      return id_found || name_found
    })

    // Check for conflicting parents/children and remove children if present
    bc_ids = _.compact(_.pluck(billing_centers, 'id'))
    bad_children = _.filter(ds_billing_centers, function(bc) { return _.contains(bc_ids, bc['parent_id']) })
    bad_children_ids = _.pluck(bad_children, 'id')

    // Create final result with the bad children removed
    final_list = _.reject(billing_centers, function(bc) { return _.contains(bad_children_ids, bc['id']) })
  } else {
    // If we're not filtering at all, just grab all of the top level billing centers
    final_list = _.filter(ds_billing_centers, function(bc) {
      return bc['parent_id'] == null || bc['parent_id'] == undefined
    })
  }

  result = _.compact(_.pluck(final_list, 'id'))
EOS
end

datasource "ds_accounts_by_billing_center" do
  request do
    run_script $js_accounts_by_billing_center, $ds_billing_centers_filtered, rs_org_id, rs_optima_host
  end
  result do
    encoding "json"
    collect jmes_path(response, "rows[*]") do
      field "cost", jmes_path(col_item, "metrics.cost_amortized_unblended_adj")
      field "billing_center_id", jmes_path(col_item, "dimensions.billing_center_id")
      field "vendor_account_id", jmes_path(col_item, "dimensions.vendor_account")
      field "vendor_account_name", jmes_path(col_item, "dimensions.vendor_account_name")
      field "timestamp", jmes_path(col_item, "timestamp")
    end
  end
end

script "js_accounts_by_billing_center", type: "javascript" do
  parameters "ds_billing_centers_filtered", "rs_org_id", "rs_optima_host"
  result "request"
  code <<-EOS
  start_date = new Date().toISOString()
  start_date = start_date.split('-')[0] + '-' + start_date.split('-')[1]

  end_year = Number(start_date.split('-')[0])
  end_month = Number(start_date.split('-')[1]) + 1
  if (end_month == 13) { end_month = 1; end_year++ }
  if (end_month < 10) { end_month = '0' + end_month.toString() }
  end_date = end_year.toString() + '-' + end_month.toString()

  var request = {
    auth: "auth_flexera",
    verb: "POST",
    host: rs_optima_host,
    path: "/bill-analysis/orgs/" + rs_org_id + "/costs/aggregated",
    body_fields: {
      "dimensions": [ "billing_center_id", "vendor_account", "vendor_account_name" ],
      "granularity": "month",
      "metrics": [ "cost_amortized_unblended_adj" ],
      "billing_center_ids": ds_billing_centers_filtered,
      "start_at": start_date,
      "end_at": end_date
    }
  }
EOS
end

datasource "ds_aws_reservations" do
  request do
    auth $auth_flexera
    host rs_optima_host
    path join(["/reserved_instances/orgs/", rs_org_id, "/clouds/aws"])
  end
  result do
    encoding "json"
    collect jmes_path(response, "[*]") do
      field "end_date", jmes_path(col_item, "end_datetime")
      field "start_date", jmes_path(col_item, "start_datetime")
      field "accountName", jmes_path(col_item, "account_name")
      field "accountID", jmes_path(col_item, "account_id")
      field "id", jmes_path(col_item, "lease_id")
      field "region", jmes_path(col_item, "region")
      field "instanceType", jmes_path(col_item, "instance_type")
      field "instanceCount", jmes_path(col_item, "number_of_instances")
      field "scope", jmes_path(col_item, "scope")
      field "tenancy", jmes_path(col_item, "tenancy")
      field "resourceType", jmes_path(col_item, "offering_type")
      field "purchased_hours", jmes_path(col_item, "utilization.purchased_hours")
      field "total_actual_hours", jmes_path(col_item, "utilization.total_actual_hours")
      field "unused_hours", jmes_path(col_item, "utilization.unused_hours")
      field "utilization", jmes_path(col_item, "utilization.utilization_percentage")
    end
  end
end

datasource "ds_filtered_aws_reservations" do
  run_script $js_filtered_aws_reservations, $ds_accounts_by_billing_center, $ds_aws_reservations
end

script "js_filtered_aws_reservations", type: "javascript" do
  parameters "ds_accounts_by_billing_center", "ds_aws_reservations"
  result "result"
  code <<-EOS
  bc_account_ids = _.uniq(_.pluck(ds_accounts_by_billing_center, "vendor_account_id"))

  result = _.filter(ds_aws_reservations, function(ri) {
    return _.contains(bc_account_ids, ri['accountID'])
  })
EOS
end

datasource "ds_account_list" do
  run_script $js_account_list, $ds_accounts_by_billing_center, $ds_billing_centers
end

script "js_account_list", type: "javascript" do
  parameters "ds_accounts_by_billing_center", "ds_billing_centers"
  result "result"
  code <<-EOS
  bc_object = {}

  _.each(ds_billing_centers, function(bc) { bc_object[bc['id']] = bc['name'] })

  result = {}

  _.each(ds_accounts_by_billing_center, function(account) {
    if (result[account['vendor_account_id']] == undefined) {
      result[account['vendor_account_id']] = []
    }

    result[account['vendor_account_id']].push(bc_object[account['billing_center_id']])
  })
EOS
end

datasource "ds_underutil_reservations" do
  run_script $js_underutil_reservations, $ds_filtered_aws_reservations, $ds_account_list, $ds_applied_policy, $param_utilization
end

script "js_underutil_reservations", type: "javascript" do
  parameters "ds_filtered_aws_reservations", "ds_account_list", "ds_applied_policy", "param_utilization"
  result "result"
  code <<-'EOS'
  underutil_ris = _.filter(ds_filtered_aws_reservations, function(ri) {
    return ri['utilization'] < param_utilization
  })

  result = _.map(underutil_ris, function(ri) {
    billing_centers = ""

    if (ds_account_list[ri['accountID']] != undefined) {
      billing_centers = ds_account_list[ri['accountID']].join(', ')
    }

    return {
      accountID: ri['accountID'],
      accountName: ri['accountName'],
      id: ri['id'],
      purchased_hours: Math.round(ri['purchased_hours'] * 100) / 100,
      total_actual_hours: Math.round(ri['total_actual_hours'] * 100) / 100,
      unused_hours: Math.round(ri['unused_hours'] * 100) / 100,
      utilization: Math.round(ri['utilization'] * 100) / 100,
      end_date: ri['end_date'],
      start_date: ri['start_date'],
      region: ri['region'],
      instanceType: ri['instanceType'],
      instanceCount: ri['instanceCount'],
      scope: ri['scope'],
      tenancy: ri['tenancy'],
      resourceType: ri['resourceType'],
      billing_centers: billing_centers,
      policy_name: ds_applied_policy['name'],
      threshold: param_utilization,
      message: ""
    }
  })

  result = _.sortBy(result, 'utilization')

  // Message for incident output
  if (result.length > 0) {
    total_ris = ds_filtered_aws_reservations.length.toString()
    total_underutil_ris = result.length.toString()
    underutil_ris_percentage = (total_underutil_ris / total_ris * 100).toFixed(2).toString() + '%'

    ri_verb = "have"
    if (total_underutil_ris == 1) { ri_verb = "has" }

    result[0]['message'] = [
      "Out of ", total_ris, " AWS Reservations analyzed, ",
      total_underutil_ris, " (", underutil_ris_percentage,
      ") ", ri_verb, " less than ", param_utilization, "% utilization.\n\n",
      "The above settings can be modified by editing the applied policy and ",
      "changing the appropriate parameters."
    ].join('')
  }
EOS
end

###############################################################################
# Policy
###############################################################################

policy "pol_ri_utilization" do
  validate_each $ds_underutil_reservations do
    summary_template "{{ with index data 0 }}{{ .policy_name }}{{ end }}: {{ len data }} AWS Underutilized Reservations Found"
    detail_template "{{ with index data 0 }}{{ .message }}{{ end }}"
    check eq(val(item, "instanceType"), "")
    escalate $esc_email
    export do
      resource_level true
      field "accountID" do
        label "Account ID"
      end
      field "accountName" do
        label "Account Name"
      end
      field "billing_centers" do
        label "Associated Billing Center(s)"
      end
      field "id" do
        label "Lease ID"
      end
      field "region" do
        label "Region"
      end
      field "scope" do
        label "Scope"
      end
      field "tenancy" do
        label "Tenancy"
      end
      field "resourceType" do
        label "Type"
      end
      field "start_date" do
        label "Start Date"
      end
      field "end_date" do
        label "End Date"
      end
      field "instanceType" do
        label "Instance Type"
      end
      field "instanceCount" do
        label "Instance Count"
      end
      field "utilization" do
        label "Utilization (%)"
      end
      field "purchased_hours" do
        label "Purchased Hours"
      end
      field "total_actual_hours" do
        label "Actual Hours"
      end
      field "unused_hours" do
        label "Unused Hours"
      end
      field "threshold" do
        label "Utilization Threshold (%)"
      end
    end
  end
end

###############################################################################
# Escalations
###############################################################################

escalation "esc_email" do
  automatic true
  label "Send Email"
  description "Send incident email"
  email $param_email
end

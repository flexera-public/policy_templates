name "AWS Superseded Instance Remediation"
rs_pt_ver 20180301
type "policy"
short_description "This Policy Template is used to automatically resize AWS Instances based on user-defined standards. \n See the [README](https://github.com/rightscale/policy_templates/tree/master/cost/aws/aws_superseded_instance) and [docs.rightscale.com/policies](http://docs.rightscale.com/policies/) to learn more."
long_description "Version: 1.0"
category "Cost"
severity "low"

###############################################################################
# Permissions
###############################################################################

permission "perm_instances" do
  label "Permissions for instances"
  actions "rs_cm.index", "rs_cm.show"
  resources "rs_cm.instances"
end

###############################################################################
# Parameters
###############################################################################

parameter "param_email" do
  type "list"
  label "Email addresses"
  description "Email addresses of the recipients you wish to notify"
end

parameter "param_old_instance_type" do
  label "Disallowed Instance Type"
  type "string"
  description "Old Instance Type"
end

parameter "param_new_instance_type" do
  label "Superseded Instance Type"
  type "string"
  description "New Instance Type"
end

parameter "param_exclude_tags" do
  label "Exclude Tags"
  description "list of excluded servers"
  type "list"
end

###############################################################################
# Authentication
###############################################################################

auth "auth_rs", type: "rightscale"

###############################################################################
# Resources
###############################################################################

resources "clouds", type: "rs_cm.clouds" do
  filter do
    cloud_type "amazon"
  end
end

resources "instances", type: "rs_cm.instances" do
  iterate @clouds  
  cloud_href href(iter_item)
  tags none($param_exclude_tags)
  view 'extended'
end

resources "instance_types", type: "rs_cm.instance_types" do
  iterate @clouds  
  cloud_href href(iter_item)
end

###############################################################################
# Datasources
###############################################################################
datasource "ds_clouds" do
  iterate @clouds
  field "href", href(iter_item)
  field "name", val(iter_item, "display_name")
end

datasource "ds_instances" do
  iterate @instances
  field "resource_uid", val(iter_item,  "resource_uid")
  field "name", val(iter_item, "name")
  field "href", href(iter_item)
  field "cloud_href", jmes_path(iter_item, "links[?rel=='cloud'].href | [0]")
  field "instance_type_href", jmes_path(iter_item, "links[?rel=='instance_type'].href | [0]")
  field "locked", jmes_path(iter_item,"locked")
  field "state", jmes_path(iter_item,"state")
end

datasource "ds_instance_types" do
  iterate @instance_types
  field "resource_uid", val(iter_item,  "resource_uid")
  field "cloud_href", jmes_path(iter_item, "links[?rel=='cloud'].href | [0]")
  field "instance_type_href", jmes_path(iter_item, "links[?rel=='self'].href | [0]")
  field "memory", jmes_path(iter_item,"memory")
  field "cpu_count", jmes_path(iter_item,"cpu_count")
  field "local_disks", jmes_path(iter_item, "local_disks")
  field "local_disk_size", jmes_path(iter_item, "local_disk_size")
end


datasource "ds_combined_instance_data" do
  run_script $js_merge_instance_data, $ds_instances, $ds_instance_types, $ds_clouds, $param_old_instance_type
end

###############################################################################
# Scripts
###############################################################################

script "js_merge_instance_data", type: "javascript" do
  parameters "ds_instances", "ds_instance_types", "ds_clouds", "param_old_instance_type"
  result "results"
  code <<-EOS
    var results = []
    for ( i=0; i < ds_instances.length; i++) {
      var instance = ds_instances[i]
      if ( _.contains(['provisioned','operational'],instance["state"]) ) {
        var ds_instance_type_href = instance.instance_type_href
        var cloud_href = instance.cloud_href
        var instance_types = _.reject(ds_instance_types, function(ds_instance_type){ return ds_instance_type.instance_type_href != ds_instance_type_href });
        var cloud = _.reject(ds_clouds, function(ds_cloud){ return ds_cloud.href != cloud_href })
        var instance_type = instance_types[0].resource_uid
        var locked = 0
        if ( instance["locked"] ) { var locked = 1}

        if ( instance_type == param_old_instance_type ) {
          results.push(
            {
              resource_uid: instance["resource_uid"],
              name: instance["name"],
              href: instance["href"],
              cloud_href: instance["cloud_href"],
              cloud: cloud[0].name,
              locked: locked
            }
          )
        }
      }
    }
  EOS
end

###############################################################################
# Escalations
###############################################################################
escalation "report_and_resize_instances" do
  request_approval  do
    label "Escalation approval"
    description "Approve delete action"
    parameter "approval_reason" do
      type "string"
      label "Reason for approval"
      description "Explain why you are approving the action"
    end
  end

  run "resize_instances", data, $param_new_instance_type
  email $param_email
end

resolution "report_and_resize_instances_resolution" do
  email $param_email
end

###############################################################################
# Policy
###############################################################################

policy "pol_aws_superseded_instance" do
  validate_each $ds_combined_instance_data do
    summary_template "{{ rs_project_name }} (Account ID: {{ rs_project_id }}): {{ len data }} Instances will be resized from {{ parameters.param_old_instance_type }} to {{ parameters.param_new_instance_type }}"
    detail_template <<-EOS
# AWS Superseded Instances
| Resource_uid | Name | Cloud |
| ------------ | ---- | ----- |
{{ range data -}}
| {{ .resource_uid }} | {{ .name }} | {{ .cloud}} |
{{ end -}}
___
###### Policy Applied in Account: {{ rs_project_name }} (Account ID: {{ rs_project_id }}) within Org: {{ rs_org_name }} (Org ID: {{ rs_org_id }})
EOS
    check eq(to_n(val(item,"locked")),1)
    escalate $report_and_resize_instances
  end
end

###############################################################################
# Cloud Workflow
###############################################################################

define resize_instances($data,$param_new_instance_type) do
  foreach $item in $data do
    call sys_log("resizing instance", $item)
    @instance = rs_cm.get(href: $item["href"])
    @current_server = @instance.parent()
    task_label("stopping instance")
    @instance.stop()
    task_label("sleeping until instance stopped")
    sleep_until(@current_server.state == 'provisioned')
    @current_instance = @current_server.current_instance()
    @cloud = @current_instance.cloud()
    @new_instance_type = first(@cloud.instance_types(filter: ["name=="+$param_new_instance_type]))
    @current_instance.update(instance: { instance_type_href: @new_instance_type.href })
    task_label("sleeping until instance started")
    @current_instance.start()
    sleep_until(@current_instance.state == 'operational')
    task_label("Instance Started")
  end
end

define sys_log($subject, $detail) do
  if $$debug
    rs_cm.audit_entries.create(
      notify: "None",
      audit_entry: {
        auditee_href: @@account,
        summary: $subject,
        detail: $detail
      }
    )
  end
end
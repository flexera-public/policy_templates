name "AWS Bucket Size Check"
rs_pt_ver 20180301
type "policy"
short_description "This Policy Template scans all S3 buckets in the given account and checks if the bucket exceeds a specified byte size. See the [README](https://github.com/flexera/policy_templates/tree/master/cost/aws/s3_bucket_size) and [docs.rightscale.com/policies] (https://docs.rightscale.com/policies/) to learn more."
long_description ""
severity "medium"
category "Cost"
info(
  version: "2.0",
  provider: "AWS",
  service: "S3",
  policy_set: ""
)

###############################################################################
# Permissions
###############################################################################

permission "perm_read_creds" do
  actions   "rs_cm.show_sensitive","rs_cm.index_sensitive"
  resources "rs_cm.credentials"
end

parameter "param_email" do
  type "list"
  label "Email Address"
  description "Email addresses of the recipients you wish to notify"
end

parameter "param_size" do
  type "string"
  label "Byte Size Threshold"
  description "Byte size to check (eg: 1000000000 = 1GB)"
end

###############################################################################
# Authentication
###############################################################################

#authenticate with AWS
credentials "auth_aws" do
  schemes "aws","aws_sts"
  label "AWS"
  description "Select the AWS Credential from the list"
  tags "provider=aws"
end

###############################################################################
# Datasources
###############################################################################

# Reference: https://docs.aws.amazon.com/AmazonS3/latest/API/RESTServiceGET.html
datasource "aws_buckets" do
  # This request is not paginated
  request do
    auth $auth_aws
    host "s3.amazonaws.com"
    path "/"
    header "User-Agent", "RS Policies"
  end
  result do
    encoding "xml"
    collect xpath(response, "//ListAllMyBucketsResult/Buckets/Bucket", "array") do
      field "bucket_name", xpath(col_item, "Name")
      field "creation_date", xpath(col_item, "CreationDate")
    end
  end
end

datasource "aws_buckets_with_region" do
  iterate $aws_buckets
  request do
    auth $auth_aws
    host "s3-external-1.amazonaws.com"
    path join(["/", val(iter_item, "bucket_name")])
    query "location", ""
    header "User-Agent", "RS Policies"
  end
  result do
    encoding "xml"
    field "bucket_name", val(iter_item, "bucket_name")
    field "creation_date", val(iter_item, "creation_date")
    field "region", xpath(response, "//LocationConstraint")
  end
end

datasource "aws_sanitized_buckets" do
  run_script $parse_buckets, $aws_buckets_with_region
end

script "parse_buckets", type: "javascript" do
  parameters "buckets"
  result "results"
  code <<-EOS
results = []
for ( i = 0; i < buckets.length; i++ ) {
  if ( !buckets[i]["region"] ){
    results.push(
    {
      "bucket_name": buckets[i]["bucket_name"],
      "creation_date": buckets[i]["creation_date"],
      "region": "us-east-1",
      "host": "s3-external-1.amazonaws.com",
      "auth": "auth_aws"
    }
    )
  } else {
    if ( buckets[i]["region"] == "EU" ) { buckets[i]["region"] = "eu-west-1" }
    results.push(
    {
      "bucket_name": buckets[i]["bucket_name"],
      "creation_date": buckets[i]["creation_date"],
      "region": buckets[i]["region"],
      "host": "s3-" + buckets[i]["region"] + ".amazonaws.com"
    }
    )
  }
};
EOS
end

datasource "aws_bucket_sizes" do
  iterate $aws_sanitized_buckets
  request do
    run_script $aws_bucket_sizes_request, val(iter_item, "bucket_name"), val(iter_item, "region")
  end
  result do
    encoding "json"
    collect jmes_path(response, "GetMetricStatisticsResponse.GetMetricStatisticsResult.Datapoints[*]") do
      field "bucket_name", val(iter_item, "bucket_name")
      field "region", val(iter_item, "region")
      field "maximum", jmes_path(col_item, "Maximum")
      field "minimum", jmes_path(col_item, "Minimum")
      field "average", jmes_path(col_item, "Average")
    end
  end
end

script "aws_bucket_sizes_request", type: "javascript" do
  parameters "bucket_name", "region"
  result "request"
  code <<-EOS
  var end_date = new Date().toISOString()
  var start_date = new Date(new Date().setDate(new Date().getDate() - 30)).toISOString();
  request = {
    "auth": "auth_aws",
    "host": 'monitoring.'+region+'.amazonaws.com',
    "verb": "GET",
    "path": "/",
    "headers": {
      "User-Agent": "RS Policies",
      "Content-Type": "application/json",
      "x-amz-target": "GraniteServiceVersion20100801.GetMetricStatistics",
      "Accept": "application/json",
      "Content-Encoding": "amz-1.0"
    }
    "query_params": {
      'Action': 'GetMetricStatistics',
      'Version': '2010-08-01',
      'Namespace': 'AWS/S3',
      'MetricName': 'BucketSizeBytes',
      'Dimensions.member.1.Name': 'BucketName',
      'Dimensions.member.1.Value': bucket_name,
      'Dimensions.member.2.Name': 'StorageType',
      'Dimensions.member.2.Value': 'StandardStorage', 
      'StartTime': start_date,
      'EndTime': end_date,
      'Period': "2592000",
      'Statistics.member.1': 'Maximum',
      'Statistics.member.2': 'Average',
      'Statistics.member.3': 'Minimum'
    }
  }  
  EOS
end

datasource "aws_oversized_buckets" do
  run_script $check_for_oversized_buckets, $aws_bucket_sizes, $param_size
end

script "check_for_oversized_buckets", type: "javascript" do
  parameters "buckets", "paramsize2check"
  result "results"
  code <<-EOS

  function bytesToSize(bytes) {
    var sizes = ["Bytes", "KB", "MB", "GB", "TB"]
    if (bytes === 0) return 'n/a'
    var i = parseInt(Math.floor(Math.log(bytes) / Math.log(1000)), 10)
	if (i >= 4) {
	  var size = 4
	} else {
	  var size = i
	}
	
    if (i === 0) return bytes + " " + sizes[size]
    return ( bytes / Math.pow(1000, i) ).toFixed(1) + " " + sizes[size]
  }

  results = []

  for(var i = 0; i < buckets.length; i++) {
    var bucket = buckets[i]
    var bucket_name = bucket["bucket_name"]
	var avg_size = bucket["average"]
	if (avg_size > paramsize2check) {
	  avg_size = bytesToSize(avg_size)
      results.push (
        {
	      "bucket_name": bucket_name,
	      "average": avg_size
	    }
	  )
    }
  }
EOS
end

policy "aws_oversized_buckets" do
  validate $aws_oversized_buckets do
    escalate $send_email_report

    summary_template "{{ rs_project_name }} (Account ID: {{ rs_project_id }}): {{ len data }} Oversized Buckets Found in AWS"
    detail_template <<-EOF
# Oversized Buckets Found in AWS
EOF
    export do
      field "bucket_name" do
        label "Bucket Name"
      end
      field "average" do
        label "Bucket Size Average"
      end
    end


    #check if empty
    check eq(size(data), 0)
  end
end

escalation "send_email_report" do
  email $param_email
end
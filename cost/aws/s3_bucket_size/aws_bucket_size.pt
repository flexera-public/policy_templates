name "AWS Oversized S3 Buckets"
rs_pt_ver 20180301
type "policy"
short_description "This Policy Template scans all AWS S3 buckets in the given account and checks if the bucket exceeds a specified byte size. See the [README](https://github.com/flexera-public/policy_templates/tree/master/cost/aws/s3_bucket_size) and [docs.flexera.com/flexera/EN/Automation](https://docs.flexera.com/flexera/EN/Automation/AutomationGS.htm) to learn more."
long_description ""
doc_link "https://github.com/flexera-public/policy_templates/tree/master/cost/aws/s3_bucket_size"
category "Cost"
severity "medium"
default_frequency "weekly"
info(
  version: "3.1.3",
  provider: "AWS",
  service: "Storage",
  policy_set: "",
  hide_skip_approvals: "true"
)

###############################################################################
# Parameters
###############################################################################

parameter "param_email" do
  type "list"
  category "Policy Settings"
  label "Email Addresses"
  description "A list of email addresses to notify."
  default []
end

parameter "param_aws_account_number" do
  type "string"
  category "Policy Settings"
  label "Account Number"
  description "Leave blank; this is for automated use with Meta Policies. See README for more details."
  default ""
end

parameter "param_size_threshold" do
  type "number"
  category "Policy Settings"
  label "Size Threshold (GiB)"
  description "The number of GiB of space a bucket needs to exceed to include it in the results. Binary gibibytes (e.g. 1,073,741,824 bytes in a gibibyte) are used to maintain parity with how AWS S3 storage is billed."
  min_value 0
  default 100
end

parameter "param_exclusion_tags" do
  type "list"
  category "Filters"
  label "Exclusion Tags"
  description "Cloud native tags to ignore resources that you don't want to produce recommendations for. Enter the Key name to filter resources with a specific Key, regardless of Value, and enter Key==Value to filter resources with a specific Key:Value pair. Other operators and regex are supported; please see the README for more details."
  default []
end

parameter "param_exclusion_tags_boolean" do
  type "string"
  category "Filters"
  label "Exclusion Tags: Any / All"
  description "Whether to filter instances containing any of the specified tags or only those that contain all of them. Only applicable if more than one value is entered in the 'Exclusion Tags' field."
  allowed_values "Any", "All"
  default "Any"
end

parameter "param_regions_allow_or_deny" do
  type "string"
  category "Filters"
  label "Allow/Deny Regions"
  description "Allow or Deny entered regions. See the README for more details"
  allowed_values "Allow", "Deny"
  default "Allow"
end

parameter "param_regions_list" do
  type "list"
  category "Filters"
  label "Allow/Deny Regions List"
  description "A list of allowed or denied regions. See the README for more details"
  allowed_pattern /^([a-zA-Z-_]+-[a-zA-Z0-9-_]+-[0-9-_]+,*|)+$/
  default []
end

###############################################################################
# Authentication
###############################################################################

credentials "auth_aws" do
  schemes "aws", "aws_sts"
  label "AWS"
  description "Select the AWS Credential from the list"
  tags "provider=aws"
  aws_account_number $param_aws_account_number
end

credentials "auth_flexera" do
  schemes "oauth2"
  label "Flexera"
  description "Select Flexera One OAuth2 credentials"
  tags "provider=flexera"
end

###############################################################################
# Datasources & Scripts
###############################################################################

## Get applied policy metadata for use later
datasource "ds_applied_policy" do
  request do
    auth $auth_flexera
    host rs_governance_host
    path join(["/api/governance/projects/", rs_project_id, "/applied_policies/", policy_id])
    header "Api-Version", "1.0"
  end
end

# Get region-specific Flexera API endpoints
datasource "ds_flexera_api_hosts" do
  run_script $js_flexera_api_hosts, rs_optima_host
end

script "js_flexera_api_hosts", type: "javascript" do
  parameters "rs_optima_host"
  result "result"
  code <<-EOS
  host_table = {
    "api.optima.flexeraeng.com": {
      flexera: "api.flexera.com",
      fsm: "api.fsm.flexeraeng.com"
    },
    "api.optima-eu.flexeraeng.com": {
      flexera: "api.flexera.eu",
      fsm: "api.fsm-eu.flexeraeng.com"
    },
    "api.optima-apac.flexeraeng.com": {
      flexera: "api.flexera.au",
      fsm: "api.fsm-apac.flexeraeng.com"
    }
  }

  result = host_table[rs_optima_host]
EOS
end

# Get AWS account info
datasource "ds_cloud_vendor_accounts" do
  request do
    auth $auth_flexera
    host val($ds_flexera_api_hosts, 'flexera')
    path join(["/finops-analytics/v1/orgs/", rs_org_id, "/cloud-vendor-accounts"])
    header "Api-Version", "1.0"
  end
  result do
    encoding "json"
    collect jmes_path(response, "values[*]") do
      field "id", jmes_path(col_item, "aws.accountId")
      field "name", jmes_path(col_item, "name")
      field "tags", jmes_path(col_item, "tags")
    end
  end
end

datasource "ds_get_caller_identity" do
  request do
    auth $auth_aws
    host "sts.amazonaws.com"
    path "/"
    query "Action", "GetCallerIdentity"
    query "Version", "2011-06-15"
    header "User-Agent", "RS Policies"
  end
  result do
    encoding "xml"
    collect xpath(response, "//GetCallerIdentityResponse/GetCallerIdentityResult") do
      field "account", xpath(col_item, "Account")
    end
  end
end

datasource "ds_aws_account" do
  run_script $js_aws_account, $ds_cloud_vendor_accounts, $ds_get_caller_identity
end

script "js_aws_account", type:"javascript" do
  parameters "ds_cloud_vendor_accounts", "ds_get_caller_identity"
  result "result"
  code <<-EOS
  result = _.find(ds_cloud_vendor_accounts, function(account) {
    return account['id'] == ds_get_caller_identity[0]['account']
  })

  // This is in case the API does not return the relevant account info
  if (result == undefined) {
    result = {
      id: ds_get_caller_identity[0]['account'],
      name: "",
      tags: {}
    }
  }
EOS
end

datasource "ds_get_aws_buckets" do
  request do
    auth $auth_aws
    host "s3.amazonaws.com"
    path "/"
    header "User-Agent", "RS Policies"
    # Header X-Meta-Flexera has no affect on datasource query, but is required for Meta Policies
    # Forces `ds_is_deleted` datasource to run first during policy execution
    header "Meta-Flexera", val($ds_is_deleted, "path")
  end
  result do
    encoding "xml"
    collect xpath(response, "//ListAllMyBucketsResult/Buckets/Bucket", "array") do
      field "name", xpath(col_item, "Name")
      field "creation_date", xpath(col_item, "CreationDate")
    end
  end
end

datasource "ds_aws_buckets_with_region" do
  iterate $ds_get_aws_buckets
  request do
    auth $auth_aws
    host "s3.amazonaws.com"
    path join(["/", val(iter_item, "name")])
    query "location", ""
  end
  result do
    encoding "xml"
    field "region", xpath(response, "//LocationConstraint")
    field "name", val(iter_item, "name")
    field "creation_date", val(iter_item, "creation_date")
  end
end

datasource "ds_aws_buckets_sanitized" do
  run_script $js_aws_buckets_sanitized, $ds_aws_buckets_with_region
end

script "js_aws_buckets_sanitized", type: "javascript" do
  parameters "ds_aws_buckets_with_region"
  result "result"
  code <<-'EOS'
  result = _.map(ds_aws_buckets_with_region, function(bucket) {
    if (typeof(bucket['region']) != 'string' || bucket['region'] == '' || bucket['region'] == 'us-east-1') {
      region = 'us-east-1'
      host = 's3.amazonaws.com'
    } else if (bucket['region'] == 'EU') {
      region = 'eu-west-1'
      host = 's3-eu-west-1.amazonaws.com'
    } else {
      region = bucket['region'].toLowerCase().trim()
      host = 's3-' + region + '.amazonaws.com'
    }

    return {
      name: bucket['name'],
      creation_date: bucket['creation_date'],
      region: region,
      host: host
    }
  })
EOS
end

datasource "ds_aws_buckets_region_filtered" do
  run_script $js_aws_buckets_region_filtered, $ds_aws_buckets_sanitized, $param_regions_allow_or_deny, $param_regions_list
end

script "js_aws_buckets_region_filtered", type: "javascript" do
  parameters "ds_aws_buckets_sanitized", "param_regions_allow_or_deny", "param_regions_list"
  result "result"
  code <<-EOS
  if (param_regions_list.length > 0) {
    result = _.filter(ds_aws_buckets_with_region, function(bucket) {
      include_bucket = _.contains(param_regions_list, bucket['region'])

      if (param_regions_allow_or_deny == "Deny") {
        include_bucket = !include_bucket
      }

      return include_bucket
    })
  } else {
    result = ds_aws_buckets_sanitized
  }
EOS
end

datasource "ds_aws_buckets_with_tags" do
  iterate $ds_aws_buckets_region_filtered
  request do
    auth $auth_aws
    host val(iter_item, "host")
    path join(["/", val(iter_item, "name")])
    query "tagging", ""
    # Buckets with no tags cause a 404 response so we ignore that
    ignore_status [404]
  end
  result do
    encoding "xml"
    field "name", val(iter_item, "name")
    field "region", val(iter_item, "region")
    field "creation_date", val(iter_item, "creation_date")
    field "tags" do
      collect xpath(response, "//Tagging/TagSet/Tag", "array") do
        field "key", xpath(col_item, "Key")
        field "value", xpath(col_item, "Value")
      end
    end
  end
end

datasource "ds_aws_buckets_tag_filtered" do
  run_script $js_aws_buckets_tag_filtered, $ds_aws_buckets_with_tags, $ds_aws_buckets_region_filtered, $param_exclusion_tags, $param_exclusion_tags_boolean
end

script "js_aws_buckets_tag_filtered", type: "javascript" do
  parameters "ds_aws_buckets_with_tags", "ds_aws_buckets_region_filtered", "param_exclusion_tags", "param_exclusion_tags_boolean"
  result "result"
  code <<-EOS
  // Logic to ensure any buckets skipped because of a 404 response due to no tags
  // are still included in the final result
  tagged_bucket_list = _.map(ds_aws_buckets_with_tags, function(bucket) {
    return bucket['name'] + '___' + bucket['region']
  })

  tagless_buckets = _.reject(ds_aws_buckets_region_filtered, function(bucket) {
    return _.contains(tagged_bucket_list, bucket['name'] + '___' + bucket['region'])
  })

  aws_buckets = ds_aws_buckets_with_tags.concat(tagless_buckets)

  comparators = _.map(param_exclusion_tags, function(item) {
    if (item.indexOf('==') != -1) {
      return { comparison: '==', key: item.split('==')[0], value: item.split('==')[1], string: item }
    }

    if (item.indexOf('!=') != -1) {
      return { comparison: '!=', key: item.split('!=')[0], value: item.split('!=')[1], string: item }
    }

    if (item.indexOf('=~') != -1) {
      value = item.split('=~')[1]
      regex = new RegExp(value.slice(1, value.length - 1))
      return { comparison: '=~', key: item.split('=~')[0], value: regex, string: item }
    }

    if (item.indexOf('!~') != -1) {
      value = item.split('!~')[1]
      regex = new RegExp(value.slice(1, value.length - 1))
      return { comparison: '!~', key: item.split('!~')[0], value: regex, string: item }
    }

    // If = is present but none of the above are, assume user error and that the user intended ==
    if (item.indexOf('=') != -1) {
      return { comparison: '==', key: item.split('=')[0], value: item.split('=')[1], string: item }
    }

    // Assume we're just testing for a key if none of the comparators are found
    return { comparison: 'key', key: item, value: null, string: item }
  })

  if (param_exclusion_tags.length > 0) {
    result = _.filter(aws_buckets, function(bucket) {
      resource_tags = {}

      if (typeof(resource['tags']) == 'object') {
        _.each(resource['tags'], function(tag) {
          resource_tags[tag['key']] = tag['value']
        })
      }

      // Store a list of found tags
      found_tags = []

      _.each(comparators, function(comparator) {
        comparison = comparator['comparison']
        value = comparator['value']
        string = comparator['string']
        resource_tag = resource_tags[comparator['key']]

        if (comparison == 'key' && resource_tag != undefined) { found_tags.push(string) }
        if (comparison == '==' && resource_tag == value) { found_tags.push(string) }
        if (comparison == '!=' && resource_tag != value) { found_tags.push(string) }

        if (comparison == '=~') {
          if (resource_tag != undefined && value.test(resource_tag)) { found_tags.push(string) }
        }

        if (comparison == '!~') {
          if (resource_tag == undefined) { found_tags.push(string) }
          if (resource_tag != undefined && value.test(resource_tag)) { found_tags.push(string) }
        }
      })

      all_tags_found = found_tags.length == comparators.length
      any_tags_found = found_tags.length > 0 && param_exclusion_tags_boolean == 'Any'

      return all_tags_found || any_tags_found
    })
  } else {
    result = aws_buckets
  }
EOS
end

datasource "ds_cloudwatch_queries" do
  run_script $js_cloudwatch_queries, $ds_aws_buckets_tag_filtered
end

script "js_cloudwatch_queries", type: "javascript" do
  parameters "ds_aws_buckets_tag_filtered"
  result "result"
  code <<-'EOS'
  // Create the various queries we're going to send to CloudWatch for each instance
  result = {}

  _.each(ds_aws_buckets_tag_filtered, function(bucket) {
    // Make sure the queries object has an array for the region to push items to
    if (result[bucket['region']] == undefined || result[bucket['region']] == null) {
      result[bucket['region']] = []
    }

    result[bucket['region']].push({
      "Id": bucket['name'].replace(/-/g, "_"),
      "MetricStat": {
        "Metric": {
          "Namespace": "AWS/S3",
          "MetricName": "BucketSizeBytes",
          "Dimensions": [
            { "Name": "BucketName", "Value": bucket['name'] },
            { "Name": "StorageType", "Value": "StandardStorage" }
          ]
        },
        "Period": 2592000,
        "Stat": "Average",
        "Unit": "Bytes"
      },
      "ReturnData": true
    })
  })
EOS
end

# Combine queries into 500 item blocks so we can make bulk requests to Cloudwatch
datasource "ds_cloudwatch_requests" do
  run_script $js_cloudwatch_requests, $ds_cloudwatch_queries
end

script "js_cloudwatch_requests", type: "javascript" do
  parameters "ds_cloudwatch_queries"
  result "result"
  code <<-EOS
  // Organize the queries into discrete requests to send in.
  // Queries are first sorted by region and then split into 500 item blocks.
  result = []
  query_block_size = 500

  // Round down to beginning of the hour to avoid getting multiple values
  // from CloudWatch due to how the data is sliced
  end_date = new Date()
  end_date.setMinutes(0, 0, 0)
  end_date = parseInt(end_date.getTime() / 1000)

  start_date = new Date()
  start_date.setDate(start_date.getDate() - 30)
  start_date.setMinutes(0, 0, 0)
  start_date = parseInt(start_date.getTime() / 1000)

  _.each(_.keys(ds_cloudwatch_queries), function(region) {
    for (i = 0; i < ds_cloudwatch_queries[region].length; i += query_block_size) {
      chunk = ds_cloudwatch_queries[region].slice(i, i + query_block_size)

      result.push({
        body: {
          "StartTime": start_date,
          "EndTime": end_date,
          "MetricDataQueries": chunk
        },
        region: region
      })
    }
  })
EOS
end

datasource "ds_cloudwatch_data" do
  iterate $ds_cloudwatch_requests
  request do
    run_script $js_cloudwatch_data, val(iter_item, "region"), val(iter_item, "body")
  end
  result do
    encoding "json"
    collect jmes_path(response, "MetricDataResults[*]") do
      field "region", val(iter_item, "region")
      field "id", jmes_path(col_item, "Id")
      field "label", jmes_path(col_item, "Label")
      field "values", jmes_path(col_item, "Values")
    end
  end
end

script "js_cloudwatch_data", type: "javascript" do
  parameters "region", "body"
  result "request"
  code <<-EOS
  // Slow down rate of requests to prevent
  api_wait = 5
  var now = new Date().getTime()
  while(new Date().getTime() < now + (api_wait * 1000)) { /* Do nothing */ }

  var request = {
    auth: "auth_aws",
    host: 'monitoring.' + region + '.amazonaws.com',
    pagination: "pagination_aws_getmetricdata",
    verb: "POST",
    path: "/",
    headers: {
      "User-Agent": "RS Policies",
      "Content-Type": "application/json",
      "x-amz-target": "GraniteServiceVersion20100801.GetMetricData",
      "Accept": "application/json",
      "Content-Encoding": "amz-1.0"
    }
    query_params: {
      'Action': 'GetMetricData',
      'Version': '2010-08-01'
    },
    body: JSON.stringify(body)
  }
EOS
end

datasource "ds_cloudwatch_data_sorted" do
  run_script $js_cloudwatch_data_sorted, $ds_cloudwatch_data
end

script "js_cloudwatch_data_sorted", type: "javascript" do
  parameters "ds_cloudwatch_data"
  result "result"
  code <<-'EOS'
  // Sort the CloudWatch data into an object with keys for regions and instance names.
  // This eliminates the need to "double loop" later on to match it with our instances list.
  result = {}

  _.each(ds_cloudwatch_data, function(item) {
    region = item['region']
    name = item['id'].replace(/_/g, "-")

    // Grabbing index 0 SHOULD be safe because we should only get one result.
    // Just in case AWS slices the data weirdly and returns 2 results, we make
    // sure we grab the last item every time, which contains the actual data we need.
    value = item['values'][item['values'].length - 1]

    if (result[region] == undefined) { result[region] = {} }
    result[region][name] = value
  })
EOS
end

datasource "ds_aws_oversized_buckets" do
  run_script $js_aws_oversized_buckets, $ds_aws_buckets_tag_filtered, $ds_cloudwatch_data_sorted, $ds_aws_account, $ds_applied_policy, $param_size_threshold
end

script "js_aws_oversized_buckets", type: "javascript" do
  parameters "ds_aws_buckets_tag_filtered", "ds_cloudwatch_data_sorted", "ds_aws_account", "ds_applied_policy", "param_size_threshold"
  result "result"
  code <<-EOS
  // Convert user-specified threshold to bytes
  size_threshold = param_size_threshold * 1073741824

  oversized_buckets = _.filter(ds_aws_buckets_tag_filtered, function(bucket) {
    oversized = false
    name = bucket['name']
    region = bucket['region']

    if (ds_cloudwatch_data_sorted[region] && ds_cloudwatch_data_sorted[region][name]) {
      oversized = ds_cloudwatch_data_sorted[region][name] > size_threshold
    }

    return oversized
  })

  result = _.map(oversized_buckets, function(bucket) {
    tags = []

    if (bucket['tags'] != undefined && bucket['tags'] != null) {
      tags = _.map(bucket['tags'], function(tag) { return [tag['key'], tag['value']].join('=') })
    }

    name = bucket['name']
    region = bucket['region']

    return {
      resourceID: name,
      name: name,
      region: region,
      tags: tags.join(', '),
      creation_date: new Date(bucket['creation_date']).toISOString(),
      threshold: param_size_threshold,
      // Convert size from bytes to GiB
      size: Math.round(ds_cloudwatch_data_sorted[region][name] / 1073741824 * 100) / 100,
      accountID: ds_aws_account['id'],
      accountName: ds_aws_account['name'],
      policy_name: ds_applied_policy['name'],
      service: "AmazonS3"
    }
  })

  // Dummy entry to ensure validation always occurs
  result.push({ resourceID: "", tags: "", policy_name: "" })
EOS
end

###############################################################################
# Policy
###############################################################################

policy "pol_aws_oversized_buckets" do
  validate_each $ds_aws_oversized_buckets do
    summary_template "{{ with index data 0 }}{{ .policy_name }}{{ end }}: {{ len data }} AWS Oversized S3 Buckets Found"
    # Policy check fails and incident is created only if data is not empty and the Parent Policy has not been terminated
    check logic_or($ds_parent_policy_terminated, eq(val(item, "resourceID"), ""))
    escalate $esc_email
    hash_exclude "tags"
    export do
      resource_level true
      field "accountID" do
        label "Account ID"
      end
      field "accountName" do
        label "Account Name"
      end
      field "resourceID" do
        label "Bucket Name"
      end
      field "tags" do
        label "Bucket Tags"
      end
      field "region" do
        label "Region"
      end
      field "creation_date" do
        label "Creation Date"
      end
      field "size" do
        label "Bucket Size (GiB)"
      end
      field "service" do
        label "Service"
      end
      field "threshold" do
        label "Size Threshold (GiB)"
      end
      field "id" do
        label "ID"
        path "resourceID"
      end
    end
  end
end

###############################################################################
# Escalations
###############################################################################

escalation "esc_email" do
  automatic true
  label "Send Email"
  description "Send incident email"
  email $param_email
end

###############################################################################
# Meta Policy [alpha]
# Not intended to be modified or used by policy developers
###############################################################################

# If the meta_parent_policy_id is not set it will evaluate to an empty string and we will look for the policy itself,
# if it is set we will look for the parent policy.
datasource "ds_get_policy" do
  request do
    auth $auth_flexera
    host rs_governance_host
    ignore_status [404]
    path join(["/api/governance/projects/", rs_project_id, "/applied_policies/", switch(ne(meta_parent_policy_id, ""), meta_parent_policy_id, policy_id)])
    header "Api-Version", "1.0"
  end
  result do
    encoding "json"
    field "id", jmes_path(response, "id")
  end
end

datasource "ds_parent_policy_terminated" do
  run_script $js_decide_if_self_terminate, $ds_get_policy, policy_id, meta_parent_policy_id
end

# If the policy was applied by a meta_parent_policy we confirm it exists if it doesn't we confirm we are deleting
# This information is used in two places:
# - determining whether or not we make a delete call
# - determining if we should create an incident (we don't want to create an incident on the run where we terminate)
script "js_decide_if_self_terminate", type: "javascript" do
  parameters "found", "self_policy_id", "meta_parent_policy_id"
  result "result"
  code <<-EOS
  var result
  if (meta_parent_policy_id != "" && found.id == undefined) {
    result = true
  } else {
    result = false
  }
  EOS
end

# Two potentials ways to set this up:
# - this way and make a unneeded 'get' request when not deleting
# - make the delete request an interate and have it iterate over an empty array when not deleting and an array with one item when deleting
script "js_make_terminate_request", type: "javascript" do
  parameters "should_delete", "policy_id", "rs_project_id", "rs_governance_host"
  result "request"
  code <<-EOS

  var request = {
    auth:  'auth_flexera',
    host: rs_governance_host,
    path: "/api/governance/projects/" + rs_project_id + "/applied_policies/" + policy_id,
    headers: {
      "API-Version": "1.0",
      "Content-Type":"application/json"
    },
  }

  if (should_delete) {
    request.verb = 'DELETE'
  }
  EOS
end

datasource "ds_terminate_self" do
  request do
    run_script $js_make_terminate_request, $ds_parent_policy_terminated, policy_id, rs_project_id, rs_governance_host
  end
end

datasource "ds_is_deleted" do
  run_script $js_check_deleted, $ds_terminate_self
end

# This is just a way to have the check delete request connect to the farthest leaf from policy.
# We want the delete check to the first thing the policy does to avoid the policy erroring before it can decide whether or not it needs to self terminate
# Example a customer deletes a credential and then terminates the parent policy. We still want the children to self terminate
# The only way I could see this not happening is if the user who applied the parent_meta_policy was offboarded or lost policy access, the policies who are impersonating the user
# would not have access to self-terminate
# It may be useful for the backend to enable a mass terminate at some point for all meta_child_policies associated with an id.
script "js_check_deleted", type: "javascript" do
  parameters "response"
  result "result"
  code <<-EOS
  result = {"path":"/"}
  EOS
end

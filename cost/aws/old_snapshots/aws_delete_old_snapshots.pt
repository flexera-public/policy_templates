name "AWS Old Snapshots"
rs_pt_ver 20180301
type "policy"
short_description "Checks for snapshots older than a specified number of days and, optionally, deletes them. See the [README](https://github.com/flexera-public/policy_templates/tree/master/cost/aws/old_snapshots) and [docs.flexera.com/flexera/EN/Automation](https://docs.flexera.com/flexera/EN/Automation/AutomationGS.htm) to learn more."
long_description ""
doc_link "https://github.com/flexera-public/policy_templates/tree/master/cost/aws/old_snapshots"
category "Cost"
severity "low"
default_frequency "weekly"
info(
  version: "8.5.0",
  provider: "AWS",
  service: "Storage",
  policy_set: "Old Snapshots",
  recommendation_type: "Usage Reduction",
  hide_skip_approvals: "true"
)

###############################################################################
# Parameters
###############################################################################

parameter "param_email" do
  type "list"
  category "Policy Settings"
  label "Email addresses to notify"
  description "A list of email addresses to notify."
  default []
end

parameter "param_aws_account_number" do
  type "string"
  category "Policy Settings"
  label "Account Number"
  description "Leave blank; this is for automated use with Meta Policies. See README for more details."
  default ""
end

parameter "param_snapshot_age" do
  type "number"
  category "Policy Settings"
  label "Snapshot Age Threshold"
  description "The number of days since the snapshot was created to consider a snapshot old."
  min_value 1
  default 30
end

parameter "param_snapshot_include_ami" do
  type "string"
  category "Policy Settings"
  label "Include Snapshots with AMI"
  description "Whether or not to produce recommendations for snapshots with an associated registered AMI (Amazon Machine Image)."
  allowed_values "Yes", "No"
  default "No"
end

parameter "param_min_savings" do
  type "number"
  category "Policy Settings"
  label "Minimum Savings Threshold"
  description "Minimum potential savings required to generate a recommendation."
  min_value 0
  default 0
end

parameter "param_regions_allow_or_deny" do
  type "string"
  category "Filters"
  label "Allow/Deny Regions"
  description "Allow or Deny entered regions. See the README for more details."
  allowed_values "Allow", "Deny"
  default "Allow"
end

parameter "param_regions_list" do
  type "list"
  category "Filters"
  label "Allow/Deny Regions List"
  description "A list of allowed or denied regions. See the README for more details."
  allowed_pattern /^([a-zA-Z-_]+-[a-zA-Z0-9-_]+-[0-9-_]+,*|)+$/
  default []
end

parameter "param_exclusion_services" do
  type "list"
  category "Filters"
  label "Exclusion Service Types"
  description "Exclude the selected services. If left blank, all services will be analyzed."
  allowed_values ["EC2", "RDS"]
  default []
end

parameter "param_exclusion_description" do
  type "list"
  category "Filters"
  label "Exclusion EC2 Snapshot Description"
  description "Exclude EC2 snapshots with the provided descriptions. If left blank, all EC2 snapshots will be analyzed. This setting has no effect on RDS snapshots."
  default []
end

parameter "param_exclusion_types" do
  type "list"
  category "Filters"
  label "Exclusion RDS Snapshot Types"
  description "Exclude the selected RDS snapshot types. If left blank, all types will be analyzed. This setting has no effect on EC2 snapshots."
  allowed_values ["Manual", "Automated", "Shared", "Public", "AWS Backup"]
  default []
end

parameter "param_exclusion_tags" do
  type "list"
  category "Filters"
  label "Exclusion Tags"
  description "Cloud native tags to ignore resources that you don't want to produce recommendations for. Enter the Key name to filter resources with a specific Key, regardless of Value, and enter Key==Value to filter resources with a specific Key:Value pair. Other operators and regex are supported; please see the README for more details."
  default []
end

parameter "param_exclusion_tags_boolean" do
  type "string"
  category "Filters"
  label "Exclusion Tags: Any / All"
  description "Whether to filter instances containing any of the specified tags or only those that contain all of them. Only applicable if more than one value is entered in the 'Exclusion Tags' field."
  allowed_values "Any", "All"
  default "Any"
end

parameter "param_automatic_action" do
  type "list"
  category "Actions"
  label "Automatic Actions"
  description "When this value is set, this policy will automatically take the selected action."
  allowed_values ["Delete Snapshots"]
  default []
end

###############################################################################
# Authentication
###############################################################################

credentials "auth_aws" do
  schemes "aws", "aws_sts"
  label "AWS"
  description "Select the AWS Credential from the list"
  tags "provider=aws"
  aws_account_number $param_aws_account_number
end

credentials "auth_flexera" do
  schemes "oauth2"
  label "Flexera"
  description "Select Flexera One OAuth2 credentials"
  tags "provider=flexera"
end

###############################################################################
# Pagination
###############################################################################

pagination "pagination_aws" do
  get_page_marker do
    body_path jmes_path(response, "NextToken")
  end
  set_page_marker do
    body_field "NextToken"
  end
end

pagination "pagination_aws_describeimages_xml" do
  get_page_marker do
    body_path "//DescribeImagesResponse/nextToken"
  end
  set_page_marker do
    query "NextToken"
  end
end

pagination "pagination_aws_describe_db_snapshots_xml" do
  get_page_marker do
    body_path "//DescribeDBSnapshotsResponse/DescribeDBSnapshotsResult/Marker"
  end
  set_page_marker do
    query "Marker"
  end
end

pagination "pagination_aws_describe_db_cluster_snapshots_xml" do
  get_page_marker do
    body_path "//DescribeDBClusterSnapshotsResponse/DescribeDBClusterSnapshotsResult/Marker"
  end
  set_page_marker do
    query "Marker"
  end
end

###############################################################################
# Datasources & Scripts
###############################################################################

# Get applied policy metadata for use later
datasource "ds_applied_policy" do
  request do
    auth $auth_flexera
    host rs_governance_host
    path join(["/api/governance/projects/", rs_project_id, "/applied_policies/", policy_id])
    header "Api-Version", "1.0"
  end
end

# Get region-specific Flexera API endpoints
datasource "ds_flexera_api_hosts" do
  run_script $js_flexera_api_hosts, rs_optima_host
end

script "js_flexera_api_hosts", type: "javascript" do
  parameters "rs_optima_host"
  result "result"
  code <<-EOS
  host_table = {
    "api.optima.flexeraeng.com": {
      flexera: "api.flexera.com",
      fsm: "api.fsm.flexeraeng.com"
    },
    "api.optima-eu.flexeraeng.com": {
      flexera: "api.flexera.eu",
      fsm: "api.fsm-eu.flexeraeng.com"
    },
    "api.optima-apac.flexeraeng.com": {
      flexera: "api.flexera.au",
      fsm: "api.fsm-apac.flexeraeng.com"
    }
  }

  result = host_table[rs_optima_host]
EOS
end

# Get AWS account info
datasource "ds_cloud_vendor_accounts" do
  request do
    auth $auth_flexera
    host val($ds_flexera_api_hosts, 'flexera')
    path join(["/finops-analytics/v1/orgs/", rs_org_id, "/cloud-vendor-accounts"])
    header "Api-Version", "1.0"
  end
  result do
    encoding "json"
    collect jmes_path(response, "values[*]") do
      field "id", jmes_path(col_item, "aws.accountId")
      field "name", jmes_path(col_item, "name")
      field "tags", jmes_path(col_item, "tags")
    end
  end
end

datasource "ds_get_caller_identity" do
  request do
    auth $auth_aws
    host "sts.amazonaws.com"
    path "/"
    query "Action", "GetCallerIdentity"
    query "Version", "2011-06-15"
    header "User-Agent", "RS Policies"
  end
  result do
    encoding "xml"
    collect xpath(response, "//GetCallerIdentityResponse/GetCallerIdentityResult") do
      field "account", xpath(col_item, "Account")
    end
  end
end

datasource "ds_aws_account" do
  run_script $js_aws_account, $ds_cloud_vendor_accounts, $ds_get_caller_identity
end

script "js_aws_account", type:"javascript" do
  parameters "ds_cloud_vendor_accounts", "ds_get_caller_identity"
  result "result"
  code <<-EOS
  result = _.find(ds_cloud_vendor_accounts, function(account) {
    return account['id'] == ds_get_caller_identity[0]['account']
  })

  // This is in case the API does not return the relevant account info
  if (result == undefined) {
    result = {
      id: ds_get_caller_identity[0]['account'],
      name: "",
      tags: {}
    }
  }
EOS
end

datasource "ds_billing_centers" do
  request do
    auth $auth_flexera
    host rs_optima_host
    path join(["/analytics/orgs/", rs_org_id, "/billing_centers"])
    query "view", "allocation_table"
    header "Api-Version", "1.0"
    header "User-Agent", "RS Policies"
    ignore_status [403]
  end
  result do
    encoding "json"
    collect jmes_path(response, "[*]") do
      field "href", jmes_path(col_item, "href")
      field "id", jmes_path(col_item, "id")
      field "name", jmes_path(col_item, "name")
      field "parent_id", jmes_path(col_item, "parent_id")
    end
  end
end

# Gather top level billing center IDs for when we pull cost data
datasource "ds_top_level_bcs" do
  run_script $js_top_level_bcs, $ds_billing_centers
end

script "js_top_level_bcs", type: "javascript" do
  parameters "ds_billing_centers"
  result "result"
  code <<-EOS
  filtered_bcs = _.filter(ds_billing_centers, function(bc) {
    return bc['parent_id'] == null || bc['parent_id'] == undefined
  })

  result = _.compact(_.pluck(filtered_bcs, 'id'))
EOS
end

datasource "ds_currency_reference" do
  request do
    host "raw.githubusercontent.com"
    path "/flexera-public/policy_templates/master/data/currency/currency_reference.json"
    header "User-Agent", "RS Policies"
  end
end

datasource "ds_currency_code" do
  request do
    auth $auth_flexera
    host rs_optima_host
    path join(["/bill-analysis/orgs/", rs_org_id, "/settings/currency_code"])
    header "Api-Version", "0.1"
    header "User-Agent", "RS Policies"
    ignore_status [403]
  end
  result do
    encoding "json"
    field "id", jmes_path(response, "id")
    field "value", jmes_path(response, "value")
  end
end

datasource "ds_currency" do
  run_script $js_currency, $ds_currency_reference, $ds_currency_code
end

script "js_currency", type:"javascript" do
  parameters "ds_currency_reference", "ds_currency_code"
  result "result"
  code <<-EOS
  symbol = "$"
  separator = ","

  if (ds_currency_code['value'] != undefined) {
    if (ds_currency_reference[ds_currency_code['value']] != undefined) {
      symbol = ds_currency_reference[ds_currency_code['value']]['symbol']

      if (ds_currency_reference[ds_currency_code['value']]['t_separator'] != undefined) {
        separator = ds_currency_reference[ds_currency_code['value']]['t_separator']
      } else {
        separator = ""
      }
    }
  }

  result = {
    symbol: symbol,
    separator: separator
  }
EOS
end

datasource "ds_describe_regions" do
  request do
    auth $auth_aws
    host "ec2.amazonaws.com"
    path "/"
    query "Action", "DescribeRegions"
    query "Version", "2016-11-15"
    query "Filter.1.Name", "opt-in-status"
    query "Filter.1.Value.1", "opt-in-not-required"
    query "Filter.1.Value.2", "opted-in"
    # Header X-Meta-Flexera has no affect on datasource query, but is required for Meta Policies
    # Forces `ds_is_deleted` datasource to run first during policy execution
    header "Meta-Flexera", val($ds_is_deleted, "path")
  end
  result do
    encoding "xml"
    collect xpath(response, "//DescribeRegionsResponse/regionInfo/item", "array") do
      field "region", xpath(col_item, "regionName")
    end
  end
end

datasource "ds_regions" do
  run_script $js_regions, $ds_describe_regions, $param_regions_list, $param_regions_allow_or_deny
end

script "js_regions", type:"javascript" do
  parameters "ds_describe_regions", "param_regions_list", "param_regions_allow_or_deny"
  result "result"
  code <<-EOS
  allow_deny_test = { "Allow": true, "Deny": false }

  if (param_regions_list.length > 0) {
    result = _.filter(ds_describe_regions, function(item) {
      return _.contains(param_regions_list, item['region']) == allow_deny_test[param_regions_allow_or_deny]
    })
  } else {
    result = ds_describe_regions
  }
EOS
end

datasource "ds_describe_snapshots" do
  iterate $ds_regions
  request do
    run_script $js_describe_snapshots, val(iter_item, "region"), $ds_aws_account
  end
  result do
    encoding "xml"
    collect xpath(response, "//DescribeSnapshotsResponse/snapshotSet/item", "array") do
      field "tags" do
        collect xpath(col_item, "tagSet/item") do
          field "key", xpath(col_item, "key")
          field "value", xpath(col_item, "value")
        end
      end
      field "region", val(iter_item, "region")
      field "snapshotId", xpath(col_item, "snapshotId")
      field "parentId", xpath(col_item, "volumeId")
      field "startTime", xpath(col_item, "startTime")
      field "ownerId", xpath(col_item, "ownerId")
      field "size", xpath(col_item, "volumeSize")
      field "description", xpath(col_item, "description")
      field "snapshotType", ""
      field "service", "EC2"
      field "parentType", "EBS Volume"
    end
  end
end

script "js_describe_snapshots", type: "javascript" do
  parameters "region", "ds_aws_account"
  result "result"
  code <<-EOS
  result = {
    auth: "auth_aws",
    host: "ec2." + region + ".amazonaws.com",
    path: "/",
    pagination: "aws_pagination_describesnapshots_xml",
    headers: {
      "User-Agent": "RS Policies",
      "Content-Type": "text/xml"
    },
    query_params: {
      'Action': 'DescribeSnapshots',
      'Version': '2016-11-15',
      'Filter.1.Name': 'status',
      'Filter.1.Value.1': 'completed',
      'Filter.2.Name': 'owner-id',
      'Filter.2.Value.1': ds_aws_account['id']
    }
  }
EOS
end

datasource "ds_describe_db_snapshots_unfiltered" do
  iterate $ds_regions
  request do
    auth $auth_aws
    pagination $pagination_aws_describe_db_snapshots_xml
    host join(["rds.", val(iter_item, "region"), ".amazonaws.com"])
    path "/"
    query "Action", "DescribeDBSnapshots"
    query "Version", "2014-10-31"
    header "User-Agent", "RS Policies"
    header "Content-Type", "text/xml"
    ignore_status [403, 404]
  end
  result do
    encoding "xml"
    collect xpath(response, "//DescribeDBSnapshotsResponse/DescribeDBSnapshotsResult/DBSnapshots/DBSnapshot", "array") do
      field "tags" do
        collect xpath(col_item, "TagList/Tag", "array") do
          field "key", xpath(col_item, "Key")
          field "value", xpath(col_item, "Value")
        end
      end
      field "region", val(iter_item, "region")
      field "snapshotId", xpath(col_item, "DBSnapshotIdentifier")
      field "startTime", xpath(col_item, "SnapshotCreateTime")
      field "parentId", xpath(col_item, "DBInstanceIdentifier")
      field "size", xpath(col_item, "AllocatedStorage")
      field "engine", xpath(col_item, "Engine")
      field "engineVersion", xpath(col_item, "EngineVersion")
      field "snapshotType", xpath(col_item, "SnapshotType")
      field "description", ""
      field "service", "RDS"
      field "parentType", "DB Instance"
    end
  end
end

datasource "ds_describe_db_snapshots" do
  run_script $js_describe_db_snapshots, $ds_describe_db_snapshots_unfiltered
end

script "js_describe_db_snapshots", type:"javascript" do
  parameters "ds_describe_db_snapshots_unfiltered"
  result "result"
  code <<-EOS
  result = []
  sorted_by_parent = {}

  _.each(ds_describe_db_snapshots_unfiltered, function(snapshot) {
    parent = snapshot["parentId"]

    if (sorted_by_parent[parent] == undefined) { sorted_by_parent[parent] = [] }
    sorted_by_parent[parent].push(snapshot)
  })

  _.each(_.keys(sorted_by_parent), function(parent) {
    sorted_parents = _.sortBy(sorted_by_parent[parent], "startTime").reverse()
    sorted_parents.forEach(function(snapshot) {
          result.push(snapshot);
    });
  })
EOS
end

datasource "ds_describe_db_cluster_snapshots" do
  iterate $ds_regions
  request do
    auth $auth_aws
    pagination $pagination_aws_describe_db_cluster_snapshots_xml
    host join(["rds.", val(iter_item, "region"), ".amazonaws.com"])
    path "/"
    query "Action", "DescribeDBClusterSnapshots"
    query "Version", "2014-10-31"
    header "User-Agent", "RS Policies"
    header "Content-Type", "text/xml"
    ignore_status [403, 404]
  end
  result do
    encoding "xml"
    collect xpath(response, "//DescribeDBClusterSnapshotsResponse/DescribeDBClusterSnapshotsResult/DBClusterSnapshots/DBClusterSnapshot", "array") do
      field "tags" do
        collect xpath(col_item, "TagList/Tag", "array") do
          field "key", xpath(col_item, "Key")
          field "value", xpath(col_item, "Value")
        end
      end
      field "region", val(iter_item, "region")
      field "snapshotId", xpath(col_item, "DBClusterSnapshotIdentifier")
      field "startTime", xpath(col_item, "SnapshotCreateTime")
      field "parentId", xpath(col_item, "DBClusterIdentifier")
      field "size", xpath(col_item, "AllocatedStorage")
      field "engine", xpath(col_item, "Engine")
      field "snapshotType", xpath(col_item, "SnapshotType")
      field "description", ""
      field "service", "RDS"
      field "parentType", "DB Cluster"
    end
  end
end

datasource "ds_snapshots_combined" do
  run_script $js_snapshots_combined, $ds_describe_snapshots, $ds_describe_db_snapshots, $ds_describe_db_cluster_snapshots, $param_exclusion_tags, $param_exclusion_tags_boolean, $param_exclusion_types, $param_exclusion_description, $param_exclusion_services
end

script "js_snapshots_combined", type: "javascript" do
  parameters "ds_describe_snapshots", "ds_describe_db_snapshots", "ds_describe_db_cluster_snapshots", "param_exclusion_tags", "param_exclusion_tags_boolean", "param_exclusion_types", "param_exclusion_description", "param_exclusion_services"
  result "result"
  code <<-EOS
  comparators = _.map(param_exclusion_tags, function(item) {
    if (item.indexOf('==') != -1) {
      return { comparison: '==', key: item.split('==')[0], value: item.split('==')[1], string: item }
    }

    if (item.indexOf('!=') != -1) {
      return { comparison: '!=', key: item.split('!=')[0], value: item.split('!=')[1], string: item }
    }

    if (item.indexOf('=~') != -1) {
      value = item.split('=~')[1]
      regex = new RegExp(value.slice(1, value.length - 1))
      return { comparison: '=~', key: item.split('=~')[0], value: regex, string: item }
    }

    if (item.indexOf('!~') != -1) {
      value = item.split('!~')[1]
      regex = new RegExp(value.slice(1, value.length - 1))
      return { comparison: '!~', key: item.split('!~')[0], value: regex, string: item }
    }

    // If = is present but none of the above are, assume user error and that the user intended ==
    if (item.indexOf('=') != -1) {
      return { comparison: '==', key: item.split('=')[0], value: item.split('=')[1], string: item }
    }

    // Assume we're just testing for a key if none of the comparators are found
    return { comparison: 'key', key: item, value: null, string: item }
  })

  combined = ds_describe_snapshots.concat(ds_describe_db_snapshots, ds_describe_db_cluster_snapshots)

  combined_tag_filtered = _.reject(combined, function(resource) {
    resource_tags = {}

    if (typeof(resource['tags']) == 'object') {
      _.each(resource['tags'], function(tag) {
        resource_tags[tag['key']] = tag['value']
      })
    }

    // Store a list of found tags
    found_tags = []

    _.each(comparators, function(comparator) {
      comparison = comparator['comparison']
      value = comparator['value']
      string = comparator['string']
      resource_tag = resource_tags[comparator['key']]

      if (comparison == 'key' && resource_tag != undefined) { found_tags.push(string) }
      if (comparison == '==' && resource_tag == value) { found_tags.push(string) }
      if (comparison == '!=' && resource_tag != value) { found_tags.push(string) }

      if (comparison == '=~') {
        if (resource_tag != undefined && value.test(resource_tag)) { found_tags.push(string) }
      }

      if (comparison == '!~') {
        if (resource_tag == undefined) { found_tags.push(string) }
        if (resource_tag != undefined && value.test(resource_tag)) { found_tags.push(string) }
      }
    })

    filtering_by_tag = param_exclusion_tags.length > 0
    all_tags_found = found_tags.length == comparators.length
    any_tags_found = found_tags.length > 0 && param_exclusion_tags_boolean == 'Any'

    return filtering_by_tag && (all_tags_found || any_tags_found)
  })

  result = _.reject(combined_tag_filtered, function(snapshot) {
    exclude_snapshot = false

    _.each(param_exclusion_types, function(exclusion_type) {
      if (snapshot['snapshotType'] == exclusion_type.toLowerCase().replace(' ', '') && snapshot['service'] == "RDS") {
        exclude_snapshot = true
      }
    })

    _.each(param_exclusion_description, function(exclusion_desc) {
      if (snapshot['description'] == exclusion_desc && snapshot['service'] == "EC2") {
        exclude_snapshot = true
      }
    })

    _.each(param_exclusion_services, function(service) {
      if (snapshot['service'] == service) {
        exclude_snapshot = true
      }
    })

    return exclude_snapshot
  })
EOS
end

datasource "ds_filter_old_snapshots" do
  run_script $js_filter_old_snapshots, $ds_snapshots_combined, $param_snapshot_age
end

script "js_filter_old_snapshots", type: "javascript" do
  parameters "ds_snapshots_combined", "param_snapshot_age"
  result "result"
  code <<-EOS
  result = []

  _.each(ds_snapshots_combined, function(snapshot) {
    tags = []
    name = ""

    if (snapshot['tags'] != null && snapshot['tags'] != undefined) {
      _.each(snapshot['tags'], function(tag) {
        tags.push([tag['key'], tag['value']].join('='))

        if (tag['key'].toLowerCase() == 'name') {
          name = tag['value']
        }
      })
    }

    snapshotTime = Date.parse(snapshot['startTime'])
    age = Math.round((new Date().getTime() - new Date(snapshotTime).getTime()) / (1000 * 3600 * 24))

    if (age > param_snapshot_age) {
      result.push({
        snapshotId: snapshot['snapshotId'],
        region: snapshot['region'],
        description: snapshot['description'],
        snapshotType: snapshot['snapshotType'],
        tags: tags.join(', '),
        age: age,
        service: snapshot['service'],
        parentId: snapshot['parentId'],
        parentType: snapshot['parentType'],
        size: snapshot['size'],
        name: name
      })
    }
  })
EOS
end

datasource "ds_get_snapshot_ami" do
  iterate $ds_regions
  request do
    auth $auth_aws
    pagination $pagination_aws_describeimages_xml
    host join(["ec2.", val(iter_item, "region"), ".amazonaws.com"])
    path "/"
    query "Action", "DescribeImages"
    query "Version", "2016-11-15"
    query "Filter.1.Name", "owner-id"
    query "Filter.1.Value.1", val($ds_aws_account, 'id')
    header "User-Agent", "RS Policies"
    header "Content-Type", "text/xml"
    ignore_status [403, 404]
  end
  result do
    encoding "xml"
    collect xpath(response, "//DescribeImagesResponse/imagesSet/item", "array") do
      field "region", val(iter_item, "region")
      field "imageId", xpath(col_item, "imageId")
      field "ownerId", xpath(col_item, "ownerId")
      field "snapshotIds", xpath(col_item, "blockDeviceMapping/item/*//snapshotId", "array")
    end
  end
end

datasource "ds_filter_ami_snapshots" do
  run_script $js_filter_ami_snapshots, $ds_get_snapshot_ami, $ds_filter_old_snapshots, $ds_aws_account, $param_snapshot_include_ami
end

script "js_filter_ami_snapshots", type: "javascript" do
  parameters "ds_get_snapshot_ami", "ds_filter_old_snapshots", "ds_aws_account", "param_snapshot_include_ami"
  result "result"
  code <<-EOS
  var result = []

  _.each(ds_filter_old_snapshots, function(snapshot) {
    snapshotId = snapshot['snapshotId']
    imageId = ""

    // Find the associated AMI if it exists and store its ID in imageId
    ami = _.find(ds_get_snapshot_ami, function(ami) {
      return _.contains(ami['snapshotIds'], snapshotId)
    })

    if (ami != undefined) { imageId = ami['imageId'] }

    // formatSnapId is used to map this resource to the resource ID returned by Flexera cost API
    if (snapshot['parentType'] == "EBS Volume") {
      formatSnapId = "snapshot/" + snapshot['snapshotId']
    }

    if (snapshot['parentType'] == "DB Instance") {
      formatSnapId = "db:" + snapshot['parentId']
    }

    if (snapshot['parentType'] == "DB Cluster") {
      formatSnapId = "cluster-snapshot:" + snapshot['snapshotId']
    }

    if (imageId == "" || param_snapshot_include_ami == "Yes") {
      result.push({
        snapshotId: snapshotId,
        formatSnapId: formatSnapId,
        description: snapshot['description'],
        snapshotType: snapshot['snapshotType'],
        region: snapshot['region'],
        tags: snapshot['tags'],
        age: snapshot['age'],
        service: snapshot['service'],
        accountID: ds_aws_account['id'],
        accountName: ds_aws_account['name'],
        imageId: imageId,
        parentId: snapshot['parentId'],
        parentType: snapshot['parentType'],
        size: snapshot['size'],
        name: snapshot['name']
      })
    }
  })
EOS
end

datasource "ds_snapshot_costs" do
  request do
    run_script $js_snapshot_costs, $ds_aws_account, $ds_top_level_bcs, rs_org_id, rs_optima_host
  end
  result do
    encoding "json"
    collect jmes_path(response, "rows[*]") do
      field "resource_id", jmes_path(col_item, "dimensions.resource_id")
      field "vendorAccountName", jmes_path(col_item, "dimensions.vendor_account_name")
      field "cost", jmes_path(col_item, "metrics.cost_amortized_unblended_adj")
    end
  end
end

script "js_snapshot_costs", type: "javascript" do
  parameters "ds_aws_account", "ds_top_level_bcs", "rs_org_id", "rs_optima_host"
  result "request"
  code <<-EOS
  //Get Start and End dates
  start_date = new Date()
  start_date.setDate(start_date.getDate() - 3)
  start_date = start_date.toISOString().split("T")[0]

  end_date = new Date()
  end_date.setDate(end_date.getDate() - 2)
  end_date = end_date.toISOString().split("T")[0]

  var request = {
    auth: "auth_flexera",
    host: rs_optima_host,
    verb: "POST",
    path: "/bill-analysis/orgs/" + rs_org_id + "/costs/select",
    body_fields: {
      "dimensions": ["resource_id", "vendor_account_name"],
      "granularity": "day",
      "start_at": start_date,
      "end_at": end_date,
      "metrics": ["cost_amortized_unblended_adj"],
      "billing_center_ids": ds_top_level_bcs,
      "limit": 100000,
      "filter": {
        "type": "and",
        "expressions": [
          {
            "type": "or",
            "expressions": [
              { "type": "equal", "dimension": "service", "value": "AmazonRDS" },
              { "type": "equal", "dimension": "service", "value": "AmazonEC2" }
            ]
          },
          {
            "dimension": "resource_type",
            "type": "equal",
            "value": "Storage Snapshot"
          },
          {
            "dimension": "vendor_account",
            "type": "equal",
            "value": ds_aws_account['id']
          },
          {
            type: "not",
            expression: {
              dimension: "adjustment_name",
              type: "substring",
              substring: "Shared"
            }
          }
        ]
      }
    },
    headers: {
      "User-Agent": "RS Policies",
      "Api-Version": "1.0"
    },
    ignore_status: [400]
  }
EOS
end

datasource "ds_snapshot_costs_grouped" do
  run_script $js_snapshot_costs_grouped, $ds_snapshot_costs
end

script "js_snapshot_costs_grouped", type: "javascript" do
  parameters "ds_snapshot_costs"
  result "result"
  code <<-EOS
  // Multiple a single day's cost by the average number of days in a month.
  // The 0.25 is to account for leap years for extra precision.
  cost_multiplier = 365.25 / 12

  // Group cost data by resourceId for later use
  result = {}

  _.each(ds_snapshot_costs, function(item) {
    id = item['resource_id'].toLowerCase()

    if (result[id] == undefined) { result[id] = 0.0 }
    result[id] += item['cost'] * cost_multiplier
  })
EOS
end

datasource "ds_snapshots_cost_mapping" do
  run_script $js_snapshots_cost_mapping, $ds_filter_ami_snapshots, $ds_snapshot_costs_grouped, $ds_snapshots_combined, $ds_currency, $ds_applied_policy, $ds_aws_account, $param_min_savings, $param_snapshot_age, $param_snapshot_include_ami
end

script "js_snapshots_cost_mapping", type: "javascript" do
  parameters "ds_filter_ami_snapshots", "ds_snapshot_costs_grouped", "ds_snapshots_combined", "ds_currency", "ds_applied_policy", "ds_aws_account", "param_min_savings", "param_snapshot_age", "param_snapshot_include_ami"
  result "result"
  code <<-'EOS'
  // Function for formatting currency numbers later
  function formatNumber(number, separator) {
    formatted_number = "0"

    if (number) {
      formatted_number = (Math.round(number * 100) / 100).toString().split(".")[0]

      if (separator) {
        withSeparator = ""

        for (var i = 0; i < formatted_number.length; i++) {
          if (i > 0 && (formatted_number.length - i) % 3 == 0) { withSeparator += separator }
          withSeparator += formatted_number[i]
        }

        formatted_number = withSeparator
      }

      decimal = (Math.round(number * 100) / 100).toString().split(".")[1]
      if (decimal) { formatted_number += "." + decimal }
    }

    return formatted_number
  }

  result = []

  total_savings = 0.0

  _.each(ds_filter_ami_snapshots, function(snapshot) {
    savings = ds_snapshot_costs_grouped[snapshot['formatSnapId'].toLowerCase()]

    if (savings == null || savings == undefined) {
      savings = 0.0
    }

    if (savings >= param_min_savings) {
      total_savings += savings

      recommendationDetails = [
        "Delete ", snapshot['service'], " snapshot ", snapshot["snapshotId"], " ",
        "in AWS Account ", ds_aws_account['name'], " (", ds_aws_account['id'], ")"
      ].join('')

      resourceARN = "arn:aws:" + snapshot['service'].toLowerCase().trim() + ":" + snapshot['region'] + ":" + ds_aws_account['id'] + ":snapshot/" + snapshot['snapshotId']

      result.push({
        accountID: ds_aws_account['id'],
        accountName: ds_aws_account['name'],
        resourceID: snapshot['snapshotId'],
        resourceARN: resourceARN,
        snapshotType: snapshot['snapshotType'],
        description: snapshot['description'],
        region: snapshot['region'],
        tags: snapshot['tags'],
        resourceName: snapshot['name'],
        age: snapshot['age'],
        imageId: snapshot['imageId'],
        parentId: snapshot['parentId'],
        parentType: snapshot['parentType'],
        savings: parseFloat(savings.toFixed(3)),
        savingsCurrency: ds_currency['symbol'],
        size: snapshot['size'],
        service: snapshot['service'],
        recommendationDetails: recommendationDetails,
        lookbackPeriod: param_snapshot_age,
        type: "Storage Snapshot",
        // These are to avoid errors when we hash_exclude these fields
        total_savings: '',
        message: '',
        policy_name: ''
      })
    }
  })

  // Message for incident output
  total_snapshots = ds_snapshots_combined.length.toString()
  total_old_snapshots = result.length.toString()
  old_snapshots_percentage = (total_old_snapshots / total_snapshots * 100).toFixed(2).toString() + '%'

  days_noun = "days"

  if (param_snapshot_age == 1) {
    days_noun = "day"
  }

  findings = [
    "Out of ", total_snapshots, " snapshots analyzed, ",
    total_old_snapshots, " (", old_snapshots_percentage,
    ") are older than ", param_snapshot_age, " ", days_noun, " ",
    "and are recommended for deletion. "
  ].join('')

  if (param_snapshot_include_ami == "Yes") {
    ami_message = "Snapshots with an associated registered AMI (Amazon Machine Image) were included in the results.\n\n"
  } else {
    ami_message = "Snapshots with an associated registered AMI (Amazon Machine Image) were not included in the results.\n\n"
  }

  disclaimer = "The above settings can be modified by editing the applied policy and changing the appropriate parameters.\n\n"

  empty_message = "Empty values either indicate that data was unavailable or that particular field is not applicable to that specific resource. Only EC2 snapshots will have a Description and only RDS snapshots will have a Snapshot Type."

  savings_message = [
    ds_currency['symbol'], ' ',
    formatNumber(parseFloat(total_savings).toFixed(2), ds_currency['separator'])
  ].join('')

  // Sort by descending order of savings value
  result = _.sortBy(result, function(item) { return item['savings'] * -1 })

  // Dummy item to ensure that the check statement in the policy executes at least once
  result.push({
    resourceID: "",
    total_savings: "",
    message: "",
    tags: "",
    age: "",
    savings: "",
    savingsCurrency: ""
  })

  result[0]['total_savings'] = savings_message
  result[0]['message'] = findings + ami_message + disclaimer + empty_message
  result[0]['policy_name'] = ds_applied_policy['name']
EOS
end

###############################################################################
# Policy
###############################################################################

policy "pol_utilization" do
  validate_each $ds_snapshots_cost_mapping do
    summary_template "{{ with index data 0 }}{{ .policy_name }}{{ end }}: {{ len data }} AWS Old Snapshots Found"
    detail_template <<-'EOS'
    **Potential Monthly Savings:** {{ with index data 0 }}{{ .total_savings }}{{ end }}

    {{ with index data 0 }}{{ .message }}{{ end }}
    EOS
    # Policy check fails and incident is created only if data is not empty and the Parent Policy has not been terminated
    check logic_or($ds_parent_policy_terminated, eq(val(item, "resourceID"), ""))
    escalate $esc_email
    escalate $esc_delete_snapshot
    hash_exclude "total_savings", "message", "tags", "age", "savings", "savingsCurrency"
    export do
      resource_level true
      field "accountID" do
        label "Account ID"
      end
      field "accountName" do
        label "Account Name"
      end
      field "resourceID" do
        label "Resource ID"
      end
      field "resourceName" do
        label "Resource Name"
      end
      field "tags" do
        label "Resource Tags"
      end
      field "age" do
        label "Age (Days)"
      end
      field "size" do
        label "Size (GB)"
      end
      field "service" do
        label "Service"
      end
      field "recommendationDetails" do
        label "Recommendation"
      end
      field "parentType" do
        label "Parent Resource Type"
      end
      field "parentId" do
        label "Parent Resource ID"
      end
      field "snapshotType" do
        label "Snapshot Type"
      end
      field "description" do
        label "Description"
      end
      field "type" do
        label "Type"
      end
      field "imageId" do
        label "AMI"
      end
      field "region" do
        label "Region"
      end
      field "savingsCurrency" do
        label "Currency"
      end
      field "cost" do
        label "Monthly Resource Cost"
        path "savings"
      end
      field "savings" do
        label "Estimated Monthly Savings"
      end
      field "lookbackPeriod" do
        label "Snapshot Age Threshold (Days)"
      end
      field "resourceARN" do
        label "Resource ARN"
      end
      field "id" do
        label "ID"
        path "resourceID"
      end
    end
  end
end

###############################################################################
# Escalations
###############################################################################

escalation "esc_email" do
  automatic true
  label "Send Email"
  description "Send incident email"
  email $param_email
end

escalation "esc_delete_snapshot" do
  automatic contains($param_automatic_action, "Delete Snapshots")
  label "Delete Snapshots"
  description "Approval to delete all selected snapshots"
  run "delete_snapshots", data, $param_snapshot_include_ami
end

###############################################################################
# Cloud Workflow
###############################################################################

define delete_snapshots($data, $param_snapshot_include_ami) return $all_responses do
  $$all_responses = []

  foreach $instance in $data do
    sub on_error: handle_error() do
      if $param_snapshot_include_ami == "Yes"
        if $instance['service'] == "EBS" && $instance['imageId'] != ""
          call deregister_image($instance) retrieve $deregister_response
          $$all_responses << $deregister_response
        end
      end

      if $instance['service'] == "EBS"
        call delete_snapshot_ec2($instance) retrieve $delete_snapshot_response
      elsif $instance['service'] == "RDS"
        if $instance['dbInstanceId'] != ""
          call delete_snapshot_db_instance($instance) retrieve $delete_snapshot_response
        elsif $instance['dbClusterId'] != ""
          call delete_snapshot_db_cluster($instance) retrieve $delete_snapshot_response
        end
      end

      $$all_responses << $delete_snapshot_response
    end
  end

  if inspect($$errors) != "null"
    raise join($$errors, "\n")
  end
end

define deregister_image($instance) return $response do
  $host = "ec2." + $instance["region"] + ".amazonaws.com"
  $href = "/"
  $params = "?Action=DeregisterImage&Version=2016-11-15&ImageId=" + strip($instance["imageId"])
  $url = $host + $href + $params
  task_label("GET " + $url)

  $response = http_request(
    auth: $$auth_aws,
    https: true,
    verb: "get",
    href: $href,
    host: $host,
    query_strings: {
      "Action": "DeregisterImage",
      "Version": "2016-11-15",
      "ImageId": strip($instance["imageId"])
    }
  )

  task_label("Get AWS EC2 image response: " + $instance["resourceID"] + " " + to_json($response))
  $$all_responses << to_json({"req": "GET " + $url, "resp": $response})

  if $response["code"] != 200 && $response["code"] != 202 && $response["code"] != 204
    raise "Unexpected response getting AWS EC2 image: "+ $instance["resourceID"] + " " + to_json($response)
  else
    task_label("Get AWS EC2 image successful: " + $instance["resourceID"])
  end
end

define delete_snapshot_ec2($instance) return $response do
  $host = "ec2." + $instance["region"] + ".amazonaws.com"
  $href = "/"
  $params = "?Action=DeleteSnapshot&Version=2016-11-15&SnapshotId.1=" + strip($instance["resourceID"])
  $url = $host + $href + $params
  task_label("GET " + $url)

  $response = http_request(
    auth: $$auth_aws,
    https: true,
    verb: "get",
    href: $href,
    host: $host,
    query_strings: {
      "Action": "DeleteSnapshot",
      "Version": "2016-11-15",
      "SnapshotId.1": strip($instance["resourceID"])
    }
  )

  task_label("Get AWS EC2 snapshot response: " + $instance["resourceID"] + " " + to_json($response))
  $$all_responses << to_json({"req": "GET " + $url, "resp": $response})

  if $response["code"] != 200 && $response["code"] != 202 && $response["code"] != 204
    raise "Unexpected response getting AWS EC2 snapshot: "+ $instance["resourceID"] + " " + to_json($response)
  else
    task_label("Get AWS EC2 snapshot successful: " + $instance["resourceID"])
  end
end

define delete_snapshot_db_instance($instance) return $response do
  $host = "rds." + $instance["region"] + ".amazonaws.com"
  $href = "/"
  $params = "?Action=DeleteDBSnapshot&Version=2014-10-31&DBSnapshotIdentifier=" + strip($instance["resourceID"])
  $url = $host + $href + $params
  task_label("GET " + $url)

  $response = http_request(
    auth: $$auth_aws,
    https: true,
    verb: "get",
    href: $href,
    host: $host,
    query_strings: {
      "Action": "DeleteDBSnapshot",
      "Version": "2014-10-31",
      "DBSnapshotIdentifier": strip($instance["resourceID"])
    }
  )

  task_label("Get AWS DB instance snapshot response: " + $instance["resourceID"] + " " + to_json($response))
  $$all_responses << to_json({"req": "GET " + $url, "resp": $response})

  if $response["code"] != 200 && $response["code"] != 202 && $response["code"] != 204
    raise "Unexpected response getting AWS DB instance snapshot: "+ $instance["resourceID"] + " " + to_json($response)
  else
    task_label("Get AWS DB instance snapshot successful: " + $instance["resourceID"])
  end
end

define delete_snapshot_db_cluster($instance) return $response do
  $host = "rds." + $instance["region"] + ".amazonaws.com"
  $href = "/"
  $params = "?Action=DeleteDBClusterSnapshot&Version=2014-10-31&DBClusterSnapshotIdentifier=" + strip($instance["resourceID"])
  $url = $host + $href + $params
  task_label("GET " + $url)

  $response = http_request(
    auth: $$auth_aws,
    https: true,
    verb: "get",
    href: $href,
    host: $host,
    query_strings: {
      "Action": "DeleteDBClusterSnapshot",
      "Version": "2014-10-31",
      "DBClusterSnapshotIdentifier": strip($instance["resourceID"])
    }
  )

  task_label("Get AWS DB cluster snapshot response: " + $instance["resourceID"] + " " + to_json($response))
  $$all_responses << to_json({"req": "GET " + $url, "resp": $response})

  if $response["code"] != 200 && $response["code"] != 202 && $response["code"] != 204
    raise "Unexpected response getting AWS DB cluster snapshot: "+ $instance["resourceID"] + " " + to_json($response)
  else
    task_label("Get AWS DB cluster snapshot successful: " + $instance["resourceID"])
  end
end

define handle_error() do
  if !$$errors
    $$errors = []
  end
  $$errors << $_error["type"] + ": " + $_error["message"]
  # We check for errors at the end, and raise them all together
  # Skip errors handled by this definition
  $_error_behavior = "skip"
end

###############################################################################
# Meta Policy [alpha]
# Not intended to be modified or used by policy developers
###############################################################################

# If the meta_parent_policy_id is not set it will evaluate to an empty string and we will look for the policy itself,
# if it is set we will look for the parent policy.
datasource "ds_get_policy" do
  request do
    auth $auth_flexera
    host rs_governance_host
    ignore_status [404]
    path join(["/api/governance/projects/", rs_project_id, "/applied_policies/", switch(ne(meta_parent_policy_id, ""), meta_parent_policy_id, policy_id) ])
    header "Api-Version", "1.0"
  end
  result do
    encoding "json"
    field "id", jmes_path(response, "id")
  end
end

datasource "ds_parent_policy_terminated" do
  run_script $js_decide_if_self_terminate, $ds_get_policy, policy_id, meta_parent_policy_id
end

# If the policy was applied by a meta_parent_policy we confirm it exists if it doesn't we confirm we are deleting
# This information is used in two places:
# - determining whether or not we make a delete call
# - determining if we should create an incident (we don't want to create an incident on the run where we terminate)
script "js_decide_if_self_terminate", type: "javascript" do
  parameters "found", "self_policy_id", "meta_parent_policy_id"
  result "result"
  code <<-EOS
  var result
  if (meta_parent_policy_id != "" && found.id == undefined) {
    result = true
  } else {
    result = false
  }
  EOS
end

# Two potentials ways to set this up:
# - this way and make a unneeded 'get' request when not deleting
# - make the delete request an interate and have it iterate over an empty array when not deleting and an array with one item when deleting
script "js_make_terminate_request", type: "javascript" do
  parameters "should_delete", "policy_id", "rs_project_id", "rs_governance_host"
  result "request"
  code <<-EOS

  var request = {
    auth:  'auth_flexera',
    host: rs_governance_host,
    path: "/api/governance/projects/" + rs_project_id + "/applied_policies/" + policy_id,
    headers: {
      "API-Version": "1.0",
      "Content-Type":"application/json"
    },
  }

  if (should_delete) {
    request.verb = 'DELETE'
  }
  EOS
end

datasource "ds_terminate_self" do
  request do
    run_script $js_make_terminate_request, $ds_parent_policy_terminated, policy_id, rs_project_id, rs_governance_host
  end
end

datasource "ds_is_deleted" do
  run_script $js_check_deleted, $ds_terminate_self
end

# This is just a way to have the check delete request connect to the farthest leaf from policy.
# We want the delete check to the first thing the policy does to avoid the policy erroring before it can decide whether or not it needs to self terminate
# Example a customer deletes a credential and then terminates the parent policy. We still want the children to self terminate
# The only way I could see this not happening is if the user who applied the parent_meta_policy was offboarded or lost policy access, the policies who are impersonating the user
# would not have access to self-terminate
# It may be useful for the backend to enable a mass terminate at some point for all meta_child_policies associated with an id.
script "js_check_deleted", type: "javascript" do
  parameters "response"
  result "result"
  code <<-EOS
  result = {"path":"/"}
  EOS
end

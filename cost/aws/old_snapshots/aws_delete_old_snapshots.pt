name "AWS Old Snapshots"
rs_pt_ver 20180301
type "policy"
short_description "Checks for snapshots older than specified number of days and, optionally, deletes them. See the [README](https://github.com/flexera/policy_templates/tree/master/cost/aws/old_snapshots) and [docs.rightscale.com/policies](https://docs.rightscale.com/policies/) to learn more."
category "Cost"
severity "low"
info(
  version: "2.5",
  provider:"AWS",
  service: "EBS", 
  policy_set: "Old Snapshots"
)

parameter "param_email" do
  type "list"
  label "Email addresses"
  description "A list of email addresses to notify."
end

parameter "snapshot_age" do
  type "number"
  label "Snapshot age"
  default 30
  description "The number of days since the snapshot was created."
end

parameter "param_deregister_image" do
  type "string"
  label "Deregister Image"
  description "If Yes, the snapshot will be deleted along with the images, and if No the snapshot will not be considered for deletion."
  allowed_values "Yes","No"
  default "No"
end

parameter "param_exclude_tags" do
  type "list"
  category "User Inputs"
  label "Exclude Tags"
  description "A list of tags used to excluded volumes from the incident."
end

parameter "param_automatic_action" do
  type "list"
  label "Automatic Actions"
  description "When this value is set, this policy will automatically take the selected action(s)"
  allowed_values ["Delete Snapshots"]
end

###############################################################################
# Authentication
###############################################################################

#authenticate with AWS
credentials "auth_aws" do
  schemes "aws","aws_sts"
  label "AWS"
  description "Select the AWS Credential from the list"
  tags "provider=aws"
end

###############################################################################
# Datasources
###############################################################################

#Get list of enabled regions for an account
datasource "ds_regions_list" do
  request do
    auth $auth_aws
    verb "GET"
    host "ec2.amazonaws.com"
    path "/"
    query "Action", "DescribeRegions"
    query "Version", "2016-11-15"
  end
  result do
    encoding "xml"
    collect xpath(response, "//DescribeRegionsResponse/regionInfo/item", "array") do
      field "region", xpath(col_item, "regionName")
    end
  end
end

# Get only SCP enabled regions
datasource "ds_regions" do
  iterate $ds_regions_list
    request do
      auth $auth_aws
      verb "GET"
      host "ec2.amazonaws.com"
      host join(["ec2.",val(iter_item,"region"),".amazonaws.com"])
      path "/"
      query "Action", "DescribeRegions"
      query "Version", "2016-11-15"
      ignore_status [403]
    end
    result do
      encoding "xml"
      field "region", val(iter_item, "region")
    end
end

datasource "ds_get_caller_identity" do
  request do
    auth $auth_aws
    verb "GET"
    host "sts.amazonaws.com"
    path "/"
    header "User-Agent", "RS Policies"
    query "Action", "GetCallerIdentity"
    query "Version", "2011-06-15"
  end
  result do
    encoding "xml"
    collect xpath(response, "//GetCallerIdentityResponse/GetCallerIdentityResult") do
      field "account",xpath(col_item, "Account")
    end
 end
end

datasource "ds_describe_snapshots" do
  iterate $ds_regions
  request do
    run_script $js_describe_snapshots, val(iter_item,"region"), $ds_get_caller_identity
  end
  result do
    encoding "xml"
    collect xpath(response, "//DescribeSnapshotsResponse/snapshotSet/item", "array") do
        field "tags" do
          collect xpath(col_item,"tagSet/item") do
            field "tagKey", xpath(col_item, "key")
            field "tagValue", xpath(col_item, "value")
        end
      end
        field "region",val(iter_item, "region")
        field "snapshotId", xpath(col_item,"snapshotId")
        field "startTime", xpath(col_item, "startTime")
        field "ownerId", xpath(col_item, "ownerId")
   end
 end
end

datasource "ds_filter_old_snapshots" do
  run_script $js_filter_old_snapshots, $snapshot_age, $ds_describe_snapshots, $param_exclude_tags
end

datasource "ds_get_snapshot_ami" do
  iterate $ds_filter_old_snapshots
  request do
    run_script $js_get_snapshot_ami, val(iter_item, "snapshotId"), val(iter_item, "region")
  end
  result do
    encoding "xml"
    collect xpath(response, "//DescribeImagesResponse/imagesSet/item", "array") do
      field "imageId", xpath(col_item, "imageId")
      field "region", val(iter_item, "region")
      field "snapshotId", val(iter_item, "snapshotId")
      field "tagKeyValue", val(iter_item, "tagKeyValue")
      field "daysOld", val(iter_item, "daysOld")
    end
  end
end

datasource "ds_filter_ami_snapshots" do
  run_script $js_filter_ami_snapshots, $ds_get_snapshot_ami, $ds_filter_old_snapshots
end  

###############################################################################
# Scripts
###############################################################################

script "js_describe_snapshots", type: "javascript" do
  result "results"
  parameters "region", "ds_get_caller_identity"
  code <<-EOS
  results = {
    "auth": "auth_aws",
    "host": 'ec2.'+region+'.amazonaws.com',
    "verb": "GET",
    "path": "/",
    "headers": {
      "User-Agent": "RS Policies",
      "Content-Type": "text/xml"
    },
    "query_params": {
      'Action': 'DescribeSnapshots',
      'Version': '2016-11-15',
      'Filter.1.Name': 'status',
      'Filter.1.Value.1': 'completed',
      'Filter.2.Name': 'owner-id',
      'Filter.2.Value.1': ds_get_caller_identity[0]['account']
    }
  }
EOS
end

script "js_filter_old_snapshots", type: "javascript" do
  result "results"
  parameters "snapshot_age", "ds_describe_snapshots", "param_exclude_tags"
  code <<-EOS
    var param_exclude_tags_lower=[];
    for(var j=0;j<param_exclude_tags.length;j++){
        param_exclude_tags_lower[j] = param_exclude_tags[j].toString().toLowerCase();
    }
    var results = [];
    for(var i=0; i < ds_describe_snapshots.length; i++){
      var snapshot = ds_describe_snapshots[i];
      // Check, if the tag present in entered param_exclude_tags, ignore the snapshot if tag matches/present
      var tags = snapshot['tags'];
      var isTagMatched = false;
      var tagKeyValue = "";
      for(var k=0; k < tags.length; k++){
        tag = tags[k];
        if((param_exclude_tags_lower.indexOf((tag['tagKey']).toLowerCase()) !== -1) || (param_exclude_tags_lower.indexOf((tag['tagKey']+'='+tag['tagValue']).toLowerCase()) !== -1)){
          isTagMatched = true;  
		}

        // Constructing tags with comma separated to display in detail_template
        if((tag['tagValue']).length > 0){
          tagKeyValue = tagKeyValue+" , "+tag['tagKey']+'='+tag['tagValue'];  
		}else{
          tagKeyValue = tagKeyValue+" , "+tag['tagKey'];  
		}
	  }

      if(tagKeyValue === "" || tagKeyValue === " " || tagKeyValue == ""){
        tagKeyValue = "   < No Value >";
      }

      if(!(isTagMatched)){
        var snapshotTime = Date.parse(snapshot['startTime']);
        var daysOld = (new Date().getTime() - new Date(snapshotTime).getTime()) / (1000 * 3600 * 24);
        daysOld = Math.round(daysOld);
        if(daysOld > snapshot_age){
          results.push({
            snapshotId : snapshot['snapshotId'],
            region : snapshot['region'],
            tagKeyValue : (tagKeyValue.slice(2)),
            daysOld : daysOld
		  })
		}
	  }
	}
    results = _.sortBy(results,'region');
    results = _.sortBy(results,'daysOld');
  EOS
end

script "js_get_snapshot_ami", type:"javascript" do
  result "results"
  parameters "snapshotId", "region"
  code <<-EOS
    results = {
    "auth": "auth_aws",
    "host": 'ec2.'+region+'.amazonaws.com',
    "verb": "GET",
    "path": "/",
    "headers": {
      "User-Agent": "RS Policies",
      "Content-Type": "text/xml"
    },
    "query_params": {
      'Action': 'DescribeImages',
      'Version': '2016-11-15',
      'Filter.1.Name': 'block-device-mapping.snapshot-id',
      'Filter.1.Value.1': snapshotId
    }
  }
  EOS
end

script "js_filter_ami_snapshots", type:"javascript" do
  result "results"
  parameters "snapshotImagesList", "snapshotsList"
  code <<-EOS
    var results = [];
    var snapshotImageIds = [];
    var snapshotImageIdFormat = "";
    for(var i=0; i < snapshotsList.length; i++){
      var snapshot = snapshotsList[i];
      for(var j=0; j < snapshotImagesList.length; j++){
        var snapshotImage = snapshotImagesList[j];
        if(snapshot['snapshotId'] === snapshotImage['snapshotId']){
          snapshotImageIdFormat += snapshotImage['imageId']+", ";
          snapshotImageIds.push(snapshotImage['imageId'])
		}
	  }
      results.push({
        snapshotId : snapshot['snapshotId'],
        region : snapshot['region'],
        tagKeyValue : snapshot['tagKeyValue'],
        daysOld : snapshot['daysOld'],
        imageId : snapshotImageIds,
        snapshotImageIdFormat : (snapshotImageIdFormat.slice(0,snapshotImageIdFormat.length - 2))
	  })
      snapshotImageIds = [];
      snapshotImageIdFormat = "";
	}
  EOS
end

###############################################################################
# Policy
###############################################################################

policy "pol_utilization" do
  validate $ds_filter_ami_snapshots do
    summary_template "{{ rs_project_name }} (Account ID: {{ rs_project_id }}): {{ len data }} rows containing AWS old snapshot data"
    escalate $ese_email
    escalate $esc_delete_snapshot
    check eq(size(data), 0)
    export do
      resource_level true
      field "region" do
        label "Region"
      end
      field "daysOld" do
        label "Days Old"
      end
      field "id" do
        label "Snapshot Id"
        path "snapshotId"
      end
      field "tagKeyValue" do
        label "Tags"
      end
      field "snapshotImageIdFormat" do
        label "AMI"
      end
    end
  end
end

###############################################################################
# Escalations
###############################################################################

escalation "ese_email" do
  automatic true
  label "Send Mail"
  description "Sends incidents email"
  email $param_email
end

escalation "esc_delete_snapshot" do
  automatic contains($param_automatic_action, "Delete Snapshots")
  label "Delete Snapshots"
  description "Approval to delete all selected snapshots"
  run "take_action",data,$param_deregister_image
end

###############################################################################
# Cloud Workflow
###############################################################################

define take_action($data,$param_deregister_image) return $all_responses do
  $all_responses = []
  $image_ids = []
  foreach $item in $data do
    sub on_error: skip do
      if $item["snapshotImageIdFormat"] != ""
        $image_ids = split($item["snapshotImageIdFormat"], ",")
      end

      if $param_deregister_image == "Yes"
        call deregisterImageFromSnapshot($image_ids, $item["region"])
        call delete_snapshot($item)
      elsif $param_deregister_image == "No"
        if empty?($image_ids)
          call delete_snapshot($item)
        end
      end
    end

    $image_ids = []
  end
end

define deregisterImageFromSnapshot($item, $region) do
  foreach $image in $item do
    $deregister_response = http_request(
      auth: $$auth_aws,
      https: true,
      verb: "get",
      host: "ec2."+$region+".amazonaws.com",
      href: "/",
      query_strings: {
      "Action": "DeregisterImage",
      "Version": "2016-11-15",
      "ImageId": strip($image)
      }
   )
  $deregisterResponseResult = $deregister_response["code"]
    if $deregisterResponseResult != 200
      call sys_log("Deregister image snapshot", to_s($deregister_response))
    end
  end
end

define delete_snapshot($item) do
  $delete_response = http_request(
    auth: $$auth_aws,
    https: true,
    verb: "get",
    host: "ec2."+$item["region"]+".amazonaws.com",
    href: "/",
    query_strings: {
      "Action": "DeleteSnapshot",
      "Version": "2016-11-15",
      "SnapshotId.1": strip($item["id"])
    }
  )
  $splitResult = $delete_response["code"]
  if $splitResult != 200
   call sys_log("Inside delete_snapshot  defination", to_s($delete_response))
  end
end

define sys_log($subject, $detail) do
  rs_cm.audit_entries.create(
    notify: "None",
    audit_entry: {
      auditee_href: @@account,
      summary: "AWS Old Snapshots :- "+ $subject,
      detail: $detail
    }
  )
end
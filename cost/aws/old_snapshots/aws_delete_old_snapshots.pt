name "AWS Old Snapshots"
rs_pt_ver 20180301
type "policy"
short_description "Checks for snapshots older than a specified number of days and, optionally, deletes them. See the [README](https://github.com/flexera-public/policy_templates/tree/master/cost/aws/old_snapshots) and [docs.flexera.com/flexera/EN/Automation](https://docs.flexera.com/flexera/EN/Automation/AutomationGS.htm) to learn more."
category "Cost"
severity "low"
default_frequency "daily"
info(
  version: "6.0",
  provider: "AWS",
  service: "Storage",
  policy_set: "Old Snapshots",
  recommendation_type: "Usage Reduction"
)

###############################################################################
# User inputs
###############################################################################

parameter "param_allow_or_deny" do
  type "string"
  label "Allow/Deny Regions"
  description "Allow or Deny entered regions. See the README for more details"
  allowed_values "Allow", "Deny"
  default "Allow"
end

parameter "param_regions_list" do
  type "list"
  label "Regions"
  allowed_pattern /^([a-zA-Z-_]+-[a-zA-Z0-9-_]+-[0-9-_]+,*|)+$/
  description "A list of allowed or denied regions. See the README for more details"
  default []
end

parameter "param_email" do
  type "list"
  label "Email addresses"
  description "A list of email addresses to notify."
  default []
end

parameter "param_snapshot_age" do
  type "number"
  label "Snapshot age"
  default 30
  description "The number of days since the snapshot was created."
  min_value 1
end

parameter "param_aws_account_number" do
  type "string"
  label "Account Number"
  description "The account number for AWS STS Cross Account Roles."
  default ""
end

parameter "param_deregister_image" do
  type "string"
  label "Deregister Image"
  description "If Yes, the snapshot will be deleted along with the images, and if No the snapshot will not be considered for deletion."
  allowed_values "Yes", "No"
  default "No"
end

parameter "param_exclusion_tag_key" do
  category "User Inputs"
  label "Exclusion Tag Key:Value"
  description "Cloud native tag to ignore instances that you don't want to consider for downsizing or termination. Format: Key:Value"
  type "string"
  allowed_pattern /(^$)|([\w]?)+\:([\w]?)+/
  default ""
end

parameter "param_min_savings" do
  type "number"
  label "Minimum Savings"
  description "Minimum potential savings required to generate a recommendation"
  min_value 0
  default 0
end

parameter "param_automatic_action" do
  type "list"
  label "Automatic Actions"
  description "When this value is set, this policy will automatically take the selected action(s)"
  allowed_values ["Delete Snapshots"]
  default []
end

parameter "param_flexera_org_id_for_optima" do
  type "string"
  label "Flexera One Org ID for Optima"
  description "The Flexera One org ID for Optima queries used to determine estimated costs, by default the current org is used"
  default "current"
  allowed_pattern /^(current|[0-9]+)$/
end

parameter "param_log_to_cm_audit_entries" do
  type "string"
  label "Log to CM Audit Entries"
  description "Boolean for whether or not to log any debugging information from actions to CM Audit Entries, this should be left set to No on Flexera EU"
  default "No"
  allowed_values "Yes", "No"
end

###############################################################################
# Authentication
###############################################################################

credentials "auth_aws" do
  schemes "aws", "aws_sts"
  label "AWS"
  description "Select the AWS Credential from the list"
  tags "provider=aws"
  aws_account_number $param_aws_account_number
end

credentials "auth_flexera" do
  schemes "oauth2"
  label "flexera"
  description "Select Flexera One OAuth2 credentials"
  tags "provider=flexera"
end

###############################################################################
# Pagination
###############################################################################

pagination "pagination_aws_describesnapshots_xml" do
  get_page_marker do
    body_path "//DescribeSnapshotsResponse/nextToken"
  end
  set_page_marker do
    query "NextToken"
  end
end

# https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DescribeImages.html
pagination "pagination_aws_describeimages_xml" do
  get_page_marker do
    body_path "//DescribeImagesResponse/nextToken"
  end
  set_page_marker do
    query "NextToken"
  end
end

# https://docs.aws.amazon.com/AmazonRDS/latest/APIReference/API_DescribeDBInstances.html
pagination "pagination_aws_describe_db_instances_xml" do
  get_page_marker do
    body_path "//DescribeDBInstancesResponse/DescribeDBInstancesResult/Marker"
  end
  set_page_marker do
    query "Marker"
  end
end

# https://docs.aws.amazon.com/AmazonRDS/latest/APIReference/API_DescribeDBSnapshots.html
pagination "pagination_aws_describe_db_snapshots_xml" do
  get_page_marker do
    body_path "//DescribeDBSnapshotsResponse/DescribeDBSnapshotsResult/Marker"
  end
  set_page_marker do
    query "Marker"
  end
end

# https://docs.aws.amazon.com/AmazonRDS/latest/APIReference/API_DescribeDBClusters.html
pagination "pagination_aws_describe_db_clusters_xml" do
  get_page_marker do
    body_path "//DescribeDBClustersResponse/DescribeDBClustersResult/Marker"
  end
  set_page_marker do
    query "Marker"
  end
end

# https://docs.aws.amazon.com/AmazonRDS/latest/APIReference/API_DescribeDBClusterSnapshots.html
pagination "pagination_aws_describe_db_cluster_snapshots_xml" do
  get_page_marker do
    body_path "//DescribeDBClusterSnapshotsResponse/DescribeDBClusterSnapshotsResult/Marker"
  end
  set_page_marker do
    query "Marker"
  end
end

###############################################################################
# Datasources
###############################################################################

datasource "ds_get_caller_identity" do
  request do
    auth $auth_aws
    verb "GET"
    host "sts.amazonaws.com"
    path "/"
    header "User-Agent", "RS Policies"
    query "Action", "GetCallerIdentity"
    query "Version", "2011-06-15"
  end
  result do
    encoding "xml"
    collect xpath(response, "//GetCallerIdentityResponse/GetCallerIdentityResult") do
      field "account", xpath(col_item, "Account")
    end
  end
end

datasource "ds_aws_account" do
  run_script $js_aws_account, $ds_get_caller_identity
end

script "js_aws_account", type:"javascript" do
  parameters "ds_get_caller_identity"
  result "result"
  code "result = ds_get_caller_identity[0]['account']"
end

datasource "ds_flexera_optima" do
  run_script $js_flexera_optima, $param_flexera_org_id_for_optima, rs_org_id
end

script "js_flexera_optima", type: "javascript" do
  parameters "param_flexera_org_id_for_optima", "rs_org_id"
  result "result"
  code <<-EOS
  org_id = rs_org_id

  if (param_flexera_org_id_for_optima != "current") { org_id = param_flexera_org_id_for_optima }

  result = { org_id: org_id }
EOS
end

datasource "ds_currency_reference" do
  request do
    host "raw.githubusercontent.com"
    path "/rightscale/policy_templates/master/cost/scheduled_reports/currency_reference.json"
    header "User-Agent", "RS Policies"
  end
end

datasource "ds_currency_code" do
  request do
    auth $auth_flexera
    host rs_optima_host
    path join(["/bill-analysis/orgs/", val($ds_flexera_optima, "org_id"), "/settings/currency_code"])
    header "Api-Version", "0.1"
    header "User-Agent", "RS Policies"
    ignore_status [403]
  end
  result do
    encoding "json"
    field "id", jmes_path(response, "id")
    field "value", jmes_path(response, "value")
  end
end

datasource "ds_currency" do
  run_script $js_currency, $ds_currency_reference, $ds_currency_code
end

script "js_currency", type:"javascript" do
  parameters "ds_currency_reference", "ds_currency_code"
  result "result"
  code <<-EOS
  symbol = "$"
  separator = ","

  if (ds_currency_code['value'] !== undefined) {
    if (ds_currency_reference[ds_currency_code['value']] !== undefined) {
      symbol = ds_currency_reference[ds_currency_code['value']]['symbol']

      if (ds_currency_reference[ds_currency_code['value']]['t_separator'] !== undefined) {
        separator = ds_currency_reference[ds_currency_code['value']]['t_separator']
      }
    }
  }

  result = {
    symbol: symbol,
    separator: separator
  }
EOS
end

datasource "ds_billing_centers" do
  request do
    auth $auth_flexera
    host rs_optima_host
    path join(["/analytics/orgs/", val($ds_flexera_optima, "org_id"), "/billing_centers"])
    header "Api-Version", "1.0"
    header "User-Agent", "RS Policies"
    query "view", "allocation_table"
    ignore_status [403]
  end
  result do
    encoding "json"
    collect jmes_path(response, "[*]") do
      field "href", jmes_path(col_item, "href")
      field "id", jmes_path(col_item, "id")
      field "name", jmes_path(col_item, "name")
      field "parent_id", jmes_path(col_item, "parent_id")
    end
  end
end

datasource "ds_top_level_bcs" do
  run_script $js_top_level_bcs, $ds_billing_centers
end

script "js_top_level_bcs", type: "javascript" do
  parameters "ds_billing_centers"
  result "result"
  code <<-EOS
  filtered_bcs = _.reject(ds_billing_centers, function(bc) {
    return bc['parent_id'] != null && bc['parent_id'] != undefined
  })

  result = _.compact(_.pluck(filtered_bcs, 'id'))
EOS
end

datasource "ds_snapshot_costs" do
  request do
    run_script $js_snapshot_costs, $ds_aws_account, $ds_top_level_bcs, val($ds_flexera_optima, "org_id"), rs_optima_host
  end
  result do
    encoding "json"
    collect jmes_path(response, "rows[*]") do
      field "resource_id", jmes_path(col_item, "dimensions.resource_id")
      field "vendorAccountName", jmes_path(col_item, "dimensions.vendor_account_name")
      field "cost", jmes_path(col_item, "metrics.cost_nonamortized_unblended_adj")
    end
  end
end

script "js_snapshot_costs", type: "javascript" do
  parameters "ds_aws_account", "ds_top_level_bcs", "org_id", "rs_optima_host"
  result "request"
  code <<-EOS
  //Get Start and End dates
  start_date = new Date()
  start_date.setDate(start_date.getDate() - 3)
  start_date = start_date.toISOString().split("T")[0]

  end_date = new Date()
  end_date.setDate(end_date.getDate() - 2)
  end_date = end_date.toISOString().split("T")[0]

  var request = {
    auth: "auth_flexera",
    host: rs_optima_host,
    verb: "POST",
    path: "/bill-analysis/orgs/" + org_id + "/costs/select",
    body_fields: {
      "dimensions": ["resource_id", "vendor_account_name"],
      "granularity": "day",
      "start_at": start_date,
      "end_at": end_date,
      "metrics": ["cost_nonamortized_unblended_adj"],
      "billing_center_ids": ds_top_level_bcs,
      "limit": 100000,
      "filter": {
        "type": "and",
        "expressions": [
          {
            "type": "or",
            "expressions": [
              { "type": "equal", "dimension": "service", "value": "AmazonRDS" },
              { "type": "equal", "dimension": "service", "value": "AmazonEC2" }
            ]
          },
          {
            "dimension": "resource_type",
            "type": "equal",
            "value": "Storage Snapshot"
          },
          {
            "dimension": "vendor_account",
            "type": "equal",
            "value": ds_aws_account
          }
        ]
      }
    },
    headers: {
      "User-Agent": "RS Policies",
      "Api-Version": "1.0"
    },
    ignore_status: [400]
  }
EOS
end

datasource "ds_regions_list" do
  request do
    auth $auth_aws
    verb "GET"
    host "ec2.amazonaws.com"
    path "/"
    query "Action", "DescribeRegions"
    query "Version", "2016-11-15"
    query "Filter.1.Name", "opt-in-status"
    query "Filter.1.Value.1", "opt-in-not-required"
    query "Filter.1.Value.2", "opted-in"
    # Header X-Meta-Flexera has no affect on datasource query, but is required for Meta Policies
    # Forces `ds_is_deleted` datasource to run first during policy execution
    header "Meta-Flexera", val($ds_is_deleted, "path")
  end
  result do
    encoding "xml"
    collect xpath(response, "//DescribeRegionsResponse/regionInfo/item", "array") do
      field "region", xpath(col_item, "regionName")
    end
  end
end

datasource "ds_regions" do
  run_script $js_regions, $param_regions_list, $ds_regions_list, $param_allow_or_deny
end

script "js_regions", type:"javascript" do
  parameters "param_regions_list", "ds_regions_list", "param_allow_or_deny"
  result "result"
  code <<-EOS
  result = ds_regions_list
  allow_deny_test = { "Allow": true, "Deny": false }

  if (param_regions_list.length > 0) {
    result = _.filter(ds_regions_list, function(item) {
      return _.contains(param_regions_list, item['region']) == allow_deny_test[param_allow_or_deny]
    })
  }
EOS
end

datasource "ds_describe_snapshots" do
  iterate $ds_regions
  request do
    run_script $js_describe_snapshots, val(iter_item, "region"), $ds_aws_account
  end
  result do
    encoding "xml"
    collect xpath(response, "//DescribeSnapshotsResponse/snapshotSet/item", "array") do
      field "tags" do
        collect xpath(col_item, "tagSet/item") do
          field "key", xpath(col_item, "key")
          field "value", xpath(col_item, "value")
        end
      end
      field "region", val(iter_item, "region")
      field "snapshotId", xpath(col_item, "snapshotId")
      field "startTime", xpath(col_item, "startTime")
      field "ownerId", xpath(col_item, "ownerId")
      field "volumeSize", xpath(col_item, "volumeSize")
      field "service", "EBS"
    end
  end
end

script "js_describe_snapshots", type: "javascript" do
  result "request"
  parameters "region", "ds_aws_account"
  code <<-EOS
  var request = {
    auth: "auth_aws",
    host: "ec2." + region + ".amazonaws.com",
    verb: "GET",
    path: "/",
    pagination: "pagination_aws_describesnapshots_xml",
    headers: {
      "User-Agent": "RS Policies",
      "Content-Type": "text/xml"
    },
    query_params: {
      "Action": "DescribeSnapshots",
      "Version": "2016-11-15",
      "Filter.1.Name": "status",
      "Filter.1.Value.1": "completed",
      "Filter.2.Name": "owner-id",
      "Filter.2.Value.1": ds_aws_account
    },
    ignore_status: [403, 404]
  }
EOS
end

datasource "ds_describe_db_clusters" do
  iterate $ds_regions
  request do
    run_script $js_describe_db_clusters, val(iter_item, "region")
  end
  result do
    encoding "xml"
    collect xpath(response, "//DescribeDBClustersResponse/DescribeDBClustersResult/DBClusters/DBCluster", "array") do
      field "tags" do
        collect xpath(col_item, "TagList/Tag", "array") do
          field "key", xpath(col_item, "Key")
          field "value", xpath(col_item, "Value")
        end
      end
      field "region", val(iter_item, "region")
      field "dbClusterIdentifier", xpath(col_item, "DBClusterIdentifier")
      field "dbClusterResourceId", xpath(col_item, "DbClusterResourceId")
    end
  end
end

script "js_describe_db_clusters", type: "javascript" do
  result "request"
  parameters "region"
  code <<-EOS
  var request = {
    auth: "auth_aws",
    host: "rds." + region + ".amazonaws.com",
    verb: "GET",
    path: "/",
    pagination: "pagination_aws_describe_db_clusters_xml",
    headers: {
      "User-Agent": "RS Policies",
      "Content-Type": "text/xml"
    },
    query_params: {
      "Action": "DescribeDBClusters",
      "Version": "2014-10-31"
    },
    ignore_status: [403, 404]
  }
EOS
end

datasource "ds_describe_db_instances" do
  iterate $ds_regions
  request do
    run_script $js_describe_db_instances, val(iter_item, "region")
  end
  result do
    encoding "xml"
    collect xpath(response, "//DescribeDBInstancesResponse/DescribeDBInstancesResult/DBInstances/DBInstance", "array") do
      field "tags" do
        collect xpath(col_item, "TagList/Tag", "array") do
          field "key", xpath(col_item, "Key")
          field "value", xpath(col_item, "Value")
        end
      end
      field "region", val(iter_item, "region")
      field "dbInstanceIdentifier", xpath(col_item, "DBInstanceIdentifier")
      field "dbInstanceResourceId", xpath(col_item, "DbiResourceId")
    end
  end
end

script "js_describe_db_instances", type: "javascript" do
  result "request"
  parameters "region"
  code <<-EOS
  var request = {
    auth: "auth_aws",
    host: "rds." + region + ".amazonaws.com",
    verb: "GET",
    path: "/",
    pagination: "pagination_aws_describe_db_instances_xml",
    headers: {
      "User-Agent": "RS Policies",
      "Content-Type": "text/xml"
    },
    query_params: {
      "Action": "DescribeDBInstances",
      "Version": "2014-10-31"
    },
    ignore_status: [403, 404]
  }
EOS
end

datasource "ds_describe_db_snapshots" do
  iterate $ds_regions
  request do
    run_script $js_describe_db_snapshots, val(iter_item, "region")
  end
  result do
    encoding "xml"
    collect xpath(response, "//DescribeDBSnapshotsResponse/DescribeDBSnapshotsResult/DBSnapshots/DBSnapshot", "array") do
      field "tags" do
        collect xpath(col_item, "TagList/Tag", "array") do
          field "key", xpath(col_item, "Key")
          field "value", xpath(col_item, "Value")
        end
      end
      field "region", val(iter_item, "region")
      field "snapshotId", xpath(col_item, "DBSnapshotIdentifier")
      field "startTime", xpath(col_item, "SnapshotCreateTime")
      field "dbInstanceId", xpath(col_item, "DBInstanceIdentifier")
      field "volumeSize", xpath(col_item, "AllocatedStorage")
      field "service", "RDS"
    end
  end
end

script "js_describe_db_snapshots", type: "javascript" do
  result "request"
  parameters "region"
  code <<-EOS
  var request = {
    auth: "auth_aws",
    host: "rds." + region + ".amazonaws.com",
    verb: "GET",
    path: "/",
    pagination: "pagination_aws_describe_db_snapshots_xml",
    headers: {
      "User-Agent": "RS Policies",
      "Content-Type": "text/xml"
    },
    query_params: {
      "Action": "DescribeDBSnapshots",
      "Version": "2014-10-31"
    }
  }
EOS
end

datasource "ds_describe_db_cluster_snapshots" do
  iterate $ds_regions
  request do
    run_script $js_describe_db_cluster_snapshots, val(iter_item, "region")
  end
  result do
    encoding "xml"
    collect xpath(response, "//DescribeDBClusterSnapshotsResponse/DescribeDBClusterSnapshotsResult/DBClusterSnapshots/DBClusterSnapshot", "array") do
      field "tags" do
        collect xpath(col_item, "TagList/Tag", "array") do
          field "key", xpath(col_item, "Key")
          field "value", xpath(col_item, "Value")
        end
      end
      field "region", val(iter_item, "region")
      field "snapshotId", xpath(col_item, "DBClusterSnapshotIdentifier")
      field "startTime", xpath(col_item, "SnapshotCreateTime")
      field "dbClusterId", xpath(col_item, "DBClusterIdentifier")
      field "volumeSize", xpath(col_item, "AllocatedStorage")
      field "service", "RDS"
    end
  end
end

script "js_describe_db_cluster_snapshots", type: "javascript" do
  result "request"
  parameters "region"
  code <<-EOS
  var request = {
    auth: "auth_aws",
    host: "rds." + region + ".amazonaws.com",
    verb: "GET",
    path: "/",
    pagination: "pagination_aws_describe_db_cluster_snapshots_xml",
    headers: {
      "User-Agent": "RS Policies",
      "Content-Type": "text/xml"
    },
    query_params: {
      "Action": "DescribeDBClusterSnapshots",
      "Version": "2014-10-31"
    }
  }
EOS
end

datasource "ds_filter_old_snapshots" do
  run_script $js_filter_old_snapshots, $ds_describe_snapshots, $ds_describe_db_snapshots, $ds_describe_db_cluster_snapshots, $param_snapshot_age, $param_exclusion_tag_key
end

script "js_filter_old_snapshots", type: "javascript" do
  result "result"
  parameters "ds_describe_snapshots", "ds_describe_db_snapshots", "ds_describe_db_cluster_snapshots", "param_snapshot_age", "param_exclusion_tag_key"
  code <<-EOS
  result = []
  snapshots_combined = ds_describe_snapshots.concat(ds_describe_db_snapshots, ds_describe_db_cluster_snapshots)

  _.each(snapshots_combined, function(snapshot) {
    tags = []

    if (snapshot['tags'] != null && snapshot['tags'] != undefined) {
      _.each(snapshot['tags'], function(tag) {
        tags.push([tag['key'], tag['value']].join('='))
      })
    }

    exclude_snapshot = false

    if (param_exclusion_tag_key != '' && param_exclusion_tag_key != null) {
      exclude_snapshot = _.contains(tags, param_exclusion_tag_key.replace(':', '='))
    }

    if (!exclude_snapshot) {
      snapshotTime = Date.parse(snapshot['startTime'])
      daysOld = Math.round((new Date().getTime() - new Date(snapshotTime).getTime()) / (1000 * 3600 * 24))

      if (daysOld > param_snapshot_age) {
        result.push({
          snapshotId: snapshot['snapshotId'],
          dbClusterId: snapshot['dbClusterId'],
          dbInstanceId: snapshot['dbInstanceId'],
          region: snapshot['region'],
          tags: tags.join(', '),
          daysOld: daysOld,
          service: snapshot['service'],
          volumeSize: snapshot['volumeSize']
        })
      }
    }
  })
EOS
end

datasource "ds_get_snapshot_ami" do
  iterate $ds_regions
  request do
    run_script $js_get_snapshot_ami, val(iter_item, "region"), $ds_aws_account
  end
  result do
    encoding "xml"
    collect xpath(response, "//DescribeImagesResponse/imagesSet/item", "array") do
      field "region", val(iter_item, "region")
      field "imageId", xpath(col_item, "imageId")
      field "ownerId", xpath(col_item, "ownerId")
      field "snapshotIds",  xpath(col_item, "blockDeviceMapping/item/*//snapshotId", "array")
    end
  end
end

script "js_get_snapshot_ami", type: "javascript" do
  result "request"
  parameters "region", "ds_aws_account"
  code <<-EOS
  var request = {
    auth: "auth_aws",
    host: "ec2." + region + ".amazonaws.com",
    verb: "GET",
    path: "/",
    pagination: "pagination_aws_describeimages_xml",
    headers: {
      "User-Agent": "RS Policies",
      "Content-Type": "text/xml"
    },
    query_params: {
      "Action": "DescribeImages",
      "Version": "2016-11-15",
      "Filter.1.Name": "owner-id",
      "Filter.1.Value.1": ds_aws_account
    }
  }
EOS
end

datasource "ds_filter_ami_snapshots" do
  run_script $js_filter_ami_snapshots, $ds_get_snapshot_ami, $ds_filter_old_snapshots, $ds_aws_account
end

script "js_filter_ami_snapshots", type: "javascript" do
  result "result"
  parameters "ds_get_snapshot_ami", "ds_filter_old_snapshots", "ds_aws_account"
  code <<-EOS
  var result = []

  _.each(ds_filter_old_snapshots, function(old_snapshot) {
    old_snapshot_dbClusterId = ""
    old_snapshot_dbInstanceId = ""
    old_snapshot_imageId = ""

    if (old_snapshot['service'] == "RDS" && old_snapshot['dbClusterId'] != null) {
      old_snapshot_dbClusterId = old_snapshot['dbClusterId']
    }

    if (old_snapshot['service'] == "RDS" && old_snapshot['dbInstanceId'] != null) {
      old_snapshot_dbInstanceId = old_snapshot['dbInstanceId']
    }

    _.each(ds_get_snapshot_ami, function(ami) {
      if (_.contains(ami['snapshotIds'], old_snapshot['snapshotId'])) {
        old_snapshot_imageId = ami['imageId']
      }
    })

    // Default the "formatted" snapshotId to the original snapshotId
    // formatSnapId is used to map this resource to the resource ID returned by Flexera cost API
    formatSnapId = old_snapshot['snapshotId']

    if (old_snapshot['service'] == "EBS") {
      formatSnapId = "snapshot/" + old_snapshot['snapshotId']
    } else if (old_snapshot['service'] == "RDS") {
      if (old_snapshot['dbClusterId'] != null) {
        formatSnapId = "cluster-snapshot:" + old_snapshot['snapshotId']
      }
    }

    // Add the old snapshot to the results
    result.push({
      snapshotId: old_snapshot['snapshotId'],
      formatSnapId: formatSnapId,
      region: old_snapshot['region'],
      tags: old_snapshot['tags'],
      daysOld: old_snapshot['daysOld'],
      service: old_snapshot['service'],
      accountID: ds_aws_account,
      imageId: old_snapshot_imageId,
      dbInstanceId: old_snapshot_dbInstanceId,
      dbClusterId: old_snapshot_dbClusterId,
      volumeSize: old_snapshot['volumeSize']
    })
  })
EOS
end

datasource "ds_snapshots_cost_mapping" do
  run_script $js_snapshots_cost_mapping, $ds_filter_ami_snapshots, $ds_snapshot_costs, $ds_currency, $ds_billing_centers, $ds_aws_account, $param_min_savings
end

script "js_snapshots_cost_mapping", type: "javascript" do
  parameters "ds_filter_ami_snapshots", "ds_snapshot_costs", "ds_currency", "ds_billing_centers", "ds_aws_account", "param_min_savings"
  result "result"
  code <<-EOS
  // Function for formatting currency numbers later
  function formatNumber(number, separator) {
    var numString = number.toString()
    var values = numString.split(".")
    var formatted_number = ''

    while (values[0].length > 3) {
      var chunk = values[0].substr(-3)
      values[0] = values[0].substr(0, values[0].length - 3)
      formatted_number = separator + chunk + formatted_number
    }

    if (values[0].length > 0) { formatted_number = values[0] + formatted_number }

    if (values[1] == undefined) { return formatted_number }

    return formatted_number + "." + values[1]
  }

  // Store total costs by resource id for later usage
  var costs_by_resource_id = {}

  if (ds_billing_centers.length != 0) {
    _.each(ds_snapshot_costs, function(item) {
      id = item['resource_id']

      if (costs_by_resource_id[id] != undefined) {
        costs_by_resource_id[id] += item['cost']
      } else {
        costs_by_resource_id[id] = item['cost']
      }
    })
  }

  // Store account name for later usage
  var accountName = ""

  if (ds_snapshot_costs.length > 0) {
    accountName = ds_snapshot_costs[0]['vendorAccountName']
  }

  // Iterate through the list of snapshots and create a list for the incident
  snapshot_list = []
  total_savings = 0.0

  _.each(ds_filter_ami_snapshots, function(snapshot) {
    snapshot_cost = costs_by_resource_id[snapshot['formatSnapId']]

    if (snapshot_cost == null || snapshot_cost == undefined) {
      snapshot_cost = 0.0
    }

    monthly_savings = snapshot_cost * 30

    if (monthly_savings >= param_min_savings) {
      total_savings += monthly_savings

      snapshot_list.push({
        accountID: ds_aws_account,
        accountName: accountName,
        snapshotId: snapshot['snapshotId'],
        region: snapshot['region'],
        tags: snapshot['tags'],
        daysOld: snapshot['daysOld'],
        imageId: snapshot['imageId'],
        dbInstanceId: snapshot['dbInstanceId'],
        dbClusterId: snapshot['dbClusterId'],
        savings: monthly_savings.toFixed(3),
        savingsCurrency: ds_currency['symbol'],
        volumeSize: snapshot['volumeSize'],
        service: snapshot['service']
      })
    }
  })

  snapshot_list = _.sortBy(snapshot_list, "imageId")
  snapshot_list = _.sortBy(snapshot_list, "region")

  message = "You do not have the minimum required role of billing_center_viewer to view the savings"

  if (ds_billing_centers.length != 0) {
    message = "The total estimated monthly savings are " + ds_currency['symbol'] + ' ' + formatNumber(total_savings.toFixed(2), ds_currency['separator'])
  }

  result = {
    account_id: ds_aws_account,
    snapshot_list: snapshot_list,
    message: message
  }
EOS
end

###############################################################################
# Policy
###############################################################################

policy "pol_utilization" do
  validate $ds_snapshots_cost_mapping do
    summary_template "{{ rs_project_name }} (Account ID: {{ rs_project_id }}): {{ len data.snapshot_list }} AWS Old Snapshots Found"
    detail_template <<-EOS
The following {{ len data.snapshot_list }} old snapshots, for AWS Account: {{ data.account_id }}, have exceeded the specified age of: {{ parameters.param_snapshot_age }} days old.

{{ data.message }}
EOS
    escalate $esc_email
    escalate $esc_delete_snapshot
    # Policy check fails and incident is created only if data is not empty and the Parent Policy has not been terminated
    check logic_or($ds_parent_policy_terminated, eq(size(val(data, "snapshot_list")), 0))
    export "snapshot_list" do
      resource_level true
      field "accountID" do
        label "Account ID"
      end
      field "accountName" do
        label "Account Name"
      end
      field "region" do
        label "Region"
      end
      field "daysOld" do
        label "Days Old"
      end
      field "volumeSize" do
        label "Size"
      end
      field "resourceID" do
        label "Resource ID"
        path "snapshotId"
      end
      field "imageId" do
        label "AMI"
      end
      field "dbClusterId" do
        label "RDS DB Cluster ID"
      end
      field "dbInstanceId" do
        label "RDS DB Instance ID"
      end
      field "savings" do
        label "Estimated Monthly Savings"
      end
      field "savingsCurrency" do
        label "Savings Currency"
      end
      field "tags" do
        label "Tags"
      end
      field "id" do
        label "ID"
        path "snapshotId"
      end
      field "service" do
        label "Service"
      end
    end
  end
end

###############################################################################
# Escalations
###############################################################################

escalation "esc_email" do
  automatic true
  label "Send Email"
  description "Send incident email"
  email $param_email
end

escalation "esc_delete_snapshot" do
  automatic contains($param_automatic_action, "Delete Snapshots")
  label "Delete Snapshots"
  description "Approval to delete all selected snapshots"
  run "delete_snapshots", data, $param_deregister_image, $param_log_to_cm_audit_entries
end

###############################################################################
# Cloud Workflow
###############################################################################

define delete_snapshots($data, $param_deregister_image, $param_log_to_cm_audit_entries) do
  $$debug = $param_log_to_cm_audit_entries == "Yes"
  # $$errors global to append error messages from subtasks
  $$errors = []

  # Images need to be deregistered before snapshots can be deleted
  # Check if Deregister Image parameter is enabled
  if $param_deregister_image == "Yes"
    # Loop through all the old snapshots and deregister the image
    foreach $item in $data do
      if $item['service'] == "EBS"
        sub on_error: skip_error_and_append($item["imageId"]) do
          # Only deregister if snapshot is mapped to an image
          if $item['imageId'] != ""
            call deregisterImageFromSnapshot($item["imageId"], $item["region"], $$errors) retrieve $$errors
          end
        end
      end
    end
  end

  # Images have been deregistered, so we can delete the snapshots
  # Loop through all the old snapshots and delete them
  foreach $item in $data do
    # Run each item in it's own sub task to collect all errors for all items before raising errror
    sub on_error: skip_error_and_append($item["id"]) do
      if $item['service'] == "EBS"
        call ec2_delete_snapshot($item, $$errors) retrieve $$errors
      elsif $item['service'] == "RDS"
        if $item['dbInstanceId'] != ""
          call rds_delete_db_instance_snapshot($item, $$errors) retrieve $$errors
        elsif $item['dbClusterId'] != ""
          call rds_delete_db_cluster_snapshot($item, $$errors) retrieve $$errors
        end
      end
    end
  end

  # Raise error if any errors were collected
  if size($$errors) > 0
    $error = join($$errors, "\n")
    call sys_log("Errors", $error)
    raise $error
  end
end

define deregisterImageFromSnapshot($image, $region, $errors) return $errors do
  $deregister_response = http_request(
    auth: $$auth_aws,
    https: true,
    verb: "get",
    host: "ec2." + $region + ".amazonaws.com",
    href: "/",
    query_strings: {
    "Action": "DeregisterImage",
    "Version": "2016-11-15",
    "ImageId": strip($image)
    }
  )
  call check_response_and_append_if_error($deregister_response, "Deregister Image", $errors) retrieve $errors
  $deregisterResponseResult = $deregister_response["code"]
  if $deregisterResponseResult != 200
    call sys_log("Deregister image snapshot", to_s($deregister_response))
  end
end

define ec2_delete_snapshot($snapshot, $errors) return $errors do
  $delete_response = http_request(
    auth: $$auth_aws,
    https: true,
    verb: "get",
    host: "ec2." + $snapshot["region"] + ".amazonaws.com",
    href: "/",
    query_strings: {
      "Action": "DeleteSnapshot",
      "Version": "2016-11-15",
      "SnapshotId.1": strip($snapshot["id"])
    }
  )
  call check_response_and_append_if_error($delete_response, "Delete Snapshot", $errors) retrieve $errors
  $splitResult = $delete_response["code"]
  if $splitResult != 200
    call sys_log("Inside ec2_delete_snapshot definition", to_s($delete_response))
  end
end

define rds_delete_db_instance_snapshot($snapshot, $errors) return $errors do
  $delete_response = http_request(
    auth: $$auth_aws,
    https: true,
    verb: "get",
    host: 'rds.' + $snapshot["region"] + '.amazonaws.com',
    href: "/",
    headers: {
      "User-Agent": "RS Policies"
    },
    query_strings: {
      'Action': 'DeleteDBSnapshot',
      'Version': '2014-10-31',
      'DBSnapshotIdentifier': strip($snapshot["id"])
    }
  )

  call check_response_and_append_if_error($delete_response, "Delete Snapshot", $errors) retrieve $errors
  $splitResult = $delete_response["code"]
  if $splitResult != 200
    call sys_log("Inside rds_delete_db_instance_snapshot definition", to_s($delete_response))
  end
end

define rds_delete_db_cluster_snapshot($snapshot, $errors) return $errors do
  $delete_response = http_request(
    auth: $$auth_aws,
    https: true,
    verb: "get",
    host: 'rds.' + $snapshot["region"] + '.amazonaws.com',
    href: "/",
    headers: {
      "User-Agent": "RS Policies"
    },
    query_strings: {
      'Action': 'DeleteDBClusterSnapshot',
      'Version': '2014-10-31',
      'DBClusterSnapshotIdentifier': strip($snapshot["id"])
    }
  )

  call check_response_and_append_if_error($delete_response, "Delete Snapshot", $errors) retrieve $errors
  $splitResult = $delete_response["code"]
  if $splitResult != 200
    call sys_log("Inside rds_delete_db_cluster_snapshot definition", to_s($delete_response))
  end
end

define check_response_and_append_if_error($response, $request_description, $errors) return $errors do
  if $response["code"] > 299 || $response["code"] < 200
    $errors << "Unexpected status code from " + $request_description + " request\n  " + to_s($response)
  end
end

define sys_log($subject, $detail) do
  # Create empty errors array if doesn't already exist
  if !$$errors
    $$errors = []
  end
  # Check if debug is enabled
  if $$debug
    # Append to global $$errors
    # This is the suggested way to capture errors
    $$errors << "Unexpected error for " + $subject + "\n  " + to_s($detail)
    # If Flexera NAM Zone, create audit_entries [to be deprecated]
    # This is the legacy method for capturing errors and only supported on Flexera NAM
    if $$rs_optima_host == "api.optima.flexeraeng.com"
      # skip_error_and_append is used to catch error if rs_cm.audit_entries.create fails unexpectedly
      $task_label = "Creating audit entry for " + $subject
      sub task_label: $task, on_error: skip_error_and_append($task) do
        rs_cm.audit_entries.create(
          notify: "None",
          audit_entry: {
            auditee_href: @@account,
            summary: $subject,
            detail: $detail
          }
        )
      end # End sub on_error
    end # End if rs_optima_host
  end # End if debug is enabled
end

define skip_error_and_append($subject) do
  $$errors << "Unexpected error for " + $subject + "\n  " + to_s($_error)
  $_error_behavior = "skip"
end

###############################################################################
# Meta Policy [alpha]
# Not intended to be modified or used by policy developers
###############################################################################

# If the meta_parent_policy_id is not set it will evaluate to an empty string and we will look for the policy itself,
# if it is set we will look for the parent policy.
datasource "ds_get_policy" do
  request do
    auth $auth_flexera
    host rs_governance_host
    ignore_status [404]
    path join(["/api/governance/projects/", rs_project_id, "/applied_policies/", switch(ne(meta_parent_policy_id,""), meta_parent_policy_id, policy_id) ])
    header "Api-Version", "1.0"
  end
  result do
    encoding "json"
    field "id", jmes_path(response, "id")
  end
end


datasource "ds_parent_policy_terminated" do
  run_script $js_decide_if_self_terminate, $ds_get_policy, policy_id, meta_parent_policy_id
end

# If the policy was applied by a meta_parent_policy we confirm it exists if it doesn't we confirm we are deleting
# This information is used in two places:
# - determining whether or not we make a delete call
# - determining if we should create an incident (we don't want to create an incident on the run where we terminate)
script "js_decide_if_self_terminate", type: "javascript" do
  parameters "found", "self_policy_id", "meta_parent_policy_id"
  result "result"
  code <<-EOS
  var result
  if (meta_parent_policy_id != "" && found.id == undefined) {
    result = true
  } else {
    result = false
  }
  EOS
end

# Two potentials ways to set this up:
# - this way and make a unneeded 'get' request when not deleting
# - make the delete request an interate and have it iterate over an empty array when not deleting and an array with one item when deleting
script "js_make_terminate_request", type: "javascript" do
  parameters "should_delete", "policy_id", "rs_project_id", "rs_governance_host"
  result "request"
  code <<-EOS

  var request = {
    auth:  'auth_flexera',
    host: rs_governance_host,
    path: "/api/governance/projects/" + rs_project_id + "/applied_policies/" + policy_id,
    headers: {
      "API-Version": "1.0",
      "Content-Type":"application/json"
    },
  }

  if (should_delete) {
    request.verb = 'DELETE'
  }
  EOS
end

datasource "ds_terminate_self" do
  request do
    run_script $js_make_terminate_request, $ds_parent_policy_terminated, policy_id, rs_project_id, rs_governance_host
  end
end

datasource "ds_is_deleted" do
  run_script $js_check_deleted, $ds_terminate_self
end

# This is just a way to have the check delete request connect to the farthest leaf from policy.
# We want the delete check to the first thing the policy does to avoid the policy erroring before it can decide whether or not it needs to self terminate
# Example a customer deletes a credential and then terminates the parent policy. We still want the children to self terminate
# The only way I could see this not happening is if the user who applied the parent_meta_policy was offboarded or lost policy access, the policies who are impersonating the user
# would not have access to self-terminate
# It may be useful for the backend to enable a mass terminate at some point for all meta_child_policies associated with an id.
script "js_check_deleted", type: "javascript" do
  parameters "response"
  result "result"
  code <<-EOS
  result = {"path":"/"}
  EOS
end

name "AWS Old Snapshots"
rs_pt_ver 20180301
type "policy"
short_description "Checks for snapshots older than a specified number of days and, optionally, deletes them. See the [README](https://github.com/flexera/policy_templates/tree/master/cost/aws/old_snapshots) and [docs.rightscale.com/policies](https://docs.rightscale.com/policies/) to learn more."
category "Cost"
severity "low"
default_frequency "daily"
info(
  version: "2.16",
  provider: "AWS",
  service: "EBS",
  policy_set: "Old Snapshots"
)

###############################################################################
# User inputs
###############################################################################

parameter "param_allowed_regions" do
  type "list"
  label "Allowed Regions"
  allowed_pattern /^([a-zA-Z-_]+-[a-zA-Z0-9-_]+-[0-9-_]+,*|)+$/
  description "A list of allowed regions. See the README for more details"
end

parameter "param_email" do
  type "list"
  label "Email addresses"
  description "A list of email addresses to notify."
end

parameter "snapshot_age" do
  type "number"
  label "Snapshot age"
  default 30
  description "The number of days since the snapshot was created."
  min_value 1
end

parameter "param_deregister_image" do
  type "string"
  label "Deregister Image"
  description "If Yes, the snapshot will be deleted along with the images, and if No the snapshot will not be considered for deletion."
  allowed_values "Yes", "No"
  default "No"
end

parameter "param_exclude_tags" do
  type "list"
  category "User Inputs"
  label "Exclude Tags"
  description "List of tags that a snapshot can have to exclude it from the list."
end

parameter "param_automatic_action" do
  type "list"
  label "Automatic Actions"
  description "When this value is set, this policy will automatically take the selected action(s)"
  allowed_values ["Delete Snapshots"]
end

parameter "param_flexera_org_id_for_optima" do
  type "string"
  label "Flexera One Org ID for Optima"
  description "The Flexera One org ID for Optima queries used to determine estimated costs, by default the current org is used"
  default "current"
  allowed_pattern /^(current|[0-9]+)$/
end

parameter "param_log_to_cm_audit_entries" do
  type "string"
  label "Log to CM Audit Entries"
  description "Boolean for whether or not to log any debugging information from actions to CM Audit Entries, this should be left set to No on Flexera EU"
  default "No"
  allowed_values "Yes", "No"
end

###############################################################################
# Authentication
###############################################################################

#authenticate with AWS
credentials "auth_aws" do
  schemes "aws", "aws_sts"
  label "AWS"
  description "Select the AWS Credential from the list"
  tags "provider=aws"
end

credentials "auth_rs" do
  schemes "oauth2"
  label "flexera"
  description "Select FlexeraOne OAuth2 credentials"
  tags "provider=flexera"
end

###############################################################################
# Pagination
###############################################################################

pagination "aws_pagination_xml" do
  get_page_marker do
    body_path "//DescribeSnapshotsResponse/nextToken"
  end
  set_page_marker do
    query "NextToken"
  end
end

###############################################################################
# Datasources
###############################################################################

datasource "ds_currency_reference" do
  request do
    host "raw.githubusercontent.com"
    path "/rightscale/policy_templates/master/cost/scheduled_reports/currency_reference.json"
    header "User-Agent", "RS Policies"
  end
end

datasource "ds_flexera_optima" do
  run_script $js_flexera_optima, $param_flexera_org_id_for_optima, rs_org_id
end

datasource "ds_currency_code" do
  request do
    auth $auth_rs
    host rs_optima_host
    path join(["/bill-analysis/orgs/", val($ds_flexera_optima, "org_id"), "/settings/currency_code"])
    header "Api-Version", "0.1"
    header "User-Agent", "RS Policies"
  ignore_status [403]
  end
  result do
    encoding "json"
    field "id", jmes_path(response, "id")
    field "value", jmes_path(response, "value")
  end
end

datasource "ds_billing_centers" do
  request do
    auth $auth_rs
    host rs_optima_host
    path join(["/analytics/orgs/", val($ds_flexera_optima, "org_id"), "/billing_centers"])
    header "Api-Version", "1.0"
    header "User-Agent", "RS Policies"
    query "view", "allocation_table"
  ignore_status [403]
  end
  result do
    encoding "json"
    collect jmes_path(response, "[*]") do
      field "href", jmes_path(col_item, "href")
      field "id", jmes_path(col_item, "id")
      field "name", jmes_path(col_item, "name")
      field "parent_id", jmes_path(col_item, "parent_id")
    end
  end
end

datasource "ds_top_level_billing_centers" do
  run_script $js_top_level_bc, $ds_billing_centers
end

datasource "ds_snapshot_costs" do
  request do
    run_script $js_get_costs, $ds_get_caller_identity, $ds_top_level_billing_centers, val($ds_flexera_optima, "org_id"), rs_optima_host
  end
  result do
    encoding "json"
    collect jmes_path(response, "rows[*]") do
      field "resource_id", jmes_path(col_item, "dimensions.resource_id")
      field "cost_nonamortized_unblended_adj", jmes_path(col_item, "metrics.cost_nonamortized_unblended_adj")
    end
  end
end

#Get list of enabled regions for an account
datasource "ds_regions_list" do
  request do
    auth $auth_aws
    verb "GET"
    host "ec2.amazonaws.com"
    path "/"
    query "Action", "DescribeRegions"
    query "Version", "2016-11-15"
  end
  result do
    encoding "xml"
    collect xpath(response, "//DescribeRegionsResponse/regionInfo/item", "array") do
      field "region", xpath(col_item, "regionName")
    end
  end
end

# Get only SCP enabled regions
datasource "ds_regions" do
  run_script $js_regions, $param_allowed_regions, $ds_regions_list
end

datasource "ds_get_caller_identity" do
  request do
    auth $auth_aws
    verb "GET"
    host "sts.amazonaws.com"
    path "/"
    header "User-Agent", "RS Policies"
    query "Action", "GetCallerIdentity"
    query "Version", "2011-06-15"
  end
  result do
    encoding "xml"
    collect xpath(response, "//GetCallerIdentityResponse/GetCallerIdentityResult") do
      field "account", xpath(col_item, "Account")
    end
  end
end

datasource "ds_describe_snapshots" do
  iterate $ds_regions
  request do
    run_script $js_describe_snapshots, val(iter_item,"region"), $ds_get_caller_identity
  end
  result do
    encoding "xml"
    collect xpath(response, "//DescribeSnapshotsResponse/snapshotSet/item", "array") do
      field "tags" do
        collect xpath(col_item, "tagSet/item") do
          field "tagKey", xpath(col_item, "key")
          field "tagValue", xpath(col_item, "value")
        end
      end
      field "region", val(iter_item, "region")
      field "snapshotId", xpath(col_item, "snapshotId")
      field "startTime", xpath(col_item, "startTime")
      field "ownerId", xpath(col_item, "ownerId")
      field "volumeSize", xpath(col_item, "volumeSize")
    end
  end
end

datasource "ds_filter_old_snapshots" do
  run_script $js_filter_old_snapshots, $snapshot_age, $ds_describe_snapshots, $param_exclude_tags
end

datasource "ds_get_snapshot_ami" do
  iterate $ds_filter_old_snapshots
  request do
    run_script $js_get_snapshot_ami, val(iter_item, "snapshotId"), val(iter_item, "region")
  end
  result do
    encoding "xml"
    collect xpath(response, "//DescribeImagesResponse/imagesSet/item", "array") do
      field "imageId", xpath(col_item, "imageId")
      field "region", val(iter_item, "region")
      field "snapshotId", val(iter_item, "snapshotId")
      field "tagKeyValue", val(iter_item, "tagKeyValue")
      field "daysOld", val(iter_item, "daysOld")
      field "volumeSize", val(iter_item, "volumeSize")
    end
  end
end

datasource "ds_filter_ami_snapshots" do
  run_script $js_filter_ami_snapshots, $ds_get_snapshot_ami, $ds_filter_old_snapshots, $ds_get_caller_identity
end

datasource "ds_snapshots_cost_mapping" do
  run_script $js_snapshots_cost_mapping, $ds_filter_ami_snapshots, $ds_snapshot_costs, $ds_currency_code, $ds_currency_reference, $ds_billing_centers, $ds_get_caller_identity
end

###############################################################################
# Scripts
###############################################################################

script "js_regions", type: "javascript" do
  parameters "user_entered_regions", "all_regions"
  result "regions"
  code <<-EOS
    if(_.isEmpty(user_entered_regions)){
      regions = all_regions;
    }else{
      //Filter unique regions
      var uniqueRegions = _.uniq(user_entered_regions);
      var all_regions_list = [];
      all_regions.forEach(function(all_region){
        all_regions_list.push(all_region.region)
      })

      //Filter valid regions
      var valid_regions = [];
      _.map(uniqueRegions, function(uniqueRegion){
        if(all_regions_list.indexOf(uniqueRegion) > -1){
          valid_regions.push({"region": uniqueRegion})
        }
      })

      //Throw an error if no valid regions found
      if (_.isEmpty(valid_regions)) {
        regions = all_regions;
      }else{
        regions = valid_regions
      }
    }
  EOS
end

script "js_flexera_optima", type: "javascript" do
  parameters "flexera_org_id_for_optima", "current_flexera_org_id"
  result "flexera_optima"
  code <<-EOS
  var flexera_optima = {
    org_id: flexera_org_id_for_optima == "current" ? current_flexera_org_id : flexera_org_id_for_optima,
  };
  EOS
end

script "js_top_level_bc", type: "javascript" do
  parameters "billing_centers"
  result "filtered_billing_centers"
  code <<-EOS
     var filtered_billing_centers =_.reject(billing_centers, function(bc){ return bc.parent_id != null });
  EOS
end

script "js_get_costs", type: "javascript" do
  parameters "account_id", "billing_centers", "org", "optima_host"
  result "request"
  code <<-EOS
    // returns date formatted as string: YYYY-mm-dd
    function getFormattedDailyDate(date) {
      var year = date.getFullYear();
      var month = (1 + date.getMonth()).toString();
      month = month.length > 1 ? month : '0' + month;
      var day = date.getDate().toString();
      day = day.length > 1 ? day : '0' + day;
      return year + '-' + month + '-' + day;
    }

    var start_date = getFormattedDailyDate(new Date(new Date().setDate(new Date().getDate() - 3)));
    var end_date = getFormattedDailyDate(new Date(new Date().setDate(new Date().getDate() - 2)));

    var request = {
      auth: "auth_rs",
      host: optima_host,
      verb: "POST",
      path: "/bill-analysis/orgs/" + org + "/costs/select",
      body_fields: {
        "dimensions": ["resource_id"],
        "granularity": "day",
        "start_at": start_date,
        "end_at": end_date,
        "metrics": ["cost_nonamortized_unblended_adj"],
        "billing_center_ids": _.compact(_.map(billing_centers, function(value){ return value.id})),
        "limit": 10000,
        "filter": {
          "expressions": [
            {
              "dimension": "service",
              "type": "equal",
              "value": "AmazonEC2"
            },
            {
              "dimension": "resource_type",
              "type": "equal",
              "value": "Storage Snapshot"
            },
            {
              "dimension": "vendor_account",
              "type": "equal",
              "value": account_id[0]["account"]
            }
          ],
          "type": "and"
        }
      },
      headers: {
        "User-Agent": "RS Policies",
        "Api-Version": "1.0"
      },
      ignore_status: [400]
    }
  EOS
end

script "js_snapshots_cost_mapping", type: "javascript" do
  parameters "snapshots", "snapshot_costs", "ds_currency_code", "ds_currency_reference", "ds_billing_centers", "ds_get_caller_identity"
  result "results"
  code <<-EOS

  var result = [];
  var results={};

  function formatNumber(number, separator){
    var numString =number.toString();
    var values=numString.split(".");
    var result = ''
    while (values[0].length > 3){
      var chunk = values[0].substr(-3)
      values[0] = values[0].substr(0, values[0].length - 3)
      result = separator + chunk + result
    }
    if (values[0].length > 0){
      result = values[0] + result
    }
    if(values[1]==undefined){
      return result;
    }
    return result+"."+values[1];
  }
  if (ds_billing_centers.length!=0){
    // Put costs into a map by resource ID and only include them for resource IDs we actually need
    var costs_by_resource_id = {};
    _.each(snapshots, function(snapshot) {
      costs_by_resource_id[snapshot.formatSnapId] = [];
    });
    _.each(snapshot_costs, function(cost) {
      var costs = costs_by_resource_id[cost.resource_id];
      if (costs != null) {
        costs.push(cost);
      }
    });
    // Format costs with currency symbol and thousands separator
    if( ds_currency_code['value'] !== undefined ) {
      if (ds_currency_reference[ds_currency_code['value']] !== undefined ) {
        var cur = ds_currency_reference[ds_currency_code['value']]['symbol']
        if( ds_currency_reference[ds_currency_code['value']]['t_separator'] !== undefined ) {
          var separator = ds_currency_reference[ds_currency_code['value']]['t_separator']
        } else {
          var separator = ""
        }
      } else {
        var cur = ""
        var separator = ""
      }
    } else {
      var cur = "$"
      var separator = ","
    }
  }
  var total=0;
  _.each(snapshots, function(snapshot){
    var cost_objects = costs_by_resource_id[snapshot.formatSnapId];
    if (ds_billing_centers.length != 0 && _.size(cost_objects) > 0){
      var sum = _.reduce(_.compact(_.map(cost_objects, function(value){ return value.cost_nonamortized_unblended_adj})), function(memo, num){ return memo + num; }, 0);
      var monthly_savings = sum*30;
      total=total+monthly_savings;
      result.push({
        accountId: ds_get_caller_identity[0]['account'],
        snapshotId : snapshot['snapshotId'],
        region : snapshot['region'],
        tagKeyValue : snapshot['tagKeyValue'],
        daysOld : snapshot['daysOld'],
        imageId : snapshot['imageId'],
        snapshotImageIdFormat : snapshot['snapshotImageIdFormat'],
        savings : cur + ' '+formatNumber(monthly_savings.toFixed(3), separator),
        volumeSize : snapshot['volumeSize']
      })
    } else {
      result.push({
        accountId: ds_get_caller_identity[0]['account'],
        snapshotId : snapshot['snapshotId'],
        region : snapshot['region'],
        tagKeyValue : snapshot['tagKeyValue'],
        daysOld : snapshot['daysOld'],
        imageId : snapshot['imageId'],
        snapshotImageIdFormat : snapshot['snapshotImageIdFormat'],
        savings: "N/A",
        volumeSize : snapshot['volumeSize']
      })
    }
  })

  if (ds_billing_centers.length!=0){
    var total_savings=cur + ' '+formatNumber(total.toFixed(3), separator);
    var message="The total estimated monthly savings are "+ total_savings;
  } else {
    var message="You do not have the minimum required role of billing_center_viewer to view the savings";
  }
  results={
    "result": result,
    "message": message
  };
  EOS
end

script "js_describe_snapshots", type: "javascript" do
  result "results"
  parameters "region", "ds_get_caller_identity"
  code <<-EOS
    results = {
        "auth": "auth_aws",
        "host": 'ec2.'+region+'.amazonaws.com',
        "verb": "GET",
        "path": "/",
        "pagination": "aws_pagination_xml",
        "headers": {
           "User-Agent": "RS Policies",
           "Content-Type": "text/xml"
        },
        "query_params": {
           'Action': 'DescribeSnapshots',
           'Version': '2016-11-15',
           'Filter.1.Name': 'status',
           'Filter.1.Value.1': 'completed',
           'Filter.2.Name': 'owner-id',
           'Filter.2.Value.1': ds_get_caller_identity[0]['account']
        }
    }
  EOS
end

script "js_filter_old_snapshots", type: "javascript" do
  result "results"
  parameters "snapshot_age", "ds_describe_snapshots", "param_exclude_tags"
  code <<-EOS
    var param_exclude_tags_lower=[];
    for(var j=0;j<param_exclude_tags.length;j++){
        param_exclude_tags_lower[j] = param_exclude_tags[j].toString().toLowerCase();
    }
    var results = [];
    for(var i=0; i < ds_describe_snapshots.length; i++){
      var snapshot = ds_describe_snapshots[i];
      // Check, if the tag present in entered param_exclude_tags, ignore the snapshot if tag matches/present
      var tags = snapshot['tags'];
      var isTagMatched = false;
      var tagKeyValue = "";
      for(var k=0; k < tags.length; k++){
        tag = tags[k];
        if((param_exclude_tags_lower.indexOf((tag['tagKey']).toLowerCase()) !== -1) || (param_exclude_tags_lower.indexOf((tag['tagKey']+'='+tag['tagValue']).toLowerCase()) !== -1)){
          isTagMatched = true;
        }

        // Constructing tags with comma separated to display in detail_template
        if((tag['tagValue']).length > 0){
          tagKeyValue = tagKeyValue+" , "+tag['tagKey']+'='+tag['tagValue'];
        }else{
          tagKeyValue = tagKeyValue+" , "+tag['tagKey'];
        }
      }

      if(tagKeyValue === "" || tagKeyValue === " " || tagKeyValue == ""){
        tagKeyValue = "   < No Value >";
      }

      if(!(isTagMatched)){
        var snapshotTime = Date.parse(snapshot['startTime']);
        var daysOld = (new Date().getTime() - new Date(snapshotTime).getTime()) / (1000 * 3600 * 24);
        daysOld = Math.round(daysOld);
        if(daysOld > snapshot_age){
          results.push({
            snapshotId : snapshot['snapshotId'],
            region : snapshot['region'],
            tagKeyValue : (tagKeyValue.slice(2)),
            daysOld : daysOld,
            volumeSize : snapshot['volumeSize']
          })
        }
      }
    }
    results = _.sortBy(results,'region');
    results = _.sortBy(results,'daysOld');
  EOS
end

script "js_get_snapshot_ami", type: "javascript" do
  result "results"
  parameters "snapshotId", "region"
  code <<-EOS
    results = {
      "auth": "auth_aws",
      "host": 'ec2.'+region+'.amazonaws.com',
      "verb": "GET",
      "path": "/",
      "headers": {
         "User-Agent": "RS Policies",
         "Content-Type": "text/xml"
      },
      "query_params": {
         'Action': 'DescribeImages',
         'Version': '2016-11-15',
         'Filter.1.Name': 'block-device-mapping.snapshot-id',
         'Filter.1.Value.1': snapshotId
        }
     }
   EOS
end

script "js_filter_ami_snapshots", type: "javascript" do
  result "results"
  parameters "snapshotImagesList", "snapshotsList", "ds_get_caller_identity"
  code <<-EOS
    var results = [];
    var snapshotImageIds = [];
    var snapshotImageIdFormat = "";
    for(var i=0; i < snapshotsList.length; i++){
      var snapshot = snapshotsList[i];
      for(var j=0; j < snapshotImagesList.length; j++){
        var snapshotImage = snapshotImagesList[j];
        if(snapshot['snapshotId'] === snapshotImage['snapshotId']){
          snapshotImageIdFormat += snapshotImage['imageId']+", ";
          snapshotImageIds.push(snapshotImage['imageId'])
        }
      }
      results.push({
        snapshotId : snapshot['snapshotId'],
        formatSnapId : "snapshot/"+snapshot['snapshotId'],
        region : snapshot['region'],
        tagKeyValue : snapshot['tagKeyValue'],
        daysOld : snapshot['daysOld'],
        accountId: ds_get_caller_identity[0]['account'],
        imageId : snapshotImageIds,
        snapshotImageIdFormat : (snapshotImageIdFormat.slice(0,snapshotImageIdFormat.length - 2)),
        volumeSize: snapshot['volumeSize']
      })
      snapshotImageIds = [];
      snapshotImageIdFormat = "";
    }
  EOS
end

###############################################################################
# Policy
###############################################################################

policy "pol_utilization" do
  validate $ds_snapshots_cost_mapping do
    summary_template "AWS Account ID: {{with index data.result 0}}{{ .accountId }}{{end}} - {{ len data.result }} rows containing AWS old snapshot data"
    detail_template <<-EOS
The following {{ len data.result }} old snapshots, for AWS Account: {{with index data.result 0}}{{ .accountId }}{{end}}, have exceeded the specified age of: {{ parameters.snapshot_age }} days old.

{{data.message}}
EOS
    escalate $ese_email
    escalate $esc_delete_snapshot
    check eq(size(val(data, "result")), 0)
    export "result" do
      resource_level true
      field "accountId" do
        label "Account Id"
      end
      field "region" do
        label "Region"
      end
      field "daysOld" do
        label "Days Old"
      end
      field "volumeSize" do
        label "Size"
      end
      field "id" do
        label "Snapshot Id"
        path "snapshotId"
      end
      field "snapshotImageIdFormat" do
        label "AMI"
      end
      field "savings" do
        label "Estimated Monthly Savings"
      end
      field "tagKeyValue" do
        label "Tags"
      end
    end
  end
end

###############################################################################
# Escalations
###############################################################################

escalation "ese_email" do
  automatic true
  label "Send Email"
  description "Send incident email"
  email $param_email
end

escalation "esc_delete_snapshot" do
  automatic contains($param_automatic_action, "Delete Snapshots")
  label "Delete Snapshots"
  description "Approval to delete all selected snapshots"
  run "take_action", data, $param_deregister_image, $param_log_to_cm_audit_entries
end

###############################################################################
# Cloud Workflow
###############################################################################

define take_action($data, $param_deregister_image, $param_log_to_cm_audit_entries) do
  $$debug = $param_log_to_cm_audit_entries == "Yes"
  $$errors = []
  foreach $item in $data do
    sub on_error: skip_error_and_append($item["id"]) do
      $image_ids = []

      if $item["snapshotImageIdFormat"] != ""
        $image_ids = split($item["snapshotImageIdFormat"], ",")
      end

      if $param_deregister_image == "Yes"
        call deregisterImageFromSnapshot($image_ids, $item["region"], $$errors) retrieve $$errors
        call delete_snapshot($item, $$errors) retrieve $$errors
      elsif $param_deregister_image == "No"
        if empty?($image_ids)
          call delete_snapshot($item, $$errors) retrieve $$errors
        end
      end
    end
  end
  if size($$errors) > 0
    $error = join($$errors, "\n")
    call sys_log("Errors", $error)
    raise $error
  end
end

define deregisterImageFromSnapshot($item, $region, $errors) return $errors do
  foreach $image in $item do
    $deregister_response = http_request(
      auth: $$auth_aws,
      https: true,
      verb: "get",
      host: "ec2." + $region + ".amazonaws.com",
      href: "/",
      query_strings: {
      "Action": "DeregisterImage",
      "Version": "2016-11-15",
      "ImageId": strip($image)
      }
    )
    call check_response_and_append_if_error($deregister_response, "Deregister Image", $errors) retrieve $errors
    $deregisterResponseResult = $deregister_response["code"]
    if $deregisterResponseResult != 200
      call sys_log("Deregister image snapshot", to_s($deregister_response))
    end
  end
end

define delete_snapshot($item, $errors) return $errors do
  $delete_response = http_request(
    auth: $$auth_aws,
    https: true,
    verb: "get",
    host: "ec2." + $item["region"] + ".amazonaws.com",
    href: "/",
    query_strings: {
      "Action": "DeleteSnapshot",
      "Version": "2016-11-15",
      "SnapshotId.1": strip($item["id"])
    }
  )
  call check_response_and_append_if_error($delete_response, "Delete Snapshot", $errors) retrieve $errors
  $splitResult = $delete_response["code"]
  if $splitResult != 200
   call sys_log("Inside delete_snapshot definition", to_s($delete_response))
  end
end

define skip_error_and_append($subject) do
  $$errors << "Unexpected error for " + $subject + "\n  " + to_s($_error)
  $_error_behavior = "skip"
end

define check_response_and_append_if_error($response, $request_description, $errors) return $errors do
  if $response["code"] > 299 || $response["code"] < 200
    $errors << "Unexpected status code from " + $request_description + " request\n  " + to_s($response)
  end
end

define sys_log($subject, $detail) on_error: skip_error_and_append("Creating audit entry for " + $subject) do
  if $$debug
    rs_cm.audit_entries.create(
      notify: "None",
      audit_entry: {
        auditee_href: @@account,
        summary: "AWS Old Snapshots Policy :- " + $subject,
        detail: $detail
      }
    )
  end
end

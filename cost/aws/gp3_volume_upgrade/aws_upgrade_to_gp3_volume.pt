name "AWS GP3 Upgradeable Volumes"
rs_pt_ver 20180301
type "policy"
short_description "Checks for upgradeable volumes and report them for modification. See the [README](https://github.com/flexera/policy_templates/tree/master/cost/aws/gp3_volume_upgrade) and [docs.flexera.com/flexera/EN/Automation](https://docs.flexera.com/flexera/EN/Automation/AutomationGS.htm) to learn more."
category "Cost"
severity "low"
default_frequency "daily"
info(
  version: "2.3",
  provider: "AWS",
  service: "EBS",
  policy_set: "GP3 Volumes"
)

###############################################################################
# User inputs
###############################################################################

parameter "param_allowed_regions" do
  type "list"
  label "Allowed Regions"
  allowed_pattern /^([a-zA-Z-_]+-[a-zA-Z0-9-_]+-[0-9-_]+,*|)+$/
  description "A list of allowed regions. See the README for more details"
end

parameter "param_email" do
  type "list"
  label "Email addresses"
  description "A list of email addresses to notify."
end

parameter "param_exclude_tags" do
  type "list"
  category "User Inputs"
  label "Exclude Tags"
  description "A list of tags used to excluded volumes from the incident."
end

parameter "param_aws_edp_percentage" do
  type "number"
  label "AWS EDP Percentage"
  description "The AWS Enterprise Discount Program percentage, by default this is calculated from Flexera Optima costs"
  default -1
  min_value -1
  max_value 100
end

parameter "param_flexera_org_id_for_optima" do
  type "string"
  label "Flexera One Org ID for Optima"
  description "The Flexera One org ID for Optima queries used to determine estimated costs, by default the current org is used"
  default "current"
  allowed_pattern /^(current|[0-9]+)$/
end

parameter "param_log_to_cm_audit_entries" do
  type "string"
  label "Log to CM Audit Entries"
  description "Boolean for whether or not to log any debugging information from actions to CM Audit Entries, this should be left set to No on Flexera EU"
  default "No"
  allowed_values "Yes", "No"
end

###############################################################################
# Authentication
###############################################################################

#Authenticate with AWS
credentials "auth_aws" do
  schemes "aws", "aws_sts"
  label "AWS"
  description "Select the AWS Credential from the list"
  tags "provider=aws"
end

auth "auth_rs", type: "rightscale"

###############################################################################
# Pagination
###############################################################################

pagination "pagination_aws_volumes_xml" do
  get_page_marker do
    body_path "//DescribeVolumesResponse/nextToken"
  end
  set_page_marker do
    query "NextToken"
  end
end

pagination "pagination_aws_products" do
  get_page_marker do
    body_path "NextToken"
  end
  set_page_marker do
    body_field "NextToken"
  end
end

###############################################################################
# Datasource
###############################################################################

# Get list of enabled regions for an account
datasource "ds_regions_list" do
  request do
    auth $auth_aws
    verb "GET"
    host "ec2.amazonaws.com"
    path "/"
    query "Action", "DescribeRegions"
    query "Version", "2016-11-15"
  end
  result do
    encoding "xml"
    collect xpath(response, "//DescribeRegionsResponse/regionInfo/item", "array") do
      field "region", xpath(col_item, "regionName")
    end
  end
end

# Get only SCP enabled regions
datasource "ds_regions" do
  run_script $js_regions, $param_allowed_regions, $ds_regions_list
end

# Get list of gp2, io1, and io2 Volumes.
datasource "ds_superseded_volumes_list" do
  iterate $ds_regions
  request do
    auth $auth_aws
    pagination $pagination_aws_volumes_xml
    host join(["ec2.",val(iter_item, "region"),".amazonaws.com"])
    verb "GET"
    path "/"
    query "Action", "DescribeVolumes"
    query "Version", "2016-11-15"
    query "Filter.1.Name", "status"
    query "Filter.1.Value.1", "available"
    query "Filter.1.Value.2", "in-use"
    query "Filter.2.Name", "volume-type"
    query "Filter.2.Value.1", "gp2"
    query "Filter.2.Value.2", "io1"
    query "Filter.2.Value.3", "io2"
  end
  result do
    encoding "xml"
    collect xpath(response, "//DescribeVolumesResponse/volumeSet/item", "array") do
      field "tags" do
        collect xpath(col_item, "tagSet/item") do
          field "tagKey", xpath(col_item, "key")
          field "tagValue", xpath(col_item, "value")
        end
      end
      field "volume_id", xpath(col_item, "volumeId")
      field "availability_zone", xpath(col_item, "availabilityZone")
      field "snapshot_id", xpath(col_item, "snapshotId")
      field "volume_type", xpath(col_item, "volumeType")
      field "region", val(iter_item, "region")
      field "createdTime", xpath(col_item, "createTime")
      field "size", xpath(col_item, "size")
      field "iops", xpath(col_item, "iops")
      field "status", xpath(col_item, "status")
    end
  end
end

datasource "ds_superseded_volumes" do
  run_script $js_filter_aws_superseded_volumes, $ds_superseded_volumes_list, $param_exclude_tags
end

datasource "ds_volume_types" do
  run_script $js_volume_types, $ds_superseded_volumes
end

datasource "ds_aws_products" do
  iterate $ds_volume_types
  request do
    auth $auth_aws
    pagination $pagination_aws_products
    host "api.pricing.us-east-1.amazonaws.com"
    verb "POST"
    path "/"
    header "Content-Type", "application/x-amz-json-1.1"
    header "X-Amz-Target", "AWSPriceListService.GetProducts"
    body_field "Filters", [{Field: "volumeApiName", Type: "TERM_MATCH", Value: iter_item}]
    body_field "ServiceCode", "AmazonEC2"
  end
  result do
    collect jq(response, '.PriceList[] | fromjson') do
      field 'max_iops_volume', jq(col_item, '.product.attributes.maxIopsvolume')
      field 'price_per_unit', jq(col_item, '.terms.OnDemand[].priceDimensions[].pricePerUnit.USD')
      field 'region', jq(col_item, '.product.attributes.regionCode')
      field 'usage_type', jq(col_item, '.product.attributes.usagetype')
      field 'volume_type', iter_item
    end
  end
end

datasource "ds_flexera_optima" do
  run_script $js_flexera_optima, $param_flexera_org_id_for_optima, rs_org_id
end

datasource "ds_billing_centers" do
  request do
    auth $auth_rs
    host rs_optima_host
    path join(["/analytics/orgs/", val($ds_flexera_optima, "org_id"), "/billing_centers"])
    header "Api-Version", "1.0"
    header "User-Agent", "RS Policies"
    query "view", "allocation_table"
    ignore_status [403]
  end
  result do
    encoding "json"
    collect jmes_path(response, "[*]") do
      field "href", jmes_path(col_item, "href")
      field "id", jmes_path(col_item, "id")
      field "name", jmes_path(col_item, "name")
      field "parent_id", jmes_path(col_item, "parent_id")
    end
  end
end

datasource "ds_top_level_billing_centers" do
  run_script $js_top_level_bc, $ds_billing_centers
end

datasource "ds_get_caller_identity" do
  request do
    auth $auth_aws
    verb "GET"
    host "sts.amazonaws.com"
    path "/"
    header "User-Agent", "RS Policies"
    query "Action", "GetCallerIdentity"
    query "Version", "2011-06-15"
  end
  result do
    encoding "xml"
    collect xpath(response, "//GetCallerIdentityResponse/GetCallerIdentityResult") do
      field "account", xpath(col_item, "Account")
    end
  end
end

datasource "ds_volume_costs" do
  request do
    run_script $js_get_costs, $ds_get_caller_identity, $ds_top_level_billing_centers, val($ds_flexera_optima, "org_id"), rs_optima_host
  end
  result do
    encoding "json"
    collect jmes_path(response, "rows[*]") do
      field "resource_id", jmes_path(col_item, "dimensions.resource_id")
      field "cost_nonamortized_unblended_adj", jmes_path(col_item, "metrics.cost_nonamortized_unblended_adj")
    end
  end
end

datasource "ds_volume_cost_mapping" do
  run_script $js_volume_cost_mapping, $ds_superseded_volumes, $param_aws_edp_percentage, $ds_aws_products, $ds_volume_costs, $ds_billing_centers, $ds_get_caller_identity
end

###############################################################################
# Script
###############################################################################

script "js_regions", type: "javascript" do
  parameters "user_entered_regions", "all_regions"
  result "regions"
  code <<-EOS
    if(_.isEmpty(user_entered_regions)){
      regions = all_regions;
    }else{
      //Filter unique regions
      var uniqueRegions = _.uniq(user_entered_regions);
      var all_regions_list = [];
      all_regions.forEach(function(all_region){
        all_regions_list.push(all_region.region)
      })

      //Filter valid regions
      var valid_regions = [];
      _.map(uniqueRegions, function(uniqueRegion){
        if(all_regions_list.indexOf(uniqueRegion) > -1){
          valid_regions.push({"region": uniqueRegion})
        }
      })

      //Throw an error if no valid regions found
      if (_.isEmpty(valid_regions)) {
        regions = all_regions;
      }else{
        regions = valid_regions
      }
    }
  EOS
end

script "js_filter_aws_superseded_volumes", type: "javascript" do
  parameters "ds_superseded_volumes_list", "param_exclude_tags"
  result "content"
  code <<-EOS
  var param_exclude_tags_lower = _.map(param_exclude_tags, function(tag) {
    return tag.toString().toLowerCase();
  });
  var content = [];
  _.each(ds_superseded_volumes_list, function(vol) {
    // Check, if the tag present in entered param_exclude_tags, ignore the volume if the tag matches/present.
    var tags = vol['tags'];
    var isTagMatched = false;
    var tagKeyValue = "";
    _.each(tags, function(tag) {
      if((param_exclude_tags_lower.indexOf((tag['tagKey']).toLowerCase()) !== -1) || (param_exclude_tags_lower.indexOf((tag['tagKey']+'='+tag['tagValue']).toLowerCase()) !== -1)){
        isTagMatched = true;
      }

      // Constructing tags with comma separated to display in detail_template
      if((tag['tagValue']).length > 0){
        tagKeyValue = tagKeyValue+" , "+tag['tagKey']+'='+tag['tagValue'];
      }else{
        tagKeyValue = tagKeyValue+" , "+tag['tagKey'];
      }
    });
    if(tagKeyValue === "" || tagKeyValue === " " || tagKeyValue == ""){
      tagKeyValue = "   < No Value >";
    }
    // If the volume tag does not match with entered param_exclude_tags
    if(!(isTagMatched)){
      vol = _.clone(vol);
      vol.tagKeyValue = tagKeyValue.slice(2);
      vol.size = vol.size+" GB";
      content.push(vol);
    }
  });
  EOS
end

script "js_volume_types", type: "javascript", type: "javascript" do
  parameters "volumes"
  result "types"
  code <<-EOS
  var type_set = {gp3: "gp3"};
  _.each(volumes, function (volume) {
    return type_set[volume.volume_type] = volume.volume_type;
  });
  var types = _.sortBy(type_set, _.identity);
  EOS
end

script "js_flexera_optima", type: "javascript" do
  parameters "flexera_org_id_for_optima", "current_flexera_org_id"
  result "flexera_optima"
  code <<-EOS
  var flexera_optima = {
    org_id: flexera_org_id_for_optima == "current" ? current_flexera_org_id : flexera_org_id_for_optima,
  };
  EOS
end

script "js_top_level_bc", type: "javascript" do
  parameters "billing_centers"
  result "filtered_billing_centers"
  code <<-EOS
  var filtered_billing_centers =
    _.reject(billing_centers, function(bc){ return bc.parent_id != null });
  EOS
end

script "js_get_costs", type: "javascript" do
  parameters "account_id", "billing_centers", "org", "optima_host"
  result "request"
  code <<-EOS
    // returns date formatted as string: YYYY-mm-dd
    function getFormattedDailyDate(date) {
      var year = date.getFullYear();
      var month = (1 + date.getMonth()).toString();
      month = month.length > 1 ? month : '0' + month;
      var day = date.getDate().toString();
      day = day.length > 1 ? day : '0' + day;
      return year + '-' + month + '-' + day;
    }

    var start_date = getFormattedDailyDate(new Date(new Date().setDate(new Date().getDate() - 4)));
    var end_date = getFormattedDailyDate(new Date(new Date().setDate(new Date().getDate() - 3)));

    var request = {
      auth: "auth_rs",
      host: optima_host,
      verb: "POST",
      path: "/bill-analysis/orgs/" + org + "/costs/select",
      body_fields: {
        "dimensions": ["resource_id"],
        "granularity": "day",
        "start_at": start_date,
        "end_at": end_date,
        "metrics": ["cost_nonamortized_unblended_adj"],
        "billing_center_ids": _.compact(_.map(billing_centers, function(value){ return value.id})),
        "limit": 10000,
        "filter": {
          "expressions": [
            {
              "dimension": "service",
              "type": "equal",
              "value": "AmazonEC2"
            },
            {
              "dimension": "resource_type",
              "type": "equal",
              "value": "Storage"
            },
            {
              "dimension": "vendor_account",
              "type": "equal",
              "value": account_id[0]["account"]
            }
          ],
          "type": "and"
        }
      },
      headers: {
        "User-Agent": "RS Policies",
        "Api-Version": "1.0"
      },
      ignore_status: [400]
    }
  EOS
end

script "js_volume_cost_mapping", type:"javascript" do
  parameters "volumes", "aws_edp_percentage", "aws_products", "volume_costs", "ds_billing_centers", "ds_get_caller_identity"
  result "result"
  code <<-EOS
  // map the prices by region and type for easy lookup
  var prices_by_region_and_type = {}, iops_prices_by_region_and_type = {}, max_iops_volume_by_region_and_type = {};
  _.each(volumes, function (volume) {
    if (prices_by_region_and_type[volume.region] == null) {
      prices_by_region_and_type[volume.region] = {};
      iops_prices_by_region_and_type[volume.region] = {};
      max_iops_volume_by_region_and_type[volume.region] = {};
    }
  });
  _.each(aws_products, function (product) {
    if (/EBS:VolumeUsage/.test(product.usage_type)) {
      var prices_by_type = prices_by_region_and_type[product.region];
      if (prices_by_type != null) {
        prices_by_type[product.volume_type] = parseFloat(product.price_per_unit);
        if (product.max_iops_volume != null) {
          max_iops_volume_by_region_and_type[product.region][product.volume_type] = parseInt(product.max_iops_volume);
        }
      }
    } else if (/EBS:VolumeP-IOPS/.test(product.usage_type) && !/\\.tier\\d+$/.test(product.usage_type)) {
      var iops_prices_by_type = iops_prices_by_region_and_type[product.region];
      if (iops_prices_by_type != null) {
        iops_prices_by_type[product.volume_type] = parseFloat(product.price_per_unit);
      }
    }
  });
  // calculate the gp3 savings ratios for the other types by region
  var gp3_savings_ratios_by_region_and_type = {};
  _.each(prices_by_region_and_type, function(prices_by_type, region) {
    var gp3_savings_ratios_by_type = gp3_savings_ratios_by_region_and_type[region] = {};
    var gp3_price = prices_by_type["gp3"];
    _.each(prices_by_type, function(price, type) {
      if (type != "gp3") {
        gp3_savings_ratios_by_type[type] = gp3_price / price;
      }
    });
  });
  var upgradeable_volumes=[];
  var result = {};
  var message='';
  var count=0;
  function formatNumber(number, separator){
    var numString =number.toFixed(2);
    var values=numString.split(".");
    var result = ''
    while (values[0].length > 3){
      var chunk = values[0].substr(-3)
      values[0] = values[0].substr(0, values[0].length - 3)
      result = separator + chunk + result
    }
    if (values[0].length > 0){
      result = values[0] + result
    }
    if(values[1]==undefined){
      return result;
    }
    return result+"."+values[1];
  }
  // calculate the discount ratio from Optima costs unless a positive AWS EDP percentage has been specified
  var discount_ratio, discount_percentage_string;
  if (aws_edp_percentage < 0) {
    if(ds_billing_centers.length!=0){
      // Put costs into a map by resource ID and only include them for resource IDs we actually need
      var costs_by_resource_id = {};
      _.each(volumes, function(volume) {
        costs_by_resource_id[volume.volume_id] = [];
      });
      _.each(volume_costs, function(cost) {
        var costs = costs_by_resource_id[cost.resource_id];
        if (costs != null) {
          costs.push(cost);
        }
      });
      var discount_ratios = [];
      _.each(volumes, function(volume) {
        var costs = costs_by_resource_id[volume.volume_id];
        var price = _.reduce(costs, function(memo, cost) { return memo + cost.cost_nonamortized_unblended_adj; }, 0) * 30 / parseInt(volume.size);
        if (price > 0) {
          discount_ratios.push(price / prices_by_region_and_type[volume.region][volume.volume_type]);
        }
      });
      if (discount_ratios.length > 0) {
        discount_ratio = _.reduce(discount_ratios, function(memo, ratio) { return memo + ratio; }) / discount_ratios.length;
        discount_percentage = aws_edp_percentage = 100 - discount_ratio * 100;
        discount_percentage_string = discount_percentage.toFixed(1).replace(/\\.0$/, '') + "% calculated from Flexera Optima costs";
        discount_calculated = true;
      } else {
        discount_ratio = 1;
        discount_percentage = 0;
        discount_percentage_string = "0% since the Flexera Optima system does not have any data to calculate from";
        discount_calculated = false;
      }
    } else {
      discount_ratio = 1;
      discount_percentage = 0;
      discount_percentage_string = "0% since you do not have the minimum required role of billing_center_viewer to calculate from Flexera Optima costs";
      discount_calculated = false;
    }
  } else {
    discount_ratio = 1 - aws_edp_percentage / 100;
    discount_percentage = aws_edp_percentage;
    discount_percentage_string = discount_percentage.toFixed(1).replace(/\\.0$/, '') + '%';
    discount_calculated = false;
  }
  var cur = "$"
  var separator = ","
  var total_savings=0;
  _.each(volumes, function(volume){
    var tags = volume['tags'];
    var tagKeyValue = "";
    for(var k=0; k < tags.length; k++){
      tag = tags[k];
      // Constructing tags with comma separated to display in detail_template
      if((tag['tagValue']).length > 0){
        tagKeyValue = tagKeyValue+" , "+tag['tagKey']+'='+tag['tagValue'];
      }else{
        tagKeyValue = tagKeyValue+" , "+tag['tagKey'];
      }
    }
    if(tagKeyValue === "" || tagKeyValue === " " || tagKeyValue == ""){
      tagKeyValue = "   < No Value >";
    }
    var price = prices_by_region_and_type[volume.region][volume.volume_type] * parseInt(volume.size);
    var monthly_savings = (price - (price * gp3_savings_ratios_by_region_and_type[volume.region][volume.volume_type])) * discount_ratio;
    var iops;
    if (/^io/.test(volume.volume_type)) {
      iops = parseInt(volume.iops);
      // skip volumes with more IOPS than gp3 supports
      if (iops > max_iops_volume_by_region_and_type[volume.region]["gp3"]) {
        return;
      }
      var iops_price = iops_prices_by_region_and_type[volume.region][volume.volume_type] * iops;
      var gp3_iops_price = iops <= 3000 ? 0 : iops_prices_by_region_and_type[volume.region]["gp3"] * (iops - 3000);
      monthly_savings += (iops_price - gp3_iops_price) * discount_ratio;
    }
    total_savings += monthly_savings;
    upgradeable_volumes.push({
      accountId: ds_get_caller_identity[0]['account'],
      volume_id: volume['volume_id'],
      id: volume['volume_id'],
      region: volume['region'],
      availabilityZone: volume['availability_zone'],
      volume_type: volume['volume_type'],
      tags: (tagKeyValue.slice(2)),
      createdTime: volume['createdTime'],
      size: volume['size'],
      iops: iops,
      status: volume['status'],
      savings: cur + ' '+formatNumber((Math.round(monthly_savings * 100) / 100), separator),
      discount_ratio: discount_ratio,
      discount_percentage: discount_percentage,
      discount_calculated: discount_calculated,
    });
  });

  total_savings=cur + ' '+formatNumber((Math.round(total_savings * 100) / 100), separator);
  message="The total estimated monthly savings are "+total_savings+" based on an AWS EDP of "+discount_percentage_string;
  result={
    "upgradeable_volumes": upgradeable_volumes,
    "message": message,
    "accountId": ds_get_caller_identity[0]['account']
  }
  result.upgradeable_volumes=_.sortBy(result.upgradeable_volumes,'region')
  EOS
end

###############################################################################
# Policy
###############################################################################

policy "policy_superseded_volumes" do
  validate $ds_volume_cost_mapping do
    summary_template "AWS Account ID: {{ data.accountId }} - {{ len data.upgradeable_volumes }} Upgradeable Volumes Found"
    detail_template <<-EOS
{{data.message}}
EOS
    escalate $report_volumes
    check eq(size(val(data, "upgradeable_volumes")), 0)
    export "upgradeable_volumes" do
      resource_level true
      field "savings" do
        label "Estimated Monthly Savings"
      end
      field "accountId" do
        label "Account Id"
      end
      field "region" do
        label "Region"
      end
      field "id" do
        label "Volume Id"
        path "volume_id"
      end
      field "volume_type" do
        label "Volume Type"
      end
      field "status" do
        label "Status"
      end
      field "size" do
        label "Size"
      end
      field "iops" do
        label "IOPS"
      end
      field "tags" do
        label "Tags"
      end
      field "discount_ratio" do
        label "AWS EDP Discount Ratio"
      end
      field "discount_percentage" do
        label "AWS EDP Percentage"
      end
      field "discount_calculated" do
        label "AWS EDP was Calculated"
      end
    end
  end
end

###############################################################################
# Escalations
###############################################################################

escalation "report_volumes" do
  automatic true
  label "Send Email"
  description "Send incident email"
  email $param_email
end

###############################################################################
# Cloud Workflow
###############################################################################

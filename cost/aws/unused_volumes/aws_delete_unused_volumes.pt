name "AWS Unused Volumes"
rs_pt_ver 20180301
type "policy"
short_description "Checks for unused volumes and if no read/write operations performed within a specified number of days and, optionally, deletes them. See the [README](https://github.com/flexera/policy_templates/tree/master/cost/aws/unused_volumes) and [docs.rightscale.com/policies](https://docs.rightscale.com/policies/) to learn more."
category "Cost"
severity "low"
info(
  version: "2.6",
  provider: "AWS",
  service: "EBS",
  policy_set: "Unused Volumes"
)

###############################################################################
# User inputs
###############################################################################

parameter "param_email" do
  type "list"
  label "Email addresses"
  description "A list of email addresses to notify."
end

parameter "param_exclude_tags" do
  type "list"
  category "User Inputs"
  label "Exclude Tags"
  description "A list of tags used to excluded volumes from the incident."
end

parameter "param_unattached_days" do
  type "number"
  label "Unused days"
  description "The number of days a volume has been unused. The days should be greater than zero"
  default 30
end

parameter "param_take_snapshot" do
  type "string"
  label "Create Final Snapshot"
  description "Boolean for whether or not to take a final snapshot before deleting."
  allowed_values "Yes","No"
  default "Yes"
end

parameter "param_automatic_action" do
  type "list"
  label "Automatic Actions"
  description "When this value is set, this policy will automatically take the selected action(s)"
  allowed_values ["Delete Volumes"]
end

###############################################################################
# Authentication
###############################################################################

#Authenticate with AWS
credentials "auth_aws" do
  schemes "aws","aws_sts"
  label "AWS"
  description "Select the AWS Credential from the list"
  tags "provider=aws"
end

auth "auth_rs", type: "rightscale"

###############################################################################
# Pagination
###############################################################################

pagination "aws_volumes_pagination_xml" do
  get_page_marker do
    body_path "//DescribeVolumesResponse/nextToken"
  end
  set_page_marker do
    query "NextToken"
  end
end

###############################################################################
# Datasource
###############################################################################

#Get list of enabled regions for an account
datasource "ds_regions_list" do
  request do
    auth $auth_aws
    verb "GET"
    host "ec2.amazonaws.com"
    path "/"
    query "Action", "DescribeRegions"
    query "Version", "2016-11-15"
  end
  result do
    encoding "xml"
    collect xpath(response, "//DescribeRegionsResponse/regionInfo/item", "array") do
      field "region", xpath(col_item, "regionName")
    end
  end
end

# Get only SCP enabled regions
datasource "ds_regions" do
  iterate $ds_regions_list
    request do
      auth $auth_aws
      verb "GET"
      host "ec2.amazonaws.com"
      host join(["ec2.",val(iter_item,"region"),".amazonaws.com"])
      path "/"
      query "Action", "DescribeRegions"
      query "Version", "2016-11-15"
      ignore_status [403]
    end
    result do
      encoding "xml"
      field "region", val(iter_item, "region")
    end
end

#To get list of Unattached Volumes.
datasource "ds_unattached_volumes_list" do
  iterate $ds_regions
    request do
      run_script $js_aws_unattached_volumes_list, val(iter_item,"region")
    end
  result do
  encoding "xml"
  collect xpath(response, "//DescribeVolumesResponse/volumeSet/item","array") do
    field "tags" do
      collect xpath(col_item,"tagSet/item") do
        field "tagKey", xpath(col_item, "key")
        field "tagValue", xpath(col_item, "value")
      end
    end
    field "attachments" do
      collect xpath(col_item, "attachmentSet/item") do
        field "instance_id", xpath(col_item, "instanceId")
      end
    end
    field "volume_id", xpath(col_item, "volumeId")
    field "availability_zone", xpath(col_item, "availabilityZone")
    field "snapshot_id", xpath(col_item, "snapshotId")
    field "volume_Type", xpath(col_item, "volumeType")
    field "region", val(iter_item, "region")
    field "createdTime", xpath(col_item,"createTime")
    field "size", xpath(col_item,"size")
   end
  end
end

datasource "ds_unattached_volumes_map" do
  run_script $js_filter_aws_unattached_volumes, $ds_unattached_volumes_list, $param_exclude_tags, $param_unattached_days
end

datasource "ds_volume_read_bytes_metrics" do
  iterate $ds_unattached_volumes_map
  request do
    run_script $js_aws_volumes_cloud_watch_read_byte_metrics, val(iter_item,"vol_id"), val(iter_item,"region"), $param_unattached_days
  end
  result do
    encoding "json"
    collect jmes_path(response,"GetMetricStatisticsResponse.GetMetricStatisticsResult") do
      field "volumeId", val(iter_item,"vol_id")
      field "dataPoints", jmes_path(col_item,"Datapoints")
    end
  end
end

datasource "ds_volume_write_bytes_metrics" do
  iterate $ds_unattached_volumes_map
  request do
    run_script $js_aws_volumes_cloud_watch_write_byte_metrics, val(iter_item,"vol_id"), val(iter_item,"region"), $param_unattached_days
  end
  result do
    encoding "json"
    collect jmes_path(response,"GetMetricStatisticsResponse.GetMetricStatisticsResult") do
      field "volumeId", val(iter_item,"vol_id")
      field "dataPoints", jmes_path(col_item,"Datapoints")
    end
  end
end

datasource "ds_check_volumes_read_or_write_operations" do
  run_script $js_check_volumes_read_or_write_operations,$ds_unattached_volumes_map,$ds_volume_read_bytes_metrics,$ds_volume_write_bytes_metrics
end

datasource "ds_currency_reference" do
  request do
    host "raw.githubusercontent.com"
    path "/rightscale/policy_templates/master/cost/scheduled_reports/currency_reference.json"
    header "User-Agent", "RS Policies"
  end
end

datasource "ds_currency_code" do
  request do
    auth $auth_rs
    host rs_optima_host
    path join(["/bill-analysis/orgs/",rs_org_id,"/settings/currency_code"])
    header "Api-Version", "0.1"
    header "User-Agent", "RS Policies"
  end
  result do
    encoding "json"
    field "id", jmes_path(response,"id")
    field "value", jmes_path(response,"value")
  end
end

datasource "ds_billing_centers" do
  request do
    auth $auth_rs
    host rs_optima_host
    path join(["/analytics/orgs/",rs_org_id,"/billing_centers"])
    header "Api-Version", "1.0"
    header "User-Agent", "RS Policies"
    query "view", "allocation_table"
  end
  result do
    encoding "json"
    collect jmes_path(response,"[*]") do
      field "href", jmes_path(col_item,"href")
      field "id", jmes_path(col_item,"id")
      field "name", jmes_path(col_item,"name")
      field "parent_id", jmes_path(col_item,"parent_id")
    end
  end
end

datasource "ds_top_level_billing_centers" do
  run_script $js_top_level_bc, $ds_billing_centers
end

datasource "ds_get_caller_identity" do
  request do
    auth $auth_aws
    verb "GET"
    host "sts.amazonaws.com"
    path "/"
    header "User-Agent", "RS Policies"
    query "Action", "GetCallerIdentity"
    query "Version", "2011-06-15"
  end
  result do
    encoding "xml"
    collect xpath(response, "//GetCallerIdentityResponse/GetCallerIdentityResult") do
      field "account",xpath(col_item, "Account")
    end
 end
end

datasource "ds_volume_costs" do
  request do
    run_script $js_get_costs, $ds_get_caller_identity, $ds_top_level_billing_centers, rs_org_id
  end
  result do
    encoding "json"
    collect jmes_path(response,"rows[*]") do
      field "resource_id", jmes_path(col_item,"dimensions.resource_id")
      field "cost_nonamortized_unblended_adj", jmes_path(col_item,"metrics.cost_nonamortized_unblended_adj")
    end
  end
end

datasource "ds_volume_cost_mapping" do
  run_script $js_volume_cost_mapping, $ds_check_volumes_read_or_write_operations, $ds_volume_costs, $ds_currency_reference, $ds_currency_reference
end

###############################################################################
# Script
###############################################################################

#https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DescribeVolumes.html
script "js_aws_unattached_volumes_list", type:"javascript" do
  parameters  "region"
    result "results"
    code <<-EOS
    results = {
      auth: "auth_aws",
      host: 'ec2.'+region+'.amazonaws.com',
      path: '/',
      pagination: "aws_volumes_pagination_xml",
      query_params: {
        "Action": "DescribeVolumes",
        "Version": "2016-11-15",
        "Filter.1.Name": "status",
        "Filter.1.Value.1": "available"
      }
    }
    EOS
end

script "js_filter_aws_unattached_volumes", type:"javascript" do
  parameters "ds_unattached_volumes_list","param_exclude_tags","unattachedDays"
  result "content"
  code <<-EOS
  var param_exclude_tags_lower=[];
  for(var j=0;j<param_exclude_tags.length;j++){
    param_exclude_tags_lower[j] = param_exclude_tags[j].toString().toLowerCase();
  }
  var content = [];
  for(var i=0;i<ds_unattached_volumes_list.length;i++){
    vol = ds_unattached_volumes_list[i];
    // Check, if the tag present in entered param_exclude_tags, ignore the volume if the tag matches/present.
    var tags = vol['tags'];
    var isTagMatched = false;
    var tagKeyValue = "";
    var startDate = new Date(vol['createdTime']); // Volume Created Date
    var endDate = new Date();
    var timeDifference = endDate.getTime() - startDate.getTime();
    var daysDifference = (timeDifference / (1000 * 3600 * 24)).toFixed(2);
    for(var k=0; k < tags.length; k++){
      tag = tags[k];
      if((param_exclude_tags_lower.indexOf((tag['tagKey']).toLowerCase()) !== -1) || (param_exclude_tags_lower.indexOf((tag['tagKey']+'='+tag['tagValue']).toLowerCase()) !== -1)){
        isTagMatched = true;
      }

      // Constructing tags with comma separated to display in detail_template
      if((tag['tagValue']).length > 0){
        tagKeyValue = tagKeyValue+" , "+tag['tagKey']+'='+tag['tagValue'];
      }else{
        tagKeyValue = tagKeyValue+" , "+tag['tagKey'];
      }
    }
    if(tagKeyValue === "" || tagKeyValue === " " || tagKeyValue == ""){
      tagKeyValue = "   < No Value >";
    }
    //If the volume tag does not match with entered param_exclude_tags
    if(daysDifference > unattachedDays){
      if(!(isTagMatched)){
        content.push({
          tagKeyValue : (tagKeyValue.slice(2)),
          vol_id : vol['volume_id'],
          availability_zone : vol['availability_zone'],
          snapshot_id : vol['snapshot_id'],
          volume_Type : vol['volume_Type']
          region : vol['region'],
          createdTime : vol['createdTime'],
          size : vol['size']+" GB"
        })
      }
    }
  }
  EOS
end

script "js_aws_volumes_cloud_watch_read_byte_metrics", type:"javascript" do
  parameters "volume_id","region","unattachedDays"
  result "metrics"
  code <<-EOS
    var endDate = new Date().toISOString();
    var startDate = new Date(new Date().setDate(new Date().getDate() - unattachedDays)).toISOString();
    var peroid = 2592000;
    var datapoints = (unattachedDays / 30).toFixed(2);
    if(datapoints > 1440){
      peroid = peroid * 60;
	}
    console.log("Period "+peroid);
    peroid = ""+peroid+"";
    metrics = {
     "auth": "auth_aws",
     "host": 'monitoring.'+region+'.amazonaws.com',
     "verb": "GET",
     "path": "/",
     "headers": {
       "User-Agent": "RS Policies",
       "Content-Type": "application/json",
       "x-amz-target": "GraniteServiceVersion20100801.GetMetricStatistics",
       "Accept": "application/json",
       "Content-Encoding": "amz-1.0"
     }
     "query_params": {
       'Action': 'GetMetricStatistics',
       'Version': '2010-08-01',
       'Namespace': 'AWS/EBS',
       'MetricName': 'VolumeReadBytes',
       'Dimensions.member.1.Name': 'VolumeId',
       'Dimensions.member.1.Value': volume_id,
       'StartTime': startDate,
       'EndTime': endDate,
       'Period': peroid,
       'Statistics.member.1': 'Maximum',
       'Statistics.member.2': 'Average',
       'Statistics.member.3': 'Minimum'
     }
    }
  EOS
end

script "js_aws_volumes_cloud_watch_write_byte_metrics", type:"javascript" do
  parameters "volume_id","region","unattachedDays"
  result "metrics"
  code <<-EOS
    var endDate = new Date().toISOString();
    var startDate = new Date(new Date().setDate(new Date().getDate() - unattachedDays)).toISOString();
    var period = 2592000;
    var dataPoints = (unattachedDays/30).toFixed(2);
    if(dataPoints > 1440){
      period = period * 60;
	}
    period = ""+period+"";
    console.log("Period "+period);
    metrics = {
     "auth": "auth_aws",
     "host": 'monitoring.'+region+'.amazonaws.com',
     "verb": "GET",
     "path": "/",
     "headers": {
       "User-Agent": "RS Policies",
       "Content-Type": "application/json",
       "x-amz-target": "GraniteServiceVersion20100801.GetMetricStatistics",
       "Accept": "application/json",
       "Content-Encoding": "amz-1.0"
     }
     "query_params": {
       'Action': 'GetMetricStatistics',
       'Version': '2010-08-01',
       'Namespace': 'AWS/EBS',
       'MetricName': 'VolumeWriteBytes',
       'Dimensions.member.1.Name': 'VolumeId',
       'Dimensions.member.1.Value': volume_id,
       'StartTime': startDate,
       'EndTime': endDate,
       'Period': period,
       'Statistics.member.1': 'Maximum',
       'Statistics.member.2': 'Average',
       'Statistics.member.3': 'Minimum'
     }
    }
  EOS
end

script "js_check_volumes_read_or_write_operations", type:'javascript' do
  parameters "volumesList","volumesReadMetricsData","volumesWriteMetricsData"
  result "unattachedVolumes"
  code <<-EOS
  var unattachedVolumes = [];
  for(var i=0; i < volumesList.length; i++){
    var volume = volumesList[i];
    var readWriteOperationDone = false;
    for(var j=0; j < volumesReadMetricsData.length; j++){
      var readMetricData = volumesReadMetricsData[j];
      if(volume['vol_id'] === readMetricData['volumeId']){
        var readMetricDataPoints = readMetricData['dataPoints'];
        if(readMetricDataPoints.length > 0){
          readWriteOperationDone = true;
		}
        break;
	  }
	}
    if(!readWriteOperationDone){
      for(var k=0; k < volumesWriteMetricsData.length; k++){
        var writeMetricData = volumesWriteMetricsData[k];
        if(volume['vol_id'] === writeMetricData['volumeId']){
          var writeMetricDataPoints = writeMetricData['dataPoints'];
          if(writeMetricDataPoints.length > 0){
            readWriteOperationDone = true;
		  }
          break;
		}
	  }
	}
    if(!readWriteOperationDone){
      unattachedVolumes.push({
        volumeId : volume['vol_id'],
        region : volume['region'],
        availabilityZone : volume['availability_zone'],
        volumeType : volume['volume_Type'],
        tags : volume['tagKeyValue'],
        createdTime : volume['createdTime'],
        size : volume['size']
	  })
	}
  }
  unattachedVolumes = _.sortBy(unattachedVolumes,'region')
  EOS
end

script "js_top_level_bc", type: "javascript" do
  parameters "billing_centers"
  result "filtered_billing_centers"
  code <<-EOS
  var filtered_billing_centers =
    _.reject(billing_centers, function(bc){ return bc.parent_id != null });
EOS
end

script "js_get_costs", type:"javascript" do
  parameters  "account_id","billing_centers","org"
  result "request"
  code <<-EOS
    // returns date formatted as string: YYYY-mm-dd
    function getFormattedDailyDate(date) {
      var year = date.getFullYear();
      var month = (1 + date.getMonth()).toString();
      month = month.length > 1 ? month : '0' + month;
      var day = date.getDate().toString();
      day = day.length > 1 ? day : '0' + day;
      return year + '-' + month + '-' + day;
    }

    var start_date = getFormattedDailyDate(new Date(new Date().setDate(new Date().getDate() - 3)));
    var end_date = getFormattedDailyDate(new Date(new Date().setDate(new Date().getDate() - 2)));

    var request = {
      auth: "auth_rs",
      host: "optima.rightscale.com",
      verb: "POST",
      path: "/bill-analysis/orgs/" + org + "/costs/select",
      body_fields: {
        "dimensions": ["resource_id"],
        "granularity": "day",
        "start_at": start_date,
        "end_at": end_date,
        "metrics": ["cost_nonamortized_unblended_adj"],
        "billing_center_ids": _.compact(_.map(billing_centers, function(value){ return value.id})),
        "limit": 10000,
        "filter": {
          "expressions": [
            {
              "dimension": "service",
              "type": "equal",
              "value": "AmazonEC2"
            },
            {
              "dimension": "resource_type",
              "type": "equal",
              "value": "Storage"
            },
            {
              "dimension": "vendor_account",
              "type": "equal",
              "value": account_id[0]["account"]
            }
          ],
          "type": "and"
        }
      },
      headers: {
        "User-Agent": "RS Policies",
        "Api-Version": "1.0"
      }
    }
  EOS
end

script "js_volume_cost_mapping", type:"javascript" do
  parameters  "volumes","volume_costs","ds_currency_code","ds_currency_reference"
  result "result"
  code <<-EOS

  var result = [];

  function formatNumber(number, separator){
    var numString =number.toString();
    var values=numString.split(".");
    var result = ''
    while (values[0].length > 3){
      var chunk = values[0].substr(-3)
      values[0] = values[0].substr(0, values[0].length - 3)
      result = separator + chunk + result
    }
    if (values[0].length > 0){
      result = values[0] + result
    }
    if(values[1]==undefined){
      return result;
    }
    return result+"."+values[1];
  }

  // Format costs with currency symbol and thousands separator
  if( ds_currency_code['value'] !== undefined ) {
    if (ds_currency_reference[ds_currency_code['value']] !== undefined ) {
      var cur = ds_currency_reference[ds_currency_code['value']]['symbol']
      if( ds_currency_reference[ds_currency_code['value']]['t_separator'] !== undefined ) {
        var separator = ds_currency_reference[ds_currency_code['value']]['t_separator']
      } else {
        var separator = ""
      }
    } else {
      var cur = ""
      var separator = ""
    }
  } else {
    var cur = "$"
    var separator = ","
  }

  _.each(volumes, function(volume){
    var cost_objects = _.where(volume_costs, {resource_id: volume["volumeId"]});
    console.log(cost_objects)
    if (_.size(cost_objects) > 0){
      var sum = _.reduce(_.compact(_.map(cost_objects, function(value){ return value.cost_nonamortized_unblended_adj})), function(memo, num){ return memo + num; }, 0);
      var monthly_savings = sum*30;
      result.push({
        volumeId : volume['volumeId'],
        region : volume['region'],
        availabilityZone : volume['availabilityZone'],
        volumeType : volume['volumeType'],
        tags : volume['tags'],
        createdTime : volume['createdTime'],
        size : volume['size'],
        savings: cur + ' '+formatNumber((Math.round(monthly_savings * 100) / 100), separator),
      })
    } else {
      result.push({
        volumeId : volume['volumeId'],
        region : volume['region'],
        availabilityZone : volume['availabilityZone'],
        volumeType : volume['volumeType'],
        tags : volume['tags'],
        createdTime : volume['createdTime'],
        size : volume['size'],
        savings: "N/A",
      })
    }
  })
  EOS
end

###############################################################################
# Policy
###############################################################################

policy "policy_unattached_volumes_list" do
  validate $ds_volume_cost_mapping do
    summary_template "{{ rs_project_name }} (Account ID: {{ rs_project_id }}): {{ len data }} Unused Volumes Found in AWS"
    escalate $report_unused_volumes
    escalate $delete_volumes
    check eq(size(data),0)
    export do
      resource_level true
      field "region" do
        label "Region"
      end
      field "id" do
        label "Volume Id"
        path "volumeId"
      end
      field "volumeType" do
        label "Volume Type"
      end
      field "size" do
        label "Size"
      end
      field "tags" do
        label "Tags"
      end
      field "savings" do
        label "Estimated Monthly Savings"
      end
    end
  end
end

###############################################################################
# Escalations
###############################################################################

escalation "report_unused_volumes" do
  automatic true
  label "Send Mail"
  description "Sends incidents email"
  email $param_email
end

escalation "delete_volumes" do
  automatic contains($param_automatic_action, "Delete Volumes")
  label "Delete Volumes"
  description "Approval to delete all selected volumes"
  run "take_action",data,$param_take_snapshot
end

###############################################################################
# Cloud Workflow
###############################################################################

define take_action($data,$param_take_snapshot) return $all_responses do
  # If you want to see the audit entries. Please set $$debug = true
  $$debug = false
  $all_responses = []
  foreach $item in $data do
    $snapshot_status_code = 200
    if $param_take_snapshot == "Yes"
      call create_volumes_snapshot($item) retrieve $status_code
      $snapshot_status_code = $status_code
    end
    if $snapshot_status_code == 200
      call delete_volume($item) retrieve $status_code
    end
  end
end

define create_volumes_snapshot($item) return $status_code do
  $response = []
  $status_code
  $snapshot_status = "pending"
  $response = http_request(
    auth: $$auth_aws,
    https: true,
    verb: "get",
    host: "ec2."+$item["region"]+".amazonaws.com",
    href: "/",
    query_strings: {
      "Action": "CreateSnapshot",
      "Version": "2016-11-15",
      "VolumeId": $item["id"]
    }
  )
  call sys_log("Create Volumes Snapshot Response ",to_s($response))
  $status_code = $response["code"]

  if $status_code == 200
    $snapshot_status = $response["body"]["CreateSnapshotResponse"]["status"]
    $snapshotId = $response["body"]["CreateSnapshotResponse"]["snapshotId"]

    if $snapshot_status == "pending"
      $condition_check = "completed"

      while $condition_check !~ $snapshot_status do
        sleep(2)
        call get_snapshot_status(to_s($snapshotId)) retrieve $status
        $snapshot_status = $status

        if $snapshot_status == "error"
          $status_code = 400
          $snapshot_status = "completed"
        end

      end
    end
  end
end

define delete_volume($item) return $status_code do
  $delete_response = http_request(
    auth: $$auth_aws,
    https: true,
    verb: "get",
    host: "ec2."+$item["region"]+".amazonaws.com",
    href: "/",
    query_strings: {
      "Action": "DeleteVolume",
      "Version": "2016-11-15",
      "VolumeId": $item["id"]
    }
  )
  call sys_log("Delete Volumes Response ",to_s($delete_response))
  $volume_delete_status = $delete_response["code"]
  if $volume_delete_status != 200
    $volume_delete_body = $delete_response["body"]
    $split_body = split($volume_delete_body,"<Message>")
    $split_final_message = split($split_body[1],"</Message>");
     call create_tag($item["region"],$item["id"],to_s($split_final_message[0]))
  end
end

define get_snapshot_status($snapshotId) return $snapshot_status do
  call sys_log("Inside Get Snapshot Details Snapshot Id ",$snapshotId)
  $snapshot_response = http_request(
    auth: $$auth_aws,
    https: true,
    verb: "get",
    host: "ec2."+$item["region"]+".amazonaws.com",
    href: "/",
    query_strings: {
      "Action": "DescribeSnapshots",
      "Version": "2016-11-15",
      "SnapshotId": $snapshotId
    }
  )
  call sys_log("Get Snapshot Details ",to_s($snapshot_response))
  $snapshot_status = $snapshot_response["body"]["DescribeSnapshotsResponse"]["snapshotSet"]["item"]["status"]
end

define create_tag($region,$volumeId,$message) do
  call sys_log("Create Tag  ",$volumeId)
  $snapshot_response = http_request(
    auth: $$auth_aws,
    https: true,
    verb: "get",
    host: "ec2."+$region+".amazonaws.com",
    href: "/",
    query_strings: {
      "Action": "CreateTags",
      "Version": "2016-11-15",
      "ResourceId.1": $volumeId,
      "Tag.1.Key": "Error While Deleting Volume",
      "Tag.1.Value": to_s($message)
    }
  )
end

define sys_log($subject, $detail) do
  if $$debug
    rs_cm.audit_entries.create(
      notify: "None",
      audit_entry: {
        auditee_href: @@account,
        summary: "AWS Delete Unused Volumes Policy "+ $subject,
        detail: $detail
      }
    )
  end
end

name "AWS Unused Volumes"
rs_pt_ver 20180301
type "policy"
short_description "**Deprecated: This policy is no longer being updated. Please see [README](https://github.com/flexera-public/policy_templates/tree/master/cost/aws/unused_volumes/) for more details.**  Checks for unused volumes with no read/write operations performed within a specified number of days and, optionally, deletes them. See the [README](https://github.com/flexera-public/policy_templates/tree/master/cost/aws/unused_volumes) and [docs.flexera.com/flexera/EN/Automation](https://docs.flexera.com/flexera/EN/Automation/AutomationGS.htm) to learn more."
long_description ""
doc_link "https://github.com/flexera-public/policy_templates/tree/master/cost/aws/unused_volumes/"
category "Cost"
severity "low"
default_frequency "weekly"
info(
  deprecated: "true",
  publish: "false",
  version: "8.3.8",
  provider: "AWS",
  service: "EBS",
  policy_set: "Unused Volumes",
  recommendation_type: "Usage Reduction",
  hide_skip_approvals: "true"
)

###############################################################################
# Parameters
###############################################################################

parameter "param_email" do
  type "list"
  category "Policy Settings"
  label "Email Addresses"
  description "A list of email addresses to notify."
  default []
end

parameter "param_aws_account_number" do
  type "string"
  category "Policy Settings"
  label "Account Number"
  description "Leave blank; this is for automated use with Meta Policies. See README for more details."
  default ""
end

parameter "param_unused_days" do
  type "number"
  category "Policy Settings"
  label "Unused Days"
  description "The number of days a volume has been unused."
  min_value 1
  default 30
end

parameter "param_min_savings" do
  type "number"
  category "Policy Settings"
  label "Minimum Savings Threshold"
  description "Minimum potential savings required to generate a recommendation."
  min_value 0
  default 0
end

parameter "param_regions_allow_or_deny" do
  type "string"
  category "Filters"
  label "Allow/Deny Regions"
  description "Allow or Deny entered regions. See the README for more details"
  allowed_values "Allow", "Deny"
  default "Allow"
end

parameter "param_regions_list" do
  type "list"
  category "Filters"
  label "Allow/Deny Regions List"
  description "A list of allowed or denied regions. See the README for more details"
  allowed_pattern /^([a-zA-Z-_]+-[a-zA-Z0-9-_]+-[0-9-_]+,*|)+$/
  default []
end

parameter "param_include_status" do
  type "string"
  category "Filters"
  label "Volume Status"
  description "Whether the policy should only check unattached volumes, attached volumes, or both."
  allowed_values "Unattached Volumes", "Attached Volumes", "All Volumes"
  default "Unattached Volumes"
end

parameter "param_exclusion_tags" do
  type "list"
  category "Filters"
  label "Exclusion Tags"
  description "Cloud native tags to ignore resources that you don't want to produce recommendations for. Enter the Key name to filter resources with a specific Key, regardless of Value, and enter Key==Value to filter resources with a specific Key:Value pair. Other operators and regex are supported; please see the README for more details."
  default []
end

parameter "param_exclusion_tags_boolean" do
  type "string"
  category "Filters"
  label "Exclusion Tags: Any / All"
  description "Whether to filter instances containing any of the specified tags or only those that contain all of them. Only applicable if more than one value is entered in the 'Exclusion Tags' field."
  allowed_values "Any", "All"
  default "Any"
end

parameter "param_take_snapshot" do
  type "string"
  category "Actions"
  label "Create Final Snapshot"
  description "Whether or not to take a final snapshot before deleting a volume."
  allowed_values "Yes", "No"
  default "Yes"
end

parameter "param_automatic_action" do
  type "list"
  category "Actions"
  label "Automatic Actions"
  description "When this value is set, this policy will automatically take the selected action(s)"
  allowed_values ["Delete Volumes"]
  default []
end

###############################################################################
# Authentication
###############################################################################

credentials "auth_aws" do
  schemes "aws", "aws_sts"
  label "AWS"
  description "Select the AWS Credential from the list"
  tags "provider=aws"
  aws_account_number $param_aws_account_number
end

credentials "auth_flexera" do
  schemes "oauth2"
  label "Flexera"
  description "Select Flexera One OAuth2 credentials"
  tags "provider=flexera"
end

###############################################################################
# Pagination
###############################################################################

pagination "pagination_aws_volumes_xml" do
  get_page_marker do
    body_path "//DescribeVolumesResponse/nextToken"
  end
  set_page_marker do
    query "NextToken"
  end
end

pagination "pagination_aws_getmetricdata" do
  get_page_marker do
    body_path "NextToken"
  end
  set_page_marker do
    body_field "NextToken"
  end
end

###############################################################################
# Datasources & Scripts
###############################################################################

# Get region-specific Flexera API endpoints
datasource "ds_flexera_api_hosts" do
  run_script $js_flexera_api_hosts, rs_optima_host
end

script "js_flexera_api_hosts", type: "javascript" do
  parameters "rs_optima_host"
  result "result"
  code <<-EOS
  host_table = {
    "api.optima.flexeraeng.com": {
	    api: "api.flexera.com",
      flexera: "api.flexera.com",
      fsm: "api.fsm.flexeraeng.com",
      grs: "grs-front.iam-us-east-1.flexeraeng.com",
      ui: "app.flexera.com",
      tld: "flexera.com"
    },
    "api.optima-eu.flexeraeng.com": {
	    api: "api.flexera.eu",
      flexera: "api.flexera.eu",
      fsm: "api.fsm-eu.flexeraeng.com",
      grs: "grs-front.eu-central-1.iam-eu.flexeraeng.com",
      ui: "app.flexera.eu",
      tld: "flexera.eu"
    },
    "api.optima-apac.flexeraeng.com": {
	    api: "api.flexera.au",
      flexera: "api.flexera.au",
      fsm: "api.fsm-apac.flexeraeng.com",
      grs: "grs-front.ap-southeast-2.iam-apac.flexeraeng.com",
      ui: "app.flexera.au",
      tld: "flexera.au"
    }
  }

  result = host_table[rs_optima_host]
EOS
end

# Get applied policy metadata for use later
datasource "ds_applied_policy" do
  request do
    auth $auth_flexera
    host val($ds_flexera_api_hosts, "flexera")
    path join(["/policy/v1/orgs/", rs_org_id, "/projects/", rs_project_id, "/applied-policies", switch(policy_id, join(["/", policy_id]), "")])
  end
end

# Get AWS account info
datasource "ds_cloud_vendor_accounts" do
  request do
    auth $auth_flexera
    host val($ds_flexera_api_hosts, 'flexera')
    path join(["/finops-analytics/v1/orgs/", rs_org_id, "/cloud-vendor-accounts"])
    header "Api-Version", "1.0"
  end
  result do
    encoding "json"
    collect jmes_path(response, "values[*]") do
      field "id", jmes_path(col_item, "aws.accountId")
      field "name", jmes_path(col_item, "name")
      field "tags", jmes_path(col_item, "tags")
    end
  end
end

datasource "ds_get_caller_identity" do
  request do
    auth $auth_aws
    host "sts.amazonaws.com"
    path "/"
    query "Action", "GetCallerIdentity"
    query "Version", "2011-06-15"
    header "User-Agent", "RS Policies"
  end
  result do
    encoding "xml"
    collect xpath(response, "//GetCallerIdentityResponse/GetCallerIdentityResult") do
      field "account", xpath(col_item, "Account")
    end
  end
end

datasource "ds_aws_account" do
  run_script $js_aws_account, $ds_cloud_vendor_accounts, $ds_get_caller_identity
end

script "js_aws_account", type:"javascript" do
  parameters "ds_cloud_vendor_accounts", "ds_get_caller_identity"
  result "result"
  code <<-EOS
  result = _.find(ds_cloud_vendor_accounts, function(account) {
    return account['id'] == ds_get_caller_identity[0]['account']
  })

  // This is in case the API does not return the relevant account info
  if (result == undefined) {
    result = {
      id: ds_get_caller_identity[0]['account'],
      name: "",
      tags: {}
    }
  }
EOS
end

datasource "ds_billing_centers" do
  request do
    auth $auth_flexera
    host rs_optima_host
    path join(["/analytics/orgs/", rs_org_id, "/billing_centers"])
    query "view", "allocation_table"
    header "Api-Version", "1.0"
    header "User-Agent", "RS Policies"
    ignore_status [403]
  end
  result do
    encoding "json"
    collect jmes_path(response, "[*]") do
      field "href", jmes_path(col_item, "href")
      field "id", jmes_path(col_item, "id")
      field "name", jmes_path(col_item, "name")
      field "parent_id", jmes_path(col_item, "parent_id")
    end
  end
end

# Gather top level billing center IDs for when we pull cost data
datasource "ds_top_level_bcs" do
  run_script $js_top_level_bcs, $ds_billing_centers
end

script "js_top_level_bcs", type: "javascript" do
  parameters "ds_billing_centers"
  result "result"
  code <<-EOS
  filtered_bcs = _.filter(ds_billing_centers, function(bc) {
    return bc['parent_id'] == null || bc['parent_id'] == undefined
  })

  result = _.compact(_.pluck(filtered_bcs, 'id'))
EOS
end

datasource "ds_currency_reference" do
  request do
    host "raw.githubusercontent.com"
    path "/flexera-public/policy_templates/master/data/currency/currency_reference.json"
    header "User-Agent", "RS Policies"
  end
end

datasource "ds_currency_code" do
  request do
    auth $auth_flexera
    host rs_optima_host
    path join(["/bill-analysis/orgs/", rs_org_id, "/settings/currency_code"])
    header "Api-Version", "0.1"
    header "User-Agent", "RS Policies"
    ignore_status [403]
  end
  result do
    encoding "json"
    field "id", jmes_path(response, "id")
    field "value", jmes_path(response, "value")
  end
end

datasource "ds_currency" do
  run_script $js_currency, $ds_currency_reference, $ds_currency_code
end

script "js_currency", type:"javascript" do
  parameters "ds_currency_reference", "ds_currency_code"
  result "result"
  code <<-EOS
  symbol = "$"
  separator = ","

  if (ds_currency_code['value'] != undefined) {
    if (ds_currency_reference[ds_currency_code['value']] != undefined) {
      symbol = ds_currency_reference[ds_currency_code['value']]['symbol']

      if (ds_currency_reference[ds_currency_code['value']]['t_separator'] != undefined) {
        separator = ds_currency_reference[ds_currency_code['value']]['t_separator']
      } else {
        separator = ""
      }
    }
  }

  result = {
    symbol: symbol,
    separator: separator
  }
EOS
end

datasource "ds_describe_regions" do
  request do
    auth $auth_aws
    host "ec2.amazonaws.com"
    path "/"
    query "Action", "DescribeRegions"
    query "Version", "2016-11-15"
    query "Filter.1.Name", "opt-in-status"
    query "Filter.1.Value.1", "opt-in-not-required"
    query "Filter.1.Value.2", "opted-in"
    # Header X-Meta-Flexera has no affect on datasource query, but is required for Meta Policies
    # Forces `ds_is_deleted` datasource to run first during policy execution
    header "Meta-Flexera", val($ds_is_deleted, "path")
  end
  result do
    encoding "xml"
    collect xpath(response, "//DescribeRegionsResponse/regionInfo/item", "array") do
      field "region", xpath(col_item, "regionName")
    end
  end
end

datasource "ds_regions" do
  run_script $js_regions, $ds_describe_regions, $param_regions_list, $param_regions_allow_or_deny
end

script "js_regions", type:"javascript" do
  parameters "ds_describe_regions", "param_regions_list", "param_regions_allow_or_deny"
  result "result"
  code <<-EOS
  allow_deny_test = { "Allow": true, "Deny": false }

  if (param_regions_list.length > 0) {
    result = _.filter(ds_describe_regions, function(item) {
      return _.contains(param_regions_list, item['region']) == allow_deny_test[param_regions_allow_or_deny]
    })
  } else {
    result = ds_describe_regions
  }
EOS
end

datasource "ds_volumes_list" do
  iterate $ds_regions
  request do
    run_script $js_volumes_list, val(iter_item, "region"), $param_include_status
  end
  result do
    encoding "xml"
    collect xpath(response, "//DescribeVolumesResponse/volumeSet/item", "array") do
      field "tags" do
        collect xpath(col_item, "tagSet/item") do
          field "key", xpath(col_item, "key")
          field "value", xpath(col_item, "value")
        end
      end
      field "attachments" do
        collect xpath(col_item, "attachmentSet/item") do
          field "instance_id", xpath(col_item, "instanceId")
        end
      end
      field "volume_id", xpath(col_item, "volumeId")
      field "availability_zone", xpath(col_item, "availabilityZone")
      field "snapshot_id", xpath(col_item, "snapshotId")
      field "volume_type", xpath(col_item, "volumeType")
      field "region", val(iter_item, "region")
      field "created_time", xpath(col_item, "createTime")
      field "size", xpath(col_item, "size")
      field "status", xpath(col_item, "status")
    end
  end
end

script "js_volumes_list", type: "javascript" do
  parameters "region", "param_include_status"
  result "result"
  code <<-EOS
  query_params = {
    "Action": "DescribeVolumes",
    "Version": "2016-11-15"
  }

  if (param_include_status == "Unattached Volumes") {
    query_params["Filter.1.Name"] = "status"
    query_params["Filter.1.Value.1"] = "available"
  }

  if (param_include_status == "Attached Volumes") {
    query_params["Filter.1.Name"] = "status"
    query_params["Filter.1.Value.1"] = "in-use"
  }

  result = {
    auth: "auth_aws",
    host: "ec2." + region + ".amazonaws.com",
    path: "/",
    pagination: "pagination_aws_volumes_xml",
    query_params: query_params
  }
EOS
end

datasource "ds_volumes_tag_filtered" do
  run_script $js_volumes_tag_filtered, $ds_volumes_list, $param_exclusion_tags, $param_exclusion_tags_boolean
end

script "js_volumes_tag_filtered", type: "javascript" do
  parameters "ds_volumes_list", "param_exclusion_tags", "param_exclusion_tags_boolean"
  result "result"
  code <<-EOS
  comparators = _.map(param_exclusion_tags, function(item) {
    if (item.indexOf('==') != -1) {
      return { comparison: '==', key: item.split('==')[0], value: item.split('==')[1], string: item }
    }

    if (item.indexOf('!=') != -1) {
      return { comparison: '!=', key: item.split('!=')[0], value: item.split('!=')[1], string: item }
    }

    if (item.indexOf('=~') != -1) {
      value = item.split('=~')[1]
      regex = new RegExp(value.slice(1, value.length - 1))
      return { comparison: '=~', key: item.split('=~')[0], value: regex, string: item }
    }

    if (item.indexOf('!~') != -1) {
      value = item.split('!~')[1]
      regex = new RegExp(value.slice(1, value.length - 1))
      return { comparison: '!~', key: item.split('!~')[0], value: regex, string: item }
    }

    // If = is present but none of the above are, assume user error and that the user intended ==
    if (item.indexOf('=') != -1) {
      return { comparison: '==', key: item.split('=')[0], value: item.split('=')[1], string: item }
    }

    // Assume we're just testing for a key if none of the comparators are found
    return { comparison: 'key', key: item, value: null, string: item }
  })

  if (param_exclusion_tags.length > 0) {
    result = _.reject(ds_volumes_list, function(resource) {
      resource_tags = {}

      if (typeof(resource['tags']) == 'object') {
        _.each(resource['tags'], function(tag) {
          resource_tags[tag['key']] = tag['value']
        })
      }

      // Store a list of found tags
      found_tags = []

      _.each(comparators, function(comparator) {
        comparison = comparator['comparison']
        value = comparator['value']
        string = comparator['string']
        resource_tag = resource_tags[comparator['key']]

        if (comparison == 'key' && resource_tag != undefined) { found_tags.push(string) }
        if (comparison == '==' && resource_tag == value) { found_tags.push(string) }
        if (comparison == '!=' && resource_tag != value) { found_tags.push(string) }

        if (comparison == '=~') {
          if (resource_tag != undefined && value.test(resource_tag)) { found_tags.push(string) }
        }

        if (comparison == '!~') {
          if (resource_tag == undefined) { found_tags.push(string) }
          if (resource_tag != undefined && value.test(resource_tag)) { found_tags.push(string) }
        }
      })

      all_tags_found = found_tags.length == comparators.length
      any_tags_found = found_tags.length > 0 && param_exclusion_tags_boolean == 'Any'

      return all_tags_found || any_tags_found
    })
  } else {
    result = ds_volumes_list
  }
EOS
end

datasource "ds_volumes_map" do
  run_script $js_volumes_map, $ds_volumes_tag_filtered, $param_unused_days
end

script "js_volumes_map", type: "javascript" do
  parameters "ds_volumes_list", "param_unused_days"
  result "result"
  code <<-EOS
  result = []

  _.each(ds_volumes_list, function(volume) {
    startDate = new Date(volume['created_time']) // Volume Created Date
    endDate = new Date()
    timeDifference = endDate.getTime() - startDate.getTime()
    daysDifference = (timeDifference / (1000 * 3600 * 24)).toFixed(2)

    tags = []
    name = ""

    _.each(volume['tags'], function(tag) {
      tags.push(tag['key'] + '=' + tag['value'])

      if (tag['key'].toLowerCase() == 'name') {
        name = tag['value']
      }
    })

    if (daysDifference > param_unused_days) {
      result.push({
        volume_id: volume['volume_id'],
        availability_zone: volume['availability_zone'],
        snapshot_id: volume['snapshot_id'],
        volume_type: volume['volume_type']
        region: volume['region'],
        status: volume['status'],
        created_time: volume['created_time'],
        size: volume['size'],
        tags: tags.join(', '),
        age: parseFloat(daysDifference),
        name: name
      })
    }
  })
EOS
end

datasource "ds_metricdataqueries" do
  run_script $js_metricdataqueries, $ds_volumes_map
end

script "js_metricdataqueries", type: "javascript" do
  parameters "ds_volumes_map"
  result "result"
  code <<-EOS
  queries = {}

  _.each(ds_volumes_map, function(resource) {
    _.each(["VolumeReadBytes", "VolumeWriteBytes"], function(metric) {
      _.each(["Average"], function(statistic) {
        query = {
          // Replace `-` with `_` in the Id to avoid CloudWatch API error
          "Id": resource['volume_id'].replace(/\-/g, '_') + "_" + metric + "_" + statistic,
          "Label": resource['volume_id'] + " " + metric + " " + statistic,
          "MetricStat": {
            "Metric": {
              "Namespace": "AWS/EBS",
              "MetricName": metric,
              "Dimensions": [
                { "Name": "VolumeId", "Value": resource['volume_id'] }
              ]
            },
            "Period": 2592000,
            "Stat": statistic
          },
          "ReturnData": true
        }

        if (queries[resource['region']] == undefined || queries[resource['region']] == null) {
          queries[resource['region']] = []
        }

        queries[resource['region']].push(query)
      })
    })
  })

  result = []

  end_date = parseInt(new Date().getTime() / 1000)
  start_date = parseInt(new Date(new Date().setDate(new Date().getDate() - 30)).getTime() / 1000)

  chunk_size = 500

  // Chunk MetricDataQueries to iterate and collect all with multiple requests
  _.each(Object.keys(queries), function(region) {
    for (i = 0; i < queries[region].length; i += chunk_size) {
      chunk = queries[region].slice(i, i + chunk_size)

      result.push({
        'MetricDataQueries': chunk,
        'region': region
      })
    }
  })
EOS
end

datasource "ds_cloudwatch_getmetricdata" do
  iterate $ds_metricdataqueries
  request do
    run_script $js_cloudwatch_getmetricdata, val(iter_item, "region"), val(iter_item, "MetricDataQueries"), $param_unused_days
  end
  result do
    encoding "json"
    collect jmes_path(response, "MetricDataResults[*]") do
      field "region", val(iter_item, "region")
      field "id", jmes_path(col_item, "Id")
      field "label", jmes_path(col_item, "Label")
      field "values", jmes_path(col_item, "Values")
    end
  end
end

script "js_cloudwatch_getmetricdata", type: "javascript" do
  parameters "region", "MetricDataQueries", "param_unused_days"
  result "request"
  code <<-EOS
  // Slow down rate of requests to prevent throttling
  api_wait = 5
  var now = new Date().getTime()
  while(new Date().getTime() < now + (api_wait * 1000)) { /* Do nothing */ }

  end_date = parseInt(new Date().getTime() / 1000)
  start_date = parseInt(new Date(new Date().setDate(new Date().getDate() - param_unused_days)).getTime() / 1000)

  var request = {
    auth: "auth_aws",
    host: "monitoring." + region + ".amazonaws.com",
    verb: "POST",
    path: "/",
    pagination: "pagination_aws_getmetricdata",
    headers: {
      "User-Agent": "RS Policies",
      "Content-Type": "application/json",
      "x-amz-target": "GraniteServiceVersion20100801.GetMetricData",
      "Accept": "application/json",
      "Content-Encoding": "amz-1.0"
    }
    query_params: {
      "Action": "GetMetricData",
      "Version": "2010-08-01"
    },
    body: JSON.stringify({
      "StartTime": start_date,
      "EndTime": end_date,
      "MetricDataQueries": MetricDataQueries
    })
  }
EOS
end

datasource "ds_idle_volumes" do
  run_script $js_idle_volumes, $ds_volumes_map, $ds_cloudwatch_getmetricdata
end

script "js_idle_volumes", type: "javascript" do
  parameters "ds_volumes_map", "ds_cloudwatch_getmetricdata"
  result "result"
  code <<-EOS
  result = []

  _.each(ds_volumes_map, function(volume) {
    read_label = volume['volume_id'] + ' VolumeReadBytes Average'
    write_label = volume['volume_id'] + ' VolumeWriteBytes Average'

    volume_metrics = _.filter(ds_cloudwatch_getmetricdata, function(item) {
      values_exist = true

      // This is to handle scenarios where a value exists but is 0
      // since this is effectively the same as having no actual activity
      if (item['values'].length == 0) {
        values_exist = false
      } else {
        if (item['values'].length == 1 && item['values'][0] == 0) {
          values_exist = false
        }
      }

      return values_exist && (item['label'] == read_label || item['label'] == write_label)
    })

    if (volume_metrics.length == 0) {
      result.push({
        volume_id: volume['volume_id'],
        region: volume['region'],
        availability_zone: volume['availability_zone'],
        volume_type: volume['volume_type'],
        tags: volume['tags'],
        name: volume['name'],
        created_time: volume['created_time'],
        size: volume['size'],
        age: volume['age'],
        status: volume['status'],
        savings: 0.0
      })
    }
  })
EOS
end

datasource "ds_volume_costs" do
  request do
    run_script $js_volume_costs, $ds_aws_account, $ds_top_level_bcs, rs_org_id, rs_optima_host
  end
  result do
    encoding "json"
    collect jmes_path(response, "rows[*]") do
      field "resourceId", jmes_path(col_item, "dimensions.resource_id")
      field "vendorAccountName", jmes_path(col_item, "dimensions.vendor_account_name")
      field "cost", jmes_path(col_item, "metrics.cost_amortized_blended_adj")
    end
  end
end

script "js_volume_costs", type: "javascript" do
  parameters "ds_aws_account", "ds_top_level_bcs", "rs_org_id", "rs_optima_host"
  result "request"
  code <<-EOS
  start_date = new Date()
  start_date.setDate(start_date.getDate() - 3)
  start_date = start_date.toISOString().split('T')[0]

  end_date = new Date()
  end_date.setDate(end_date.getDate() - 2)
  end_date = end_date.toISOString().split('T')[0]

  var request = {
    auth: "auth_flexera",
    host: rs_optima_host,
    verb: "POST",
    path: "/bill-analysis/orgs/" + rs_org_id + "/costs/select",
    body_fields: {
      "dimensions": ["resource_id", "vendor_account_name"],
      "granularity": "day",
      "start_at": start_date,
      "end_at": end_date,
      "metrics": ["cost_amortized_blended_adj"],
      "billing_center_ids": ds_top_level_bcs,
      "limit": 100000,
      "filter": {
        "type": "and",
        "expressions": [
          {
            "dimension": "service",
            "type": "equal",
            "value": "AmazonEC2"
          },
          {
            "dimension": "resource_type",
            "type": "equal",
            "value": "Storage"
          },
          {
            "dimension": "vendor_account",
            "type": "equal",
            "value": ds_aws_account['id']
          },
          {
            type: "not",
            expression: {
              dimension: "adjustment_name",
              type: "substring",
              substring: "Shared"
            }
          }
        ]
      }
    },
    headers: {
      "User-Agent": "RS Policies",
      "Api-Version": "1.0"
    },
    ignore_status: [400]
  }
EOS
end

datasource "ds_volume_costs_grouped" do
  run_script $js_volume_costs_grouped, $ds_volume_costs
end

script "js_volume_costs_grouped", type: "javascript" do
  parameters "ds_volume_costs"
  result "result"
  code <<-EOS
  // Multiple a single day's cost by the average number of days in a month.
  // The 0.25 is to account for leap years for extra precision.
  cost_multiplier = 365.25 / 12

  // Group cost data by resourceId for later use
  result = {}

  _.each(ds_volume_costs, function(item) {
    id = item['resourceId'].toLowerCase()

    if (result[id] == undefined) { result[id] = 0.0 }
    result[id] += item['cost'] * cost_multiplier
  })
EOS
end

datasource "ds_volume_cost_mapping" do
  run_script $js_volume_cost_mapping, $ds_idle_volumes, $ds_volumes_tag_filtered, $ds_volume_costs_grouped, $ds_currency, $ds_aws_account, $ds_applied_policy, $param_unused_days, $param_include_status, $param_min_savings
end

script "js_volume_cost_mapping", type:"javascript" do
  parameters "ds_idle_volumes", "ds_volumes_tag_filtered", "ds_volume_costs_grouped", "ds_currency", "ds_aws_account", "ds_applied_policy", "param_unused_days", "param_include_status", "param_min_savings"
  result "result"
  code <<-'EOS'
  // Used for formatting numbers to look pretty
  function formatNumber(number, separator) {
    formatted_number = "0"

    if (number) {
      formatted_number = (Math.round(number * 100) / 100).toString().split(".")[0]

      if (separator) {
        withSeparator = ""

        for (var i = 0; i < formatted_number.length; i++) {
          if (i > 0 && (formatted_number.length - i) % 3 == 0) { withSeparator += separator }
          withSeparator += formatted_number[i]
        }

        formatted_number = withSeparator
      }

      decimal = (Math.round(number * 100) / 100).toString().split(".")[1]
      if (decimal) { formatted_number += "." + decimal }
    }

    return formatted_number
  }

  result = []

  total_savings = 0.0

  _.each(ds_idle_volumes, function(volume) {
    volume_id = volume['volume_id'].toLowerCase()

    savings = 0.0
    if (ds_volume_costs_grouped[volume_id] != undefined) {
      savings = ds_volume_costs_grouped[volume_id]
    }

    if (savings >= param_min_savings) {
      total_savings += savings

      recommendationDetails = [
        "Delete volume ", volume['volume_id'], " ",
        "in AWS Account ", ds_aws_account['name'], " ",
        "(", ds_aws_account['id'], ")"
      ].join('')

      resourceARN = "arn:aws:ec2:" + volume['region'] + ":" + ds_aws_account['id'] + ":volume/" + volume['volume_id']

      result.push({
        accountID: ds_aws_account['id'],
        accountName: ds_aws_account['name'],
        resourceID: volume['volume_id'],
        resourceARN: resourceARN,
        resourceName: volume['name'],
        region: volume['region'],
        availability_zone: volume['availability_zone'],
        type: volume['volume_type'],
        tags: volume['tags'],
        created_time: volume['created_time'],
        size: parseFloat(volume['size']),
        status: volume['status'],
        age: Math.round(volume['age']),
        savings: parseFloat(savings.toFixed(3)),
        savingsCurrency: ds_currency['symbol'],
        service: "EBS",
        recommendationDetails: recommendationDetails,
        lookbackPeriod: param_unused_days,
        // These are to avoid errors when we hash_exclude these fields
        message: "",
        total_savings: "",
        policy_name: ""
      })
    }
  })

  if (result.length > 0) {
    // Sort by descending order of savings value
    result = _.sortBy(result, function(item) { return item['savings'] * -1 })

    // Message for incident output
    total_volumes = ds_volumes_tag_filtered.length.toString()
    total_unused_volumes = result.length.toString()
    unused_volumes_percentage = (total_unused_volumes / total_volumes * 100).toFixed(2).toString() + '%'

    findings = [
      "Out of ", total_volumes, " volumes analyzed, ",
      total_unused_volumes, " (", unused_volumes_percentage,
      ") are unused and recommended for deletion. "
    ].join('')

    days_noun = "day"
    if (param_unused_days != 1) { days_noun += 's' }

    if (param_include_status == 'Unattached Volumes') {
      settings = [
        "Volumes are considered unused if they are unattached ",
        "and have had no read/write activity for at least ",
        param_unused_days, " ", days_noun, ".\n\n"
      ].join('')
    }

    if (param_include_status == 'Attached Volumes') {
      settings = [
        "Volumes are considered unused if they are attached ",
        "and have had no read/write activity for at least ",
        param_unused_days, " ", days_noun, ".\n\n"
      ].join('')
    }

    if (param_include_status == 'All Volumes') {
      settings = [
        "Volumes are considered unused if they ",
        "have had no read/write activity for at least ",
        param_unused_days, " ", days_noun, ".\n\n"
      ].join('')
    }

    disclaimer = "The above settings can be modified by editing the applied policy and changing the appropriate parameters."

    total_savings = ds_currency['symbol'] + ' ' + formatNumber(parseFloat(total_savings).toFixed(2), ds_currency['separator'])

    result[0]['message'] = findings + settings + disclaimer
    result[0]['total_savings'] = total_savings
    result[0]['policy_name'] = ds_applied_policy['name']
  }

  // Dummy item to ensure the policy's check statement always executes at least once
  result.push({
    resourceID: "",
    age: "",
    message: "",
    total_savings: "",
    tags: "",
    savings: "",
    savingsCurrency: ""
  })
EOS
end

###############################################################################
# Policy
###############################################################################

policy "pol_unused_volumes" do
  validate_each $ds_volume_cost_mapping do
    summary_template "{{ with index data 0 }}{{ .policy_name }}{{ end }}: {{ len data }} Unused Volumes Found"
    detail_template <<-'EOS'
    **Potential Monthly Savings:** {{ with index data 0 }}{{ .total_savings }}{{ end }}

    {{ with index data 0 }}{{ .message }}{{ end }}
    EOS
    check logic_or($ds_parent_policy_terminated, eq(val(item, "resourceID"), ""))
    escalate $esc_email
    escalate $esc_delete_volumes
    hash_exclude "age", "message", "total_savings", "tags", "savings", "savingsCurrency"
    export do
      resource_level true
      field "accountID" do
        label "Account ID"
      end
      field "accountName" do
        label "Account Name"
      end
      field "resourceID" do
        label "Resource ID"
      end
      field "resourceName" do
        label "Resource Name"
      end
      field "tags" do
        label "Resource Tags"
      end
      field "age" do
        label "Age (Days)"
      end
      field "recommendationDetails" do
        label "Recommendation"
      end
      field "type" do
        label "Type"
      end
      field "region" do
        label "Region"
      end
      field "size" do
        label "Size (GB)"
      end
      field "state" do
        label "Status"
        path "status"
      end
      field "savings" do
        label "Estimated Monthly Savings"
      end
      field "savingsCurrency" do
        label "Savings Currency"
      end
      field "lookbackPeriod" do
        label "Lookback Period (Days)"
      end
      field "service" do
        label "Service"
      end
      field "resourceARN" do
        label "Resource ARN"
      end
      field "id" do
        label "ID"
        path "resourceID"
      end
    end
  end
end

###############################################################################
# Escalations
###############################################################################

escalation "esc_email" do
  automatic true
  label "Send Email"
  description "Send incident email"
  email $param_email
end

escalation "esc_delete_volumes" do
  automatic contains($param_automatic_action, "Delete Volumes")
  label "Delete Volumes"
  description "Approval to terminate all selected instances"
  run "delete_volumes", data, $param_take_snapshot
end

###############################################################################
# Cloud Workflow
###############################################################################

define delete_volumes($data, $param_take_snapshot) return $all_responses do
  $$all_responses = []

  foreach $instance in $data do
    sub on_error: handle_error() do
      $snapshot_status_code = 200
      $detach_status_code = 200

      if $instance["state"] == "in-use" || $instance["status"] == "in-use"
        call detach_volume($instance) retrieve $detach_response, $detach_status_code
        $$all_responses << $detach_response
      end

      if $param_take_snapshot == "Yes"
        call create_snapshot($instance) retrieve $snapshot_response, $snapshot_status_code
        $$all_responses << $snapshot_response
      end

      if $snapshot_status_code == 200 && $detach_status_code == 200
        call delete_volume($instance) retrieve $delete_response
        $$all_responses << $delete_response
      end
    end
  end

  if inspect($$errors) != "null"
    raise join($$errors, "\n")
  end
end

define detach_volume($instance) return $response, $status_code do
  $host = "ec2." + $instance["region"] + ".amazonaws.com"
  $href = "/"
  $params = "?Action=DetachVolume&Version=2016-11-15&VolumeId=" + $instance["id"]
  $url = $host + $href + $params
  task_label("GET " + $url)

  $response = http_request(
    auth: $$auth_aws,
    https: true,
    verb: "get",
    host: $host,
    href: $href,
    query_strings: {
      "Action": "DetachVolume",
      "Version": "2016-11-15",
      "VolumeId": $instance["id"]
    }
  )

  $status_code = $response["code"]

  task_label("Get AWS Volume response: " + $instance["id"] + " " + to_json($response))
  $$all_responses << to_json({"req": "GET " + $url, "resp": $response})

  if $response["code"] != 200 && $response["code"] != 202 && $response["code"] != 204
    raise "Unexpected response getting AWS Volume: "+ $instance["id"] + " " + to_json($response)
  else
    task_label("Get AWS Volume successful: " + $instance["id"])

    $status = $response["body"]["DetachVolumeResponse"]["status"]

    while $status !~ "available" do
      sleep(30)
      call get_volume_status($instance) retrieve $status_response, $status
    end
  end
end

define get_volume_status($instance) return $response, $status do
  $host = "ec2." + $instance["region"] + ".amazonaws.com"
  $href = "/"
  $params = "?Action=DescribeVolumes&Version=2016-11-15&VolumeId.1=" + $instance["id"]
  $url = $host + $href + $params
  task_label("GET " + $url)

  $response = http_request(
    auth: $$auth_aws,
    https: true,
    verb: "get",
    host: $host,
    href: $href,
    query_strings: {
      "Action": "DescribeVolumes",
      "Version": "2016-11-15",
      "VolumeId.1": $instance["id"]
    }
  )

  $status = $response["body"]["DescribeVolumesResponse"]["volumeSet"]["item"]["status"]

  task_label("Get AWS Volume response: " + $instance["id"] + " " + to_json($response))
  $$all_responses << to_json({"req": "GET " + $url, "resp": $response})

  if $response["code"] != 200 && $response["code"] != 202 && $response["code"] != 204
    raise "Unexpected response getting AWS Volume: "+ $instance["id"] + " " + to_json($response)
  else
    task_label("Get AWS Volume successful: " + $instance["id"])
  end
end

define create_snapshot($instance) return $response, $status_code do
  $host = "ec2." + $instance["region"] + ".amazonaws.com"
  $href = "/"
  $params = "?Action=CreateSnapshot&Version=2016-11-15&VolumeId=" + $instance["id"]
  $url = $host + $href + $params
  task_label("GET " + $url)

  $response = http_request(
    auth: $$auth_aws,
    https: true,
    verb: "get",
    href: $href,
    host: $host,
    query_strings: {
      "Action": "CreateSnapshot",
      "Version": "2016-11-15",
      "VolumeId": $instance["id"]
    }
  )

  $status_code = $response["code"]

  task_label("Get AWS Volume response: " + $instance["id"] + " " + to_json($response))
  $$all_responses << to_json({"req": "GET " + $url, "resp": $response})

  if $response["code"] != 200 && $response["code"] != 202 && $response["code"] != 204
    raise "Unexpected response getting AWS Volume: "+ $instance["id"] + " " + to_json($response)
  else
    task_label("Get AWS Volume successful: " + $instance["id"])

    $status = $response["body"]["CreateSnapshotResponse"]["status"]
    $snapshot_id = to_s($response["body"]["CreateSnapshotResponse"]["snapshotId"])

    while $status !~ "completed" do
      sleep(30)
      call get_snapshot_status($snapshot_id, $instance["region"]) retrieve $status_response, $status
    end
  end
end

define get_snapshot_status($snapshot_id, $region) return $response, $status do
  $host = "ec2." + $region + ".amazonaws.com"
  $href = "/"
  $params = "?Action=DescribeSnapshots&Version=2016-11-15&SnapshotId=" + $snapshot_id
  $url = $host + $href + $params
  task_label("GET " + $url)

  $response = http_request(
    auth: $$auth_aws,
    https: true,
    verb: "get",
    host: $host,
    href: $href,
    query_strings: {
      "Action": "DescribeSnapshots",
      "Version": "2016-11-15",
      "SnapshotId": $snapshot_id
    }
  )

  $status = $response["body"]["DescribeSnapshotsResponse"]["snapshotSet"]["item"]["status"]

  task_label("Get AWS EC2 Snapshot response: " + $snapshot_id + " " + to_json($response))
  $$all_responses << to_json({"req": "GET " + $url, "resp": $response})

  if $response["code"] != 200 && $response["code"] != 202 && $response["code"] != 204
    raise "Unexpected response getting AWS EC2 Snapshot: "+ $snapshot_id + " " + to_json($response)
  else
    task_label("Get AWS EC2 Snapshot successful: " + $snapshot_id)
  end
end

define delete_volume($instance) return $response do
  $host = "ec2." + $instance["region"] + ".amazonaws.com"
  $href = "/"
  $params = "?Action=DeleteVolume&Version=2016-11-15&VolumeId=" + $instance["id"]
  $url = $host + $href + $params
  task_label("GET " + $url)

  $response = http_request(
    auth: $$auth_aws,
    https: true,
    verb: "get",
    host: $host,
    href: $href,
    query_strings: {
      "Action": "DeleteVolume",
      "Version": "2016-11-15",
      "VolumeId": $instance["id"]
    }
  )

  task_label("Get AWS Volume response: " + $instance["id"] + " " + to_json($response))
  $$all_responses << to_json({"req": "GET " + $url, "resp": $response})

  if $response["code"] != 200 && $response["code"] != 202 && $response["code"] != 204
    raise "Unexpected response getting AWS Volume: "+ $instance["id"] + " " + to_json($response)
  else
    task_label("Get AWS Volume successful: " + $instance["id"])
  end
end

define handle_error() do
  if !$$errors
    $$errors = []
  end
  $$errors << $_error["type"] + ": " + $_error["message"]
  # We check for errors at the end, and raise them all together
  # Skip errors handled by this definition
  $_error_behavior = "skip"
end

###############################################################################
# Meta Policy [alpha]
# Not intended to be modified or used by policy developers
###############################################################################

# If the meta_parent_policy_id is not set it will evaluate to an empty string and we will look for the policy itself,
# if it is set we will look for the parent policy.
datasource "ds_get_parent_policy" do
  request do
    auth $auth_flexera
    host val($ds_flexera_api_hosts, "flexera")
    path join(["/policy/v1/orgs/", rs_org_id, "/projects/", rs_project_id, "/applied-policies/", switch(ne(meta_parent_policy_id, ""), meta_parent_policy_id, policy_id) ])
	  ignore_status [404]
  end
  result do
    encoding "json"
    field "id", jmes_path(response, "id")
  end
end

# If the policy was applied by a meta_parent_policy we confirm it exists if it doesn't we confirm we are deleting
# This information is used in two places:
# - determining whether or not we make a delete call
# - determining if we should create an incident (we don't want to create an incident on the run where we terminate)
datasource "ds_parent_policy_terminated" do
  run_script $js_parent_policy_terminated, $ds_get_parent_policy, meta_parent_policy_id
end

script "js_parent_policy_terminated", type: "javascript" do
  parameters "ds_get_parent_policy", "meta_parent_policy_id"
  result "result"
  code <<-'EOS'
  result = meta_parent_policy_id != "" && ds_get_parent_policy["id"] == undefined
EOS
end

# Two potentials ways to set this up:
# - this way and make a unneeded 'get' request when not deleting
# - make the delete request an interate and have it iterate over an empty array when not deleting and an array with one item when deleting
datasource "ds_terminate_self" do
  request do
    run_script $js_make_terminate_request, $ds_parent_policy_terminated, $ds_flexera_api_hosts, policy_id, rs_org_id, rs_project_id
  end
end

script "js_make_terminate_request", type: "javascript" do
  parameters "ds_parent_policy_terminated", "ds_flexera_api_hosts", "policy_id", "rs_org_id", "rs_project_id"
  result "request"
  code <<-EOS
  var request = {
    auth: "auth_flexera",
    host: ds_flexera_api_hosts["flexera"],
    path: [ "/policy/v1/orgs/", rs_org_id, "/projects/", rs_project_id, "/applied-policies", policy_id ? "/"+policy_id : "" ].join(''),
    verb: ds_parent_policy_terminated ? "DELETE" : "GET"
  }
EOS
end

# This is just a way to have the check delete request connect to the farthest leaf from policy.
# We want the delete check to the first thing the policy does to avoid the policy erroring before it can decide whether or not it needs to self terminate
# Example a customer deletes a credential and then terminates the parent policy. We still want the children to self terminate
# The only way I could see this not happening is if the user who applied the parent_meta_policy was offboarded or lost policy access, the policies who are impersonating the user
# would not have access to self-terminate
# It may be useful for the backend to enable a mass terminate at some point for all meta_child_policies associated with an id.
datasource "ds_is_deleted" do
  run_script $js_is_deleted, $ds_terminate_self
end

script "js_is_deleted", type: "javascript" do
  parameters "ds_terminate_self"
  result "result"
  code 'result = { path: "/"}'
end

name "AWS Unused Volumes"
rs_pt_ver 20180301
type "policy"
short_description "Checks for unused volumes with no read/write operations performed within a specified number of days and, optionally, deletes them. See the [README](https://github.com/flexera/policy_templates/tree/master/cost/aws/unused_volumes) and [docs.rightscale.com/policies](https://docs.rightscale.com/policies/) to learn more."
category "Cost"
severity "low"
default_frequency "daily"
info(
  version: "2.17",
  provider: "AWS",
  service: "EBS",
  policy_set: "Unused Volumes"
)

###############################################################################
# User inputs
###############################################################################

parameter "param_allowed_regions" do
  type "list"
  label "Allowed Regions"
  allowed_pattern /^([a-zA-Z-_]+-[a-zA-Z0-9-_]+-[0-9-_]+,*|)+$/
  description "A list of allowed regions. See the README for more details"
end

parameter "param_email" do
  type "list"
  label "Email addresses"
  description "A list of email addresses to notify."
end

parameter "param_exclude_tags" do
  type "list"
  category "User Inputs"
  label "Exclude Tags"
  description "A list of tags used to excluded volumes from the incident."
end

parameter "param_unattached_days" do
  type "number"
  label "Unused days"
  description "The number of days a volume has been unused. The days should be greater than zero"
  default 30
  min_value 1
end

parameter "param_take_snapshot" do
  type "string"
  label "Create Final Snapshot"
  description "Boolean for whether or not to take a final snapshot before deleting."
  allowed_values "Yes", "No"
  default "Yes"
end

parameter "param_automatic_action" do
  type "list"
  label "Automatic Actions"
  description "When this value is set, this policy will automatically take the selected action(s)"
  allowed_values ["Delete Volumes"]
end

parameter "param_flexera_org_id_for_optima" do
  type "string"
  label "Flexera One Org ID for Optima"
  description "The Flexera One org ID for Optima queries used to determine estimated costs, by default the current org is used"
  default "current"
  allowed_pattern /^(current|[0-9]+)$/
end

parameter "param_log_to_cm_audit_entries" do
  type "string"
  label "Log to CM Audit Entries"
  description "Boolean for whether or not to log any debugging information from actions to CM Audit Entries, this should be left set to No on Flexera EU"
  default "No"
  allowed_values "Yes", "No"
end

###############################################################################
# Authentication
###############################################################################

#Authenticate with AWS
credentials "auth_aws" do
  schemes "aws", "aws_sts"
  label "AWS"
  description "Select the AWS Credential from the list"
  tags "provider=aws"
end

credentials "auth_rs" do
  schemes "oauth2"
  label "flexera"
  description "Select FlexeraOne OAuth2 credentials"
  tags "provider=flexera"
end

###############################################################################
# Pagination
###############################################################################

pagination "aws_volumes_pagination_xml" do
  get_page_marker do
    body_path "//DescribeVolumesResponse/nextToken"
  end
  set_page_marker do
    query "NextToken"
  end
end

###############################################################################
# Datasource
###############################################################################

#Get list of enabled regions for an account
datasource "ds_regions_list" do
  request do
    auth $auth_aws
    verb "GET"
    host "ec2.amazonaws.com"
    path "/"
    query "Action", "DescribeRegions"
    query "Version", "2016-11-15"
  end
  result do
    encoding "xml"
    collect xpath(response, "//DescribeRegionsResponse/regionInfo/item", "array") do
      field "region", xpath(col_item, "regionName")
    end
  end
end

# Get only SCP enabled regions
datasource "ds_regions" do
  run_script $js_regions, $param_allowed_regions, $ds_regions_list
end

#To get list of Unattached Volumes.
datasource "ds_unattached_volumes_list" do
  iterate $ds_regions
    request do
      run_script $js_aws_unattached_volumes_list, val(iter_item, "region")
    end
  result do
  encoding "xml"
  collect xpath(response, "//DescribeVolumesResponse/volumeSet/item", "array") do
    field "tags" do
      collect xpath(col_item, "tagSet/item") do
        field "tagKey", xpath(col_item, "key")
        field "tagValue", xpath(col_item, "value")
      end
    end
    field "attachments" do
      collect xpath(col_item, "attachmentSet/item") do
        field "instance_id", xpath(col_item, "instanceId")
      end
    end
    field "volume_id", xpath(col_item, "volumeId")
    field "availability_zone", xpath(col_item, "availabilityZone")
    field "snapshot_id", xpath(col_item, "snapshotId")
    field "volume_Type", xpath(col_item, "volumeType")
    field "region", val(iter_item, "region")
    field "createdTime", xpath(col_item, "createTime")
    field "size", xpath(col_item, "size")
   end
  end
end

datasource "ds_unattached_volumes_map" do
  run_script $js_filter_aws_unattached_volumes, $ds_unattached_volumes_list, $param_exclude_tags, $param_unattached_days
end

datasource "ds_volume_read_bytes_metrics" do
  iterate $ds_unattached_volumes_map
  request do
    run_script $js_aws_volumes_cloud_watch_read_byte_metrics, val(iter_item, "vol_id"), val(iter_item, "region"), $param_unattached_days
  end
  result do
    encoding "json"
    collect jmes_path(response, "GetMetricStatisticsResponse.GetMetricStatisticsResult") do
      field "volumeId", val(iter_item, "vol_id")
      field "dataPoints", jmes_path(col_item, "Datapoints")
    end
  end
end

datasource "ds_volume_write_bytes_metrics" do
  iterate $ds_unattached_volumes_map
  request do
    run_script $js_aws_volumes_cloud_watch_write_byte_metrics, val(iter_item, "vol_id"), val(iter_item, "region"), $param_unattached_days
  end
  result do
    encoding "json"
    collect jmes_path(response, "GetMetricStatisticsResponse.GetMetricStatisticsResult") do
      field "volumeId", val(iter_item, "vol_id")
      field "dataPoints", jmes_path(col_item, "Datapoints")
    end
  end
end

datasource "ds_check_volumes_read_or_write_operations" do
  run_script $js_check_volumes_read_or_write_operations, $ds_unattached_volumes_map, $ds_volume_read_bytes_metrics, $ds_volume_write_bytes_metrics
end

datasource "ds_currency_reference" do
  request do
    host "raw.githubusercontent.com"
    path "/rightscale/policy_templates/master/cost/scheduled_reports/currency_reference.json"
    header "User-Agent", "RS Policies"
  end
end

datasource "ds_flexera_optima" do
  run_script $js_flexera_optima, $param_flexera_org_id_for_optima, rs_org_id
end

datasource "ds_currency_code" do
  request do
    auth $auth_rs
    host rs_optima_host
    path join(["/bill-analysis/orgs/", val($ds_flexera_optima, "org_id"), "/settings/currency_code"])
    header "Api-Version", "0.1"
    header "User-Agent", "RS Policies"
    ignore_status [403]
  end
  result do
    encoding "json"
    field "id", jmes_path(response, "id")
    field "value", jmes_path(response, "value")
  end
end

datasource "ds_billing_centers" do
  request do
    auth $auth_rs
    host rs_optima_host
    path join(["/analytics/orgs/", val($ds_flexera_optima, "org_id"), "/billing_centers"])
    header "Api-Version", "1.0"
    header "User-Agent", "RS Policies"
    query "view", "allocation_table"
    ignore_status [403]
  end
  result do
    encoding "json"
    collect jmes_path(response, "[*]") do
      field "href", jmes_path(col_item, "href")
      field "id", jmes_path(col_item, "id")
      field "name", jmes_path(col_item, "name")
      field "parent_id", jmes_path(col_item, "parent_id")
    end
  end
end

datasource "ds_top_level_billing_centers" do
  run_script $js_top_level_bc, $ds_billing_centers
end

datasource "ds_get_caller_identity" do
  request do
    auth $auth_aws
    verb "GET"
    host "sts.amazonaws.com"
    path "/"
    header "User-Agent", "RS Policies"
    query "Action", "GetCallerIdentity"
    query "Version", "2011-06-15"
  end
  result do
    encoding "xml"
    collect xpath(response, "//GetCallerIdentityResponse/GetCallerIdentityResult") do
      field "account", xpath(col_item, "Account")
    end
 end
end

datasource "ds_volume_costs" do
  request do
    run_script $js_get_costs, $ds_get_caller_identity, $ds_top_level_billing_centers, val($ds_flexera_optima, "org_id"), rs_optima_host
  end
  result do
    encoding "json"
    collect jmes_path(response, "rows[*]") do
      field "resource_id", jmes_path(col_item, "dimensions.resource_id")
      field "cost_nonamortized_unblended_adj", jmes_path(col_item, "metrics.cost_nonamortized_unblended_adj")
    end
  end
end

datasource "ds_volume_cost_mapping" do
  run_script $js_volume_cost_mapping, $ds_check_volumes_read_or_write_operations, $ds_volume_costs, $ds_currency_code, $ds_currency_reference, $ds_billing_centers, $ds_get_caller_identity
end

###############################################################################
# Script
###############################################################################

script "js_regions", type: "javascript" do
  parameters "user_entered_regions", "all_regions"
  result "regions"
  code <<-EOS
    if(_.isEmpty(user_entered_regions)){
      regions = all_regions;
    }else{
      //Filter unique regions
      var uniqueRegions = _.uniq(user_entered_regions);
      var all_regions_list = [];
      all_regions.forEach(function(all_region){
        all_regions_list.push(all_region.region)
      })

      //Filter valid regions
      var valid_regions = [];
      _.map(uniqueRegions, function(uniqueRegion){
        if(all_regions_list.indexOf(uniqueRegion) > -1){
          valid_regions.push({"region": uniqueRegion})
        }
      })

      //Throw an error if no valid regions found
      if (_.isEmpty(valid_regions)) {
        regions = all_regions;
      }else{
        regions = valid_regions
      }
    }
  EOS
end

#https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DescribeVolumes.html
script "js_aws_unattached_volumes_list", type: "javascript" do
  parameters "region"
  result "results"
  code <<-EOS
  results = {
    auth: "auth_aws",
    host: 'ec2.'+region+'.amazonaws.com',
    path: '/',
    pagination: "aws_volumes_pagination_xml",
    query_params: {
      "Action": "DescribeVolumes",
      "Version": "2016-11-15",
      "Filter.1.Name": "status",
      "Filter.1.Value.1": "available"
    }
  }
  EOS
end

script "js_filter_aws_unattached_volumes", type: "javascript" do
  parameters "ds_unattached_volumes_list", "param_exclude_tags", "unattachedDays"
  result "content"
  code <<-EOS
  var param_exclude_tags_lower=[];
  for(var j=0;j<param_exclude_tags.length;j++){
    param_exclude_tags_lower[j] = param_exclude_tags[j].toString().toLowerCase();
  }
  var content = [];
  for(var i=0;i<ds_unattached_volumes_list.length;i++){
    vol = ds_unattached_volumes_list[i];
    // Check, if the tag present in entered param_exclude_tags, ignore the volume if the tag matches/present.
    var tags = vol['tags'];
    var isTagMatched = false;
    var tagKeyValue = "";
    var startDate = new Date(vol['createdTime']); // Volume Created Date
    var endDate = new Date();
    var timeDifference = endDate.getTime() - startDate.getTime();
    var daysDifference = (timeDifference / (1000 * 3600 * 24)).toFixed(2);
    for(var k=0; k < tags.length; k++){
      tag = tags[k];
      if((param_exclude_tags_lower.indexOf((tag['tagKey']).toLowerCase()) !== -1) || (param_exclude_tags_lower.indexOf((tag['tagKey']+'='+tag['tagValue']).toLowerCase()) !== -1)){
        isTagMatched = true;
      }

      // Constructing tags with comma separated to display in detail_template
      if((tag['tagValue']).length > 0){
        tagKeyValue = tagKeyValue+" , "+tag['tagKey']+'='+tag['tagValue'];
      }else{
        tagKeyValue = tagKeyValue+" , "+tag['tagKey'];
      }
    }
    if(tagKeyValue === "" || tagKeyValue === " " || tagKeyValue == ""){
      tagKeyValue = "   < No Value >";
    }
    //If the volume tag does not match with entered param_exclude_tags
    if(daysDifference > unattachedDays){
      if(!(isTagMatched)){
        content.push({
          tagKeyValue : (tagKeyValue.slice(2)),
          vol_id : vol['volume_id'],
          availability_zone : vol['availability_zone'],
          snapshot_id : vol['snapshot_id'],
          volume_Type : vol['volume_Type']
          region : vol['region'],
          createdTime : vol['createdTime'],
          size : vol['size']+" GB"
        })
      }
    }
  }
  EOS
end

script "js_aws_volumes_cloud_watch_read_byte_metrics", type: "javascript" do
  parameters "volume_id", "region", "unattachedDays"
  result "metrics"
  code <<-EOS
    var endDate = new Date().toISOString();
    var startDate = new Date(new Date().setDate(new Date().getDate() - unattachedDays)).toISOString();
    var period = 2592000;
    var datapoints = (unattachedDays / 30).toFixed(2);
    if(datapoints > 1440){
      period = period * 60;
    }
    console.log("Period "+period);
    period = ""+period+"";
    metrics = {
     "auth": "auth_aws",
     "host": 'monitoring.'+region+'.amazonaws.com',
     "verb": "GET",
     "path": "/",
     "headers": {
       "User-Agent": "RS Policies",
       "Content-Type": "application/json",
       "x-amz-target": "GraniteServiceVersion20100801.GetMetricStatistics",
       "Accept": "application/json",
       "Content-Encoding": "amz-1.0"
     }
     "query_params": {
       'Action': 'GetMetricStatistics',
       'Version': '2010-08-01',
       'Namespace': 'AWS/EBS',
       'MetricName': 'VolumeReadBytes',
       'Dimensions.member.1.Name': 'VolumeId',
       'Dimensions.member.1.Value': volume_id,
       'StartTime': startDate,
       'EndTime': endDate,
       'Period': period,
       'Statistics.member.1': 'Maximum',
       'Statistics.member.2': 'Average',
       'Statistics.member.3': 'Minimum'
     }
    }
  EOS
end

script "js_aws_volumes_cloud_watch_write_byte_metrics", type: "javascript" do
  parameters "volume_id", "region", "unattachedDays"
  result "metrics"
  code <<-EOS
    var endDate = new Date().toISOString();
    var startDate = new Date(new Date().setDate(new Date().getDate() - unattachedDays)).toISOString();
    var period = 2592000;
    var dataPoints = (unattachedDays/30).toFixed(2);
    if(dataPoints > 1440){
      period = period * 60;
    }
    period = ""+period+"";
    console.log("Period "+period);
    metrics = {
     "auth": "auth_aws",
     "host": 'monitoring.'+region+'.amazonaws.com',
     "verb": "GET",
     "path": "/",
     "headers": {
       "User-Agent": "RS Policies",
       "Content-Type": "application/json",
       "x-amz-target": "GraniteServiceVersion20100801.GetMetricStatistics",
       "Accept": "application/json",
       "Content-Encoding": "amz-1.0"
     }
     "query_params": {
       'Action': 'GetMetricStatistics',
       'Version': '2010-08-01',
       'Namespace': 'AWS/EBS',
       'MetricName': 'VolumeWriteBytes',
       'Dimensions.member.1.Name': 'VolumeId',
       'Dimensions.member.1.Value': volume_id,
       'StartTime': startDate,
       'EndTime': endDate,
       'Period': period,
       'Statistics.member.1': 'Maximum',
       'Statistics.member.2': 'Average',
       'Statistics.member.3': 'Minimum'
     }
    }
  EOS
end

script "js_check_volumes_read_or_write_operations", type: 'javascript' do
  parameters "volumesList", "volumesReadMetricsData", "volumesWriteMetricsData"
  result "unattachedVolumes"
  code <<-EOS
  var unattachedVolumes = [];
  for(var i=0; i < volumesList.length; i++){
    var volume = volumesList[i];
    var readWriteOperationDone = false;
    for(var j=0; j < volumesReadMetricsData.length; j++){
      var readMetricData = volumesReadMetricsData[j];
      if(volume['vol_id'] === readMetricData['volumeId']){
        var readMetricDataPoints = readMetricData['dataPoints'];
        if(readMetricDataPoints.length > 0){
          readWriteOperationDone = true;
        }
        break;
      }
    }
    if(!readWriteOperationDone){
      for(var k=0; k < volumesWriteMetricsData.length; k++){
        var writeMetricData = volumesWriteMetricsData[k];
        if(volume['vol_id'] === writeMetricData['volumeId']){
          var writeMetricDataPoints = writeMetricData['dataPoints'];
          if(writeMetricDataPoints.length > 0){
            readWriteOperationDone = true;
          }
          break;
        }
      }
    }
    if(!readWriteOperationDone){
      unattachedVolumes.push({
        volumeId : volume['vol_id'],
        region : volume['region'],
        availabilityZone : volume['availability_zone'],
        volumeType : volume['volume_Type'],
        tags : volume['tagKeyValue'],
        createdTime : volume['createdTime'],
        size : volume['size'],
        savings:"N/A"
      })
    }
  }
  EOS
end

script "js_flexera_optima", type: "javascript" do
  parameters "flexera_org_id_for_optima", "current_flexera_org_id"
  result "flexera_optima"
  code <<-EOS
  var flexera_optima = {
    org_id: flexera_org_id_for_optima == "current" ? current_flexera_org_id : flexera_org_id_for_optima,
  };
  EOS
end

script "js_top_level_bc", type: "javascript" do
  parameters "billing_centers"
  result "filtered_billing_centers"
  code <<-EOS
  var filtered_billing_centers =
    _.reject(billing_centers, function(bc){ return bc.parent_id != null });
  EOS
end

script "js_get_costs", type: "javascript" do
  parameters "account_id", "billing_centers", "org", "optima_host"
  result "request"
  code <<-EOS
    // returns date formatted as string: YYYY-mm-dd
    function getFormattedDailyDate(date) {
      var year = date.getFullYear();
      var month = (1 + date.getMonth()).toString();
      month = month.length > 1 ? month : '0' + month;
      var day = date.getDate().toString();
      day = day.length > 1 ? day : '0' + day;
      return year + '-' + month + '-' + day;
    }

    var start_date = getFormattedDailyDate(new Date(new Date().setDate(new Date().getDate() - 3)));
    var end_date = getFormattedDailyDate(new Date(new Date().setDate(new Date().getDate() - 2)));

    var request = {
      auth: "auth_rs",
      host: optima_host,
      verb: "POST",
      path: "/bill-analysis/orgs/" + org + "/costs/select",
      body_fields: {
        "dimensions": ["resource_id"],
        "granularity": "day",
        "start_at": start_date,
        "end_at": end_date,
        "metrics": ["cost_nonamortized_unblended_adj"],
        "billing_center_ids": _.compact(_.map(billing_centers, function(value){ return value.id})),
        "limit": 10000,
        "filter": {
          "expressions": [
            {
              "dimension": "service",
              "type": "equal",
              "value": "AmazonEC2"
            },
            {
              "dimension": "resource_type",
              "type": "equal",
              "value": "Storage"
            },
            {
              "dimension": "vendor_account",
              "type": "equal",
              "value": account_id[0]["account"]
            }
          ],
          "type": "and"
        }
      },
      headers: {
        "User-Agent": "RS Policies",
        "Api-Version": "1.0"
      },
      ignore_status: [400]
    }
  EOS
end

script "js_volume_cost_mapping", type:"javascript" do
  parameters "volumes", "volume_costs", "ds_currency_code", "ds_currency_reference", "ds_billing_centers", "ds_get_caller_identity"
  result "result"
  code <<-EOS
  var unused_volumes=[];
  var result = {};
  var message='';
  var count=0;
  function formatNumber(number, separator){
    var numString =number.toString();
    var values=numString.split(".");
    var result = ''
    while (values[0].length > 3){
      var chunk = values[0].substr(-3)
      values[0] = values[0].substr(0, values[0].length - 3)
      result = separator + chunk + result
    }
    if (values[0].length > 0){
      result = values[0] + result
    }
    if(values[1]==undefined){
      return result;
    }
    return result+"."+values[1];
  }
  if(ds_billing_centers.length!=0){
    // Format costs with currency symbol and thousands separator
    if( ds_currency_code['value'] !== undefined ) {
      if (ds_currency_reference[ds_currency_code['value']] !== undefined ) {
        var cur = ds_currency_reference[ds_currency_code['value']]['symbol']
        if( ds_currency_reference[ds_currency_code['value']]['t_separator'] !== undefined ) {
          var separator = ds_currency_reference[ds_currency_code['value']]['t_separator']
        } else {
          var separator = ""
        }
      } else {
        var cur = ""
        var separator = ""
      }
    } else {
      var cur = "$"
      var separator = ","
    }
    var total_savings=0;
    _.each(volumes, function(volume){
      var cost_objects = _.where(volume_costs, {resource_id: volume["volumeId"]});
      console.log(cost_objects)
      if (_.size(cost_objects) > 0){
        count++;
        var sum = _.reduce(_.compact(_.map(cost_objects, function(value){ return value.cost_nonamortized_unblended_adj})), function(memo, num){ return memo + num; }, 0);
        var monthly_savings = sum*30;
        total_savings=total_savings+monthly_savings;
        unused_volumes.push({
          accountId: ds_get_caller_identity[0]['account'],
          volumeId : volume['volumeId'],
          region : volume['region'],
          availabilityZone : volume['availabilityZone'],
          volumeType : volume['volumeType'],
          tags : volume['tags'],
          createdTime : volume['createdTime'],
          size : volume['size'],
          savings: cur + ' '+formatNumber((Math.round(monthly_savings * 100) / 100), separator),
        })
      } else {
        unused_volumes.push({
          accountId: ds_get_caller_identity[0]['account'],
          volumeId : volume['volumeId'],
          region : volume['region'],
          availabilityZone : volume['availabilityZone'],
          volumeType : volume['volumeType'],
          tags : volume['tags'],
          createdTime : volume['createdTime'],
          size : volume['size'],
          savings: "N/A",
        })
      }
    })

    if(count){
      total_savings=cur + ' '+formatNumber((Math.round(total_savings * 100) / 100), separator);
      message="The total estimated monthly savings are "+total_savings;
    }
    else{
      message="The Flexera Optima system does not have any data to calculate savings for these resources";
    }
  }
  else{
    unused_volumes=volumes;
    message="You do not have the minimum required role of billing_center_viewer to view the savings";
  }
  result={
    "unused_volumes": unused_volumes,
    "message": message,
    "accountId": ds_get_caller_identity[0]['account']
  }
  result.unused_volumes=_.sortBy(result.unused_volumes,'region')
  EOS
end

###############################################################################
# Policy
###############################################################################

policy "policy_unattached_volumes_list" do
  validate $ds_volume_cost_mapping do
    summary_template "AWS Account ID: {{ data.accountId }} - {{ len data.unused_volumes }} Unused Volumes Found"
    detail_template <<-EOS
{{data.message}}
EOS
    escalate $report_unused_volumes
    escalate $delete_volumes
    check eq(size(val(data, "unused_volumes")), 0)
    export "unused_volumes" do
      resource_level true
      field "accountId" do
        label "Account Id"
      end
      field "region" do
        label "Region"
      end
      field "id" do
        label "Volume Id"
        path "volumeId"
      end
      field "volumeType" do
        label "Volume Type"
      end
      field "size" do
        label "Size"
      end
      field "tags" do
        label "Tags"
      end
      field "savings" do
        label "Estimated Monthly Savings"
      end
    end
  end
end

###############################################################################
# Escalations
###############################################################################

escalation "report_unused_volumes" do
  automatic true
  label "Send Email"
  description "Send incident email"
  email $param_email
end

escalation "delete_volumes" do
  automatic contains($param_automatic_action, "Delete Volumes")
  label "Delete Volumes"
  description "Approval to delete all selected volumes"
  run "take_action", data, $param_take_snapshot, $param_log_to_cm_audit_entries
end

###############################################################################
# Cloud Workflow
###############################################################################

define take_action($data, $param_take_snapshot, $param_log_to_cm_audit_entries) do
  $$debug = $param_log_to_cm_audit_entries == "Yes"
  $$errors = []
  foreach $item in $data do
    $snapshot_status_code = 200
    if $param_take_snapshot == "Yes"
      call create_volumes_snapshot($item, $$errors) retrieve $status_code, $$errors
      $snapshot_status_code = $status_code
    end
    if $snapshot_status_code == 200
      call delete_volume($item, $$errors) retrieve $status_code, $$errors
    end
  end
  if size($$errors) > 0
    $error = join($$errors, "\n")
    call sys_log("Errors", $error)
    raise $error
  end
end

define create_volumes_snapshot($item, $errors) return $status_code, $errors do
  $status_code
  $snapshot_status = "pending"
  $response = http_request(
    auth: $$auth_aws,
    https: true,
    verb: "get",
    host: "ec2." + $item["region"] + ".amazonaws.com",
    href: "/",
    query_strings: {
      "Action": "CreateSnapshot",
      "Version": "2016-11-15",
      "VolumeId": $item["id"]
    }
  )
  call check_response_and_append_if_error($response, "Create Volumes Snapshot", $errors) retrieve $errors
  call sys_log("Create Volumes Snapshot Response ", to_s($response))
  $status_code = $response["code"]

  if $status_code == 200
    $snapshot_status = $response["body"]["CreateSnapshotResponse"]["status"]
    $snapshotId = $response["body"]["CreateSnapshotResponse"]["snapshotId"]

    if $snapshot_status == "pending"
      $condition_check = "completed"

      while $condition_check !~ $snapshot_status do
        sleep(30)
        call get_snapshot_status(to_s($snapshotId), []) retrieve $status, $snapshot_errors
        $snapshot_status = $status

        if $snapshot_status == "error" || size($snapshot_errors) > 0
          $status_code = 400
          $snapshot_status = "completed"
          foreach $error in $snapshot_errors do
            $errors << $error
          end
        end
      end
    end
  end
end

define delete_volume($item, $errors) return $status_code, $errors do
  $delete_response = http_request(
    auth: $$auth_aws,
    https: true,
    verb: "get",
    host: "ec2." + $item["region"] + ".amazonaws.com",
    href: "/",
    query_strings: {
      "Action": "DeleteVolume",
      "Version": "2016-11-15",
      "VolumeId": $item["id"]
    }
  )
  call check_response_and_append_if_error($delete_response, "Delete Volume", $errors) retrieve $errors
  call sys_log("Delete Volumes Response ", to_s($delete_response))
  $volume_delete_status = $delete_response["code"]
  if $volume_delete_status != 200
    $volume_delete_body = $delete_response["body"]
    $split_body = split($volume_delete_body, "<Message>")
    $split_final_message = split($split_body[1], "</Message>");
    call create_tag($item["region"], $item["id"], to_s($split_final_message[0]), $errors) retrieve $errors
  end
end

define get_snapshot_status($snapshotId, $errors) return $snapshot_status, $errors do
  call sys_log("Inside Get Snapshot Details Snapshot Id ", $snapshotId)
  $snapshot_response = http_request(
    auth: $$auth_aws,
    https: true,
    verb: "get",
    host: "ec2." + $item["region"] + ".amazonaws.com",
    href: "/",
    query_strings: {
      "Action": "DescribeSnapshots",
      "Version": "2016-11-15",
      "SnapshotId": $snapshotId
    }
  )
  call check_response_and_append_if_error($snapshot_response, "Describe Snapshot " + $snapshotId, $errors) retrieve $errors
  call sys_log("Get Snapshot Details ", to_s($snapshot_response))
  $snapshot_status = $snapshot_response["body"]["DescribeSnapshotsResponse"]["snapshotSet"]["item"]["status"]
end

define create_tag($region, $volumeId, $message, $errors) return $errors do
  call sys_log("Create Tag  ", $volumeId)
  $response = http_request(
    auth: $$auth_aws,
    https: true,
    verb: "get",
    host: "ec2." + $region + ".amazonaws.com",
    href: "/",
    query_strings: {
      "Action": "CreateTags",
      "Version": "2016-11-15",
      "ResourceId.1": $volumeId,
      "Tag.1.Key": "Error While Deleting Volume",
      "Tag.1.Value": to_s($message)
    }
  )
  call check_response_and_append_if_error($response, "Create Tag", $errors) retrieve $errors
end

define skip_error_and_append($subject) do
  $$errors << "Unexpected error for " + $subject + "\n  " + to_s($_error)
  $_error_behavior = "skip"
end

define check_response_and_append_if_error($response, $request_description, $errors) return $errors do
  if $response["code"] > 299 || $response["code"] < 200
    $errors << "Unexpected status code from " + $request_description + " request\n  " + to_s($response)
  end
end

define sys_log($subject, $detail) on_error: skip_error_and_append("Creating audit entry for " + $subject) do
  if $$debug
    rs_cm.audit_entries.create(
      notify: "None",
      audit_entry: {
        auditee_href: @@account,
        summary: "AWS Unused Volumes Policy :- " + $subject,
        detail: $detail
      }
    )
  end
end

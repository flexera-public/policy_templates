name "AWS Rightsize Compute Instances"
rs_pt_ver 20180301
type "policy"
short_description "Check for instances that have inefficient utilization for the last 30 days and rightsizes or terminates them after approval. See the [README](https://github.com/flexera-public/policy_templates/tree/master/cost/aws/rightsize_compute_instances/) and [docs.flexera.com/flexera/EN/Automation](https://docs.flexera.com/flexera/EN/Automation/AutomationGS.htm) to learn more."
long_description ""
severity "low"
category "Cost"
default_frequency "weekly"
info(
  version: "4.0",
  provider: "AWS",
  service: "Compute",
  policy_set: "Rightsize Compute Instances",
  recommendation_type: "Usage Reduction"
)

###############################################################################
# Parameters
###############################################################################

parameter "param_aws_account_number" do
  type "string"
  label "Account Number"
  description "The account number for AWS STS Cross Account Roles."
  default ""
end

parameter "param_allow_or_deny" do
  type "string"
  label "Allow/Deny Regions"
  description "Allow or Deny entered regions. See the README for more details"
  allowed_values "Allow", "Deny"
  default "Allow"
end

parameter "param_regions_list" do
  type "list"
  label "Regions"
  allowed_pattern /^([a-zA-Z-_]+-[a-zA-Z0-9-_]+-[0-9-_]+,*|)+$/
  description "A list of allowed or denied regions. See the README for more details"
end

parameter "param_idle_threshold_cpu_value" do
  type "number"
  label "Idle Instance CPU Threshold (%)"
  description "The CPU threshold at which to consider an instance to be 'idle' and therefore be flagged for termination. Set to -1 to ignore CPU utilization"
  default 5
  min_value -1
  max_value 100
end

parameter "param_idle_threshold_mem_value" do
  type "number"
  label "Idle Instance Memory Threshold (%)"
  description "The Memory threshold at which to consider an instance to be 'idle' and therefore be flagged for termination. Set to -1 to ignore memory utilization"
  default 5
  min_value -1
  max_value 100
end

parameter "param_underutil_threshold_cpu_value" do
  type "number"
  label "Underutilized Instance CPU Threshold (%)"
  description "The CPU threshold at which to consider an instance to be 'underutilized' and therefore be flagged for downsizing. Set to -1 to ignore CPU utilization"
  default 40
  min_value -1
  max_value 100
end

parameter "param_underutil_threshold_mem_value" do
  type "number"
  label "Underutilized Instance Memory Threshold (%)"
  description "The Memory threshold at which to consider an instance to be 'underutilized' and therefore be flagged for downsizing. Set to -1 to ignore memory utilization"
  default 40
  min_value -1
  max_value 100
end

parameter "param_check_both" do
  type "string"
  label "Idle/Utilized for both CPU/Memory or either"
  description "Set whether an instance should be considered idle and/or underutilized only if both CPU and memory are under the thresholds or if either CPU or memory are under. Note: this parameter is only valid when at least one Memory Utilization threshold and one CPU Utilization threshold is NOT set to -1"
  default "Either CPU or Memory"
  allowed_values "Both CPU and Memory", "Either CPU or Memory"
end

parameter "param_threshold_statistic" do
  type "string"
  label "Threshold Statistic"
  description "Statistic to use for the metric threshold"
  default "Average"
  allowed_values "Average", "p99", "p95", "p90"
end

parameter "param_exclusion_tag_key" do
  category "User Inputs"
  label "Exclusion Tag Key:Value"
  description "Cloud native tag to ignore instances that you don't want to consider for downsizing or termination. Format: Key:Value"
  type "string"
  allowed_pattern /(^$)|([\w]?)+\:([\w]?)+/
  default ""
end

parameter "param_api_wait" do
  type "number"
  label "CloudWatch API Wait Time"
  description "Amount of time to wait between CloudWatch API requests to avoid throttling (seconds)"
  default 5
  min_value 1
  max_value 60
end

parameter "param_automatic_action" do
  type "list"
  label "Automatic Actions"
  description "When this value is set, this policy will automatically take the selected action(s)"
  allowed_values ["Terminate Instances"]
  default []
end

parameter "param_log_to_cm_audit_entries" do
  type "string"
  label "Log to CM Audit Entries"
  description "Boolean for whether or not to log any debugging information from actions to CM Audit Entries, this should be left set to No on Flexera EU"
  default "No"
  allowed_values "Yes", "No"
end

parameter "param_email" do
  type "list"
  label "Email addresses to notify"
  description "Email addresses of the recipients you wish to notify when new incidents are created"
end

###############################################################################
# Authentication
###############################################################################

credentials "auth_aws" do
  schemes "aws","aws_sts"
  label "AWS"
  description "Select the AWS Credential from the list"
  tags "provider=aws"
  aws_account_number $param_aws_account_number
end

credentials "auth_flexera" do
  schemes "oauth2"
  label "flexera"
  description "Select Flexera One OAuth2 credentials"
  tags "provider=flexera"
end

###############################################################################
# Datasources & Scripts
###############################################################################

datasource "ds_currency_reference" do
  request do
    host "raw.githubusercontent.com"
    path "/rightscale/policy_templates/master/cost/scheduled_reports/currency_reference.json"
    header "User-Agent", "RS Policies"
  end
end

datasource "ds_currency_code" do
  request do
    auth $auth_flexera
    host rs_optima_host
    path join(["/bill-analysis/orgs/", rs_org_id, "/settings/currency_code"])
    header "Api-Version", "0.1"
    header "User-Agent", "RS Policies"
    ignore_status [403]
  end
  result do
    encoding "json"
    field "id", jmes_path(response, "id")
    field "value", jmes_path(response, "value")
  end
end

datasource "ds_currency" do
  run_script $js_create_currency, $ds_currency_reference, $ds_currency_code
end

script "js_create_currency", type:"javascript" do
  parameters "ds_currency_reference", "ds_currency_code"
  result "result"
  code <<-EOS
  symbol = "$"
  separator = ","

  if (ds_currency_code['value'] !== undefined) {
    if (ds_currency_reference[ds_currency_code['value']] !== undefined) {
      symbol = ds_currency_reference[ds_currency_code['value']]['symbol']

      if (ds_currency_reference[ds_currency_code['value']]['t_separator'] !== undefined) {
        separator = ds_currency_reference[ds_currency_code['value']]['t_separator']
      }
    }
  }

  result = {
    symbol: symbol,
    separator: separator
  }
EOS
end

datasource "ds_get_caller_identity" do
  request do
    auth $auth_aws
    verb "GET"
    host "sts.amazonaws.com"
    path "/"
    header "User-Agent", "RS Policies"
    query "Action", "GetCallerIdentity"
    query "Version", "2011-06-15"
  end
  result do
    encoding "xml"
    collect xpath(response, "//GetCallerIdentityResponse/GetCallerIdentityResult") do
      field "account", xpath(col_item, "Account")
    end
  end
end

datasource "ds_aws_account" do
  run_script $js_aws_account, $ds_get_caller_identity
end

script "js_aws_account", type:"javascript" do
  parameters "ds_get_caller_identity"
  result "result"
  code "result = ds_get_caller_identity[0]['account']"
end

datasource "ds_regions_list" do
  request do
    auth $auth_aws
    verb "GET"
    host "ec2.amazonaws.com"
    path "/"
    query "Action", "DescribeRegions"
    query "Version", "2016-11-15"
    query "Filter.1.Name", "opt-in-status"
    query "Filter.1.Value.1", "opt-in-not-required"
    query "Filter.1.Value.2", "opted-in"
    # Header X-Meta-Flexera has no affect on datasource query, but is required for Meta Policies
    # Forces `ds_is_deleted` datasource to run first during policy execution
    header "Meta-Flexera", val($ds_is_deleted, "path")
  end
  result do
    encoding "xml"
    collect xpath(response, "//DescribeRegionsResponse/regionInfo/item", "array") do
      field "region", xpath(col_item, "regionName")
    end
  end
end

datasource "ds_regions" do
  run_script $js_regions, $param_regions_list, $ds_regions_list, $param_allow_or_deny
end

script "js_regions", type:"javascript" do
  parameters "param_regions_list", "ds_regions_list", "param_allow_or_deny"
  result "result"
  code <<-EOS
  result = ds_regions_list
  allow_deny_test = { "Allow": true, "Deny": false }

  if (param_regions_list.length > 0) {
    result = _.filter(ds_regions_list, function(item) {
      return _.contains(param_regions_list, item['region']) == allow_deny_test[param_allow_or_deny]
    })
  }
EOS
end

datasource "ds_instance_sets" do
  iterate $ds_regions
  request do
    auth $auth_aws
    host join(['ec2.', val(iter_item, 'region'), '.amazonaws.com'])
    path '/'
    header 'User-Agent', 'RS Policies'
    header 'Content-Type', 'text/xml'
    query 'Action', 'DescribeInstances'
    query 'Version', '2016-11-15'
    query 'Filter.1.Name', 'instance-state-name'
    query 'Filter.1.Value.1', 'running'
  end
  result do
    encoding "xml"
    collect xpath(response, "//DescribeInstancesResponse/reservationSet/item", "array") do
      field "instances_set" do
        collect xpath(col_item,"instancesSet/item","array") do
          field "region",val(iter_item, "region")
          field "instanceId", xpath(col_item, "instanceId")
          field "imageId", xpath(col_item, "imageId")
          field "resourceType", xpath(col_item, "instanceType")
          field "platform", xpath(col_item, "platformDetails")
          field "privateDnsName", xpath(col_item, "privateDnsName")
          field "launchTime", xpath(col_item, "launchTime")
          field "tags" do
            collect xpath(col_item,"tagSet/item", "array") do
              field "key", xpath(col_item, "key")
              field "value", xpath(col_item, "value")
            end
          end
        end
      end
    end
  end
end

datasource "ds_instances" do
  run_script $js_instances, $ds_instance_sets, $param_exclusion_tag_key
end

script "js_instances", type: "javascript" do
  result "result"
  parameters "ds_instance_sets", "param_exclusion_tag_key"
  code <<-EOS
  result = []

  _.each(ds_instance_sets, function(item) {
    filtered_instances = _.reject(item['instances_set'], function(instance) {
      tags = []

      if (instance['tags'] != null && instance['tags'] != undefined) {
        _.each(instance['tags'], function(tag) {
          tags.push([tag['key'], tag['value']].join(':'))
        })
      }

      return _.contains(tags, param_exclusion_tag_key)
    })

    result.concat(filtered_instances)
  })
EOS
end

datasource "ds_cloudwatch_queries" do
  run_script $js_cloudwatch_queries, $ds_instances, $param_idle_threshold_cpu_value, $param_idle_threshold_mem_value, $param_underutil_threshold_cpu_value, $param_underutil_threshold_mem_value
end

script "js_cloudwatch_queries", type: "javascript" do
  result "result"
  parameters "ds_instances", "param_idle_threshold_cpu_value", "param_idle_threshold_mem_value", "param_underutil_threshold_cpu_value", "param_underutil_threshold_mem_value"
  code <<-EOS
  // Set CPU threshold for CloudWatch call
  // If Underutilized threshold is ignored, then check for Idle threshold
  var param_avg_cpu = -1

  if (param_underutil_threshold_cpu_value != -1) {
    param_avg_cpu = param_underutil_threshold_cpu_value
  } else {
    if (param_idle_threshold_cpu_value != -1) {
      param_avg_cpu = param_idle_threshold_cpu_value
    }
  }

  // Set Memory threshold for CloudWatch call
  // If Underutilized threshold is ignored, then check for Idle threshold
  var param_avg_mem = -1

  if (param_underutil_threshold_mem_value != -1) {
    param_avg_mem = param_underutil_threshold_mem_value
  } else {
    if (param_idle_threshold_mem_value != -1) {
      param_avg_mem = param_idle_threshold_mem_value
    }
  }

  // Create the various queries we're going to send to CloudWatch for each instance
  result = {}

  _.each(ds_instances, function(instance) {
    // Make sure the queries object has an array for the region to push items to
    if (result[instance['region']] == undefined || result[instance['region']] == null) {
      result[instance['region']] = []
    }

    //We want to collect each of these list of statistics we care about
    stats = ["Average", "Minimum", "Maximum", "p99", "p95", "p90"]

    // Only query for CPU usage if we're actually checking it
    if (param_avg_cpu != -1) {
      _.each(stats, function(stat) {
        query = {
          "Id": instance['instanceId'].replace('-', '_') + "_cpu" + stat,
          "MetricStat": {
            "Metric": {
              "Namespace": "AWS/EC2",
              "MetricName": "CPUUtilization",
              "Dimensions": [
                { "Name": "InstanceId", "Value": instance['instanceId'] }
              ]
            },
            "Period": 2592000,
            "Stat": stat
          },
          "ReturnData": true
        }

        result[instance['region']].push(query)
      })
    }

    // Only query for MEM usage if we're actually checking it
    if (param_avg_mem != -1) {
      if (instance['platform'] == "Windows") {
        // If platform is Windows, we need to use the Windows custom metric
        mem_metricname = "Memory % Committed Bytes In Use"

        dimensions = [
          { "Name": "ImageId", "Value": instance['imageId'] },
          { "Name": "InstanceId", "Value": instance['instanceId'] },
          { "Name": "InstanceType", "Value": instance['resourceType'] },
          { "Name": "objectname", "Value": "Memory" }
        ]
      } else {
        // Else assume Platform is Linux, and use the Linux custom metric
        mem_metricname = "mem_used_percent"

        dimensions = [
          { "Name": "ImageId", "Value": instance['imageId'] },
          { "Name": "InstanceId", "Value": instance['instanceId'] },
          { "Name": "InstanceType", "Value": instance['resourceType'] }
        ]
      }

      _.each(stats, function(stat) {
        query = {
          "Id": instance['instanceId'].replace('-', '_') + "_mem" + stat,
          "MetricStat": {
            "Metric": {
              "Namespace": "CWAgent",
              "MetricName": mem_metricname,
              "Dimensions": dimensions
            },
            "Period": 2592000,
            "Stat": stat
          },
          "ReturnData": true
        }

        result[instance['region']].push(query)
      })
    }
  })
EOS
end

#COMBINE THE ABOVE QUERIES INTO DISCRETE REQUESTS OF 500 OR FEWER QUERIES TO SEND INTO CLOUDWATCH API
datasource "ds_instances_requests" do
  run_script $js_instances_requests, $ds_cloudwatch_queries
end

script "js_instances_requests", type: "javascript" do
  result "result"
  parameters "queries"
  code <<-EOS
  // Organize the queries into discrete requests to send in.
  // Queries are first sorted by region and then split into 500 item blocks.
  result = []
  query_block_size = 500

  end_date = parseInt(new Date().getTime() / 1000)
  start_date = parseInt(new Date(new Date().setDate(new Date().getDate() - 30)).getTime() / 1000)

  _.each(Object.keys(queries), function(region) {
    for (i = 0; i < queries[region].length; i += query_block_size) {
      chunk = queries[region].slice(i, i + query_block_size)

      result.push({
        body: {
          "StartTime": start_date,
          "EndTime": end_date,
          "MetricDataQueries": chunk
        },
        region: region
      })
    }
  })
EOS
end

#GET CPU AND MEMORY UTILIZATION DATA FROM CLOUDWATCH USING BUILT INSTANCE QUERIES
datasource "ds_cloudwatch_data" do
  iterate $ds_instances_requests
  request do
    run_script $js_cloudwatch_data, val(iter_item, "region"), val(iter_item, "body"), $param_api_wait
  end
  result do
    encoding "json"
    collect jmes_path(response, "MetricDataResults[*]") do
      field "region", val(iter_item, "region")
      field "id", jmes_path(col_item, "Id")
      field "label", jmes_path(col_item, "Label")
      field "values", jmes_path(col_item, "Values")
    end
  end
end

script "js_cloudwatch_data", type: "javascript" do
  result "request"
  parameters "region", "body", "param_api_wait"
  code <<-EOS
  // Slow down rate of requests to prevent throttling
  var now = new Date().getTime()
  while(new Date().getTime() < now + (param_api_wait * 1000)) { /* Do nothing */ }

  request = {
    "auth": "auth_aws",
    "host": 'monitoring.' + region + '.amazonaws.com',
    "verb": "POST",
    "path": "/",
    "headers": {
      "User-Agent": "RS Policies",
      "Content-Type": "application/json",
      "x-amz-target": "GraniteServiceVersion20100801.GetMetricData",
      "Accept": "application/json",
      "Content-Encoding": "amz-1.0"
    }
    "query_params": {
      'Action': 'GetMetricData',
      'Version': '2010-08-01'
    },
    body: JSON.stringify(body)
  }
EOS
end

#PARSE CLOUDWATCH DATA INTO JAVASCRIPT OBJECT
datasource "ds_cloudwatch_data_sorted" do
  run_script $js_cloudwatch_data_sorted, $ds_cloudwatch_data
end

script "js_cloudwatch_data_sorted", type: "javascript" do
  parameters "ds_cloudwatch_data"
  result "result"
  code <<-EOS
  // Sort the CloudWatch data into an object with keys for regions and instance names.
  // This eliminates the need to "double loop" later on to match it with our instances list.
  result = {}

  _.each(ds_cloudwatch_data, function(item) {
    region = item['region']
    instance_name = item['id'].split('_')[0] + '-' + item['id'].split('_')[1]
    metric = item['id'].split('_')[2]
    value = item['values'][0]

    if (result[region] == undefined) {
      result[region] = {}
    }

    if (result[region][instance_name] == undefined) {
      result[region][instance_name] = {}
    }

    result[region][instance_name][metric] = value
  })
EOS
end

datasource "ds_billing_centers" do
  request do
    auth $auth_flexera
    host rs_optima_host
    path join(["/analytics/orgs/", rs_org_id, "/billing_centers"])
    header "Api-Version", "1.0"
    header "User-Agent", "RS Policies"
    query "view", "allocation_table"
    ignore_status [403]
  end
  result do
    encoding "json"
    collect jmes_path(response, "[*]") do
      field "href", jmes_path(col_item, "href")
      field "id", jmes_path(col_item, "id")
      field "name", jmes_path(col_item, "name")
      field "parent_id", jmes_path(col_item, "parent_id")
    end
  end
end

datasource "ds_top_level_bcs" do
  run_script $js_top_level_bcs, $ds_billing_centers
end

script "js_top_level_bcs", type: "javascript" do
  parameters "ds_billing_centers"
  result "result"
  code <<-EOS
  filtered_bcs = _.reject(ds_billing_centers, function(bc) {
    return bc.parent_id != null && bc.parent_id != undefined
  })

  result = _.compact(_.pluck(filtered_bcs, 'id'))
EOS
end

datasource "ds_instance_costs" do
  request do
    run_script $js_instance_costs, $ds_aws_account, $ds_top_level_bcs, rs_org_id, rs_optima_host
  end
  result do
    encoding "json"
    collect jmes_path(response,"rows[*]") do
      field "resourceId", jmes_path(col_item, "dimensions.resource_id")
      field "resourceType", jmes_path(col_item, "dimensions.resource_type")
      field "vendorAccountName", jmes_path(col_item, "dimensions.vendor_account_name")
      field "adjustmentName", jmes_path(col_item, "dimensions.adjustment_name")
      field "cost", jmes_path(col_item, "metrics.cost_amortized_unblended_adj")
    end
  end
end

script "js_instance_costs", type: "javascript" do
  parameters "ds_aws_account", "ds_top_level_bcs", "rs_org_id", "rs_optima_host"
  result "request"
  code <<-EOS
  //Get Start and End dates
  start_date = new Date(), end_date = new Date()
  start_date.setMonth(start_date.getMonth() - 1)
  start_date = start_date.toLocaleDateString("en-US").split("-")[0] + "-" + start_date.toLocaleDateString("en-US").split("-")[1]

  end_date.setMonth(end_date.getMonth() - 0)
  end_date = end_date.toLocaleDateString("en-US").split("-")[0] + "-" + end_date.toLocaleDateString("en-US").split("-")[1]

  var request = {
    auth: "auth_flexera",
    host: rs_optima_host,
    verb: "POST",
    path: "/bill-analysis/orgs/" + rs_org_id + "/costs/select",
    body_fields: {
      dimensions: ["resource_id", "vendor_account_name", "resource_type", "adjustment_name"],
      granularity: "month",
      start_at: start_date,
      end_at: end_date,
      metrics: ["cost_amortized_unblended_adj"],
      billing_center_ids: ds_top_level_bcs,
      limit: 100000,
      filter: {
        type: "and",
        expressions: [
          {
            dimension: "service",
            type: "equal",
            value: "AmazonEC2"
          },
          {
            dimension: "resource_type",
            type: "equal",
            value: "Compute Instance"
          },
          {
            dimension: "vendor_account",
            type: "equal",
            value: ds_aws_account
          },
          {
            type: "not",
            expression: {
              dimension: "adjustment_name",
              type: "substring",
              substring: "Shared"
            }
          }
        ]
      }
    },
    headers: {
      User-Agent: "RS Policies",
      Api-Version: "1.0"
    },
    ignore_status: [400]
  }
EOS
end

datasource "ds_aws_instance_size_map" do
  request do
    verb "GET"
    host "raw.githubusercontent.com"
    path "/flexera-public/policy_templates/master/data/aws/instance_types.json"
    header "User-Agent", "RS Policies"
  end
end

datasource "ds_merged_metrics" do
  run_script $js_merged_metrics, $ds_cloudwatch_data_sorted, $ds_instances, $ds_aws_account, $ds_currency
end

script "js_merged_metrics", type: "javascript" do
  result "result"
  parameters "ds_cloudwatch_data_sorted", "ds_instances", "ds_aws_account", "ds_currency"
  code <<-EOS
  result = []
  //We want to collect each of these list of statistics we care about
  stats = ["Average", "Minimum", "Maximum", "p99", "p95", "p90"]

  _.each(ds_instances, function(instance) {
    region = instance['region']
    id = instance['instanceId']

    // Only proceed if the CloudWatch data actually has the region and instance id.
    // Otherwise, we have no usage data on the instance and thus dont include it in the results.
    if (ds_cloudwatch_data_sorted[region] != undefined) {
      if (ds_cloudwatch_data_sorted[region][id] != undefined) {
        merged_instance = {
          "region": region,
          "id": id,
          "resourceID": id,
          "platform": instance['platform'],
          "service": "EC2",
          "privateDnsName": instance['privateDnsName'],
          "launchTime": instance['launchTime'],
          "hostname": instance['privateDnsName'].split('.')[0],
          "tags": instance['tags'],
          "resourceType": instance['resourceType'],
          "savings": null,
          "accountID": ds_aws_account,
          "accountName": "",
          "savingsCurrency": ds_currency['symbol']
        }

        // Grab usage data for the instance if it is present
        _.each(stats, function(stat) {
          _.each(["cpu", "mem"], function(metric) {
            statname = metric + stat

            //legacyStatName is the name of the attribute that was used in all versions up to version 4.X
            //We use this instead of statname to keep backwards compatability for the exported data
            legacyStatName = metric + "_" + stat.toLowerCase()
            merged_instance[legacyStatName] = null

            if (ds_cloudwatch_data_sorted[region][id][statname] != undefined && ds_cloudwatch_data_sorted[region][id][statname] != null) {
              merged_instance[legacyStatName] = ds_cloudwatch_data_sorted[region][id][statname]
            }
          })
        })

        // Send the instance information with the CloudWatch data into the final result.
        // Also adds in the account ID and currency symbol since itll be needed for the incident.
        result.push(merged_instance)
      }
    }
  })
EOS
end

#COMBINE INSTANCE DATA WITH INSTANCE COST DATA FROM FLEXERA OPTIMA
datasource "ds_idle_and_underutil_instances" do
  run_script $js_idle_and_underutil_instances, $ds_merged_metrics, $ds_instance_costs, $ds_aws_instance_size_map,
  $param_idle_threshold_cpu_value, $param_idle_threshold_mem_value, $param_underutil_threshold_cpu_value, $param_underutil_threshold_mem_value,
  $ds_currency, $param_check_both, $param_threshold_statistic
end

script "js_idle_and_underutil_instances", type:"javascript" do
  parameters "ds_merged_metrics", "ds_instance_costs", "ds_aws_instance_size_map", "param_idle_threshold_cpu_value", "param_idle_threshold_mem_value", "param_underutil_threshold_cpu_value", "param_underutil_threshold_mem_value", "ds_currency", "param_check_both", "param_threshold_statistic"
  result "result"
  code <<-EOS
  result = []

  // Used for formatting numbers to look pretty
  function formatNumber(number, separator){
    numString = number.toString()
    values = numString.split(".")
    formatted_number = ''

    while (values[0].length > 3) {
      var chunk = values[0].substr(-3)
      values[0] = values[0].substr(0, values[0].length - 3)
      formatted_number = separator + chunk + formatted_number
    }

    if (values[0].length > 0) { formatted_number = values[0] + formatted_number }
    if (values[1] == undefined) { return formatted_number }

    return formatted_number + "." + values[1]
  }

  var accountName = ""
  if (ds_instance_costs.length > 0) { accountName = ds_instance_costs[0]['vendorAccountName'] }

  // The key name is lowercase, param value needs to be lowercase. We use this to keep backwards compatibility for the exported data.
  threshold_statistic = param_threshold_statistic.toLowerCase()

  // Determine whether we're checking for CPU, memory, or both
  checking_cpu = param_underutil_threshold_cpu_value != -1 || param_idle_threshold_cpu_value != -1
  checking_mem = param_underutil_threshold_mem_value != -1 || param_idle_threshold_mem_value != -1

  // Group cost data by resourceId
  grouped_cost_data = {}

  _.each(ds_instance_costs, function(item) {
    id = item['resourceId'].toLowerCase()

    if (grouped_cost_data[id] == undefined) { grouped_cost_data[id] = 0 }
    grouped_cost_data[id] += item['cost']
  })

  // ADD COSTS TO INSTANCE UTILIZATION DATA
  underutil_total_savings = 0
  idle_total_savings = 0

  underutil_list = []
  idle_list = []

  // Only bother doing anything if we're checking at least one metric
  if (checking_cpu || checking_mem) {
    // Loop through metrics data, appending cost data
    _.each(ds_merged_metrics, function(instance) {
      total_cost = 0

      if (grouped_cost_data[instance['id'].toLowerCase()] != undefined) {
        total_cost = grouped_cost_data[instance['id'].toLowerCase()]
      }

      // Test for whether to consider the instance idle or underutilized
      cpu_value = instance['cpu' + "_" + threshold_statistic]
      mem_value = instance['mem' + "_" + threshold_statistic]

      is_idle = false
      is_underutilized = false

      is_idle_cpu = cpu_value < param_idle_threshold_cpu_value
      is_underutilized_cpu = cpu_value < param_underutil_threshold_cpu_value
      is_idle_mem = mem_value < param_idle_threshold_mem_value
      is_underutilized_mem = mem_value < param_underutil_threshold_mem_value

      if (!checking_mem) { is_idle = is_idle_cpu }
      if (!checking_mem) { is_underutilized = is_underutilized_cpu }

      if (!checking_cpu) { is_idle = is_idle_mem }
      if (!checking_cpu) { is_underutilized = is_underutilized_mem }

      if (checking_cpu && checking_mem) {
        if (param_check_both == "Both CPU and Memory") {
          is_idle = is_idle_cpu && is_idle_mem
          is_underutilized = is_underutilized_cpu && is_underutilized_mem
        } else {
          is_idle = is_idle_cpu || is_idle_mem
          is_underutilized = is_underutilized_cpu || is_underutilized_mem
        }
      }

      if (is_idle) {
        instance["savings"] = parseFloat(total_cost).toFixed(3)
        instance["recommendationType"] = "Terminate"
        idle_total_savings += total_cost
      } else if (is_underutilized) {
        instance["savings"] = parseFloat(total_cost / 2).toFixed(3)
        instance["recommendationType"] = "Downsize"
        underutil_total_savings += total_cost
      }

      //Get Instance Size of Downsized instance
      vm_size_down = "Terminate Instance"

      if (instance['recommendationType'] == "Downsize") {
        if (ds_aws_instance_size_map[instance['resourceType']]) {
          vm_size_down = ds_aws_instance_size_map[instance['resourceType']]['down']
          if (vm_size_down == null) { vm_size_down = "N/A" }
        }
      }

      instance["recommendedVmSize"] = vm_size_down
      instance["accountName"] = accountName
      instance["savingsCurrency"] = ds_currency['symbol']

      if (instance['recommendationType'] == "Downsize") { underutil_list.push(instance) }
      if (instance['recommendationType'] == "Terminate") { idle_list.push(instance) }
    })

    //Sort By Region and then by Account Name
    instance_list = _.sortBy(instance_list, "region")
    instance_list = _.sortBy(instance_list, "accountName")
  }

  underutil_total_savings = currency['symbol'] + ' ' + formatNumber(parseFloat(underutil_total_savings).toFixed(2), currency['separator'])
  idle_total_savings = currency['symbol'] + ' ' + formatNumber(parseFloat(idle_total_savings).toFixed(2), currency['separator'])

  result = {
    underutil_message: "The total estimated monthly savings is " + underutil_total_savings,
    idle_message: "The total estimated monthly savings is " + idle_total_savings,
    underutil_list: underutil_list,
    idle_list: idle_list
  }
EOS
end

###############################################################################
# Policy
###############################################################################

policy "pol_utilization" do
  validate $ds_idle_and_underutil_instances do
    summary_template "{{ rs_project_name }} (Account ID: {{ rs_project_id }}): {{ len data.underutil_list }} AWS Underutilized Compute Instances Found"
    detail_template "{{ data.underutil_message }}"
    check logic_or($ds_parent_policy_terminated, eq(size(val(data, "underutil_list")), 0))
    escalate $esc_email
    #escalate $esc_downsize_instances
    export "underutil_list" do
      resource_level true
      field "accountID" do
        label "Account ID"
      end
      field "accountName" do
        label "Account Name"
      end
      field "resourceID" do
        label "Resource ID"
      end
      field "resourceType" do
        label "Instance Size"
      end
      field "recommendedVmSize" do
        label "Recommended Instance Size"
      end
      field "region" do
        label "Region"
      end
      field "platform" do
        label "Platform"
      end
      field "hostname" do
        label "Hostname"
      end
      field "savings" do
        label "Estimated Monthly Savings"
      end
      field "savingsCurrency" do
        label "Savings Currency"
      end
      field "privateDnsName" do
        label "Private DNS Name"
      end
      field "launchTime" do
        label "Launch Time"
      end
      field "cpu_maximum" do
        label "CPU Maximum %"
      end
      field "cpu_minimum" do
        label "CPU Minimum %"
      end
      field "cpu_average" do
        label "CPU Average %"
      end
      field "cpu_p99" do
        label "CPU p99"
      end
      field "cpu_p95" do
        label "CPU p95"
      end
      field "cpu_p90" do
        label "CPU p90"
      end
      field "mem_maximum" do
        label "Memory Maximum %"
      end
      field "mem_minimum" do
        label "Memory Minimum %"
      end
      field "mem_average" do
        label "Memory Average %"
      end
      field "mem_p99" do
        label "Memory p99"
      end
      field "mem_p95" do
        label "Memory p95"
      end
      field "mem_p90" do
        label "Memory p90"
      end
      field "tags" do
        label "Tags"
      end
      field "service" do
        label "Service"
      end
      field "id" do
        label "ID"
        path "resourceID"
      end
    end
  end
  validateh $ds_idle_and_underutil_instances do
    summary_template "{{ rs_project_name }} (Account ID: {{ rs_project_id }}): {{ len data.idle_list }} AWS Idle Compute Instances Found"
    detail_template "{{ data.idle_message }}"
    check logic_or($ds_parent_policy_terminated, eq(size(val(data, "idle_list")), 0))
    escalate $esc_email
    #escalate $esc_terminate_instances
    export "idle_list" do
      resource_level true
      field "accountID" do
        label "Account ID"
      end
      field "accountName" do
        label "Account Name"
      end
      field "resourceID" do
        label "Resource ID"
      end
      field "resourceType" do
        label "Instance Size"
      end
      field "vmSize" do
        label "Instance Size"
      end
      field "recommendedVmSize" do
        label "Recommended Instance Size"
      end
      field "region" do
        label "Region"
      end
      field "platform" do
        label "Platform"
      end
      field "hostname" do
        label "Hostname"
      end
      field "savings" do
        label "Estimated Monthly Savings"
      end
      field "savingsCurrency" do
        label "Savings Currency"
      end
      field "privateDnsName" do
        label "Private DNS Name"
      end
      field "launchTime" do
        label "Launch Time"
      end
      field "cpu_maximum" do
        label "CPU Maximum %"
      end
      field "cpu_minimum" do
        label "CPU Minimum %"
      end
      field "cpu_average" do
        label "CPU Average %"
      end
      field "cpu_p99" do
        label "CPU p99"
      end
      field "cpu_p95" do
        label "CPU p95"
      end
      field "cpu_p90" do
        label "CPU p90"
      end
      field "mem_maximum" do
        label "Memory Maximum %"
      end
      field "mem_minimum" do
        label "Memory Minimum %"
      end
      field "mem_average" do
        label "Memory Average %"
      end
      field "mem_p99" do
        label "Memory p99"
      end
      field "mem_p95" do
        label "Memory p95"
      end
      field "mem_p90" do
        label "Memory p90"
      end
      field "tags" do
        label "Tags"
      end
      field "service" do
        label "Service"
      end
      field "id" do
        label "ID"
        path "resourceID"
      end
    end
  end
end

###############################################################################
# Escalations
###############################################################################

escalation "esc_email" do
  automatic true
  label "Send Email"
  description "Send incident email"
  email $param_email
end

###############################################################################
# Meta Policy [alpha]
# Not intended to be modified or used by policy developers
###############################################################################

# If the meta_parent_policy_id is not set it will evaluate to an empty string and we will look for the policy itself,
# if it is set we will look for the parent policy.
datasource "ds_get_policy" do
  request do
    auth $auth_flexera
    host rs_governance_host
    ignore_status [404]
    path join(["/api/governance/projects/", rs_project_id, "/applied_policies/", switch(ne(meta_parent_policy_id,""), meta_parent_policy_id, policy_id) ])
    header "Api-Version", "1.0"
  end
  result do
    encoding "json"
    field "id", jmes_path(response, "id")
  end
end


datasource "ds_parent_policy_terminated" do
  run_script $js_decide_if_self_terminate, $ds_get_policy, policy_id, meta_parent_policy_id
end

# If the policy was applied by a meta_parent_policy we confirm it exists if it doesn't we confirm we are deleting
# This information is used in two places:
# - determining whether or not we make a delete call
# - determining if we should create an incident (we don't want to create an incident on the run where we terminate)
script "js_decide_if_self_terminate", type: "javascript" do
  parameters "found", "self_policy_id", "meta_parent_policy_id"
  result "result"
  code <<-EOS
  var result
  if (meta_parent_policy_id != "" && found.id == undefined) {
    result = true
  } else {
    result = false
  }
  EOS
end

# Two potentials ways to set this up:
# - this way and make a unneeded 'get' request when not deleting
# - make the delete request an interate and have it iterate over an empty array when not deleting and an array with one item when deleting
script "js_make_terminate_request", type: "javascript" do
  parameters "should_delete", "policy_id", "rs_project_id", "rs_governance_host"
  result "request"
  code <<-EOS

  var request = {
    auth:  'auth_flexera',
    host: rs_governance_host,
    path: "/api/governance/projects/" + rs_project_id + "/applied_policies/" + policy_id,
    headers: {
      "API-Version": "1.0",
      "Content-Type":"application/json"
    },
  }

  if (should_delete) {
    request.verb = 'DELETE'
  }
  EOS
end

datasource "ds_terminate_self" do
  request do
    run_script $js_make_terminate_request, $ds_parent_policy_terminated, policy_id, rs_project_id, rs_governance_host
  end
end

datasource "ds_is_deleted" do
  run_script $js_check_deleted, $ds_terminate_self
end

# This is just a way to have the check delete request connect to the farthest leaf from policy.
# We want the delete check to the first thing the policy does to avoid the policy erroring before it can decide whether or not it needs to self terminate
# Example a customer deletes a credential and then terminates the parent policy. We still want the children to self terminate
# The only way I could see this not happening is if the user who applied the parent_meta_policy was offboarded or lost policy access, the policies who are impersonating the user
# would not have access to self-terminate
# It may be useful for the backend to enable a mass terminate at some point for all meta_child_policies associated with an id.
script "js_check_deleted", type: "javascript" do
  parameters "response"
  result "result"
  code <<-EOS
  result = {"path":"/"}
  EOS
end

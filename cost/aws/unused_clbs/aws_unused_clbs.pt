name "AWS Unused Classic Load Balancers"
rs_pt_ver 20180301
type "policy"
short_description "Checks AWS for ununsed Classic Load Balancers and, optionally, deletes them. See the [README](https://github.com/flexera-public/policy_templates/tree/master/cost/aws/unused_clbs) and [docs.flexera.com/flexera/EN/Automation](https://docs.flexera.com/flexera/EN/Automation/AutomationGS.htm) to learn more."
long_description ""
severity "low"
category "Cost"
default_frequency "weekly"
info(
  version: "5.0",
  provider: "AWS",
  service: "Network",
  policy_set: "Unused Load Balancers",
  recommendation_type: "Usage Reduction"
)

###############################################################################
# Parameters
###############################################################################

parameter "param_email" do
  type "list"
  category "Policy Settings"
  label "Email addresses"
  description "A list of email addresses to notify."
  default []
end

parameter "param_aws_account_number" do
  type "string"
  category "Policy Settings"
  label "Account Number"
  description "Leave blank; this is for automated use with Meta Policies. See README for more details."
  default ""
end

parameter "param_min_savings" do
  type "number"
  category "Policy Settings"
  label "Minimum Savings Threshold"
  description "Minimum potential savings required to generate a recommendation"
  min_value 0
  default 0
end

parameter "param_regions_allow_or_deny" do
  type "string"
  category "Filters"
  label "Allow/Deny Regions"
  description "Allow or Deny entered regions. See the README for more details."
  default "Allow"
  allowed_values "Allow", "Deny"
end

parameter "param_regions_list" do
  type "list"
  category "Filters"
  label "Allow/Deny Regions List"
  description "A list of allowed or denied regions. See the README for more details."
  default []
  allowed_pattern /^([a-zA-Z-_]+-[a-zA-Z0-9-_]+-[0-9-_]+,*|)+$/
end

parameter "param_exclusion_tags" do
  type "list"
  category "Filters"
  label "Exclusion Tags (Key:Value)"
  description "Cloud native tags to ignore resources that you don't want to produce recommendations for. Use Key:Value format for specific tag key/value pairs, and Key:* format to match any resource with a particular key, regardless of value. Examples: env:production, DO_NOT_DELETE:*"
  allowed_pattern /(^$)|[\w]*\:.*/
  default []
end

parameter "param_automatic_action" do
  type "list"
  label "Automatic Actions"
  description "When this value is set, this policy will automatically take the selected action(s)"
  allowed_values ["Delete Classic Load Balancers"]
  default []
end

###############################################################################
# Authentication
###############################################################################

credentials "auth_aws" do
  schemes "aws", "aws_sts"
  label "AWS"
  description "Select the AWS Credential from the list"
  tags "provider=aws"
  aws_account_number $param_aws_account_number
end

credentials "auth_flexera" do
  schemes "oauth2"
  label "Flexera"
  description "Select Flexera One OAuth2 credentials"
  tags "provider=flexera"
end

###############################################################################
# Datasources & Scripts
###############################################################################

# Get applied policy metadata for use later
datasource "ds_applied_policy" do
  request do
    auth $auth_flexera
    host rs_governance_host
    path join(["/api/governance/projects/", rs_project_id, "/applied_policies/", policy_id])
    header "Api-Version", "1.0"
  end
end

# Get region-specific Flexera API endpoints
datasource "ds_flexera_api_hosts" do
  run_script $js_flexera_api_hosts, rs_optima_host
end

script "js_flexera_api_hosts", type: "javascript" do
  parameters "rs_optima_host"
  result "result"
  code <<-'EOS'
  host_table = {
    "api.optima.flexeraeng.com": {
      flexera: "api.flexera.com",
      fsm: "api.fsm.flexeraeng.com"
    },
    "api.optima-eu.flexeraeng.com": {
      flexera: "api.flexera.eu",
      fsm: "api.fsm-eu.flexeraeng.com"
    },
    "api.optima-apac.flexeraeng.com": {
      flexera: "api.flexera.au",
      fsm: "api.fsm-apac.flexeraeng.com"
    }
  }

  result = host_table[rs_optima_host]
EOS
end

# Get AWS account info
datasource "ds_cloud_vendor_accounts" do
  request do
    auth $auth_flexera
    host val($ds_flexera_api_hosts, 'flexera')
    path join(["/finops-analytics/v1/orgs/", rs_org_id, "/cloud-vendor-accounts"])
    header "Api-Version", "1.0"
  end
  result do
    encoding "json"
    collect jmes_path(response, "values[*]") do
      field "id", jmes_path(col_item, "aws.accountId")
      field "name", jmes_path(col_item, "name")
      field "tags", jmes_path(col_item, "tags")
    end
  end
end

datasource "ds_get_caller_identity" do
  request do
    auth $auth_aws
    verb "GET"
    host "sts.amazonaws.com"
    path "/"
    header "User-Agent", "RS Policies"
    query "Action", "GetCallerIdentity"
    query "Version", "2011-06-15"
  end
  result do
    encoding "xml"
    collect xpath(response, "//GetCallerIdentityResponse/GetCallerIdentityResult") do
      field "account", xpath(col_item, "Account")
    end
  end
end

datasource "ds_aws_account" do
  run_script $js_aws_account, $ds_cloud_vendor_accounts, $ds_get_caller_identity
end

script "js_aws_account", type:"javascript" do
  parameters "ds_cloud_vendor_accounts", "ds_get_caller_identity"
  result "result"
  code <<-'EOS'
  result = _.find(ds_cloud_vendor_accounts, function(account) {
    return account['id'] == ds_get_caller_identity[0]['account']
  })

  // This is in case the API does not return the relevant account info
  if (result == undefined) {
    result = {
      id: ds_get_caller_identity[0]['account'],
      name: "",
      tags: {}
    }
  }
EOS
end

datasource "ds_billing_centers" do
  request do
    auth $auth_flexera
    host rs_optima_host
    path join(["/analytics/orgs/", rs_org_id, "/billing_centers"])
    header "Api-Version", "1.0"
    header "User-Agent", "RS Policies"
    query "view", "allocation_table"
    ignore_status [403]
  end
  result do
    encoding "json"
    collect jmes_path(response, "[*]") do
      field "href", jmes_path(col_item, "href")
      field "id", jmes_path(col_item, "id")
      field "name", jmes_path(col_item, "name")
      field "parent_id", jmes_path(col_item, "parent_id")
    end
  end
end

# Gather top level billing center IDs for when we pull cost data
datasource "ds_top_level_bcs" do
  run_script $js_top_level_bcs, $ds_billing_centers
end

script "js_top_level_bcs", type: "javascript" do
  parameters "ds_billing_centers"
  result "result"
  code <<-'EOS'
  filtered_bcs = _.filter(ds_billing_centers, function(bc) {
    return bc['parent_id'] == null || bc['parent_id'] == undefined
  })

  result = _.compact(_.pluck(filtered_bcs, 'id'))
EOS
end

datasource "ds_currency_reference" do
  request do
    host "raw.githubusercontent.com"
    path "/rightscale/policy_templates/master/cost/scheduled_reports/currency_reference.json"
    header "User-Agent", "RS Policies"
  end
end

datasource "ds_currency_code" do
  request do
    auth $auth_flexera
    host rs_optima_host
    path join(["/bill-analysis/orgs/", rs_org_id, "/settings/currency_code"])
    header "Api-Version", "0.1"
    header "User-Agent", "RS Policies"
    ignore_status [403]
  end
  result do
    encoding "json"
    field "id", jmes_path(response, "id")
    field "value", jmes_path(response, "value")
  end
end

datasource "ds_currency" do
  run_script $js_currency, $ds_currency_reference, $ds_currency_code
end

script "js_currency", type:"javascript" do
  parameters "ds_currency_reference", "ds_currency_code"
  result "result"
  code <<-'EOS'
  symbol = "$"
  separator = ","

  if (ds_currency_code['value'] != undefined) {
    if (ds_currency_reference[ds_currency_code['value']] != undefined) {
      symbol = ds_currency_reference[ds_currency_code['value']]['symbol']

      if (ds_currency_reference[ds_currency_code['value']]['t_separator'] != undefined) {
        separator = ds_currency_reference[ds_currency_code['value']]['t_separator']
      } else {
        separator = ""
      }
    }
  }

  result = {
    symbol: symbol,
    separator: separator
  }
EOS
end

datasource "ds_describe_regions" do
  request do
    auth $auth_aws
    verb "GET"
    host "ec2.amazonaws.com"
    path "/"
    query "Action", "DescribeRegions"
    query "Version", "2016-11-15"
    query "Filter.1.Name", "opt-in-status"
    query "Filter.1.Value.1", "opt-in-not-required"
    query "Filter.1.Value.2", "opted-in"
    # Header X-Meta-Flexera has no affect on datasource query, but is required for Meta Policies
    # Forces `ds_is_deleted` datasource to run first during policy execution
    header "Meta-Flexera", val($ds_is_deleted, "path")
  end
  result do
    encoding "xml"
    collect xpath(response, "//DescribeRegionsResponse/regionInfo/item", "array") do
      field "region", xpath(col_item, "regionName")
    end
  end
end

datasource "ds_regions" do
  run_script $js_regions, $ds_describe_regions, $param_regions_list, $param_regions_allow_or_deny
end

script "js_regions", type:"javascript" do
  parameters "ds_describe_regions", "param_regions_list", "param_regions_allow_or_deny"
  result "result"
  code <<-'EOS'
  allow_deny_test = { "Allow": true, "Deny": false }

  if (param_regions_list.length > 0) {
    result = _.filter(ds_describe_regions, function(item) {
      return _.contains(param_regions_list, item['region']) == allow_deny_test[param_regions_allow_or_deny]
    })
  } else {
    result = ds_describe_regions
  }
EOS
end

datasource "ds_clbs_without_tags" do
  iterate $ds_regions
  request do
    auth $auth_aws
    host join(["elasticloadbalancing.", val(iter_item, "region"), ".amazonaws.com"])
    path "/"
    header "Accept", "application/json"
    query "Action", "DescribeLoadBalancers"
    # Newer versions of API will not list Classic Load Balancers
    query "Version", "2012-06-01"
  end
  result do
    encoding "json"
    collect jmes_path(response, "DescribeLoadBalancersResponse.DescribeLoadBalancersResult.LoadBalancerDescriptions[*]") do
      field "name", jmes_path(col_item, "LoadBalancerName")
      field "scheme", jmes_path(col_item, "Scheme")
      field "created", jmes_path(col_item, "CreatedTime")
      field "dns", jmes_path(col_item, "DNSName")
      field "vpc", jmes_path(col_item, "VPCId")
      field "zones", jmes_path(col_item, "AvailabilityZones")
      field "instances", jmes_path(col_item, "Instances[*].InstanceId")
      field "region", val(iter_item, "region")
    end
  end
end

datasource "ds_clbs" do
  iterate $ds_clbs_without_tags
  request do
    auth $auth_aws
    host join(["elasticloadbalancing.", val(iter_item, "region"), ".amazonaws.com"])
    path "/"
    header "Accept", "application/json"
    query "Action", "DescribeTags"
    query "Version", "2012-06-01"
    query "LoadBalancerNames.member.1", val(iter_item, "name")
  end
  result do
    encoding "json"
    collect jmes_path(response, "DescribeTagsResponse.DescribeTagsResult.TagDescriptions[*]") do
      field "tags" do
        collect jmes_path(col_item, "Tags") do
          field "key", jmes_path(col_item, "Key")
          field "value", jmes_path(col_item, "Value")
        end
      end
      field "name", val(iter_item, "name")
      field "scheme", val(iter_item, "scheme")
      field "created", val(iter_item, "created")
      field "dns", val(iter_item, "dns")
      field "vpc", val(iter_item, "vpc")
      field "zones", val(iter_item, "zones")
      field "instances", val(iter_item, "instances")
      field "region", val(iter_item, "region")
    end
  end
end

datasource "ds_clbs_tag_filtered" do
  run_script $js_clbs_tag_filtered, $ds_clbs, $param_exclusion_tags
end

script "js_clbs_tag_filtered", type: "javascript" do
  parameters "ds_clbs", "param_exclusion_tags"
  result "result"
  code <<-'EOS'
  if (param_exclusion_tags.length > 0) {
    result = _.reject(ds_clbs, function(clb) {
      clb_tags = []

      if (clb['tags'] != null && clb['tags'] != undefined) {
        _.each(clb['tags'], function(tag) {
          clb_tags.push([tag['key'], tag['value']].join(':'))
          clb_tags.push([tag['key'], '*'].join(':'))
        })
      }

      exclude_clb = false

      _.each(param_exclusion_tags, function(exclusion_tag) {
        if (_.contains(clb_tags, exclusion_tag)) {
          exclude_clb = true
        }
      })

      return exclude_clb
    })
  } else {
    result = ds_clbs
  }
EOS
end

datasource "ds_instances_health" do
  iterate $ds_clbs_tag_filtered
  request do
    auth $auth_aws
    host join(["elasticloadbalancing.", val(iter_item, "region"), ".amazonaws.com"])
    path "/"
    query "Action", "DescribeInstanceHealth"
    query "Version", "2012-06-01"
    query "LoadBalancerName", val(iter_item, "name")
    header "Accept", "application/json"
  end
  result do
    encoding "json"
    collect jmes_path(response, "DescribeInstanceHealthResponse.DescribeInstanceHealthResult.InstanceStates[*]") do
      field "description", jmes_path(col_item, "Description")
      field "state", jmes_path(col_item, "State")
      field "id", jmes_path(col_item, "InstanceId")
      field "lb_name", val(iter_item, "loadBalancerName")
    end
  end
end

datasource "ds_unused_clbs" do
  run_script $js_unused_clbs, $ds_clbs_tag_filtered, $ds_instances_health
end

script "js_unused_clbs", type: "javascript" do
  parameters "ds_clbs_tag_filtered", "ds_instances_health"
  result "result"
  code <<-'EOS'
  result = []
  unhealthy_description = "Instance has failed at least the UnhealthyThreshold number of health checks consecutively."
  instances_object = {}

  _.each(ds_instances_health, function(instance) {
    lb_name = instance['lb_name']

    if (instances_object[lb_name] == undefined) { instances_object[lb_name] = [] }
    instances_object[lb_name].push(instance)
  })

  _.filter(ds_clbs_tag_filtered, function(clb) {
    name = clb['name']
    unused = false

    if (typeof(clb['instances']) != 'object') {
      unused = true
    } else {
      if (clb['instances'].length == 0) { unused = true }
    }

    if (unused == false) {
      if (instances_object[name] == undefined) {
        unused = true
      } else {
        healthy_instance_found = false

        _.each(instances_object[name], function(instance) {
          if (instance['state'] != "OutOfService" || instance['description'] != unhealthy_description) {
            healthy_instance_found = true
          }
        })

        unused = !healthy_instance_found
      }
    }

    return unused
  })
EOS
end

datasource "ds_clb_costs" do
  request do
    run_script $js_clb_costs, $ds_aws_account, $ds_top_level_bcs, rs_org_id, rs_optima_host
  end
  result do
    encoding "json"
    collect jmes_path(response,"rows[*]") do
      field "id", jmes_path(col_item, "dimensions.resource_id")
      field "cost", jmes_path(col_item,"metrics.cost_amortized_blended_adj")
    end
  end
end

script "js_clb_costs", type:"javascript" do
  parameters "ds_aws_account", "ds_top_level_bcs", "rs_org_id", "rs_optima_host"
  result "request"
  code <<-'EOS'
  start_date = new Date()
  start_date.setDate(start_date.getDate() - 3)
  start_date = start_date.toISOString().split('T')[0]

  end_date = new Date()
  end_date.setDate(end_date.getDate() - 2)
  end_date = end_date.toISOString().split('T')[0]

  var request = {
    auth: "auth_flexera",
    host: rs_optima_host,
    verb: "POST",
    path: "/bill-analysis/orgs/" + rs_org_id + "/costs/select",
    body_fields: {
      "dimensions": ["resource_id"],
      "granularity": "day",
      "start_at": start_date,
      "end_at": end_date,
      "metrics": ["cost_amortized_blended_adj"],
      "billing_center_ids": ds_top_level_bcs,
      "limit": 100000,
      "filter": {
        "type": "and",
        "expressions": [
          {
            "dimension": "service",
            "type": "equal",
            "value": "AWSELB"
          },
          {
            "dimension": "resource_type",
            "type": "equal",
            "value": "Load Balancer"
          },
          {
            "dimension": "vendor_account",
            "type": "equal",
            "value": ds_aws_account['id']
          }
        ]
      }
    },
    headers: {
      "User-Agent": "RS Policies",
      "Api-Version": "1.0"
    },
    ignore_status: [400]
  }
EOS
end

datasource "ds_clb_costs_grouped" do
  run_script $js_clb_costs_grouped, $ds_clb_costs
end

script "js_clb_costs_grouped", type: "javascript" do
  parameters "ds_clb_costs"
  result "result"
  code <<-'EOS'
  // Multiple a single day's cost by the average number of days in a month.
  // The 0.25 is to account for leap years for extra precision.
  cost_multiplier = 365.25 / 12

  // Group cost data by resourceId for later use
  result = {}

  _.each(ds_clb_costs, function(item) {
    id = item['id'].toLowerCase()

    if (result[id] == undefined) { result[id] = 0.0 }
    result[id] += item['cost'] * cost_multiplier
  })
EOS
end

datasource "ds_unused_clb_cost_mapping" do
  run_script $js_unused_clb_cost_mapping, $ds_clbs_tag_filtered, $ds_unused_clbs, $ds_clb_costs_grouped, $ds_applied_policy, $ds_aws_account, $ds_currency, $param_min_savings
end

script "js_unused_clb_cost_mapping", type: "javascript" do
  parameters "ds_clbs_tag_filtered", "ds_unused_clbs", "ds_clb_costs_grouped", "ds_applied_policy", "ds_aws_account", "ds_currency", "param_min_savings"
  result "result"
  code <<-'EOS'
  // Used for formatting numbers to look pretty
  function formatNumber(number, separator){
    numString = number.toString()
    values = numString.split(".")
    formatted_number = ''

    while (values[0].length > 3) {
      var chunk = values[0].substr(-3)
      values[0] = values[0].substr(0, values[0].length - 3)
      formatted_number = separator + chunk + formatted_number
    }

    if (values[0].length > 0) { formatted_number = values[0] + formatted_number }
    if (values[1] == undefined) { return formatted_number }

    return formatted_number + "." + values[1]
  }

  result = []

  total_savings = 0.0

  _.each(ds_unused_clbs, function(clb) {
    clb_id = clb['name'].toLowerCase()

    savings = 0.0
    if (ds_clb_costs_grouped[clb_id] != undefined) {
      savings = ds_clb_costs_grouped[clb_id]
    }

    if (savings >= param_min_savings) {
      total_savings += savings

      recommendationDetails = [
        "Delete AWS Classic Load Balancer ", clb['name'], " ",
        "in AWS Account ", ds_aws_account['name'], " ",
        "(", ds_aws_account['id'], ")"
      ].join('')

      tags = []

      _.each(clb['tags'], function(tag) {
        tags.push(tag['key'] + '=' + tag['value'])
      })

      created = new Date(Math.round(clb['created'] * 1000)).toISOString()

      result.push({
        accountID: ds_aws_account['id'],
        accountName: ds_aws_account['name'],
        resourceID: clb['name'],
        scheme: clb['scheme'],
        dns: clb['dns'],
        vpc: clb['vpc'],
        zones: clb['zones'].join(', '),
        instances: clb['instances'],
        region: clb['region'],
        savings: parseFloat(savings.toFixed(3)),
        savingsCurrency: ds_currency['symbol'],
        policy_name: ds_applied_policy['name'],
        created: created,
        tags: tags.join(', '),
        resourceType: 'Classic Load Balancer',
        service: "ELB",
        recommendationDetails: recommendationDetails,
        // These are to avoid errors when we hash_exclude these fields
        message: "",
        total_savings: ""
      })
    }
  })

  // Message for incident output
  total_clbs = ds_clbs_tag_filtered.length.toString()
  total_unused_clbs = result.length.toString()
  unused_clbs_percentage = (total_unused_clbs / total_clbs * 100).toFixed(2).toString() + '%'

  findings = [
    "Out of ", total_clbs, " volumes analyzed, ",
    total_unused_clbs, " (", unused_clbs_percentage,
    ") are unused and recommended for deletion."
  ].join('')

  total_savings = ds_currency['symbol'] + ' ' + formatNumber(parseFloat(total_savings).toFixed(2), ds_currency['separator'])

  // Dummy item to ensure the policy's check statement always executes at least once
  result.push({
    resourceID: "",
    message: "",
    total_savings: "",
    tags: "",
    savings: "",
    savingsCurrency: ""
  })

  result[0]['message'] = findings
  result[0]['total_savings'] = total_savings
EOS
end

###############################################################################
# Policy
###############################################################################

policy "policy_unused_clbs" do
  validate_each $ds_unused_clb_cost_mapping do
    summary_template "{{ with index data 0 }}{{ .policy_name }}{{ end }}: {{ len data }} Unused Classic Load Balancers Found"
    detail_template <<-'EOS'
    **Potential Monthly Savings:** {{ with index data 0 }}{{ .total_savings }}{{ end }}

    {{ with index data 0 }}{{ .message }}{{ end }}
    EOS
    check logic_or($ds_parent_policy_terminated, eq(val(item, "resourceID"), ""))
    escalate $esc_email
    escalate $esc_delete_clbs
    hash_exclude "message", "total_savings", "tags", "savings", "savingsCurrency"
    export do
      resource_level true
      field "accountID" do
        label "Account ID"
      end
      field "accountName" do
        label "Account Name"
      end
      field "resourceID" do
        label "Resource Name"
      end
      field "tags" do
        label "Resource Tags"
      end
      field "recommendationDetails" do
        label "Recommendation"
      end
      field "resourceType" do
        label "Resource Type"
      end
      field "region" do
        label "Region"
      end
      field "zones" do
        label "Availability Zones"
      end
      field "vpc" do
        label "VPC"
      end
      field "created" do
        label "Creation Date"
      end
      field "savings" do
        label "Estimated Monthly Savings"
      end
      field "savingsCurrency" do
        label "Savings Currency"
      end
      field "service" do
        label "Service"
      end
      field "id" do
        label "ID"
        path "resourceID"
      end
    end
  end
end

###############################################################################
# Escalations
###############################################################################

escalation "esc_email" do
  automatic true
  label "Send Email"
  description "Send incident email"
  email $param_email
end

escalation "esc_delete_clbs" do
  automatic contains($param_automatic_action, "Delete Classic Load Balancers")
  label "Delete Classic Load Balancers"
  description "Approval to delete all selected instances"
  run "delete_CLB", data, rs_optima_host
end

###############################################################################
# Cloud Workflow
###############################################################################

#https://docs.aws.amazon.com/elasticloadbalancing/2012-06-01/APIReference/API_DeleteLoadBalancer.html
define delete_CLB($data, $$rs_optima_host) return $all_responses do
  $$debug = false
  $all_responses = []
  foreach $item in $data do
    sub on_error: skip do
      $response = http_request(
        verb: "get",
        host: join(["elasticloadbalancing.",$item["region"],".amazonaws.com"]),
        auth: $$auth_aws,
        href: join(["/", "?Action=DeleteLoadBalancer", "&LoadBalancerName=", $item["id"], "&Version=2012-06-01"]),
        https: true,
        headers:{
          "cache-control": "no-cache",
          "content-type": "application/json"
        }
      )
      $all_responses << $response
      call sys_log('CLB delete response',to_s($response))
    end
  end
end

define sys_log($subject, $detail) do
  # Create empty errors array if doesn't already exist
  if !$$errors
    $$errors = []
  end
  # Check if debug is enabled
  if $$debug
    # Append to global $$errors
    # This is the suggested way to capture errors
    $$errors << "Unexpected error for " + $subject + "\n  " + to_s($detail)
    # If Flexera NAM Zone, create audit_entries [to be deprecated]
    # This is the legacy method for capturing errors and only supported on Flexera NAM
    if $$rs_optima_host == "api.optima.flexeraeng.com"
      # skip_error_and_append is used to catch error if rs_cm.audit_entries.create fails unexpectedly
      $task_label = "Creating audit entry for " + $subject
      sub task_label: $task, on_error: skip_error_and_append($task) do
        rs_cm.audit_entries.create(
          notify: "None",
          audit_entry: {
            auditee_href: @@account,
            summary: $subject,
            detail: $detail
          }
        )
      end # End sub on_error
    end # End if rs_optima_host
  end # End if debug is enabled
end

define skip_error_and_append($subject) do
  $$errors << "Unexpected error for " + $subject + "\n  " + to_s($_error)
  $_error_behavior = "skip"
end

###############################################################################
# Meta Policy [alpha]
# Not intended to be modified or used by policy developers
###############################################################################

# If the meta_parent_policy_id is not set it will evaluate to an empty string and we will look for the policy itself,
# if it is set we will look for the parent policy.
datasource "ds_get_policy" do
  request do
    auth $auth_flexera
    host rs_governance_host
    ignore_status [404]
    path join(["/api/governance/projects/", rs_project_id, "/applied_policies/", switch(ne(meta_parent_policy_id,""), meta_parent_policy_id, policy_id) ])
    header "Api-Version", "1.0"
  end
  result do
    encoding "json"
    field "id", jmes_path(response, "id")
  end
end

datasource "ds_parent_policy_terminated" do
  run_script $js_decide_if_self_terminate, $ds_get_policy, policy_id, meta_parent_policy_id
end

# If the policy was applied by a meta_parent_policy we confirm it exists if it doesn't we confirm we are deleting
# This information is used in two places:
# - determining whether or not we make a delete call
# - determining if we should create an incident (we don't want to create an incident on the run where we terminate)
script "js_decide_if_self_terminate", type: "javascript" do
  parameters "found", "self_policy_id", "meta_parent_policy_id"
  result "result"
  code <<-EOS
  var result
  if (meta_parent_policy_id != "" && found.id == undefined) {
    result = true
  } else {
    result = false
  }
  EOS
end

# Two potentials ways to set this up:
# - this way and make a unneeded 'get' request when not deleting
# - make the delete request an interate and have it iterate over an empty array when not deleting and an array with one item when deleting
script "js_make_terminate_request", type: "javascript" do
  parameters "should_delete", "policy_id", "rs_project_id", "rs_governance_host"
  result "request"
  code <<-EOS

  var request = {
    auth:  'auth_flexera',
    host: rs_governance_host,
    path: "/api/governance/projects/" + rs_project_id + "/applied_policies/" + policy_id,
    headers: {
      "API-Version": "1.0",
      "Content-Type":"application/json"
    },
  }

  if (should_delete) {
    request.verb = 'DELETE'
  }
  EOS
end

datasource "ds_terminate_self" do
  request do
    run_script $js_make_terminate_request, $ds_parent_policy_terminated, policy_id, rs_project_id, rs_governance_host
  end
end

datasource "ds_is_deleted" do
  run_script $js_check_deleted, $ds_terminate_self
end

# This is just a way to have the check delete request connect to the farthest leaf from policy.
# We want the delete check to the first thing the policy does to avoid the policy erroring before it can decide whether or not it needs to self terminate
# Example a customer deletes a credential and then terminates the parent policy. We still want the children to self terminate
# The only way I could see this not happening is if the user who applied the parent_meta_policy was offboarded or lost policy access, the policies who are impersonating the user
# would not have access to self-terminate
# It may be useful for the backend to enable a mass terminate at some point for all meta_child_policies associated with an id.
script "js_check_deleted", type: "javascript" do
  parameters "response"
  result "result"
  code <<-EOS
  result = {"path":"/"}
  EOS
end

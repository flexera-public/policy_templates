name "Playing with Volumes and Placement Groups"
rs_pt_ver 20180301
short_description "Experimenting"
severity "medium"
category "Test Code"

resources "clouds", type: "rs_cm.clouds" do
  filter do
    cloud_type ne: ["soft_layer", "cloud_stack", "rackspace_next_gen", "blue_skies","open_stack_v2","uca","open_stack_v3"]
  end
end

datasource "ds_clouds" do
	iterate @clouds
	field "href", val(iter_item, "href")
	field "cloud_type", val(iter_item, "cloud_type")
end

resources "pgs", type: "rs_cm.placement_groups" do
	view "extended"
end

datasource "ds_pgs" do
	iterate @pgs
	field "id", val(iter_item, "resource_uid")
	field "name", val(iter_item, "name")
	field "account_type", val(val(iter_item, "cloud_specific_attributes"), "account_type")
end

resources "volumes", type: "rs_cm.volumes" do
  view "extended"
  iterate @clouds
  cloud_href href(iter_item) 
end

#datasource "ds_volumes" do
#  iterate @volumes
#  field "id", val(iter_item, "resource_uid")
#  field "href", val(iter_item, "href")
#  field "name", val(iter_item, "name")
#  field "size", val(iter_item, "size")
#  field "status", val(iter_item, "status")
#  field "updated_at", val(iter_item, "updated_at")
#  field "pg_id", val(val(iter_item, "placement_group"), "resource_uid")
#  field "volume_type", val(val(iter_item, "volume_type"), "resource_uid")
#end

# script-based datasource that applies the logic to return only unattached volumes
datasource "ds_test_data" do
  run_script $js_test_code, $ds_clouds, $ds_pgs, @volumes
end

# Find unattached volumes and also calculate their age.
# The age calculation is used to find old ones later on and also to inform the user of the ages of flagged volumes.
script "js_test_code", type: "javascript" do
  parameters "ds_clouds", "ds_pgs", "ds_volumes"
  result "bunch_of_info"
  code <<-EOS
var bunch_of_info = [];

// Build a cloud href -> type hash
cloud_hash = []
for (var i = 0; i < ds_clouds.length; i++) {
	ds_cloud = ds_clouds[i]
	cloud_href = ds_cloud["href"]
	cloud_type = ds_cloud["cloud_type"]
	var my_cloud_hash = { cloud_href : cloud_type }
	cloud_hash.push(my_cloud_hash)
}

// Build a pg hash that is pg resource id -> { pg type, pg name }
pg_hash = []
for (var i = 0; i < ds_pgs.length; i++) {
	ds_pg = ds_pgs[i]
	pg_id = ds_pg["id"]
	pg_name = ds_pg["name"]
	pg_account_type = ds_pg["account_type"]
  var my_pg_hash = { pg_id : { "name": pg_name, "account_type": pg_account_type } }
	pg_hash.push(my_pg_hash)
}

for (var i = 0; i < ds_volumes.length; i++) {
  vol = ds_volumes[i]
  //var vol_id = vol["id"]
//  var pg_id = vol["placement_group"]["resource_uid"]
//  var vol_type = vol["volume_type"]["resource_uid"]
  //var vol_href = vol["href"]
  var vol_volume_object = JSON.stringify(vol)
  
  var my_hash_of_info = {}
  //my_hash_of_info["vol_num"] = i
  //my_hash_of_info["vol_id"] = vol_id
  //my_hash_of_info["vol_pg_id"] = pg_id
  //my_hash_of_info["vol_type"] = vol_type
  //my_hash_of_info["vol_href"] = vol_href
  my_hash_of_info["vol_dump"] = vol_volume_object
  
  bunch_of_info.push(my_hash_of_info)
};
EOS
end

policy "pol_test" do
    validate_each $ds_test_data do
	# Go through the unattached volumes that were found by the script-based datasource above
	# and check if not older than specified number of days.
	# If the check fails, it'll flag the volume
	check eq(0,1)

	summary_template "Test Info"

    	detail_template <<-EOS
Test Data
{{ range data }}
#Number: {{ .vol_num }}
#Volume ID: {{ .vol_id }}
#Volume HREF: {{ .vol_href }}
#Volume PG ID: {{ .pg_id }}
#Volume Type: {{ .vol_type }}
Volume Object: {{ .vol_dump }}
{{ end }}
EOS
    end
end
  
 


# TO-DO: 
#	Add support for deleting old unattached volumes.
#

### Notes on handling volume type
# get pgs in extended view
# create datasource that is simply pg_resource_uid and type and name
# in javascript create a hash from the pgs array of "pg_resource_uid": { "type" : type, name: name }
#
# get volumes in extended view
# Create volumes datasource that includes placement group resource_uid from volumes
#   need to figure out what the ds looks like if no placement group in resource
# and volume type if volume type hash in there
# 
# Cycle through volumes
#  if placement_group attibute
#		type is unmanaged
#		use pg hash to find type of storage
#		use pg hash to find name of storage account
# else if volume-type 
#	type is managed
#	storage type is from the volume info
#	storage account name is N/A
# else
#	all three things are NA

name "Unattached Volumes"
rs_pt_ver 20180301
short_description "Finds unattached volumes older than specified number of days and reports them."
severity "medium"
category "Cost Management"


resources "clouds", type: "rs_cm.clouds" do
  filter do
    cloud_type eq: ["azure", "azure_v2"]
  end
end

datasource "ds_clouds" do
	iterate @clouds
	field "href", val(iter_item, "href")
	field "cloud_type", val(iter_item, "cloud_type")
end

resources "pgs", type: "rs_cm.placement_groups" do
	view "extended"
end

datasource "ds_pgs" do
	iterate @pgs
	field "id", val(iter_item, "resource_uid")
	field "name", val(iter_item, "name")
	field "account_type", val(val(iter_item, "cloud_specific_attributes"), "account_type")
end

resources "volumes", type: "rs_cm.volumes" do
  iterate @clouds
  cloud_href href(iter_item) 
  view "extended"
end

# Processing volumes in javascript since extended view does not always have a placement_group or volume_type hash in the
# results and datasource declaration doesn't like that.
#datasource "ds_volumes" do
#  iterate @volumes
#  field "id", val(iter_item, "resource_uid")
#  field "href", val(iter_item, "href")
#  field "name", val(iter_item, "name")
#  field "size", val(iter_item, "size")
#  field "status", val(iter_item, "status")
#  field "updated_at", val(iter_item, "updated_at")
#  field "pg_id", val(val(iter_item, "placement_group"), "resource_uid")
#  field "volume_type, val(val(iter_item, "volume_type"), "name")
#end

# script-based datasource that applies the logic to return only unattached volumes
datasource "ds_unattached_volumes" do
  run_script $js_unattached_volumes, $ds_clouds, $ds_pgs, @volumes
end

# Find unattached volumes and also calculate their age.
# The age calculation is used to find old ones later on and also to inform the user of the ages of flagged volumes.
script "js_unattached_volumes", type: "javascript" do
  parameters "ds_clouds", "ds_pgs", "volumes"
  result "unattached_volumes"
  code <<-EOS
// This is the list of unattached volumes.
var unattached_volumes = [];

// Used for date math below
// The number of milliseconds in one day
var ONE_DAY = 1000 * 60 * 60 * 24
var today = new Date()
// Get today in epoch time in UTC time
var today_ms = new Date(today.getTime() + today.getTimezoneOffset() * 60000);

// Used for volume type discovery below
// Build a cloud href -> type hash
var cloud_hash = {}
for (var i = 0; i < ds_clouds.length; i++) {
  var ds_cloud = ds_clouds[i]
  var cloud_href = ds_cloud["href"]
  var cloud_type = ds_cloud["cloud_type"]
  cloud_hash[cloud_href] = cloud_type
}
  
// Build a pg hash that is pg resource id -> { pg type, pg name }
var pg_hash = {}
for (var i = 0; i < ds_pgs.length; i++) {
  var ds_pg = ds_pgs[i]
  var pg_id = ds_pg["id"]
  var pg_name = ds_pg["name"]
  var pg_account_type = ds_pg["account_type"]
  pg_hash[pg_id] = { "name": pg_name, "account_type": pg_account_type }
}

var vol_string = JSON.stringify(volumes)
unattached_volumes.push({"my_vol_string": vol_string}) 

// loop through the volumes and find the unattached ones
for (var i = 0; i < volumes.length; i++) {
  var vol = volumes[i]
  if (vol.status == "available") {
    // build a volume object
    var my_vol = {}
    my_vol["id"] = vol["resource_uid"]
    my_vol["href"] = vol["href"]
    my_vol["name"] = vol["name"]
    my_vol["size"] = vol["size"]
    my_vol["status"] = vol["status"]
    my_vol["updated_at"] =  vol["updated_at"]
    my_vol["pg_id"] = null
    my_vol["volume_type"] = null
    
    if (vol.placement_group) {
      my_vol["pg_id"] = vol.placement_group.resource_uid
    }
    
    if (vol.volume_type) {
      my_vol["volume_type"] = vol.volume_type.resource_uid
    }

    // Include information about azure storage types since it is helpful to know what kind of azure storage is being used when
    // doing cost optimzation.
    
    // Calculate the age and add the information to the hash for the unattached volume.
    // This is used in the reporting to tell the user the age of the unattachedness.
    // Doing some date math
    // Get the parts of the updated_at date found in the hash
    var updated_at_parts = vol.updated_at.split(" ")
    // chop up the yyyy/mm/dd into its parts
    var date_parts = updated_at_parts[0].split("/")

    // Create a Date object based on the yyyy, mm, dd
    // NOTE: months in javascript goes 0-11 so subtract one from the mm bit 
    var updated_at_date = new Date(date_parts[0], (Number(date_parts[1]) - 1), date_parts[2])
    var updated_at_ms = updated_at_date.getTime()
    var difference_ms = Math.abs(today_ms - updated_at_ms)
    var number_of_days_old = Math.round(difference_ms/ONE_DAY)

    // Add a computed days old item to the hash
    my_vol["age"] = number_of_days_old

    

    

  }
};
EOS
end
	
policy "pol_unattached_volumes" do
    validate_each $ds_unattached_volumes do
	# Go through the unattached volumes that were found by the script-based datasource above
	# and check if not older than specified number of days.
	# If the check fails, it'll flag the volume
	check eq(0,1)

	escalate $esc_unattached_volumes

	summary_template "Unattached Volumes"

    	detail_template <<-EOS
Unattached Volume Report for Account: {{ rs_project_name }} (ID: {{ rs_project_id }})
The following unattached volumes have exceeded the specified age of: {{ parameters.param_days_old }} days old
{{ range data }}
Vol String: {{ .my_vol_string }}
{{ end }}
EOS
    end
end


escalation "esc_unattached_volumes" do
  email $param_email
end

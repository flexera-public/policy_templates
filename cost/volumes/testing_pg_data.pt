

name "Placement Group Testing"
rs_pt_ver 20180301
short_description "Looking at PGs"
severity "medium"
category "Cost Management"

auth "rs", type: "rightscale"

resources "clouds", type: "rs_cm.clouds" do
  filter do
    cloud_type eq ["azure_v2"]
  end
end

resources "pgs", type: "rs_cm.placement_groups" do
	view "extended"
end

datasource "ds_pgs_plus2" do
  iterate @pgs
  field "id", val(iter_item, "resource_uid")
  field "name", val(iter_item, "name")
  field "account_type", val(val(iter_item, "cloud_specific_attributes"), "account_type")
end

# script-based datasource that applies the logic to return only unattached volumes
datasource "ds_pgs_plus" do
  run_script $js_pgs, @pgs 
end

# Find unattached volumes and also calculate their age.
# The age calculation is used to find old ones later on and also to inform the user of the ages of flagged volumes.
script "js_pgs", type: "javascript" do
  parameters "pgs"
  result "pgs_plus"
  code <<-EOS
var pgs_plus = [];

for (var i = 0; i < pgs.length; i++) {
  var pg = pgs[i]
  
  var my_pg = {}
  my_pg["number"] = i
  my_pg["name"] = pg.name
  my_pg["resource_id"] = pg.resource_uid
  my_pg["account_type"] = pg.cloud_specific_attributes.account_type
  
  pgs_plus.push(my_pg)
};
EOS
end
	
policy "pol_pgs" do
    validate_each $ds_pgs_plus2 do
	# Go through the unattached volumes that were found by the script-based datasource above
	# and check if not older than specified number of days.
	# If the check fails, it'll flag the volume
	check eq(0,1)

	summary_template "PGs"

    	detail_template <<-EOS
Placement Groups
{{ range data }}
Number: {{ .number }}
ID: {{ .resource_id }}
Name: {{ .name }}
Account_type: {{ .account_type }}
{{ end }}
EOS
    end
end


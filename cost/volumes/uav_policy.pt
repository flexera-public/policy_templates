# TO-DO: 
#    Add parameter for age of unattached volume in days
#    Use parameter to validate_each in policy and only report those that are older than given age
#

name "Unattached Volumes Notification (and Clean Up)"
rs_pt_ver 20180301
short_description "Finds unattached volumes older than specified number of days and reports and optionally deletes them."
severity "medium"
category "Cost Management"

parameter "param_email" do
  type "string"
  label "Email address to send escalation emails to"
end

parameter "param_days_old" do
  type "number"
  label "Identify volumes that have been unattached for the given number of days."
  default 30
end

resources "clouds", type: "rs_cm.clouds" do
  filter do
    cloud_type ne: ["soft_layer", "cloud_stack","azure","rackspace_next_gen","vscale","blue_skies","open_stack_v2","uca","open_stack_v3"]
  end
end

resources "volumes", type: "rs_cm.volumes" do
  iterate @clouds
  cloud_href href(iter_item) 
end

datasource "ds_volumes" do
  iterate @volumes
  field "id", val(iter_item, "resource_uid")
  field "name", val(iter_item, "name")
  field "size", val(iter_item, "size")
  field "status", val(iter_item, "status")
  field "updated_at", val(iter_item, "updated_at")
end

# script-based datasource that applies the logic to return only unattached volumes
datasource "ds_unattached_volumes" do
  run_script $js_unattached_volumes, $ds_volumes
end

script "js_unattached_volumes", type: "javascript" do
  parameters "ds_volumes"
  result "unattached_volumes"
  code <<-EOS
// This is the list of unattached volumes.
var unattached_volumes = [];

// The number of milliseconds in one day
var ONE_DAY = 1000 * 60 * 60 * 24
var today = new Date()
// Get today in epoch time in UTC time
var today_ms = new Date(today.getTime() + today.getTimezoneOffset() * 60000);

// loop through the volumes and find the unattached ones
for (var i = 0; i < ds_volumes.length; i++) {
  vol = ds_volumes[i]
  if (vol.status == "available") {

        // Calculate the age and add the information to the hash for the unattached volume.
        // This is used in the reporting to tell the user the age of the unattachedness.

        // Doing some date math
        // Get the parts of the updated_at date found in the hash
        var updated_at_parts = vol.updated_at.split(" ")
        // chop up the yyyy/mm/dd into it's parts
        var date_parts = updated_at_parts[0].split("/")

        // Create a Date object based on the yyyy, mm, dd
        // NOTE: months in javascript goes 0-11 so subtract one from the mm bit 
        var updated_at_date = new Date(date_parts[0], (Number(date_parts[1]) - 1), date_parts[2])
        var updated_at_ms = updated_at_date.getTime()
        var difference_ms = Math.abs(today_ms - updated_at_ms)
        var number_of_days_old = Math.round(difference_ms/ONE_DAY)

        // Add a computed days old item to the hash
        vol["age"] = number_of_days_old

        // Push the hash element to the unattach_volumes array
        unattached_volumes.push(vol)

  }
};
EOS
end
	
policy "pol_unattached_volumes" do
    validate_each $ds_unattached_volumes do
	# Go through the unattached volumes that were found by the script-based datasource above
	# and check if not older than specified number of days.
	# If the check fails, it'll flag the volume
	check le(dec(now, to_d(val(item, "updated_at"))), prod($param_days_old, 24*3600))

	escalate $esc_unattached_volumes

	summary_template "Unattached Volumes"

    	detail_template <<-EOS
Unattached Volume Report for Account: {{ rs_project_name }} (ID: {{ rs_project_id }})
The following unattached volumes have exceeded the specified age of: {{ parameters.param_days_old }} days old
{{ range data }}
ID: {{ .id }}
Name: {{ .name }}
Size: {{ .size }}
Status: {{ .status }}
Unattached on: {{ .updated_at }}
Age (days): {{ .age}}
{{ end }}
EOS
    end
end


escalation "esc_unattached_volumes" do
  email $param_email
end

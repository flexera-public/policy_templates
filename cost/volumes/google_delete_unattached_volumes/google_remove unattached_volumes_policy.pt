name "Google Delete Unattached Volumes"
rs_pt_ver 20180301
type "policy"
short_description "Checks for unattached volumes older than specified number of days and, optionally, deletes them. See the [README](https://github.com/flexera/policy_templates/tree/master/cost/google/unattached_volumes) and [docs.rightscale.com/policies](https://docs.rightscale.com/policies/) to learn more."
category "Cost"
severity "low"
#info "(version: "2.0", provider:"Google", service: "Storage" policy_set: "Unattached Volumes")"

###############################################################################
# Permissions
###############################################################################

permission "perm_read_creds" do
  actions   "rs_cm.show_sensitive","rs_cm.index_sensitive"
  resources "rs_cm.credentials"
end

###############################################################################
# Parameters
###############################################################################

parameter "param_email" do
  type "list"
  label "Email addresses of the recipients you wish to notify"
end

parameter "param_unattached_days" do
  type "string"
  label "The number of days a volume has been unattached"
  default "30"
end

parameter "param_delete_unattached_volumes" do
  type "string"
  label "Take action to delete the unattached volumes if found"
  default "No"
  allowed_values "Yes","No"
end
###############################################################################
# Authentication
###############################################################################

auth "my_google_auth", type: "oauth2" do
  token_url "https://www.googleapis.com/oauth2/v4/token"
  grant type: "jwt_bearer" do
    iss cred("GCE_PLUGIN_ACCOUNT")
    aud "https://www.googleapis.com/oauth2/v4/token"
    additional_claims do {
      "scope" => "https://www.googleapis.com/auth/compute",
      "scope" => "https://www.googleapis.com/auth/cloud-platform"
    } end
    signing_key cred("GCE_PLUGIN_PRIVATE_KEY")
  end
end


datasource "ds_projects" do
  request do
    auth $my_google_auth
    host "cloudresourcemanager.googleapis.com"
    verb "GET"
    path "/v1/projects"
  end
  result do
    encoding "json"
    collect jmes_path(response,"projects[*]") do
      field "project_name", jmes_path(col_item, "projectId")
      end
  end
end


datasource "ds_zones" do
  iterate $ds_projects
  request do
    auth $my_google_auth
    host "compute.googleapis.com"
    verb "GET"
    path join(["/compute/v1/projects/", val(iter_item, "project_name"), "/zones"])
    query "project", val(iter_item, "project_name")
  end
  result do
    encoding "json"
    collect jmes_path(response,"items[*]") do
      field "region", last(split(jmes_path(col_item, "region"),'/'))
      field "zone", jmes_path(col_item, "name") 
    end
  end
end

datasource "ds_merged_project_zone" do
  run_script $js_merge, $ds_zones, $ds_projects
end

script "js_merge", type: "javascript" do
  parameters "ds_zones", "ds_projects"
  result "res"
  code <<-EOS
  res = []
  _.each(ds_projects, function(project){
    _.each(ds_zones, function(zone){
      var result_json = {"project": project.project_name,"zone": zone.zone}
      res.push(result_json)
    })
  })
  EOS
end

datasource "ds_volumes_list" do
  iterate $ds_merged_project_zone
  request do
    auth $my_google_auth
    host "compute.googleapis.com"
    verb "GET"
    path join(["/compute/v1/projects/", val(iter_item, "project"), "/zones/", val(iter_item, "zone"), "/disks"])
    query "project", val(iter_item, "project_name")
  end
  result do
    encoding "json"
    collect jmes_path(response,"items[*]") do
      field "zone", jmes_path(col_item, "zone")
      field "id", jmes_path(col_item, "id")
	    field "name", jmes_path(col_item, "name")
	    field "creationTimestamp", jmes_path(col_item, "creationTimestamp")
	    field "lastAttachTimestamp", jmes_path(col_item, "lastAttachTimestamp")
	    field "lastDetachTimestamp", jmes_path(col_item, "lastDetachTimestamp")
    end
  end
end


datasource "ds_clean_volume_list" do
  run_script $js_clean_volume_list, $ds_volumes_list
end

script "js_clean_volume_list", type: "javascript" do
  parameters "ds_volumes_list"
  result "res"
  code <<-EOS
  res = []
  _.each(ds_volumes_list, function(ds_volumes){
    if(ds_volumes.name!=null && ds_volumes.id!=null && ds_volumes.zone!=null)
      res.push(ds_volumes)
  })
  EOS
end


datasource "ds_unattached_volumes" do
  run_script $js_unattached_volumes, $ds_clean_volume_list, $param_unattached_days
end

script "js_unattached_volumes", type: "javascript" do
  parameters "ds_clean_volume_list", "param_unattached_days"
  result "res"
  code <<-EOS
  var start_date = new Date(new Date().setDate(new Date().getDate() - param_unattached_days)).toISOString();
  console.log("star date="+start_date);
  res = []
    _.each(ds_clean_volume_list, function(ds_volumes){    
      if(ds_volumes.lastDetachTimestamp!=null && ds_volumes.lastDetachTimestamp > ds_volumes.lastAttachTimestamp && ds_volumes.lastDetachTimestamp < start_date){
        res.push(ds_volumes)
      }
    })
  EOS
end


###############################################################################
# Policy
###############################################################################

policy 'policy_google_unattached_volumes' do
  validate_each $ds_unattached_volumes do
    summary_template "{{ rs_project_name }} (Account ID: {{ rs_project_id }}): {{ len data }} Google unattached volumes Discovered"
    detail_template <<-EOS
#  Unattached volumes from the Google Cloud 
# Google Cloud  Unattached volumes Collected for Use with Self-Service
{{ range data }}
|  ID     | Name      |Zone |
| {{.id}} | {{.name}} | {{.zone}} |
{{ end }}
EOS
  check equals?($param_delete_unattached_volumes,"Yes")
  escalate $escalate_delete_unattached_volumes
  end
end

###############################################################################
# Escalations
###############################################################################

escalation "escalate_delete_unattached_volumes" do
  email $param_email
end


###############################################################################
# Cloud Workflow
###############################################################################

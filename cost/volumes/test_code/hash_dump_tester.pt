name "Hash Dumps"
rs_pt_ver 20180301
short_description "Dumps hashs and the like"
severity "medium"
category "Cost Management"

parameter "param_email" do
  type "string"
  label "Email address to send escalation emails to"
end

parameter "param_days_old" do
  type "number"
  label "Identify volumes that have been unattached for the given number of days."
  default 30
end

resources "clouds", type: "rs_cm.clouds" do
  filter do
    #cloud_type ne: ["soft_layer", "cloud_stack", "rackspace_next_gen", "blue_skies","open_stack_v2","uca","open_stack_v3"]
    cloud_type ne: ["amazon", "google", "soft_layer", "cloud_stack", "rackspace_next_gen", "blue_skies","open_stack_v2","uca","open_stack_v3"]
  end
end

datasource "ds_clouds" do
	iterate @clouds
	field "href", href(iter_item)
	field "cloud_type", val(iter_item, "cloud_type")
end

resources "pgs", type: "rs_cm.placement_groups" do
	view "extended"
end

datasource "ds_pgs" do
	iterate @pgs
	field "id", val(iter_item, "resource_uid")
	field "name", val(iter_item, "name")
	field "account_type", val(val(iter_item, "cloud_specific_attributes"), "account_type")
end

resources "volumes", type: "rs_cm.volumes" do
  iterate @clouds
  cloud_href href(iter_item) 
  view "extended"
end

# Processing volumes in javascript since extended view does not always have a placement_group or volume_type hash in the
# results and datasource declaration doesn't like that.

# script-based datasource that applies the logic to return only unattached volumes
datasource "ds_unattached_volumes" do
  run_script $js_unattached_volumes, $ds_clouds, $ds_pgs, @volumes
end

# Find unattached volumes and also calculate their age.
# The age calculation is used to find old ones later on and also to inform the user of the ages of flagged volumes.
script "js_unattached_volumes", type: "javascript" do
  parameters "ds_clouds", "ds_pgs", "volumes"
  result "unattached_volumes"
  code <<-EOS
// This is the list of unattached volumes.
var unattached_volumes = [];

// Used for date math below
// The number of milliseconds in one day
var ONE_DAY = 1000 * 60 * 60 * 24
var today = new Date()
// Get today in epoch time in UTC time
var today_ms = new Date(today.getTime() + today.getTimezoneOffset() * 60000);

// Used for volume type discovery below
// Build a cloud href -> type hash
var cloud_hash = {}
for (var i = 0; i < ds_clouds.length; i++) {
  var ds_cloud = ds_clouds[i]
  var cloud_href = ds_cloud["href"]
  var cloud_type = ds_cloud["cloud_type"]
  cloud_hash[cloud_href] = cloud_type
}

// Build a pg hash that is pg resource id -> { pg type, pg name }
var pg_hash = {}
for (var i = 0; i < ds_pgs.length; i++) {
  var ds_pg = ds_pgs[i]
  var pg_id = ds_pg["id"]
  var pg_name = ds_pg["name"]
  var pg_account_type = "unspecified"
  if (ds_pg["account_type"]) { 
    pg_account_type = ds_pg["account_type"]
  }
  pg_hash[pg_id] = { "name": pg_name, "account_type": pg_account_type }
}

unattached_volumes.push({ "cloud_hash": JSON.stringify(cloud_hash), "pg_hash": JSON.stringify(pg_hash), "volumes": JSON.stringify(volumes)})  

EOS
end

policy "pol_unattached_volumes" do
    validate_each $ds_unattached_volumes do
	# Go through the unattached volumes that were found by the script-based datasource above
	# and check if not older than specified number of days.
	# If the check fails, it'll flag the volume
	#check le(val(item, "age"), $param_days_old)
	check eq(0,1)

	#escalate $esc_unattached_volumes

	summary_template "Hash Dumps"

    	detail_template <<-EOS
Unattached Volume Report for Account: {{ rs_project_name }} (ID: {{ rs_project_id }})
The following unattached volumes have exceeded the specified age of: {{ parameters.param_days_old }} days old
{{ range data }}
cloud hash: {{ .cloud_hash}}
pg hash: {{ .pg_hash}}
volumes: {{ .volumes}}
{{ end }}
EOS
    end
end

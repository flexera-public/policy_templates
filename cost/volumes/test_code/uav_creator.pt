# Used to create a variety of unattached volumes

name "Create Unattached Volumes for Testing Purposes"
rs_pt_ver 20180301
short_description "Creates a variety of unattached volumes in multiple clouds. Used for testing."
severity "medium"
category "Testing"

permission "general_permissions" do
  resources "rs_cm.volumes", "rs_cm.audit_entries", "rs_cm.placement_groups", "rs_cm.clouds", "rs_cm.tags", "rs_cm.deployments"
  actions   "rs_cm.*"
end

resources "clouds", type: "rs_cm.clouds" do
  filter do
    cloud_type ne: ["soft_layer", "cloud_stack", "rackspace_next_gen", "blue_skies","open_stack_v2","uca","open_stack_v3"]
  end
end

datasource "ds_clouds" do
	iterate @clouds
	field "href", href(iter_item)
	field "cloud_type", val(iter_item, "cloud_type")
  field "name", val(iter_item,'name')
end

resources "pgs", type: "rs_cm.placement_groups" do
	view "extended"
end

datasource "ds_pgs" do
	iterate @pgs
	field "id", val(iter_item, "resource_uid")
	field "name", val(iter_item, "name")
	field "account_type", val(val(iter_item, "cloud_specific_attributes"), "account_type")
end


## script-based datasource that applies the logic to return only unattached volumes
#datasource "ds_unattached_volumes" do
#  run_script $js_unattached_volumes, $ds_clouds, $ds_pgs, @volumes, $param_delete
#end
#
## Find unattached volumes.
## If Azure volume, deduce the type.
## Calculate the volume's age.
#script "js_unattached_volumes", type: "javascript" do
#  parameters "ds_clouds", "ds_pgs", "volumes", "param_delete"
#  result "unattached_volumes"
#  code <<-EOS
#// This is the eventual output list of unattached volumes.
#var unattached_volumes = [];
#
#// Used for date math below
#// The number of milliseconds in one day
#var ONE_DAY = 1000 * 60 * 60 * 24
#var today = new Date()
#// Get today in epoch time in UTC time
#var today_ms = new Date(today.getTime() + today.getTimezoneOffset() * 60000);
#
#// Used for volume type discovery below
#// Build a cloud href -> type hash
#var cloud_hash = {}
#for (var i = 0; i < ds_clouds.length; i++) {
#  var ds_cloud = ds_clouds[i]
#  var cloud_href = ds_cloud["href"]
#  var cloud_type = ds_cloud["cloud_type"]
#  var cloud_name = ds_cloud["name"]
#  cloud_hash[cloud_href] = { "cloud_type": cloud_type, "cloud_name": cloud_name }
#}
#// Build a pg hash that is pg resource id -> { pg type, pg name }
#var pg_hash = {}
#for (var i = 0; i < ds_pgs.length; i++) {
#  var ds_pg = ds_pgs[i]
#  var pg_id = ds_pg["id"]
#  var pg_name = ds_pg["name"]
#  var pg_account_type = "unspecified"
#  if (ds_pg["account_type"]) { 
#    pg_account_type = ds_pg["account_type"]
#  }
#  pg_hash[pg_id] = { "name": pg_name, "account_type": pg_account_type }
#}
#
#// loop through the volumes and find the unattached ones and deduce storage type if Azure
#for (var i = 0; i < volumes.length; i++) {
#  var vol = volumes[i]
#  if (vol.status == "available") {
#    // build a volume object
#    var my_vol = {}
#    my_vol["id"] = vol["resource_uid"]
#    my_vol["name"] = vol["name"]
#    my_vol["size"] = vol["size"]
#    my_vol["iops"] = vol["iops"]
#    my_vol["status"] = vol["status"]
#    if (param_delete == "DELETE") {  // Then the volume is marked that it was deleted.
#      my_vol["status"] = "DELETED"
#    }
#    my_vol["created_at"] =  vol["created_at"]
#    my_vol["updated_at"] =  vol["updated_at"]
#    my_vol["pg_id"] = null
#    my_vol["volume_type"] = null
#    
#    if (vol.placement_group) {
#      my_vol["pg_id"] = vol.placement_group.resource_uid
#    }
#    
#    if (vol.volume_type) {
#      my_vol["volume_type"] = vol.volume_type.resource_uid
#    }
#
#    // Include information about azure storage types since it is helpful to know what kind of azure storage is being used when
#    // doing cost optimzation.      
#    // We only care about Azure storage types and so first we need to figure out if this volume is in azure.
#    // volume href is <<CLOUD_HREF>>/volumes/<<VOLUME_ID>>
#    // So extract cloud href from the volument object
#    var vol_href =  ""
#    var vol_cloud_href = ""
#    vol.links.forEach(function(link) {
#      if (link.rel == "cloud") {
#        vol_cloud_href = link.href
#      } else if (link.rel == "self" ) {
#        vol_href = link.href
#      }
#    })
#    
#    my_vol["href"] = vol_href
#    my_vol["cloud_href"] = vol_cloud_href 
#    my_vol["cloud_name"] = cloud_hash[vol_cloud_href]["cloud_name"]
#    
#    // Now use that cloud hash built above to see if this volume is in Azure/RM
#    if (cloud_hash[vol_cloud_href]["cloud_type"] == "azure_v2") {  
#      // AzureRM - we care
#      if (my_vol["pg_id"]) {
#        my_vol["azure_disk_type"] = "Unmanaged"
#        my_vol["azure_storage_type"] = pg_hash[my_vol["pg_id"]]["account_type"]
#        my_vol["azure_storage_account_name"] = pg_hash[my_vol["pg_id"]]["name"]
#      } else if (my_vol["volume_type"]) {
#        my_vol["azure_disk_type"] = "Managed"
#        my_vol["azure_storage_type"] = my_vol["volume_type"]
#        my_vol["azure_storage_account_name"] = "N/A"
#      } else {
#        my_vol["azure_disk_type"] = "Unknown"
#        my_vol["azure_storage_type"] = "Unknown"
#        my_vol["azure_storage_account_name"] = "Unknown"
#      }
#    } else if (cloud_hash[vol_cloud_href]["cloud_type"] == "azure") {   
#      // old Azure - we also care
#      my_vol["azure_disk_type"] = "Unmanaged"
#      my_vol["azure_storage_type"] = "Classic"
#      my_vol["azure_storage_account_name"] = pg_hash[my_vol["pg_id"]]["name"]
#    } else {
#      // Other clouds - we do not care
#      my_vol["azure_disk_type"] = "N/A"
#      my_vol["azure_storage_type"] = "N/A"
#      my_vol["azure_storage_account_name"] = "N/A"
#    }
#    
#    // Calculate the age and add the information to the hash for the unattached volume.
#    // This is used in the reporting to tell the user the age of the unattachedness.
#    // Get the parts of the updated_at date found in the hash
#    var updated_at_parts = vol.updated_at.split(" ")
#    // chop up the yyyy/mm/dd into its parts
#    var date_parts = updated_at_parts[0].split("/")
#
#    // Create a Date object based on the yyyy, mm, dd
#    // NOTE: months in javascript goes 0-11 so subtract one from the mm bit 
#    var updated_at_date = new Date(date_parts[0], (Number(date_parts[1]) - 1), date_parts[2])
#    var updated_at_ms = updated_at_date.getTime()
#    var difference_ms = Math.abs(today_ms - updated_at_ms)
#    var number_of_days_old = Math.round(difference_ms/ONE_DAY)
#
#    // Add a computed days old item to the hash
#    my_vol["age"] = number_of_days_old
#
#    // Push the volume hash element to the unattach_volumes array
#    unattached_volumes.push(my_vol)  
#  }
#}
#EOS
#end
	
policy "pol_unattached_volumes" do
  validate_each $ds_clouds do

  # Force escalation code to run since that's where I create the volumes
	check eq(0,1)

	escalate $esc_unattached_volumes

	summary_template "Created Volumes"

  detail_template <<-EOS
Created Volumes
EOS

  end
end


escalation "esc_unattached_volumes" do
  
  run "create_unattached_volumes", data
end

define create_unattached_volumes($data) do
  
      $done_azure = false
      $done_azure_v2 = false
      $done_amazon = false
      $done_google = false
      $done_vscale = false
        
      foreach $item in $data do
        $uuid = uuid()
        $item_cloud_type = $item["cloud_type"]
        $item_cloud_href = $item["href"]
        if ($item_cloud_type == "azure") && ($done_azure == false)
          $done_azure = true
          @cloud = rs_cm.cloud.get(href: $item_cloud_href)
         
          @pgs = rs_cm.placement_groups.get(filter: ["cloud_href=="+$item_cloud_href])
          @pg = first(@pgs)
          if logic_not(@pg) # this if-then and pg creation is untested 
            @pg = rs_cm.placement_groups.create(placement_group: {name: "uavpg-"+$uuid, cloud_href: @cloud.href})
          end
          @cloud.volumes().create(volume: {name: "test-uav-azure-"+$uuid, placement_group_href: @pg.href, size: 5})

        elsif ($item_cloud_type == "azure_v2") && ($done_azure_v2 == false)
          $done_azure_v2 = true
                    
          @cloud = rs_cm.cloud.get(href: $item_cloud_href)
          
          ### old-school unmanaged volume
          @pgs = rs_cm.placement_groups.get(filter: ["cloud_href=="+$item_cloud_href])
          @pg = first(@pgs)
          if logic_not(@pg) # this if-then and pg creation is untested 
            @pg = rs_cm.placement_groups.create(placement_group: {name: "testuavpg-"+$uuid, cloud_href: @cloud.href})
          end
          @cloud.volumes().create(volume: {name: "test-uav-azurerm-unmanaged-"+$uuid, placement_group_href: @pg.href, size: 5})
          
          ### New modern managed volume
          @vol_type = first(@cloud.volume_types().get())
          @cloud.volumes().create(volume: {name: "test-uav-azurerm-managed-"+$uuid, volume_type_href: @vol_type.href, size: 5})

        elsif ($item_cloud_type == "amazon")  && ($done_amazon == false)
          $done_amazon = true
          @cloud = rs_cm.cloud.get(href: $item_cloud_href)
          @dc = first(@cloud.datacenters())
          
          @cloud.volumes().create(volume: {name: "test-uav-aws-"+$uuid, datacenter_href: @dc.href, size: 5})

        elsif ($item_cloud_type == "google") && ($done_google == false)
          $done_google = true
          
          @cloud = rs_cm.cloud.get(href: $item_cloud_href)
          @dc = first(@cloud.datacenters())
          @vol_type = @cloud.volume_types(filter: ["name==pd-standard"])
          @cloud.volumes().create(volume: {name: "test-uav-google-"+$uuid, volume_type_href: @vol_type.href, datacenter_href: @dc.href, size: 5})

        # VMMWARE IS A TODO
        elsif ($item_cloud_type == "vscale") && ($done_vscale == false) 
          if ($item["name"] == "VMware Private Cloud")   # extra check to use what should be a working VMware env
            $done_vscale = true
            
          end
        end
      end

end

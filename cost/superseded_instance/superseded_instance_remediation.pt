name "Superseded Instance Remediation"
rs_pt_ver 20180301
type "policy"
short_description "This Policy Template is used to automatically supersede instances based on user-defined standards. \n See the [README](https://github.com/rightscale/policy_templates/tree/master/cost/aws/aws_superseded_instance) and [docs.rightscale.com/policies](http://docs.rightscale.com/policies/) to learn more."
long_description "Version: 1.0"
category "Cost"
severity "low"

###############################################################################
# Permissions
###############################################################################

permission "perm_instances" do
  label "Permissions for instances"
  actions "rs_cm.index", "rs_cm.show"
  resources "rs_cm.instances"
end

###############################################################################
# Parameters
###############################################################################

parameter "param_email" do
  type "list"
  label "Email addresses"
  description "Email addresses of the recipients you wish to notify"
end

parameter "param_old_instance_type" do
  label "Disallowed Instance Type"
  type "string"
  description "Old Instance Type"
end

parameter "param_new_instance_type" do
  label "Superseded Instance Type"
  type "string"
  description "New Instance Type"
end

parameter "param_exclude_tags" do
  label "Exclude Tags"
  description "list of tags to filter out instances from being checked"
  type "list"
end

###############################################################################
# Authentication
###############################################################################

auth "auth_rs", type: "rightscale"

###############################################################################
# Resources
###############################################################################

resources "clouds", type: "rs_cm.clouds" do
  filter do
    cloud_type ne: ["soft_layer", "cloud_stack","azure","rackspace_next_gen","vscale","blue_skies","open_stack_v2","uca","open_stack_v3"]
  end
end

###############################################################################
# Datasources
###############################################################################

datasource "ds_instances_16" do
  iterate(@clouds)
  request do
    run_script $js_instances_16, rs_cm_host, href(iter_item), rs_project_id, $param_exclude_tags
  end
  result do
    encoding "json"
    collect jmes_path(response, "[*]") do
      field "href", jmes_path(col_item, "href")
      field "name", jmes_path(col_item, "name")
      field "description", jmes_path(col_item, "description")
      field "legacy_id", to_n(jmes_path(col_item, "legacy_id"))
      field "resource_uid", jmes_path(col_item, "resource_uid")
      field "instance_type", jmes_path(col_item, "links.instance_type.name")
      field "region", jmes_path(col_item, "links.cloud.region")
      field "cloud_name", val(iter_item, "display_name")
      field "locked", jmes_path(col_item, "locked")
      field "state", jmes_path(col_item, "state")
    end
  end
end

datasource "ds_combined_instance_data" do
  run_script $js_merge_instance_data, $ds_instances_16, $param_old_instance_type
end

###############################################################################
# Scripts
###############################################################################

script "js_instances_16", type: "javascript" do
  result "request"
  parameters "rs_cm_host","cloud_href","rs_project_id","param_exclude_tags"
  code <<-EOS
    var filtered_tags = ""
    console.log(param_exclude_tags)
    if ( param_exclude_tags.length > 0 ) {
      var filtered_tags = '&tag!=' + param_exclude_tags.join(",");
    }

    request = {
      "auth": "auth_rs",
      "verb": "GET",
      "host": rs_cm_host,
      "path": cloud_href + "/instances",
      "headers": {
        "X-Api-Version": "1.6",
        "X-Account": \""+rs_project_id+\""
      },
      "query_params": {
        "view": "full",
        "filter": 'state=provisioned,operational,running'.concat(filtered_tags)
      }
    }

  EOS
end

script "js_merge_instance_data", type: "javascript" do
  parameters "ds_instances", "param_old_instance_type"
  result "results"
  code <<-EOS
    var results = []
    for ( i=0; i < ds_instances.length; i++) {
      var instance = ds_instances[i]
      if ( instance.instance_type == param_old_instance_type ){
        results.push(instance)
      }
    }
  EOS
end

###############################################################################
# Escalations
###############################################################################
escalation "report_and_resize_instances" do
  request_approval  do
    label "Escalation approval"
    description "Approve delete action"
    parameter "approval_reason" do
      type "string"
      label "Reason for approval"
      description "Explain why you are approving the action"
    end
  end

  run "resize_instances", data, $param_new_instance_type
  email $param_email
end

resolution "report_and_resize_instances_resolution" do
  email $param_email
end

###############################################################################
# Policy
###############################################################################

policy "pol_superseded_instance" do
  validate_each $ds_combined_instance_data do
    summary_template "{{ rs_project_name }} (Account ID: {{ rs_project_id }}): {{ len data }} Instances will be resized from {{ parameters.param_old_instance_type }} to {{ parameters.param_new_instance_type }}"
    detail_template <<-EOS
# Superseded Instances
| Resource_uid | Name | Cloud |
| ------------ | ---- | ----- |
{{ range data -}}
| {{ .resource_uid }} | {{ .name }} | {{ .cloud_name}} |
{{ end -}}
___
###### Policy Applied in Account: {{ rs_project_name }} (Account ID: {{ rs_project_id }}) within Org: {{ rs_org_name }} (Org ID: {{ rs_org_id }})
EOS
    check val(item,"locked")
    escalate $report_and_resize_instances
  end
end

###############################################################################
# Cloud Workflow
###############################################################################

define resize_instances($data,$param_new_instance_type) do
  foreach $item in $data do
    call sys_log("resizing instance", $item)
    @instance = rs_cm.get(href: $item["href"])
    @current_server = @instance.parent()
    task_label("stopping instance")
    @instance.stop()
    task_label("sleeping until instance stopped")
    sleep_until(@current_server.state == 'provisioned')
    @current_instance = @current_server.current_instance()
    @cloud = @current_instance.cloud()
    @new_instance_type = first(@cloud.instance_types(filter: ["name=="+$param_new_instance_type]))
    @current_instance.update(instance: { instance_type_href: @new_instance_type.href })
    task_label("sleeping until instance started")
    @current_instance.start()
    sleep_until(@current_instance.state == 'operational')
    task_label("Instance Started")
  end
end

define sys_log($subject, $detail) do
  if $$debug
    rs_cm.audit_entries.create(
      notify: "None",
      audit_entry: {
        auditee_href: @@account,
        summary: join(["Superseded Instance Remediation - ",$subject]),
        detail: $detail
      }
    )
  end
end
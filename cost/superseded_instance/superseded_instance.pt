name "AWS Superseded Instance"
rs_pt_ver 20180301
type "policy"
short_description "This Policy Template is used to automatically resize AWS Instances based on user-defined standards. \n See the [README](https://github.com/rightscale/policy_templates/tree/master/cost/aws/aws_superseded_instance) and [docs.rightscale.com/policies](http://docs.rightscale.com/policies/) to learn more."
long_description "Version: 1.0"
category "Cost"
severity "low"

###############################################################################
# Permissions
###############################################################################

permission "perm_instances" do
  label "Permissions for instances"
  actions "rs_cm.index", "rs_cm.show"
  resources "rs_cm.instances"
end

###############################################################################
# Parameters
###############################################################################

parameter "param_email" do
  type "list"
  label "Email addresses"
  description "Email addresses of the recipients you wish to notify"
end

parameter "param_exclude_tags" do
  label "Exclude Tags"
  description "list of excluded servers"
  type "list"
end

parameter "param_new_instancetype_category" do
  label "Instance Type Category"
  type "string"
  description "Instance Type Category to pick from, see docs for details"
  allowed_values "regular", "burstable", "amd"
end

###############################################################################
# Authentication
###############################################################################

auth "auth_rs", type: "rightscale"

###############################################################################
# Resources
###############################################################################

resources "clouds", type: "rs_cm.clouds" do
  filter do
    cloud_type "amazon"
  end
end

resources "instances", type: "rs_cm.instances" do
  iterate @clouds  
  cloud_href href(iter_item)
  tags none($param_exclude_tags)
  view 'extended'
end

resources "instance_types", type: "rs_cm.instance_types" do
  iterate @clouds  
  cloud_href href(iter_item)
end

resources "networks", type: "rs_cm.networks" do
  iterate @clouds
  filter do
    cloud_href href(iter_item)
  end
end

###############################################################################
# Datasources
###############################################################################
datasource "ds_clouds" do
  iterate @clouds
  field "href", href(iter_item)
  field "name", val(iter_item, "display_name")
end

datasource "ds_instances" do
  iterate @instances
  field "resource_uid", val(iter_item,  "resource_uid")
  field "name", val(iter_item, "name")
  field "href", href(iter_item)
  field "cloud_href", jmes_path(iter_item, "links[?rel=='cloud'].href | [0]")
  field "instance_type_href", jmes_path(iter_item, "links[?rel=='instance_type'].href | [0]")
  field "locked", jmes_path(iter_item,"locked")
  field "state", jmes_path(iter_item,"state")
end

datasource "ds_instance_types" do
  iterate @instance_types
  field "resource_uid", val(iter_item,  "resource_uid")
  field "cloud_href", jmes_path(iter_item, "links[?rel=='cloud'].href | [0]")
  field "instance_type_href", jmes_path(iter_item, "links[?rel=='self'].href | [0]")
  field "memory", jmes_path(iter_item,"memory")
  field "cpu_count", jmes_path(iter_item,"cpu_count")
  field "local_disks", jmes_path(iter_item, "local_disks")
  field "local_disk_size", jmes_path(iter_item, "local_disk_size")
end

datasource "ds_networks" do
  iterate @networks
  field "resource_uid", val(iter_item, "resource_uid")
  field "cloud_href", jmes_path(iter_item, "links[?rel=='cloud'].href | [0]")
  field "network_href", jmes_path(iter_item, "links[?rel=='self'].href | [0]")
  field "name", val(iter_item, "name")
end

datasource "ds_aws_instance_size_map" do
  request do
    verb "GET"
    host "raw.githubusercontent.com"
    path "/rightscale/policy_templates/aws_superseded_instances/data/aws/instance_types.json"
    header "User-Agent", "RS Policies"
  end
end

datasource "ds_azure_instance_size_map" do
  request do
    verb "GET"
    host "raw.githubusercontent.com"
    path "/rightscale/policy_templates/aws_superseded_instances/data/azure/instance_types.json"
    header "User-Agent", "RS Policies"
  end
end

datasource "ds_combined_instance_data" do
  run_script $js_merge_instance_data, $ds_instances, $ds_instance_types, $ds_clouds, $ds_networks, $ds_instance_size_map, $param_new_instancetype_category
end

###############################################################################
# Scripts
###############################################################################

script "js_merge_instance_data", type: "javascript" do
  parameters "ds_instances", "ds_instance_types", "ds_clouds", "ds_networks", "ds_instance_size_map", "param_new_instancetype_category"
  result "results"
  code <<-EOS
    var results = []
    var ec2NewInstanceTypes = ds_instance_size_map
    var ec2ClassicInstances = []
    var ec2EnhancedNetworkInstances = []

    for ( i=0; i < ds_instances.length; i++) {
      var instance = ds_instances[i]
      if ( _.contains(['provisioned','operational'],instance["state"]) ) {
        var ds_instance_type_href = instance.instance_type_href
        var cloud_href = instance.cloud_href
        var instance_types = _.reject(ds_instance_types, function(ds_instance_type){ return ds_instance_type.instance_type_href != ds_instance_type_href });
        var cloud = _.reject(ds_clouds, function(ds_cloud){ return ds_cloud.href != cloud_href })
        var instance_type = instance_types[0].resource_uid
        var series = instance_type.split('.')[0]
        var model  = instance_type.split('.')[1]
        var first_pass = ec2NewInstanceTypes[instance_type]
        var second_pass = ec2NewInstanceTypes[series]
        var new_instance_type = "none"
        if (first_pass != undefined) {
          new_instance_type = first_pass[param_new_instancetype_category] ? first_pass[param_new_instancetype_category] : first_pass["regular"]
        } else if ( second_pass != undefined) {
          new_instance_type = second_pass[param_new_instancetype_category] ? second_pass[param_new_instancetype_category]+'.'+model : second_pass["regular"]+'.'+model
        }
        var old_instance_ena = false
        if (  _.contains(ec2EnhancedNetworkInstances,series)  || _.contains(ec2EnhancedNetworkInstances,instance_type) ){
          old_instance_ena = true
        }

        if (new_instance_type != "none") {
          if ( _.contains(ec2ClassicInstances,series) ) {
            var old_instance_vpc = false
          } else {
            var old_instance_vpc = true
          }
          if ( _.contains(ec2ClassicInstances,new_instance_type.split('.')[0]) ) {
            var new_instance_vpc = false
          } else  {
            var new_instance_vpc = true
          }
          if ((!old_instance_vpc) && (new_instance_vpc)) {
            var vpc_incompatible_move = true
          } else {
            var vpc_incompatible_move = false
          }
          var new_instance_ena = false
          if (  _.contains(ec2EnhancedNetworkInstances,new_instance_type.split('.')[0])  || _.contains(ec2EnhancedNetworkInstances,new_instance_type) ) {
            new_instance_ena = true
          }
          if ( !old_instance_ena && new_instance_ena ) { 
            var ena_incompatible = true
          } else {
            var ena_incompatible = false
          }
          var old_instance_type_stats = _.reject(ds_instance_types, function(ds_instance_type) { return ds_instance_type.resource_uid != instance_type})
          var new_instance_type_stats = _.reject(ds_instance_types, function(ds_instance_type) { return ds_instance_type.resource_uid != new_instance_type})
          var warn = false
          var old_instance_type_stats_disk_count = old_instance_type_stats[0].local_disks
          var new_instance_type_stats_disk_count = new_instance_type_stats[0].local_disks
          if ( (old_instance_type_stats_disk_count > new_instance_type_stats_disk_count) || vpc_incompatible_move || ena_incompatible ) {
            warn = true
          }
          results.push(
            {
              resource_uid: instance["resource_uid"],
              name: instance["name"],
              href: instance["href"],
              cloud_href: instance["cloud_href"],
              cloud: cloud[0].name,
              instance_type_href: instance["instance_type_href"],
              instance_type: instance_type,
              locked: instance["locked"],
              old_instance_type_stats_cpu_count: old_instance_type_stats[0].cpu_count,
              old_instance_type_stats_memory: old_instance_type_stats[0].memory,
              old_instance_type_stats_disk_count: old_instance_type_stats_disk_count,
              new_instance_type: new_instance_type,
              new_instance_type_stats_cpu_count: new_instance_type_stats[0].cpu_count,
              new_instance_type_stats_memory: new_instance_type_stats[0].memory,
              new_instance_type_stats_disk_count: new_instance_type_stats_disk_count,
              vpc_incompatible_move: vpc_incompatible_move,
              ena_incompatible: ena_incompatible,
              warn: warn
            }
          )
        }
      }
    }
  EOS
end

###############################################################################
# Escalations
###############################################################################
escalation "report_and_resize_instances" do
  request_approval  do
    label "Escalation approval"
    description "Approve delete action"
    parameter "approval_reason" do
      type "string"
      label "Reason for approval"
      description "Explain why you are approving the action"
    end
  end

  run "resize_instances", data
  email $param_email
end

resolution "report_and_resize_instances_resolution" do
  email $param_email
end

###############################################################################
# Policy
###############################################################################

policy "pol_aws_superseded_instance" do
  validate_each $ds_combined_instance_data do
    summary_template "{{ rs_project_name }} (Account ID: {{ rs_project_id }}): {{ len data }} rows with cheaper data"
    detail_template <<-EOS
# AWS Superseded Instances
| Locked | Resource_uid | Name | Cloud | Current Instance Type | New Instance Type | Old Instance Type Stats | New Instance Type Stats | VPC Required | ENA Required |
| ------ | ------------ | ---- | ----- | --------------------- | ----------------- | ----------------------- | ----------------------- | ------------ | ------------ |
{{ range data -}}
|{{if .locked}} ![Locked](https://{{rs_cm_host}}/images/svg/padlock-closed.svg) {{ else }} ![Unlocked](https://{{rs_cm_host}}/images/svg/padlock-open.svg) {{ end }} | {{ if .warn }}**_{{ end -}}{{ .resource_uid }}{{ if .warn }}_**{{ end -}} | {{ .name }} | {{ .cloud}} | {{.instance_type}} | {{.new_instance_type}} | CPU Count: {{ .old_instance_type_stats_cpu_count }}, Memory: {{.old_instance_type_stats_memory}},  Disks: {{.old_instance_type_stats_disk_count}} | CPU Count: {{ .new_instance_type_stats_cpu_count }}, Memory: {{.new_instance_type_stats_memory}},  Disks: {{.new_instance_type_stats_disk_count}} | {{ if .vpc_incompatible_move }} **_TRUE_** {{else}} false {{end}} |  {{ if .ena_incompatible }} **_TRUE_** {{else}} false {{end}} |
{{ end -}}
___
###### Policy Applied in Account: {{ rs_project_name }} (Account ID: {{ rs_project_id }}) within Org: {{ rs_org_name }} (Org ID: {{ rs_org_id }})
EOS
    check eq(val(item, "new_instance_type"), "none")
    escalate $report_and_resize_instances
  end
end

###############################################################################
# Cloud Workflow
###############################################################################

define resize_instances($data) do
  foreach $item in $data do
    if !$item["locked"] || $item["warn"]
      call sys_log("resizing instance", $item)
      @instance = rs_cm.get(href: $item["href"])
      @current_server = @instance.parent()
      task_label("stopping instance")
      @instance.stop()
      task_label("sleeping until instance stopped")
      sleep_until(@current_server.state == 'provisioned')
      @current_instance = @current_server.current_instance()
      @cloud = @current_instance.cloud()
      @new_instance_type = first(@cloud.instance_types(filter: ["name=="+$item["new_instance_type"]]))
      @current_instance.update(instance: { instance_type_href: @new_instance_type.href })
      task_label("sleeping until instance started")
      @current_instance.start()
      sleep_until(@current_instance.state == 'operational')
      task_label("Instance Started")
    end
  end
end

define sys_log($subject, $detail) do
  if $$debug
    rs_cm.audit_entries.create(
      notify: "None",
      audit_entry: {
        auditee_href: @@account,
        summary: $subject,
        detail: $detail
      }
    )
  end
end
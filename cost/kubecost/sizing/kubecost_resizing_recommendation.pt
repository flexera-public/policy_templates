name "Kubecost Request Rightsizing Recommendations"
rs_pt_ver 20180301
type "policy"
short_description "Reports Request Rightsizing Recommendations from Kubecost. See the [README](https://github.com/flexera-public/policy_templates/tree/master/cost/kubecost/sizing/) and [docs.flexera.com/flexera/EN/Automation](https://docs.flexera.com/flexera/EN/Automation/AutomationGS.htm) to learn more."
long_description ""
category "Cost"
severity "low"
default_frequency "weekly"
info(
  version: "0.4.0",
  provider: "Kubecost",
  service: "Kubernetes",
  policy_set: "Rightsize Containers",
  recommendation_type: "Usage Reduction"
)

###############################################################################
# Parameters
###############################################################################

parameter "param_email" do
  type "list"
  category "Policy Settings"
  label "Email Addresses"
  description "A list of email addresses to notify."
  default []
end

parameter "param_kubecost_host" do
  type "string"
  category "Policy Settings"
  label "Kubecost Host"
  description "Kubecost Hostname or IP Address of Kubecost Load Balancer to make queries against."
  # No default value, user input required
end

parameter "param_min_savings" do
  type "number"
  category "Policy Settings"
  label "Minimum Savings Threshold"
  description "Minimum potential savings required to generate a recommendation."
  min_value 0
  default 0
end

parameter "param_scope" do
  type "string"
  category "Policy Settings"
  label "Scope"
  description "Whether to produce recommendations for the entire Kubecost estate or per cluster."
  allowed_values "Entire Estate", "Per Cluster"
  default "Entire Estate"
end

parameter "param_lookback" do
  type "number"
  category "Policy Settings"
  label "Lookback Period (Days)"
  description "Number of historical days of usage to analyze when generating recommendations."
  min_value 2
  max_value 60
  default 3
end

parameter "param_cpu_algo" do
  type "string"
  category "CPU Settings"
  label "CPU Assessment Algorithm"
  description "Whether max or a certain quantile should be used to produce CPU request recommendations."
  allowed_values "Max", "Quantile"
  default "Max"
end

parameter "param_cpu_q" do
  type "number"
  category "CPU Settings"
  label "CPU Percentile (%)"
  description "The desired percentile to base CPU request recommendations on."
  min_value 1
  max_value 100
  default 75
end

parameter "param_cpu_util" do
  type "number"
  category "CPU Settings"
  label "Target CPU Utilization (%)"
  description "CPU utilization target to use when generating recommendations."
  min_value 1
  max_value 100
  default 80
end

parameter "param_mem_algo" do
  type "string"
  category "Memory Settings"
  label "Memory Assessment Algorithm"
  description "Whether max or a certain quantile should be used to produce Memory request recommendations."
  allowed_values "Max", "Quantile"
  default "Max"
end

parameter "param_mem_q" do
  type "number"
  category "Memory Settings"
  label "Memory Percentile (%)"
  description "The desired percentile to base Memory request recommendations on."
  min_value 1
  max_value 100
  default 75
end

parameter "param_mem_util" do
  type "number"
  category "Memory Settings"
  label "Target Memory Utilization (%)"
  description "Memory utilization target to use when generating recommendations."
  min_value 1
  max_value 100
  default 80
end

###############################################################################
# Authentication
###############################################################################

credentials "auth_flexera" do
  schemes "oauth2"
  label "Flexera"
  description "Select Flexera One OAuth2 credentials"
  tags "provider=flexera"
end

###############################################################################
# Datasources & Scripts
###############################################################################

# Get applied policy metadata for use later
datasource "ds_applied_policy" do
  request do
    auth $auth_flexera
    host rs_governance_host
    path join(["/api/governance/projects/", rs_project_id, "/applied_policies/", policy_id])
    header "Api-Version", "1.0"
  end
end

datasource "ds_kubecost_currency_code" do
  request do
    host $param_kubecost_host
    path "/model/getConfigs"
  end
  result do
    encoding "json"
    field "code", jmes_path(response, "data.currencyCode")
  end
end

datasource "ds_currency_code" do
  request do
    auth $auth_flexera
    host rs_optima_host
    path join(["/bill-analysis/orgs/", rs_org_id, "/settings/currency_code"])
    header "Api-Version", "0.1"
    header "User-Agent", "RS Policies"
    ignore_status [403]
  end
  result do
    encoding "json"
    field "id", jmes_path(response, "id")
    field "value", jmes_path(response, "value")
  end
end

datasource "ds_currency_reference" do
  request do
    host "raw.githubusercontent.com"
    path "/flexera-public/policy_templates/master/data/currency/currency_reference.json"
    header "User-Agent", "RS Policies"
  end
end

datasource "ds_currency" do
  run_script $js_currency, $ds_currency_reference, $ds_kubecost_currency_code, $ds_currency_code
end

script "js_currency", type:"javascript" do
  parameters "ds_currency_reference", "ds_kubecost_currency_code", "ds_currency_code"
  result "result"
  code <<-EOS
  code = ds_kubecost_currency_code['code'].toUpperCase().trim()
  if (code == '') { code = ds_currency_code['value'] }
  if (typeof(code) != 'string' || code == '') { code = 'USD' }
  if (ds_currency_reference[code] == undefined) { code = 'USD' }

  result = {
    code: code,
    symbol: ds_currency_reference[code]['symbol'],
    separator: ds_currency_reference[code]['t_separator'] ? ds_currency_reference[code]['t_separator'] : ""
  }
EOS
end

datasource "ds_clusters" do
  request do
    host $param_kubecost_host
    path "/model/clusterInfoMap"
  end
  result do
    encoding "json"
    collect jmes_path(response, "data | values(@)") do
      field "id", jmes_path(col_item, "id")
    end
  end
end

datasource "ds_sizing_recommendation_request_list" do
  run_script $js_sizing_recommendation_request_list, $ds_clusters, $param_scope, $param_cpu_algo, $param_cpu_q, $param_mem_algo, $param_mem_q, $param_lookback, $param_cpu_util, $param_mem_util
end

script "js_sizing_recommendation_request_list", type: "javascript" do
  parameters "ds_clusters", "param_scope", "param_cpu_algo", "param_cpu_q", "param_mem_algo", "param_mem_q", "param_lookback", "param_cpu_util", "param_mem_util"
  result "result"
  code <<-EOS
  cpu_util = (param_cpu_util / 100).toString()
  mem_util = (param_mem_util / 100).toString()

  query_params = {
    algorithmCPU: param_cpu_algo.toLowerCase(),
    algorithmRAM: param_mem_algo.toLowerCase(),
    qCPU: param_cpu_q.toString(),
    qRAM: param_mem_q.toString(),
    targetCPUUtilization: cpu_util,
    targetRAMUtilization: mem_util,
    window: param_lookback + 'd',
    filter: ''
  }

  result = [ query_params ]

  if (param_scope == "Per Cluster") {
    result = _.map(ds_clusters, function(cluster) {
      cluster_query_params = query_params
      cluster_query_params['filter'] = 'cluster:"' + cluster['id'] + '"'
      return cluster_query_params
    })
  }
EOS
end

datasource "ds_request_sizing" do
  iterate $ds_sizing_recommendation_request_list
  request do
    host $param_kubecost_host
    path "/model/savings/requestSizingV2"
    query "algorithmCPU", val(iter_item, "algorithmCPU")
    query "algorithmRAM", val(iter_item, "algorithmRAM")
    query "qCPU", val(iter_item, "qCPU")
    query "qRAM", val(iter_item, "qRAM")
    query "targetCPUUtilization", val(iter_item, "targetCPUUtilization")
    query "targetRAMUtilization", val(iter_item, "targetRAMUtilization")
    query "window", val(iter_item, "window")
    query "filter", val(iter_item, "filter")
  end
  result do
    encoding "json"
    collect jmes_path(response, "Recommendations||[*]") do
      field "accountID", jmes_path(col_item, "clusterID")
      field "namespace", jmes_path(col_item, "namespace")
      field "controllerKind", jmes_path(col_item, "controllerKind")
      field "controllerName", jmes_path(col_item, "controllerName")
      field "containerName", jmes_path(col_item, "containerName")
      field "recommendedRequestCPU", jmes_path(col_item, "recommendedRequest.cpu")
      field "recommendedRequestMem", jmes_path(col_item, "recommendedRequest.memory")
      field "latestKnownRequestCPU", jmes_path(col_item, "latestKnownRequest.cpu")
      field "latestKnownRequestMem", jmes_path(col_item, "latestKnownRequest.memory")
      field "monthlySavingsCPU", jmes_path(col_item, "monthlySavings.cpu")
      field "monthlySavingsMem", jmes_path(col_item, "monthlySavings.memory")
    end
  end
end

datasource "ds_recommendations" do
  run_script $js_recommendations, $ds_request_sizing, $ds_currency, $ds_applied_policy, $param_min_savings, $param_scope, $param_lookback, $param_cpu_algo, $param_cpu_q, $param_cpu_util, $param_mem_algo, $param_mem_q, $param_mem_util
end

script "js_recommendations", type: "javascript" do
  parameters "ds_request_sizing", "ds_currency", "ds_applied_policy", "param_min_savings", "param_scope", "param_lookback", "param_cpu_algo", "param_cpu_q", "param_cpu_util", "param_mem_algo", "param_mem_q", "param_mem_util"
  result "result"
  code <<-'EOS'
  // Function for formatting currency numbers later
  function formatNumber(number, separator) {
    var numString = number.toString()
    var values = numString.split(".")
    var formatted_number = ''

    while (values[0].length > 3) {
      var chunk = values[0].substr(-3)
      values[0] = values[0].substr(0, values[0].length - 3)
      formatted_number = separator + chunk + formatted_number
    }

    if (values[0].length > 0) { formatted_number = values[0] + formatted_number }

    if (values[1] == undefined) { return formatted_number }

    return formatted_number + "." + values[1]
  }

  result = []
  total_savings = 0.0

  _.each(ds_request_sizing, function(cluster) {
    monthlySavingsCPU = cluster['monthlySavingsCPU'] ? cluster['monthlySavingsCPU'] : 0
    monthlySavingsMem = cluster['monthlySavingsMem'] ? cluster['monthlySavingsMem'] : 0
    savings = monthlySavingsCPU + monthlySavingsMem

    if (savings > param_min_savings) {
      total_savings += savings

      result.push({
        accountID: cluster['accountID'],
        accountName: cluster['accountID'],
        namespace: cluster['namespace'],
        controllerKind: cluster['controllerKind'],
        controllerName: cluster['controllerName'],
        containerName: cluster['containerName'],
        recommendedRequestCPU: cluster['recommendedRequestCPU'],
        recommendedRequestMem: cluster['recommendedRequestMem'],
        latestKnownRequestCPU: cluster['latestKnownRequestCPU'],
        latestKnownRequestMem: cluster['latestKnownRequestMem'],
        monthlySavingsCPU: monthlySavingsCPU,
        monthlySavingsMem: monthlySavingsMem,
        savings: Math.round(savings * 1000) / 1000,
        savingsCurrency: ds_currency['symbol'],
        policy_name: ds_applied_policy['name'],
        total_savings: "",
        message: ""
      })
    }
  })

  if (result.length > 0) {
    result[0]['total_savings'] = [
      ds_currency['symbol'], ' ',
      formatNumber(Math.round(total_savings * 100) / 100, ds_currency['separator'])
    ].join('')

    result[0]['message'] = [
      "Recommendation was produced with the following settings:\n\n",
      "- Minimum Savings Threshold: ", param_min_savings, "\n",
      "- Scope: ", param_scope, "\n",
      "- Lookback Period: ", param_lookback, " Days\n",
      "- CPU Assessment Algorithm: ", param_cpu_algo, "\n",
      "- CPU Percentile: ", param_cpu_q, "%\n",
      "- Target CPU Utilization: ", param_cpu_util, "%\n",
      "- Memory Assessment Algorithm: ", param_mem_algo, "\n",
      "- Memory Percentile: ", param_mem_q, "%\n",
      "- Target Memory Utilization: ", param_mem_util, "%\n\n",
      "The above settings can be modified by editing the applied policy and changing the appropriate parameters."
    ].join('')
  }
EOS
end

###############################################################################
# Policy
###############################################################################

policy "policy_kubecost_request_sizing" do
  validate_each $ds_recommendations do
    summary_template "{{ with index data 0 }}{{ .policy_name }}{{ end }}: {{ len data }} Kubecost Request Rightsizing Recommendations Found"
    detail_template <<-'EOS'
    **Potential Monthly Savings:** {{ with index data 0 }}{{ .total_savings }}{{ end }}

    {{ with index data 0 }}{{ .message }}{{ end }}
    EOS
    check eq(val(item, "accountID"), "")
    escalate $esc_email
    export do
      resource_level true
      field "accountID" do
        label "Cluster ID"
      end
      field "accountName" do
        label "Cluster Name"
      end
      field "namespace" do
        label "Namespace"
      end
      field "controllerKind" do
        label "Controller Kind"
      end
      field "controllerName" do
        label "Controller"
      end
      field "containerName" do
        label "Container"
      end
      field "savings" do
        label "Savings"
        format "center"
      end
      field "latestKnownRequestCPU" do
        label "CPU Request"
        format "center"
      end
      field "recommendedRequestCPU" do
        label "Recommended CPU Request"
        format "center"
      end
      field "latestKnownRequestMem" do
        label "Memory Request"
        format "center"
      end
      field "recommendedRequestMem" do
        label "Recommended Memory Request"
        format "center"
      end
      field "id" do
        label "ID"
        path "accountID"
      end
    end
  end
end

###############################################################################
# Escalations
###############################################################################

escalation "esc_email" do
  automatic true
  label "Send Email"
  description "Send incident email"
  email $param_email
end

name "Kubecost Request Rightsizing Recommendations"
rs_pt_ver 20180301
type "policy"
short_description "Pulls the Request Rightsizing Recommendations from Kubecost and raises and incident. See the [README](https://github.com/flexera-public/policy_templates/tree/master/cost/kubecost/sizing/) and [docs.flexera.com/flexera/EN/Automation](https://docs.flexera.com/flexera/EN/Automation/AutomationGS.htm) to learn more."
long_description ""
severity "low"
category "Cost"
default_frequency "daily"
tenancy "single"
info(
  version: "0.4.0",
  provider: "Kubecost",
  service: "Kubernetes",
  policy_set: "Rightsize Containers",
  recommendation_type: "Usage Reduction"
)

###############################################################################
# Parameters
###############################################################################

parameter "param_email" do
  type "list"
  category "Policy Settings"
  label "Email Addresses"
  description "A list of email addresses to notify."
  default []
end

parameter "param_kubecost_host" do
  type "string"
  category "Policy Settings"
  label "Kubecost Host or IP address"
  description "IP Address of Kubecost LB"
  # No default value, user input required
end

parameter "param_scope" do
  type "string"
  category "Policy Settings"
  label "Scope"
  description "Choose between requesting the recommendations per cluster or overall"
  allowed_values "overall", "per cluster"
  default "overall"
end

parameter "param_minimum_savings_threshold" do
  type "number"
  category "Policy Settings"
  label "Monthly Savings Threshold"
  description "Specify the minimum estimated monthly savings that should result in a recommendation"
  min_value 0
  default 0
end

parameter "param_window" do
  type "string"
  category "Policy Settings"
  label "Range to analyze"
  description "Accepts duration in number of days, hours or minutes e.g., 3d, 30m, 6h"
  default "3d"
end

parameter "param_cpu_algo" do
  type "string"
  category "Policy Settings"
  label "The algorithm for CPU"
  description "Defines whether max or a certain quantile should be used to compute CPU request recommendation"
  allowed_values "max", "quantile"
  default "max"
end

parameter "param_cpu_q" do
  type "number"
  category "Policy Settings"
  label "CPU percentile"
  description "The desired percentile to base CPU request recommendations on"
  min_value 1
  max_value 100
  default 75
end

parameter "param_cpu_util" do
  type "number"
  category "Policy Settings"
  label "Target CPU Utilization (%)"
  description "Target CPU utilization in percent"
  min_value 1
  max_value 100
  default 80
end

parameter "param_mem_algo" do
  type "string"
  category "Policy Settings"
  label "The algorithm for Memory"
  description "Defines whether max or a certain quantile should be used to compute Memory request recommendation"
  allowed_values "max", "quantile"
  default "max"
end

parameter "param_mem_q" do
  type "number"
  category "Policy Settings"
  label "Memory percentile"
  description "The desired percentile to base Memory recommendations on"
  min_value 1
  max_value 100
  default 75
end

parameter "param_mem_util" do
  type "number"
  category "Policy Settings"
  label "Target Memory Utilization (%)"
  description "Target memory utilization in percent"
  min_value 1
  max_value 100
  default 90
end

###############################################################################
# Authentication
###############################################################################

credentials "auth_flexera" do
  schemes "oauth2"
  label "Flexera"
  description "Select Flexera One OAuth2 credentials"
  tags "provider=flexera"
end

###############################################################################
# Datasources & Scripts
###############################################################################

# Get applied policy metadata for use later
datasource "ds_applied_policy" do
  request do
    auth $auth_flexera
    host rs_governance_host
    path join(["/api/governance/projects/", rs_project_id, "/applied_policies/", policy_id])
    header "Api-Version", "1.0"
  end
end

datasource "ds_clusters" do
  request do
    host $param_kubecost_host
    path "/model/clusterInfoMap"
  end
  result do
    encoding "json"
    collect jmes_path(response, "data | values(@)") do
      field "id", jmes_path(col_item, "id")
    end
  end
end

datasource "ds_sizing_recommendation_request_list" do
  run_script $js_sizing_recommendation_request_list, $ds_clusters, $param_scope, $param_cpu_algo, $param_cpu_q, $param_mem_algo, $param_mem_q, $param_window, $param_cpu_util, $param_mem_util
end

script "js_sizing_recommendation_request_list", type: "javascript" do
  parameters "ds_clusters", "param_scope", "param_cpu_algo", "param_cpu_q", "param_mem_algo", "param_mem_q", "param_window", "param_cpu_util", "param_mem_util"
  result "result"
  code <<-EOS
  cpu_util = (param_cpu_util / 100).toString()
  mem_util = (param_mem_util / 100).toString()

  query_params = {
    "algorithmCPU": param_cpu_algo,
    "qCPU": param_cpu_q.toString(),
    "algorithmRAM": param_mem_algo,
    "qRAM": param_mem_q.toString(),
    "window": param_window,
    "targetCPUUtilization": cpu_util,
    "targetRAMUtilization": mem_util
  }

  result = [ query_params ]

  if (param_scope == "per cluster") {
    result = _.map(ds_clusters, function(cluster) {
      cluster_query_params = query_params
      cluster_query_params['filter'] = 'cluster:"' + cluster['id'] + '"'
      return cluster_query_params
    })
  }
EOS
end

datasource "ds_request_sizing" do
  iterate $ds_sizing_recommendation_request_list
  request do
    run_script $js_request_sizing, iter_item, $param_kubecost_host
  end
  result do
    encoding "json"
    collect jmes_path(response, "Recommendations||[*]") do
      field "accountID", jmes_path(col_item, "clusterID")
      field "namespace", jmes_path(col_item, "namespace")
      field "controllerKind", jmes_path(col_item, "controllerKind")
      field "controllerName", jmes_path(col_item, "controllerName")
      field "containerName", jmes_path(col_item, "containerName")
      field "recommendedRequestCPU", jmes_path(col_item, "recommendedRequest.cpu")
      field "recommendedRequestMem", jmes_path(col_item, "recommendedRequest.memory")
      field "latestKnownRequestCPU", jmes_path(col_item, "latestKnownRequest.cpu")
      field "latestKnownRequestMem", jmes_path(col_item, "latestKnownRequest.memory")
      field "monthlySavingsCPU", jmes_path(col_item, "monthlySavings.cpu")
      field "monthlySavingsMem", jmes_path(col_item, "monthlySavings.memory")
    end
  end
end

script "js_request_sizing", type: "javascript" do
  parameters "query_params", "param_kubecost_host"
  result "request"
  code <<-EOS
  var request = {
    "host": param_kubecost_host,
    "path": "/model/savings/requestSizingV2",
    "query_params": query_params
  }
EOS
end

datasource "ds_kubecost_currency_code" do
  request do
    host $param_kubecost_host
    path "/model/getConfigs"
  end
  result do
    encoding "json"
    field "code", jmes_path(response, "data.currencyCode")
  end
end

datasource "ds_currency_reference" do
  request do
    host "raw.githubusercontent.com"
    path "/flexera-public/policy_templates/master/data/currency/currency_reference.json"
    header "User-Agent", "RS Policies"
  end
end

datasource "ds_currency" do
  run_script $js_currency, $ds_currency_reference, $ds_kubecost_currency_code
end

script "js_currency", type:"javascript" do
  parameters "ds_currency_reference", "ds_kubecost_currency_code"
  result "result"
  code <<-EOS
  code = ds_kubecost_currency_code['code'].toUpperCase().trim()
  symbol = "$"
  separator = ","

  if (code != undefined) {
    if (ds_currency_reference[code] != undefined) {
      symbol = ds_currency_reference[code]['symbol']

      if (ds_currency_reference[code]['t_separator'] != undefined) {
        separator = ds_currency_reference[code]['t_separator']
      } else {
        separator = ""
      }
    }
  }

  result = { code: code, symbol: symbol, separator: separator }
EOS
end

datasource "ds_recommendations" do
  run_script $js_recommendations, $ds_request_sizing, $ds_currency, $ds_applied_policy, $param_minimum_savings_threshold
end

script "js_recommendations", type: "javascript" do
  parameters "ds_request_sizing", "ds_currency", "ds_applied_policy", "param_minimum_savings_threshold"
  result "result"
  code <<-'EOS'
  // Function for formatting currency numbers later
  function formatNumber(number, separator) {
    var numString = number.toString()
    var values = numString.split(".")
    var formatted_number = ''

    while (values[0].length > 3) {
      var chunk = values[0].substr(-3)
      values[0] = values[0].substr(0, values[0].length - 3)
      formatted_number = separator + chunk + formatted_number
    }

    if (values[0].length > 0) { formatted_number = values[0] + formatted_number }

    if (values[1] == undefined) { return formatted_number }

    return formatted_number + "." + values[1]
  }

  result = []
  total_savings = 0.0

  _.each(ds_request_sizing, function(cluster) {
    monthlySavingsCPU = cluster['monthlySavingsCPU'] ? cluster['monthlySavingsCPU'] : 0
    monthlySavingsMem = cluster['monthlySavingsMem'] ? cluster['monthlySavingsMem'] : 0
    savings = monthlySavingsCPU + monthlySavingsMem

    if (savings > param_minimum_savings_threshold) {
      total_savings += savings

      result.push({
        accountID: cluster['accountID'],
        accountName: cluster['accountID'],
        namespace: cluster['namespace'],
        controllerKind: cluster['controllerKind'],
        controllerName: cluster['controllerName'],
        containerName: cluster['containerName'],
        recommendedRequestCPU: cluster['recommendedRequestCPU'],
        recommendedRequestMem: cluster['recommendedRequestMem'],
        latestKnownRequestCPU: cluster['latestKnownRequestCPU'],
        latestKnownRequestMem: cluster['latestKnownRequestMem'],
        monthlySavingsCPU: monthlySavingsCPU,
        monthlySavingsMem: monthlySavingsMem,
        savings: Math.round(savings * 1000) / 1000,
        policy_name: ds_applied_policy['name'],
        total_savings: ""
      })
    }
  })

  if (result.length > 0) {
    result[0]['total_savings'] = [
      ds_currency['symbol'], ' ',
      formatNumber(Math.round(total_savings * 100) / 100, ds_currency['separator'])
    ].join('')
  }
EOS
end

###############################################################################
# Policy
###############################################################################

policy "policy_kubecost_request_sizing" do
  validate_each $ds_recommendations do
    summary_template "{{ with index data 0 }}{{ .policy_name }}{{ end }}: {{ len data }} Kubecost Request Rightsizing Recommendations Found"
    detail_template "**Potential Monthly Savings:** {{ with index data 0 }}{{ .total_savings }}{{ end }}"
    escalate $esc_email
    check eq(val(item, "namespace"), "")
    export do
      resource_level true
      field "accountID" do
        label "Cluster ID"
      end
      field "accountName" do
        label "Cluster Name"
      end
      field "namespace" do
        label "Namespace"
      end
      field "controllerKind" do
        label "Controller Kind"
      end
      field "controllerName" do
        label "Controller"
      end
      field "containerName" do
        label "Container"
      end
      field "savings" do
        label "Savings"
        format "center"
      end
      field "latestKnownRequestCPU" do
        label "CPU Request"
        format "center"
      end
      field "recommendedRequestCPU" do
        label "Recommended CPU Request"
        format "center"
      end
      field "latestKnownRequestMem" do
        label "Memory Request"
        format "center"
      end
      field "recommendedRequestMem" do
        label "Recommended Memory Request"
        format "center"
      end
      field "id" do
        label "ID"
        path "accountID"
      end
    end
  end
end

###############################################################################
# Escalations
###############################################################################

escalation "esc_email" do
  automatic true
  label "Send Email"
  description "Send incident email"
  email $param_email
end

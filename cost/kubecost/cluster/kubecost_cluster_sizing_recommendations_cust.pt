name "Kubecost Cluster Sizing Recommendations cust"
rs_pt_ver 20180301
type "policy"
short_description "Pulls the Cluster Sizing Recommendations from Kubecost and raises an incident. See the [README](https://github.com/rightscale/policy_templates/tree/master/cost/kubecost/cluster/) and [docs.rightscale.com/policies](http://docs.rightscale.com/policies/) to learn more."
long_description ""
severity "low"
category "Cost"
default_frequency "daily"
tenancy "single"
info(
  version: "0.1",
  provider: "Kubecost",
  service: "Kubernetes",
  policy_set: "Rightsize Clusters",
  recommendation_type: "Usage Reduction"
)

###############################################################################
# User inputs
###############################################################################

parameter "param_email" do
  label "Email addresses"
  description "Email addresses of the recipients you wish to notify"
  type "list"
end

parameter "param_kubecost_host" do
  type "string"
  label "Kubecost Host"
  description "Kubecost Host or IP Address of Kubecost LB"
end

parameter "param_min_nodes" do
  type "number"
  label "Minimum node count"
  description "Minimum allowed node count in the cluster"
  default 2
end

parameter "param_historical_days" do
  type "number"
  label "Number of days to analyze"
  description "Historical range to analyze"
  min_value 2
  max_value 60
  default 7
end

parameter "param_target_util" do
  type "number"
  label "Target Utilization (%)"
  description "Desirable target utilization in percent"
  default 80
end

parameter "param_recommendation_type" do
  type "string"
  label "Recommendation Type"
  description "Type of existing recommendation in the cluster"
  allowed_values ["Single", "Multi", "Optimal"]
end

credentials "auth_kc" do
  schemes "basic"
  label "Kubecost Credential"
  description "Select the kubecost credential from the list"
  tags "provider=kubecost"
end

###############################################################################
# Datasource
###############################################################################

datasource "ds_cluster_sizing" do
  request do
    run_script $js_cluster_sizing, $param_kubecost_host, $param_min_nodes, $param_historical_days, $param_target_util
  end
  result do
    encoding "json"
    field "clusterId", jmes_path(response, "data.parameters.clusterId")
    field "clusterName", jmes_path(response, "data.parameters.clusterName")
    field "totalNodeCount", jmes_path(response, "data.currentClusterInfo.totalCounts.totalNodeCount")
    field "totalRAMGB", jmes_path(response, "data.currentClusterInfo.totalCounts.totalRAMGB")
    field "totalVCPUs", jmes_path(response, "data.currentClusterInfo.totalCounts.totalVCPUs")
    field "monthlyRate", jmes_path(response, "data.currentClusterInfo.monthlyRate")
    field "recommendations", jmes_path(response, "data.recommendations")
  end
end

script "js_cluster_sizing", type: "javascript" do
  parameters "kubecost_host", "min_nodes", "historical_days", "target_util"
  result "request"
  code <<-EOS
    var request = {
      "verb": "GET",
      "scheme": "http",
      "auth": "auth_kc",
      "host": kubecost_host,
      "path": "/model/savings/clusterSizing",
      "query_params": {
        "minNodeCount": min_nodes.toString(),
        "window": historical_days + "d",
        "targetUtilization": (target_util/100).toString()
      }
    }
  EOS
end

datasource "ds_cluster_array" do
  run_script $js_cluster_array, $ds_cluster_sizing, $param_recommendation_type
end

script "js_cluster_array", type: "javascript" do
  parameters "ds_cluster_sizing", "recommendation_type"
  result "results"
  code <<-EOF
    var clusterId = ds_cluster_sizing.clusterId
    var clusterName = ds_cluster_sizing.clusterName
    var totalNodeCount = ds_cluster_sizing.totalNodeCount
    var totalRAMGB = ds_cluster_sizing.totalRAMGB
    var totalVCPUs = ds_cluster_sizing.totalVCPUs
    var monthlyRate = ds_cluster_sizing.monthlyRate
    var results = []
    var optimalValue = 0
    var tempResult
    _.forEach(ds_cluster_sizing.recommendations, function(e, k) {
      e.rec_type = k;
      e.clusterId = clusterId;
      e.clusterName = clusterName;
      e.totalNodeCount = totalNodeCount
      e.totalRAMGB = totalRAMGB
      e.totalVCPUs = totalVCPUs
      e.monthlyRate = monthlyRate
      e.strPools = JSON.stringify(e.pools);
      if (recommendation_type.toLowerCase() == "optimal") {
        if (e.monthlySavings > optimalValue) {
          optimalValue = e.monthlySavings
          tempResult = e
        }
      } else {
        if (k == recommendation_type.toLowerCase()) {
          results.push(e)
        }
      }
    })
    if (recommendation_type.toLowerCase() == "optimal") {
      results.push(tempResult)
    }
  EOF
end

###############################################################################
# Policy
###############################################################################

policy "policy_kubecost_cluster" do
  validate_each $ds_cluster_array do
    summary_template "Kubecost Cluster Sizing Report"
    escalate $report_volumes
    check eq(0,1)
    export do
      field "clusterId" do
        label "Cluster ID"
      end
      field "clusterName" do
        label "Cluster Name"
      end
      field "rec_type" do
        label "Recommendation Type"
      end
      field "totalNodeCount" do
        label "Current Node Count"
      end
      field "totalRAMGB" do
        label "Current Total RAM (GB)"
      end
      field "totalVCPUs" do
        label "Current Total vCPUs"
      end
      field "monthlyRate" do
        label "Current Monthly Cost"
      end
      field "totalMonthlyCost" do
        label "Recommended Monthly Cost"
      end
      field "monthlySavings" do
        label "Monthly Savings"
      end
      field "nodeCount" do
        label "Node Count"
      end
      field "strPools" do
        label "Pools"
      end
    end
  end
end

###############################################################################
# Escalations
###############################################################################

escalation "report_volumes" do
  automatic true
  label "Send Email"
  description "Send incident email"
  email $param_email
end
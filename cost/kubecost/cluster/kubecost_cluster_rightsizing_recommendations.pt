name "Kubecost Cluster Rightsizing Recommendations"
rs_pt_ver 20180301
type "policy"
short_description "The policy retrieves Kubecost recommendations for rightsizing of Kubernetes clusters and raises an incident. See the [README](https://github.com/flexera-public/policy_templates/tree/master/cost/kubecost/cluster) and [docs.flexera.com/flexera/EN/Automation](https://docs.flexera.com/flexera/EN/Automation/AutomationGS.htm) to learn more."
long_description ""
category "Cost"
severity "low"
default_frequency "daily"
info(
  version: "0.3.0",
  provider: "Kubecost",
  service: "Kubernetes",
  policy_set: "Rightsize Clusters",
  recommendation_type: "Usage Reduction"
)

###############################################################################
# Parameters
###############################################################################

parameter "param_email" do
  type "list"
  category "Policy Settings"
  label "Email Addresses"
  description "A list of email addresses to notify."
  default []
end

parameter "param_kubecost_host" do
  type "string"
  category "Policy Settings"
  label "Kubecost Host"
  description "Kubecost Host or IP Address of Kubecost LB"
  # No default value, user input required
end

parameter "param_min_nodes" do
  type "number"
  category "Policy Settings"
  label "Minimum node count"
  description "Minimum allowed node count in the cluster"
  min_value 0
  default 2
end

parameter "param_historical_days" do
  type "number"
  category "Policy Settings"
  label "Number of days to analyze"
  description "Historical range to analyze"
  min_value 2
  max_value 60
  default 7
end

parameter "param_target_util" do
  type "number"
  category "Policy Settings"
  label "Target Utilization (%)"
  description "Desirable target utilization in percent"
  default 80
end

parameter "param_recommendation_strategy" do
  type "string"
  category "Policy Settings"
  label "Recommendation Strategy"
  description "Recommendation strategy to apply"
  allowed_values "Single", "Multi", "Optimal"
  default "Optimal"
end

###############################################################################
# Authentication
###############################################################################

credentials "auth_flexera" do
  schemes "oauth2"
  label "Flexera"
  description "Select Flexera One OAuth2 credentials"
  tags "provider=flexera"
end

###############################################################################
# Datasources & Scripts
###############################################################################

# Get applied policy metadata for use later
datasource "ds_applied_policy" do
  request do
    auth $auth_flexera
    host rs_governance_host
    path join(["/api/governance/projects/", rs_project_id, "/applied_policies/", policy_id])
    header "Api-Version", "1.0"
  end
end

datasource "ds_kubecost_currency_code" do
  request do
    host $param_kubecost_host
    path "/model/getConfigs"
  end
  result do
    encoding "json"
    field "code", jmes_path(response, "data.currencyCode")
  end
end

datasource "ds_currency_reference" do
  request do
    host "raw.githubusercontent.com"
    path "/flexera-public/policy_templates/master/data/currency/currency_reference.json"
    header "User-Agent", "RS Policies"
  end
end

datasource "ds_currency" do
  run_script $js_currency, $ds_currency_reference, $ds_kubecost_currency_code
end

script "js_currency", type:"javascript" do
  parameters "ds_currency_reference", "ds_kubecost_currency_code"
  result "result"
  code <<-EOS
  code = ds_kubecost_currency_code['code'].toUpperCase().trim()
  symbol = "$"
  separator = ","

  if (code != undefined) {
    if (ds_currency_reference[code] != undefined) {
      symbol = ds_currency_reference[code]['symbol']

      if (ds_currency_reference[code]['t_separator'] != undefined) {
        separator = ds_currency_reference[code]['t_separator']
      } else {
        separator = ""
      }
    }
  }

  result = { code: code, symbol: symbol, separator: separator }
EOS
end

datasource "ds_target_util" do
  run_script $js_target_util, $param_target_util
end

script "js_target_util", type:"javascript" do
  parameters "param_target_util"
  result "result"
  code "result = { value: (param_target_util / 100).toString() }"
end

datasource "ds_cluster_sizing" do
  request do
    host $param_kubecost_host
    path "/model/savings/clusterSizing"
    query "minNodeCount", $param_min_nodes
    query "window", join([$param_historical_days, "d"])
    query "targetUtilization", val($ds_target_util, "value")
    header "User-Agent", "RS Policies"
  end
  result do
    encoding "json"
    field "accountID", jmes_path(response, "data.parameters.clusterId")
    field "accountName", jmes_path(response, "data.parameters.clusterName")
    field "totalNodeCount", jmes_path(response, "data.currentClusterInfo.totalCounts.totalNodeCount")
    field "totalRAMGB", jmes_path(response, "data.currentClusterInfo.totalCounts.totalRAMGB")
    field "totalVCPUs", jmes_path(response, "data.currentClusterInfo.totalCounts.totalVCPUs")
    field "monthlyRate", jmes_path(response, "data.currentClusterInfo.monthlyRate")
    field "recommendations", jmes_path(response, "data.recommendations")
  end
end

datasource "ds_recommendations" do
  run_script $js_recommendations, $ds_cluster_sizing, $ds_currency, $ds_applied_policy, $param_recommendation_strategy
end

script "js_recommendations", type: "javascript" do
  parameters "ds_cluster_sizing", "ds_currency", "ds_applied_policy", "param_recommendation_strategy"
  result "result"
  code <<-'EOS'
  accountID = ds_cluster_sizing['accountID']
  accountName = ds_cluster_sizing['accountName']
  totalNodeCount = ds_cluster_sizing['totalNodeCount']
  totalRAMGB = ds_cluster_sizing['totalRAMGB']
  totalVCPUs = ds_cluster_sizing['totalVCPUs']
  monthlyRate = ds_cluster_sizing['monthlyRate']

  result = []
  optimalValue = 0
  tempResult = null

  _.each(ds_cluster_sizing['recommendations'], function(e, rec_strategy) {
    e.rec_strategy = k;
    e.accountID = accountID;
    e.accountName = accountName;
    if (e.accountName == "" || e.accountName.length === 0) {
      e.accountName = accountID;
    }
    e.currencyCode = ds_get_currency.currencyCode
    if (e.currencyCode == "" || e.currencyCode.length === 0) {
      e.currencyCode = "USD";
    }
    e.totalNodeCount = totalNodeCount
    e.totalRAMGB = totalRAMGB
    e.totalVCPUs = totalVCPUs
    e.monthlyRate = monthlyRate
    e.strPools = JSON.stringify(e.pools);
    if (param_recommendation_strategy.toLowerCase() == "optimal") {
      if (e.monthlySavings > optimalValue) {
        optimalValue = e.monthlySavings
        e.monthlySavings = Math.round(e.monthlySavings * 100) / 100
        e.monthlyRate = Math.round(e.monthlyRate * 100) / 100
        e.totalMonthlyCost = Math.round(e.totalMonthlyCost * 100) / 100
        tempResult = e
      }
    } else {
      if (k == param_recommendation_strategy.toLowerCase()) {
        e.monthlySavings = Math.round(e.monthlySavings * 100) / 100
        e.monthlyRate = Math.round(e.monthlyRate * 100) / 100
        e.totalMonthlyCost = Math.round(e.totalMonthlyCost * 100) / 100
        result.push(e)
      }
    }
  })

  if (param_recommendation_strategy.toLowerCase() == "optimal") {
    result.push(tempResult)
  }

  if (result.length > 0) { result[0]['policy_name'] = ds_applied_policy['name'] }
EOS
end

###############################################################################
# Policy
###############################################################################

policy "policy_kubecost_cluster" do
  validate_each $ds_recommendations do
    summary_template "{{ with index data 0 }}{{ .policy_name }}{{ end }}: {{ len data }} Kubecost Cluster Rightsizing Recommendations Found"
    check eq(val(item, "accountID"), "")
    escalate $esc_email
    export do
      resource_level true
      field "accountID" do
        label "Cluster ID"
      end
      field "accountName" do
        label "Cluster Name"
      end
      field "rec_strategy" do
        label "Recommendation Strategy"
      end
      field "totalNodeCount" do
        label "Current Node Count"
      end
      field "totalRAMGB" do
        label "Current Total RAM (GB)"
      end
      field "totalVCPUs" do
        label "Current Total vCPUs"
      end
      field "currencyCode" do
        label "Currency"
      end
      field "monthlyRate" do
        label "Current Monthly Cost"
      end
      field "totalMonthlyCost" do
        label "Recommended Monthly Cost"
      end
      field "savings" do
        label "Savings"
        path "monthlySavings"
      end
      field "nodeCount" do
        label "Recommended Node Count"
      end
      field "strPools" do
        label "Recommended Pools"
      end
      field "id" do
        label "ID"
        path "accountID"
      end
    end
  end
end

###############################################################################
# Escalations
###############################################################################

escalation "esc_email" do
  automatic true
  label "Send Email"
  description "Send incident email"
  email $param_email
end

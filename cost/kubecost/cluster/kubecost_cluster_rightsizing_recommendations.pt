name "Kubecost Cluster Rightsizing Recommendation"
rs_pt_ver 20180301
type "policy"
short_description "Reports Kubecost recommendation for rightsizing of Kubernetes cluster. See the [README](https://github.com/flexera-public/policy_templates/tree/master/cost/kubecost/cluster) and [docs.flexera.com/flexera/EN/Automation](https://docs.flexera.com/flexera/EN/Automation/AutomationGS.htm) to learn more."
long_description ""
category "Cost"
severity "low"
default_frequency "weekly"
info(
  version: "0.3.2",
  provider: "Kubecost",
  service: "Kubernetes",
  policy_set: "Rightsize Clusters",
  recommendation_type: "Usage Reduction",
  hide_skip_approvals: "true"
)

###############################################################################
# Parameters
###############################################################################

parameter "param_email" do
  type "list"
  category "Policy Settings"
  label "Email Addresses"
  description "A list of email addresses to notify."
  default []
end

parameter "param_kubecost_host" do
  type "string"
  category "Policy Settings"
  label "Kubecost Host"
  description "Kubecost Hostname or IP Address of Kubecost Load Balancer to make queries against."
  min_length 1
  # No default value, user input required
end

parameter "param_allow_shared_core" do
  type "string"
  category "Allow Shared Core"
  label "Shared core"
  allowed_values "true", "false"
  description "Enable or disable the use of shared cores in calculating costs and resource savings in Kubecost"
end

parameter "param_include_overhead" do
  type "string"
  category "Include overhead"
  label "Include overhead"
  allowed_values "true", "false"
  description "By enabling this option, Kubecost takes into account not only the resources used by applications and containers, but also those needed to operate and maintain the Kubernetes environment"
end


parameter "param_min_nodes" do
  type "number"
  category "Policy Settings"
  label "Minimum Node Count"
  description "Minimum required node count for recommendations."
  min_value 0
  default 2
end

parameter "param_lookback" do
  type "number"
  category "Policy Settings"
  label "Lookback Period (Days)"
  description "Number of historical days of usage to analyze when generating recommendations."
  min_value 2
  max_value 60
  default 7
end

parameter "param_target_util" do
  type "number"
  category "Policy Settings"
  label "Target Utilization (%)"
  description "Utilization target to use when generating recommendations."
  default 80
end

parameter "param_strategy" do
  type "string"
  category "Policy Settings"
  label "Recommendation Strategy"
  description "Recommendation strategy to use. 'Optimal' will automatically select whichever strategy has the highest potential savings."
  allowed_values "Single", "Multi", "Optimal"
  default "Optimal"
end

###############################################################################
# Authentication
###############################################################################

credentials "auth_flexera" do
  schemes "oauth2"
  label "Flexera"
  description "Select Flexera One OAuth2 credentials"
  tags "provider=flexera"
end

###############################################################################
# Datasources & Scripts
###############################################################################

# Get applied policy metadata for use later
datasource "ds_applied_policy" do
  request do
    auth $auth_flexera
    host rs_governance_host
    path join(["/api/governance/projects/", rs_project_id, "/applied_policies/", policy_id])
    header "Api-Version", "1.0"
  end
end

datasource "ds_kubecost_currency_code" do
  request do
    host $param_kubecost_host
    path "/model/getConfigs"
  end
  result do
    encoding "json"
    field "code", jmes_path(response, "data.currencyCode")
  end
end

datasource "ds_currency_code" do
  request do
    auth $auth_flexera
    host rs_optima_host
    path join(["/bill-analysis/orgs/", rs_org_id, "/settings/currency_code"])
    header "Api-Version", "0.1"
    header "User-Agent", "RS Policies"
    ignore_status [403]
  end
  result do
    encoding "json"
    field "id", jmes_path(response, "id")
    field "value", jmes_path(response, "value")
  end
end

datasource "ds_currency_reference" do
  request do
    host "raw.githubusercontent.com"
    path "/flexera-public/policy_templates/master/data/currency/currency_reference.json"
    header "User-Agent", "RS Policies"
  end
end

datasource "ds_currency" do
  run_script $js_currency, $ds_currency_reference, $ds_kubecost_currency_code, $ds_currency_code
end

script "js_currency", type:"javascript" do
  parameters "ds_currency_reference", "ds_kubecost_currency_code", "ds_currency_code"
  result "result"
  code <<-EOS
  code = ds_kubecost_currency_code['code'].toUpperCase().trim()
  if (code == '') { code = ds_currency_code['value'] }
  if (typeof(code) != 'string' || code == '') { code = 'USD' }
  if (ds_currency_reference[code] == undefined) { code = 'USD' }
  result = {
    code: code,
    symbol: ds_currency_reference[code]['symbol'],
    separator: ds_currency_reference[code]['t_separator'] ? ds_currency_reference[code]['t_separator'] : ""
  }
EOS
end

datasource "ds_target_util" do
  run_script $js_target_util, $param_target_util
end

script "js_target_util", type:"javascript" do
  parameters "param_target_util"
  result "result"
  code "result = { value: (param_target_util / 100).toString() }"
end

datasource "ds_clusters" do
  request do
    host $param_kubecost_host
    path "/model/savings/clusterSizingETL"
    query "minNodeCount", $param_min_nodes
    query "window", join([$param_lookback, "d"])
    query "targetUtilization", val($ds_target_util, "value")
    query "allowSharedCore", $param_allow_shared_core
    query "includeOverhead", $param_include_overhead
    header "User-Agent", "RS Policies"
  end
  result do
    encoding "json"
    field "accountID", jmes_path(response, "data")
  end
end

script "js_get_cluster_list", type: "javascript" do
  parameters "ds_clusters"
  result "result"
  code <<-EOS
  result = []
  _.each(ds_clusters.accountID, function(value, key){
    result.push({
      "clusterId": (key)
    })
  })
  EOS
end

datasource "ds_cluster_sizing" do
  run_script $js_cluster_parse, $ds_clusters
end

script "js_cluster_parse", type: "javascript" do
  parameters "data"
  result "result"
  code <<-'EOS'
  result = []
  for (var accountKey in data.accountID) {
    var accountData = data.accountID[accountKey];
    result.push({
      accountID: accountKey,
      clusterName: accountKey,
      totalNodeCount: accountData.currentClusterInfo.totalCounts.totalNodeCount,
      totalRAMGB: accountData.currentClusterInfo.totalCounts.totalRAMGB,
      totalVCPUs: accountData.currentClusterInfo.totalCounts.totalVCPUs,
      monthlyRate: accountData.currentClusterInfo.monthlyRate,
      recommendations: accountData.recommendations
    });
  }
  EOS
end

datasource "ds_recommendations" do
  run_script $js_recommendations, $ds_cluster_sizing, $ds_currency, $ds_applied_policy, $param_strategy, $param_min_nodes, $param_lookback, $param_target_util
end

script "js_recommendations", type: "javascript" do
  parameters "ds_cluster_sizing", "ds_currency", "ds_applied_policy", "param_strategy", "param_min_nodes", "param_lookback", "param_target_util"
  result "result"
  code <<-'EOS'
  result = []
  // Function for formatting currency numbers later
  function formatNumber(number, separator) {
    formatted_number = "0"

    if (number) {
      formatted_number = (Math.round(number * 100) / 100).toString().split(".")[0]

      if (separator) {
        withSeparator = ""

        for (var i = 0; i < formatted_number.length; i++) {
          if (i > 0 && (formatted_number.length - i) % 3 == 0) { withSeparator += separator }
          withSeparator += formatted_number[i]
        }

        formatted_number = withSeparator
      }

      decimal = (Math.round(number * 100) / 100).toString().split(".")[1]
      if (decimal) { formatted_number += "." + decimal }
    }

    return formatted_number
  }
  selected_strategy = param_strategy

  _.each(ds_cluster_sizing, function(crs){
    if (selected_strategy == "Optimal") {
      selected_strategy = "Single"

      // Note: Savings is presented as a negative value. Hence why we select the lowest, not the highest.

      if (crs['recommendations']['multi']['monthlySavings'] < crs['recommendations']['single']['monthlySavings']) {
        selected_strategy = "Multi"
      }
    }

    recommendation = crs['recommendations'][selected_strategy.toLowerCase()]

    regions = []
    _.each(recommendation['pools'], function(pool) { regions.push(pool['type']['region']) })
    region = _.uniq(_.compact(regions)).join(', ')

    accountID = crs['accountID']
    accountName = crs['accountName']
    if (typeof(accountName) != 'string' || accountName == '') { accountName = accountID }

    message_strategy = selected_strategy
    if (param_strategy == "Optimal") { message_strategy += " (Optimal)" }

    message = [
      "Recommendation was produced with the following settings:\n\n",
      "- Strategy: ", message_strategy, "\n",
      "- Minimum Nodes: ", param_min_nodes, "\n",
      "- Lookback Period: ", param_lookback, " Days\n",
      "- Target Utilization: ", param_target_util, "%\n\n",
      "The above settings can be modified by editing the applied policy and changing the appropriate parameters."
    ].join('')
    savings = (Math.round(recommendation['monthlySavings'] * 100) / 100 ).toFixed(2)

    recommendationDetails = [
      "Modify settings for cluster ", accountID,
      " so that node count is set to ", recommendation['nodeCount'],
      " and pools are configured to match the Recommended Pools field."
    ].join('')

    if (recommendation['monthlySavings'] > 0){
      result.push({
        accountID: accountID,
        accountName: accountName,
        strategy: selected_strategy,
        totalNodeCount: crs['totalNodeCount'],
        totalRAMGB: crs['totalRAMGB'],
        totalVCPUs: crs['totalVCPUs'],
        monthlyRate: Math.round(crs['monthlyRate'] * 1000) / 1000,
        totalMonthlyCost: Math.round(crs['totalMonthlyCost'] * 1000) / 1000,
        // Note: Savings is presented as a negative value. Hence why we multiply by a negative number to invert it
        savings: Math.round(crs['monthlySavings'] * -1000) / 1000,
        savingsCurrency: ds_currency['symbol'],
        nodeCount: recommendation['nodeCount'],
        pools: JSON.stringify(recommendation['pools']),
        recommendationDetails: recommendationDetails,
        region: region,
        service: "Kubernetes",
        min_nodes: param_min_nodes,
        lookback: param_lookback,
        target_util: param_target_util,
        message: message,
        policy_name: ds_applied_policy['name'],
        message_savings: [
          ds_currency['symbol'], ' ',
          formatNumber(Math.round(recommendation['monthlySavings'] * -1000) / 1000, ds_currency['separator'])
        ].join('')
      })
    }
  })
  EOS
end

###############################################################################
# Policy
###############################################################################

policy "pol_kubecost_recommendations" do
  validate_each $ds_recommendations do
    summary_template "{{ with index data 0 }}{{ .policy_name }}{{ end }}"
    detail_template <<-'EOS'
    **Potential Monthly Savings:** {{ with index data 0 }}{{ .message_savings }}{{ end }}

    {{ with index data 0 }}{{ .message }}{{ end }}
    EOS
    check eq(val(item, "accountID"), "")
    escalate $esc_email
    export do
      resource_level true
      field "accountID" do
        label "Cluster ID"
      end
      field "accountName" do
        label "Cluster Name"
      end
      field "strategy" do
        label "Recommendation Strategy"
      end
      field "totalNodeCount" do
        label "Current Node Count"
      end
      field "totalRAMGB" do
        label "Current Total RAM (GB)"
      end
      field "totalVCPUs" do
        label "Current Total vCPUs"
      end
      field "monthlyRate" do
        label "Current Monthly Cost"
      end
      field "totalMonthlyCost" do
        label "Recommended Monthly Cost"
      end
      field "savings" do
        label "Estimated Monthly Savings"
      end
      field "savingsCurrency" do
        label "Savings Currency"
      end
      field "nodeCount" do
        label "Recommended Node Count"
      end
      field "pools" do
        label "Recommended Pools"
      end
      field "recommendationDetails" do
        label "Recommendation"
      end
      field "region" do
        label "Region"
      end
      field "service" do
        label "Service"
      end
      field "min_nodes" do
        label "Minimum Nodes"
      end
      field "lookback" do
        label "Lookback Period (Days)"
      end
      field "target_util" do
        label "Target Utilization (%)"
      end
      field "id" do
        label "ID"
        path "accountID"
      end
      field "resourceID" do
        label "Resource ID"
        path "accountID"
      end
      field "resourceName" do
        label "Resource Name"
        path "accountID"
      end
    end
  end
end

###############################################################################
# Escalations
###############################################################################

escalation "esc_email" do
  automatic true
  label "Send Email"
  description "Send incident email"
  email $param_email
end

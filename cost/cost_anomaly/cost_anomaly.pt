name "Cost Anomalies"
rs_pt_ver 20180301
type "policy"
short_description " . See the [README](https://github.com/rightscale/policy_templates/tree/master/cost/cost_anomaly/) and [docs.rightscale.com/policies](http://docs.rightscale.com/policies/) to learn more."
long_description "Version: 1.0"
severity "high"
category "Cost"

parameter "param_scope" do 
  label "Scope"
  type "string"
  allowed_values "Organization","Billing Center"
  default "Organization"
end

parameter "param_bc_name" do 
  label "Billing Center Name"
  description "(Optional) Provide a value if the Budget Scope is 'Billing Center'"
  type "string"
  default "supply_a_value_for_billing_center_scoped_budgets"
end 

#parameter "param_dimension" do 
#  label "Dimension"
#  type "string"
#  allowed_values "service","category","vendor","region"
#  default "service"
#end 

parameter "param_threshold" do 
  label "Anomaly Threshold"
  type "number"
  default 80
end 

#parameter "param_cost_amortization_blending" do
#  label "Amoritzation & Blending Option"
#  type "string"
#  allowed_values "amortized_unblended","amortized_blended","nonamortized_unblended","nonamortized_blended"
#  default "nonamortized_unblended"
#end

parameter "param_email" do
  label "Email addresses of the recipients you wish to notify"
  type "list"
end

auth "auth_rs", type: "rightscale"

datasource "billing_centers" do
  request do
    auth $auth_rs
    host rs_optima_host
    path join(["/analytics/orgs/",rs_org_id,"/billing_centers"])
    header "Api-Version", "1.0"
    header "User-Agent", "RS Policies"
    query "view", "allocation_table"
  end
  result do
    encoding "json"
    collect jmes_path(response,"[*]") do
      field "href", jmes_path(col_item,"href")
      field "id", jmes_path(col_item,"id")
      field "name", jmes_path(col_item,"name")
      field "parent_id", jmes_path(col_item,"parent_id")
      field "ancestor_ids", jmes_path(col_item,"ancestor_ids")
      field "allocation_table", jmes_path(col_item,"allocation_table")
    end
  end
end

datasource "top_level_billing_centers" do
  run_script $js_top_level_bc, $billing_centers
end

script "js_top_level_bc", type: "javascript" do
  parameters "billing_centers"
  result "filtered_billing_centers"
  code <<-EOS
  var filtered_billing_centers =
    _.reject(billing_centers, function(bc){ return bc.parent_id != null });
EOS
end

datasource "top_bc_costs" do
  iterate $top_level_billing_centers
  request do
    run_script $top_bc_costs_request,rs_org_id,val(iter_item,"id")
  end 
  result do
    encoding "json"
    collect jmes_path(response,"rows[*]") do
      field "name", val(iter_item, "name")
      field "id", val(iter_item,"id")
      #field "amortized_unblended_costs", jmes_path(col_item,"metrics.cost_amortized_unblended_adj")
      #field "amortized_blended_costs", jmes_path(col_item,"metrics.cost_amortized_blended_adj")
      field "cost", jmes_path(col_item,"metrics.cost_nonamortized_unblended_adj")
      #field "nonamortized_blended_costs", jmes_path(col_item,"metrics.cost_nonamortized_blended_adj")
      field "service", jmes_path(col_item,"dimensions.service")
      field "timestamp", jmes_path(col_item,"timestamp")
    end
  end
end

script "top_bc_costs_request", type: "javascript" do
  parameters "org_id","bc_id"
  result "request"
  code <<-EOS
    var start_at = "";
    var end_at = "";
    var now = new Date();

    // format the date for the `daily` API
    // returns date formatted as string: YYYY-mm-dd
    function getFormattedDailyDate(date) {
      var year = date.getFullYear();
      var month = (1 + date.getMonth()).toString();
      month = month.length > 1 ? month : '0' + month;
      var day = date.getDate().toString();
      day = day.length > 1 ? day : '0' + day;
      return year + '-' + month + '-' + day;
    }
    // finds first day of week
    function getStartDate( date ) {
      date.setHours(-24 * 6);
      return date;
    }

    // start_at begining of week
    start_at = getFormattedDailyDate(getStartDate(new Date())) 
    end_at = getFormattedDailyDate(now) 


    var body = {
      "dimensions": ["service"],
      "granularity": "day",
      "cost_types": ["nonamortized_unblended"],
      "metrics": ["cost_nonamortized_unblended_adj"],
      "billing_center_ids": [bc_id],
      "start_at": start_at,
      "end_at": end_at
    }
    var request = {
      auth: "auth_rs",
      verb: "POST",
      host: "front-service-b.indigo.rightscale.com",
      path: "/bill-analysis/orgs/" + org_id + "/costs/aggregated",
      headers: {
        "Api-Version": "1.0",
        "User-Agent": "RS Policies",
        "Content-Type": "application/json"
      },
      body: JSON.stringify(body)
    } 
  EOS
end

datasource "format_costs" do
  run_script $js_format_costs, $top_bc_costs
end

script "js_format_costs", type: "javascript" do
  parameters "bc_costs"
  result "formatted_data"
  code <<-EOS
  var formatted_data = [];
  console.log(bc_costs)
  var bcs = bc_costs["id"] ;
  console.log(bcs)
  bcs = _.uniq(bcs) ;
  console.log(bcs)
  var services = _.uniq(bc_costs.service);
  console.log(services)

  _.each(bcs, function(bc){
    _.each(services, function(svc){ 
      cost_objs = _.where(bc_costs, {service: svc, id: bc});
      console.log(cost_objs)
      costs = []; 
      costs = cost_objs.cost ; 

      sum = _.reduce(costs, function(memo, num){ return memo + num; }, 0)

      formatted_data.push({
        name: bc["name"],
        cost: sum,
        id: bc["id"],
        service: svc     
      })
    })
  })
EOS
end



escalation "esc_budget_alert" do
  email $param_email
end

policy "budget_alert" do
  validate_each $format_costs do
    summary_template "Cost Anomaly Detected"
    detail_template <<-EOS
# Cost Anomaly Detected

| Billing Center Name | Cost | Service | Timestamp | Billing Center ID |
| ------------------- | ---- | ------- | --------- | ----------------- |
{{ range data -}}
| {{ .name }} | {{.cost}} | {{.service}} | {{.timestamp}} | {{.id}} | 
{{ end -}}

EOS
    escalate $esc_budget_alert
    check eq(2,1)
  end 
end
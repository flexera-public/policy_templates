name "Low Service Usage"
rs_pt_ver 20180301
type "policy"
short_description "Analyze all service usage and determines recommend consolidation or deletion. See the [README](https://github.com/rightscale/policy_templates/tree/master/cost/low_service_usage/) and [docs.rightscale.com/policies](http://docs.rightscale.com/policies/) to learn more."
long_description "Version: 1.1"
severity "low"
category "Cost"

parameter "param_threshold" do
  label "Low Service Spend Threshold"
  description "Estimated run-rate below which a service should be reviewed for wasted usage. Example: 100.0"
  type "number"
  default 100
  min_value 1
  max_value 1000000
end

parameter "param_email" do
  label "Email addresses"
  description "Email addresses of the recipients you wish to notify"
  type "list"
end

parameter "param_billing_centers" do
  label "Billing Center Name"
  description "List of Billing Center Names to check"
  type "list"
  min_length 1
end

parameter "param_minimum_savings_threshold" do
  label "Minimum Savings Threshold"
  description "Specify the minimum monthly savings value required for a recommendation to be issued, on a per resource basis. Note: this setting applies to all recommendations. Example: 1.00"
  type "number"
  default 1
end

auth "auth_rs", type: "rightscale"

datasource "ds_dimensions" do
  request do
    auth $auth_rs
    host rs_optima_host
    path join(["/bill-analysis/orgs/",rs_org_id,"/costs/dimensions"])
    header "Api-Version", "1.0"
    header "User-Agent", "RS Policies"
  end
end

datasource "ds_billing_centers" do
  request do
    auth $auth_rs
    host rs_optima_host
    path join(["/analytics/orgs/",rs_org_id,"/billing_centers"])
    header "Api-Version", "1.0"
    header "User-Agent", "RS Policies"
    query "view", "allocation_table"
  end
  result do
    encoding "json"
    collect jmes_path(response,"[*]") do
      field "href", jmes_path(col_item,"href")
      field "id", jmes_path(col_item,"id")
      field "name", jmes_path(col_item,"name")
      field "parent_id", jmes_path(col_item,"parent_id")
      field "ancestor_ids", jmes_path(col_item,"ancestor_ids")
      field "allocation_table", jmes_path(col_item,"allocation_table")
    end
  end
end

datasource "ds_cloud_vendor_accounts" do
  request do
    auth $auth_rs
    host rs_optima_host
    path join(["/analytics/orgs/",rs_org_id,"/cloud_vendor_accounts"])
    header "Api-Version", "1.0"
    header "User-Agent", "RS Policies"
    query "cloud_vendor", "aws"
  end
  result do
    encoding "json"
    collect jmes_path(response,"[*]") do
      field "id", jmes_path(col_item,"id")
      field "name", jmes_path(col_item,"name")
      field "vendor_name", jmes_path(col_item,"vendor_name")
    end
  end
end

datasource "ds_new_bc_costs" do
  request do
    run_script $js_new_costs_request, rs_org_id, $ds_billing_centers, $param_billing_centers
  end
  result do
    encoding "json"
    collect jmes_path(response,"rows[*]") do
      field "vendor", jmes_path(col_item, "dimensions.vendor")
      field "vendor_account_name", jmes_path(col_item,"dimensions.vendor_account_name")
      field "cost_amortized_unblended_adj", jmes_path(col_item,"metrics.cost_amortized_unblended_adj")
      field "service", jmes_path(col_item, "dimensions.service")
      field "id", jmes_path(col_item,"dimensions.billing_center_id")
      field "timestamp", jmes_path(col_item,"timestamp")
    end
  end
end

script "js_new_costs_request", type: "javascript" do
  parameters "org_id","ds_billing_centers", "param_billing_centers"
  result "request"
  code <<-EOS
    var date = new Date();
    var year = date.getUTCFullYear();
    var month = (2 + date.getUTCMonth())
    
    if (month == 1){ 
      var lmonth = 12;
      var lyear = year-1 ;
    } else {
      var lmonth = month-1;
      var lyear = year ;
    }
    
    mo = month.toString().length > 1 ? month : '0' + month;
    lmo = lmonth.toString().length > 1 ? lmonth : '0' + lmonth;
    var next_month = year + "-" + mo
    var current_month = lyear + "-" + lmo
    var billing_center_ids = []
    if (param_billing_centers.length === 0){
      var top_billing_centers = _.reject(ds_billing_centers, function(bc){ return bc.parent_id != null });
      billing_center_ids = _.map(top_billing_centers, function(value, key){ return value.id });
    } else {
      // get array of billing center id's that match the names in param_billing_centers.
      billing_center_names = _.map(param_billing_centers, function(name){ return name.toLowerCase(); });
      billing_center_ids = _.compact(_.map(ds_billing_centers, function(value){ if(_.contains(billing_center_names, value.name.toLowerCase())){return value.id} }));
    }

    var request = {
      auth: "auth_rs",
      verb: "POST",
      host: "optima.rightscale.com",
      path: "/bill-analysis/orgs/" + org_id + "/costs/aggregated",
      body_fields: {
        "dimensions": ["billing_center_id", "vendor", "vendor_account_name", "service"],
        "granularity": "month",
        "metrics": ['cost_amortized_unblended_adj'],
        "billing_center_ids": billing_center_ids,
        "start_at": current_month,
        "end_at": next_month
      },
      headers: {
        "Api-Version": "1.0",
        "User-Agent": "RS Policies",
      }
    }
  EOS
end

datasource "ds_format_costs" do
  run_script $js_format_costs, $ds_new_bc_costs, $ds_cloud_vendor_accounts, $ds_billing_centers
end

script "js_format_costs", type: "javascript" do
  parameters "new_bc_costs", "ds_cloud_vendor_accounts", "ds_billing_centers"
  result "formatted_data"
  code <<-EOS
  //https://www.w3resource.com/javascript-exercises/javascript-date-exercise-3.php
  var getDaysInMonth = function(month,year) {
    // Here January is 1 based
    //Day 0 is the last day in the previous month
    return new Date(year, month, 0).getDate();
  // Here January is 0 based
  // return new Date(year, month+1, 0).getDate();
  };
  var date = new Date()
  var today = date.getDate()
  console.log("Today:" + today)
  var numdays = getDaysInMonth(date.getUTCMonth(),date.getUTCFullYear())
  console.log("NumberOfDays:"+numdays)
  var monthcomplete = today / numdays ;
  console.log("PercentMonthComplete:" + monthcomplete)
  var type = 'cost_amortized_unblended_adj';

  var formatted_data = [];
  var bcs = [];

  _.each(new_bc_costs, function(bcc){bcs.push(bcc.id)})
  bcs = _.uniq(bcs) ;

  _.each(bcs, function(bc_id){
  var new_bc_cost_objs = _.reject(new_bc_costs, function(new_bc_cost){ return new_bc_cost.id != bc_id });
    _.each(new_bc_cost_objs, function(new_bc_cost_obj){
      var billing_center = _.reject(ds_billing_centers, function(bc){ return bc.id != new_bc_cost_obj.id })[0];
      if (new_bc_cost_obj.vendor == "AWS" ) {
        var account = _.reject(ds_cloud_vendor_accounts, function(ds_cloud_vendor_account){ return ds_cloud_vendor_account.id != new_bc_cost_obj.vendor_account_name });
        var vendor_account_name = account[0].name
      } else {
        var vendor_account_name = new_bc_cost_obj.vendor_account_name
      }
      var new_sum = parseFloat(Math.round(new_bc_cost_obj.cost_amortized_unblended_adj*100)/100)
      if ( new_sum != 0 ) {
        var runrate = new_sum / monthcomplete
        formatted_data.push({
          name: billing_center.name,
          id: bc_id,
          service: new_bc_cost_obj.service,
          new_sum: new_sum,
          run_rate: parseFloat(runrate).toFixed(2),
          vendor: new_bc_cost_obj.vendor,
          vendor_account_name: vendor_account_name
        })
      }
    })
  })
EOS
end

escalation "esc_budget_alert" do
  email $param_email
end

policy "policy_budget_alert" do
  validate_each $ds_format_costs do
    summary_template "{{ rs_org_name }} (Org ID: {{ rs_org_id }}): Low Service Usage Detected Below {{parameters.param_threshold}}"
    detail_template <<-EOS
# Low Service Usage Detected

| Billing Center Name | Vendor | Account Name | Service | Savings |
| ------------------- | ------ | ------------ | ------- | ------- |
{{ range data -}}
| {{.name}} | {{.vendor}} | {{.vendor_account_name}} | {{.service}} | {{.run_rate}} | 
{{ end -}}

###### Policy Applied in Account: {{ rs_project_name }} (Account ID: {{ rs_project_id }}) within Org: {{ rs_org_name }} (Org ID: {{ rs_org_id }})
EOS
    escalate $esc_budget_alert
    check logic_or(gt(to_n(val(item,"run_rate")),$param_threshold), lt(to_n(val(item,"run_rate")),$param_minimum_savings_threshold))
  end
end

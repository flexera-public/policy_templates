name "Google Rightsize Cloud SQL Instances"
rs_pt_ver 20180301
type "policy"
short_description "This policy template finds underutilized and idle Google Cloud SQL instances and downsizes, stops, or deletes them after approval. See the [README](https://github.com/flexera-public/policy_templates/tree/master/cost/google/rightsize_cloudsql_instances) and [docs.flexera.com/flexera/EN/Automation](https://docs.flexera.com/flexera/EN/Automation/AutomationGS.htm) to learn more."
long_description ""
category "Cost"
severity "low"
default_frequency "weekly"
info(
  version: "0.1.0",
  provider: "Google",
  service: "Compute",
  policy_set: "Rightsize Database Instances",
  recommendation_type: "Usage Reduction",
  hide_skip_approvals: "true"
)

###############################################################################
# Parameters
###############################################################################

parameter "param_email" do
  type "list"
  category "Policy Settings"
  label "Email Addresses"
  description "A list of email addresses to notify."
  default []
end

parameter "param_min_savings" do
  type "number"
  category "Policy Settings"
  label "Minimum Savings Threshold"
  description "Minimum potential savings required to generate a recommendation"
  min_value 0
  default 0
end

parameter "param_cross_family" do
  type "string"
  category "Policy Settings"
  label "Enable Cross-Family Recommendations"
  description "Whether to recommend downsizing instances to machine types outside of their current machine type family"
  allowed_values "Yes", "No"
  default "No"
end

parameter "param_projects_allow_or_deny" do
  type "string"
  category "Filters"
  label "Allow/Deny Projects"
  description "Allow or Deny entered Projects. See the README for more details."
  allowed_values "Allow", "Deny"
  default "Allow"
end

parameter "param_projects_list" do
  type "list"
  category "Filters"
  label "Allow/Deny Projects List"
  description "A list of allowed or denied Subscription IDs/names. See the README for more details."
  default []
end

parameter "param_projects_ignore_sys" do
  type "string"
  category "Filters"
  label "Ignore System Projects"
  description "Whether or not to automatically ignore system projects e.g. projects whose id begins with 'sys-'"
  allowed_values "Yes", "No"
  default "No"
end

parameter "param_projects_ignore_app" do
  type "string"
  category "Filters"
  label "Ignore Google Apps Script Projects"
  description "Whether or not to automatically ignore Google Apps Script projects e.g. projects whose id begins with 'app-'"
  allowed_values "Yes", "No"
  default "No"
end

parameter "param_regions_allow_or_deny" do
  type "string"
  category "Filters"
  label "Allow/Deny Regions"
  description "Allow or Deny entered regions. See the README for more details."
  allowed_values "Allow", "Deny"
  default "Allow"
end

parameter "param_regions_list" do
  type "list"
  category "Filters"
  label "Allow/Deny Regions List"
  description "A list of allowed or denied regions. See the README for more details."
  default []
end

parameter "param_exclusion_labels" do
  type "list"
  category "Filters"
  label "Exclusion Labels"
  description "Cloud native labels to ignore resources that you don't want to produce recommendations for. Enter the Key name to filter resources with a specific Key, regardless of Value, and enter Key==Value to filter resources with a specific Key:Value pair. Other operators and regex are supported; please see the README for more details."
  default []
end

parameter "param_exclusion_labels_boolean" do
  type "string"
  category "Filters"
  label "Exclusion Labels: Any / All"
  description "Whether to filter instances containing any of the specified labels or only those that contain all of them. Only applicable if more than one value is entered in the 'Exclusion Labels' field."
  allowed_values "Any", "All"
  default "Any"
end

parameter "param_stats_idle_threshold_cpu_value" do
  type "number"
  category "Statistics"
  label "Idle Instance CPU Threshold (%)"
  description "The CPU threshold at which to consider an instance to be 'idle' and therefore be flagged for termination. Set to -1 to ignore CPU utilization"
  min_value -1
  max_value 100
  default 5
end

parameter "param_stats_idle_threshold_mem_value" do
  type "number"
  category "Statistics"
  label "Idle Instance Memory Threshold (%)"
  description "The Memory threshold at which to consider an instance to be 'idle' and therefore be flagged for termination. Set to -1 to ignore memory utilization"
  min_value -1
  max_value 100
  default 5
end

parameter "param_stats_underutil_threshold_cpu_value" do
  type "number"
  category "Statistics"
  label "Underutilized Instance CPU Threshold (%)"
  description "The CPU threshold at which to consider an instance to be 'underutilized' and therefore be flagged for downsizing. Set to -1 to ignore CPU utilization"
  min_value -1
  max_value 100
  default 40
end

parameter "param_stats_underutil_threshold_mem_value" do
  type "number"
  category "Statistics"
  label "Underutilized Instance Memory Threshold (%)"
  description "The Memory threshold at which to consider an instance to be 'underutilized' and therefore be flagged for downsizing. Set to -1 to ignore memory utilization"
  min_value -1
  max_value 100
  default 40
end

parameter "param_stats_check_both" do
  type "string"
  category "Statistics"
  label "Both CPU and Memory or Either"
  description "Set whether an instance should be considered idle and/or underutilized only if both CPU and memory are under the thresholds or if either CPU or memory are under. Note: this parameter is only valid when at least one Memory Utilization threshold and one CPU Utilization threshold is NOT set to -1"
  allowed_values "Both CPU and Memory", "Either CPU or Memory"
  default "Either CPU or Memory"
end

parameter "param_stats_threshold" do
  type "string"
  category "Statistics"
  label "Threshold Statistic"
  description "Statistic to use when determining if an instance is idle/underutilized."
  allowed_values "Average", "Maximum", "p99", "p95", "p90"
  default "Average"
end

parameter "param_stats_lookback" do
  type "number"
  category "Statistics"
  label "Statistic Lookback Period"
  description "How many days back to look at CPU and/or memory data for instances. This value cannot be set higher than 42 because Google does not retain metrics for longer than 42 days (6 weeks)."
  min_value 1
  max_value 42
  default 30
end

parameter "param_automatic_action" do
  type "list"
  category "Actions"
  label "Automatic Actions"
  description "When this value is set, this policy will automatically take the selected action(s)"
  allowed_values ["Downsize Cloud SQL Instances", "Stop Cloud SQL Instances", "Delete Cloud SQL Instances"]
  default []
end

###############################################################################
# Authentication
###############################################################################

credentials "auth_google" do
  schemes "oauth2"
  label "Google"
  description "Select the Google Cloud Credential from the list."
  tags "provider=gce"
end

credentials "auth_flexera" do
  schemes "oauth2"
  label "Flexera"
  description "Select Flexera One OAuth2 credentials"
  tags "provider=flexera"
end

###############################################################################
# Pagination
###############################################################################

pagination "pagination_google" do
  get_page_marker do
    body_path "nextPageToken"
  end
  set_page_marker do
    query "pageToken"
  end
end

###############################################################################
# Datasources & Scripts
###############################################################################

# Get applied policy metadata for use later
datasource "ds_applied_policy" do
  request do
    auth $auth_flexera
    host rs_governance_host
    path join(["/api/governance/projects/", rs_project_id, "/applied_policies/", policy_id])
    header "Api-Version", "1.0"
  end
end

datasource "ds_billing_centers" do
  request do
    auth $auth_flexera
    host rs_optima_host
    path join(["/analytics/orgs/", rs_org_id, "/billing_centers"])
    header "Api-Version", "1.0"
    header "User-Agent", "RS Policies"
    ignore_status [403]
  end
  result do
    encoding "json"
    collect jmes_path(response, "[*]") do
      field "href", jmes_path(col_item, "href")
      field "id", jmes_path(col_item, "id")
      field "name", jmes_path(col_item, "name")
      field "parent_id", jmes_path(col_item, "parent_id")
    end
  end
end

# Gather top level billing center IDs for when we pull cost data
datasource "ds_top_level_bcs" do
  run_script $js_top_level_bcs, $ds_billing_centers
end

script "js_top_level_bcs", type: "javascript" do
  parameters "ds_billing_centers"
  result "result"
  code <<-EOS
  filtered_bcs = _.filter(ds_billing_centers, function(bc) {
    return bc['parent_id'] == null || bc['parent_id'] == undefined
  })

  result = _.compact(_.pluck(filtered_bcs, 'id'))
EOS
end

datasource "ds_currency_reference" do
  request do
    host "raw.githubusercontent.com"
    path "/flexera-public/policy_templates/master/data/currency/currency_reference.json"
    header "User-Agent", "RS Policies"
  end
end

datasource "ds_currency_code" do
  request do
    auth $auth_flexera
    host rs_optima_host
    path join(["/bill-analysis/orgs/", rs_org_id, "/settings/currency_code"])
    header "Api-Version", "0.1"
    header "User-Agent", "RS Policies"
    ignore_status [403]
  end
  result do
    encoding "json"
    field "id", jmes_path(response, "id")
    field "value", jmes_path(response, "value")
  end
end

datasource "ds_currency" do
  run_script $js_currency, $ds_currency_reference, $ds_currency_code
end

script "js_currency", type:"javascript" do
  parameters "ds_currency_reference", "ds_currency_code"
  result "result"
  code <<-EOS
  symbol = "$"
  separator = ","

  if (ds_currency_code['value'] != undefined) {
    if (ds_currency_reference[ds_currency_code['value']] != undefined) {
      symbol = ds_currency_reference[ds_currency_code['value']]['symbol']

      if (ds_currency_reference[ds_currency_code['value']]['t_separator'] != undefined) {
        separator = ds_currency_reference[ds_currency_code['value']]['t_separator']
      } else {
        separator = ""
      }
    }
  }

  result = {
    symbol: symbol,
    separator: separator
  }
EOS
end

datasource "ds_google_projects" do
  request do
    auth $auth_google
    pagination $pagination_google
    host "cloudresourcemanager.googleapis.com"
    path "/v1/projects/"
    query "filter", "(lifecycleState:ACTIVE)"
    # Header X-Meta-Flexera has no affect on datasource query, but is required for Meta Policies
    # Forces `ds_is_deleted` datasource to run first during policy execution
    header "Meta-Flexera", val($ds_is_deleted, "path")
  end
  result do
    encoding "json"
    collect jmes_path(response, "projects[*]") do
      field "number", jmes_path(col_item, "projectNumber")
      field "id", jmes_path(col_item, "projectId")
      field "name", jmes_path(col_item, "name")
    end
  end
end

datasource "ds_google_projects_filtered" do
  run_script $js_google_projects_filtered, $ds_google_projects, $param_projects_allow_or_deny, $param_projects_list, $param_projects_ignore_sys, $param_projects_ignore_app
end

script "js_google_projects_filtered", type: "javascript" do
  parameters "ds_google_projects", "param_projects_allow_or_deny", "param_projects_list", "param_projects_ignore_sys", "param_projects_ignore_app"
  result "result"
  code <<-EOS
  if (param_projects_list.length > 0) {
    filtered = _.filter(ds_google_projects, function(project) {
      include_project = _.contains(param_projects_list, project['id']) || _.contains(param_projects_list, project['name']) || _.contains(param_projects_list, project['number'])

      if (param_projects_allow_or_deny == "Deny") {
        include_project = !include_project
      }

      return include_project
    })
  } else {
    filtered = ds_google_projects
  }

  result = _.reject(filtered, function(project) {
    return (project['id'].substring(0, 4) == "sys-" && param_projects_ignore_sys == "Yes") || (project['id'].substring(0, 4) == "app-" && param_projects_ignore_app == "Yes")
  })
EOS
end

datasource "ds_cloudsql_instances" do
  iterate $ds_google_projects_filtered
  request do
    auth $auth_google
    pagination $pagination_google
    host "sqladmin.googleapis.com"
    path join(["/v1/projects/", val(iter_item, "id"), "/instances"])
    header "User-Agent", "RS Policies"
    header "Content-Type", "application/json"
    ignore_status [403, 404]
  end
  result do
    encoding "json"
    collect jmes_path(response, "items[*]") do
      field "resourceID", jmes_path(col_item, "name")
      field "resourceName", jmes_path(col_item, "name")
      field "region", jmes_path(col_item, "region")
      field "state", jmes_path(col_item, "state")
      field "selfLink", jmes_path(col_item, "selfLink")
      field "instanceType", jmes_path(col_item, "instanceType")
      field "backendType", jmes_path(col_item, "backendType")
      field "platform", jmes_path(col_item, "databaseVersion")
      field "createTime", jmes_path(col_item, "createTime")
      field "size", jmes_path(col_item, "settings.dataDiskSizeGb")
      field "resourceType", jmes_path(col_item, "settings.tier")
      field "labels", jmes_path(col_item, "settings.userLabels")
      field "diskType", jmes_path(col_item, "settings.dataDiskType")
      field "edition", jmes_path(col_item, "settings.edition")
      field "availabilityType", jmes_path(col_item, "settings.availabilityType")
      field "replicationType", jmes_path(col_item, "settings.replicationType")
      field "pricingPlan", jmes_path(col_item, "settings.pricingPlan")
      field "projectId", val(iter_item, "id")
      field "projectName", val(iter_item, "name")
      field "projectNumber", val(iter_item, "number")
    end
  end
end

datasource "ds_cloudsql_instances_label_filtered" do
  run_script $js_cloudsql_instances_label_filtered, $ds_cloudsql_instances, $param_exclusion_labels, $param_exclusion_labels_boolean
end

script "js_cloudsql_instances_label_filtered", type: "javascript" do
  parameters "ds_cloudsql_instances", "param_exclusion_labels", "param_exclusion_labels_boolean"
  result "result"
  code <<-EOS
  comparators = _.map(param_exclusion_labels, function(item) {
    if (item.indexOf('==') != -1) {
      return { comparison: '==', key: item.split('==')[0], value: item.split('==')[1], string: item }
    }

    if (item.indexOf('!=') != -1) {
      return { comparison: '!=', key: item.split('!=')[0], value: item.split('!=')[1], string: item }
    }

    if (item.indexOf('=~') != -1) {
      value = item.split('=~')[1]
      regex = new RegExp(value.slice(1, value.length - 1))
      return { comparison: '=~', key: item.split('=~')[0], value: regex, string: item }
    }

    if (item.indexOf('!~') != -1) {
      value = item.split('!~')[1]
      regex = new RegExp(value.slice(1, value.length - 1))
      return { comparison: '!~', key: item.split('!~')[0], value: regex, string: item }
    }

    // If = is present but none of the above are, assume user error and that the user intended ==
    if (item.indexOf('=') != -1) {
      return { comparison: '==', key: item.split('=')[0], value: item.split('=')[1], string: item }
    }

    // Assume we're just testing for a key if none of the comparators are found
    return { comparison: 'key', key: item, value: null, string: item }
  })

  if (param_exclusion_labels.length > 0) {
    result = _.reject(ds_cloudsql_instances, function(resource) {
      resource_labels = {}
      if (typeof(resource['labels']) == 'object') { resource_labels = resource['labels'] }

      // Store a list of found labels
      found_labels = []

      _.each(comparators, function(comparator) {
        comparison = comparator['comparison']
        value = comparator['value']
        string = comparator['string']
        resource_label = resource_labels[comparator['key']]

        if (comparison == 'key' && resource_label != undefined) { found_labels.push(string) }
        if (comparison == '==' && resource_label == value) { found_labels.push(string) }
        if (comparison == '!=' && resource_label != value) { found_labels.push(string) }

        if (comparison == '=~') {
          if (resource_label != undefined && value.test(resource_label)) { found_labels.push(string) }
        }

        if (comparison == '!~') {
          if (resource_label == undefined) { found_labels.push(string) }
          if (resource_label != undefined && value.test(resource_label)) { found_labels.push(string) }
        }
      })

      all_labels_found = found_labels.length == comparators.length
      any_labels_found = found_labels.length > 0 && param_exclusion_labels_boolean == 'Any'

      return all_labels_found || any_labels_found
    })
  } else {
    result = ds_cloudsql_instances
  }
EOS
end

datasource "ds_cloudsql_instances_region_filtered" do
  run_script $js_cloudsql_instances_region_filtered, $ds_cloudsql_instances_label_filtered, $param_regions_allow_or_deny, $param_regions_list
end

script "js_cloudsql_instances_region_filtered", type: "javascript" do
  parameters "ds_cloudsql_instances_label_filtered", "param_regions_allow_or_deny", "param_regions_list"
  result "result"
  code <<-EOS
  if (param_regions_list.length > 0) {
    result = _.filter(ds_cloudsql_instances_label_filtered, function(instance) {
      include_instance = _.contains(param_regions_list, instance['region'])

      if (param_regions_allow_or_deny == "Deny") {
        include_instance = !include_instance
      }

      return include_instance
    })
  } else {
    result = ds_cloudsql_instances_label_filtered
  }
EOS
end

datasource "ds_cpu_stats" do
  iterate $ds_google_projects_filtered
  request do
    run_script $js_stats, val(iter_item, "id"), $param_stats_lookback, "cloudsql.googleapis.com/database/cpu/utilization"
  end
  result do
    encoding "json"
    collect jmes_path(response, "timeSeriesData[*]") do
      field "resourceName", jmes_path(col_item, "labelValues[3].stringValue")
      field "resourceID", jmes_path(col_item, "labelValues[2].stringValue")
      field "zone", jmes_path(col_item, "labelValues[1].stringValue")
      field "cpuAverage", prod(jmes_path(col_item, "pointData[0].values[0].doubleValue"), 100)
      field "cpuMaximum", prod(jmes_path(col_item, "pointData[0].values[1].doubleValue"), 100)
      field "cpuMinimum", prod(jmes_path(col_item, "pointData[0].values[2].doubleValue"), 100)
      field "cpuP99", prod(jmes_path(col_item, "pointData[0].values[3].doubleValue"), 100)
      field "cpuP95", prod(jmes_path(col_item, "pointData[0].values[4].doubleValue"), 100)
      field "cpuP90", prod(jmes_path(col_item, "pointData[0].values[5].doubleValue"), 100)
      field "projectId", val(iter_item, "id")
      field "projectName", val(iter_item, "name")
      field "projectNumber", val(iter_item, "number")
    end
  end
end

datasource "ds_mem_stats" do
  iterate $ds_google_projects_filtered
  request do
    run_script $js_stats, val(iter_item, "id"), $param_stats_lookback, "cloudsql.googleapis.com/database/memory/utilization"
  end
  result do
    encoding "json"
    collect jmes_path(response, "timeSeriesData[*]") do
      field "resourceName", jmes_path(col_item, "labelValues[3].stringValue")
      field "resourceID", jmes_path(col_item, "labelValues[2].stringValue")
      field "zone", jmes_path(col_item, "labelValues[1].stringValue")
      field "memAverage", prod(jmes_path(col_item, "pointData[0].values[0].doubleValue"), 100)
      field "memMaximum", prod(jmes_path(col_item, "pointData[0].values[1].doubleValue"), 100)
      field "memMinimum", prod(jmes_path(col_item, "pointData[0].values[2].doubleValue"), 100)
      field "memP99", prod(jmes_path(col_item, "pointData[0].values[3].doubleValue"), 100)
      field "memP95", prod(jmes_path(col_item, "pointData[0].values[4].doubleValue"), 100)
      field "memP90", prod(jmes_path(col_item, "pointData[0].values[5].doubleValue"), 100)
      field "projectId", val(iter_item, "id")
      field "projectName", val(iter_item, "name")
      field "projectNumber", val(iter_item, "number")
    end
  end
end

script "js_stats", type: "javascript" do
  parameters "projectId", "param_stats_lookback", "metric"
  result "request"
  code <<-EOS
  group_by = [
    "group_by sliding(" + param_stats_lookback + "d), .mean",
    "group_by sliding(" + param_stats_lookback + "d), .max",
    "group_by sliding(" + param_stats_lookback + "d), .min",
    "group_by sliding(" + param_stats_lookback + "d), .percentile(99)",
    "group_by sliding(" + param_stats_lookback + "d), .percentile(95)",
    "group_by sliding(" + param_stats_lookback + "d), .percentile(90)"
  ].join(' ; ')

  query = [
    "fetch cloudsql_database",
    "metric " + metric,
    "within " + param_stats_lookback + "d",
    "{ " + group_by + " }",
    "join"
  ].join(" | ")

  var request = {
    auth: "auth_google",
    verb: "POST",
    host: "monitoring.googleapis.com",
    path: [ "/v3/projects/", projectId, "/timeSeries:query" ].join(''),
    header: {
      "User-Agent": "RS Policies",
      "Content-Type": "application/json"
    },
    body_fields: { "query": query },
    ignore_status: [ 403, 404 ]
  }
EOS
end

datasource "ds_cloudsql_instances_with_stats" do
  run_script $js_cloudsql_instances_with_stats, $ds_cloudsql_instances_region_filtered, $ds_cpu_stats, $ds_mem_stats
end

script "js_cloudsql_instances_with_stats", type: "javascript" do
  parameters "ds_cloudsql_instances_region_filtered", "ds_cpu_stats", "ds_mem_stats"
  result "result"
  code <<-EOS
  cpu_stats_by_resource = {}

  _.each(ds_cpu_stats, function(item) {
    id = item['resourceID'].toLowerCase()
    cpu_stats_by_resource[id] = item
  })

  mem_stats_by_resource = {}

  _.each(ds_mem_stats, function(item) {
    id = item['resourceID'].toLowerCase()
    mem_stats_by_resource[id] = item
  })

  result = _.map(ds_cloudsql_instances_region_filtered, function(instance) {
    new_instance = {
      cpuAverage: null,
      cpuMaximum: null,
      cpuMinimum: null,
      cpuP99: null,
      cpuP95: null,
      cpuP90: null,
      memAverage: null,
      memMaximum: null,
      memMinimum: null,
      memP99: null,
      memP95: null,
      memP90: null
    }

    _.each(_.keys(instance), function(key) { new_instance[key] = instance[key] })

    id = instance['resourceID'].toLowerCase()

    if (cpu_stats_by_resource[id] != undefined) {
      new_instance["cpuAverage"] = cpu_stats_by_resource[id]['cpuAverage']
      new_instance["cpuMaximum"] = cpu_stats_by_resource[id]['cpuMaximum']
      new_instance["cpuMinimum"] = cpu_stats_by_resource[id]['cpuMinimum']
      new_instance["cpuP99"] = cpu_stats_by_resource[id]['cpuP99']
      new_instance["cpuP95"] = cpu_stats_by_resource[id]['cpuP95']
      new_instance["cpuP90"] = cpu_stats_by_resource[id]['cpuP90']
    }

    if (mem_stats_by_resource[id] != undefined) {
      new_instance["memAverage"] = cpu_stats_by_resource[id]['cpuAverage']
      new_instance["memMaximum"] = cpu_stats_by_resource[id]['cpuMaximum']
      new_instance["memMinimum"] = cpu_stats_by_resource[id]['cpuMinimum']
      new_instance["memP99"] = cpu_stats_by_resource[id]['cpuP99']
      new_instance["memP95"] = cpu_stats_by_resource[id]['cpuP95']
      new_instance["memP90"] = cpu_stats_by_resource[id]['cpuP90']
    }

    return new_instance
  })
EOS
end

datasource "ds_cloudsql_costs" do
  iterate $ds_google_projects_filtered
  request do
    run_script $js_cloudsql_costs, val(iter_item, 'id'), $ds_top_level_bcs, rs_org_id, rs_optima_host
  end
  result do
    encoding "json"
    collect jmes_path(response, "rows[*]") do
      field "resourceID", jmes_path(col_item, "dimensions.resource_id")
      field "cost", jmes_path(col_item, "metrics.cost_amortized_unblended_adj")
    end
  end
end

script "js_cloudsql_costs", type: "javascript" do
  parameters "project_id", "ds_top_level_bcs", "rs_org_id", "rs_optima_host"
  result "request"
  code <<-EOS
  end_date = new Date()
  end_date.setDate(end_date.getDate() - 2)
  end_date = end_date.toISOString().split('T')[0]

  start_date = new Date()
  start_date.setDate(start_date.getDate() - 3)
  start_date = start_date.toISOString().split('T')[0]

  var request = {
    auth: "auth_flexera",
    host: rs_optima_host,
    verb: "POST",
    path: "/bill-analysis/orgs/" + rs_org_id + "/costs/select",
    body_fields: {
      dimensions: ["resource_id"],
      granularity: "day",
      start_at: start_date,
      end_at: end_date,
      metrics: ["cost_amortized_unblended_adj"],
      billing_center_ids: ds_top_level_bcs,
      limit: 100000,
      filter: {
        "type": "and",
        "expressions": [
          {
            "type": "or",
            "expressions": [
              {
                "dimension": "service",
                "type": "equal",
                "value": "Cloud SQL"
              },
              {
                "dimension": "service",
                "type": "equal",
                "value": "cloud sql"
              }
            ]
          },
          {
            "dimension": "vendor",
            "type": "equal",
            "value": "GCP"
          },
          {
            "dimension": "vendor_account",
            "type": "equal",
            "value": project_id
          },
          {
            "type": "not",
            "expression": {
              "dimension": "adjustment_name",
              "type": "substring",
              "substring": "Shared"
            }
          }
        ]
      }
    },
    headers: {
      'User-Agent': "RS Policies",
      'Api-Version': "1.0"
    },
    ignore_status: [400]
  }
EOS
end

datasource "ds_cloudsql_costs_grouped" do
  run_script $js_cloudsql_costs_grouped, $ds_cloudsql_costs
end

script "js_cloudsql_costs_grouped", type: "javascript" do
  parameters "ds_cloudsql_costs"
  result "result"
  code <<-EOS
  // Multiple a single day's cost by the average number of days in a month.
  // The 0.25 is to account for leap years for extra precision.
  cost_multiplier = 365.25 / 12

  // Group cost data by resourceId for later use
  result = {}

  _.each(ds_cloudsql_costs, function(item) {
    id = item['resourceID'].toLowerCase()

    if (result[id] == undefined) { result[id] = 0.0 }
    result[id] += item['cost'] * cost_multiplier
  })
EOS
end

datasource "ds_google_instance_sizes" do
  request do
    host "raw.githubusercontent.com"
    path "/flexera-public/policy_templates/master/data/google/google_compute_instance_types.json"
    header "User-Agent", "RS Policies"
  end
end

datasource "ds_google_instance_prices" do
  request do
    host "raw.githubusercontent.com"
    path "/flexera-public/policy_templates/master/data/google/google_vm_pricing.json"
    header "User-Agent", "RS Policies"
  end
end

datasource "ds_idle_cloudsql" do
  run_script $js_idle_cloudsql, $ds_cloudsql_instances_with_stats, $ds_cloudsql_costs_grouped, $ds_currency, $ds_applied_policy, $param_stats_idle_threshold_cpu_value, $param_stats_idle_threshold_mem_value, $param_stats_check_both, $param_stats_threshold, $param_stats_lookback, $param_min_savings
end

script "js_idle_cloudsql", type:"javascript" do
  parameters "ds_cloudsql_instances_with_stats", "ds_cloudsql_costs_grouped", "ds_currency", "ds_applied_policy", "param_stats_idle_threshold_cpu_value", "param_stats_idle_threshold_mem_value", "param_stats_check_both", "param_stats_threshold", "param_stats_lookback", "param_min_savings"
  result "result"
  code <<-'EOS'
  // Used for formatting numbers to look pretty
  function formatNumber(number, separator) {
    formatted_number = "0"

    if (number) {
      formatted_number = (Math.round(number * 100) / 100).toString().split(".")[0]

      if (separator) {
        withSeparator = ""

        for (var i = 0; i < formatted_number.length; i++) {
          if (i > 0 && (formatted_number.length - i) % 3 == 0) { withSeparator += separator }
          withSeparator += formatted_number[i]
        }

        formatted_number = withSeparator
      }

      decimal = (Math.round(number * 100) / 100).toString().split(".")[1]
      if (decimal) { formatted_number += "." + decimal }
    }

    return formatted_number
  }

  checking_cpu = param_stats_idle_threshold_cpu_value != -1
  checking_mem = param_stats_idle_threshold_mem_value != -1

  // Find idle VMs
  idle_cloudsql = _.filter(ds_cloudsql_instances_with_stats, function(instance) {
    idle = false
    idle_cpu = false
    idle_mem = false
    cpu_test_stat = null
    mem_test_stat = null

    if (checking_cpu) {
      if (param_stats_threshold == "Average" && instance['cpuAverage']) {
        cpu_test_stat = instance['cpuAverage']
      } else if (param_stats_threshold == "Maximum" && instance['cpuMaximum']) {
        cpu_test_stat = instance['cpuMaximum']
      } else if (param_stats_threshold == "p99" && instance['cpuP99']) {
        cpu_test_stat = instance['cpuP99']
      } else if (param_stats_threshold == "p95" && instance['cpuP95']) {
        cpu_test_stat = instance['cpuP95']
      } else if (param_stats_threshold == "p90" && instance['cpuP90']) {
        cpu_test_stat = instance['cpuP90']
      }
    }

    if (checking_mem) {
      if (param_stats_threshold == "Average" && instance['memAverage']) {
        mem_test_stat = instance['memAverage']
      } else if (param_stats_threshold == "Maximum" && instance['memMaximum']) {
        mem_test_stat = instance['memMaximum']
      } else if (param_stats_threshold == "p99" && instance['memP99']) {
        mem_test_stat = instance['memP99']
      } else if (param_stats_threshold == "p95" && instance['memP95']) {
        mem_test_stat = instance['memP95']
      } else if (param_stats_threshold == "p90" && instance['memP90']) {
        mem_test_stat = instance['memP90']
      }
    }

    if (checking_cpu && cpu_test_stat && cpu_test_stat <= param_stats_idle_threshold_cpu_value) {
      idle_cpu = true
    }

    if (checking_mem && mem_test_stat && mem_test_stat <= param_stats_idle_threshold_mem_value) {
      idle_mem = true
    }

    if (checking_cpu && !checking_mem) {
      idle = idle_cpu
    } else if (!checking_cpu && checking_mem) {
      idle = idle_mem
    } else if (checking_cpu && checking_mem) {
      if (param_stats_check_both == "Both CPU and Memory") {
        idle = idle_cpu && idle_mem
      } else {
        idle = idle_cpu || idle_mem
      }
    }

    return idle
  })

  result = []
  total_savings = 0.0

  _.each(idle_cloudsql, function(instance) {
    savings = 0.0
    if (ds_cloudsql_costs_grouped[instance['id'].toLowerCase()]) { savings = ds_cloudsql_costs_grouped[instance['id'].toLowerCase()] }

    if (savings >= param_min_savings) {
      total_savings += savings

      tags = []

      if (instance['labels']) {
        tags = _.map(_.keys(instance['labels']), function(key) {
          return [ key, instance['labels'][key] ].join('=')
        })
      }

      recommendationDetails = [
        "Stop Google Cloud SQL instance ", instance["resourceName"], " ",
        "in Google Project ", instance["projectName"], " ",
        "(", instance["projectId"], ")"
      ]

      result.push({
        accountID: instance['projectId'],
        accountName: instance['projectName'],
        projectNumber: instance['projectNumber'],
        resourceID: instance['resourceID'],
        resourceName: instance['resourceName'],
        family: instance['resourceType'].split('-')[0],
        resourceType: instance['resourceType'],
        newResourceType: "Stop Cloud SQL Instance",
        region: instance['region'],
        platform: instance['platform'],
        created_at: instance['createTime'],
        diskSize: instance['size'],
        edition: instance['edition'],
        availabilityType: instance['availabilityType'],
        replicationType: instance['replicationType'],
        cpuMaximum: instance['cpuMaximum'],
        cpuMinimum: instance['cpuMinimum'],
        cpuAverage: instance['cpuAverage'],
        cpuP99: instance['cpuP99'],
        cpuP95: instance['cpuP95'],
        cpuP90: instance['cpuP90'],
        memMaximum: instance['memMaximum'],
        memMinimum: instance['memMinimum'],
        memAverage: instance['memAverage'],
        memP99: instance['memP99'],
        memP95: instance['memP95'],
        memP90: instance['memP90'],
        tags: tags.join(', '),
        service: "Cloud SQL",
        savings: Math.round(savings * 1000) / 1000,
        savingsCurrency: ds_currency['symbol'],
        recommendationDetails: recommendationDetails,
        state: instance['state'],
        selfLink: instance['selfLink'],
        thresholdType: param_stats_threshold,
        threshold: param_stats_idle_threshold_cpu_value,
        memoryThreshold: param_stats_idle_threshold_mem_value,
        lookbackPeriod: param_stats_lookback,
        policy_name: ds_applied_policy['name'],
        total_savings: "",
        message: ""
      })
    }
  })

  result = _.sortBy(result, "savings").reverse()

  instances_total = ds_google_vms_with_stats.length
  idle_total = result.length
  idle_percentage = (idle_total / instances_total * 100).toFixed(2).toString() + '%'

  verb = instances_total == 1 ? "is" : "are"

  findings = [
    "Out of ", instances_total, " Google Cloud SQL instances analyzed, ",
    idle_total, " (", idle_percentage,
    ") ", idle_verb, " idle and recommended for stopping. "
  ].join('')

  message_boolean = param_stats_check_both == "Both CPU and Memory" ? "and" : "or"

  if (param_stats_idle_threshold_cpu_value != -1 && param_stats_idle_threshold_mem_value != -1) {
    analysis = [
      "A Cloud SQL instance is considered idle if its CPU usage (",
      param_stats_threshold.toLowerCase(), ") is below ",
      param_stats_idle_threshold_cpu_value, "% ", message_boolean,
      " its memory usage (", param_stats_threshold.toLowerCase(),
      ") is below ", param_stats_idle_threshold_mem_value, "%. "
    ].join('')

    lookback = [
      "CPU and memory usage was analyzed over the last ",
      param_stats_lookback.toString(), " days.\n\n"
    ].join('')
  } else if (param_stats_idle_threshold_cpu_value != -1 && param_stats_idle_threshold_mem_value == -1) {
    analysis = [
      "A Cloud SQL instance is considered idle if its CPU usage (",
      param_stats_threshold.toLowerCase(), ") is below ",
      param_stats_idle_threshold_cpu_value, "%. "
    ].join('')

    lookback = [
      "CPU usage was analyzed over the last ",
      param_stats_lookback.toString(), " days.\n\n"
    ].join('')
  } else if (param_stats_idle_threshold_cpu_value == -1 && param_stats_idle_threshold_mem_value != -1) {
    analysis = [
      "A Cloud SQL instance is considered idle if its memory usage (",
      param_stats_threshold.toLowerCase(), ") is below ",
      param_stats_idle_threshold_mem_value, "%. "
    ].join('')

    lookback = [
      "Memory usage was analyzed over the last ",
      param_stats_lookback.toString(), " days.\n\n"
    ].join('')
  } else {
    analysis = "No idle Cloud SQL instances were reported because neither CPU nor Memory metrics were configured for analysis. "
    lookback = "\n\n"
  }

  disclaimer = "The above settings can be modified by editing the applied policy and changing the appropriate parameters."

  result.push({
    accountID: "",
    accountName: "",
    projectNumber: "",
    resourceID: "",
    resourceName: "",
    family: "",
    resourceType: "",
    newResourceType: "",
    region: "",
    platform: "",
    created_at: "",
    diskSize: "",
    edition: "",
    availabilityType: "",
    replicationType: "",
    cpuMaximum: "",
    cpuMinimum: "",
    cpuAverage: "",
    cpuP99: "",
    cpuP95: "",
    cpuP90: "",
    memMaximum: "",
    memMinimum: "",
    memAverage: "",
    memP99: "",
    memP95: "",
    memP90: "",
    tags: "",
    service: "",
    savings: "",
    savingsCurrency: "",
    recommendationDetails: "",
    state: "",
    selfLink: "",
    thresholdType: "",
    threshold: "",
    memoryThreshold: "",
    lookbackPeriod: "",
    policy_name: "",
    total_savings: "",
    message: ""
  })

  result[0]["message"] = findings + analysis + lookback + disclaimer
  result[0]["total_savings"] = ds_currency['symbol'] + ' ' + formatNumber(Math.round(total_savings * 100) / 100, ds_currency['separator'])
EOS
end

name "Google Old Snapshots"
rs_pt_ver 20180301
type "policy"
short_description "Checks for snapshots older than specified number of days and, optionally, deletes them. See the [README](https://github.com/flexera/policy_templates/tree/master/cost/google/old_snapshots) and [docs.flexera.com/flexera/EN/Automation](https://docs.flexera.com/flexera/EN/Automation/AutomationGS.htm) to learn more."
category "Cost"
severity "low"
default_frequency "daily"
info(
  version: "2.11",
  provider:"Google",
  service: "Storage",
  policy_set: "Old Snapshots"
)

###############################################################################
# Parameters
###############################################################################

parameter "param_email" do
  type "list"
  label "Email addresses to notify"
  description "Email addresses of the recipients you wish to notify when new incidents are created"
end

parameter "param_snapshot_age" do
  label "Snapshot Age"
  description "The number of days since the snapshot was created"
  type "number"
end

parameter "param_exclusion_tags" do
  label "Exclusion Label List"
  description "Cloud native label to ignore snapshots. Format: Key:Value"
  type "list"
  allowed_pattern /(^$)|([\w]?)+\:([\w]?)+/
end

parameter "param_automatic_action" do
  type "list"
  label "Automatic Actions"
  description "When this value is set, this policy will automatically take the selected action(s)"
  allowed_values ["Delete Snapshots"]
end

parameter "param_log_to_cm_audit_entries" do
  type "string"
  label "Log to CM Audit Entries"
  description "Boolean for whether or not to log any debugging information from actions to CM Audit Entries, this should be left set to No on Flexera EU"
  default "No"
  allowed_values "Yes", "No"
end

###############################################################################
# Authentication
###############################################################################

# authenticate with Google
credentials "auth_google" do
  schemes "oauth2"
  label "Google"
  description "Select the Google Cloud Credential from the list."
  tags "provider=gce"
end

###############################################################################
# Pagination
###############################################################################

pagination "google_pagination" do
  get_page_marker do
    body_path "nextPageToken"
  end
  set_page_marker do
    query "pageToken"
  end
end

###############################################################################
# Datasources
###############################################################################

#get all google project
datasource "ds_google_project" do
  request do
    auth $auth_google
    pagination $google_pagination
    host "cloudresourcemanager.googleapis.com"
    path "/v1/projects/"
  end
  result do
    encoding "json"
    collect jmes_path(response, "projects[*]") do
      field "projectNumber", jmes_path(col_item,"projectNumber")
      field "projectId", jmes_path(col_item,"projectId")
    end
  end
end

datasource "ds_snapshots" do
  iterate $ds_google_project
  request do
    auth $auth_google
    pagination $google_pagination
    host "compute.googleapis.com"
    path join(["/compute/v1/projects/",val(iter_item,"projectId"),"/global/snapshots"])
    query "filter","status=READY"
    ignore_status [403,404]
  end
  result do
    encoding "json"
    collect jmes_path(response, "items[*]") do
      field "projectId", val(iter_item, "projectId")
      field "creationTimestamp", jmes_path(col_item,"creationTimestamp")
      field "diskSizeGb", jmes_path(col_item, "diskSizeGb")
      field "labels", jmes_path(col_item, "labels")
      field "id", jmes_path(col_item,"name")
      field "selfLink", jmes_path(col_item,"selfLink")
      field "status", jmes_path(col_item, "status")
    end
  end
end

datasource "ds_filtered_snapshots" do
  run_script $js_filter_snapshots, $ds_snapshots, $param_exclusion_tags
end

###############################################################################
# Scripts
###############################################################################
script "js_filter_snapshots", type: "javascript" do
  parameters "ds_snapshots", "param_exclusion_tags"
  result "filtered_snapshots"
  code <<-EOF
  var filtered_snapshots = _.filter(ds_snapshots, function(snapshot){
    var count = 0
    _.each(param_exclusion_tags, function(tag)
      {
        tag_key = tag.split(':')[0]
        tag_value = tag.split(':')[1]
        if (snapshot.labels != null && snapshot.labels !== undefined && snapshot.labels[tag_key] != null && snapshot.labels[tag_key] !== undefined){
          if (snapshot.labels[tag_key] == tag_value){
            count = 1
          }
        }
      }
    )
    if (count == 0){
      if (snapshot.id != null) {
        var labelsList = "";
        for(var prop in snapshot.labels){
          labelsList = labelsList + prop+" : "+snapshot.labels[prop]+", ";
        }
        if(labelsList.length > 0){
          snapshot.labels = labelsList.substring(0, labelsList.length - 2);
        }
        return snapshot
      }
    }
  }
)

var now = new Date()
var one_day=1000*60*60*24
_.each(filtered_snapshots, function(snapshot){
  var creation_time = new Date(snapshot.creationTimestamp)
  var difference = now.getTime() - creation_time.getTime()
  var days_old=(difference/one_day).toFixed(0)
  snapshot["days_old"] = days_old
}
)
var filtered_snapshots = _.sortBy(filtered_snapshots, "projectId")
var filtered_snapshots = _.sortBy(filtered_snapshots, "id")
var filtered_snapshots = _.sortBy(filtered_snapshots, "days_old")
EOF
end

###############################################################################
# Policy
###############################################################################

policy "policy_old_snapshots" do
  validate_each $ds_filtered_snapshots do
    summary_template "{{ rs_project_name }} (Account ID: {{ rs_project_id }}): {{ len data }} rows containing Old Snapshots"
    check le(to_n(val(item, "days_old")), $param_snapshot_age)
    escalate $esc_email
    escalate $esc_approve_delete_snapshots
    export do
      resource_level true
      field "projectId" do
        label "Project ID"
      end
      field "id" do
        label "Name"
      end
      field "days_old" do
        label "Age In Days"
      end
      field "diskSizeGb" do
        label "Size"
      end
      field "labels" do
        label "Labels"
      end
      field "status" do
        label "Status"
      end
      field "selfLink" do
        label "Self Link"
      end
    end
  end
end


###############################################################################
# Escalations
###############################################################################

escalation "esc_email" do
  automatic true
  label "Send Email"
  description "Send incident email"
  email $param_email
end

escalation "esc_approve_delete_snapshots" do
  automatic contains($param_automatic_action, "Delete Snapshots")
  label "Delete Snapshots"
  description "Approval to delete all selected snapshots"
  run "delete_snapshots", data, $param_log_to_cm_audit_entries
end

###############################################################################
# Cloud Workflow
###############################################################################

define delete_snapshots($data,$param_log_to_cm_audit_entries) return $all_responses do
  $$debug = $param_log_to_cm_audit_entries == "Yes"
  $all_responses = []
  $syslog_subject = "Google Old Snapshots: "
  call sys_log(join([$syslog_subject, "Google Snapshot"]),to_s($data))
  foreach $item in $data do
    sub on_error: handle_error($response) do
      $response = http_delete(
        url: $item["selfLink"],
        auth: $$auth_google,
        headers: {
          "cache-control": "no-cache",
          "content-type": "application/json"
        }
      )
      $all_responses << $response
    end
  end
  call sys_log(join([$syslog_subject, "Responses"]),to_s($all_responses))
end

define handle_error($response) do
  $status_code = $response["code"]
  $syslog_subject = "Google Snapshot Deletion Error: "
  call sys_log(join([$syslog_subject, $status_code]),to_s($response))
  $_error_behavior = "skip"
end

define sys_log($subject, $detail) do
  if $$debug
    rs_cm.audit_entries.create(
      notify: "None",
      audit_entry: {
        auditee_href: @@account,
        summary: $subject,
        detail: $detail
      }
    )
  end
end

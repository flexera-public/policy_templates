name "Google Idle IP Address Recommender"
rs_pt_ver 20180301
type "policy"
short_description "This Policy finds Google Idle IP Address Recommendations and reports when it finds them. See the [README](https://github.com/flexera-public/policy_templates/tree/master/cost/google/idle_ip_address_recommendations) and [docs.flexera.com/flexera/EN/Automation](https://docs.flexera.com/flexera/EN/Automation/AutomationGS.htm) to learn more."
category "Cost"
severity "low"
default_frequency "daily"
info(
  version: "2.6",
  provider: "Google",
  service: "Compute",
  policy_set: "Unused IP Addresses"
)

###############################################################################
# Parameters
###############################################################################

parameter "param_emails" do
  type "list"
  label "Email addresses to notify"
  description "Email addresses of the recipients you wish to notify when new incidents are created"
end

parameter "param_project_ids" do
  type "list"
  label "Project IDs"
  description "Google Projects to query. Leave blank to query all projects."
end

parameter "param_regions" do
  type "list"
  label "Regions"
  description "Regions to query. Leave blank to query all available regions."
end

parameter "param_exclude_tags" do
  category "User Inputs"
  label "Tag to exclude (Key:Value)"
  description "Cloud native tag (label) to ignore IP addresses. Format: Key:Value. Leave blank to query all tags."
  type "string"
  allowed_pattern /(^$)|([\w]?)+\:([\w]?)/
end

parameter "param_automatic_action" do
  type "list"
  label "Automatic Actions"
  description "When this value is set, this policy will automatically take the selected action(s)"
  allowed_values ["Delete IP Addresses"]
end

parameter "param_log_to_cm_audit_entries" do
  type "string"
  label "Log to CM Audit Entries"
  description "Boolean for whether or not to log any debugging information from actions to CM Audit Entries, this should be left set to No on Flexera EU"
  default "No"
  allowed_values "Yes", "No"
end

###############################################################################
# Authentication
###############################################################################

# authenticate with Google
credentials "auth_google" do
  schemes "oauth2"
  label "Google"
  description "Select the Google Cloud Credential from the list."
  tags "provider=gce"
end

###############################################################################
# Pagination
###############################################################################

pagination "google_pagination" do
  get_page_marker do
    body_path "nextPageToken"
  end
  set_page_marker do
    query "pageToken"
  end
end

###############################################################################
# Datasources
###############################################################################

datasource "ds_currency_reference" do
  request do
    host "raw.githubusercontent.com"
    path "/rightscale/policy_templates/master/cost/scheduled_reports/currency_reference.json"
    header "User-Agent", "RS Policies"
  end
end

# GCP projects filtered by "lifecycleState:ACTIVE" and "param_project_ids".
datasource "ds_projects" do
  request do
    run_script $js_projects, $param_project_ids
  end
  result do
    encoding "json"
    collect jmes_path(response, "projects[*]") do
      field "projectID", jmes_path(col_item,"projectId")
      field "projectNumber", jmes_path(col_item,"projectNumber")
      field "projectName", jmes_path(col_item,"name")
    end
  end
end

# Aggregated addresses by project, returns them by region.
datasource "ds_aggregated_addresses" do
  iterate $ds_projects
  request do
    run_script $js_aggregated_addresses, val(iter_item, "projectID"), $param_regions, $param_exclude_tags
  end
  result do
    encoding "json"
    field "projectID", val(iter_item, "projectID")
    field "projectNumber", val(iter_item, "projectNumber")
    field "projectName", val(iter_item, "projectName")
    field "items", jq(response, ".items")
  end
end

# Sanitizes aggregated addresses.
datasource "ds_sanitize_addresses" do
  run_script $js_sanitize_addresses, $ds_aggregated_addresses
end

# Creates unique relationship between projectID and region.
datasource "ds_recommenders" do
  run_script $js_recommenders, $ds_sanitize_addresses
end

# Gets recommendations from Recommender API for each "ds_recommender".
datasource "ds_recommendations" do
  iterate $ds_recommenders
  request do
    run_script $js_recommender_call, val(iter_item,"projectID"), val(iter_item, "region")
  end
  result do
    encoding "json"
    collect jmes_path(response, "recommendations[*]") do
      field "projectID", val(iter_item, "projectID")
      field "projectNumber", val(iter_item, "projectNumber")
      field "region", val(iter_item, "region")
      field "id", jmes_path(col_item, "name")
      field "description", jmes_path(col_item, "description")
      field "resourceName", jmes_path(col_item, "content.overview.resourceName")
      field "primaryImpact", jmes_path(col_item, "primaryImpact")
      field "costUnits", jmes_path(col_item, "primaryImpact.costProjection.cost.units")
      field "costNanos", jmes_path(col_item, "primaryImpact.costProjection.cost.nanos")
      field "duration", jmes_path(col_item, "primaryImpact.costProjection.duration")
      field "currency", jmes_path(col_item, "primaryImpact.costProjection.cost.currencyCode")
      field "priority", jmes_path(col_item, "priority")
      field "recommenderSubtype", jmes_path(col_item, "recommenderSubtype")
      field "state", jmes_path(col_item, "stateInfo.state")
    end
  end
end

# Gets estimated monthly savings.
datasource "ds_addresses_cost_mapping" do
  run_script $js_addresses_cost_mapping, $ds_sanitize_addresses, $ds_recommendations, $ds_currency_reference
end

###############################################################################
# Scripts
###############################################################################
script "js_projects", type: "javascript" do
  parameters "param_project_ids"
  result "request"
  code <<-EOF
  var filter = "(lifecycleState:ACTIVE)"

  // Apply filter by project only if "param_project_ids" was set.
  if (param_project_ids.length != 0) {
      // Since we already have a filter applied this AND is required to apply new filter.
      filter += " AND ("
      _.each(param_project_ids, function (id, index) {
          filter += '(projectId = "' + id + '")'

          // Adds OR in case it isn't last item, means there are more items to be added.
          if ((index + 1) != param_project_ids.length) {
              filter += " OR "
          }
      })
      filter += ")"
  }

  var request = {
    auth: "auth_google",
    pagination: "google_pagination",
    host: "cloudresourcemanager.googleapis.com",
    path: "/v1/projects/",
    query_params: {
      "filter": filter
    }
  }
  EOF
end

script "js_aggregated_addresses", type: "javascript" do
  parameters "projectID", "param_regions", "param_exclude_tags"
  result "request"
  code <<-EOF
  var filter = '(status != "IN_USE") AND (addressType != "INTERNAL")'

  // Apply filter tags(labels) only if "param_exclude_tags" was set.
  if (param_exclude_tags.length != 0) {
      var label_key = param_exclude_tags.split(':')[0]
      var label_value = param_exclude_tags.split(':')[1]

      filter += " AND (NOT labels." + label_key + ":" + label_value + ")"
  }

  // Apply filter by region only if "param_regions" was set.
  if (param_regions.length != 0) {
      // We need this since region field for each item is URL.
      var baseUrl = "https://www.googleapis.com/compute/v1/projects/" + projectID + "/regions/"

      // Since we already have a filter applied this AND is required to apply new filter.
      filter += " AND ("
      _.each(param_regions, function (pr, index) {
          var region = baseUrl + pr

          // In case user inputs "global" in "param_regions" we set "region" value to empty, since
          // those addresses don't have a region field.
          if (pr == "global") {
              region = ""
          }

          filter += '(region = "' + region + '")'
          
          // Adds OR in case it isn't last item, means there are more items to be added.
          if ((index + 1) != param_regions.length) {
              filter += " OR "
          }
      })
      filter += ")"
  }

  var request = {
    auth: "auth_google",
    pagination: "google_pagination",
    host: "compute.googleapis.com",
    ignore_status: [403,404],
    path: "/compute/v1/projects/" + projectID + "/aggregated/addresses",
    query_params: {
      "filter": filter
    }
  }
  EOF
end

script "js_sanitize_addresses", type: "javascript" do
  parameters "ds_aggregated_addresses"
  result "addresses"
  code <<-EOF
  var addresses = []

  _.each(ds_aggregated_addresses, function (project_regions) {
      // Addresses of current project.
      var project_addresses = []

      _.each(project_regions.items, function (region, regionKey) {
          if (region.addresses) {
              project_addresses = _.union(project_addresses, _.map(region.addresses, function (address) {
                  var region = regionKey

                  // All regions (except "global") have this pattern: regions/[region_name] so, we separate them
                  // and take value from position 1 that's actual region name.
                  if (region != "global") {
                      region = region.split("/")[1]
                  }

                  address.region = region
                  address.projectID = project_regions.projectID
                  address.projectNumber = project_regions.projectNumber
                  address.projectName = project_regions.projectName

                  return address
              }))
          }
      })

      addresses = _.union(addresses, project_addresses)
  })
  EOF
end

script "js_recommenders", type: "javascript" do
  parameters "ds_sanitize_addresses"
  result "recommenders"
  code <<-EOF
  var recommenders = []

  _.each(ds_sanitize_addresses, function (address) {
      var objectToFind = { projectID: address.projectID, region: address.region }
      var found = _.findWhere(recommenders, objectToFind)

      // If record with same projectID-region was found we don't add it to recommenders,
      // it help us to prevent duplicates and avoid extra calls to Recommender API.
      if (!found) {
          recommenders.push(objectToFind)
      }
  })
  EOF
end

script "js_recommender_call", type: "javascript" do
  parameters "projectID", "region"
  result "request"
  code <<-EOF
  var now = new Date().getTime();
  var sleepDuration = 10000
  while(new Date().getTime() < now + sleepDuration){ /* Do nothing */ }
  var request = {
    auth: "auth_google",
    pagination: "google_pagination",
    host: "recommender.googleapis.com",
    ignore_status: 403,
    path: "/v1/projects/"+ projectID +"/locations/" + region + "/recommenders/google.compute.address.IdleResourceRecommender/recommendations",
    query_strings: { alt: "json" }
  }
EOF
end

script "js_addresses_cost_mapping", type:"javascript" do
  result "result"
  parameters  "addresses", "recommendations", "ds_currency_reference"
  code <<-EOS
  var instances = [];
  var result = {};
  var message = ''
  var count = 0;
  
  function formatNumber(number, separator) {
      var numString = number.toString();
      var values = numString.split(".");
      var result = ''
      while (values[0].length > 3) {
          var chunk = values[0].substr(-3)
          values[0] = values[0].substr(0, values[0].length - 3)
          result = separator + chunk + result
      }
      if (values[0].length > 0) {
          result = values[0] + result
      }
      if (values[1] == undefined) {
          return result;
      }
      return result + "." + values[1];
  }
  var total = 0
  var cur = ""
  _.each(addresses, function (address) {
      _.each(recommendations, function (recommendation) {
          if (address.name == recommendation.resourceName) {
              count++
              if (recommendation['currency'] !== undefined) {
                  if (ds_currency_reference[recommendation['currency']] !== undefined) {
                      var cur = ds_currency_reference[recommendation['currency']]['symbol']
                  } else {
                      var cur = "$"
                  }
                  address['savingsCurrency'] = cur
              } else {
                  var cur = "$"
                  var separator = ","
              }
              if (recommendation.costNanos < 0) {
                  recommendation.costNanos = recommendation.costNanos * -1
              }
              if (recommendation.costUnits < 0) {
                  recommendation.costUnits = recommendation.costUnits * -1
              }
              var strNano = "." + recommendation.costNanos
              var combine = recommendation.costUnits + parseFloat(strNano)
              var monthsDuration = parseFloat(recommendation.duration.replace("s", "")) / 2628288
              var monthlySavings = combine / monthsDuration
              total = total + monthlySavings
              address['savings'] = (Math.round(monthlySavings * 1000) / 1000)
              address['savingsCurrency'] = cur
              address['priority'] = recommendation['priority']
              address['primaryImpact'] = recommendation['primaryImpact']
              address['recommenderSubtype'] = recommendation['recommenderSubtype']
              address['state'] = recommendation['state']
              address['service'] = "Other"
              var tags = []
              if (address['tags'] != null) {
                  Object.keys(address.tags).forEach(function (key) {
                      tags.push(key + '=' + address.tags[key])
                  });
              }
              address['tags'] = tags
              instances.push(address)
          }
      })
  })
  if (instances.length != 0) {
      if (count) {
          total = cur + ' ' + formatNumber((Math.round(total * 100) / 100));
          message = "The total estimated monthly savings are " + total;
      } else {
          message = "The Flexera Optima system does not have any data to calculate savings for these resources";
      }
  } else {
      message = "unable to find resources between recommender and resource api";
  }
  result = {
      "instances": instances,
      "message": message
  };
  result.instances = _.sortBy(result.instances, "region");
  result.instances = _.sortBy(result.instances, "projectName");
  EOS
end

###############################################################################
# Policy
###############################################################################

policy "policy_recommendations" do
  validate $ds_addresses_cost_mapping do
    summary_template "{{ rs_project_name }} (Account ID: {{ rs_project_id }}): {{ len data.instances }} rows found for Idle IP Addresses"
    check eq(size(val(data, "instances")), 0)
    escalate $esc_email
    escalate $esc_approve_delete_addresses
    export "instances" do
      resource_level true
      field "projectID" do
        label "Project ID"
      end
      field "projectName" do
        label "Project Name"
      end
      field "projectNumber" do
        label "Project Number"
      end
      field "address" do
        label "Resource ID"
      end
      field "name" do
        label "Resource Name"
      end
      field "kind" do
        label "Resource Type"
      end
      field "region" do
        label "Region"
      end
      field "description" do
        label "Description"
      end
      field "service" do
        label "Service"
      end
      field "savings" do
        label "Estimated Monthly Savings"
      end
      field "savingsCurrency" do
        label "Currency"
      end
      field "priority" do
        label "Priority"
      end
      field "recommenderSubtype" do
        label "Sub Type"
      end
      field "state" do
        label "State"
      end
      field "status" do
        label "Status"
      end
      field "id" do
        label "ID"
      end
    end
  end
end

###############################################################################
# Escalations
###############################################################################

escalation "esc_email" do
  automatic true
  label "Send Email"
  description "Send incident email"
  email $param_emails
end

escalation "esc_approve_delete_addresses" do
  automatic contains($param_automatic_action, "Delete IP Addresses")
  label "Delete IP Addresses"
  description "Approval to delete all selected IP addresses"
  run "delete_addresses", data, $param_log_to_cm_audit_entries, rs_optima_host
end

###############################################################################
# Cloud Workflow
###############################################################################

# https://cloud.google.com/compute/docs/reference/rest/v1/addresses/delete
define delete_addresses($data,$param_log_to_cm_audit_entries, $$rs_optima_host) return $all_responses do
  $$debug = $param_log_to_cm_audit_entries == "Yes"
  $all_responses = []
  $syslog_subject = "Google Idle IP Addresses: "
  call sys_log(join([$syslog_subject, "Identified Addresses"]),to_s($data))
  foreach $item in $data do
    sub on_error: handle_error($response) do
      $response = http_delete(
        url: $item["selfLink"],
        auth: $$auth_google,
        headers: {
          "cache-control": "no-cache",
          "content-type": "application/json"
        }
      )
      $all_responses << $response
    end
  end
  call sys_log(join([$syslog_subject, "Responses"]),to_s($all_responses))
end

define handle_error($response) do
  $status_code = $response["code"]
  $syslog_subject = "Google Idle IP Addresses Deletion Error: "
  call sys_log(join([$syslog_subject, $status_code]),to_s($response))
  $_error_behavior = "skip"
end

define sys_log($subject, $detail) do
  # Create empty errors array if doesn't already exist
  if !$$errors
    $$errors = []
  end
  # Check if debug is enabled
  if $$debug
    # Append to global $$errors
    # This is the suggested way to capture errors
    $$errors << "Unexpected error for " + $subject + "\n  " + to_s($detail)
    # If Flexera NAM Zone, create audit_entries [to be deprecated]
    # This is the legacy method for capturing errors and only supported on Flexera NAM
    if $$rs_optima_host == "api.optima.flexeraeng.com"
      # skip_error_and_append is used to catch error if rs_cm.audit_entries.create fails unexpectedly
      $task_label = "Creating audit entry for " + $subject
      sub task_label: $task, on_error: skip_error_and_append($task) do
        rs_cm.audit_entries.create(
          notify: "None",
          audit_entry: {
            auditee_href: @@account,
            summary: $subject,
            detail: $detail
          }
        )
      end # End sub on_error
    end # End if rs_optima_host
  end # End if debug is enabled
end

define skip_error_and_append($subject) do
  $$errors << "Unexpected error for " + $subject + "\n  " + to_s($_error)
  $_error_behavior = "skip"
end

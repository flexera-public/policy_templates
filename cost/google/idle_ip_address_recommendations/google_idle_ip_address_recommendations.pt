name "Google Idle IP Address Recommender"
rs_pt_ver 20180301
type "policy"
short_description "This Policy finds Google Idle IP Address Recommendations and reports when it finds them. See the [README](https://github.com/flexera-public/policy_templates/tree/master/cost/google/idle_ip_address_recommendations) and [docs.flexera.com/flexera/EN/Automation](https://docs.flexera.com/flexera/EN/Automation/AutomationGS.htm) to learn more."
long_description ""
severity "low"
category "Cost"
default_frequency "weekly"
info(
  version: "3.0",
  provider: "Google",
  service: "Compute",
  policy_set: "Unused IP Addresses",
  recommendation_type: "Usage Reduction"
)

###############################################################################
# Parameters
###############################################################################

parameter "param_email" do
  type "list"
  category "Policy Settings"
  label "Email Addresses"
  description "A list of email addresses to notify."
  default []
end

parameter "param_min_savings" do
  type "number"
  category "Policy Settings"
  label "Minimum Savings Threshold"
  description "Minimum potential savings required to generate a recommendation."
  min_value 0
  default 0
end

parameter "param_projects_allow_or_deny" do
  type "string"
  category "Filters"
  label "Allow/Deny Projects"
  description "Allow or Deny entered Projects. See the README for more details."
  allowed_values "Allow", "Deny"
  default "Allow"
end

parameter "param_projects_list" do
  type "list"
  category "Filters"
  label "Allow/Deny Projects List"
  description "A list of allowed or denied Subscription IDs/names. See the README for more details."
  default []
end

parameter "param_regions_allow_or_deny" do
  type "string"
  category "Filters"
  label "Allow/Deny Regions"
  description "Allow or Deny entered regions. See the README for more details."
  allowed_values "Allow", "Deny"
  default "Allow"
end

parameter "param_regions_list" do
  type "list"
  category "Filters"
  label "Allow/Deny Regions List"
  description "A list of allowed or denied regions. See the README for more details."
  default []
end

parameter "param_exclusion_labels" do
  type "list"
  category "Filters"
  label "Exclusion Labels (Key:Value)"
  description "Google labels to ignore resources that you don't want to produce recommendations for. Use Key:Value format for specific label key/value pairs, and Key:* format to match any resource with a particular key, regardless of value. Examples: env:production, DO_NOT_DELETE:*"
  allowed_pattern /(^$)|[\w]*\:.*/
  default []
end

parameter "param_automatic_action" do
  type "list"
  category "Actions"
  label "Automatic Actions"
  description "When this value is set, this policy will automatically take the selected action."
  allowed_values ["Delete IP Addresses"]
  default []
end

###############################################################################
# Authentication
###############################################################################

credentials "auth_google" do
  schemes "oauth2"
  label "Google"
  description "Select the Google Cloud Credential from the list."
  tags "provider=gce"
end

credentials "auth_flexera" do
  schemes "oauth2"
  label "Flexera"
  description "Select Flexera One OAuth2 credentials"
  tags "provider=flexera"
end

###############################################################################
# Pagination
###############################################################################

pagination "pagination_google" do
  get_page_marker do
    body_path "nextPageToken"
  end
  set_page_marker do
    query "pageToken"
  end
end

###############################################################################
# Datasources & Scripts
###############################################################################

# Get applied policy metadata for use later
datasource "ds_applied_policy" do
  request do
    auth $auth_flexera
    host rs_governance_host
    path join(["/api/governance/projects/", rs_project_id, "/applied_policies/", policy_id])
    header "Api-Version", "1.0"
  end
end

# Gather local currency info
datasource "ds_currency_reference" do
  request do
    host "raw.githubusercontent.com"
    path "/rightscale/policy_templates/master/cost/scheduled_reports/currency_reference.json"
    header "User-Agent", "RS Policies"
  end
end

datasource "ds_currency_code" do
  request do
    auth $auth_flexera
    host rs_optima_host
    path join(["/bill-analysis/orgs/", rs_org_id, "/settings/currency_code"])
    header "Api-Version", "0.1"
    header "User-Agent", "RS Policies"
    ignore_status [403]
  end
  result do
    encoding "json"
    field "id", jmes_path(response, "id")
    field "value", jmes_path(response, "value")
  end
end

datasource "ds_currency_target" do
  run_script $js_currency_target, $ds_currency_reference, $ds_currency_code
end

script "js_currency_target", type:"javascript" do
  parameters "ds_currency_reference", "ds_currency_code"
  result "result"
  code <<-EOS
  // Default to USD if currency is not found
  result = ds_currency_reference['USD']

  if (ds_currency_code['value'] != undefined && ds_currency_reference[ds_currency_code['value']] != undefined) {
    result = ds_currency_reference[ds_currency_code['value']]
  }
EOS
end

datasource "ds_google_projects" do
  request do
    auth $auth_google
    pagination $pagination_google
    host "cloudresourcemanager.googleapis.com"
    path "/v1/projects/"
    query "filter", "(lifecycleState:ACTIVE)"
  end
  result do
    encoding "json"
    collect jmes_path(response, "projects[*]") do
      field "number", jmes_path(col_item, "projectNumber")
      field "id", jmes_path(col_item, "projectId")
      field "name", jmes_path(col_item, "name")
    end
  end
end

datasource "ds_google_projects_filtered" do
  run_script $js_google_projects_filtered, $ds_google_projects, $param_projects_allow_or_deny, $param_projects_list
end

script "js_google_projects_filtered", type: "javascript" do
  parameters "ds_google_projects", "param_projects_allow_or_deny", "param_projects_list"
  result "result"
  code <<-EOS
  if (param_projects_list.length > 0) {
    result = _.filter(ds_google_projects, function(project) {
      include_project = _.contains(param_projects_list, project['id']) || _.contains(param_projects_list, project['name']) || _.contains(param_projects_list, project['number'])

      if (param_projects_allow_or_deny == "Deny") {
        include_project = !include_project
      }

      return include_project
    })
  } else {
    result = ds_google_projects
  }
EOS
end

datasource "ds_ip_address_lists" do
  iterate $ds_google_projects_filtered
  request do
    auth $auth_google
    pagination $pagination_google
    host "compute.googleapis.com"
    path join(["/compute/v1/projects/", val(iter_item, "id"), "/aggregated/addresses"])
    query "filter", '(status != "IN_USE") AND (addressType != "INTERNAL")'
    ignore_status [403, 404]
  end
  result do
    encoding "json"
    field "items", jmes_path(response, "items")
    field "projectId", val(iter_item, "id")
    field "projectNumber", val(iter_item, "number")
    field "projectName", val(iter_item, "name")
  end
end

datasource "ds_ip_addresses_region_filtered" do
  run_script $js_ip_addresses_region_filtered, $ds_ip_address_lists, $param_regions_allow_or_deny, $param_regions_list
end

script "js_ip_addresses_region_filtered", type: "javascript" do
  parameters "ds_ip_address_lists", "param_regions_allow_or_deny", "param_regions_list"
  result "result"
  code <<-EOS
  result = []

  _.each(ds_ip_address_lists, function(ip_list) {
    _.each(_.keys(ip_list['items']), function(key) {
      region = "global"
      if (key != "global") { region = key.split("/")[1] }

      if (param_regions_list.length == 0) {
        include_region = true
      } else {
        include_region = _.contains(param_regions_list, region)
        if (param_regions_allow_or_deny == "Deny") { include_region = !include_region }
      }

      if (include_region && typeof(ip_list['items'][key]['addresses']) == 'object') {
        _.each(ip_list['items'][key]['addresses'], function(address) {
          result.push({
            projectId: ip_list['projectId'],
            projectNumber: ip_list['projectNumber'],
            projectName: ip_list['projectName'],
            region: region,
            id: address['id'],
            address: address['address'],
            name: address['name'],
            labels: address['labels'],
            description: address['description'],
            type: address['kind'],
            addressType: address['addressType'],
            networkTier: address['networkTier'],
            selfLink: address['selfLink'],
            status: address['status'],
            creationTime: new Date(address['creationTimestamp']).toISOString()
          })
        })
      }
    })
  })
EOS
end

datasource "ds_ip_addresses" do
  run_script $js_ip_addresses, $ds_ip_addresses_region_filtered, $param_exclusion_labels
end

script "js_ip_addresses", type: "javascript" do
  parameters "ds_ip_addresses_region_filtered", "param_exclusion_labels"
  result "result"
  code <<-EOS
  if (param_exclusion_labels.length > 0) {
    result = _.reject(ds_ip_addresses_region_filtered, function(ip) {
      ip_labels = []

      if (typeof(ip['labels']) == 'object') {
        _.each(Object.keys(ip['labels']), function(key) {
          ip_labels.push([key, ":", ip['labels'][key]].join(''))
          ip_labels.push([key, ":*"].join(''))
        })
      }

      exclude_ip = false

      _.each(param_exclusion_labels, function(exclusion_label) {
        if (_.contains(ip_labels, exclusion_label)) {
          exclude_ip = true
        }
      })

      return exclude_ip
    })
  } else {
    result = ds_ip_addresses_region_filtered
  }
EOS
end

datasource "ds_recommender_requests" do
  run_script $js_recommender_requests, $ds_ip_addresses
end

script "js_recommender_requests", type: "javascript" do
  parameters "ds_ip_addresses"
  result "result"
  code <<-EOS
  result = []

  _.each(ds_ip_addresses, function(address) {
    request = {
      projectId: address['projectId'],
      region: address['region']
    }

    if (_.findWhere(result, request) == undefined) {
      request['number'] = result.length + 1
      result.push(request)
    }
  })
EOS
end

datasource "ds_recommendations" do
  iterate $ds_recommender_requests
  request do
    run_script $js_recommendations, val(iter_item, "projectId"), val(iter_item, "region"), val(iter_item, "number")
  end
  result do
    encoding "json"
    collect jmes_path(response, "recommendations[*]") do
      field "projectId", val(iter_item, "projectId")
      field "region", val(iter_item, "region")
      field "id", jmes_path(col_item, "name")
      field "description", jmes_path(col_item, "description")
      field "resourceLink", jmes_path(col_item, "content.overview.resource")
      field "resourceName", jmes_path(col_item, "content.overview.resourceName")
      field "primaryImpact", jmes_path(col_item, "primaryImpact")
      field "costUnits", jmes_path(col_item, "primaryImpact.costProjection.cost.units")
      field "costNanos", jmes_path(col_item, "primaryImpact.costProjection.cost.nanos")
      field "duration", jmes_path(col_item, "primaryImpact.costProjection.duration")
      field "currency", jmes_path(col_item, "primaryImpact.costProjection.cost.currencyCode")
      field "priority", jmes_path(col_item, "priority")
      field "recommenderSubtype", jmes_path(col_item, "recommenderSubtype")
      field "state", jmes_path(col_item, "stateInfo.state")
    end
  end
end

script "js_recommendations", type: "javascript" do
  parameters "projectId", "region", "number"
  result "request"
  code <<-EOS
  // If 100 requests have been made, wait 1 minute to avoid throttling
  if (number % 100 === 0) {
    now = new Date().getTime()
    wait_time = 60000 // Amount of time to wait in milliseconds
    while(new Date().getTime() < now + wait_time) { /* Do nothing */ }
  }

  var request = {
    auth: "auth_google",
    pagination: "pagination_google",
    host: "recommender.googleapis.com",
    ignore_status: 403,
    path: "/v1/projects/"+ projectId + "/locations/" + region + "/recommenders/google.compute.address.IdleResourceRecommender/recommendations",
    query_strings: { alt: "json" }
  }
EOS
end

# Branching logic:
# This datasource returns an empty array if the target currency is USD.
# This prevents ds_currency_conversion from running if it's not needed.
datasource "ds_conditional_currency_conversion" do
  run_script $js_conditional_currency_conversion, $ds_currency_target, $ds_recommendations
end

script "js_conditional_currency_conversion", type: "javascript" do
  parameters "ds_currency_target", "ds_recommendations"
  result "result"
  code <<-EOS
  result = []
  from_currency = "USD"

  if (ds_recommendations.length > 0) {
    from_currency = ds_recommendations[0]["currency"]
  }

  // Make the request only if the target currency is not USD
  if (ds_currency_target['code'] != from_currency) {
    result = [{ from: from_currency }]
  }
EOS
end

datasource "ds_currency_conversion" do
  # Only make a request if the target currency is not USD
  iterate $ds_conditional_currency_conversion
  request do
    host "api.xe-auth.flexeraeng.com"
    path "/prod/{proxy+}"
    query "from", val(iter_item, 'from')
    query "to", val($ds_currency_target, 'code')
    query "amount", "1"
    # Ignore currency conversion if API has issues
    ignore_status [400, 404, 502]
  end
  result do
    encoding "json"
    field "from", jmes_path(response, "from")
    field "to", jmes_path(response, "to")
    field "amount", jmes_path(response, "amount")
    field "year", jmes_path(response, "year")
  end
end

datasource "ds_currency" do
  run_script $js_currency, $ds_currency_target, $ds_currency_conversion
end

script "js_currency", type:"javascript" do
  parameters "ds_currency_target", "ds_currency_conversion"
  result "result"
  code <<-EOS
  result = ds_currency_target
  result['exchange_rate'] = 1

  if (ds_currency_conversion['to'] != undefined) {
    currency_code = ds_currency_target['code']
    current_month = parseInt(new Date().toISOString().split('-')[1])

    conversion_block = _.find(ds_currency_conversion['to'][currency_code], function(item) {
      return item['month'] == current_month
    })

    if (conversion_block != undefined) {
      result['exchange_rate'] = conversion_block['monthlyAverage']
    }
  }
EOS
end

datasource "ds_recommendations_incident" do
  run_script $js_recommendations_incident, $ds_ip_addresses, $ds_recommendations, $ds_currency, $ds_currency_conversion, $ds_applied_policy, $param_min_savings
end

script "js_recommendations_incident", type:"javascript" do
  parameters "ds_ip_addresses", "ds_recommendations", "ds_currency", "ds_currency_conversion", "ds_applied_policy", "param_min_savings"
  result "result"
  code <<-'EOS'
  // Function for formatting currency numbers later
  function formatNumber(number, separator) {
    var numString = number.toString()
    var values = numString.split(".")
    var formatted_number = ''

    while (values[0].length > 3) {
      var chunk = values[0].substr(-3)
      values[0] = values[0].substr(0, values[0].length - 3)
      formatted_number = separator + chunk + formatted_number
    }

    if (values[0].length > 0) { formatted_number = values[0] + formatted_number }

    if (values[1] == undefined) { return formatted_number }

    return formatted_number + "." + values[1]
  }

  address_object = {}

  _.each(ds_ip_addresses, function(address) {
    selfLink = address['selfLink'].replace("https://www.googleapis.com/compute/v1/", "")
    address_object[selfLink] = address
  })

  result = []
  total_savings = 0.0

  _.each(ds_recommendations, function(recommendation) {
    resource_link = recommendation['resourceLink'].replace("//compute.googleapis.com/", "")

    address = null
    if (typeof(address_object[resource_link]) == 'object') { address = address_object[resource_link] }

    if (address != null) {
      costNanos = recommendation['costNanos']
      if (costNanos == null || costNanos == undefined) { costNanos = 0 }
      if (costNanos != null && costNanos != undefined) { costNanos = Number(costNanos) * -1 }

      costUnits = recommendation['costUnits']
      if (costUnits == null || costUnits == undefined) { costUnits = 0 }
      if (costUnits != null && costUnits != undefined) { costUnits = Number(costUnits) * -1 }

      savings = 0.0
      duration = parseFloat(recommendation['duration'].replace("s", "")) / 2628288
      if (duration != 0) { savings = (costUnits + costNanos * Math.pow(10, -9)) / duration * ds_currency['exchange_rate']}

      if (savings >= param_min_savings) {
        total_savings += savings

        labels = []

        if (typeof(address['labels']) == 'object') {
          _.each(Object.keys(address['labels']), function(key) {
            labels.push([key, "=", address['labels'][key]].join(''))
          })
        }

        result.push({
          accountID: address['projectId'],
          accountName: address['projectName'],
          projectNumber: address['projectNumber'],
          region: address['region'],
          resourceID: address['id'],
          ipAddress: address['address'],
          resourceName: address['name'],
          description: address['description'],
          resourceType: address['type'],
          addressType: address['addressType'],
          networkTier: address['networkTier'],
          selfLink: address['selfLink'],
          status: address['status'],
          creationTime: address['creationTime'],
          priority: recommendation['priority'],
          primaryImpact: recommendation['primaryImpact'],
          primaryImpactCategory: recommendation['primaryImpact']['category'],
          recommendationDetails: recommendation['description'],
          recommenderSubtype: recommendation['recommenderSubtype'],
          state: recommendation['state'],
          policy_name: ds_applied_policy['name'],
          tags: labels.join(', '),
          savings: parseFloat(savings.toFixed(3)),
          savingsCurrency: ds_currency['symbol'],
          service: "Other",
          total_savings: "",
          message: ""
        })
      }
    }
  })

  // Sort by descending order of savings value
  result = _.sortBy(result, function(item) { return item['savings'] * -1 })

  savings_message = [
    ds_currency['symbol'], ' ',
    formatNumber(parseFloat(total_savings).toFixed(2), ds_currency['t_separator'])
  ].join('')

  // Message for incident output
  total_ips = ds_ip_addresses.length.toString()
  total_unused_ips = result.length.toString()
  unused_ips_percentage = (total_unused_ips / total_ips * 100).toFixed(2).toString() + '%'

  ip_noun = "address"
  if (total_ips > 1) { ip_noun = "addresses" }

  ip_verb = "is"
  if (total_unused_ips > 1) { ip_verb = "are" }

  findings = [
    "Out of ", total_ips , " IP ", ip_noun, " analyzed, ",
    total_unused_ips, " (", unused_ips_percentage,
    ") ", ip_verb, " unused and recommended for deletion.\n\n"
  ].join('')

  disclaimer = "Recommendations are generated by Google Cloud. Please refer to Google's documentation if different recommendations are desired."

  // Dummy item to ensure that the check statement in the policy executes at least once
  result.push({
    id: "",                    ipAddress: "",          accountID: "",
    projectNumber: "",         accountName: "",        region: "",
    resourceID: "",            resourceName: "",       tags: "",
    description: "",           resourceType: "",       selfLink: "",
    status: "",                version: "",            description: "",
    priority: "",              primaryImpact: "",      primaryImpactCategory: "",
    recommenderSubtype: "",    state: "",              policy_name: "",
    savings: "",               savingsCurrency: "",    service: "",
    total_savings: "",         message: ""
  })

  result[0]['total_savings'] = savings_message
  result[0]['message'] = findings + disclaimer
EOS
end

###############################################################################
# Policy
###############################################################################

policy "policy_recommendations" do
  validate_each $ds_recommendations_incident do
    summary_template "{{ with index data 0 }}{{ .policy_name }}{{ end }}: {{ len data }} Google Idle IP Addresses Found"
    detail_template <<-'EOS'
    **Potential Monthly Savings:** {{ with index data 0 }}{{ .total_savings }}{{ end }}

    {{ with index data 0 }}{{ .message }}{{ end }}
    EOS
    check eq(val(item, "resourceID"), "")
    escalate $esc_email
    escalate $esc_delete_ip_address
    hash_exclude "tags", "savings", "savingsCurrency", "total_savings", "message"
    export do
      resource_level true
      field "accountID" do
        label "Project ID"
      end
      field "accountName" do
        label "Project Name"
      end
      field "projectNumber" do
        label "Project Number"
      end
      field "ipAddress" do
        label "IP Address"
      end
      field "resourceID" do
        label "Resource ID"
      end
      field "resourceName" do
        label "Resource Name"
      end
      field "resourceType" do
        label "Resource Type"
      end
      field "region" do
        label "Region"
      end
      field "primaryImpactCategory" do
        label "Primary Impact Category"
      end
      field "tags" do
        label "Labels"
      end
      field "service" do
        label "Service"
      end
      field "savings" do
        label "Estimated Monthly Savings"
      end
      field "savingsCurrency" do
        label "Currency"
      end
      field "priority" do
        label "Priority"
      end
      field "recommendationDetails" do
        label "Recommendation"
      end
      field "recommenderSubtype" do
        label "Recommendation Sub Type"
      end
      field "state" do
        label "State"
      end
      field "status" do
        label "Status"
      end
      field "selfLink" do
        label "Resource Link"
      end
      field "id" do
        label "ID"
        path "resourceID"
      end
    end
  end
end

###############################################################################
# Escalations
###############################################################################

escalation "esc_email" do
  automatic true
  label "Send Email"
  description "Send incident email"
  email $param_email
end

escalation "esc_delete_ip_address" do
  automatic contains($param_automatic_action, "Delete IP Addresses")
  label "Delete IP Addresses"
  description "Approval to delete all selected IP addresses"
  run "delete_ip_addresses", data
end

###############################################################################
# Cloud Workflow
###############################################################################

define delete_ip_addresses($data) return $all_responses do
  $$all_responses = []

  foreach $address in $data do
    sub on_error: handle_error() do
      call delete_ip_address($address)
    end
  end

  if inspect($$errors) != "null"
    raise join($$errors,"\n")
  end
end

define delete_ip_address($address) do
  task_label("DELETE " + $address['selfLink'])

  $response = http_delete(
    url: $address['selfLink'],
    auth: $$auth_google,
    headers: {
      "cache-control": "no-cache",
      "content-type": "application/json"
    }
  )

  task_label("Delete Google IP address response: " + $address["ipAddress"] + " " + to_json($response))
  $$all_responses << to_json({"req": "DELETE " + $address['selfLink'], "resp": $response})

  if $response["code"] != 202 && $response["code"] != 200
    raise "Unexpected response deleting Google IP address: "+ $address["ipAddress"] + " " + to_json($response)
  else
    task_label("Delete Google IP address successful: " + $address["ipAddress"])
  end
end

define handle_error() do
  if !$$errors
    $$errors = []
  end
  $$errors << $_error["type"] + ": " + $_error["message"]
  # We check for errors at the end, and raise them all together
  # Skip errors handled by this definition
  $_error_behavior = "skip"
end

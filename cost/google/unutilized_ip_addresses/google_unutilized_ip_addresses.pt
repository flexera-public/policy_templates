name "Google Unutilized IP Addresses"
rs_pt_ver 20180301
type "policy"
short_description "Checks Google for Unutilized IP Addresses and deletes them. See the [README](https://github.com/flexera/policy_templates/tree/master/cost/google/unutilized_ip_addresses/) and [docs.flexera.com/flexera/EN/Automation](https://docs.flexera.com/flexera/EN/Automation/AutomationGS.htm) to learn more."
long_description ""
severity "low"
category "Cost"
default_frequency "daily"
info(
      version: "2.9",
      provider: "GCE",
      service: "",
      policy_set: "Unused IP Addresses"
    )

###############################################################################
# Parameters
###############################################################################

parameter "param_email" do
  type "list"
  label "Email addresses to notify"
  description "Email addresses of the recipients you wish to notify when new incidents are created"
end

parameter "param_exclude_labels" do
  category "User Inputs"
  label "Exclusion Label Key:Value"
  description "Cloud native label to ignore IP addresses. Format: Key:Value"
  type "string"
  allowed_pattern /(^$)|([\w]?)+\:([\w]?)/
end

parameter "param_automatic_action" do
  type "list"
  label "Automatic Actions"
  description "When this value is set, this policy will automatically take the selected action(s)"
  allowed_values ["Delete IP Addresses"]
end

parameter "param_log_to_cm_audit_entries" do
  type "string"
  label "Log to CM Audit Entries"
  description "Boolean for whether or not to log any debugging information from actions to CM Audit Entries, this should be left set to No on Flexera EU"
  default "No"
  allowed_values "Yes", "No"
end

###############################################################################
# Authentication
###############################################################################

# authenticate with Google
credentials "auth_google" do
  schemes "oauth2"
  label "Google"
  description "Select the Google Cloud Credential from the list."
  tags "provider=gce"
end

###############################################################################
# Pagination
###############################################################################

pagination "google_pagination" do
  get_page_marker do
    body_path "nextPageToken"
  end
  set_page_marker do
    query "pageToken"
  end
end

###############################################################################
# Datasources
###############################################################################

#get all active google project
datasource "ds_google_project" do
  request do
    auth $auth_google
    pagination $google_pagination
    host "cloudresourcemanager.googleapis.com"
    path "/v1/projects/"
    query "filter", "lifecycleState=ACTIVE"
  end
  result do
    encoding "json"
    collect jmes_path(response, "projects[*]") do
      field "projectNumber", jmes_path(col_item,"projectNumber")
      field "projectId", jmes_path(col_item,"projectId")
    end
  end
end

#https://cloud.google.com/compute/docs/reference/rest/v1/regions/list
datasource "ds_regions_list" do
  iterate $ds_google_project
  request do
    auth $auth_google
    pagination $google_pagination
    host "compute.googleapis.com"
    path join(["/compute/v1/projects/",val(iter_item, "projectId"),"/regions/"])
    ignore_status [403,404]
  end
  result do
    encoding "json"
      collect jmes_path(response, "items[*]") do
      field "region", jmes_path(col_item, "name")
      field "projectId", val(iter_item, "projectId")
    end
  end
end


datasource "ds_addresses" do
  iterate $ds_regions_list
  request do
    run_script $js_get_addresses, val(iter_item, "projectId"), val(iter_item, "region")
  end
  result do
    encoding "json"
    collect jmes_path(response,"items[*]") do
      field "address", jmes_path(col_item,"address")
      field "addressType", jmes_path(col_item,"addressType")
      field "creationTimestamp", jmes_path(col_item,"creationTimestamp")
      field "description", jmes_path(col_item,"description")
      field "id", jmes_path(col_item,"id")
      field "name", jmes_path(col_item,"name")
      field "purpose", jmes_path(col_item,"purpose")
      field "selfLink", jmes_path(col_item,"selfLink")
      field "status", jmes_path(col_item,"status")
      field "subnetwork", jmes_path(col_item,"subnetwork")
      field "labels", jmes_path(col_item,"labels")
      field "projectId", val(iter_item, "projectId")
    end
  end
end

datasource "ds_sanitize_data" do
  run_script $js_sanitize_data, $ds_addresses, $param_exclude_labels
end

###############################################################################
# Scripts
###############################################################################

script "js_get_addresses", type: "javascript" do
  result "request"
  parameters "project","region"
  code <<-EOS
    request = {
      "auth": "auth_google",
      "host": "www.googleapis.com",
      "verb": "GET",
      "path": "/compute/beta/projects/"+project+"/regions/"+region+"/addresses",
      "ignore_status": [403,404]
      "headers": {
        "User-Agent": "RS Policies",
        "Content-Type": "application/json"
      }
      "query_params": {
        "filter": '(status != "IN_USE") AND (addressType != "INTERNAL")'
      }
    }
  EOS
end

script "js_sanitize_data", type: "javascript" do
  result "results"
  parameters "ds_addresses", "param_exclude_labels"
  code <<-EOS
    label_key = param_exclude_labels.split(':')[0]
    label_value = param_exclude_labels.split(':')[1]

    results = _.filter(ds_addresses, function(data){
      if ( data.address != null ){
        if ( data.labels != null && data.labels !== undefined ){
          if ( data.labels[label_key] != null && data.labels[label_key] !== undefined ){
            if ( data.labels[label_key] != label_value ){
              return data
            }
          } else {
            return data
          }
        }else{
          return data
        }
      }
    })
    results= _.sortBy(results, 'projectId');
  EOS
end

###############################################################################
# Policy
###############################################################################

policy "pol_unutilized_addresses" do
  validate_each $ds_sanitize_data do
    summary_template "{{ rs_project_name }} (Account ID: {{ rs_project_id }}): {{ len data }} Google Unutilized IP Addresses Discovered"
    check eq(0,1)
    escalate $email
    escalate $approve_delete_addresses
    export do
      resource_level true
      field "projectId" do
        label "Project ID"
      end
      field "address" do
        label "Address"
      end
      field "name" do
        label "Name"
      end
      field "id" do
        label "ID"
      end
      field "description" do
        label "Description"
      end
      field "addressType" do
        label "Address Type"
      end
      field "creationTimestamp" do
        label "Creation Timestamp"
      end
      field "purpose" do
        label "Purpose"
      end
      field "status" do
        label "Status"
      end
      field "subnetwork" do
        label "Subnetwork"
      end
      field "selfLink" do
        label "Self Link"
      end
    end
  end
end


###############################################################################
# Escalations
###############################################################################

escalation "email" do
  automatic true
  label "Send Email"
  description "Send incident email"
  email $param_email
end

escalation "approve_delete_addresses" do
  automatic contains($param_automatic_action, "Delete IP Addresses")
  label "Delete IP Addresses"
  description "Approval to delete all selected IP addresses"
  run "delete_addresses", data, $param_log_to_cm_audit_entries
end

###############################################################################
# Cloud Workflow
###############################################################################

# https://cloud.google.com/compute/docs/reference/rest/v1/addresses/delete
define delete_addresses($data,$param_log_to_cm_audit_entries) return $all_responses do
  $$debug = $param_log_to_cm_audit_entries == "Yes"
  $all_responses = []
  $syslog_subject = "Google Unutilized IP Addresses: "
  call sys_log(join([$syslog_subject, "Identified Addresses"]),to_s($data))
  foreach $item in $data do
    sub on_error: handle_error($response) do
      $response = http_delete(
        url: $item["selfLink"],
        auth: $$auth_google,
        headers: {
          "cache-control": "no-cache",
          "content-type": "application/json"
        }
      )
      $all_responses << $response
    end
  end
  call sys_log(join([$syslog_subject, "Responses"]),to_s($all_responses))
end

define handle_error($response) do
  $status_code = $response["code"]
  $syslog_subject = "Google Unutilized IP Addresses Deletion Error: "
  call sys_log(join([$syslog_subject, $status_code]),to_s($response))
  $_error_behavior = "skip"
end

define sys_log($subject, $detail) do
  if $$debug
    rs_cm.audit_entries.create(
      notify: "None",
      audit_entry: {
        auditee_href: @@account,
        summary: $subject,
        detail: $detail
      }
    )
  end
end

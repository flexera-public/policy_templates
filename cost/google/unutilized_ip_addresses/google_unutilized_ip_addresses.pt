name "Google Unutilized IP Addresses"
rs_pt_ver 20180301
type "policy"
short_description "Checks Google for Unutilized IP Addresses and deletes them. See the [README](https://github.com/flexera/policy_templates/tree/master/cost/google/unutilized_ip_addresses/) and [docs.rightscale.com/policies](https://docs.rightscale.com/policies/) to learn more."
long_description ""
severity "low"
category "Cost"
info(
      version: "2.0",
      provider: "GCE",
      service: "",
      policy_set: "Unused IP Addresses"
    )

###############################################################################
# Permissions
###############################################################################

permission "perm_read_creds" do
  actions   "rs_cm.show_sensitive","rs_cm.index_sensitive"
  resources "rs_cm.credentials"
end

###############################################################################
# Parameters
###############################################################################

parameter "param_email" do
  type "list"
  label "Email addresses to notify"
  description "Email addresses of the recipients you wish to notify when new incidents are created"
end

parameter "param_exclude_labels" do
  category "User Inputs"
  label "Exclusion Label Key:Value"
  description "Cloud native label to ignore IP addresses. Format: Key:Value"
  type "string"
  allowed_pattern /(^$)|([\w]?)+\:([\w]?)/
end

###############################################################################
# Authentication
###############################################################################

# authenticate with Google
credentials "auth_google" do
  schemes "oauth2"
  label "Google"
  description "Select the Google Cloud Credential from the list."
  tags "provider=gce"
end

###############################################################################
# Pagination
###############################################################################

pagination "google_pagination" do
  get_page_marker do
    body_path "nextPageToken"
  end
  set_page_marker do
    query "pageToken"
  end
end

###############################################################################
# Datasources
###############################################################################

#get all google project
datasource "ds_google_project" do
  request do
    auth $auth_google
    pagination $google_pagination
    host "cloudresourcemanager.googleapis.com"
    path "/v1/projects/"
  end
  result do
    encoding "json"
    collect jmes_path(response, "projects[*]") do
      field "projectNumber", jmes_path(col_item,"projectNumber")
      field "projectId", jmes_path(col_item,"projectId")
    end
  end
end

#https://cloud.google.com/compute/docs/reference/rest/v1/regions/list
datasource "ds_regions_list" do
  iterate $ds_google_project
  request do
    auth $auth_google
    pagination $google_pagination
    host "compute.googleapis.com"
    path join(["/compute/v1/projects/",val(iter_item, "projectId"),"/regions/"])
  end
  result do
    encoding "json"
      collect jmes_path(response, "items[*]") do
      field "region", jmes_path(col_item, "name")
      field "projectId", val(iter_item, "projectId")
    end
  end
end


datasource "ds_addresses" do
  iterate $ds_regions_list
  request do
    run_script $js_get_addresses, val(iter_item, "projectId"), val(iter_item, "region")
  end
  result do
    encoding "json"
    collect jmes_path(response,"items[*]") do
      field "address", jmes_path(col_item,"address")
      field "addressType", jmes_path(col_item,"addressType")
      field "creationTimestamp", jmes_path(col_item,"creationTimestamp")
      field "description", jmes_path(col_item,"description")
      field "id", jmes_path(col_item,"id")
      field "name", jmes_path(col_item,"name")
      field "purpose", jmes_path(col_item,"purpose")
      field "selfLink", jmes_path(col_item,"selfLink")
      field "status", jmes_path(col_item,"status")
      field "subnetwork", jmes_path(col_item,"subnetwork")
      field "labels", jmes_path(col_item,"labels")
      field "projectId", val(iter_item, "projectId")	  
    end
  end
end

datasource "ds_sanitize_data" do
  run_script $js_sanitize_data, $ds_addresses, $param_exclude_labels
end

###############################################################################
# Scripts
###############################################################################

script "js_get_addresses", type: "javascript" do
  result "request"
  parameters "project","region"
  code <<-EOS
    request = {
      "auth": "auth_google",
      "host": "www.googleapis.com",
      "verb": "GET",
      "path": "/compute/beta/projects/"+project+"/regions/"+region+"/addresses",
      "headers": {
        "User-Agent": "RS Policies",
        "Content-Type": "application/json"
      }
      "query_params": {
        "filter": 'status!="IN_USE"'
      }
    }
  EOS
end

script "js_sanitize_data", type: "javascript" do
  result "results"
  parameters "ds_addresses", "param_exclude_labels"
  code <<-EOS
    label_key = param_exclude_labels.split(':')[0]
    label_value = param_exclude_labels.split(':')[1]

    results = _.filter(ds_addresses, function(data){
      if ( data.address != null ){
        if ( data.labels != null && data.labels !== undefined ){
          if ( data.labels[label_key] != null && data.labels[label_key] !== undefined ){
            if ( data.labels[label_key] != label_value ){
              return data
            }
          } else {
            return data
          }
        }else{
          return data
        }
      }
    })
    results= _.sortBy(results, 'projectId');	
  EOS
end

###############################################################################
# Policy
###############################################################################

policy "pol_unutilized_addresses" do
  validate_each $ds_sanitize_data do
    summary_template "{{ rs_project_name }} (Account ID: {{ rs_project_id }}): {{ len data }} Google Unutilized IP Addresses Discovered"
    detail_template <<-EOS
# Google Ununtilized Addresses
___
###### Policy Applied in Account: {{ rs_project_name }} (Account ID: {{ rs_project_id }}) within Org: {{ rs_org_name }} (Org ID: {{ rs_org_id }})
EOS
    export do
      field "projectId" do
        label "Project ID"
      end
      field "address" do
        label "Address"
      end
      field "name" do
        label "Name"
      end
      field "id" do
        label "ID"
      end
      field "description" do
        label "Description"
      end
      field "addressType" do
        label "Address Type"
      end
      field "creationTimestamp" do
        label "Creation Timestamp"
      end
      field "purpose" do
        label "Purpose"
      end
      field "status" do
        label "Status"
      end
      field "subnetwork" do
        label "Subnetwork"
      end
    end

    check eq(0,1)
    escalate $email
    escalate $approve_delete_addresses
  end
end


###############################################################################
# Escalations
###############################################################################

escalation "email" do
  email $param_email
end

escalation "approve_delete_addresses" do
  request_approval  do
    label "Approve Resource Deletion"
    description "Approve escalation to run RightScale Cloud Workflow to delete unused IP addresses"
    parameter "approval_reason" do
      type "string"
      label "Reason for Approval"
      description "Explain why you are approving the action"
    end
  end
  run "delete_addresses", data
end

###############################################################################
# Cloud Workflow
###############################################################################

# https://cloud.google.com/compute/docs/reference/rest/v1/addresses/delete
define delete_addresses($data) return $all_responses do
  $$debug=true
  $all_responses = []
  $syslog_subject = "Google Unutilized IP Addresses: "
  call sys_log(join([$syslog_subject, "Identified Addresses"]),to_s($data))
  foreach $item in $data do
    sub on_error: handle_error($response) do
      $response = http_delete(
        url: $item["selfLink"],
        auth: $$auth_google,
        headers: {
          "cache-control": "no-cache",
          "content-type": "application/json"
        }
      )
      $all_responses << $response
    end
  end
  call sys_log(join([$syslog_subject, "Responses"]),to_s($all_responses))
end

define handle_error($response) do 
  $status_code = $response["code"]
  $syslog_subject = "Google Unutilized IP Addresses Deletion Error: "
  call sys_log(join([$syslog_subject, $status_code]),to_s($response))
  $_error_behavior = "skip"
end 

define sys_log($subject, $detail) do
  if $$debug
    rs_cm.audit_entries.create(
      notify: "None",
      audit_entry: {
        auditee_href: @@account,
        summary: $subject,
        detail: $detail
      }
    )
  end
end
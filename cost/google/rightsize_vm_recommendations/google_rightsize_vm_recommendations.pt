name "Google Rightsize VM Recommender"
rs_pt_ver 20180301
type "policy"
short_description "This Policy finds underutilized and idle Google VM instances and downsizes, stops, or deletes them after approval. See the [README](https://github.com/flexera-public/policy_templates/tree/master/cost/google/rightsize_vm_recommendations) and [docs.flexera.com/flexera/EN/Automation](https://docs.flexera.com/flexera/EN/Automation/AutomationGS.htm) to learn more."
long_description ""
doc_link "https://github.com/flexera-public/policy_templates/tree/master/cost/google/rightsize_vm_recommendations"
category "Cost"
severity "low"
default_frequency "weekly"
info(
  version: "3.2.2",
  provider: "Google",
  service: "Compute",
  policy_set: "Rightsize Compute Instances",
  recommendation_type: "Usage Reduction",
  hide_skip_approvals: "true"
)

###############################################################################
# Parameters
###############################################################################

parameter "param_email" do
  type "list"
  category "Policy Settings"
  label "Email Addresses"
  description "A list of email addresses to notify."
  default []
end

parameter "param_min_savings" do
  type "number"
  category "Policy Settings"
  label "Minimum Savings Threshold"
  description "Minimum potential savings required to generate a recommendation."
  min_value 0
  default 0
end

parameter "param_projects_allow_or_deny" do
  type "string"
  category "Filters"
  label "Allow/Deny Projects"
  description "Allow or Deny entered Projects. See the README for more details."
  allowed_values "Allow", "Deny"
  default "Allow"
end

parameter "param_projects_list" do
  type "list"
  category "Filters"
  label "Allow/Deny Projects List"
  description "A list of allowed or denied Subscription IDs/names. See the README for more details."
  default []
end

parameter "param_projects_ignore_sys" do
  type "string"
  category "Filters"
  label "Ignore System Projects"
  description "Whether or not to automatically ignore system projects e.g. projects whose id begins with 'sys-'"
  allowed_values "Yes", "No"
  default "No"
end

parameter "param_projects_ignore_app" do
  type "string"
  category "Filters"
  label "Ignore Google Apps Script Projects"
  description "Whether or not to automatically ignore Google Apps Script projects e.g. projects whose id begins with 'app-'"
  allowed_values "Yes", "No"
  default "No"
end

parameter "param_regions_allow_or_deny" do
  type "string"
  category "Filters"
  label "Allow/Deny Regions"
  description "Allow or Deny entered regions. See the README for more details."
  allowed_values "Allow", "Deny"
  default "Allow"
end

parameter "param_regions_list" do
  type "list"
  category "Filters"
  label "Allow/Deny Regions List"
  description "A list of allowed or denied regions. See the README for more details."
  default []
end

parameter "param_exclusion_labels" do
  type "list"
  category "Filters"
  label "Exclusion Labels"
  description "Cloud native labels to ignore resources that you don't want to produce recommendations for. Enter the Key name to filter resources with a specific Key, regardless of Value, and enter Key==Value to filter resources with a specific Key:Value pair. Other operators and regex are supported; please see the README for more details."
  default []
end

parameter "param_exclusion_labels_boolean" do
  type "string"
  category "Filters"
  label "Exclusion Labels: Any / All"
  description "Whether to filter instances containing any of the specified labels or only those that contain all of them. Only applicable if more than one value is entered in the 'Exclusion Labels' field."
  allowed_values "Any", "All"
  default "Any"
end

parameter "param_idle_or_underutilized" do
  type "string"
  category "Filters"
  label "Report Idle or Underutilized"
  description "Whether to report on idle VM instances, underutilized VM instances, or both."
  allowed_values "Idle & Underutilized", "Idle", "Underutilized"
  default "Idle & Underutilized"
end

parameter "param_automatic_action" do
  type "list"
  category "Actions"
  label "Automatic Actions"
  description "When this value is set, this policy will automatically take the selected action(s)"
  allowed_values ["Downsize VM Instances", "Stop VM Instances", "Delete VM Instances"]
  default []
end

###############################################################################
# Authentication
###############################################################################

credentials "auth_google" do
  schemes "oauth2"
  label "Google"
  description "Select the Google Cloud Credential from the list."
  tags "provider=gce"
end

credentials "auth_flexera" do
  schemes "oauth2"
  label "Flexera"
  description "Select Flexera One OAuth2 credentials"
  tags "provider=flexera"
end

###############################################################################
# Pagination
###############################################################################

pagination "pagination_google" do
  get_page_marker do
    body_path "nextPageToken"
  end
  set_page_marker do
    query "pageToken"
  end
end

###############################################################################
# Datasources & Scripts
###############################################################################

# Table to derive region from zone
datasource "ds_zone_to_region" do
  run_script $js_zone_to_region
end

script "js_zone_to_region", type:"javascript" do
  result "result"
  code <<-EOS
  result = {
    "us-east1-b": "us-east1",
    "us-east1-c": "us-east1",
    "us-east1-d": "us-east1",
    "us-east4-c": "us-east4",
    "us-east4-b": "us-east4",
    "us-east4-a": "us-east4",
    "us-central1-c": "us-central1",
    "us-central1-a": "us-central1",
    "us-central1-f": "us-central1",
    "us-central1-b": "us-central1",
    "us-west1-b": "us-west1",
    "us-west1-c": "us-west1",
    "us-west1-a": "us-west1",
    "europe-west4-a": "europe-west4",
    "europe-west4-b": "europe-west4",
    "europe-west4-c": "europe-west4",
    "europe-west1-b": "europe-west1",
    "europe-west1-d": "europe-west1",
    "europe-west1-c": "europe-west1",
    "europe-west3-c": "europe-west3",
    "europe-west3-a": "europe-west3",
    "europe-west3-b": "europe-west3",
    "europe-west2-c": "europe-west2",
    "europe-west2-b": "europe-west2",
    "europe-west2-a": "europe-west2",
    "asia-east1-b": "asia-east1",
    "asia-east1-a": "asia-east1",
    "asia-east1-c": "asia-east1",
    "asia-southeast1-b": "asia-southeast1",
    "asia-southeast1-a": "asia-southeast1",
    "asia-southeast1-c": "asia-southeast1",
    "asia-northeast1-b": "asia-northeast1",
    "asia-northeast1-c": "asia-northeast1",
    "asia-northeast1-a": "asia-northeast1",
    "asia-south1-c": "asia-south1",
    "asia-south1-b": "asia-south1",
    "asia-south1-a": "asia-south1",
    "australia-southeast1-b": "australia-southeast1",
    "australia-southeast1-c": "australia-southeast1",
    "australia-southeast1-a": "australia-southeast1",
    "southamerica-east1-b": "southamerica-east1",
    "southamerica-east1-c": "southamerica-east1",
    "southamerica-east1-a": "southamerica-east1",
    "asia-east2-a": "asia-east2",
    "asia-east2-b": "asia-east2",
    "asia-east2-c": "asia-east2",
    "asia-northeast2-a": "asia-northeast2",
    "asia-northeast2-b": "asia-northeast2",
    "asia-northeast2-c": "asia-northeast2",
    "asia-northeast3-a": "asia-northeast3",
    "asia-northeast3-b": "asia-northeast3",
    "asia-northeast3-c": "asia-northeast3",
    "asia-south2-a": "asia-south2",
    "asia-south2-b": "asia-south2",
    "asia-south2-c": "asia-south2",
    "asia-southeast2-a": "asia-southeast2",
    "asia-southeast2-b": "asia-southeast2",
    "asia-southeast2-c": "asia-southeast2",
    "australia-southeast2-a": "australia-southeast2",
    "australia-southeast2-b": "australia-southeast2",
    "australia-southeast2-c": "australia-southeast2",
    "europe-central2-a": "europe-central2",
    "europe-central2-b": "europe-central2",
    "europe-central2-c": "europe-central2",
    "europe-north1-a": "europe-north1",
    "europe-north1-b": "europe-north1",
    "europe-north1-c": "europe-north1",
    "europe-southwest1-a": "europe-southwest1",
    "europe-southwest1-b": "europe-southwest1",
    "europe-southwest1-c": "europe-southwest1",
    "europe-west6-a": "europe-west6",
    "europe-west6-b": "europe-west6",
    "europe-west6-c": "europe-west6",
    "northamerica-northeast1-a": "northamerica-northeast1",
    "northamerica-northeast1-b": "northamerica-northeast1",
    "northamerica-northeast1-c": "northamerica-northeast1",
    "northamerica-northeast2-a": "northamerica-northeast2",
    "northamerica-northeast2-b": "northamerica-northeast2",
    "northamerica-northeast2-c": "northamerica-northeast2",
    "us-west2-a": "us-west2",
    "us-west2-b": "us-west2",
    "us-west2-c": "us-west2",
    "us-west3-a": "us-west3",
    "us-west3-b": "us-west3",
    "us-west3-c": "us-west3",
    "us-west4-a": "us-west4",
    "us-west4-b": "us-west4",
    "us-west4-c": "us-west4",
    "us-west5-a": "us-west5",
    "us-west5-b": "us-west5",
    "us-west5-c": "us-west5",
    "us-west6-a": "us-west6",
    "us-west6-b": "us-west6",
    "us-west6-c": "us-west6",
    "us-west7-a": "us-west7",
    "us-west7-b": "us-west7",
    "us-west7-c": "us-west7"
  }
EOS
end

# Get applied policy metadata for use later
datasource "ds_applied_policy" do
  request do
    auth $auth_flexera
    host val($ds_flexera_api_hosts, "flexera")
    path join(["/policy/v1/orgs/", rs_org_id, "/projects/", rs_project_id, "/applied-policies/", policy_id])
  end
end

# Gather local currency info
datasource "ds_currency_reference" do
  request do
    host "raw.githubusercontent.com"
    path "/flexera-public/policy_templates/master/data/currency/currency_reference.json"
    header "User-Agent", "RS Policies"
  end
end

datasource "ds_currency_code" do
  request do
    auth $auth_flexera
    host rs_optima_host
    path join(["/bill-analysis/orgs/", rs_org_id, "/settings/currency_code"])
    header "Api-Version", "0.1"
    header "User-Agent", "RS Policies"
    ignore_status [403]
  end
  result do
    encoding "json"
    field "id", jmes_path(response, "id")
    field "value", jmes_path(response, "value")
  end
end

datasource "ds_currency_target" do
  run_script $js_currency_target, $ds_currency_reference, $ds_currency_code
end

script "js_currency_target", type:"javascript" do
  parameters "ds_currency_reference", "ds_currency_code"
  result "result"
  code <<-EOS
  // Default to USD if currency is not found
  result = ds_currency_reference['USD']

  if (ds_currency_code['value'] != undefined && ds_currency_reference[ds_currency_code['value']] != undefined) {
    result = ds_currency_reference[ds_currency_code['value']]
  }
EOS
end

datasource "ds_google_projects" do
  request do
    auth $auth_google
    pagination $pagination_google
    host "cloudresourcemanager.googleapis.com"
    path "/v1/projects/"
    query "filter", "(lifecycleState:ACTIVE)"
    # Header X-Meta-Flexera has no affect on datasource query, but is required for Meta Policies
    # Forces `ds_is_deleted` datasource to run first during policy execution
    header "Meta-Flexera", val($ds_is_deleted, "path")
  end
  result do
    encoding "json"
    collect jmes_path(response, "projects[*]") do
      field "number", jmes_path(col_item, "projectNumber")
      field "id", jmes_path(col_item, "projectId")
      field "name", jmes_path(col_item, "name")
    end
  end
end

datasource "ds_google_projects_filtered" do
  run_script $js_google_projects_filtered, $ds_google_projects, $param_projects_allow_or_deny, $param_projects_list, $param_projects_ignore_sys, $param_projects_ignore_app
end

script "js_google_projects_filtered", type: "javascript" do
  parameters "ds_google_projects", "param_projects_allow_or_deny", "param_projects_list", "param_projects_ignore_sys", "param_projects_ignore_app"
  result "result"
  code <<-EOS
  if (param_projects_list.length > 0) {
    filtered = _.filter(ds_google_projects, function(project) {
      include_project = _.contains(param_projects_list, project['id']) || _.contains(param_projects_list, project['name']) || _.contains(param_projects_list, project['number'])

      if (param_projects_allow_or_deny == "Deny") {
        include_project = !include_project
      }

      return include_project
    })
  } else {
    filtered = ds_google_projects
  }

  result = _.reject(filtered, function(project) {
    return (project['id'].substring(0, 4) == "sys-" && param_projects_ignore_sys == "Yes") || (project['id'].substring(0, 4) == "app-" && param_projects_ignore_app == "Yes")
  })
EOS
end

datasource "ds_calculated_utilization" do
  iterate $ds_google_projects_filtered
  request do
    auth $auth_google
    verb "POST"
    host "monitoring.googleapis.com"
    path join(["/v3/projects/", val(iter_item, "id"), "/timeSeries:query"])
    body_field "query", "fetch gce_instance | metric compute.googleapis.com/instance/cpu/utilization | within 8d | { group_by sliding(8d), .mean ; group_by sliding(8d), .max ; group_by sliding(8d), . min } | join"
    ignore_status [403, 404]
  end
  result do
    encoding "json"
    collect jmes_path(response, "timeSeriesData[*]") do
      field "resourceName", jmes_path(col_item, "labelValues[3].stringValue")
      field "resourceID", jmes_path(col_item, "labelValues[2].stringValue")
      field "zone", jmes_path(col_item, "labelValues[1].stringValue")
      field "cpuAverage", prod(jmes_path(col_item, "pointData[0].values[0].doubleValue"), 100)
      field "cpuMaximum", prod(jmes_path(col_item, "pointData[0].values[1].doubleValue"), 100)
      field "cpuMinimum", prod(jmes_path(col_item, "pointData[0].values[2].doubleValue"), 100)
      field "projectId", val(iter_item, "id")
      field "projectName", val(iter_item, "name")
      field "projectNumber", val(iter_item, "number")
    end
  end
end

datasource "ds_get_instances" do
  iterate $ds_google_projects_filtered
  request do
    auth $auth_google
    host "compute.googleapis.com"
    path join(["/compute/v1/projects/", val(iter_item, 'id'), "/aggregated/instances"])
    header "User-Agent", "RS Policies"
    header "Content-Type", "application/json"
    ignore_status [403, 404]
  end
  result do
    encoding "json"
    field "instances", jq(response, "[ .items | to_entries | map_values(.value) | map(select(has(\"instances\"))) | .[].instances | .[] | {id,name,selfLink,status,tags,zone,kind,hostname,cpuPlatform,labels,description,machineType} ]")
    field "projectId", val(iter_item, "id")
    field "projectName", val(iter_item, "name")
    field "projectNumber", val(iter_item, "number")
  end
end

datasource "ds_instances" do
  run_script $js_instances, $ds_get_instances, $ds_calculated_utilization, $ds_zone_to_region
end

script "js_instances", type: "javascript" do
  parameters "ds_get_instances", "ds_calculated_utilization", "ds_zone_to_region"
  result "result"
  code <<-EOS
  stats_by_resource = {}

  _.each(ds_calculated_utilization, function(item) {
    id = item['resourceID'].toLowerCase()
    stats_by_resource[id] = item
  })

  result = []

  _.each(ds_get_instances, function(response) {
    _.each(response['instances'], function(instance) {
      if (instance['status'] == "RUNNING") {
        id = instance['id'].toLowerCase()

        cpuAverage = null
        cpuMaximum = null
        cpuMinimum = null

        if (stats_by_resource[id] != undefined) {
          cpuAverage = stats_by_resource[id]['cpuAverage']
          cpuMaximum = stats_by_resource[id]['cpuMaximum']
          cpuMinimum = stats_by_resource[id]['cpuMinimum']
        }

        zone = instance['zone'].split('/')[8]
        region = ds_zone_to_region[zone]

        result.push({
          id: instance['id'],
          name: instance['name'],
          description: instance['description'],
          status: instance['status'],
          selfLink: instance['selfLink'],
          cpuPlatform: instance['cpuPlatform'],
          machineType: instance['machineType'],
          hostname: instance['hostname'],
          kind: instance['kind'],
          labels: instance['labels'],
          projectId: response['projectId'],
          projectName: response['projectName'],
          projectNumber: response['projectNumber'],
          zone: zone,
          region: region,
          cpuAverage: cpuAverage,
          cpuMaximum: cpuMaximum,
          cpuMinimum: cpuMinimum
        })
      }
    })
  })
EOS
end

datasource "ds_instances_label_filtered" do
  run_script $js_instances_label_filtered, $ds_instances, $param_exclusion_labels, $param_exclusion_labels_boolean
end

script "js_instances_label_filtered", type: "javascript" do
  parameters "ds_instances", "param_exclusion_labels", "param_exclusion_labels_boolean"
  result "result"
  code <<-EOS
  comparators = _.map(param_exclusion_labels, function(item) {
    if (item.indexOf('==') != -1) {
      return { comparison: '==', key: item.split('==')[0], value: item.split('==')[1], string: item }
    }

    if (item.indexOf('!=') != -1) {
      return { comparison: '!=', key: item.split('!=')[0], value: item.split('!=')[1], string: item }
    }

    if (item.indexOf('=~') != -1) {
      value = item.split('=~')[1]
      regex = new RegExp(value.slice(1, value.length - 1))
      return { comparison: '=~', key: item.split('=~')[0], value: regex, string: item }
    }

    if (item.indexOf('!~') != -1) {
      value = item.split('!~')[1]
      regex = new RegExp(value.slice(1, value.length - 1))
      return { comparison: '!~', key: item.split('!~')[0], value: regex, string: item }
    }

    // If = is present but none of the above are, assume user error and that the user intended ==
    if (item.indexOf('=') != -1) {
      return { comparison: '==', key: item.split('=')[0], value: item.split('=')[1], string: item }
    }

    // Assume we're just testing for a key if none of the comparators are found
    return { comparison: 'key', key: item, value: null, string: item }
  })

  if (param_exclusion_labels.length > 0) {
    result = _.reject(ds_instances, function(resource) {
      resource_labels = {}
      if (typeof(resource['labels']) == 'object') { resource_labels = resource['labels'] }

      // Store a list of found labels
      found_labels = []

      _.each(comparators, function(comparator) {
        comparison = comparator['comparison']
        value = comparator['value']
        string = comparator['string']
        resource_label = resource_labels[comparator['key']]

        if (comparison == 'key' && resource_label != undefined) { found_labels.push(string) }
        if (comparison == '==' && resource_label == value) { found_labels.push(string) }
        if (comparison == '!=' && resource_label != value) { found_labels.push(string) }

        if (comparison == '=~') {
          if (resource_label != undefined && value.test(resource_label)) { found_labels.push(string) }
        }

        if (comparison == '!~') {
          if (resource_label == undefined) { found_labels.push(string) }
          if (resource_label != undefined && value.test(resource_label)) { found_labels.push(string) }
        }
      })

      all_labels_found = found_labels.length == comparators.length
      any_labels_found = found_labels.length > 0 && param_exclusion_labels_boolean == 'Any'

      return all_labels_found || any_labels_found
    })
  } else {
    result = ds_instances
  }
EOS
end

datasource "ds_instances_region_filtered" do
  run_script $js_instances_region_filtered, $ds_instances_label_filtered, $param_regions_allow_or_deny, $param_regions_list
end

script "js_instances_region_filtered", type: "javascript" do
  parameters "ds_instances_label_filtered", "param_regions_allow_or_deny", "param_regions_list"
  result "result"
  code <<-EOS
  if (param_regions_list.length > 0) {
    result = _.filter(ds_instances_label_filtered, function(instance) {
      include_instance = _.contains(param_regions_list, instance['region'])

      if (param_regions_allow_or_deny == "Deny") {
        include_instance = !include_instance
      }

      return include_instance
    })
  } else {
    result = ds_instances_label_filtered
  }
EOS
end

datasource "ds_idle_recommender_requests" do
  run_script $js_idle_recommender_requests, $ds_instances_region_filtered, $param_idle_or_underutilized
end

script "js_idle_recommender_requests", type: "javascript" do
  parameters "ds_instances_region_filtered", "param_idle_or_underutilized"
  result "result"
  code <<-EOS
  result = []

  // Skip gathering recommendations for idle instances if the user opted not to
  if (param_idle_or_underutilized != "Underutilized") {
    _.each(ds_instances_region_filtered, function(instance) {
      request = {
        projectId: instance['projectId'],
        zone: instance['zone']
      }

      if (_.findWhere(result, request) == undefined) {
        request['number'] = result.length + 1
        result.push(request)
      }
    })
  }
EOS
end

datasource "ds_underutil_recommender_requests" do
  run_script $js_underutil_recommender_requests, $ds_instances_region_filtered, $param_idle_or_underutilized
end

script "js_underutil_recommender_requests", type: "javascript" do
  parameters "ds_instances_region_filtered", "param_idle_or_underutilized"
  result "result"
  code <<-EOS
  result = []

  // Skip gathering recommendations for underutilized instances if the user opted not to
  if (param_idle_or_underutilized != "Idle") {
    _.each(ds_instances_region_filtered, function(instance) {
      request = {
        projectId: instance['projectId'],
        zone: instance['zone']
      }

      if (_.findWhere(result, request) == undefined) {
        request['number'] = result.length + 1
        result.push(request)
      }
    })
  }
EOS
end

datasource "ds_idle_recommendations" do
  iterate $ds_idle_recommender_requests
  request do
    run_script $js_recommendations, val(iter_item, "projectId"), val(iter_item, "zone"), val(iter_item, "number"), "IdleResourceRecommender"
  end
  result do
    encoding "json"
    collect jmes_path(response, "recommendations[*]") do
      field "projectId", val(iter_item, "projectId")
      field "zone", val(iter_item, "zone")
      field "id", jmes_path(col_item, "name")
      field "description", jmes_path(col_item, "description")
      field "resourceLink", jmes_path(col_item, "content.overview.resource")
      field "resourceName", jmes_path(col_item, "content.overview.resourceName")
      field "recommendedMachineType", jmes_path(col_item, "content.overview.recommendedMachineType")
      field "currentMachineType", jmes_path(col_item, "content.overview.currentMachineType")
      field "primaryImpact", jmes_path(col_item, "primaryImpact")
      field "costUnits", jmes_path(col_item, "primaryImpact.costProjection.cost.units")
      field "costNanos", jmes_path(col_item, "primaryImpact.costProjection.cost.nanos")
      field "duration", jmes_path(col_item, "primaryImpact.costProjection.duration")
      field "currency", jmes_path(col_item, "primaryImpact.costProjection.cost.currencyCode")
      field "priority", jmes_path(col_item, "priority")
      field "recommenderSubtype", jmes_path(col_item, "recommenderSubtype")
      field "state", jmes_path(col_item, "stateInfo.state")
      field "recommendationCategory", "idle"
    end
  end
end

datasource "ds_underutil_recommendations" do
  iterate $ds_underutil_recommender_requests
  request do
    run_script $js_recommendations, val(iter_item, "projectId"), val(iter_item, "zone"), val(iter_item, "number"), "MachineTypeRecommender"
  end
  result do
    encoding "json"
    collect jmes_path(response, "recommendations[*]") do
      field "projectId", val(iter_item, "projectId")
      field "zone", val(iter_item, "zone")
      field "id", jmes_path(col_item, "name")
      field "description", jmes_path(col_item, "description")
      field "resourceLink", jmes_path(col_item, "content.overview.resource")
      field "resourceName", jmes_path(col_item, "content.overview.resourceName")
      field "recommendedMachineType", jmes_path(col_item, "content.overview.recommendedMachineType")
      field "currentMachineType", jmes_path(col_item, "content.overview.currentMachineType")
      field "primaryImpact", jmes_path(col_item, "primaryImpact")
      field "costUnits", jmes_path(col_item, "primaryImpact.costProjection.cost.units")
      field "costNanos", jmes_path(col_item, "primaryImpact.costProjection.cost.nanos")
      field "duration", jmes_path(col_item, "primaryImpact.costProjection.duration")
      field "currency", jmes_path(col_item, "primaryImpact.costProjection.cost.currencyCode")
      field "priority", jmes_path(col_item, "priority")
      field "recommenderSubtype", jmes_path(col_item, "recommenderSubtype")
      field "state", jmes_path(col_item, "stateInfo.state")
      field "recommendationCategory", "rightsize"
    end
  end
end

script "js_recommendations", type: "javascript" do
  parameters "projectId", "zone", "number", "type"
  result "request"
  code <<-EOS
  // If 100 requests have been made, wait 1 minute to avoid throttling
  if (number % 100 === 0) {
    now = new Date().getTime()
    wait_time = 60000 // Amount of time to wait in milliseconds
    while(new Date().getTime() < now + wait_time) { /* Do nothing */ }
  }

  var request = {
    auth: "auth_google",
    pagination: "pagination_google",
    host: "recommender.googleapis.com",
    ignore_status: 403,
    path: "/v1/projects/" + projectId + "/locations/" + zone + "/recommenders/google.compute.instance." + type + "/recommendations",
    query_strings: { alt: "json" }
  }
EOS
end

# Branching logic:
# This datasource returns an empty array if the target currency is USD.
# This prevents ds_currency_conversion from running if it's not needed.
datasource "ds_conditional_currency_conversion" do
  run_script $js_conditional_currency_conversion, $ds_currency_target, $ds_idle_recommendations, $ds_underutil_recommendations
end

script "js_conditional_currency_conversion", type: "javascript" do
  parameters "ds_currency_target", "ds_idle_recommendations", "ds_underutil_recommendations"
  result "result"
  code <<-EOS
  result = []
  from_currency = "USD"

  if (ds_idle_recommendations.length > 0) {
    from_currency = ds_idle_recommendations[0]["currency"]
  }

  if (ds_underutil_recommendations.length > 0) {
    from_currency = ds_underutil_recommendations[0]["currency"]
  }

  // Make the request only if the target currency is not USD
  if (ds_currency_target['code'] != from_currency) {
    result = [{ from: from_currency }]
  }
EOS
end

datasource "ds_currency_conversion" do
  # Only make a request if the target currency is not USD
  iterate $ds_conditional_currency_conversion
  request do
    host "api.xe-auth.flexeraeng.com"
    path "/prod/{proxy+}"
    query "from", val(iter_item, 'from')
    query "to", val($ds_currency_target, 'code')
    query "amount", "1"
    # Ignore currency conversion if API has issues
    ignore_status [400, 404, 502]
  end
  result do
    encoding "json"
    field "from", jmes_path(response, "from")
    field "to", jmes_path(response, "to")
    field "amount", jmes_path(response, "amount")
    field "year", jmes_path(response, "year")
  end
end

datasource "ds_currency" do
  run_script $js_currency, $ds_currency_target, $ds_currency_conversion
end

script "js_currency", type:"javascript" do
  parameters "ds_currency_target", "ds_currency_conversion"
  result "result"
  code <<-EOS
  result = ds_currency_target
  result['exchange_rate'] = 1

  if (ds_currency_conversion.length > 0) {
    currency_code = ds_currency_target['code']
    current_month = parseInt(new Date().toISOString().split('-')[1])

    conversion_block = _.find(ds_currency_conversion[0]['to'][currency_code], function(item) {
      return item['month'] == current_month
    })

    if (conversion_block != undefined) {
      result['exchange_rate'] = conversion_block['monthlyAverage']
    }
  }
EOS
end

datasource "ds_sorted_recommendations" do
  run_script $js_sorted_recommendations, $ds_instances_region_filtered, $ds_idle_recommendations, $ds_underutil_recommendations, $ds_currency, $ds_currency_conversion, $ds_applied_policy, $param_min_savings, $param_idle_or_underutilized
end

script "js_sorted_recommendations", type:"javascript" do
  parameters "ds_instances_region_filtered", "ds_idle_recommendations", "ds_underutil_recommendations", "ds_currency", "ds_currency_conversion", "ds_applied_policy", "param_min_savings", "param_idle_or_underutilized"
  result "result"
  code <<-'EOS'
  instance_object = {}

  _.each(ds_instances_region_filtered, function(instance) {
    selfLink = instance['selfLink'].replace("https://www.googleapis.com/compute/v1/", "")
    instance_object[selfLink] = instance
  })

  idle_result = []
  underutil_result = []

  idle_total_savings = 0.0
  underutil_total_savings = 0.0

  if (param_idle_or_underutilized != "Underutilized") {
    _.each(ds_idle_recommendations, function(recommendation) {
      resource_link = recommendation['resourceLink'].replace("//compute.googleapis.com/", "")

      instance = null
      if (typeof(instance_object[resource_link]) == 'object') { instance = instance_object[resource_link] }

      if (instance != null) {
        costNanos = recommendation['costNanos']
        if (costNanos == null || costNanos == undefined) { costNanos = 0 }
        if (costNanos != null && costNanos != undefined) { costNanos = Number(costNanos) * -1 }

        costUnits = recommendation['costUnits']
        if (costUnits == null || costUnits == undefined) { costUnits = 0 }
        if (costUnits != null && costUnits != undefined) { costUnits = Number(costUnits) * -1 }

        savings = 0.0
        duration = 0

        if (recommendation['duration'] != null) {
          duration = parseFloat(recommendation['duration'].replace("s", "")) / 2628288
        }

        if (duration != 0) { savings = (costUnits + costNanos * Math.pow(10, -9)) / duration * ds_currency['exchange_rate']}

        if (savings >= param_min_savings) {
          idle_total_savings += savings

          labels = []

          if (typeof(instance['labels']) == 'object') {
            _.each(Object.keys(instance['labels']), function(key) {
              labels.push([key, "=", instance['labels'][key]].join(''))
            })
          }

          resourceType = null

          if (typeof(instance['machineType']) == 'string') {
            resourceType = instance['machineType'].split('/')[10]
          }

          cpuAverage = instance['cpuAverage'];
          cpuMaximum = instance['cpuMaximum'];
          cpuMinimum = instance['cpuMinimum'];

          idle_result.push({
            resourceID: instance['id'],
            resourceName: instance['name'],
            description: instance['description'],
            status: instance['status'],
            zone: instance['zone'],
            selfLink: instance['selfLink'],
            platform: instance['cpuPlatform'],
            hostname: instance['hostname'],
            region: instance['region'],
            kind: instance['kind'],
            accountID: instance['projectId'],
            accountName: instance['projectName'],
            projectNumber: instance['projectNumber'],
            cpuAverage: cpuAverage? Number(cpuAverage.toFixed(2)): cpuAverage,
            cpuMaximum: cpuMaximum? Number(cpuMaximum.toFixed(2)): cpuMaximum,
            cpuMinimum: cpuMinimum? Number(cpuMinimum.toFixed(2)): cpuMinimum,
            priority: recommendation['priority'],
            primaryImpact: recommendation['primaryImpact'],
            primaryImpactCategory: recommendation['primaryImpact']['category'],
            recommendationDetails: recommendation['description'],
            recommenderSubtype: recommendation['recommenderSubtype'],
            state: recommendation['state'],
            recommendationCategory: recommendation['recommendationCategory'],
            resourceType: resourceType,
            newResourceType: "Stop VM Instance",
            policy_name: ds_applied_policy['name'],
            tags: labels.join(', '),
            savings: parseFloat(savings.toFixed(3)),
            savingsCurrency: ds_currency['symbol'],
            service: "Compute Engine",
            total_savings: "",
            message: ""
          })
        }
      }
    })
  }

  if (param_idle_or_underutilized != "Idle") {
    idle_resources = _.pluck(idle_result, "resourceID")

    _.each(ds_underutil_recommendations, function(recommendation) {
      resource_link = recommendation['resourceLink'].replace("//compute.googleapis.com/", "")

      instance = null
      if (typeof(instance_object[resource_link]) == 'object') { instance = instance_object[resource_link] }

      if (instance != null) {
        costNanos = recommendation['costNanos']
        if (costNanos == null || costNanos == undefined) { costNanos = 0 }
        if (costNanos != null && costNanos != undefined) { costNanos = Number(costNanos) * -1 }

        costUnits = recommendation['costUnits']
        if (costUnits == null || costUnits == undefined) { costUnits = 0 }
        if (costUnits != null && costUnits != undefined) { costUnits = Number(costUnits) * -1 }

        savings = 0.0
        duration = 0

        if (recommendation['duration'] != null) {
          duration = parseFloat(recommendation['duration'].replace("s", "")) / 2628288
        }

        if (duration != 0) { savings = (costUnits + costNanos * Math.pow(10, -9)) / duration * ds_currency['exchange_rate']}

        if (savings >= param_min_savings && _.contains(idle_resources, instance['id']) == false) {
          underutil_total_savings += savings

          labels = []

          if (typeof(instance['labels']) == 'object') {
            _.each(Object.keys(instance['labels']), function(key) {
              labels.push([key, "=", instance['labels'][key]].join(''))
            })
          }

          resourceType = null
          newResourceType = null

          if (typeof(recommendation['currentMachineType']) == 'object') {
            resourceType = recommendation['currentMachineType']['name']
          }

          if (typeof(recommendation['recommendedMachineType']) == 'object') {
            newResourceType = recommendation['recommendedMachineType']['name']
          }

          cpuAverage = instance['cpuAverage'];
          cpuMaximum = instance['cpuMaximum'];
          cpuMinimum = instance['cpuMinimum'];

          underutil_result.push({
            resourceID: instance['id'],
            resourceName: instance['name'],
            description: instance['description'],
            status: instance['status'],
            zone: instance['zone'],
            selfLink: instance['selfLink'],
            platform: instance['cpuPlatform'],
            hostname: instance['hostname'],
            region: instance['region'],
            kind: instance['kind'],
            accountID: instance['projectId'],
            accountName: instance['projectName'],
            projectNumber: instance['projectNumber'],
            cpuAverage: cpuAverage? Number(cpuAverage.toFixed(2)): cpuAverage,
            cpuMaximum: cpuMaximum? Number(cpuMaximum.toFixed(2)): cpuMaximum,
            cpuMinimum: cpuMinimum? Number(cpuMinimum.toFixed(2)): cpuMinimum,
            priority: recommendation['priority'],
            primaryImpact: recommendation['primaryImpact'],
            primaryImpactCategory: recommendation['primaryImpact']['category'],
            recommendationDetails: recommendation['description'],
            recommenderSubtype: recommendation['recommenderSubtype'],
            state: recommendation['state'],
            recommendationCategory: recommendation['recommendationCategory'],
            resourceType: resourceType,
            newResourceType: newResourceType,
            policy_name: ds_applied_policy['name'],
            tags: labels.join(', '),
            savings: parseFloat(savings.toFixed(3)),
            savingsCurrency: ds_currency['symbol'],
            service: "Compute Engine",
            total_savings: "",
            message: ""
          })
        }
      }
    })
  }

  result = {
    idle_result: idle_result,
    underutil_result: underutil_result,
    idle_total_savings: idle_total_savings,
    underutil_total_savings: underutil_total_savings
  }
EOS
end

datasource "ds_idle_incident" do
  run_script $js_idle_incident, $ds_sorted_recommendations, $ds_instances_region_filtered, $ds_currency, $param_idle_or_underutilized
end

script "js_idle_incident", type:"javascript" do
  parameters "ds_sorted_recommendations", "ds_instances_region_filtered", "ds_currency", "param_idle_or_underutilized"
  result "result"
  code <<-'EOS'
  // Function for formatting currency numbers later
  function formatNumber(number, separator) {
    formatted_number = "0"

    if (number) {
      formatted_number = (Math.round(number * 100) / 100).toString().split(".")[0]

      if (separator) {
        withSeparator = ""

        for (var i = 0; i < formatted_number.length; i++) {
          if (i > 0 && (formatted_number.length - i) % 3 == 0) { withSeparator += separator }
          withSeparator += formatted_number[i]
        }

        formatted_number = withSeparator
      }

      decimal = (Math.round(number * 100) / 100).toString().split(".")[1]
      if (decimal) { formatted_number += "." + decimal }
    }

    return formatted_number
  }

  // Sort by descending order of savings value
  result = _.sortBy(ds_sorted_recommendations['idle_result'], function(item) { return item['savings'] * -1 })

  savings_message = [
    ds_currency['symbol'], ' ',
    formatNumber(parseFloat(ds_sorted_recommendations['idle_total_savings']).toFixed(2),
    ds_currency['t_separator'])
  ].join('')

  // Message for incident output
  total_instances = ds_instances_region_filtered.length.toString()
  total_idle_instances = result.length.toString()
  idle_percentage = (total_idle_instances / total_instances * 100).toFixed(2).toString() + '%'

  instance_noun = "instance"
  if (total_instances > 1) { instance_noun = "instances" }

  instance_verb = "is"
  if (total_idle_instances > 1) { instance_verb = "are" }

  findings = [
    "Out of ", total_instances, " Google VM ", instance_noun, " analyzed, ",
    total_idle_instances, " (", idle_percentage,
    ") ", instance_verb, " idle and recommended for stopping.\n\n"
  ].join('')

  if (param_idle_or_underutilized == "Idle") {
    type_disclaimer = "Policy has been configured to only report idle instances. This setting can be modified by editing the applied policy and changing the 'Report Idle or Underutilized' parameter.\n\n"
  } else {
    type_disclaimer = "Policy has been configured to report both idle and underutilized instances. This setting can be modified by editing the applied policy and changing the 'Report Idle or Underutilized' parameter.\n\n"
  }

  disclaimer = "Recommendations are generated by Google Cloud. Please refer to Google's documentation if different recommendations are desired."

  // Dummy item to ensure that the check statement in the policy executes at least once
  result.push({
    resourceID: "",
    resourceName: "",
    description: "",
    status: "",
    zone: "",
    selfLink: "",
    cpuPlatform: "",
    hostname: "",
    labels: "",
    region: "",
    kind: "",
    accountID: "",
    accountName: "",
    projectNumber: "",
    cpuAverage: "",
    cpuMaximum: "",
    cpuMinimum: "",
    resourceType: "",
    newResourceType: "",
    priority: "",
    primaryImpact: "",
    primaryImpactCategory: "",
    recommendationDetails: "",
    recommenderSubtype: "",
    state: "",
    recommendationCategory: "",
    policy_name: "",
    tags: "",
    savings: "",
    savingsCurrency: "",
    service: "",
    total_savings: "",
    message: ""
  })

  result[0]['total_savings'] = savings_message
  result[0]['message'] = findings + type_disclaimer + disclaimer
EOS
end

datasource "ds_underutil_incident" do
  run_script $js_underutil_incident, $ds_sorted_recommendations, $ds_instances_region_filtered, $ds_currency, $param_idle_or_underutilized
end

script "js_underutil_incident", type:"javascript" do
  parameters "ds_sorted_recommendations", "ds_instances_region_filtered", "ds_currency", "param_idle_or_underutilized"
  result "result"
  code <<-'EOS'
  // Function for formatting currency numbers later
  function formatNumber(number, separator) {
    formatted_number = "0"

    if (number) {
      formatted_number = (Math.round(number * 100) / 100).toString().split(".")[0]

      if (separator) {
        withSeparator = ""

        for (var i = 0; i < formatted_number.length; i++) {
          if (i > 0 && (formatted_number.length - i) % 3 == 0) { withSeparator += separator }
          withSeparator += formatted_number[i]
        }

        formatted_number = withSeparator
      }

      decimal = (Math.round(number * 100) / 100).toString().split(".")[1]
      if (decimal) { formatted_number += "." + decimal }
    }

    return formatted_number
  }

  // Sort by descending order of savings value
  result = _.sortBy(ds_sorted_recommendations['underutil_result'], function(item) { return item['savings'] * -1 })

  savings_message = [
    ds_currency['symbol'], ' ',
    formatNumber(parseFloat(ds_sorted_recommendations['underutil_total_savings']).toFixed(2),
    ds_currency['t_separator'])
  ].join('')

  // Message for incident output
  total_instances = ds_instances_region_filtered.length.toString()
  total_underutil_instances = result.length.toString()
  underutil_percentage = (total_underutil_instances / total_instances * 100).toFixed(2).toString() + '%'

  instance_noun = "instance"
  if (total_instances > 1) { instance_noun = "instances" }

  instance_verb = "is"
  if (total_underutil_instances > 1) { instance_verb = "are" }

  findings = [
    "Out of ", total_instances, " Google VM ", instance_noun, " analyzed, ",
    total_underutil_instances, " (", underutil_percentage,
    ") ", instance_verb, " underutilized and recommended for downsizing.\n\n"
  ].join('')

  if (param_idle_or_underutilized == "Underutilized") {
    type_disclaimer = "Policy has been configured to only report underutilized instances. This setting can be modified by editing the applied policy and changing the 'Report Idle or Underutilized' parameter.\n\n"
  } else {
    type_disclaimer = "Policy has been configured to report both idle and underutilized instances. This setting can be modified by editing the applied policy and changing the 'Report Idle or Underutilized' parameter.\n\n"
  }

  disclaimer = "Recommendations are generated by Google Cloud. Please refer to Google's documentation if different recommendations are desired."

  // Dummy item to ensure that the check statement in the policy executes at least once
  result.push({
    resourceID: "",
    resourceName: "",
    description: "",
    status: "",
    zone: "",
    selfLink: "",
    cpuPlatform: "",
    hostname: "",
    labels: "",
    region: "",
    kind: "",
    accountID: "",
    accountName: "",
    projectNumber: "",
    cpuAverage: "",
    cpuMaximum: "",
    cpuMinimum: "",
    resourceType: "",
    newResourceType: "",
    priority: "",
    primaryImpact: "",
    primaryImpactCategory: "",
    recommendationDetails: "",
    recommenderSubtype: "",
    state: "",
    recommendationCategory: "",
    policy_name: "",
    tags: "",
    savings: "",
    savingsCurrency: "",
    service: "",
    total_savings: "",
    message: ""
  })

  result[0]['total_savings'] = savings_message
  result[0]['message'] = findings + type_disclaimer + disclaimer
EOS
end

###############################################################################
# Policy
###############################################################################

policy "pol_recommendations" do
  validate_each $ds_underutil_incident do
    summary_template "{{ with index data 0 }}{{ .policy_name }}{{ end }}: {{ len data }} Google Underutilized VM Instances Found"
    detail_template <<-'EOS'
    **Potential Monthly Savings:** {{ with index data 0 }}{{ .total_savings }}{{ end }}

    {{ with index data 0 }}{{ .message }}{{ end }}
    EOS
    check logic_or($ds_parent_policy_terminated, eq(val(item, "resourceID"), ""))
    escalate $esc_email
    escalate $esc_downsize_instances
    hash_exclude "tags", "savings", "savingsCurrency", "total_savings", "message", "cpuMaximum", "cpuMinimum", "cpuAverage"
    export do
      resource_level true
      field "accountID" do
        label "Project ID"
      end
      field "accountName" do
        label "Project Name"
      end
      field "projectNumber" do
        label "Project Number"
      end
      field "resourceID" do
        label "Resource ID"
      end
      field "resourceName" do
        label "Resource Name"
      end
      field "resourceType" do
        label "Resource Type"
      end
      field "newResourceType" do
        label "Recommended Resource Type"
      end
      field "zone" do
        label "Zone"
      end
      field "region" do
        label "Region"
      end
      field "hostname" do
        label "Hostname"
      end
      field "platform" do
        label "Platform"
      end
      field "cpuMaximum" do
        label "CPU Maximum %"
      end
      field "cpuMinimum" do
        label "CPU Minimum %"
      end
      field "cpuAverage" do
        label "CPU Average %"
      end
      field "primaryImpactCategory" do
        label "Primary Impact Category"
      end
      field "tags" do
        label "Labels"
      end
      field "service" do
        label "Service"
      end
      field "savings" do
        label "Estimated Monthly Savings"
      end
      field "savingsCurrency" do
        label "Currency"
      end
      field "priority" do
        label "Priority"
      end
      field "recommendationDetails" do
        label "Recommendation"
      end
      field "recommenderSubtype" do
        label "Recommendation Sub Type"
      end
      field "state" do
        label "State"
      end
      field "status" do
        label "Status"
      end
      field "selfLink" do
        label "Resource Link"
      end
      field "id" do
        label "ID"
        path "resourceID"
      end
    end
  end
  validate_each $ds_idle_incident do
    summary_template "{{ with index data 0 }}{{ .policy_name }}{{ end }}: {{ len data }} Google Idle VM Instances Found"
    detail_template <<-'EOS'
    **Potential Monthly Savings:** {{ with index data 0 }}{{ .total_savings }}{{ end }}

    {{ with index data 0 }}{{ .message }}{{ end }}
    EOS
    check logic_or($ds_parent_policy_terminated, eq(val(item, "resourceID"), ""))
    escalate $esc_email
    escalate $esc_stop_instances
    escalate $esc_delete_instances
    hash_exclude "tags", "savings", "savingsCurrency", "total_savings", "message", "cpuMaximum", "cpuMinimum", "cpuAverage"
    export do
      resource_level true
      field "accountID" do
        label "Project ID"
      end
      field "accountName" do
        label "Project Name"
      end
      field "projectNumber" do
        label "Project Number"
      end
      field "resourceID" do
        label "Resource ID"
      end
      field "resourceName" do
        label "Resource Name"
      end
      field "resourceType" do
        label "Resource Type"
      end
      field "newResourceType" do
        label "Recommended Resource Type"
      end
      field "zone" do
        label "Zone"
      end
      field "region" do
        label "Region"
      end
      field "hostname" do
        label "Hostname"
      end
      field "platform" do
        label "Platform"
      end
      field "cpuMaximum" do
        label "CPU Maximum %"
      end
      field "cpuMinimum" do
        label "CPU Minimum %"
      end
      field "cpuAverage" do
        label "CPU Average %"
      end
      field "primaryImpactCategory" do
        label "Primary Impact Category"
      end
      field "tags" do
        label "Labels"
      end
      field "service" do
        label "Service"
      end
      field "savings" do
        label "Estimated Monthly Savings"
      end
      field "savingsCurrency" do
        label "Currency"
      end
      field "priority" do
        label "Priority"
      end
      field "recommendationDetails" do
        label "Recommendation"
      end
      field "recommenderSubtype" do
        label "Recommendation Sub Type"
      end
      field "state" do
        label "State"
      end
      field "status" do
        label "Status"
      end
      field "selfLink" do
        label "Resource Link"
      end
      field "id" do
        label "ID"
        path "resourceID"
      end
    end
  end
end

###############################################################################
# Escalations
###############################################################################

escalation "esc_email" do
  automatic true
  label "Send Email"
  description "Send incident email"
  email $param_email
end

escalation "esc_downsize_instances" do
  automatic contains($param_automatic_action, "Downsize VM Instances")
  label "Downsize VM Instances"
  description "Approval to downsize all selected VM instances"
  run "downsize_instances", data
end

escalation "esc_stop_instances" do
  automatic contains($param_automatic_action, "Stop VM Instances")
  label "Stop VM Instances"
  description "Approval to stop all selected VM instances"
  run "stop_instances", data
end

escalation "esc_delete_instances" do
  automatic contains($param_automatic_action, "Delete VM Instances")
  label "Delete VM Instances"
  description "Approval to delete all selected VM instances"
  run "delete_instances", data
end

###############################################################################
# Cloud Workflow
###############################################################################

define downsize_instances($data) return $all_responses do
  $$all_responses = []

  foreach $instance in $data do
    if $instance["newResourceType"] != "Delete VM Instance"
      sub on_error: handle_error() do
        call stop_instance($instance) retrieve $stop_response
        call resize_instance($instance) retrieve $resize_response
        call start_instance($instance) retrieve $start_response
      end
    end
  end

  if inspect($$errors) != "null"
    raise join($$errors, "\n")
  end
end

define stop_instances($data) return $all_responses do
  $$all_responses = []

  foreach $instance in $data do
    sub on_error: handle_error() do
      call stop_instance($instance) retrieve $stop_response
    end
  end

  if inspect($$errors) != "null"
    raise join($$errors, "\n")
  end
end

define delete_instances($data) return $all_responses do
  $$all_responses = []

  foreach $instance in $data do
    sub on_error: handle_error() do
      call stop_instance($instance) retrieve $stop_response
      call delete_instance($instance) retrieve $delete_response
    end
  end

  if inspect($$errors) != "null"
    raise join($$errors, "\n")
  end
end

define resize_instance($instance) return $response do
  task_label("POST " + $instance['selfLink'] + '/setMachineType')

  $body = '{ machineType: "zones/' + $instance['zone'] + '/machineTypes/' + $instance['newResourceType'] + '" }'

  $response = http_post(
    url: $instance['selfLink'] + '/setMachineType',
    auth: $$auth_google,
    headers: {
      "cache-control": "no-cache",
      "content-type": "application/json"
    },
    body: $body
  )

  task_label("Post Google VM instance response: " + $instance["resourceName"] + " " + to_json($response))
  $$all_responses << to_json({"req": "POST " + $instance['selfLink'] + '/setMachineType', "resp": $response})

  if $response["code"] != 204 && $response["code"] != 202 && $response["code"] != 200
    raise "Unexpected response posting Google VM instance: "+ $instance["resourceName"] + " " + to_json($response)
  else
    task_label("Post Google VM instance successful: " + $instance["resourceName"])
  end

  sleep(5)
  call get_instance_state($instance) retrieve $state_response, $current_state
  sleep(5)

  while $current_state != "STOPPED" && $current_state != "TERMINATED" do
    call get_instance_state($instance) retrieve $state_response, $current_state
    sleep(5)
  end
end

define delete_instance($instance) return $response do
  task_label("DELETE " + $instance['selfLink'])

  $response = http_delete(
    url: $instance['selfLink'],
    auth: $$auth_google,
    headers: {
      "cache-control": "no-cache",
      "content-type": "application/json"
    }
  )

  task_label("Delete Google VM instance response: " + $instance["resourceName"] + " " + to_json($response))
  $$all_responses << to_json({"req": "DELETE " + $instance['selfLink'], "resp": $response})

  if $response["code"] != 204 && $response["code"] != 202 && $response["code"] != 200
    raise "Unexpected response deleting Google VM instance: "+ $instance["resourceName"] + " " + to_json($response)
  else
    task_label("Delete Google VM instance successful: " + $instance["resourceName"])
  end
end

define start_instance($instance) return $response do
  task_label("POST " + $instance['selfLink'] + '/start')

  $response = http_post(
    url: $instance['selfLink'] + '/start',
    auth: $$auth_google,
    headers: {
      "cache-control": "no-cache",
      "content-type": "application/json"
    }
  )

  task_label("Post Google VM instance response: " + $instance["resourceName"] + " " + to_json($response))
  $$all_responses << to_json({"req": "POST " + $instance['selfLink'] + '/start', "resp": $response})

  if $response["code"] != 204 && $response["code"] != 202 && $response["code"] != 200
    raise "Unexpected response posting Google VM instance: "+ $instance["resourceName"] + " " + to_json($response)
  else
    task_label("Post Google VM instance successful: " + $instance["resourceName"])
  end
end

define stop_instance($instance) return $response do
  task_label("POST " + $instance['selfLink'] + '/stop')

  $response = http_post(
    url: $instance['selfLink'] + '/stop',
    auth: $$auth_google,
    headers: {
      "cache-control": "no-cache",
      "content-type": "application/json"
    }
  )

  task_label("Post Google VM instance response: " + $instance["resourceName"] + " " + to_json($response))
  $$all_responses << to_json({"req": "POST " + $instance['selfLink'] + '/stop', "resp": $response})

  if $response["code"] != 204 && $response["code"] != 202 && $response["code"] != 200
    raise "Unexpected response posting Google VM instance: "+ $instance["resourceName"] + " " + to_json($response)
  else
    task_label("Post Google VM instance successful: " + $instance["resourceName"])
  end

  sleep(5)
  call get_instance_state($instance) retrieve $state_response, $current_state
  sleep(5)

  while $current_state != "STOPPED" && $current_state != "TERMINATED" do
    call get_instance_state($instance) retrieve $state_response, $current_state
    sleep(5)
  end
end

define get_instance_state($instance) return $response, $instance_state do
  task_label("GET " + $instance['selfLink'])

  $response = http_get(
    url: $instance['selfLink'],
    auth: $$auth_google,
    headers: {
      "cache-control": "no-cache",
      "content-type": "application/json"
    }
  )

  task_label("Get Google VM instance response: " + $instance["resourceName"] + " " + to_json($response))
  $$all_responses << to_json({"req": "GET " + $instance['selfLink'], "resp": $response})

  if $response["code"] != 204 && $response["code"] != 202 && $response["code"] != 200
    raise "Unexpected response getting Google VM instance: "+ $instance["resourceName"] + " " + to_json($response)
  else
    task_label("Get Google VM instance successful: " + $instance["resourceName"])
    $instance_state = $response["body"]["status"]
  end
end

define handle_error() do
  if !$$errors
    $$errors = []
  end
  $$errors << $_error["type"] + ": " + $_error["message"]
  # We check for errors at the end, and raise them all together
  # Skip errors handled by this definition
  $_error_behavior = "skip"
end

###############################################################################
# Meta Policy [alpha]
# Not intended to be modified or used by policy developers
###############################################################################

# If the meta_parent_policy_id is not set it will evaluate to an empty string and we will look for the policy itself,
# if it is set we will look for the parent policy.
datasource "ds_get_policy" do
  request do
    auth $auth_flexera
    host rs_governance_host
    ignore_status [404]
    path join(["/api/governance/projects/", rs_project_id, "/applied_policies/", switch(ne(meta_parent_policy_id, ""), meta_parent_policy_id, policy_id)])
    header "Api-Version", "1.0"
  end
  result do
    encoding "json"
    field "id", jmes_path(response, "id")
  end
end

datasource "ds_parent_policy_terminated" do
  run_script $js_decide_if_self_terminate, $ds_get_policy, policy_id, meta_parent_policy_id
end

# If the policy was applied by a meta_parent_policy we confirm it exists if it doesn't we confirm we are deleting
# This information is used in two places:
# - determining whether or not we make a delete call
# - determining if we should create an incident (we don't want to create an incident on the run where we terminate)
script "js_decide_if_self_terminate", type: "javascript" do
  parameters "found", "self_policy_id", "meta_parent_policy_id"
  result "result"
  code <<-EOS
  var result
  if (meta_parent_policy_id != "" && found.id == undefined) {
    result = true
  } else {
    result = false
  }
  EOS
end

# Two potentials ways to set this up:
# - this way and make a unneeded 'get' request when not deleting
# - make the delete request an interate and have it iterate over an empty array when not deleting and an array with one item when deleting
script "js_make_terminate_request", type: "javascript" do
  parameters "should_delete", "policy_id", "rs_project_id", "rs_governance_host"
  result "request"
  code <<-EOS

  var request = {
    auth:  'auth_flexera',
    host: rs_governance_host,
    path: "/api/governance/projects/" + rs_project_id + "/applied_policies/" + policy_id,
    headers: {
      "API-Version": "1.0",
      "Content-Type":"application/json"
    },
  }

  if (should_delete) {
    request.verb = 'DELETE'
  }
  EOS
end

datasource "ds_terminate_self" do
  request do
    run_script $js_make_terminate_request, $ds_parent_policy_terminated, policy_id, rs_project_id, rs_governance_host
  end
end

datasource "ds_is_deleted" do
  run_script $js_check_deleted, $ds_terminate_self
end

# This is just a way to have the check delete request connect to the farthest leaf from policy.
# We want the delete check to the first thing the policy does to avoid the policy erroring before it can decide whether or not it needs to self terminate
# Example a customer deletes a credential and then terminates the parent policy. We still want the children to self terminate
# The only way I could see this not happening is if the user who applied the parent_meta_policy was offboarded or lost policy access, the policies who are impersonating the user
# would not have access to self-terminate
# It may be useful for the backend to enable a mass terminate at some point for all meta_child_policies associated with an id.
script "js_check_deleted", type: "javascript" do
  parameters "response"
  result "result"
  code <<-EOS
  result = {"path":"/"}
  EOS
end

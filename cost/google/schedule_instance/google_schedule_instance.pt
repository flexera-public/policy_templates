name "Google Schedule Instance"
rs_pt_ver 20180301
type "policy"
short_description "Schedules Google VM instances to start and stop at specific times based on a configuration stored in the instance's labels. See the [README](https://github.com/flexera-public/policy_templates/tree/master/cost/google/schedule_instance/) and [docs.flexera.com/flexera/EN/Automation](https://docs.flexera.com/flexera/EN/Automation/AutomationGS.htm) to learn more."
long_description ""
category "Cost"
severity "low"
default_frequency "15 minutes"
info(
  version: "5.1.0",
  provider: "Google",
  service: "Compute",
  policy_set: "Schedule Instance"
)

###############################################################################
# Parameters
###############################################################################

parameter "param_email" do
  type "list"
  category "Policy Settings"
  label "Email Addresses"
  description "A list of email addresses to notify."
  default []
end

parameter "param_label_schedule" do
  type "string"
  category "Label Keys"
  label "Schedule Label Key"
  description "Label key that schedule information is stored in. Default is recommended for most use cases."
  default "schedule"
end

parameter "param_projects_allow_or_deny" do
  type "string"
  category "Filters"
  label "Allow/Deny Projects"
  description "Allow or Deny entered Projects. See the README for more details."
  allowed_values "Allow", "Deny"
  default "Allow"
end

parameter "param_projects_list" do
  type "list"
  category "Filters"
  label "Allow/Deny Projects List"
  description "A list of allowed or denied Subscription IDs/names. See the README for more details."
  default []
end

parameter "param_regions_allow_or_deny" do
  type "string"
  category "Filters"
  label "Allow/Deny Regions"
  description "Allow or Deny entered regions. See the README for more details."
  allowed_values "Allow", "Deny"
  default "Allow"
end

parameter "param_regions_list" do
  type "list"
  category "Filters"
  label "Allow/Deny Regions List"
  description "A list of allowed or denied regions. See the README for more details."
  default []
end

parameter "param_exclusion_labels" do
  type "list"
  category "Filters"
  label "Exclusion Labels"
  description "Cloud native labels to ignore resources that you don't want to produce recommendations for. Enter the Key name to filter resources with a specific Key, regardless of Value, and enter Key==Value to filter resources with a specific Key:Value pair. Other operators and regex are supported; please see the README for more details."
  default []
end

parameter "param_exclusion_labels_boolean" do
  type "string"
  category "Filters"
  label "Exclusion Labels: Any / All"
  description "Whether to filter instances containing any of the specified labels or only those that contain all of them. Only applicable if more than one value is entered in the 'Exclusion Labels' field."
  allowed_values "Any", "All"
  default "Any"
end

parameter "param_automatic_action" do
  type "list"
  category "Actions"
  label "Automatic Actions"
  description "When this value is set, this policy will automatically take the selected action."
  allowed_values ["Execute Schedules", "Start Notification", "Stop Notification", "Error Notification"]
  default ["Execute Schedules", "Start Notification", "Stop Notification", "Error Notification"] # Schedules enabled by default because resource label required to action.  Can be disabled by removing from list which is helpful for debugging / manual triggers.
end

###############################################################################
# Authentication
###############################################################################

credentials "auth_google" do
  schemes "oauth2"
  label "Google"
  description "Select the Google Cloud Credential from the list."
  tags "provider=gce"
end

credentials "auth_flexera" do
  schemes "oauth2"
  label "Flexera"
  description "Select Flexera One OAuth2 credentials"
  tags "provider=flexera"
end

###############################################################################
# Pagination
###############################################################################

pagination "pagination_google" do
  get_page_marker do
    body_path "nextPageToken"
  end
  set_page_marker do
    query "pageToken"
  end
end

###############################################################################
# Datasources & Scripts
###############################################################################

datasource "ds_flexera_api_hosts" do
  run_script $js_flexera_api_hosts, rs_optima_host
end

script "js_flexera_api_hosts", type: "javascript" do
  parameters "rs_optima_host"
  result "result"
  code <<-EOS
  host_table = {
    "api.optima.flexeraeng.com": {
      api: "api.flexera.com",
      ui: "app.flexera.com",
      tld: "flexera.com"
    },
    "api.optima-eu.flexeraeng.com": {
      api: "api.flexera.eu",
      ui: "app.flexera.eu",
      tld: "flexera.eu"
    },
    "api.optima-apac.flexeraeng.com": {
      api: "api.flexera.au",
      ui: "app.flexera.au",
      tld: "flexera.au"
    }
  }

  result = host_table[rs_optima_host]
EOS
end

# Get Incident data for use later
datasource "ds_policy_incident" do
  request do
    auth $auth_flexera
    host rs_governance_host
    path join(["/api/governance/projects/", rs_project_id, "/incidents"])
    header "Api-Version", "1.0"
    query "applied_policy_id", policy_id
    query "state", "triggered"
  end
  result do
    encoding "json"
    collect jq(response, ".items[]?") do
      field "incident_id", jq(col_item, ".id")
      field "applied_policy_id", jq(col_item, ".applied_policy.id")
      field "summary", jq(col_item, ".summary")
      field "state", jq(col_item, ".state")
      field "violation_data_count", jq(col_item, ".violation_data_count")
      field "action_failed", jq(col_item, ".action_failed")
      field "updated_at", jq(col_item, ".updated_at")
    end
  end
end

datasource "ds_policy_incident_action_failed" do
  run_script $js_policy_incident_action_failed, $ds_policy_incident
end

script "js_policy_incident_action_failed", type: "javascript" do
  parameters "ds_policy_incident"
  result "result"
  code <<-EOS
  result = _.filter(ds_policy_incident, function(incident) {
    return incident['action_failed'] == true
  })
EOS
end

# GET https://governance-3.rightscale.com/api/governance/projects/7954/action_status?incident_id=6729168ec2ac3b997eff9a0c&view=extended
datasource "ds_policy_incident_action_failed_status" do
  iterate $ds_policy_incident_action_failed
  request do
    auth $auth_flexera
    host rs_governance_host
    path join(["/api/governance/projects/", rs_project_id, "/action_status"])
    verb "GET"
    header "User-Agent", "RS Policies"
    header "Api-Version", "1.0"
    query "incident_id", val(iter_item, 'incident_id')
    query "view", "extended"
  end
  result do
    encoding "json"
    collect jq(response, ".items[]?") do
      field "applied_policy_id", jq(iter_item, ".applied_policy_id")
      field "incident_id", jq(iter_item, ".incident_id")
      field "incident_summary", jq(iter_item, ".summary")
      field "action_status", jq(col_item, ".status")
      field "action_items", jq(col_item, ".action_items")
      field "action_label", jq(col_item, ".label")
    end
  end
end

#
datasource "ds_policy_incident_action_failed_details" do
  run_script $js_policy_incident_action_fail_details, $ds_policy_incident_action_failed_status, $ds_applied_policy, $ds_flexera_api_hosts
end

script "js_policy_incident_action_fail_details", type: "javascript" do
  parameters "ds_policy_incident_action_failed_status", "ds_applied_policy", "ds_flexera_api_hosts"
  result "result"
  code <<-EOS
  result = []
  // Incidents can have multiple actions
  // Loop through each action and compile list of failed actions
  _.each(ds_policy_incident_action_failed_status, function(action) {
    // Check if the incident action is status failed
    if (action['action_status'] == 'failed') {
      action['failed_action_items'] = _.filter(action['action_items'], function(item) {
        return item['status'] == 'failed'
      })
      result.push(action)
    }
  })
  // If we found any failed actions, add the policy name and UI host to the result
  // These strings are used in the email template
  if (result.length > 0) {
    result[0]['policy_name'] = ds_applied_policy['name']
    result[0]['ui_host'] = ds_flexera_api_hosts['ui']
  }
EOS
end

# Get applied policy metadata for use later
datasource "ds_applied_policy" do
  request do
    auth $auth_flexera
    host rs_governance_host
    path join(["/api/governance/projects/", rs_project_id, "/applied_policies/", policy_id])
    header "Api-Version", "1.0"
  end
end

datasource "ds_google_projects" do
  request do
    auth $auth_google
    pagination $pagination_google
    host "cloudresourcemanager.googleapis.com"
    path "/v1/projects/"
    query "filter", "(lifecycleState:ACTIVE)"
    # Header X-Meta-Flexera has no affect on datasource query, but is required for Meta Policies
    # Forces `ds_is_deleted` datasource to run first during policy execution
    header "Meta-Flexera", val($ds_is_deleted, "path")
  end
  result do
    encoding "json"
    collect jmes_path(response, "projects[*]") do
      field "number", jmes_path(col_item, "projectNumber")
      field "id", jmes_path(col_item, "projectId")
      field "name", jmes_path(col_item, "name")
    end
  end
end

datasource "ds_google_projects_filtered" do
  run_script $js_google_projects_filtered, $ds_google_projects, $param_projects_allow_or_deny, $param_projects_list
end

script "js_google_projects_filtered", type: "javascript" do
  parameters "ds_google_projects", "param_projects_allow_or_deny", "param_projects_list"
  result "result"
  code <<-EOS
  if (param_projects_list.length > 0) {
    result = _.filter(ds_google_projects, function(project) {
      include_project = _.contains(param_projects_list, project['id']) || _.contains(param_projects_list, project['name']) || _.contains(param_projects_list, project['number'])

      if (param_projects_allow_or_deny == "Deny") {
        include_project = !include_project
      }

      return include_project
    })
  } else {
    result = ds_google_projects
  }
EOS
end

datasource "ds_get_instances" do
  iterate $ds_google_projects_filtered
  request do
    auth $auth_google
    host "compute.googleapis.com"
    path join(["/compute/v1/projects/", val(iter_item, 'id'), "/aggregated/instances"])
    header "User-Agent", "RS Policies"
    header "Content-Type", "application/json"
    ignore_status [403, 404]
  end
  result do
    encoding "json"
    field "instances", jq(response, "[ .items | to_entries | map_values(.value) | map(select(has(\"instances\"))) | .[].instances | .[] | {id,name,selfLink,status,tags,zone,kind,hostname,cpuPlatform,labels,description,machineType}]")
    field "projectId", val(iter_item, "id")
    field "projectName", val(iter_item, "name")
    field "projectNumber", val(iter_item, "number")
  end
end

datasource "ds_instances" do
  run_script $js_instances, $ds_get_instances
end

script "js_instances", type: "javascript" do
  parameters "ds_get_instances"
  result "result"
  code <<-EOS
  result = []

  _.each(ds_get_instances, function(response) {
    _.each(response['instances'], function(instance) {
      zone = instance['zone'].split('/')[8]
      // Region is the first two parts of the zone
      region = zone.split('-')[0] + '-' + zone.split('-')[1]

      result.push({
        id: instance['id'],
        name: instance['name'],
        description: instance['description'],
        status: instance['status'],
        selfLink: instance['selfLink'],
        cpuPlatform: instance['cpuPlatform'],
        machineType: instance['machineType'],
        hostname: instance['hostname'],
        kind: instance['kind'],
        labels: instance['labels'],
        projectId: response['projectId'],
        projectName: response['projectName'],
        projectNumber: response['projectNumber'],
        zone: zone,
        region: region
      })
    })
  })
EOS
end

datasource "ds_instances_label_filtered" do
  run_script $js_instances_label_filtered, $ds_instances, $param_exclusion_labels, $param_exclusion_labels_boolean
end

script "js_instances_label_filtered", type: "javascript" do
  parameters "ds_instances", "param_exclusion_labels", "param_exclusion_labels_boolean"
  result "result"
  code <<-EOS
  comparators = _.map(param_exclusion_labels, function(item) {
    if (item.indexOf('==') != -1) {
      return { comparison: '==', key: item.split('==')[0], value: item.split('==')[1], string: item }
    }

    if (item.indexOf('!=') != -1) {
      return { comparison: '!=', key: item.split('!=')[0], value: item.split('!=')[1], string: item }
    }

    if (item.indexOf('=~') != -1) {
      value = item.split('=~')[1]
      regex = new RegExp(value.slice(1, value.length - 1))
      return { comparison: '=~', key: item.split('=~')[0], value: regex, string: item }
    }

    if (item.indexOf('!~') != -1) {
      value = item.split('!~')[1]
      regex = new RegExp(value.slice(1, value.length - 1))
      return { comparison: '!~', key: item.split('!~')[0], value: regex, string: item }
    }

    // If = is present but none of the above are, assume user error and that the user intended ==
    if (item.indexOf('=') != -1) {
      return { comparison: '==', key: item.split('=')[0], value: item.split('=')[1], string: item }
    }

    // Assume we're just testing for a key if none of the comparators are found
    return { comparison: 'key', key: item, value: null, string: item }
  })

  if (param_exclusion_labels.length > 0) {
    result = _.reject(ds_instances, function(resource) {
      resource_labels = {}
      if (typeof(resource['labels']) == 'object') { resource_labels = resource['labels'] }

      // Store a list of found labels
      found_labels = []

      _.each(comparators, function(comparator) {
        comparison = comparator['comparison']
        value = comparator['value']
        string = comparator['string']
        resource_label = resource_labels[comparator['key']]

        if (comparison == 'key' && resource_label != undefined) { found_labels.push(string) }
        if (comparison == '==' && resource_label == value) { found_labels.push(string) }
        if (comparison == '!=' && resource_label != value) { found_labels.push(string) }

        if (comparison == '=~') {
          if (resource_label != undefined && value.test(resource_label)) { found_labels.push(string) }
        }

        if (comparison == '!~') {
          if (resource_label == undefined) { found_labels.push(string) }
          if (resource_label != undefined && value.test(resource_label)) { found_labels.push(string) }
        }
      })

      all_labels_found = found_labels.length == comparators.length
      any_labels_found = found_labels.length > 0 && param_exclusion_labels_boolean == 'Any'

      return all_labels_found || any_labels_found
    })
  } else {
    result = ds_instances
  }
EOS
end

datasource "ds_instances_region_filtered" do
  run_script $js_instances_region_filtered, $ds_instances_label_filtered, $param_regions_allow_or_deny, $param_regions_list
end

script "js_instances_region_filtered", type: "javascript" do
  parameters "ds_instances_label_filtered", "param_regions_allow_or_deny", "param_regions_list"
  result "result"
  code <<-EOS
  if (param_regions_list.length > 0) {
    result = _.filter(ds_instances_label_filtered, function(instance) {
      include_instance = _.contains(param_regions_list, instance['region'])

      if (param_regions_allow_or_deny == "Deny") {
        include_instance = !include_instance
      }

      return include_instance
    })
  } else {
    result = ds_instances_label_filtered
  }
EOS
end

datasource "ds_instances_with_schedule" do
  run_script $js_instances_with_schedule, $ds_instances_region_filtered, $ds_applied_policy, $ds_timezones_list, $param_label_schedule
end

script "js_instances_with_schedule", type: "javascript" do
  parameters "ds_instances_region_filtered", "ds_applied_policy", "ds_timezones_list", "param_label_schedule"
  result "result"
  code <<-EOS
  result = []
  now = new Date()

  _.each(ds_instances_region_filtered, function(instance) {
    schedule = null

    labels = []

    if (typeof(instance['labels']) == 'object') {
      _.each(_.keys(instance['labels']), function(key) {
        value = instance['labels'][key]

        labels.push(key + '=' + value)

        if (key == param_label_schedule)   { schedule = value }
      })
    }

    // Check that we have a schedule and it is not explicitely disabled before attempting to parse the schedule tag value
    // Test the regex pattern for a valid schedule as well, in case the tag value is not a valid schedule
    // schedule="0900-0930_mo-tu-we-th-fr"
    // schedule="0900-0930_mo-tu-we-th-fr_america-los_angeles"
    var schedule_is_valid = /([0-9]{1,2}.*)-([0-9]{1,2}.*)_([a-z\-]*).*/.test(schedule)
    if ((_.isString(schedule)) && (schedule_is_valid == false)) {
      console.log("Skipping instance " + instance['instanceId'] + " with invalid schedule '" + schedule +"'");
    } else if ((_.isString(schedule)) && (schedule_is_valid)) {
      var schedule_split = schedule.split('_')

      // Parse Time - first part of schedule
      var time = schedule_split[0]
      // start time is first part of time string split by '-'
      var start_time = time.split('-')[0]
      var start_hour = start_time.slice(0, 2) // first 2 characters is HH
      var start_minute = start_time.slice(2, 4) // last 2 characters is MM
      if (start_minute == null) { start_minute = '00' }

      // stop time is second part of time string split by '-'
      var stop_time = time.split('-')[1]
      var stop_hour = stop_time.slice(0, 2) // first 2 characters is HH
      var stop_minute = stop_time.slice(2, 4) // last 2 characters is MM
      if (stop_minute == null) { stop_minute = '00' }

      // Parse Days - second part of schedule
      var days = schedule_split[1]
      days = days.replace(/-/g, ',') // replace all '-' with ','

      var start_rule = 'FREQ=WEEKLY;BYDAY=' + days.toUpperCase()
      var stop_rule = 'FREQ=WEEKLY;BYDAY=' + days.toUpperCase()

      // Parse Timezone (if defined)
      // Default to UTC
      var timezone = "utc"
      if (schedule_split.length >= 3) {
        // concat rest of the schedule string after second `_`
        timezone = schedule_split.slice(2, schedule_split.length).join('_')
        timezone = ds_timezones_list[timezone]
      }

      result.push({
        // Request Fields
        start_hour: start_hour,
        start_minute: start_minute,
        start_rule: start_rule,
        stop_hour: stop_hour,
        stop_minute: stop_minute,
        stop_rule: stop_rule,
        tz: timezone,
        // Resource Fields
        resourceID: instance['id'],
        resourceName: instance['name'],
        description: instance['description'],
        status: instance['status'],
        selfLink: instance['selfLink'],
        platform: instance['cpuPlatform'],
        resourceType: instance['machineType'],
        hostname: instance['hostname'],
        kind: instance['kind'],
        accountID: instance['projectId'],
        accountName: instance['projectName'],
        projectNumber: instance['projectNumber'],
        zone: instance['zone'],
        region: instance['region'],
        tags: labels.join(', '),
        policy_name: ds_applied_policy['name'],
        schedule: schedule,
        service: "Compute Engine"
      })
    }
  })

  result = _.sortBy(result, 'resourceID')
  result = _.sortBy(result, 'zone')
  result = _.sortBy(result, 'region')
  result = _.sortBy(result, 'accountID')
EOS
end

datasource "ds_timezones_list" do
  request do
    host "raw.githubusercontent.com"
    path "/flexera-public/policy_templates/master/data/tz_database/timezones_list.json"
    header "Content-Type", "application/json"
  end
end

datasource "ds_instances_schedule_result" do
  iterate $ds_instances_with_schedule
  request do
    verb "POST"
    host "bjlaftw4kh.execute-api.us-east-1.amazonaws.com"
    path "/production"
    header "Content-Type", "application/json"
    body_field "start_hour", val(iter_item, "start_hour")
    body_field "start_minute", val(iter_item, "start_minute")
    body_field "start_rule", val(iter_item, "start_rule")
    body_field "stop_hour", val(iter_item, "stop_hour")
    body_field "stop_minute", val(iter_item, "stop_minute")
    body_field "stop_rule", val(iter_item, "stop_rule")
    body_field "tz", val(iter_item, "tz")
  end
  result do
    encoding "json"
    # Request Fields
    field "start_hour", val(iter_item, "start_hour")
    field "start_minute", val(iter_item, "start_minute")
    field "start_rule", val(iter_item, "start_rule")
    field "stop_hour", val(iter_item, "stop_hour")
    field "stop_minute", val(iter_item, "stop_minute")
    field "stop_rule", val(iter_item, "stop_rule")
    field "tz", val(iter_item, "tz")
    # Resource Fields
    field "resourceID", val(iter_item, "resourceID")
    field "resourceName", val(iter_item, "resourceName")
    field "description", val(iter_item, "description")
    field "status", val(iter_item, "status")
    field "selfLink", val(iter_item, "selfLink")
    field "platform", val(iter_item, "platform")
    field "resourceType", val(iter_item, "resourceType")
    field "hostname", val(iter_item, "hostname")
    field "kind", val(iter_item, "kind")
    field "accountID", val(iter_item, "accountID")
    field "accountName", val(iter_item, "accountName")
    field "projectNumber", val(iter_item, "projectNumber")
    field "zone", val(iter_item, "zone")
    field "region", val(iter_item, "region")
    field "tags", val(iter_item, "tags")
    field "policy_name", val(iter_item, "policy_name")
    field "schedule", val(iter_item, "schedule")
    field "service", val(iter_item, "service")
    # Resource Response Fields
    field "next_stop", val(response, "next_stop")
    field "next_start", val(response, "next_start")
    field "event_active", val(response, "event_active")
  end
end

# Classify the results from ds_instances_schedule_result
# This allows us to produce email notifications when actions are being taken
datasource "ds_instances_schedule_result_action_start" do
  run_script $js_instances_schedule_result_action_start, $ds_instances_schedule_result
end

script "js_instances_schedule_result_action_start", type: "javascript" do
  parameters "ds_instances_schedule_result"
  result "result"
  code <<-EOS
  result = []

  _.each(ds_instances_schedule_result, function(instance) {
    if (instance['event_active'] == "true" && instance['status'] != "RUNNING" && instance['status'] != "PROVISIONING") {
      instance['action'] = "start"
      result.push(instance)
    }
  })
  EOS
end

datasource "ds_instances_schedule_result_action_stop" do
  run_script $js_instances_schedule_result_action_stop, $ds_instances_schedule_result
end

script "js_instances_schedule_result_action_stop", type: "javascript" do
  parameters "ds_instances_schedule_result"
  result "result"
  code <<-EOS
  result = []

  _.each(ds_instances_schedule_result, function(instance) {
    console.log(JSON.stringify(instance))
    if (instance['event_active'] == "false" && instance['status'] != "TERMINATED" && instance['status'] != "STOPPED" && instance['status'] != "STOPPING") {
      instance['action'] = "stop"
      result.push(instance)
    }
  })
  EOS
end

###############################################################################
# Policy
###############################################################################

policy "pol_schedule_instance" do
  validate $ds_policy_incident_action_failed_details do
    summary_template "{{ with index data 0 }}{{ .policy_name }}{{ end }}: Google Scheduled VM Instances Failed Actions"
    detail_template <<-EOS
The following actions failed:
{{ range data }}
**[{{ .incident_summary }}](https://{{ .ui_host }}/orgs/{{ rs_org_id }}/automation/incidents/projects/{{ rs_project_id }}={{ .incident_id }})**
{{ range .failed_action_items }}
```
{{ .error }}
```
{{ end }}

{{ end }}
    EOS
    check logic_or($ds_parent_policy_terminated, eq(size(data), 0))
    escalate $esc_email_error
  end

  validate_each $ds_instances_schedule_result_action_start do
    summary_template "{{ with index data 0 }}{{ .policy_name }}{{ end }}: Starting {{ len data }} Google Scheduled VM Instances"
    detail_template <<-EOS
The following Google VM Instances are scheduled to start now:
{{ range data }}
- [{{ .resourceName }}](https://console.cloud.google.com/compute/instancesDetail/zones/{{ .zone }}/instances/{{ .resourceID }}?project={{ .accountID }}) in project `{{ .accountName }} ({{ .projectNumber }})` is scheduled to start at {{ .next_start }}.
{{ end }}
EOS
    # Policy check fails and incident is created only if data is not empty and the Parent Policy has not been terminated
    check logic_or($ds_parent_policy_terminated, eq(val(item, "resourceID"), ""))
    escalate $esc_email_start
    escalate $esc_execute_schedules
    hash_exclude "tags"
  end

  validate_each $ds_instances_schedule_result_action_stop do
    summary_template "{{ with index data 0 }}{{ .policy_name }}{{ end }}: Stopping {{ len data }} Google Scheduled VM Instances"
    detail_template <<-EOS
The following Google VM Instances are scheduled to stop now:
{{ range data }}
- [{{ .resourceName }}](https://console.cloud.google.com/compute/instancesDetail/zones/{{ .zone }}/instances/{{ .resourceID }}?project={{ .accountID }}) in project `{{ .accountName }} ({{ .projectNumber }})` is scheduled to stop at {{ .next_stop }}.
{{ end }}
EOS
    # Policy check fails and incident is created only if data is not empty and the Parent Policy has not been terminated
    check logic_or($ds_parent_policy_terminated, eq(val(item, "resourceID"), ""))
    escalate $esc_email_stop
    escalate $esc_execute_schedules
    hash_exclude "tags"
  end

  validate_each $ds_instances_schedule_result do
    summary_template "{{ with index data 0 }}{{ .policy_name }}{{ end }}: {{ len data }} Google Scheduled VM Instances"
    detail_template <<-EOS
    The following Google VM Instances have label `{{ parameters.param_label_schedule }}` and will be automatically started and stopped on a schedule.
  EOS
    # Policy check fails and incident is created only if data is not empty and the Parent Policy has not been terminated
    check logic_or($ds_parent_policy_terminated, eq(val(item, "resourceID"), ""))
    escalate $esc_update_schedules
    escalate $esc_delete_schedules
    escalate $esc_start_instances
    escalate $esc_stop_instances
    escalate $esc_delete_instances
    hash_exclude "tags"
    export do
      resource_level true
      field "accountID" do
        label "Project ID"
      end
      field "accountName" do
        label "Project Name"
      end
      field "projectNumber" do
        label "Project Number"
      end
      field "resourceID" do
        label "Resource ID"
      end
      field "resourceName" do
        label "Resource Name"
      end
      field "resourceType" do
        label "Resource Type"
      end
      field "zone" do
        label "Zone"
      end
      field "region" do
        label "Region"
      end
      field "hostname" do
        label "Hostname"
      end
      field "platform" do
        label "Platform"
      end
      field "tags" do
        label "Labels"
      end
      field "service" do
        label "Service"
      end
      field "status" do
        label "Status"
      end
      field "selfLink" do
        label "Resource Link"
      end
      field "schedule" do
        label "Schedule"
      end
      field "next_start" do
        label "Next Start"
      end
      field "next_stop" do
        label "Next Stop"
      end
      field "id" do
        label "ID"
        path "resourceID"
      end
      field "event_active" do
        label "Event Active"
      end
    end
  end
end

###############################################################################
# Escalations
###############################################################################

escalation "esc_email_start" do
  automatic contains($param_automatic_action, "Start Notification")
  label "Send Email"
  description "Send incident email"
  email $param_email
end

escalation "esc_email_stop" do
  automatic contains($param_automatic_action, "Stop Notification")
  label "Send Email"
  description "Send incident email"
  email $param_email
end

escalation "esc_email_error" do
  automatic contains($param_automatic_action, "Error Notification")
  label "Send Email"
  description "Send incident email"
  email $param_email
end

escalation "esc_execute_schedules" do
  automatic contains($param_automatic_action, "Execute Schedules")
  label "Execute Schedules"
  description "Approval to start or stop all selected instances based on schedule"
  run "execute_schedules", data, $param_label_schedule
end

escalation "esc_update_schedules" do
  automatic false
  label "Update Schedules"
  description "Approval to update the schedule labels on all selected instances"
  parameter "param_schedule" do
    type "string"
    category "Policy Actions"
    label "New Schedule"
    description "Enter a new value for the schedule label. See README for more details"
    # No default value, user input required
  end
  run "update_schedules", data, $param_schedule, $param_label_schedule
end

escalation "esc_delete_schedules" do
  automatic false
  label "Delete Schedules"
  description "Approval to delete the schedule labels on all selected instances"
  run "delete_schedules", data, $param_label_schedule
end

escalation "esc_start_instances" do
  automatic false
  label "Start Instances"
  description "Approval to start all selected instances"
  run "start_instances", data
end

escalation "esc_stop_instances" do
  automatic false
  label "Stop Instances"
  description "Approval to stop all selected instances"
  run "stop_instances", data
end

escalation "esc_delete_instances" do
  automatic false
  label "Delete Instances"
  description "Approval to delete all selected instances"
  run "delete_instances", data
end

###############################################################################
# Cloud Workflow
###############################################################################

# Core CWF functions for iterating through items
define execute_schedules($data, $param_label_schedule) return $all_responses do
  $$all_responses = []

  foreach $instance in $data do
    sub on_error: handle_error() do
      call execute_schedule($instance, $param_label_schedule)
    end
  end

  if inspect($$errors) != "null"
    raise join($$errors, "\n")
  end
end

define update_schedules($data, $param_schedule, $param_label_schedule) return $all_responses do
  $$all_responses = []

  foreach $instance in $data do
    sub on_error: handle_error() do
      call update_schedule($instance, $param_schedule, $param_label_schedule) retrieve $update_response, $window_active
    end
  end

  if inspect($$errors) != "null"
    raise join($$errors, "\n")
  end
end

define delete_schedules($data, $param_label_schedule) return $all_responses do
  $$all_responses = []

  foreach $instance in $data do
    sub on_error: handle_error() do
      call delete_schedule($instance, $param_label_schedule)
    end
  end

  if inspect($$errors) != "null"
    raise join($$errors, "\n")
  end
end

define start_instances($data) return $all_responses do
  $$all_responses = []

  foreach $instance in $data do
    sub on_error: handle_error() do
      call start_instance($instance)
    end
  end

  if inspect($$errors) != "null"
    raise join($$errors, "\n")
  end
end

define stop_instances($data) return $all_responses do
  $$all_responses = []

  foreach $instance in $data do
    sub on_error: handle_error() do
      call stop_instance($instance)
    end
  end

  if inspect($$errors) != "null"
    raise join($$errors, "\n")
  end
end

define delete_instances($data) return $all_responses do
  $$all_responses = []

  foreach $instance in $data do
    sub on_error: handle_error() do
      call delete_instance($instance)
    end
  end

  if inspect($$errors) != "null"
    raise join($$errors, "\n")
  end
end

# Secondary CWF functions for taking action on individual instances
define execute_schedule($instance, $param_label_schedule) return $response do
  ## Check if there is a schedule defined for this instance
  if $instance['schedule'] == null
    call task_label("Skipping instance without schedule: " + $instance["resourceName"])
  else
    call parse_schedule($instance['schedule']) retrieve $start_hour, $start_minute, $start_rule, $stop_hour, $stop_minute, $stop_rule, $timezone

    call window_active($start_hour, $start_minute, $start_rule, $stop_hour, $stop_minute, $stop_rule, $timezone) retrieve $window_active

    if $window_active
      if $instance['status'] != "RUNNING"
        call start_instance($instance) retrieve $start_response
      else
        call task_label("Instance " + $instance["resourceName"] + " already running and time current inside schedule window.  No action needed.")
      end
    else
      if $instance['status'] != "TERMINATED" && $instance['status'] != "STOPPED"
        call stop_instance($instance) retrieve $stop_response
      else
        call task_label("Instance " + $instance["resourceName"] + " not running and current time outside schedule window.  No action needed.")
      end
    end
  end
end

define parse_schedule($schedule) return $start_hour, $start_minute, $start_rule, $stop_hour, $stop_minute, $stop_rule, $timezone do
  # Time
  $schedule_time = split($schedule, '_')[0]

  $start_time = split($schedule_time, '-')[0]
  $start_time = insert($start_time, 2, ":")
  $start_hour = split($start_time, ':')[0]
  $start_minute = split($start_time, ':')[1]

  if ! $start_minute
    $start_minute = '00'
  end

  $stop_time = split($schedule_time, '-')[1]
  $stop_time = insert($stop_time, 2, ":")
  $stop_hour = split($stop_time, ':')[0]
  $stop_minute = split($stop_time, ':')[1]

  if ! $stop_minute
    $stop_minute = '00'
  end

  # Days
  $schedule_days = split($schedule, '_')[1]
  $days = gsub(capitalize($schedule_days), "-", ",")

  $start_rule = join(["FREQ=WEEKLY;BYDAY=", $days])
  $stop_rule = join(["FREQ=WEEKLY;BYDAY=", $days])

  # Timezone
  $schedule_timezone = split($schedule, '_')
  # check to see if there's more than 3 parts to the schedule
  # this can happy if the timezone has a `_` in it (e.g. `america_los_angeles`)
  if size($schedule_timezone) >= 3
    $tz = []
    $i = 2
    while $i < size($schedule_timezone) do
      $tz << $schedule_timezone[$i]
      $i = $i + 1
    end
    $schedule_timezone = join($tz, "_")
  end

  $timezone = "UTC"
  if $schedule_timezone
    call get_tzlist() retrieve $get_tzlist_response, $timezones
    $timezone = $timezones[$schedule_timezone]
  end
end

define update_schedule($instance, $schedule, $param_label_schedule) return $response, $window_active do
  call get_instance_info($instance) retrieve $get_instance_info_response, $instance_state, $new_labels, $fingerprint

  $new_labels[$param_label_schedule] = $schedule

  $url = $instance['selfLink'] + "/setLabels"
  call task_label("POST " + $url)

  $response = http_post(
    auth: $$auth_google,
    url: $url,
    headers: {
      "cache-control": "no-cache",
      "content-type": "application/json"
    },
    body: {
      "labels": $new_labels,
      "labelFingerprint": $fingerprint
    }
  )

  call task_label("Update Google VM instance labels response: " + to_s($response["code"]))
  $$all_responses << to_json({"req": "POST " + $url, "resp": $response})

  if $response["code"] != 204 && $response["code"] != 202 && $response["code"] != 200
    raise "Unexpected response updating Google VM instance labels: " + $instance["resourceName"] + " " + to_json($response)
  else
    call task_label("Updating Google VM instance labels successful: " + $instance["resourceName"])
  end
end

define delete_schedule($instance, $param_label_schedule) return $response do
  call get_instance_info($instance) retrieve $get_instance_info_response, $instance_state, $labels, $fingerprint

  $new_labels = {}

  foreach $label_key in keys($labels) do
    if $label_key != $param_label_schedule
      $new_labels[$label_key] = $labels[$label_key]
    end
  end

  $url = $instance['selfLink'] + "/setLabels"
  call task_label("POST " + $url)

  $response = http_post(
    auth: $$auth_google,
    url: $url,
    headers: {
      "cache-control": "no-cache",
      "content-type": "application/json"
    },
    body: {
      "labels": $new_labels,
      "labelFingerprint": $fingerprint
    }
  )

  call task_label("Delete Google VM instance labels response: " + $instance["resourceName"])
  $$all_responses << to_json({"req": "POST " + $url, "resp": $response})

  if $response["code"] != 204 && $response["code"] != 202 && $response["code"] != 200
    raise "Unexpected response deleting Google VM instance labels: " + $instance["resourceName"] + " " + to_json($response)
  else
    call task_label("Deleting Google VM instance labels successful: " + $instance["resourceName"])
  end
end

define delete_instance($instance) return $response do
  $url = $instance['selfLink']
  call task_label("DELETE " + $url)

  $response = http_delete(
    auth: $$auth_google,
    url: $url,
    headers: {
      "cache-control": "no-cache",
      "content-type": "application/json"
    }
  )

  call task_label("Delete Google VM instance response: " + $instance["resourceName"])
  $$all_responses << to_json({"req": "DELETE " + $url, "resp": $response})

  if $response["code"] != 204 && $response["code"] != 202 && $response["code"] != 200
    raise "Unexpected response deleting Google VM instance: "+ $instance["resourceName"] + " " + to_json($response)
  else
    call task_label("Delete Google VM instance successful: " + $instance["resourceName"])
  end
end

# Tertiary CWF functions for specific tasks
define window_active($start_hour, $start_minute, $start_rule, $stop_hour, $stop_minute, $stop_rule, $tz) return $window_active do
  $host = "bjlaftw4kh.execute-api.us-east-1.amazonaws.com"
  $href = "/production"
  $url = $host + $href
  call task_label("POST " + $url)

  $response = http_request(
    https: true,
    verb: "post",
    href: $href,
    host: $host,
    headers: { "content-type": "application/json" },
    body: {
      "start_hour": $start_hour,
      "start_minute": $start_minute,
      "start_rule": $start_rule,
      "stop_minute": $stop_minute,
      "stop_hour": $stop_hour,
      "stop_rule": $stop_rule,
      "tz": $tz
    }
  )

  call task_label("Post AWS API Gateway response: " + to_s($response["code"]))
  $$all_responses << to_json({"req": "POST " + $url, "resp": $response})

  if $response["code"] != 204 && $response["code"] != 202 && $response["code"] != 200
    raise "Unexpected response posting AWS API Gateway: " + $host + " " + to_json($response)
  else
    call task_label("Post AWS API Gateway successful: window_active=" + $response['body']['event_active'])
    $window_active = to_b($response['body']['event_active'])
  end
end

define start_instance($instance) return $response do
  $url = $instance['selfLink'] + '/start'
  call task_label("POST " + $url)

  $response = http_post(
    auth: $$auth_google,
    url: $url,
    headers: {
      "cache-control": "no-cache",
      "content-type": "application/json"
    }
  )

  call task_label("Start Google VM instance request response: " + $instance["resourceName"])
  $$all_responses << to_json({"req": "POST " + $url, "resp": $response})

  if $response["code"] != 204 && $response["code"] != 202 && $response["code"] != 200
    raise "Unexpected response starting Google VM instance: "+ $instance["resourceName"] + " " + to_json($response)
  else
    call task_label("Start Google VM instance request started: " + $instance["resourceName"])
  end

  call task_label("Validate Google VM instance started succesfully: " + $instance["resourceName"])

  sleep(5)
  call get_instance_info($instance) retrieve $state_response, $current_state, $labels, $fingerprint
  sleep(5)

  sub timeout: 5m, on_timeout: handle_timeout() do
    while $current_state != "RUNNING" do
      call get_instance_info($instance) retrieve $state_response, $current_state, $labels, $fingerprint
      sleep(5)
    end
  end

  if $current_state == "RUNNING"
    call task_label("Validated Google VM instance started succesfully: " + $instance["resourceName"])
  else
  call task_label("Unexpected status after Google VM instance start: " + $instance["resourceName"] + " " + $instance["status"])
    raise "Unexpected status after Google VM instance start: " + $instance["resourceName"]
  end
end

define stop_instance($instance) return $response do
  $url = $instance['selfLink'] + '/stop'
  call task_label("POST " + $url)

  $response = http_post(
    auth: $$auth_google,
    url: $url,
    headers: {
      "cache-control": "no-cache",
      "content-type": "application/json"
    }
  )

  call task_label("Stop Google VM instance request response: " + to_s($response["code"]))
  $$all_responses << to_json({"req": "POST " + $url, "resp": $response})

  if $response["code"] != 204 && $response["code"] != 202 && $response["code"] != 200
    raise "Unexpected response stopping Google VM instance: "+ $instance["resourceName"] + " " + to_json($response)
  else
    call task_label("Stop Google VM instance request started: " + $instance["resourceName"])
  end

  call task_label("Validate Google VM instance stopped succesfully: " + $instance["resourceName"])

  sleep(5)
  call get_instance_info($instance) retrieve $state_response, $current_state, $labels, $fingerprint
  sleep(5)

  sub timeout: 5m, on_timeout: handle_timeout() do
    while $current_state != "STOPPED" && $current_state != "TERMINATED" do
      call get_instance_info($instance) retrieve $state_response, $current_state, $labels, $fingerprint
      sleep(5)
    end
  end

  if $current_state == "STOPPED" || $current_state == "TERMINATED"
    call task_label("Validated Google VM instance stopped succesfully: " + $instance["resourceName"])
  else
    call task_label("Unexpected status after Google VM instance stop: " + $instance["resourceName"] + " " + $instance["status"])
    raise "Unexpected status after Google VM instance stop: " + $instance["resourceName"]
  end
end

define get_instance_info($instance) return $response, $instance_state, $labels, $fingerprint do
  $url = $instance['selfLink']
  call task_label("GET " + $url)

  $response = http_get(
    auth: $$auth_google,
    url: $url,
    headers: {
      "cache-control": "no-cache",
      "content-type": "application/json"
    }
  )

  call task_label("Get Google VM instance response: " + to_s($response["code"]))
  $$all_responses << to_json({"req": "GET " + $url, "resp": $response})

  if $response["code"] != 204 && $response["code"] != 202 && $response["code"] != 200
    raise "Unexpected response getting Google VM instance: "+ $instance["resourceName"] + " " + to_json($response)
  else
    $instance_state = $response["body"]["status"]
    $labels = $response["body"]["labels"]
    $fingerprint = $response["body"]["labelFingerprint"]
    call task_label("Get Google VM instance successful: " + $instance["resourceName"] + " " + $instance_state)
  end
end

define get_tzlist() return $response, $tzlist do
  $host = "raw.githubusercontent.com"
  $href = "/flexera-public/policy_templates/master/data/tz_database/timezones_list.json"
  $url = $host + $href
  call task_label("GET " + $url)

  $response = http_request(
    https: true,
    verb: "get",
    host: $host,
    href: $href,
    headers:{
      'User-Agent': 'RS Policies'
    }
  )

  call task_label("Get Github Timezone List response: " + to_s($response["code"]))
  $$all_responses << to_json({"req": "GET " + $url, "resp": $response})

  if $response["code"] != 204 && $response["code"] != 202 && $response["code"] != 200
    raise "Unexpected response getting Github Timezone List: "+ $url + " " + to_json($response)
  else
    call task_label("Get Github Timezone List successful")
    $tzlist = from_json($response['body'])
  end
end

define handle_error() do
  if !$$errors
    $$errors = []
  end
  $$errors << $_error["type"] + ": " + $_error["message"]
  # We check for errors at the end, and raise them all together
  # Skip errors handled by this definition
  $_error_behavior = "skip"
end

define handle_timeout() do
  $err = "Timeout reached. Skipping item and continuing."
  call task_label($err)
  raise $err
  $_timeout_behavior = "skip"
end

define task_label($label) do
  $now = strftime(now(), "%Y/%m/%d %H:%M:%S")
  if !$$label_log
    $$label_log = "[" + $now + "] "+ $label
  else
    $$label_log = $$label_log + "\n" + "[" + $now + "] "+ $label
  end
  task_label($label)
end

###############################################################################
# Meta Policy [alpha]
# Not intended to be modified or used by policy developers
###############################################################################

# If the meta_parent_policy_id is not set it will evaluate to an empty string and we will look for the policy itself,
# if it is set we will look for the parent policy.
datasource "ds_get_policy" do
  request do
    auth $auth_flexera
    host rs_governance_host
    ignore_status [404]
    path join(["/api/governance/projects/", rs_project_id, "/applied_policies/", switch(ne(meta_parent_policy_id, ""), meta_parent_policy_id, policy_id) ])
    header "Api-Version", "1.0"
  end
  result do
    encoding "json"
    field "id", jmes_path(response, "id")
  end
end

datasource "ds_parent_policy_terminated" do
  run_script $js_decide_if_self_terminate, $ds_get_policy, policy_id, meta_parent_policy_id
end

# If the policy was applied by a meta_parent_policy we confirm it exists if it doesn't we confirm we are deleting
# This information is used in two places:
# - determining whether or not we make a delete call
# - determining if we should create an incident (we don't want to create an incident on the run where we terminate)
script "js_decide_if_self_terminate", type: "javascript" do
  parameters "found", "self_policy_id", "meta_parent_policy_id"
  result "result"
  code <<-EOS
  var result
  if (meta_parent_policy_id != "" && found.id == undefined) {
    result = true
  } else {
    result = false
  }
  EOS
end

# Two potentials ways to set this up:
# - this way and make a unneeded 'get' request when not deleting
# - make the delete request an interate and have it iterate over an empty array when not deleting and an array with one item when deleting
script "js_make_terminate_request", type: "javascript" do
  parameters "should_delete", "policy_id", "rs_project_id", "rs_governance_host"
  result "request"
  code <<-EOS

  var request = {
    auth:  'auth_flexera',
    host: rs_governance_host,
    path: "/api/governance/projects/" + rs_project_id + "/applied_policies/" + policy_id,
    headers: {
      "API-Version": "1.0",
      "Content-Type":"application/json"
    },
  }

  if (should_delete) {
    request.verb = 'DELETE'
  }
  EOS
end

datasource "ds_terminate_self" do
  request do
    run_script $js_make_terminate_request, $ds_parent_policy_terminated, policy_id, rs_project_id, rs_governance_host
  end
end

datasource "ds_is_deleted" do
  run_script $js_check_deleted, $ds_terminate_self
end

# This is just a way to have the check delete request connect to the farthest leaf from policy.
# We want the delete check to the first thing the policy does to avoid the policy erroring before it can decide whether or not it needs to self terminate
# Example a customer deletes a credential and then terminates the parent policy. We still want the children to self terminate
# The only way I could see this not happening is if the user who applied the parent_meta_policy was offboarded or lost policy access, the policies who are impersonating the user
# would not have access to self-terminate
# It may be useful for the backend to enable a mass terminate at some point for all meta_child_policies associated with an id.
script "js_check_deleted", type: "javascript" do
  parameters "response"
  result "result"
  code <<-EOS
  result = {"path":"/"}
  EOS
end

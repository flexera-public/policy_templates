name "Google Schedule Instance"
rs_pt_ver 20180301
type "policy"
short_description "Schedules Google VM instances to start and stop at specific times based on a configuration stored in the instance's labels. See the [README](https://github.com/flexera-public/policy_templates/tree/master/cost/google/schedule_instance/) and [docs.flexera.com/flexera/EN/Automation](https://docs.flexera.com/flexera/EN/Automation/AutomationGS.htm) to learn more."
long_description ""
category "Cost"
severity "low"
default_frequency "daily"
info(
  version: "3.0",
  provider: "Google",
  service: "Compute",
  policy_set: "Schedule Instance"
)

###############################################################################
# User inputs
###############################################################################

parameter "param_email" do
  type "list"
  category "Policy Settings"
  label "Email Addresses"
  description "A list of email addresses to notify."
  default []
end

parameter "param_label_schedule" do
  type "string"
  category "Label Keys"
  label "Schedule Label Key"
  description "Label key that schedule information is stored in. Default is recommended for most use cases."
  default "schedule"
end

parameter "param_label_next_start" do
  type "string"
  category "Label Keys"
  label "Next Start Label Key"
  description "Label key to use for scheduling instance to start. Default is recommended for most use cases."
  default "next_start"
end

parameter "param_label_next_stop" do
  type "string"
  category "Label Keys"
  label "Next Stop Label Key"
  description "Label key to use for scheduling instance to stop. Default is recommended for most use cases."
  default "next_stop"
end

parameter "param_projects_allow_or_deny" do
  type "string"
  category "Filters"
  label "Allow/Deny Projects"
  description "Allow or Deny entered Projects. See the README for more details."
  allowed_values "Allow", "Deny"
  default "Allow"
end

parameter "param_projects_list" do
  type "list"
  category "Filters"
  label "Allow/Deny Projects List"
  description "A list of allowed or denied Subscription IDs/names. See the README for more details."
  default []
end

parameter "param_regions_allow_or_deny" do
  type "string"
  category "Filters"
  label "Allow/Deny Regions"
  description "Allow or Deny entered regions. See the README for more details."
  allowed_values "Allow", "Deny"
  default "Allow"
end

parameter "param_regions_list" do
  type "list"
  category "Filters"
  label "Allow/Deny Regions List"
  description "A list of allowed or denied regions. See the README for more details."
  default []
end

parameter "param_exclusion_labels" do
  type "list"
  category "Filters"
  label "Exclusion Labels (Key:Value)"
  description "Google labels to ignore resources that you don't want to produce recommendations for. Use Key:Value format for specific label key/value pairs, and Key:* format to match any resource with a particular key, regardless of value. Examples: env:production, DO_NOT_DELETE:*"
  allowed_pattern /(^$)|[\w]*\:.*/
  default []
end

parameter "param_automatic_action" do
  type "list"
  category "Actions"
  label "Automatic Actions"
  description "When this value is set, this policy will automatically take the selected action."
  allowed_values ["Execute Schedules"]
  default []
end

###############################################################################
# Authentication
###############################################################################

credentials "auth_google" do
  schemes "oauth2"
  label "Google"
  description "Select the Google Cloud Credential from the list."
  tags "provider=gce"
end

credentials "auth_flexera" do
  schemes "oauth2"
  label "Flexera"
  description "Select Flexera One OAuth2 credentials"
  tags "provider=flexera"
end

###############################################################################
# Pagination
###############################################################################

pagination "pagination_google" do
  get_page_marker do
    body_path "nextPageToken"
  end
  set_page_marker do
    query "pageToken"
  end
end

###############################################################################
# Datasources & Scripts
###############################################################################

# Table to derive region from zone
datasource "ds_zone_to_region" do
  run_script $js_zone_to_region
end

script "js_zone_to_region", type:"javascript" do
  result "result"
  code <<-EOS
  result = {
    "us-east1-b": "us-east1",
    "us-east1-c": "us-east1",
    "us-east1-d": "us-east1",
    "us-east4-c": "us-east4",
    "us-east4-b": "us-east4",
    "us-east4-a": "us-east4",
    "us-central1-c": "us-central1",
    "us-central1-a": "us-central1",
    "us-central1-f": "us-central1",
    "us-central1-b": "us-central1",
    "us-west1-b": "us-west1",
    "us-west1-c": "us-west1",
    "us-west1-a": "us-west1",
    "europe-west4-a": "europe-west4",
    "europe-west4-b": "europe-west4",
    "europe-west4-c": "europe-west4",
    "europe-west1-b": "europe-west1",
    "europe-west1-d": "europe-west1",
    "europe-west1-c": "europe-west1",
    "europe-west3-c": "europe-west3",
    "europe-west3-a": "europe-west3",
    "europe-west3-b": "europe-west3",
    "europe-west2-c": "europe-west2",
    "europe-west2-b": "europe-west2",
    "europe-west2-a": "europe-west2",
    "asia-east1-b": "asia-east1",
    "asia-east1-a": "asia-east1",
    "asia-east1-c": "asia-east1",
    "asia-southeast1-b": "asia-southeast1",
    "asia-southeast1-a": "asia-southeast1",
    "asia-southeast1-c": "asia-southeast1",
    "asia-northeast1-b": "asia-northeast1",
    "asia-northeast1-c": "asia-northeast1",
    "asia-northeast1-a": "asia-northeast1",
    "asia-south1-c": "asia-south1",
    "asia-south1-b": "asia-south1",
    "asia-south1-a": "asia-south1",
    "australia-southeast1-b": "australia-southeast1",
    "australia-southeast1-c": "australia-southeast1",
    "australia-southeast1-a": "australia-southeast1",
    "southamerica-east1-b": "southamerica-east1",
    "southamerica-east1-c": "southamerica-east1",
    "southamerica-east1-a": "southamerica-east1",
    "asia-east2-a": "asia-east2",
    "asia-east2-b": "asia-east2",
    "asia-east2-c": "asia-east2",
    "asia-northeast2-a": "asia-northeast2",
    "asia-northeast2-b": "asia-northeast2",
    "asia-northeast2-c": "asia-northeast2",
    "asia-northeast3-a": "asia-northeast3",
    "asia-northeast3-b": "asia-northeast3",
    "asia-northeast3-c": "asia-northeast3",
    "asia-south2-a": "asia-south2",
    "asia-south2-b": "asia-south2",
    "asia-south2-c": "asia-south2",
    "asia-southeast2-a": "asia-southeast2",
    "asia-southeast2-b": "asia-southeast2",
    "asia-southeast2-c": "asia-southeast2",
    "australia-southeast2-a": "australia-southeast2",
    "australia-southeast2-b": "australia-southeast2",
    "australia-southeast2-c": "australia-southeast2",
    "europe-central2-a": "europe-central2",
    "europe-central2-b": "europe-central2",
    "europe-central2-c": "europe-central2",
    "europe-north1-a": "europe-north1",
    "europe-north1-b": "europe-north1",
    "europe-north1-c": "europe-north1",
    "europe-southwest1-a": "europe-southwest1",
    "europe-southwest1-b": "europe-southwest1",
    "europe-southwest1-c": "europe-southwest1",
    "europe-west6-a": "europe-west6",
    "europe-west6-b": "europe-west6",
    "europe-west6-c": "europe-west6",
    "northamerica-northeast1-a": "northamerica-northeast1",
    "northamerica-northeast1-b": "northamerica-northeast1",
    "northamerica-northeast1-c": "northamerica-northeast1",
    "northamerica-northeast2-a": "northamerica-northeast2",
    "northamerica-northeast2-b": "northamerica-northeast2",
    "northamerica-northeast2-c": "northamerica-northeast2",
    "us-west2-a": "us-west2",
    "us-west2-b": "us-west2",
    "us-west2-c": "us-west2",
    "us-west3-a": "us-west3",
    "us-west3-b": "us-west3",
    "us-west3-c": "us-west3",
    "us-west4-a": "us-west4",
    "us-west4-b": "us-west4",
    "us-west4-c": "us-west4",
    "us-west5-a": "us-west5",
    "us-west5-b": "us-west5",
    "us-west5-c": "us-west5",
    "us-west6-a": "us-west6",
    "us-west6-b": "us-west6",
    "us-west6-c": "us-west6",
    "us-west7-a": "us-west7",
    "us-west7-b": "us-west7",
    "us-west7-c": "us-west7"
  }
EOS
end

# Get applied policy metadata for use later
datasource "ds_applied_policy" do
  request do
    auth $auth_flexera
    host rs_governance_host
    path join(["/api/governance/projects/", rs_project_id, "/applied_policies/", policy_id])
    header "Api-Version", "1.0"
  end
end

datasource "ds_google_projects" do
  request do
    auth $auth_google
    pagination $pagination_google
    host "cloudresourcemanager.googleapis.com"
    path "/v1/projects/"
    query "filter", "(lifecycleState:ACTIVE)"
    # Header X-Meta-Flexera has no affect on datasource query, but is required for Meta Policies
    # Forces `ds_is_deleted` datasource to run first during policy execution
    header "Meta-Flexera", val($ds_is_deleted, "path")
  end
  result do
    encoding "json"
    collect jmes_path(response, "projects[*]") do
      field "number", jmes_path(col_item, "projectNumber")
      field "id", jmes_path(col_item, "projectId")
      field "name", jmes_path(col_item, "name")
    end
  end
end

datasource "ds_google_projects_filtered" do
  run_script $js_google_projects_filtered, $ds_google_projects, $param_projects_allow_or_deny, $param_projects_list
end

script "js_google_projects_filtered", type: "javascript" do
  parameters "ds_google_projects", "param_projects_allow_or_deny", "param_projects_list"
  result "result"
  code <<-EOS
  if (param_projects_list.length > 0) {
    result = _.filter(ds_google_projects, function(project) {
      include_project = _.contains(param_projects_list, project['id']) || _.contains(param_projects_list, project['name']) || _.contains(param_projects_list, project['number'])

      if (param_projects_allow_or_deny == "Deny") {
        include_project = !include_project
      }

      return include_project
    })
  } else {
    result = ds_google_projects
  }
EOS
end

datasource "ds_get_instances" do
  iterate $ds_google_projects_filtered
  request do
    auth $auth_google
    host "compute.googleapis.com"
    path join(["/compute/v1/projects/", val(iter_item, 'id'), "/aggregated/instances"])
    header "User-Agent", "RS Policies"
    header "Content-Type", "application/json"
    ignore_status [403, 404]
  end
  result do
    encoding "json"
    field "instances", jq(response, "[ .items | to_entries | map_values(.value) | map(select(has(\"instances\"))) | .[].instances | .[] | {id,name,selfLink,status,tags,zone,kind,hostname,cpuPlatform,labels,description,machineType}]")
    field "projectId", val(iter_item, "id")
    field "projectName", val(iter_item, "name")
    field "projectNumber", val(iter_item, "number")
  end
end

datasource "ds_instances" do
  run_script $js_instances, $ds_get_instances, $ds_zone_to_region
end

script "js_instances", type: "javascript" do
  parameters "ds_get_instances", "ds_zone_to_region"
  result "result"
  code <<-EOS
  result = []

  _.each(ds_get_instances, function(response) {
    _.each(response['instances'], function(instance) {
      zone = instance['zone'].split('/')[8]
      region = ds_zone_to_region[zone]

      result.push({
        id: instance['id'],
        name: instance['name'],
        description: instance['description'],
        status: instance['status'],
        selfLink: instance['selfLink'],
        cpuPlatform: instance['cpuPlatform'],
        machineType: instance['machineType'],
        hostname: instance['hostname'],
        kind: instance['kind'],
        labels: instance['labels'],
        projectId: response['projectId'],
        projectName: response['projectName'],
        projectNumber: response['projectNumber'],
        zone: zone,
        region: region
      })
    })
  })
EOS
end

datasource "ds_instances_label_filtered" do
  run_script $js_instances_label_filtered, $ds_instances, $param_label_schedule, $param_exclusion_labels
end

script "js_instances_label_filtered", type: "javascript" do
  parameters "ds_instances", "param_label_schedule", "param_exclusion_labels"
  result "result"
  code <<-EOS
  if (param_exclusion_labels.length > 0) {
    result = _.reject(ds_instances, function(instance) {
      labels = []

      if (typeof(instance['labels']) == 'object') {
        _.each(Object.keys(instance['labels']), function(key) {
          labels.push([key, ":", instance['labels'][key]].join(''))
          labels.push([key, ":*"].join(''))
        })
      }

      exclude_instance = false

      _.each(param_exclusion_labels, function(exclusion_label) {
        if (_.contains(labels, exclusion_label)) {
          exclude_instance = true
        }
      })

      return exclude_instance
    })
  } else {
    result = ds_instances
  }

  // Filter out any VMs that do not have the schedule tag key
  result = _.filter(result, function(vm) {
    label_keys = []
    if (typeof(vm['labels']) == 'object') { label_keys = _.keys(vm['labels']) }

    return _.contains(label_keys, param_label_schedule)
  })
EOS
end

datasource "ds_instances_region_filtered" do
  run_script $js_instances_region_filtered, $ds_instances_label_filtered, $param_regions_allow_or_deny, $param_regions_list
end

script "js_instances_region_filtered", type: "javascript" do
  parameters "ds_instances_label_filtered", "param_regions_allow_or_deny", "param_regions_list"
  result "result"
  code <<-EOS
  if (param_regions_list.length > 0) {
    result = _.filter(ds_instances_label_filtered, function(instance) {
      include_instance = _.contains(param_regions_list, instance['region'])

      if (param_regions_allow_or_deny == "Deny") {
        include_instance = !include_instance
      }

      return include_instance
    })
  } else {
    result = ds_instances_label_filtered
  }
EOS
end

datasource "ds_instances_to_schedule" do
  run_script $js_instances_to_schedule, $ds_instances_region_filtered, $ds_applied_policy, $param_label_schedule, $param_label_next_start, $param_label_next_stop
end

script "js_instances_to_schedule", type: "javascript" do
  parameters "ds_instances_region_filtered", "ds_applied_policy", "param_label_schedule", "param_label_next_start", "param_label_next_stop"
  result "result"
  code <<-EOS
  result = []
  now = new Date()

  _.each(ds_instances_region_filtered, function(instance) {
    schedule = null
    next_start = null
    next_stop = null

    labels = []

    if (typeof(instance['labels']) == 'object') {
      _.each(_.keys(instance['labels']), function(key) {
        value = instance['labels'][key]

        labels.push(key + '=' + value)

        if (key == param_label_schedule)   { schedule = value   }
        if (key == param_label_next_start) { next_start = value }
        if (key == param_label_next_stop)  { next_stop = value  }
      })
    }

    if (next_start != null) { next_start = new Date(next_start) }
    if (next_stop != null)  { next_stop = new Date(next_stop)   }

    if (now > next_start || now > next_stop || next_start == null || next_stop == null) {
      if (next_start != null) { next_start = next_start.toISOString() }
      if (next_stop != null)  { next_stop = next_stop.toISOString()   }

      result.push({
        resourceID: instance['id'],
        resourceName: instance['name'],
        description: instance['description'],
        status: instance['status'],
        selfLink: instance['selfLink'],
        platform: instance['cpuPlatform'],
        resourceType: instance['machineType'],
        hostname: instance['hostname'],
        kind: instance['kind'],
        accountID: instance['projectId'],
        accountName: instance['projectName'],
        projectNumber: instance['projectNumber'],
        zone: instance['zone'],
        region: instance['region'],
        tags: labels.join(', '),
        policy_name: ds_applied_policy['name'],
        next_start: next_start,
        next_stop: next_stop,
        schedule: schedule,
        service: "Compute Engine"
      })
    }
  })

  result = _.sortBy(result, 'resourceID')
  result = _.sortBy(result, 'zone')
  result = _.sortBy(result, 'region')
  result = _.sortBy(result, 'accountID')
EOS
end

###############################################################################
# Policy
###############################################################################

policy "pol_schedule_instance" do
  validate_each $ds_instances_to_schedule do
    summary_template "{{ with index data 0 }}{{ .policy_name }}{{ end }}: {{ len data }} Google Scheduled VM Instances"
    # Policy check fails and incident is created only if data is not empty and the Parent Policy has not been terminated
    check logic_or($ds_parent_policy_terminated, eq(val(item, "resourceID"), ""))
    escalate $esc_email
    escalate $esc_execute_schedules
    escalate $esc_update_schedules
    escalate $esc_delete_schedules
    escalate $esc_start_instances
    escalate $esc_stop_instances
    escalate $esc_delete_instances
    hash_exclude "tags", "tags_object"
    export do
      resource_level true
      field "accountID" do
        label "Project ID"
      end
      field "accountName" do
        label "Project Name"
      end
      field "projectNumber" do
        label "Project Number"
      end
      field "resourceID" do
        label "Resource ID"
      end
      field "resourceName" do
        label "Resource Name"
      end
      field "resourceType" do
        label "Resource Type"
      end
      field "zone" do
        label "Zone"
      end
      field "region" do
        label "Region"
      end
      field "hostname" do
        label "Hostname"
      end
      field "platform" do
        label "Platform"
      end
      field "tags" do
        label "Labels"
      end
      field "service" do
        label "Service"
      end
      field "status" do
        label "Status"
      end
      field "selfLink" do
        label "Resource Link"
      end
      field "schedule" do
        label "Schedule"
      end
      field "next_start" do
        label "Next Start"
      end
      field "next_stop" do
        label "Next Stop"
      end
      field "id" do
        label "ID"
        path "resourceID"
      end
    end
  end
end

###############################################################################
# Escalations
###############################################################################

escalation "esc_email" do
  automatic true
  label "Send Email"
  description "Send incident email"
  email $param_email
end

escalation "esc_execute_schedules" do
  automatic contains($param_automatic_action, "Execute Schedules")
  label "Execute Schedules"
  description "Approval to start or stop all selected instances based on schedule"
  run "execute_schedules", data, $param_label_schedule, $param_label_next_start, $param_label_next_stop
end

escalation "esc_update_schedules" do
  automatic false
  label "Update Schedules"
  description "Approval to update the schedule tags on all selected instances"
  parameter "param_schedule" do
    type "string"
    category "Policy Actions"
    label "New Schedule"
    description "Enter a new value for the schedule tag. See README for more details"
  end
  run "update_schedules", data, $param_schedule, $param_label_schedule, $param_label_next_start, $param_label_next_stop
end

escalation "esc_delete_schedules" do
  automatic false
  label "Delete Schedules"
  description "Approval to delete the schedule tags on all selected instances"
  run "delete_schedules", data, $param_label_schedule, $param_label_next_start, $param_label_next_stop
end

escalation "esc_start_instances" do
  automatic false
  label "Start Instances"
  description "Approval to start all selected instances"
  run "start_instances", data
end

escalation "esc_stop_instances" do
  automatic false
  label "Stop Instances"
  description "Approval to stop all selected instances"
  run "stop_instances", data
end

escalation "esc_delete_instances" do
  automatic false
  label "Delete Instances"
  description "Approval to delete all selected instances"
  run "delete_instances", data
end

###############################################################################
# Cloud Workflow
###############################################################################

# Core CWF functions for iterating through items
define execute_schedules($data, $param_label_schedule, $param_label_next_start, $param_label_next_stop) return $all_responses do
  $$all_responses = []

  foreach $instance in $data do
    sub on_error: handle_error() do
      call execute_schedule($instance, $param_label_schedule, $param_label_next_start, $param_label_next_stop)
    end
  end

  if inspect($$errors) != "null"
    raise join($$errors,"\n")
  end
end

define update_schedules($data, $param_schedule, $param_label_schedule, $param_label_next_start, $param_label_next_stop) return $all_responses do
  $$all_responses = []

  foreach $instance in $data do
    sub on_error: handle_error() do
      call update_schedule($instance, $param_schedule, $param_label_schedule, $param_label_next_start, $param_label_next_stop) retrieve $update_response, $window_active
    end
  end

  if inspect($$errors) != "null"
    raise join($$errors,"\n")
  end
end

define delete_schedules($data, $param_label_schedule, $param_label_next_start, $param_label_next_stop) return $all_responses do
  $$all_responses = []

  foreach $instance in $data do
    sub on_error: handle_error() do
      call delete_schedule($instance, $param_label_schedule, $param_label_next_start, $param_label_next_stop)
    end
  end

  if inspect($$errors) != "null"
    raise join($$errors,"\n")
  end
end

define start_instances($data) return $all_responses do
  $$all_responses = []

  foreach $instance in $data do
    sub on_error: handle_error() do
      call start_instance($instance)
    end
  end

  if inspect($$errors) != "null"
    raise join($$errors,"\n")
  end
end

define stop_instances($data) return $all_responses do
  $$all_responses = []

  foreach $instance in $data do
    sub on_error: handle_error() do
      call stop_instance($instance)
    end
  end

  if inspect($$errors) != "null"
    raise join($$errors,"\n")
  end
end

define delete_instances($data) return $all_responses do
  $$all_responses = []

  foreach $instance in $data do
    sub on_error: handle_error() do
      call delete_instance($instance)
    end
  end

  if inspect($$errors) != "null"
    raise join($$errors,"\n")
  end
end

# Secondary CWF functions for taking action on individual instances
define execute_schedule($instance, $param_label_schedule, $param_label_next_start, $param_label_next_stop) return $response do
  call update_schedule($instance, $instance['schedule'], $param_label_schedule, $param_label_next_start, $param_label_next_stop) retrieve $update_response, $window_active

  if $window_active
    call start_instance($instance) retrieve $start_response
  else
    call stop_instance($instance) retrieve $stop_response
  end
end

define update_schedule($instance, $schedule, $param_label_schedule, $param_label_next_start, $param_label_next_stop) return $response, $window_active do
  $rule = split($schedule, ';')[1]
  $time_range = split($schedule, ';')[0]

  $start_time = split($time_range, '-')[0]
  $start_hour = split($start_time, ':')[0]
  $start_minute = split($start_time, ':')[1]

  if $start_minute == null
    $start_minute = '00'
  end

  $stop_time = split($time_range, '-')[1]
  $stop_hour = split($stop_time, ':')[0]
  $stop_minute = split($stop_time, ':')[1]

  if $stop_minute == null
    $stop_minute = '00'
  end

  $start_rule = join(["FREQ=WEEKLY;BYDAY=", $rule])
  $stop_rule = join(["FREQ=WEEKLY;BYDAY=", $rule])
  $timezone = split($schedule, ';')[2]

  if ! $timezone
    $timezone = "UTC"
  end

  call window_active($start_hour, $start_minute, $start_rule, $stop_hour, $stop_minute, $stop_rule, $timezone) retrieve $window_active, $next_start, $next_stop
  call get_instance_info($instance) retrieve $get_instance_info_response, $instance_state, $new_labels, $fingerprint

  $new_labels[$param_label_schedule] = $schedule
  $new_labels[$param_label_next_start] = $next_start
  $new_labels[$param_label_next_stop] = $next_stop

  $url = $instance['selfLink'] + "/setLabels"
  task_label("POST " + $url)

  $response = http_post(
    auth: $$auth_google,
    url: $url,
    headers: {
      "cache-control": "no-cache",
      "content-type": "application/json"
    },
    body: {
      "labels": $new_labels,
      "labelFingerprint": $fingerprint
    }
  )

  task_label("Update Google VM instance tags response: " + $instance["resourceName"] + " " + to_json($response))
  $$all_responses << to_json({"req": "POST " + $url, "resp": $response})

  if $response["code"] != 204 && $response["code"] != 202 && $response["code"] != 200
    raise "Unexpected response updating Google VM instance tags: " + $instance["resourceName"] + " " + to_json($response)
  else
    task_label("Updating Google VM instance tags successful: " + $instance["resourceName"])
  end
end

define delete_schedule($instance, $param_label_schedule, $param_label_next_start, $param_label_next_stop) return $response do
  call get_instance_info($instance) retrieve $get_instance_info_response, $instance_state, $labels, $fingerprint

  $new_labels = {}

  foreach $label_key in keys($labels) do
    if $label_key != $param_label_next_start && $label_key != $param_label_next_stop && $label_key != $param_label_schedule
      $new_labels[$label_key] = $labels[$label_key]
    end
  end

  $url = $instance['selfLink'] + "/setLabels"
  task_label("POST " + $url)

  $response = http_post(
    auth: $$auth_google,
    url: $url,
    headers: {
      "cache-control": "no-cache",
      "content-type": "application/json"
    },
    body: {
      "labels": $new_labels,
      "labelFingerprint": $fingerprint
    }
  )

  task_label("Delete Google VM instance tags response: " + $instance["resourceName"] + " " + to_json($response))
  $$all_responses << to_json({"req": "POST " + $url, "resp": $response})

  if $response["code"] != 204 && $response["code"] != 202 && $response["code"] != 200
    raise "Unexpected response deleting Google VM instance tags: " + $instance["resourceName"] + " " + to_json($response)
  else
    task_label("Deleting Google VM instance tags successful: " + $instance["resourceName"])
  end
end

define delete_instance($instance) return $response do
  $url = $instance['selfLink']
  task_label("DELETE " + $url)

  $response = http_delete(
    auth: $$auth_google,
    url: $url,
    headers: {
      "cache-control": "no-cache",
      "content-type": "application/json"
    }
  )

  task_label("Delete Google VM instance response: " + $instance["resourceName"] + " " + to_json($response))
  $$all_responses << to_json({"req": "DELETE " + $url, "resp": $response})

  if $response["code"] != 204 && $response["code"] != 202 && $response["code"] != 200
    raise "Unexpected response deleting Google VM instance: "+ $instance["resourceName"] + " " + to_json($response)
  else
    task_label("Delete Google VM instance successful: " + $instance["resourceName"])
  end
end

# Tertiary CWF functions for specific tasks
define window_active($start_hour, $start_minute, $start_rule, $stop_hour, $stop_minute, $stop_rule, $tz) return $window_active, $next_start, $next_stop do
  $host = "bjlaftw4kh.execute-api.us-east-1.amazonaws.com"
  $href = "/production"
  $url = $host + $href
  task_label("POST " + $url)

  $response = http_request(
    https: true,
    verb: "post",
    href: $href,
    host: $host,
    headers: { "content-type": "application/json" },
    body: {
      "start_hour": $start_hour,
      "start_minute": $start_minute,
      "start_rule": $start_rule,
      "stop_minute": $stop_minute,
      "stop_hour": $stop_hour,
      "stop_rule": $stop_rule,
      "tz": $tz
    }
  )

  task_label("Post AWS API Gateway response: " + $host + " " + to_json($response))
  $$all_responses << to_json({"req": "POST " + $url, "resp": $response})

  if $response["code"] != 204 && $response["code"] != 202 && $response["code"] != 200
    raise "Unexpected response posting AWS API Gateway: " + $host + " " + to_json($response)
  else
    task_label("Post AWS API Gateway successful: " + $host)
    $window_active = to_b($response['body']['event_active'])
    $next_start = $response['body']['next_start']
    $next_stop = $response['body']['next_stop']
  end
end

define start_instance($instance) return $response do
  $url = $instance['selfLink'] + '/start'
  task_label("POST " + $url)

  $response = http_post(
    auth: $$auth_google,
    url: $url,
    headers: {
      "cache-control": "no-cache",
      "content-type": "application/json"
    }
  )

  task_label("Start Google VM instance response: " + $instance["resourceName"] + " " + to_json($response))
  $$all_responses << to_json({"req": "POST " + $url, "resp": $response})

  if $response["code"] != 204 && $response["code"] != 202 && $response["code"] != 200
    raise "Unexpected response starting Google VM instance: "+ $instance["resourceName"] + " " + to_json($response)
  else
    task_label("Start Google VM instance successful: " + $instance["resourceName"])
  end
end

define stop_instance($instance) return $response do
  $url = $instance['selfLink'] + '/stop'
  task_label("POST " + $url)

  $response = http_post(
    auth: $$auth_google,
    url: $url,
    headers: {
      "cache-control": "no-cache",
      "content-type": "application/json"
    }
  )

  task_label("Stop Google VM instance response: " + $instance["resourceName"] + " " + to_json($response))
  $$all_responses << to_json({"req": "POST " + $url, "resp": $response})

  if $response["code"] != 204 && $response["code"] != 202 && $response["code"] != 200
    raise "Unexpected response stopping Google VM instance: "+ $instance["resourceName"] + " " + to_json($response)
  else
    task_label("Stop Google VM instance successful: " + $instance["resourceName"])
  end

  sleep(5)
  call get_instance_info($instance) retrieve $state_response, $current_state, $labels, $fingerprint
  sleep(5)

  while $current_state != "STOPPED" && $current_state != "TERMINATED" do
    call get_instance_info($instance) retrieve $state_response, $current_state, $labels, $fingerprint
    sleep(5)
  end
end

define get_instance_info($instance) return $response, $instance_state, $labels, $fingerprint do
  $url = $instance['selfLink']
  task_label("GET " + $url)

  $response = http_get(
    auth: $$auth_google,
    url: $url,
    headers: {
      "cache-control": "no-cache",
      "content-type": "application/json"
    }
  )

  task_label("Get Google VM instance response: " + $instance["resourceName"] + " " + to_json($response))
  $$all_responses << to_json({"req": "GET " + $url, "resp": $response})

  if $response["code"] != 204 && $response["code"] != 202 && $response["code"] != 200
    raise "Unexpected response getting Google VM instance: "+ $instance["resourceName"] + " " + to_json($response)
  else
    task_label("Get Google VM instance successful: " + $instance["resourceName"])
    $instance_state = $response["body"]["status"]
    $labels = $response["body"]["labels"]
    $fingerprint = $response["body"]["labelFingerprint"]
  end
end

define handle_error() do
  if !$$errors
    $$errors = []
  end
  $$errors << $_error["type"] + ": " + $_error["message"]
  # We check for errors at the end, and raise them all together
  # Skip errors handled by this definition
  $_error_behavior = "skip"
end

###############################################################################
# Meta Policy [alpha]
# Not intended to be modified or used by policy developers
###############################################################################

# If the meta_parent_policy_id is not set it will evaluate to an empty string and we will look for the policy itself,
# if it is set we will look for the parent policy.
datasource "ds_get_policy" do
  request do
    auth $auth_flexera
    host rs_governance_host
    ignore_status [404]
    path join(["/api/governance/projects/", rs_project_id, "/applied_policies/", switch(ne(meta_parent_policy_id,""), meta_parent_policy_id, policy_id) ])
    header "Api-Version", "1.0"
  end
  result do
    encoding "json"
    field "id", jmes_path(response, "id")
  end
end

datasource "ds_parent_policy_terminated" do
  run_script $js_decide_if_self_terminate, $ds_get_policy, policy_id, meta_parent_policy_id
end

# If the policy was applied by a meta_parent_policy we confirm it exists if it doesn't we confirm we are deleting
# This information is used in two places:
# - determining whether or not we make a delete call
# - determining if we should create an incident (we don't want to create an incident on the run where we terminate)
script "js_decide_if_self_terminate", type: "javascript" do
  parameters "found", "self_policy_id", "meta_parent_policy_id"
  result "result"
  code <<-EOS
  var result
  if (meta_parent_policy_id != "" && found.id == undefined) {
    result = true
  } else {
    result = false
  }
  EOS
end

# Two potentials ways to set this up:
# - this way and make a unneeded 'get' request when not deleting
# - make the delete request an interate and have it iterate over an empty array when not deleting and an array with one item when deleting
script "js_make_terminate_request", type: "javascript" do
  parameters "should_delete", "policy_id", "rs_project_id", "rs_governance_host"
  result "request"
  code <<-EOS

  var request = {
    auth:  'auth_flexera',
    host: rs_governance_host,
    path: "/api/governance/projects/" + rs_project_id + "/applied_policies/" + policy_id,
    headers: {
      "API-Version": "1.0",
      "Content-Type":"application/json"
    },
  }

  if (should_delete) {
    request.verb = 'DELETE'
  }
  EOS
end

datasource "ds_terminate_self" do
  request do
    run_script $js_make_terminate_request, $ds_parent_policy_terminated, policy_id, rs_project_id, rs_governance_host
  end
end

datasource "ds_is_deleted" do
  run_script $js_check_deleted, $ds_terminate_self
end

# This is just a way to have the check delete request connect to the farthest leaf from policy.
# We want the delete check to the first thing the policy does to avoid the policy erroring before it can decide whether or not it needs to self terminate
# Example a customer deletes a credential and then terminates the parent policy. We still want the children to self terminate
# The only way I could see this not happening is if the user who applied the parent_meta_policy was offboarded or lost policy access, the policies who are impersonating the user
# would not have access to self-terminate
# It may be useful for the backend to enable a mass terminate at some point for all meta_child_policies associated with an id.
script "js_check_deleted", type: "javascript" do
  parameters "response"
  result "result"
  code <<-EOS
  result = {"path":"/"}
  EOS
end

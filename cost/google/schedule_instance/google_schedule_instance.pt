name "Google Schedule Instance"
rs_pt_ver 20180301
type "policy"
short_description "This Policy Template allows you to schedule start and stop times for your instance, along with the option to terminate instance, update and delete schedule. See the [README](https://github.com/flexera/policy_templates/tree/master/cost/google/schedule_instance/) and [docs.flexera.com/flexera/EN/Automation](https://docs.flexera.com/flexera/EN/Automation/AutomationGS.htm) to learn more."
long_description ""
category "Cost"
severity "low"
default_frequency "daily"
info(
  version: "2.3",
  provider: "GCE",
  service: "Compute",
  policy_set:"Schedule Instance"
)

###############################################################################
# User inputs
###############################################################################

parameter "param_email" do
  type "list"
  label "Email addresses"
  description "A list of email addresses to notify"
end

parameter "param_tags_to_exclude" do
  type "list"
  label "Exclusion Tags"
  description "A list of Google tags to ignore instances. Format: Key=Value"
end

parameter "param_automatic_action" do
  type "list"
  label "Automatic Action(s)"
  description "When this value is set, this policy will automatically take the selected action(s)"
  allowed_values ["Schedule Instances"]
end

###############################################################################
# Authentication
###############################################################################

credentials "google_auth" do
  schemes "oauth2"
  label "Google"
  description "Select the Google Cloud Credential from the list."
  tags "provider=gce"
end

###############################################################################
# Pagination
###############################################################################

pagination "google_pagination" do
  get_page_marker do
    body_path "nextPageToken"
  end
  set_page_marker do
    query "pageToken"
  end
end

###############################################################################
# Datasources
###############################################################################

datasource "ds_get_projectId" do
  request do
    auth $google_auth
    verb "GET"
    host "cloudresourcemanager.googleapis.com"
    path "/v1/projects"
    header "Accept", "application/json"
    query "filter", "lifecycleState=ACTIVE"
  end
  result do
    encoding"json"
    collect jmes_path(response, "projects[*]") do
      field "projectId", jmes_path(col_item, "projectId")
    end
  end
end

datasource "ds_get_zones" do
  iterate $ds_get_projectId
  request do
    auth $google_auth
    pagination $google_pagination
    verb "GET"
    host "compute.googleapis.com"
    path join(["/compute/v1/projects/", val(iter_item, "projectId"), "/zones"])
    header "Accept", "application/json"
  end
  result do
    encoding "json"
    collect jmes_path(response, "items[*]") do
      field "projectId", val(iter_item, "projectId")
      field "zone", jmes_path(col_item, "name")
    end
  end
end

datasource "ds_get_all_instances" do
  iterate $ds_get_zones
  request do
    auth $google_auth
    pagination $google_pagination
    verb "GET"
    host "compute.googleapis.com"
    path join(["/compute/v1/projects/", val(iter_item, "projectId"), "/zones/", val(iter_item, "zone"), "/instances"])
    query "filter", "labels.schedule!=null"
  end
  result do
    encoding "json"
    collect jmes_path(response, "items[*]") do
      field "id", jmes_path(col_item,"id")
      field "state", jmes_path(col_item,"status")
      field "labels", jmes_path(col_item, "labels")
      field "zone", val(iter_item,"zone")
      field "selfLink", jmes_path(col_item, "selfLink")
    end
  end
end

datasource "ds_filter_resources" do
  run_script $js_filter_resources, $ds_get_all_instances, $param_tags_to_exclude
end

###############################################################################
# Scripts
###############################################################################


script "js_filter_resources", type: "javascript" do
  parameters "ds_get_all_instances", "param_tags_to_exclude"
  result "result"
  code <<-EOS
  var result=[];
  for(var i=0;i<ds_get_all_instances.length;i++){
    var notMatched=true;
    var next_start=null;
    var next_stop=null;
    var next_start_iso=null;
    var next_stop_iso=null;
    var now=new Date();
    var instance=ds_get_all_instances[i];
    if(instance.id!=null){
      for(var j=0;j<param_tags_to_exclude.length;j++){
        for(data in instance.labels){
          if(data.toLowerCase()==param_tags_to_exclude[j].toLowerCase() || data.toLowerCase()+"="+instance.labels[data].toLowerCase()==param_tags_to_exclude[j].toLowerCase()){
            notMatched=false;
            break;
          }
        }
        if(notMatched==false)
        break;
      }
      if(notMatched){
        var all_labels="";
        for(var prop in instance.labels){
          all_labels=all_labels+", "+prop+"="+instance.labels[prop];
          if(prop== 'schedule'){
            var schedule=instance.labels[prop];
          }
          else if(prop== 'next_start'){
            var start_time=instance.labels[prop];
            start_time=start_time.split("t");
            start_time[1]=start_time[1].split("p").join("+");
            start_time[1]=start_time[1].split("-").join(":");
            start_time[1]=start_time[1].split("m").join("-");
            start_time=start_time.join("T");
            next_start=new Date(start_time);
            next_start_iso=next_start.toISOString();
          }
          else if(prop== 'next_stop'){
            var stop_time=instance.labels[prop];
            stop_time=stop_time.split("t");
            stop_time[1]=stop_time[1].split("p").join("+");
            stop_time[1]=stop_time[1].split("-").join(":");
            stop_time[1]=stop_time[1].split("m").join("-");
            stop_time=stop_time.join("T");
            next_stop=new Date(stop_time);
            next_stop_iso=next_stop.toISOString();
          }
        }
        if(now > next_start || now > next_stop || next_start==null || next_stop==null){
          result.push({
            "id":instance.id,
            "state": instance.state,
            "zone": instance.zone,
            "schedule":schedule,
            "labels":all_labels.slice(2),
            "next_start":next_start_iso,
            "next_stop":next_stop_iso,
            "selfLink": instance.selfLink
          })
        }
      }
    }
  }
  result=_.sortBy(result, 'id');
  result=_.sortBy(result, 'zone');
  EOS
end

###############################################################################
# Escalations
###############################################################################

escalation "esc_email" do
  automatic true
  label "Sends Email"
  description "Sends Incident Email"
  email $param_email
end
escalation "esc_schedule_instance" do
  automatic contains($param_automatic_action, "Schedule Instances")
  label "Schedule"
  description "Stop or Start the Instance"
  run "schedule_instance", data
end

escalation "esc_terminate_instance" do
  automatic false
  label "Terminate Instance"
  description "Terminate or delete the Instance"
  run "terminate_instance", data
end

escalation "esc_update_schedule" do
  automatic false
  label "Update Schedule"
  description "Update the existing schedule Label"
  parameter "param_schedule" do
    type "string"
    label "New Schedule"
    description "Provide Schedule Value"
  end
  run "update_schedule", data, $param_schedule
end

escalation "esc_delete_schedule" do
  automatic false
  label "Delete Schedule"
  description "Delete Schedule Tag"
  run "delete_schedule", data
end
###############################################################################
# Policy
###############################################################################

policy "policy_schedule_instance" do
  validate $ds_filter_resources do
    summary_template "Google Schedule Instance list"
    hash_include "next_start", "next_stop"
    escalate $esc_email
    escalate $esc_schedule_instance
    escalate $esc_terminate_instance
    escalate $esc_update_schedule
    escalate $esc_delete_schedule
    check eq(size(data),0)
    export do
      resource_level true
      field "zone" do
        label "Zone"
      end
      field "id" do
        label "Instance ID"
      end
      field "state" do
        label "Instance State"
      end
      field "schedule" do
        label "Schedule"
      end
      field "labels" do
        label "Labels"
      end
      field "selfLink" do
        label "SelfLink"
      end
    end
  end
end

###############################################################################
# Cloud Workflow
###############################################################################

define schedule_instance($data) return $all_response do
  $all_response=[]
  foreach $item in $data do
    $rule = split($item['schedule'],'_')[1]
    $rule= split($rule, "-")
    $rule= join($rule, ",")
    $rule= upcase($rule)
    $time_range = split($item['schedule'],'_')[0]
    $start_time = split($time_range,'-')[0]
    $start_time = insert($start_time, 2, ":")
    $start_hour = split($start_time, ':')[0]
    $start_minute = split($start_time, ':')[1]
    if $start_minute==null
      $start_minute='00';
    end
    $stop_time = split($time_range,'-')[1]
    $stop_time= insert($stop_time, 2, ":")
    $stop_hour = split($stop_time, ':')[0]
    $stop_minute = split($stop_time, ':')[1]
    if $stop_minute==null
      $stop_minute='00';
    end
    $start_rule = join(["FREQ=WEEKLY;BYDAY=",$rule])
    $stop_rule = join(["FREQ=WEEKLY;BYDAY=",$rule])
    $timezone = split($item['schedule'],'_')[2]
    if ! $timezone
      $timezone = "UTC"
    end
    $size=size(split($item['schedule'], "_"))
    if $size > 3
      $count = 3
      $arr_val=split($item['schedule'], "_")
      while $count < $size do
        $timezone=$timezone+"_"+$arr_val[$count]
        $count=$count+1
      end
    end
    call get_tzlist() retrieve $timezones
    $timezones=from_json($timezones)
    $timezone=$timezones[$timezone]
    # checking if the timezone is having required format as mentioned in the readme
    if $timezone != null
      call window_active($start_hour, $start_minute, $start_rule, $stop_hour, $stop_minute, $stop_rule, $timezone) retrieve $window_active , $next_start, $next_stop

      call sys_log('window_active',$window_active)
      call sys_log('next_start',$next_start)
      call sys_log('next_stop',$next_stop)

      if ($window_active)
        call sys_log($item['schedule'] + ' schedule window is currently active: Instances may be started.', '')
      else
        call sys_log($item['schedule'] + ' schedule window is currently in-active: Instances may be stopped.', '')
      end

      $stoppable = /^(RUNNING|STAGING)$/
      $startable = /^(STOPPING|TERMINATED)$/

      $next_start=split($next_start, "T")
      $next_start[1]=split($next_start[1],"-")
      $next_start[1]=join($next_start[1], "m")
      $next_start[1]=split($next_start[1],":")
      $next_start[1]=join($next_start[1], "-")
      $next_start[1]=split($next_start[1], "+")
      $next_start[1]=join($next_start[1], "p")
      $next_start=join($next_start, "t")

      $next_stop=split($next_stop,"T")
      $next_stop[1]=split($next_stop[1],"-")
      $next_stop[1]=join($next_stop[1], "m")
      $next_stop[1]=split($next_stop[1],":")
      $next_stop[1]=join($next_stop[1], "-")
      $next_stop[1]=split($next_stop[1], "+")
      $next_stop[1]=join($next_stop[1], "p")
      $next_stop=join($next_stop, "t")

      call get_labelfingerprint($item) retrieve $labelFingerprint, $labels_obj

      $labels_obj['next_start']=$next_start
      $labels_obj['next_stop']=$next_stop
      $labels_obj['schedule']=$item['schedule']

      $response= http_post(
        auth: $$google_auth,
        url: join([$item['selfLink'], "/setLabels"]),
        headers:{
          "cache-control": "no-cache",
          "content-type": "application/json"
        },
        body:{
          "labels": $labels_obj,
          "labelFingerprint": $labelFingerprint
        }
      )
      if($window_active)
        if($item['state']=~$startable)
          call sys_log('> ' + $item['id'] + ': Starting ...', to_s($item))
          sub on_error: handle_error($response) do
            $response= http_post(
              auth: $$google_auth,
              url : join([$item['selfLink'], "/start"]),
              headers:{
                "cache-control": "no-cache",
                "content-type": "application/json"
              }
            )
            $all_response << $response
          end
        else
          call sys_log('> ' + $item['id'] + ': No action - Instance state is ' + $item['state'], '')
        end
      else
        if($item['state'] =~ $stoppable)
          call sys_log('> ' + $item['id'] + ': Stopping ...', to_s($item))
          sub on_error: handle_error($response) do
            $response= http_post(
              auth: $$google_auth,
              url: join([$item['selfLink'], "/stop"]),
              headers:{
                "cache-control": "no-cache",
                "content-type": "application/json"
              }
            )
            $all_response << $response
          end
        else
          call sys_log('> ' + $item['id'] + ': No action - Instance state is ' + $item['state'], '')
        end
      end
    # generating log for incorrect timezone format
    else
      call sys_log('Incorrect Timezone in schedule label', to_s($item['schedule']))
    end
  end
end

define terminate_instance($data) return $all_response do
  $all_response=[]
  foreach $item in $data do
    call sys_log('> ' + $item['id'] + ': Terminating ...', to_s($item))
    sub on_error: handle_error($response) do
      $response= http_delete(
        auth: $$google_auth,
        url: $item['selfLink'],
        headers:{
          "cache-control": "no-cache",
          "content-type": "application/json"
        }
      )
      $all_response << $response
    end
  end
end

define delete_schedule($data) return $all_response do
  $all_response=[]
  foreach $item in $data do
    call get_labelfingerprint($item) retrieve $labelFingerprint, $labels_obj
    $new_label={}
    $labels_obj=to_a($labels_obj)
    foreach $label in $labels_obj do
      if $label[0]!='schedule' && $label[0]!='next_start' && $label[0]!='next_stop'
        $new_label[$label[0]]=$label[1];
      end
    end
    call sys_log('> ' + $item['id'] + ': Deleting schedule Tag ...', to_s($item))

    sub on_error: handle_error($response) do
      $response= http_post(
        auth: $$google_auth,
        url: join([$item['selfLink'], "/setLabels"]),
        headers:{
          "cache-control": "no-cache",
          "content-type": "application/json"
        },
        body:{
          "labels" : $new_label,
          "labelFingerprint" : $labelFingerprint
        }
      )
      $all_response << $response
    end
  end
end

define update_schedule($data, $param) return $all_response do
  $all_response=[]
  foreach $item in $data do
    $rule = split($param,'_')[1]
    $rule= split($rule, "-")
    $rule= join($rule, ",")
    $rule= upcase($rule)
    $time_range = split($param,'_')[0]
    $start_time = split($time_range,'-')[0]
    $start_time = insert($start_time, 2, ":")
    $start_hour = split($start_time, ':')[0]
    $start_minute = split($start_time, ':')[1]
    if $start_minute==null
      $start_minute='00';
    end
    $stop_time = split($time_range,'-')[1]
    $stop_time= insert($stop_time, 2, ":")
    $stop_hour = split($stop_time, ':')[0]
    $stop_minute = split($stop_time, ':')[1]
    if $stop_minute==null
      $stop_minute='00';
    end
    $start_rule = join(["FREQ=WEEKLY;BYDAY=",$rule])
    $stop_rule = join(["FREQ=WEEKLY;BYDAY=",$rule])
    $timezone = split($param,'_')[2]
    if ! $timezone
      $timezone = "UTC"
    end
    $size=size(split($param, "_"))
    if $size > 3
      $count = 3
      $arr_val=split($param, "_")
      while $count < $size do
        $timezone=$timezone+"_"+$arr_val[$count]
        $count=$count+1
      end
    end
    call get_tzlist() retrieve $timezones
    $timezones=from_json($timezones)
    $timezone=$timezones[$timezone]
    # checking if the timezone is having required format as mentioned in the readme
    if $timezone != null
      call window_active($start_hour, $start_minute, $start_rule, $stop_hour, $stop_minute, $stop_rule, $timezone) retrieve $window_active , $next_start, $next_stop

      $next_start=split($next_start, "T")
      $next_start[1]=split($next_start[1],"-")
      $next_start[1]=join($next_start[1], "m")
      $next_start[1]=split($next_start[1],":")
      $next_start[1]=join($next_start[1], "-")
      $next_start[1]=split($next_start[1], "+")
      $next_start[1]=join($next_start[1], "p")
      $next_start=join($next_start, "t")

      $next_stop=split($next_stop,"T")
      $next_stop[1]=split($next_stop[1],"-")
      $next_stop[1]=join($next_stop[1], "m")
      $next_stop[1]=split($next_stop[1],":")
      $next_stop[1]=join($next_stop[1], "-")
      $next_stop[1]=split($next_stop[1], "+")
      $next_stop[1]=join($next_stop[1], "p")
      $next_stop=join($next_stop, "t")

      call get_labelfingerprint($item) retrieve $labelFingerprint, $labels_obj

      $labels_obj['schedule']=$param
      $labels_obj['next_start']=$next_start
      $labels_obj['next_stop']=$next_stop
      call sys_log('> ' + $item['id'] + ': Updating schedule Tag ...', to_s($item))
      sub on_error: handle_error($response) do
        $response= http_post(
          auth: $$google_auth,
          url: join([$item['selfLink'], "/setLabels"]),
          headers:{
            "cache-control": "no-cache",
            "content-type": "application/json"
          },
          body:{
            "labels" : $labels_obj,
            "labelFingerprint" : $labelFingerprint
          }
        )
        $all_response << $response
      end
    # generating log for incorrect timezone format
    else
      call sys_log('Incorrect Timezone for schedule label', to_s($param))
    end
  end
end

define window_active($start_hour, $start_minute, $start_rule, $stop_hour, $stop_minute, $stop_rule, $tz) return $window_active, $next_start, $next_stop do
  $params = {
    verb: 'post',
    host: 'bjlaftw4kh.execute-api.us-east-1.amazonaws.com',
    https: true,
    href: '/production',
    headers:{
      'content-type': 'application/json'
    },
    body: {
      'start_hour': $start_hour,
      'start_minute': $start_minute,
      'start_rule': $start_rule,
      'stop_minute': $stop_minute,
      'stop_hour': $stop_hour,
      'stop_rule': $stop_rule,
      'tz': $tz
    }
  }
  $response = http_request($params)
  $body = $response['body']
  call sys_log('window active $body', to_s($body))

  $window_active = to_b($body['event_active'])
  $next_start   = $body['next_start']
  $next_stop    = $body['next_stop']
end

define get_labelfingerprint($instance) return $labelFingerprint, $labels_obj do
  $response = http_get(
    auth: $$google_auth,
    url: $instance['selfLink'],
    headers:{
      "cache-control": "no-cache",
      "content-type": "application/json"
    }
  )
  $body = $response['body']
  $labelFingerprint   = $body['labelFingerprint']
  $labels_obj= $body['labels']
end

define get_tzlist() return $timezones do
  $params = {
    verb: 'get',
    host: 'raw.githubusercontent.com',
    https: true,
    href: '/rightscale/policy_templates/master/data/tz_database/timezones_list.json',
    headers:{
      'User-Agent': 'RS Policies'
    }
  }
  $response = http_request($params)
  $timezones = $response['body']
end

define handle_error($response) do
  $status_code = $response["code"]
  $syslog_subject = "Google Instance action error: "
  call sys_log(join([$syslog_subject, $status_code]),to_s($response))
  $_error_behavior = "skip"
end

define sys_log($subject, $detail) do
  rs_cm.audit_entries.create(
    notify: "None",
    audit_entry: {
      auditee_href: @@account,
      summary: $subject,
      detail: $detail
    }
  )
end

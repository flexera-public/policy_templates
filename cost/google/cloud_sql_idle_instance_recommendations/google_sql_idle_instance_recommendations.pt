name "Google Cloud SQL Idle Instance Recommender"
rs_pt_ver 20180301
type "policy"
short_description "This Policy finds Google Idle Cloud SQL Instance Recommendations and reports when it finds them. See the [README](https://github.com/flexera-public/policy_templates/tree/master/cost/google/cloud_sql_idle_instance_recommendations) and [docs.flexera.com/flexera/EN/Automation](https://docs.flexera.com/flexera/EN/Automation/AutomationGS.htm) to learn more."
category "Cost"
severity "low"
default_frequency "daily"
info(
  version: "2.5",
  provider:"GCE",
  service: "SQL",
  policy_set: "Unused Database Service"
)

###############################################################################
# Parameters
###############################################################################

parameter "param_emails" do
  type "list"
  label "Email addresses to notify"
  description "Email addresses of the recipients you wish to notify when new incidents are created"
end

parameter "param_project_ids" do
  type "list"
  label "Project IDs"
  description "Google Projects to query. Leave blank to query all projects."
end

parameter "param_regions" do
  type "list"
  label "Regions"
  description "Regions to query. Leave blank to query all available regions."
end

parameter "param_exclude_tags" do
  category "User Inputs"
  label "Tag to exclude (Key:Value)"
  description "Cloud native tag (label) to ignore SQL instances. Format: Key:Value. Leave blank to query all tags."
  type "string"
  allowed_pattern /(^$)|([\w]?)+\:([\w]?)/
end

###############################################################################
# Authentication
###############################################################################

# authenticate with Google
credentials "auth_google" do
  schemes "oauth2"
  label "Google"
  description "Select the Google Cloud Credential from the list."
  tags "provider=gce"
end

###############################################################################
# Pagination
###############################################################################

pagination "google_pagination" do
  get_page_marker do
    body_path "nextPageToken"
  end
  set_page_marker do
    query "pageToken"
  end
end

###############################################################################
# Datasources
###############################################################################

datasource "ds_currency_reference" do
  request do
    host "raw.githubusercontent.com"
    path "/rightscale/policy_templates/master/cost/scheduled_reports/currency_reference.json"
    header "User-Agent", "RS Policies"
  end
end

# GCP projects filtered by "lifecycleState:ACTIVE" and "param_project_ids".
datasource "ds_projects" do
  request do
    run_script $js_projects, $param_project_ids
  end
  result do
    encoding "json"
    collect jmes_path(response, "projects[*]") do
      field "projectNumber", jmes_path(col_item,"projectNumber")
      field "projectID", jmes_path(col_item,"projectId")
      field "projectName", jmes_path(col_item,"name")
    end
  end
end

# SQL instances of Google projects from API.
datasource "ds_sql_instances" do
  iterate $ds_projects
  request do
    run_script $js_sql_instances_call, val(iter_item, "projectID"), $param_regions, $param_exclude_tags
  end
  result do
    encoding "json"
    collect jmes_path(response,"items[*]") do
      field "resourceID", jmes_path(col_item, "name")
      field "state", jmes_path(col_item,"state")
      field "selfLink", jmes_path(col_item, "selfLink")
      field "tier", jmes_path(col_item, "settings.tier")
      field "region", jmes_path(col_item, "region")
      field "tags", jmes_path(col_item,"settings.userLabels")
      field "projectID", val(iter_item, "projectID")
      field "resourceType", val(col_item, "instanceType")
    end
  end
end

# Array of objects with Account ID and region each one to make a call to Recommender API.
datasource "ds_recommenders" do
  run_script $js_recommenders, $ds_sql_instances
end

# SQL idle instances recommendations got from Recommender API.
datasource "ds_recommendations" do
  iterate $ds_recommenders
  request do
    run_script $js_recommender_call, val(iter_item,"projectID"), val(iter_item, "region")
  end
  result do
    encoding "json"
    collect jmes_path(response, "recommendations[*]") do
      field "projectID", val(iter_item, "projectID")
      field "projectNumber", val(iter_item, "projectNumber")
      field "region", val(iter_item, "region")
      field "id", jmes_path(col_item, "name")
      field "description", jmes_path(col_item, "description")
      field "resourceName", jmes_path(col_item, "content.overview.resourceName")
      field "primaryImpact", jmes_path(col_item, "primaryImpact")
      field "costUnits", jmes_path(col_item, "primaryImpact.costProjection.cost.units")
      field "costNanos", jmes_path(col_item, "primaryImpact.costProjection.cost.nanos")
      field "duration", jmes_path(col_item, "primaryImpact.costProjection.duration")
      field "currency", jmes_path(col_item, "primaryImpact.costProjection.cost.currencyCode")
      field "priority", jmes_path(col_item, "priority")
      field "recommenderSubtype", jmes_path(col_item, "recommenderSubtype")
      field "state", jmes_path(col_item, "stateInfo.state")
    end
  end
end

# Total estimated monthly savings based on SQL instances/recommendations.
datasource "ds_sql_cost_mapping" do
  run_script $js_instance_cost_mapping, $ds_sql_instances, $ds_recommendations, $ds_currency_reference
end

###############################################################################
# Scripts
###############################################################################

script "js_projects", type: "javascript" do
  parameters "param_project_ids"
  result "request"
  code <<-EOF
  var filter = "(lifecycleState:ACTIVE)"
  // Apply filter by project only if "param_project_ids" was set.
  if (param_project_ids.length != 0) {
      // Since we already have a filter applied this AND is required to apply new filter.
      filter += " AND ("
      _.each(param_project_ids, function (id, index) {
          filter += '(projectId = "' + id + '")'
          // Adds OR in case it isn't last item, means there are more items to be added.
          if ((index + 1) != param_project_ids.length) {
              filter += " OR "
          }
      })
      filter += ")"
  }
  var request = {
    auth: "auth_google",
    pagination: "google_pagination",
    host: "cloudresourcemanager.googleapis.com",
    path: "/v1/projects/",
    query_params: {
      "filter": filter
    }
  }
  EOF
end

script "js_sql_instances_call", type: "javascript" do
  result "request"
  parameters "projectID", "param_regions", "param_exclude_tags"
  code <<-EOS
    var filter = ""

    // Apply filter only if "param_exclude_tags" was set.
    if (param_exclude_tags.length != 0) {
        // Key of tag to exclude.
        var label_key = param_exclude_tags.split(':')[0]
    
        // Value of tag to exclude.
        var label_value = param_exclude_tags.split(':')[1]
    
        // Apply logic operator "NOT" to get all SQL instances that don't have that tag.
        filter = "(NOT settings.userLabels." + label_key + ":" + label_value + ")"
    }
    
    // Apply filter by region only if "param_regions" was set.
    if (param_regions.length != 0) {
        if (param_exclude_tags.length != 0) {
            // Since we already have a filter applied this AND is required to apply new filter.
            filter += " AND "
        }
    
        filter += "("
    
        _.each(param_regions, function (region, index) {
            filter += '(region = "' + region + '")'
    
            // Adds OR in case it isn't last item, means there are more items to be added.
            if ((index + 1) != param_regions.length) {
                filter += " OR "
            }
        })
    
        filter += ")"
    }

    request = {
      "auth": "auth_google",
      "host": "sqladmin.googleapis.com",
      "verb": "GET",
      "path": "/v1/projects/"+projectID+"/instances",
      "headers": {
        "User-Agent": "RS Policies",
        "Content-Type": "application/json"
      }
      "ignore_status": [403,404],
      "query_params": {
        "filter": filter
      },
    }
  EOS
end

script "js_recommenders", type: "javascript" do
  parameters "ds_sql_instances"
  result "recommenders"
  code <<-EOF
    var recommenders = []

    _.each(ds_sql_instances, function (instance) {
        var objectToFind = { projectID: instance.projectID, region: instance.region }
        var found = _.findWhere(recommenders, objectToFind)
        // If record with same projectID-region was found we don't add it to recommenders,
        // it help us to prevent duplicates and avoid extra calls to Recommender API.
        if (!found) {
            recommenders.push(objectToFind)
        }
    })
  EOF
end

script "js_recommender_call", type: "javascript" do
  parameters "projectID", "region"
  result "request"
  code <<-EOF
    var now = new Date().getTime();
    var sleepDuration = 10000
    while(new Date().getTime() < now + sleepDuration){ /* Do nothing */ }
    var request = {
      auth: "auth_google",
      pagination: "google_pagination",
      host: "recommender.googleapis.com",
      ignore_status: 403,
      path: "/v1/projects/"+ projectID +"/locations/" + region + "/recommenders/google.cloudsql.instance.IdleRecommender/recommendations",
      query_strings: { alt: "json" }
    }
  EOF
end

script "js_instance_cost_mapping", type:"javascript" do
  result "result"
  parameters  "databases", "recommendations", "ds_currency_reference"
  code <<-EOS
    var instances = [];
    var result={};
    var message=''
    var count=0;

    function formatNumber(number, separator){
      var numString =number.toString();
      var values=numString.split(".");
      var result = ''
      while (values[0].length > 3){
        var chunk = values[0].substr(-3)
        values[0] = values[0].substr(0, values[0].length - 3)
        result = separator + chunk + result
      }
      if (values[0].length > 0){
        result = values[0] + result
      }
      if(values[1]==undefined){
        return result;
      }
      return result+"."+values[1];
    }
    total = 0
    cur = ""
    _.each(databases, function(database) {
      _.each(recommendations, function(recommendation){
        if(database.resourceName == recommendation.resourceName) {
          count++
          if(recommendation['currency'] !== undefined ) {
            if (ds_currency_reference[recommendation['currency']] !== undefined ) {
            var cur = ds_currency_reference[recommendation['currency']]['symbol']
            } else {
              var cur = "$"
            }
            database['savingsCurrency'] = cur
          } else {
            var cur = "$"
            var separator = ","
          }
          if (recommendation.costNanos<0) {
            recommendation.costNanos = recommendation.costNanos * -1
          }
          if (recommendation.costUnits<0) {
            recommendation.costUnits = recommendation.costUnits * -1
          }
          strNano = "."+recommendation.costNanos
          combine = recommendation.costUnits + parseFloat(strNano)
          monthsDuration = parseFloat(recommendation.duration.replace("s",""))/2628288
          monthlySavings = combine / monthsDuration
          total = total+monthlySavings
          database['savings']= (Math.round( monthlySavings * 1000) / 1000)
          database['savingsCurrency'] = cur
          database['projectNumber'] = recommendation['projectNumber']
          database['projectName'] = recommendation['projectName']
          database['priority'] = recommendation['priority']
          database['primaryImpact'] = recommendation['primaryImpact']
          database['recommenderSubtype'] = recommendation['recommenderSubtype']
          database['state'] = recommendation['state']
          database['region'] = recommendation['region']
          database['service'] = "SQL"
          tags = []
          if (database['tags'] != null) {
            Object.keys(database.tags).forEach(function(key) {
              tags.push(key+'='+database.tags[key])
            });
          }
          database['tags'] = tags
          instances.push(database)
        }
      })
    })
    if (instances.length != 0){
      if(count){
        total=cur + ' '+formatNumber((Math.round(total * 100) / 100));
        message="The total estimated monthly savings are " +total;
      } else {
        message="The Flexera Optima system does not have any data to calculate savings for these resources";
      }
    }else{
      message="unable to find resources between recommender and resource api";
    }
    result={
      "instances": instances,
      "message": message
    };
    result.instances = _.sortBy(result.instances,"region");
    result.instances = _.sortBy(result.instances,"projectName");
  EOS
end

###############################################################################
# Policy
###############################################################################

policy "policy_recommendations" do
  validate $ds_sql_cost_mapping do
    summary_template "{{ rs_project_name }} (Account ID: {{ rs_project_id }}): {{ len data }} rows found for Idle Cloud SQL Instances"
    check eq(size(val(data, "instances")), 0)
    escalate $esc_email
    export "instances" do
      resource_level true
      field "projectID" do
        label "Project ID"
      end
      field "projectName" do
        label "Project Name"
      end
      field "projectNumber" do
        label "Project Number"
      end
      field "resourceID" do
        label "Resource ID"
      end
      field "resourceName" do
        label "Resource Name"
        path "resourceID"
      end
      field "resourceType" do
        label "Resource Type"
      end
      field "region" do
        label "Region"
      end
      field "tags" do
        label "Tags"
      end
      field "service" do
        label "Service"
      end
      field "savingsCurrency" do
        label "Currency"
      end
      field "savings" do
        label "Estimated Monthly Savings"
      end
      field "priority" do
        label "Priority"
      end
      field "recommenderSubtype" do
        label "Sub Type"
      end
      field "state" do
        label "State"
      end
      field "status" do
        label "Status"
      end
      field "id" do
        label "ID"
        path "projectID"
      end
    end
  end
end

###############################################################################
# Escalations
###############################################################################

escalation "esc_email" do
  automatic true
  label "Send Email"
  description "Send incident email"
  email $param_emails
end

###############################################################################
# Cloud Workflow
###############################################################################

name "Google Cloud SQL Idle Instance Recommender"
rs_pt_ver 20180301
type "policy"
short_description "This Policy finds Google Idle Cloud SQL Instance Recommendations and reports when it finds them. See the [README](https://github.com/flexera-public/policy_templates/tree/master/cost/google/cloud_sql_idle_instance_recommendations) and [docs.flexera.com/flexera/EN/Automation](https://docs.flexera.com/flexera/EN/Automation/AutomationGS.htm) to learn more."
category "Cost"
severity "low"
default_frequency "daily"
info(
  version: "2.7",
  provider:"Google",
  service: "SQL",
  policy_set: "Unused Database Service"
)

###############################################################################
# Parameters
###############################################################################

parameter "param_email" do
  type "list"
  label "Email addresses to notify"
  description "Email addresses of the recipients you wish to notify when new incidents are created"
end

parameter "param_project_ids" do
  type "list"
  label "Project IDs"
  description "Google Projects to query. Leave blank to query all projects."
end

parameter "param_regions" do
  type "list"
  label "Regions"
  description "Regions to query. Leave blank to query all available regions."
end

parameter "param_exclude_tags" do
  category "User Inputs"
  label "Tag to exclude (Key:Value)"
  description "Exclusion Tag."
  type "string"
  allowed_pattern /(^$)|([\w]?)+\:([\w]?)/
end

###############################################################################
# Authentication
###############################################################################

# authenticate with Google
credentials "auth_google" do
  schemes "oauth2"
  label "Google"
  description "Select the Google Cloud Credential from the list."
  tags "provider=gce"
end

###############################################################################
# Pagination
###############################################################################

pagination "google_pagination" do
  get_page_marker do
    body_path "nextPageToken"
  end
  set_page_marker do
    query "pageToken"
  end
end

###############################################################################
# Datasources & Scripts
###############################################################################

datasource "ds_currency_reference" do
  request do
    host "raw.githubusercontent.com"
    path "/rightscale/policy_templates/master/cost/scheduled_reports/currency_reference.json"
    header "User-Agent", "RS Policies"
  end
end

# Gets all projects filtered by "lifecycleState:ACTIVE".
datasource "ds_all_projects" do
  request do
    auth $auth_google
    pagination $google_pagination
    host "cloudresourcemanager.googleapis.com"
    path "/v1/projects/"
    query "filter", "(lifecycleState:ACTIVE)"
  end
  result do
    encoding "json"
    collect jmes_path(response, "projects[*]") do
      field "projectNumber", jmes_path(col_item,"projectNumber")
      field "accountID", jmes_path(col_item,"projectId")
      field "accountName", jmes_path(col_item,"name")
    end
  end
end

# Removes projects that aren't in "param_project_ids" (In case it isn't empty).
# Sets "sleep" flag every 150 projects to prevent quota error.
datasource "ds_projects" do
  run_script $js_projects, $ds_all_projects, $param_project_ids
end

script "js_projects", type: "javascript" do
  parameters "ds_all_projects", "param_project_ids"
  result "projects"
  code <<-EOF
    var projects = ds_all_projects

    // Apply filter only if "param_project_ids" was set.
    if (param_project_ids.length > 0) {
        projects = _.filter(projects, function (p) {
            // Returns project only if its "accountID" (projectID) is in "param_project_ids".
            if (_.contains(param_project_ids, p.accountID)) {
                return p
            }
        })
    }

    // It means, when we reach this call counter, we'll use "sleep" function, to avoid quota error.
    var callsPerMinute = 150

    _.each(projects, function (p, index) {
        // If we aren't at position 0 and if remainder of the division of index by
        // "callsPerMinute" is 0 add "sleep" flag.
        if (index != 0 && index % callsPerMinute == 0) {
            p.sleep = true
        }
    })
  EOF
end

# Gets all SQL instances of Google projects from "ds_projects".
datasource "ds_all_sql_instances" do
  iterate $ds_projects
  request do
    run_script $js_sql_instances_call, val(iter_item, "accountID"), val(iter_item, "sleep"), $param_exclude_tags
  end
  result do
    encoding "json"
    collect jmes_path(response,"items[*]") do
      field "accountID", val(iter_item, "accountID")
      field "accountName", val(iter_item, "accountName")
      field "projectNumber", val(iter_item, "projectNumber")
      field "resourceID", jmes_path(col_item, "name")
      field "state", jmes_path(col_item,"state")
      field "selfLink", jmes_path(col_item, "selfLink")
      field "tier", jmes_path(col_item, "settings.tier")
      field "region", jmes_path(col_item, "region")
      field "tags", jmes_path(col_item,"settings.userLabels")
      field "resourceType", val(col_item, "instanceType")
      field "resourceName", jmes_path(col_item, "name")
      field "resourceType", jmes_path(col_item, "instanceType")
      field "status", jmes_path(col_item, "state")
    end
  end
end

script "js_sql_instances_call", type: "javascript" do
  parameters "accountID", "sleep", "param_exclude_tags"
  result "request"
  code <<-EOS
    if (sleep == true) {
      var now = new Date().getTime();
      // 1 minute and 30 seconds.
      var sleepDuration = 90000
      while (new Date().getTime() < now + sleepDuration) { /* Do nothing to prevent quota error */ }
    }

    var filter = ""

    // Apply filter only if "param_exclude_tags" was set.
    if (param_exclude_tags.length != 0) {
        // Key of tag to exclude.
        var label_key = param_exclude_tags.split(':')[0]

        // Value of tag to exclude.
        var label_value = param_exclude_tags.split(':')[1]

        // Apply logic operator "NOT" to get all SQL instances that don't have that tag.
        filter = "(NOT settings.userLabels." + label_key + ":" + label_value + ")"
    }

    request = {
        "auth": "auth_google",
        "host": "sqladmin.googleapis.com",
        "verb": "GET",
        "path": "/v1/projects/" + accountID + "/instances",
        "headers": {
            "User-Agent": "RS Policies",
            "Content-Type": "application/json"
        },
        "ignore_status": [403, 404],
        "query_params": {
            "filter": filter
        },
    }
  EOS
end

# Removes instances that aren't in "param_regions" (In case it isn't empty).
datasource "ds_sql_instances" do
  run_script $js_sql_instances, $ds_all_sql_instances, $param_regions
end

script "js_sql_instances", type: "javascript" do
  parameters "ds_all_sql_instances", "param_regions"
  result "sql_instances"
  code <<-EOF
    var sql_instances = ds_all_sql_instances

    // Apply filter only if "param_regions" was set.
    if (param_regions.length > 0) {
        sql_instances = _.filter(sql_instances, function (i) {
            // Returns instance only if its "region" is in "param_regions".
            if (_.contains(param_regions, i.region)) {
                return i
            }
        })
    }
  EOF
end

# Array of objects with Account ID and region each one to make a call to Recommender API.
datasource "ds_recommenders" do
  run_script $js_recommenders, $ds_sql_instances
end

script "js_recommenders", type: "javascript" do
  parameters "ds_sql_instances"
  result "recommenders"
  code <<-EOF
    var recommenders = []

    // It means, when we reach this call counter, we'll use "sleep" function, to avoid quota error.
    var callsPerMinute = 100
    
    _.each(ds_sql_instances, function (instance) {
        var objectToFind = { accountID: instance.accountID, region: instance.region }
        var found = _.findWhere(recommenders, objectToFind)
        // If record with same accountID-region was found we don't add it to recommenders,
        // it help us to prevent duplicates and avoid extra calls to Recommender API.
        if (!found) {
            recommenders.push(objectToFind)
        }
    })
    
    _.each(recommenders, function (r, index) {
        // If we aren't at position 0 and if remainder of the division of index by
        // "callsPerMinute" is 0 add "sleep" flag.
        if (index != 0 && index % callsPerMinute == 0) {
            r.sleep = true
        }
    })
  EOF
end

# SQL idle instances recommendations got from Recommender API.
datasource "ds_recommendations" do
  iterate $ds_recommenders
  request do
    run_script $js_recommender_call, val(iter_item,"accountID"), val(iter_item, "region"), val(iter_item, "sleep")
  end
  result do
    encoding "json"
    collect jmes_path(response, "recommendations[*]") do
      field "accountID", val(iter_item, "accountID")
      field "projectNumber", val(iter_item, "projectNumber")
      field "region", val(iter_item, "region")
      field "id", jmes_path(col_item, "name")
      field "description", jmes_path(col_item, "description")
      field "resourceLink", jmes_path(col_item, "content.overview.resource")
      field "resourceName", jmes_path(col_item, "content.overview.resourceName")
      field "primaryImpact", jmes_path(col_item, "primaryImpact")
      field "costUnits", jmes_path(col_item, "primaryImpact.costProjection.cost.units")
      field "costNanos", jmes_path(col_item, "primaryImpact.costProjection.cost.nanos")
      field "duration", jmes_path(col_item, "primaryImpact.costProjection.duration")
      field "currency", jmes_path(col_item, "primaryImpact.costProjection.cost.currencyCode")
      field "priority", jmes_path(col_item, "priority")
      field "recommenderSubtype", jmes_path(col_item, "recommenderSubtype")
      field "state", jmes_path(col_item, "stateInfo.state")
    end
  end
end

script "js_recommender_call", type: "javascript" do
  parameters "accountID", "region", "sleep"
  result "request"
  code <<-EOF
    if (sleep == true) {
      var now = new Date().getTime();
      // 1 minute.
      var sleepDuration = 60000
      while (new Date().getTime() < now + sleepDuration) { /* Do nothing to prevent quota error */ }
    }
    var request = {
      auth: "auth_google",
      pagination: "google_pagination",
      host: "recommender.googleapis.com",
      ignore_status: 403,
      path: "/v1/projects/"+ accountID +"/locations/" + region + "/recommenders/google.cloudsql.instance.IdleRecommender/recommendations",
      query_strings: { alt: "json" }
    }
  EOF
end

# Total estimated monthly savings based on SQL instances/recommendations.
datasource "ds_sql_cost_mapping" do
  run_script $js_sql_instances_cost_mapping, $ds_sql_instances, $ds_recommendations, $ds_currency_reference
end

script "js_sql_instances_cost_mapping", type:"javascript" do
  result "result"
  parameters  "databases", "recommendations", "ds_currency_reference"
  code <<-EOS
    var instances = [];
    var result = {};
    var message = ''
    var count = 0;
    
    function formatNumber(number, separator) {
        var numString = number.toString();
        var values = numString.split(".");
        var result = ''
        while (values[0].length > 3) {
            var chunk = values[0].substr(-3)
            values[0] = values[0].substr(0, values[0].length - 3)
            result = separator + chunk + result
        }
        if (values[0].length > 0) {
            result = values[0] + result
        }
        if (values[1] == undefined) {
            return result;
        }
        return result + "." + values[1];
    }

    var total = 0
    var cur = ""

    _.each(databases, function(database) {
        var resource_link = database.selfLink.replace("https://www.googleapis.com/compute/v1/", "")
        database["resourceLink"] = resource_link
    })

    _.each(recommendations, function (recommendation) {
        count ++
        var rec_resource_link = recommendation.resourceLink.replace("//compute.googleapis.com/", "")
        var database = _.find(databases, function(db) {
            return db.resourceLink == rec_resource_link
        })
        if (!(database == undefined || database == null)) {
            count++
            if (recommendation['currency'] !== undefined) {
                if (ds_currency_reference[recommendation['currency']] !== undefined) {
                    cur = ds_currency_reference[recommendation['currency']]['symbol']
                } else {
                    cur = "$"
                }
                database['savingsCurrency'] = cur
            } else {
                cur = "$"
                var separator = ","
            }

            //Convert Costs from Negative to Positive and add Units and Nanos
            if (!(recommendation.costNanos == null || recommendation.costNanos == undefined)) {
              if (recommendation.costNanos != 0) {
                recommendation.costNanos = recommendation.costNanos * -1
              }
            } else {
              recommendation.costNanos = 0
            }

            if (!(recommendation.costUnits == null || recommendation.costUnits == undefined)) {
              if (recommendation.costUnits != 0) {
                recommendation.costUnits = recommendation.costUnits * -1
              }
            } else {
              recommendation.costUnits = 0
            }

            var cost_nano = recommendation.costNanos * Math.pow(10, -9)
            var combine = Number(recommendation.costUnits) + Number(parseFloat(cost_nano))
            var monthsDuration = parseFloat(recommendation.duration.replace("s", "")) / 2628288
            var monthlySavings = combine / monthsDuration
            total = total + monthlySavings
            database['savings'] = (Math.round(monthlySavings * 1000) / 1000)
            database['savingsCurrency'] = cur
            database['description'] = recommendation['description']
            database['priority'] = recommendation['priority']
            database['primaryImpact'] = recommendation['primaryImpact']
            database['recommenderSubtype'] = recommendation['recommenderSubtype']
            database['state'] = recommendation['state']
            database['region'] = recommendation['region']
            database['service'] = "SQL"
            var tags = []
            if (database['tags'] != null) {
                Object.keys(database.tags).forEach(function (key) {
                    tags.push(key + '=' + database.tags[key])
                });
            }
            database['tags'] = tags
            instances.push(database)
        }
    })
    if (instances.length != 0) {
        if (count) {
            total = cur + ' ' + formatNumber((Math.round(total * 100) / 100));
            message = "The total estimated monthly savings are " + total;
        } else {
            message = "The Flexera Optima system does not have any data to calculate savings for these resources";
        }
    } else {
        message = "unable to find resources between recommender and resource api";
    }
    result = {
        "instances": instances,
        "message": message
    };
    result.instances = _.sortBy(result.instances, "region");
    result.instances = _.sortBy(result.instances, "accountName");
  EOS
end

###############################################################################
# Policy
###############################################################################

policy "policy_recommendations" do
  validate $ds_sql_cost_mapping do
    summary_template "{{ rs_project_name }} (Account ID: {{ rs_project_id }}): {{ len data.instances }} rows found for Idle Cloud SQL Instances"
    check eq(size(val(data, "instances")), 0)
    escalate $esc_email
    export "instances" do
      resource_level true
      field "accountID" do
        label "Project ID"
      end
      field "accountName" do
        label "Project Name"
      end
      field "projectNumber" do
        label "Project Number"
      end
      field "resourceID" do
        label "Resource ID"
      end
      field "resourceName" do
        label "Resource Name"
        path "resourceID"
      end
      field "resourceType" do
        label "Resource Type"
      end
      field "region" do
        label "Region"
      end
      field "primaryImpactCategory" do
        label "Recommendation Primary Impact Category"
        path "primaryImpact.category"
      end
      field "tags" do
        label "Tags"
      end
      field "description" do
        label "Description"
      end
      field "service" do
        label "Service"
      end
      field "savingsCurrency" do
        label "Currency"
      end
      field "savings" do
        label "Estimated Monthly Savings"
      end
      field "priority" do
        label "Priority"
      end
      field "recommenderSubtype" do
        label "Sub Type"
      end
      field "state" do
        label "State"
      end
      field "status" do
        label "Status"
      end
      field "id" do
        label "ID"
        path "accountID"
      end
    end
  end
end

###############################################################################
# Escalations
###############################################################################

escalation "esc_email" do
  automatic true
  label "Send Email"
  description "Send incident email"
  email $param_email
end

###############################################################################
# Cloud Workflow
###############################################################################

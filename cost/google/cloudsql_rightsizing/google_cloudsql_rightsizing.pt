name "Google Rightsize CloudSQL Instances"
rs_pt_ver 20180301
type "policy"
short_description "Checks Google CloudSQL instances based on provided CPU threshold and Resize them after approval. See the [README](https://github.com/flexera/policy_templates/tree/master/cost/google/cloudsql_rightsizing/) and [docs.flexera.com/flexera/EN/Automation](https://docs.flexera.com/flexera/EN/Automation/AutomationGS.htm) to learn more."
long_description ""
severity "medium"
category "Cost"
default_frequency "daily"
info(
      version: "2.9",
      provider: "GCE",
      service: "SQL",
      policy_set: "Rightsize Database Services"
    )

###############################################################################
# Parameters
###############################################################################

parameter "param_email" do
  type "list"
  label "Email addresses to notify"
  description "Email addresses of the recipients you wish to notify when new incidents are created"
end

parameter "param_avg_cpu_upscale" do
  type "number"
  label "Average used CPU % - Upscale threshold"
  description "Set to -1 to ignore CPU utilization"
  default 80
  min_value -1
  max_value 100
end

parameter "param_avg_cpu_downscale" do
  type "number"
  label "Average used CPU % - Downscale Threshold"
  description "Set to -1 to ignore CPU utilization"
  default 60
  min_value -1
  max_value 100
end

parameter "param_exclusion_tag_key" do
  category "User Inputs"
  label "Exclusion Label Key:Value"
  description "Cloud native label to ignore instances. Format: Key:Value"
  type "string"
  allowed_pattern /(^$)|([\w]?)+\:([\w]?)+/
end

parameter "param_automatic_action" do
  type "list"
  label "Automatic Actions"
  description "When this value is set, this policy will automatically take the selected action(s)"
  allowed_values ["Resize Instances"]
end

parameter "param_log_to_cm_audit_entries" do
  type "string"
  label "Log to CM Audit Entries"
  description "Boolean for whether or not to log any debugging information from actions to CM Audit Entries, this should be left set to No on Flexera EU"
  default "No"
  allowed_values "Yes", "No"
end

###############################################################################
# Authentication
###############################################################################

# authenticate with Google
credentials "auth_google" do
  schemes "oauth2"
  label "Google"
  description "Select the Google Cloud Credential from the list."
  tags "provider=gce"
end

###############################################################################
# Pagination
###############################################################################

pagination "google_pagination" do
  get_page_marker do
    body_path "nextPageToken"
  end
  set_page_marker do
    query "pageToken"
  end
end

###############################################################################
# Datasources
###############################################################################

#get all active google project
datasource "ds_google_project" do
  iterate $ds_time
  request do
    auth $auth_google
    pagination $google_pagination
    host "cloudresourcemanager.googleapis.com"
    path "/v1/projects/"
    query "filter", "lifecycleState=ACTIVE"
  end
  result do
    encoding "json"
    collect jmes_path(response, "projects[*]") do
      field "projectNumber", jmes_path(col_item,"projectNumber")
      field "projectId", jmes_path(col_item,"projectId")
      field "end_date", val(iter_item,"end_date")
      field "start_date", val(iter_item,"start_date")
    end
  end
end

datasource "ds_time" do
  run_script $js_time
end

datasource "ds_cloudsql_tiers" do
  iterate $ds_google_project
  request do
    auth $auth_google
    host "www.googleapis.com"
    path join(["/sql/v1beta4/projects/",val(iter_item,"projectId"),"/tiers/"])
    ignore_status [403,404]
  end
  result do
    encoding "json"
    collect jmes_path(response, "items[*]") do
        field "tier", jmes_path(col_item, "tier")
        field "ram", jmes_path(col_item, "RAM")
        field "diskQuota", jmes_path(col_item, "DiskQuota")
    end
  end
end

datasource "ds_cloudsql_instances" do
  iterate $ds_google_project
  request do
    auth $auth_google
    host "www.googleapis.com"
    path join(["/sql/v1beta4/projects/",val(iter_item,"projectId"),"/instances/"])
    ignore_status [403,404]
  end
  result do
    encoding "json"
    collect jq(response, ".items[]?") do
        field "database_id", join([jmes_path(col_item, "project"), ":", jmes_path(col_item, "name")])
        field "tier", jmes_path(col_item, "settings.tier")
        field "pricingPlan", jmes_path(col_item, "settings.pricingPlan")
        field "zone", jmes_path(col_item, "gceZone")
        field "region", jmes_path(col_item, "region")
        field "dataDiskSizeGb", jmes_path(col_item, "settings.dataDiskSizeGb")
        field "userLabels", jmes_path(col_item,"settings.userLabels")
        field "settings", jmes_path(col_item,"settings")
        field "selfLink", jmes_path(col_item, "selfLink")
    end
  end
end

datasource "ds_cloudsql_utilization" do
  iterate $ds_google_project
  request do
    auth $auth_google
    host "monitoring.googleapis.com"
    path join(["/v3/projects/",val(iter_item,"projectId"),"/timeSeries/"])
    query "filter", 'metric.type="cloudsql.googleapis.com/database/cpu/utilization"'
    query "interval.endTime", val(iter_item,"end_date")
    query "interval.startTime", val(iter_item,"start_date")
    query "aggregation.alignmentPeriod", "+10800s"
    query "aggregation.perSeriesAligner", "ALIGN_MEAN"
    ignore_status [403,404]
  end
  result do
    encoding "json"
    collect jq(response, ".timeSeries[]?") do
      field "database_id", jq(col_item, ".resource.labels.database_id")
      field "region", jq(col_item, ".resource.labels.region")
      field "avg_cpu_points", jq(col_item, "try([.points[].value.doubleValue] | add/length | if . != null then . else 0 end) catch 0")
      field "max_cpu_points", jq(col_item, "try([.points[].value.doubleValue] | max | if . != null then . else 0 end) catch 0")
      field "min_cpu_points", jq(col_item, "try([.points[].value.doubleValue] | min | if . != null then . else 0 end) catch 0")
      field "projectId", val(iter_item, "projectId")
    end
  end
end

datasource "ds_google_instance_size_map" do
  request do
    verb "GET"
    host "raw.githubusercontent.com"
    path "/flexera/policy_templates/e412d4ca5dc191f15fcf6cc532dc2d31de44f3ee/data/google/instance_types.json"
    header "User-Agent", "RS Policies"
    ignore_status [403,404]
  end
end

datasource "ds_memory_utilization" do
  iterate $ds_google_project
  request do
    auth $auth_google
    host "monitoring.googleapis.com"
    path join(["/v3/projects/",val(iter_item,"projectId"),"/timeSeries/"])
    query "filter", 'metric.type="cloudsql.googleapis.com/database/memory/usage"'
    query "interval.endTime", val(iter_item,"end_date")
    query "interval.startTime", val(iter_item,"start_date")
    query "aggregation.alignmentPeriod", "+10800s"
    query "aggregation.perSeriesAligner", "ALIGN_MEAN"
    ignore_status [403,404]
  end
  result do
    encoding "json"
    collect jq(response, ".timeSeries[]?") do
      field "database_id", jq(col_item, ".resource.labels.database_id")
      field "region", jq(col_item, ".resource.labels.region")
      field "avg_mem_points", jq(col_item, "try([.points[].value.doubleValue] | add/length | if . != null then . else 0 end) catch 0")
      field "max_mem_points", jq(col_item, "try([.points[].value.doubleValue] | max | if . != null then . else 0 end) catch 0")
      field "min_mem_points", jq(col_item, "try([.points[].value.doubleValue] | min | if . != null then . else 0 end) catch 0")
    end
  end
end

datasource "ds_calculated_utilization" do
  run_script $js_calculated_utilization, $ds_cloudsql_utilization, $ds_memory_utilization, $ds_cloudsql_instances
end

datasource "ds_checked_utilization" do
  run_script $js_checked_utilization, $ds_calculated_utilization, $ds_google_instance_size_map, $param_avg_cpu_downscale, $param_avg_cpu_upscale, $param_exclusion_tag_key
end

###############################################################################
# Scripts
###############################################################################
script "js_time", type: "javascript" do
  result "time"
  code <<-EOF
  var time = [{
    "end_date":  new Date().toISOString(),
    "start_date": new Date(new Date().setDate(new Date().getDate() - 30)).toISOString()
  }]
EOF
end

script "js_calculated_utilization", type: "javascript" do
  result "results"
  parameters "ds_cloudsql_utilization", "ds_memory_utilization", "ds_cloudsql_instances"
  code <<-EOS
    results = []
    for ( i =0; i < ds_cloudsql_utilization.length; i++ ){
      var cloudsql_utilization_instance = ds_cloudsql_utilization[i]
      var database_id = cloudsql_utilization_instance.database_id
      var points = cloudsql_utilization_instance.points
      var cloudsql_instance = _.find(ds_cloudsql_instances,function(instance){ return instance.database_id == database_id})
      var memory_utilization = _.find(ds_memory_utilization,function(instance){ return instance.database_id == database_id})
      if ( cloudsql_instance == null && cloudsql_instance === undefined){
      } else {
        if (  cloudsql_utilization_instance.zone != null &&  cloudsql_utilization_instance.zone !== undefined ){
          var zone =  cloudsql_utilization_instance.zone
        } else {
          if ( cloudsql_instance != null && cloudsql_instance !== undefined){
            var zone = cloudsql_instance.zone
          } else {
            var zone = 'undefined'
          }
        }
        if (  cloudsql_utilization_instance.tier != null &&  cloudsql_utilization_instance.tier !== undefined ){
          var tier =  cloudsql_utilization_instance.tier
        } else {
          if ( cloudsql_instance != null && cloudsql_instance !== undefined){
            var tier = cloudsql_instance.tier
          } else {
            var tier = 'undefined'
          }
        }
        if (  cloudsql_utilization_instance.pricingPlan != null &&  cloudsql_utilization_instance.pricingPlan !== undefined ){
          var pricingPlan =  cloudsql_utilization_instance.pricingPlan
        } else {
          if ( cloudsql_instance != null && cloudsql_instance !== undefined){
            var pricingPlan = cloudsql_instance.pricingPlan
          } else {
            var pricingPlan = 'undefined'
          }
        }
        if ( cloudsql_instance != null && cloudsql_instance !== undefined ){
          if ( cloudsql_instance.dataDiskSizeGb != null && cloudsql_instance.dataDiskSizeGb !== undefined ){
            var dataDiskSizeGb = parseFloat(cloudsql_instance.dataDiskSizeGb)
          } else {
            var dataDiskSizeGb = 0
          }
        } else {
          var dataDiskSizeGb = 0
        }
        results.push(
          {
            region: cloudsql_utilization_instance.region,
            projectId: cloudsql_utilization_instance['projectId'],
            zone: zone,
            tier: tier,
            pricingPlan: pricingPlan,
            database_id: database_id,
            userLabels: cloudsql_instance.userLabels,
            settings: cloudsql_instance.settings,
            selfLink: cloudsql_instance.selfLink,
            cpu_average: (parseFloat(cloudsql_utilization_instance.avg_cpu_points)*100).toFixed(2),
            cpu_maximum: (parseFloat(cloudsql_utilization_instance.max_cpu_points)*100).toFixed(2),
            cpu_minimum: (parseFloat(cloudsql_utilization_instance.min_cpu_points)*100).toFixed(2)
          }
        )
      }
    }
  EOS
end

script "js_checked_utilization", type: "javascript" do
  parameters "ds_calculated_utilization", "ds_google_instance_size_map", "param_avg_cpu_downscale", "param_avg_cpu_upscale", "param_exclusion_tag_key"
  result "results"
  code <<-EOF
  var results = []
  tag_key = param_exclusion_tag_key.split(':')[0]
  tag_value = param_exclusion_tag_key.split(':')[1]
  _.each(ds_calculated_utilization, function(instance){
    if ( instance.tier.match(/custom/) ){
      return;
    }
    var instance_type_hash = ds_google_instance_size_map[instance.tier]
    if ( instance.database_id.indexOf('failover') == -1){
      if ( instance.userLabels != null && instance.userLabels !== undefined ){
        if ( instance.userLabels[tag_key] != null && instance.userLabels[tag_key] !== undefined ){
          if ( instance.userLabels[tag_key] != tag_value ){
            var filtered_instance = instance;
          }
        } else {
          var filtered_instance = instance;
        }
      } else {
        var filtered_instance = instance;
      }
    }
    if (filtered_instance != null && filtered_instance !== undefined){
      if (filtered_instance["cpu_average"] > param_avg_cpu_upscale){
        var recommended_size = instance_type_hash["up"]
        if ( recommended_size == null && recommended_size === null ){
          // skip
        } else {
          filtered_instance["direction"] = "up"
          filtered_instance["recommended_size"] = recommended_size
          results.push(filtered_instance)
        }
      }
      if (filtered_instance["cpu_average"] < param_avg_cpu_downscale){
        var recommended_size = instance_type_hash["down"]
        if ( recommended_size == null && recommended_size === null ){
          // skip
        } else {
          filtered_instance["recommended_size"] = recommended_size
          filtered_instance["direction"] = "down"
          results.push(filtered_instance)
        }
      }
    }
  })
  for(var instance in results){
    var taglist="";
    for(var prop in instance.userLabels){
      taglist=taglist+prop+":"+instance.userLabels["prop"]+", ";
    }
    if(taglist.length>0){
      instance.userLabels=taglist.substring(0,taglist.length-2);
    } else
    {
      instance.tags="< No Value >";
    }
  }
  results = _.sortBy(results, 'region');
  results= _.sortBy(results, 'projectId');
EOF
end
###############################################################################
# Policy
###############################################################################

policy "pol_utilization" do
  validate_each $ds_checked_utilization do
    summary_template "{{ rs_project_name }} (Account ID: {{ rs_project_id }}): {{ len data }} rows containing Google CloudSQL instances to be rightsized"
    check logic_not(val(item,"recommended_size"))
    escalate $email
    escalate $update_resources
    export do
      resource_level true
      field "projectId" do
        label "Project ID"
      end
      field "id" do
        label "Database ID"
        path "database_id"
      end
      field "zone" do
        label "Zone"
      end
      field "pricingPlan" do
        label "Pricing Plan"
      end
      field "tier" do
        label "Tier"
      end
      field "recommended_size" do
        label "Recommended Tier"
      end
      field "cpu_maximum" do
        label "CPU Maximum %"
      end
      field "cpu_minimum" do
        label "CPU Minimum %"
      end
      field "cpu_average" do
        label "CPU Average %"
      end
      field "userLabels" do
        label "Tags"
      end
      field "selfLink" do
        label "Self Link"
      end
    end
  end
end


###############################################################################
# Escalations
###############################################################################

escalation "email" do
  automatic true
  label "Send Email"
  description "Send incident email"
  email $param_email
end

escalation "update_resources" do
  automatic contains($param_automatic_action , "Resize Instances")
  label "Resize resources"
  description "Resized the selected resource"
  run "update_resources", data, $param_log_to_cm_audit_entries
end

###############################################################################
# Cloud Workflow
###############################################################################

define update_resources($data,$param_log_to_cm_audit_entries) return $all_responses do
  $$debug = $param_log_to_cm_audit_entries == "Yes"
  $$log = []
  $all_responses = []
  $syslog_subject = "Google Unused CloudSQL: "
  call sys_log(join([$syslog_subject, "Identified Instances"]),to_s($data))

  foreach $item in $data do
    sub on_error: handle_error($response) do
      $response = http_patch(
        url: $item["selfLink"],
        auth: $$auth_google,
        headers: {
          "cache-control": "no-cache",
          "content-type": "application/json"
        },
        body: {
          settings: { tier: $item["recommended_size"]}
        }
      )
      $all_responses << $response
    end
  end
  call sys_log(join([$syslog_subject, "Responses"]),to_s($all_responses))
end

define handle_error($response) do
  $status_code = $response["code"]
  $syslog_subject = "Google Unused CloudSQL Termination Error: "
  call sys_log(join([$syslog_subject, $status_code]),to_s($response))
  $_error_behavior = "skip"
end

define sys_log($subject, $detail) do
  if $$debug
    rs_cm.audit_entries.create(
      notify: "None",
      audit_entry: {
        auditee_href: @@account,
        summary: $subject,
        detail: $detail
      }
    )
  end
end

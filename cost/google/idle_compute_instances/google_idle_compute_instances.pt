name "Google Idle Compute Instances"
rs_pt_ver 20180301
type "policy"
short_description "Checks for Google Compute instances that are idle for the last 30 days and terminates them after approval.. See the [README](https://github.com/flexera/policy_templates/tree/master/cost/google/idle_compute_instances/) and [docs.flexera.com/flexera/EN/Automation](https://docs.flexera.com/flexera/EN/Automation/AutomationGS.htm) to learn more."
long_description ""
severity "low"
category "Cost"
default_frequency "daily"
info(
      version: "2.9",
      provider: "GCE",
      service: "Compute",
      policy_set: "Idle Compute Instances"
    )

###############################################################################
# Parameters
###############################################################################

parameter "param_email" do
  type "list"
  label "Email addresses to notify"
  description "Email addresses of the recipients you wish to notify when new incidents are created"
end

parameter "param_avg_used_memory" do
  type "number"
  label "Average used memory percentage"
  description "Set to -1 to ignore memory utilization"
  default -1
  min_value -1
  max_value 100
end

parameter "param_avg_cpu" do
  type "number"
  label "Average used CPU percentage"
  description "Set to -1 to ignore CPU utilization"
  default -1
  min_value -1
  max_value 100
end

parameter "param_exclusion_tag_key" do
  category "User Inputs"
  label "Exclusion Label Key:Value"
  description "Cloud native label to ignore instances. Format: Key:Value"
  type "string"
  allowed_pattern /(^$)|([\w]?)+\:([\w]?)+/
end

parameter "param_automatic_action" do
  type "list"
  label "Automatic Actions"
  description "When this value is set, this policy will automatically take the selected action(s)"
  allowed_values ["Terminate Instances"]
end

parameter "param_log_to_cm_audit_entries" do
  type "string"
  label "Log to CM Audit Entries"
  description "Boolean for whether or not to log any debugging information from actions to CM Audit Entries, this should be left set to No on Flexera EU"
  default "No"
  allowed_values "Yes", "No"
end

###############################################################################
# Authentication
###############################################################################

# authenticate with Google
credentials "auth_google" do
  schemes "oauth2"
  label "Google"
  description "Select the Google Cloud Credential from the list."
  tags "provider=gce"
end

###############################################################################
# Datasources
###############################################################################
pagination "google_pagination" do
  get_page_marker do
    body_path "nextPageToken"
  end
  set_page_marker do
    query "pageToken"
  end
end

datasource "ds_time" do
  run_script $js_time
end

#get all google project
datasource "ds_google_project" do
  iterate $ds_time
  request do
    auth $auth_google
    pagination $google_pagination
    host "cloudresourcemanager.googleapis.com"
    path "/v1/projects/"
    query "filter", "lifecycleState=ACTIVE"
  end
  result do
    encoding "json"
    collect jmes_path(response, "projects[*]") do
      field "projectNumber", jmes_path(col_item,"projectNumber")
      field "projectId", jmes_path(col_item,"projectId")
      field "end_date", val(iter_item,"end_date")
      field "start_date", val(iter_item,"start_date")
    end
  end
end

datasource "ds_compute_utilization" do
  iterate $ds_google_project
  request do
    auth $auth_google
    host "monitoring.googleapis.com"
    path join(["/v3/projects/",val(iter_item,"projectId"),"/timeSeries/"])
    query "filter", 'metric.type="compute.googleapis.com/instance/cpu/utilization"'
    query "interval.endTime", val(iter_item,"end_date")
    query "interval.startTime", val(iter_item,"start_date")
    ignore_status [403,404]
  end
  result do
    encoding "json"
    collect jmes_path(response, "timeSeries[*]") do
      field "label_instance_name", jmes_path(col_item, "metric.labels.instance_name")
      field "instance_id", jmes_path(col_item, "resource.labels.instance_id")
      field "zone", jmes_path(col_item, "resource.labels.zone")
      field "projectId", val(iter_item,"projectId")
      field "cpu_points", jmes_path(col_item, "points[*].value.doubleValue")
    end
  end
end

datasource "ds_calculated_utilization" do
  run_script $js_calculated_utilization, $ds_compute_utilization, $ds_memory_utilization
end

datasource "ds_memory_utilization" do
  iterate $ds_google_project
  request do
    auth $auth_google
    host "monitoring.googleapis.com"
    path join(["/v3/projects/",val(iter_item,"projectId"),"/timeSeries/"])
    query "filter", 'metric.type="agent.googleapis.com/memory/percent_used" AND metric.label.state=used'
    query "interval.endTime", val(iter_item,"end_date")
    query "interval.startTime", val(iter_item,"start_date")
    ignore_status [403,404]
  end
  result do
    encoding "json"
    collect jmes_path(response, "timeSeries[*]") do
      field "label_instance_name", jmes_path(col_item, "metric.labels.instance_name")
      field "instance_id", jmes_path(col_item, "resource.labels.instance_id")
      field "zone", jmes_path(col_item, "resource.labels.zone")
      field "mem_points", jmes_path(col_item, "points[*].value.doubleValue")
    end
  end
end

datasource "ds_add_instance_data" do
  iterate $ds_calculated_utilization
  request do
    run_script $js_add_instance_data,  val(iter_item,"projectId"), val(iter_item,"zone"), val(iter_item,"instance_id")
  end
  result do
    encoding "json"
    collect jmes_path(response,"items[*]") do
      field "id", val(iter_item, "instance_id")
      field "hostname", jmes_path(col_item,"name || instance_id")
      field "selfLink", jmes_path(col_item, "selfLink")
      field "label_instance_name",val(iter_item, "label_instance_name")
      field "status", jmes_path(col_item, "status")
      field "zone", val(iter_item, "zone")
      field "labels", jmes_path(col_item,"labels")
      field "cpu_average", val(iter_item, "cpu_average")
      field "cpu_maximum", val(iter_item, "cpu_maximum")
      field "cpu_minimum", val(iter_item, "cpu_minimum")
      field "mem_average", val(iter_item, "mem_average")
      field "mem_maximum", val(iter_item, "mem_maximum")
      field "mem_minimum", val(iter_item, "mem_minimum")
      field "projectId", val(iter_item,"projectId")
    end
  end
end

datasource "ds_clean_instance_data" do
  run_script $js_clean_instance_data, $ds_add_instance_data, $param_exclusion_tag_key
end

###############################################################################
# Scripts
###############################################################################
script "js_time", type: "javascript" do
  result "time"
  code <<-EOF
    var time = [{
      "end_date":  new Date().toISOString(),
      "start_date": new Date(new Date().setDate(new Date().getDate() - 30)).toISOString()
    }]
EOF
end

script "js_calculated_utilization", type: "javascript" do
  result "results"
  parameters "ds_compute_utilization", "ds_memory_utilization"
  code <<-EOS
  results = []
  for ( i =0; i < ds_compute_utilization.length; i++ ){
    var instance_id = ds_compute_utilization[i].instance_id
    if ( instance_id === null || instance_id === undefined ) {
      // No instance id, continue
    } else {
      var points = ds_compute_utilization[i].cpu_points
      if ( points === null || points === undefined ) {
        var cpu_maximum = "101"
        var cpu_average = "101"
        var cpu_minimum = "101"
      } else {
        var cpu_maximum = parseFloat( points.reduce( function (x, y) { return Math.max(x, y) } )).toFixed(2)
        var cpu_sum = _.reduce(points, function(memo, num){ return memo + num; }, 0);
        var cpu_average = parseFloat(cpu_sum / points.length).toFixed(2)
        var cpu_minimum = parseFloat( points.reduce( function (x, y) { return Math.min(x, y) } )).toFixed(2)
      }
      var memory_record = _.find(ds_memory_utilization, function(record) { return record.instance_id == instance_id; })
      var memory_maximum = "101"
        var memory_average = "101"
        var memory_minimum = "101"
      if ( memory_record === null || memory_record === undefined ) {
        // No memory records, continue
      } else {
        if ( memory_record.mem_points === null || memory_record.mem_points === undefined ) {
          // No memory records, continue
        } else {
          var memory_maximum = parseFloat( memory_record.mem_points.reduce( function (x, y) { return Math.max(x, y) } )).toFixed(2)
          var memory_sum = _.reduce(memory_record.mem_points, function(memo, num){ return memo + num; }, 0);
          var memory_average = parseFloat(memory_sum/memory_record.mem_points.length).toFixed(2)
          var memory_minimum = parseFloat( memory_record.mem_points.reduce( function (x, y) { return Math.min(x, y) } )).toFixed(2)
        }
      }

      results.push(
        {
          zone: ds_compute_utilization[i].zone,
          projectId: ds_compute_utilization[i].projectId,
          instance_id: instance_id,
          cpu_average: cpu_average,
          cpu_maximum: cpu_maximum,
          cpu_minimum: cpu_minimum,
          mem_average: memory_average,
          mem_maximum: memory_maximum,
          mem_minimum: memory_minimum
        }
      )
    }
  }
EOS
end

script "js_add_instance_data", type: "javascript" do
  result "request"
  parameters "project","zone", "instance_id"
  code <<-EOS
  request = {
    "auth": "auth_google",
    "host": "www.googleapis.com",
    "verb": "GET",
    "path": "/compute/v1/projects/"+project+"/zones/"+zone+"/instances",
    "headers": {
      "User-Agent": "RS Policies",
      "Content-Type": "application/json"
    },
    "query_params": {
      "filter": "(id="+instance_id+") AND (status=RUNNING)"
    }
    "ignore_status": [403,404]
  }
EOS
end

script "js_clean_instance_data", type: "javascript" do
  result "results"
  parameters "ds_add_instance_data", "param_exclusion_tag_key"
  code <<-EOS
  tag_key = param_exclusion_tag_key.split(':')[0]
  tag_value = param_exclusion_tag_key.split(':')[1]

  results = _.filter(ds_add_instance_data, function (data) {
    if (data.status == "RUNNING") {
      if (data.labels != null && data.labels !== undefined) {
        if (data.labels[tag_key] != null && data.labels[tag_key] !== undefined) {
          if (data.labels[tag_key] != tag_value) {
            var labelsList = "";
            for (var prop in data.labels) {
              labelsList = labelsList + prop + ":" + data.labels[prop] + ", ";
            }
            if (labelsList.length > 0) {
              data.labels = labelsList.substring(0, labelsList.length - 2);
            } else {
              data.labels = "< No Value >";
            }
            if (data.hostname == undefined) {
              data.hostname = data.id;
            }
            return data
          }
        } else {
          var labelsList = "";
          for (var prop in data.labels) {
            labelsList = labelsList + prop + ":" + data.labels[prop] + ", ";
          }
          if (labelsList.length > 0) {
            data.labels = labelsList.substring(0, labelsList.length - 2);
          } else {
            data.labels = "< No Value >";
          }
          if (data.hostname == undefined) {
            data.hostname = data.id;
          }
          return data
        }
      } else {
        var labelsList = "";
        for (var prop in data.labels) {
          labelsList = labelsList + prop + ":" + data.labels[prop] + ", ";
        }
        if (labelsList.length > 0) {
          data.labels = labelsList.substring(0, labelsList.length - 2);
        } else {
          data.labels = "< No Value >";
        }
        if (data.hostname == undefined) {
          data.hostname = data.id;
        }
        return data
      }
    }
  })
  results = _.sortBy(results, 'zone');
  results = _.sortBy(results, 'projectId');
EOS
end
###############################################################################
# Policy
###############################################################################

policy "pol_utilization" do
  validate_each $ds_clean_instance_data do
    summary_template "{{ rs_project_name }} (Account ID: {{ rs_project_id }}): {{ len data }} rows containing Google instance StackDriver Utilization data"
    check logic_or(eq($param_avg_used_memory, -1), gt(to_n(val(item,"mem_average")), $param_avg_used_memory))
    check logic_or(eq($param_avg_cpu, -1), gt(to_n(val(item,"cpu_average")),$param_avg_cpu))
    escalate $email
    escalate $terminate_resources
    export do
      resource_level true
      field "projectId" do
        label "Project ID"
      end
      field "zone" do
        label "Region"
      end
      field "id" do
        label "Instance ID"
      end
      field "hostname" do
        label "Hostname"
      end
      field "cpu_maximum" do
        label "CPU Maximum %"
      end
      field "cpu_minimum" do
        label "CPU Minimum %"
      end
      field "cpu_average" do
        label "CPU Average %"
      end
      field "mem_maximum" do
        label "Memory Maximum %"
      end
      field "mem_minimum" do
        label "Memory Minimum %"
      end
      field "mem_average" do
        label "Memory Average %"
      end
      field "labels" do
        label "Labels"
      end
      field "selfLink" do
        label "Self Link"
      end
    end
  end
end


###############################################################################
# Escalations
###############################################################################

escalation "email" do
  automatic true
  label "Send Email"
  description "Send incident email"
  email $param_email
end

escalation "terminate_resources" do
  automatic contains($param_automatic_action, "Terminate Instances")
  label "Terminate Instances"
  description "Approval to terminate all selected instances"
  run "terminate_resources", data, $param_log_to_cm_audit_entries
end

###############################################################################
# Cloud Workflow
###############################################################################

define terminate_resources($data,$param_log_to_cm_audit_entries) return $all_responses do
  $$debug = $param_log_to_cm_audit_entries == "Yes"
  $$log = []
  $all_responses = []
  $syslog_subject = "Google Idle Compute: "
  call sys_log(join([$syslog_subject, "Identified Instances"]),to_s($data))
  foreach $item in $data do
    sub on_error: handle_error($response) do
      $response = http_delete(
        url: $item["selfLink"],
        auth: $$auth_google,
        headers: {
          "cache-control": "no-cache",
          "content-type": "application/json"
        }
      )
      $all_responses << $response
    end
  end
  call sys_log(join([$syslog_subject, "Responses"]),to_s($all_responses))
end

define handle_error($response) do
  $status_code = $response["code"]
  $syslog_subject = "Google Idle Compute Termination Error: "
  call sys_log(join([$syslog_subject, $status_code]),to_s($response))
  $_error_behavior = "skip"
end

define sys_log($subject, $detail) do
  if $$debug
    rs_cm.audit_entries.create(
      notify: "None",
      audit_entry: {
        auditee_href: @@account,
        summary: $subject,
        detail: $detail
      }
    )
  end
end

name "Google Recommender Policy"
rs_pt_ver 20180301
type "policy"
short_description "Checks for snapshots older than specified number of days and, optionally, deletes them. See the [README](https://github.com/flexera/policy_templates/tree/master/cost/google/old_snapshots) and [docs.rightscale.com/policies](https://docs.rightscale.com/policies/) to learn more."
category "Cost"
severity "low"
default_frequency "daily"
info(
  version: "2.0",
  provider:"Google",
  service: "Storage",
  policy_set: "Native Recommendations"
)

###############################################################################
# Parameters
###############################################################################

parameter "param_email" do
  type "list"
  label "Email addresses to notify"
  description "Email addresses of the recipients you wish to notify when new incidents are created"
end

parameter "param_recommenders" do
  type "list"
  label "List of Recommenders to Check"
  allowed_values ["google.iam.policy.Recommender"]
  default ["google.iam.policy.Recommender"]
end

parameter "param_log_to_cm_audit_entries" do
  type "string"
  label "Log to CM Audit Entries"
  description "Boolean for whether or not to log any debugging information from actions to CM Audit Entries, this should be left set to No on Flexera EU"
  default "No"
  allowed_values "Yes", "No"
end

###############################################################################
# Authentication
###############################################################################

# authenticate with Google
credentials "auth_google" do
  schemes "oauth2"
  label "Google"
  description "Select the Google Cloud Credential from the list."
  tags "provider=gce"
end

###############################################################################
# Pagination
###############################################################################

pagination "google_pagination" do
  get_page_marker do
    body_path "nextPageToken"
  end
  set_page_marker do
    query "pageToken"
  end
end

###############################################################################
# Datasources
###############################################################################

#get all google project
datasource "ds_google_project" do
  request do
    auth $auth_google
    pagination $google_pagination
    host "cloudresourcemanager.googleapis.com"
    path "/v1/projects/"
  end
  result do
    encoding "json"
    collect jmes_path(response, "projects[*]") do
      field "projectNumber", jmes_path(col_item,"projectNumber")
      field "projectId", jmes_path(col_item,"projectId")
    end
  end
end

datasource "ds_zones" do
  iterate $ds_google_project
  request do
    auth $auth_google
    pagination $google_pagination
    host "compute.googleapis.com"
    path join(["/compute/v1/projects/",val(iter_item,"projectId"),"/regions"])
  end
  result do
    encoding "json"
    collect jmes_path(response, "items[*]") do
      field "projectId", val(iter_item, "projectId")
      field "projectNumber", val(iter_item, "projectNumber")
      field "name", jmes_path(col_item, "name")
    end
  end
end

datasource "ds_recommenders" do
  run_script $js_recommenders, $ds_zones, $param_recommenders
end

datasource "ds_recommendations" do
  iterate $ds_recommenders
  request do
    run_script $js_recommender_call, val(iter_item,"projectId"), val(iter_item, "location"), val(iter_item, "recommender")
  end
end

###############################################################################
# Scripts
###############################################################################
script "js_recommenders", type: "javascript" do
  parameters "ds_zones", "param_recommenders"
  result "results"
  code <<-EOF
  var results = []
  _.each(param_recommenders, function(recommender){
    var global_inserted = 0
    _.each(ds_zones, function(zone){
      /*
      results.push({
        projectNumber: zone.projectNumber,
        projectId: zone.projectId,
        location: zone.name,
        recommender: recommender
      })
      */
      if ( global_inserted == 0){
        results.push({
          projectNumber: zone.projectNumber,
          projectId: zone.projectId,
          location: 'global',
          recommender: recommender
        })
        global_inserted = 1
      }
    })
  })
EOF
end

script "js_recommender_call", type: "javascript" do
  parameters "projectId", "location", "recommender"
  result "request"
  code <<-EOF
  var now = new Date().getTime();
  var sleepDuration = 30000
  while(new Date().getTime() < now + sleepDuration){ /* Do nothing */ }
  var request = {
    auth: "auth_google",
    pagination: "google_pagination",
    host: "recommender.googleapis.com",
    path: "/v1/projects/"+ projectId +"/locations/" + location + "/recommenders/" + recommender + "/recommendations",
    query_strings: { alt: "json" }
    ignore_status: [429]
  }
EOF
end

script "js_filter_snapshots", type: "javascript" do
  parameters "ds_snapshots", "param_exclusion_tags"
  result "filtered_snapshots"
  code <<-EOF
  var filtered_snapshots = []
EOF
end

###############################################################################
# Policy
###############################################################################

policy "policy_recommendations" do
  validate_each $ds_recommendations do
    summary_template "{{ rs_project_name }} (Account ID: {{ rs_project_id }}): rows containing Old Snapshots"
    check eq(0,1)
    escalate $esc_email
    detail_template "details"
  end
end


###############################################################################
# Escalations
###############################################################################

escalation "esc_email" do
  automatic true
  label "Send Email"
  description "Send incident email"
  email $param_email
end

###############################################################################
# Cloud Workflow
###############################################################################

define delete_snapshots($data,$param_log_to_cm_audit_entries) return $all_responses do
  $$debug = $param_log_to_cm_audit_entries == "Yes"
  $all_responses = []
  call sys_log(join([$syslog_subject, "Responses"]),to_s($all_responses))
end

define handle_error($response) do
  $status_code = $response["code"]
  $syslog_subject = "Google Snapshot Deletion Error: "
  call sys_log(join([$syslog_subject, $status_code]),to_s($response))
  $_error_behavior = "skip"
end

define sys_log($subject, $detail) do
  if $$debug
    rs_cm.audit_entries.create(
      notify: "None",
      audit_entry: {
        auditee_href: @@account,
        summary: $subject,
        detail: $detail
      }
    )
  end
end


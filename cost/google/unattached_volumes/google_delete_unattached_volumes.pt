name "Google Delete Unattached Volumes"
rs_pt_ver 20180301
type "policy"
short_description "Checks for unattached volumes older than specified number of days and, optionally, deletes them. See the [README](https://github.com/flexera/policy_templates/tree/master/cost/google/unattached_volumes) and [docs.rightscale.com/policies](https://docs.rightscale.com/policies/) to learn more."
category "Cost"
severity "low"
info(
  version: "2.0", 
  provider:"Google", 
  service: "Storage",
  policy_set: "Unattached Volumes"
)

###############################################################################
# Permissions
###############################################################################

permission "perm_read_creds" do
  actions   "rs_cm.show_sensitive","rs_cm.index_sensitive"
  resources "rs_cm.credentials"
end

###############################################################################
# Parameters
###############################################################################

parameter "param_email" do
  type "list"
  label "Email addresses of the recipients you wish to notify"
end

parameter "param_unattached_days" do
  type "number"
  label "The number of days a volume has been unattached"
  default 30
end

parameter "param_exclusion_tags" do
  label "Exclusion Label List"
  description "Cloud native label to ignore volumes. Format: Key:Value"
  type "list"
  allowed_pattern /(^$)|([\w]?)+\:([\w]?)+/
end

parameter "param_create_final_snapshot" do
  label "Create Final Snapshot"
  type "string"
  allowed_values "true", "false"
end


###############################################################################
# Authentication
###############################################################################

auth "my_google_auth", type: "oauth2" do
  token_url "https://www.googleapis.com/oauth2/v4/token"
  grant type: "jwt_bearer" do
    iss cred("GCE_PLUGIN_ACCOUNT")
    aud "https://www.googleapis.com/oauth2/v4/token"
    additional_claims do {
      "scope" => "https://www.googleapis.com/auth/compute",
      "scope" => "https://www.googleapis.com/auth/cloud-platform"
    } end
    signing_key cred("GCE_PLUGIN_PRIVATE_KEY")
  end
end

###############################################################################
# Pagination
###############################################################################

pagination "google_pagination" do
  get_page_marker do
    body_path "nextPageToken"
  end
  set_page_marker do
    query "pageToken"
  end
end

###############################################################################
# Datasources
###############################################################################

datasource "ds_projects" do
  request do
    auth $my_google_auth
    host "cloudresourcemanager.googleapis.com"
    verb "GET"
    path "/v1/projects"
    pagination $google_pagination
  end
  result do
    encoding "json"
    collect jmes_path(response,"projects[*]") do
      field "project_name", jmes_path(col_item, "projectId")
      end
  end
end

datasource "ds_zones" do
  iterate $ds_projects
  request do
    auth $my_google_auth
    host "compute.googleapis.com"
    verb "GET"
    path join(["/compute/v1/projects/", val(iter_item, "project_name"), "/zones"])
    query "project", val(iter_item, "project_name")
    pagination $google_pagination
  end
  result do
    encoding "json"
    collect jmes_path(response,"items[*]") do
      field "region", last(split(jmes_path(col_item, "region"),'/'))
      field "zone", jmes_path(col_item, "name") 
    end
  end
end

datasource "ds_merged_project_zone" do
  run_script $js_merge, $ds_zones, $ds_projects
end

script "js_merge", type: "javascript" do
  parameters "ds_zones", "ds_projects"
  result "res"
  code <<-EOS
  res = []
  _.each(ds_projects, function(project){
    _.each(ds_zones, function(zone){
      var result_json = {"project": project.project_name,"zone": zone.zone}
      res.push(result_json)
    })
  })
  EOS
end

datasource "volume_list" do
  iterate $ds_merged_project_zone
  request do
    auth $my_google_auth
    host "compute.googleapis.com"
    verb "GET"
    path join(["/compute/v1/projects/", val(iter_item, "project"), "/zones/", val(iter_item, "zone"), "/disks"])
    query "project", val(iter_item, "project_name")
    pagination $google_pagination
  end
  result do
    encoding "json"
    collect jmes_path(response,"items[*]") do
      field "project", val(iter_item, "project")
      field "zone", val(iter_item, "zone")
      field "selfLink", jmes_path(col_item,"selfLink")
      field "zone_path",jmes_path(col_item, "zone")
      field "id", jmes_path(col_item, "id")
      field "name", jmes_path(col_item, "name")
      field "diskSizeGb", jmes_path(col_item, "sizeGb")
      field "status", jmes_path(col_item, "status")
	    field "creationTimestamp", jmes_path(col_item, "creationTimestamp")
	    field "lastAttachTimestamp", jmes_path(col_item, "lastAttachTimestamp")
      field "lastDetachTimestamp", jmes_path(col_item, "lastDetachTimestamp")
      field "labels", jmes_path(col_item, "labels")
    end
  end
end

datasource "ds_clean_volume_list" do
  run_script $js_clean_volume_list, $volume_list
end

script "js_clean_volume_list", type: "javascript" do
  parameters "volume_list"
  result "res"
  code <<-EOS
  res = []
  _.each(volume_list, function(volume){
    if(volume.name!=null && volume.id!=null && volume.zone_path!=null){
      var temp = volume.zone_path.split("/", 9)[8]
      volume["zone"] = temp
      res.push(volume)
    }
  })
  EOS
end


datasource "ds_unattached_volumes" do
  run_script $js_unattached_volumes, $ds_clean_volume_list, $param_exclusion_tags
end

script "js_unattached_volumes", type: "javascript" do
  parameters "ds_clean_volume_list", "param_exclusion_tags"
  result "filtered_volumes"
  code <<-EOS

  ds_volumes = []
  _.each(ds_clean_volume_list, function(volume){    
    if(volume.lastDetachTimestamp!=null && volume.lastDetachTimestamp > volume.lastAttachTimestamp ){
      ds_volumes.push(volume)
    }
  })

  var filtered_volumes = _.filter(ds_volumes, function(volume){
    var count = 0
    _.each(param_exclusion_tags, function(tag)
      {
        tag_key = tag.split(':')[0]
        tag_value = tag.split(':')[1]
        if (volume.labels != null && volume.labels !== undefined ){
          if ( volume.labels[tag_key] != null && volume.labels[tag_key] !== undefined){
            if (volume.labels[tag_key] == tag_value){
              count = 1
            }
          }
        }
      }
    )
    if (count == 0){
      return volume
    }
  }
  )
  var now = new Date()
  var one_day=1000*60*60*24
  _.each(filtered_volumes, function(volume){
    var creation_time = new Date(volume.lastDetachTimestamp)
    var difference = now.getTime() - creation_time.getTime()
    var days_old=(difference/one_day).toFixed(2)
    volume["days_old"] = days_old
  }
  )
  var filtered_volumes = _.sortBy(filtered_volumes, "name")
  EOS
end


###############################################################################
# Policy
###############################################################################

policy 'policy_google_unattached_volumes' do
  validate_each $ds_unattached_volumes do
    summary_template "{{ rs_project_name }} (Account ID: {{ rs_project_id }}): {{ len data }} Google unattached volumes Discovered"
    detail_template <<-EOS
# Unattached volumes from the Google Cloud 
# Google Old volumes
| Project ID | Name | Size | Labels | Age In Days| Status |
| ---------- | ---- | ---- | ------ | ------------- | ------ |
{{ range data -}}
| {{.project}} | {{.name}} | {{.diskSizeGb}} | {{ range $i, $e := .labels }}{{$i}}:{{ $e }}, {{ end }} | {{.days_old}} | {{.status}} |
{{ end -}}
###### Policy Applied in Account: {{ rs_project_name }} (Account ID: {{ rs_project_id }}) within Org: {{ rs_org_name }} (Org ID: {{ rs_org_id }})
EOS

  check lt(to_n(val(item, "days_old")), $param_unattached_days)
  escalate $esc_email
  escalate $esc_approve_delete_volumes
  end
end

###############################################################################
# Escalations
###############################################################################

escalation "esc_email" do
  email $param_email
end

escalation "esc_approve_delete_volumes" do
  request_approval  do
    label "Approve Resource Deletion"
    description "Approve escalation to run RightScale Cloud Workflow to delete Old volumes"
    parameter "approval_reason" do
      type "string"
      label "Reason for Approval"
      description "Explain why you are approving the action"
    end
  end
  run "delete_volumes", data, $param_create_final_snapshot
end

###############################################################################
# Cloud Workflow
###############################################################################

define delete_volumes($data,$param_create_final_snapshot) return $all_responses do
  $$debug=true
  $snapshot_responses = []
  $all_responses = []
  $syslog_subject = "Google Old volumes: "
  call sys_log(join([$syslog_subject, "Google volume"]),to_s($data))
  foreach $item in $data do
    if ($param_create_final_snapshot == "true")
      sub on_error: handle_error($response) do
        $response = http_post(
          url: join([$item["selfLink"],"/createSnapshot"]),
          auth: $$auth_google,
          headers: {
            "cache-control": "no-cache",
            "content-type": "application/json"
          }
        )
        $snapshot_responses << $response
      end
    end
    sub on_error: handle_error($response) do
      $response = http_delete(
        url: $item["selfLink"],
        auth: $$auth_google,
        headers: {
          "cache-control": "no-cache",
          "content-type": "application/json"
        }
      )
      $all_responses << $response
    end
  end
  call sys_log(join([$syslog_subject, "Responses"]),to_s($all_responses))
end

define handle_error($response) do 
  $status_code = $response["code"]
  $syslog_subject = "Google volume Deletion Error: "
  call sys_log(join([$syslog_subject, $status_code]),to_s($response))
  $_error_behavior = "skip"
end 

define sys_log($subject, $detail) do
  if $$debug
    rs_cm.audit_entries.create(
      notify: "None",
      audit_entry: {
        auditee_href: @@account,
        summary: $subject,
        detail: $detail
      }
    )
  end
end
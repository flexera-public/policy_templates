name "Google Idle VM Recommender"
rs_pt_ver 20180301
type "policy"
short_description "This Policy finds Google Idle VM Recommendations and reports when it finds them. See the [README](https://github.com/flexera/policy_templates/tree/master/cost/google/idle_vm_recommendations) and [docs.flexera.com/flexera/EN/Automation](https://docs.flexera.com/flexera/EN/Automation/AutomationGS.htm) to learn more."
category "Cost"
severity "low"
default_frequency "daily"
info(
  version: "2.1",
  provider:"Google",
  service: "Compute",
  policy_set: "Idle Compute Instances"
)

###############################################################################
# Parameters
###############################################################################

parameter "param_email" do
  type "list"
  label "Email addresses to notify"
  description "Email addresses of the recipients you wish to notify when new incidents are created"
end

parameter "param_zones" do
  type "list"
  label "Zones"
  description "Location to check, this is zone names"
end

parameter "param_project" do
  type "list"
  label "Project ID"
  description "Google Projects to Query. Leave blank to query all projects."
end

parameter "param_exclude_tags" do
  category "User Inputs"
  label "Exclusion Tag Key:Value"
  description "Cloud native tag (label) to ignore IP addresses. Format: Key:Value"
  type "string"
  allowed_pattern /(^$)|([\w]?)+\:([\w]?)/
end

parameter "param_automatic_action" do
  type "list"
  label "Automatic Actions"
  description "When this value is set, this policy will automatically take the selected action(s)"
  allowed_values ["Terminate Instances"]
end

parameter "param_log_to_cm_audit_entries" do
  type "string"
  label "Log to CM Audit Entries"
  description "Boolean for whether or not to log any debugging information from actions to CM Audit Entries, this should be left set to No on Flexera EU"
  default "No"
  allowed_values "Yes", "No"
end

###############################################################################
# Authentication
###############################################################################

# authenticate with Google
credentials "auth_google" do
  schemes "oauth2"
  label "Google"
  description "Select the Google Cloud Credential from the list."
  tags "provider=gce"
end

###############################################################################
# Pagination
###############################################################################

pagination "google_pagination" do
  get_page_marker do
    body_path "nextPageToken"
  end
  set_page_marker do
    query "pageToken"
  end
end

###############################################################################
# Datasources
###############################################################################

datasource "ds_time" do
  run_script $js_time
end

datasource "ds_currency_reference" do
  request do
    host "raw.githubusercontent.com"
    path "/rightscale/policy_templates/master/cost/scheduled_reports/currency_reference.json"
    header "User-Agent", "RS Policies"
  end
end

#get all google project
datasource "ds_google_project" do
  iterate $ds_time
    request do
      auth $auth_google
      pagination $google_pagination
      host "cloudresourcemanager.googleapis.com"
      path "/v1/projects/"
    end
    result do
      encoding "json"
      collect jmes_path(response, "projects[*]") do
        field "accountNumber", jmes_path(col_item,"projectNumber")
        field "accountID", jmes_path(col_item,"projectId")
        field "accountName", jmes_path(col_item,"name")
        field "endDate", val(iter_item,"endDate")
        field "startDate", val(iter_item,"startDate")
      end
    end
end

datasource "ds_recommenders" do
  run_script $js_recommenders, $ds_google_project, $param_project, $param_zones
end

datasource "ds_recommendations" do
  iterate $ds_recommenders
  request do
    run_script $js_recommender_call, val(iter_item,"accountID"), val(iter_item, "region")
  end
  result do
    encoding "json"
    collect jmes_path(response, "recommendations[*]") do
      field "accountID", val(iter_item, "accountID")
      field "region", val(iter_item, "region")
      field "id", jmes_path(col_item, "name")
      field "description", jmes_path(col_item, "description")
      field "resourceName", jmes_path(col_item, "content.overview.resourceName")
      field "primaryImpact", jmes_path(col_item, "primaryImpact")
      field "costUnits", jmes_path(col_item, "primaryImpact.costProjection.cost.units")
      field "costNanos", jmes_path(col_item, "primaryImpact.costProjection.cost.nanos")
      field "duration", jmes_path(col_item, "primaryImpact.costProjection.duration")
      field "currency", jmes_path(col_item, "primaryImpact.costProjection.cost.currencyCode")
      field "priority", jmes_path(col_item, "priority")
      field "recommenderSubtype", jmes_path(col_item, "recommenderSubtype")
      field "state", jmes_path(col_item, "stateInfo.state")
    end
  end
end

#region in this context can be confusing. region is the spend api's definition of region, not GCP's. this is still technically GCP's "Zone"
datasource "ds_zones" do
  iterate $ds_google_project
  request do
    auth $auth_google
    host "compute.googleapis.com"
    verb "GET"
    path join(["/compute/v1/projects/", val(iter_item, "accountID"), "/zones"])
    query "project", val(iter_item, "accountID")
    pagination $google_pagination
    ignore_status [403,404]
  end
  result do
    encoding "json"
    collect jmes_path(response,"items[*]") do
      field "accountID", val(iter_item, "accountID")
      field "accountNumber", val(iter_item, "accountNumber")
      field "accountName", val(iter_item, "accountName")
      field "region", jmes_path(col_item, "name")
      field "endDate", val(iter_item,"endDate")
      field "startDate", val(iter_item,"startDate")
    end
  end
end

datasource "ds_compute_utilization" do
  iterate $ds_google_project
  request do
    auth $auth_google
    host "monitoring.googleapis.com"
    path join(["/v3/projects/",val(iter_item,"accountID"),"/timeSeries/"])
    query "filter", 'metric.type="compute.googleapis.com/instance/cpu/utilization"'
    query "interval.endTime", val(iter_item,"endDate")
    query "interval.startTime", val(iter_item,"startDate")
    ignore_status [403,404]
  end
  result do
    encoding "json"
    collect jmes_path(response, "timeSeries[*]") do
      field "resourceName", jmes_path(col_item, "metric.labels.instance_name")
      field "resourceID", jmes_path(col_item, "resource.labels.instance_id")
      field "zone", jmes_path(col_item, "resource.labels.zone")
      field "accountID", val(iter_item,"accountID")
      field "cpuPoints", jmes_path(col_item, "points[*].value.doubleValue")
      field "accountName", val(iter_item,"accountName")
      field "accountNumber", val(iter_item,"accountNumber")
    end
  end
end

datasource "ds_calculated_utilization" do
  run_script $js_calculated_utilization, $ds_compute_utilization
end

datasource "ds_get_vms" do
  iterate $ds_calculated_utilization
  request do
    run_script $js_get_vms,  val(iter_item,"accountID"), val(iter_item,"zone"), val(iter_item,"resourceID")
  end
  result do
    encoding "json"
    collect jmes_path(response,"items[*]") do
      field "resourceID", val(iter_item, "resourceID")
      field "hostname", jmes_path(col_item,"name || resourceID")
      field "selfLink", jmes_path(col_item, "selfLink")
      field "resourceName",val(iter_item, "resourceName")
      field "status", jmes_path(col_item, "status")
      field "zone", val(iter_item, "zone")
      field "tags", jmes_path(col_item,"settings.userLabels")
      field "cpuAverage", val(iter_item, "cpuAverage")
      field "cpuMaximum", val(iter_item, "cpuMaximum")
      field "cpuMinimum", val(iter_item, "cpuMinimum")
      field "accountID", val(iter_item,"accountID")
      field "accountName", val(iter_item,"accountName")
      field "accountNumber", val(iter_item,"accountNumber")
    end
  end
end

datasource "ds_sanitize_vms" do
  run_script $js_sanitize_data, $ds_get_vms, $param_exclude_tags
end

datasource "ds_vm_cost_mapping" do
  run_script $js_instance_cost_mapping, $ds_sanitize_vms, $ds_recommendations, $ds_currency_reference
end

###############################################################################
# Scripts
###############################################################################
script "js_time", type: "javascript" do
  result "time"
  code <<-EOF
    var time = [{
      "endDate":  new Date().toISOString(),
      "startDate": new Date(new Date().setDate(new Date().getDate() - 30)).toISOString()
    }]
EOF
end

script "js_recommenders", type: "javascript" do
  parameters "ds_google_project", "param_project", "param_regions"
  result "results"
  code <<-EOF
  var results = []

  _.each(ds_google_project, function(project){
    if (_.contains(param_project, project.accountID) || param_project.length == 0) {
      _.each(param_regions, function(region){
        results.push({
          accountNumber: project.accountNumber,
          accountID: project.accountID,
          region: region
        })
      })
    }
  })
EOF
end

script "js_recommender_call", type: "javascript" do
  parameters "accountID", "region"
  result "request"
  code <<-EOF
  var now = new Date().getTime();
  var sleepDuration = 10000
  while(new Date().getTime() < now + sleepDuration){ /* Do nothing */ }
  var request = {
    auth: "auth_google",
    pagination: "google_pagination",
    host: "recommender.googleapis.com",
    ignore_status: 403,
    path: "/v1/projects/"+ accountID +"/locations/" + region + "/recommenders/google.compute.instance.IdleResourceRecommender/recommendations",
    query_strings: { alt: "json" }
  }
EOF
end

script "js_get_vms", type: "javascript" do
  result "request"
  parameters "accountID", "region", "resourceID"
  code <<-EOS
    request = {
      "auth": "auth_google",
      "host": "compute.googleapis.com",
      "verb": "GET",
      "path": "/compute/v1/projects/"+accountID+"/zones/"+region+"/instances",
      "ignore_status": [403,404]
      "headers": {
        "User-Agent": "RS Policies",
        "Content-Type": "application/json"
      },
      "query_params": {
      "filter": "(id="+resourceID+") AND (status=RUNNING)"
      }
    }
  EOS
end

script "js_calculated_utilization", type: "javascript" do
  result "results"
  parameters "ds_compute_utilization"
  code <<-EOS
  results = []
  for ( i =0; i < ds_compute_utilization.length; i++ ){
    var resourceID = ds_compute_utilization[i].resourceID
    if ( resourceID === null || resourceID === undefined ) {
      // No instance id, continue
    } else {
      var points = ds_compute_utilization[i].cpuPoints
      if ( points === null || points === undefined ) {
        var cpuMaximum = "101"
        var cpuAverage = "101"
        var cpuMinimum = "101"
      } else {
        var cpuMaximum = parseFloat( points.reduce( function (x, y) { return Math.max(x, y) } )).toFixed(2)
        var cpu_sum = _.reduce(points, function(memo, num){ return memo + num; }, 0);
        var cpuAverage = parseFloat(cpu_sum / points.length).toFixed(2)
        var cpuMinimum = parseFloat( points.reduce( function (x, y) { return Math.min(x, y) } )).toFixed(2)
      }
      results.push(
        {
          zone: ds_compute_utilization[i].zone,
          accountID: ds_compute_utilization[i].accountID,
          accountName: ds_compute_utilization[i].accountName,
          accountNumber: ds_compute_utilization[i].accountNumber
          resourceID: resourceID,
          resourceName: ds_compute_utilization[i].resourceName
          cpuAverage: cpuAverage,
          cpuMaximum: cpuMaximum,
          cpuMinimum: cpuMinimum
        }
      )
    }
  }
EOS
end

script "js_sanitize_data", type: "javascript" do
result "results"
  parameters "ds_get_vms", "param_exclusion_tag_key"
  code <<-EOS
  tag_key = param_exclusion_tag_key.split(':')[0]
  tag_value = param_exclusion_tag_key.split(':')[1]

  results = _.filter(ds_get_vms, function (vm) {
    if (vm.status == "RUNNING") {
      if (vm.tags != null && vm.tags !== undefined) {
        if (vm.tags[tag_key] != null && vm.tags[tag_key] !== undefined) {
          if (vm.tags[tag_key] != tag_value) {
            if (vm.hostname == undefined) {
              vm.hostname = vm.resourceID;
            }
            return vm
          }
        } else {
          if (vm.hostname == undefined) {
            vm.hostname = vm.resourceID;
          }
          return vm
        }
      } else {
        if (vm.hostname == undefined) {
          vm.hostname = vm.resourceID;
        }
        return vm
      }
    }
  })
  results = _.sortBy(results, 'zone');
  results = _.sortBy(results, 'accountID');
  EOS
end

script "js_instance_cost_mapping", type:"javascript" do
  result "result"
  parameters  "vms", "recommendations", "ds_currency_reference"
  code <<-EOS
    var instances = [];
    var result={};
    var message=''
    var count=0;

    function formatNumber(number, separator){
      var numString =number.toString();
      var values=numString.split(".");
      var result = ''
      while (values[0].length > 3){
        var chunk = values[0].substr(-3)
        values[0] = values[0].substr(0, values[0].length - 3)
        result = separator + chunk + result
      }
      if (values[0].length > 0){
        result = values[0] + result
      }
      if(values[1]==undefined){
        return result;
      }
      return result+"."+values[1];
    }
    total = 0
    cur = ""
    _.each(vms, function(vm) {
      _.each(recommendations, function(recommendation){
        if(vm.resourceName == recommendation.resourceName) {
          count++
          if(recommendation['currency'] !== undefined ) {
            if (recommendation['costUnits'] == null) {
              recommendation['costUnits'] = 0
            }
            if (recommendation['costNanos'] == null) {
              recommendation['costNanos'] = 0
            }
            if (ds_currency_reference[recommendation['currency']] !== undefined ) {
            var cur = ds_currency_reference[recommendation['currency']]['symbol']
            } else {
              var cur = "$"
            }
            vm['savingsCurrency'] = cur
          } else {
            var cur = "$"
            var separator = ","
          }
          if (recommendation.costNanos<0) {
            recommendation.costNanos = recommendation.costNanos * -1
          }
          if (recommendation.costUnits<0) {
            recommendation.costUnits = recommendation.costUnits * -1
          }
          strNano = "."+recommendation.costNanos
          combine = recommendation.costUnits + parseFloat(strNano)
          monthsDuration = parseFloat(recommendation.duration.replace("s",""))/2628288
          monthlySavings = combine / monthsDuration
          total = total+monthlySavings
          vm['savings']= (Math.round( monthlySavings * 1000) / 1000)
          vm['savingsCurrency'] = cur
          vm['priority'] = recommendation['priority']
          vm['region'] = recommendations['region']
          vm['primaryImpact'] = recommendation['primaryImpact']
          vm['recommenderSubtype'] = recommendation['recommenderSubtype']
          vm['state'] = recommendation['state']
          vm['service'] = "Compute"
          tags = []
          if (vm['tags'] != null) {
            if( typeof vm['tags'] == 'object') {
              Object.keys(vm.tags).forEach(function(key) {
                if (vm.tags[key] == null || vm.tags[key]=="") {
                  vm.tags[key] = "null"
                }
                tags.push(String(key)+'='+String(vm.tags[key]))
              });
            } else {
              tags.push(vm["tags"].replace(":","=null"))
            }
          }
          vm['tags'] = tags
          instances.push(vm)
        }
      })
    })
    if (instances.length != 0){
      if(count){
        total=cur + ' '+formatNumber((Math.round(total * 100) / 100));
        message="The total estimated monthly savings are " +total;
      } else {
        message="The Flexera Optima system does not have any data to calculate savings for these resources";
      }
    }else{
      message="unable to find resources between recommender and resource api";
    }
    result={
      "instances": instances,
      "message": message
    };
    result.instances = _.sortBy(result.instances,"region");
    result.instances = _.sortBy(result.instances,"accountName");
  EOS
end

###############################################################################
# Policy
###############################################################################

policy "policy_recommendations" do
  validate $ds_vm_cost_mapping do
    summary_template "{{ rs_project_name }} (Account ID: {{ rs_project_id }}): {{ len data }} rows found for Idle VMs(Compute Instances)"
    check eq(size(val(data, "instances")), 0)
    escalate $esc_email
    escalate $esc_terminate_resources
    export "instances" do
      resource_level true
      field "accountID" do
        label "Account ID"
      end
      field "accountNumber" do
        label "Account Number"
      end
      field "resourceID" do
        label "Resource ID"
      end
      field "resourceName" do
        label "Resource Name"
      end
      field "resourceType" do
        label "Resource Type"
      end
      field "region" do
        label "Zone"
      end
      field "hostname" do
        label "Hostname"
      end
      field "cpuMaximum" do
        label "CPU Maximum %"
      end
      field "cpuMinimum" do
        label "CPU Minimum %"
      end
      field "cpuAverage" do
        label "CPU Average %"
      end
      field "tags" do
        label "Tags"
      end
      field "description" do
        label "Description"
      end
      field "savings" do
        label "Estimated Monthly Savings"
      end
      field "savingsCurrency" do
        label "Currency"
      end
      field "priority" do
        label "Priority"
      end
      field "recommenderSubtype" do
        label "Sub Type"
      end
      field "state" do
        label "State"
      end
      field "status" do
        label "Status"
      end
      field "id" do
        label "ID"
        path "resourceID"
      end
      field "service" do
        label "Service"
      end
    end
  end
end

###############################################################################
# Escalations
###############################################################################

escalation "esc_email" do
  automatic true
  label "Send Email"
  description "Send incident email"
  email $param_email
end

escalation "esc_terminate_resources" do
  automatic contains($param_automatic_action, "Terminate Instances")
  label "Terminate Instances"
  description "Approval to terminate all selected instances"
  run "terminate_resources", data, $param_log_to_cm_audit_entries
end

###############################################################################
# Cloud Workflow
###############################################################################

define terminate_resources($data,$param_log_to_cm_audit_entries) return $all_responses do
  $$debug = $param_log_to_cm_audit_entries == "Yes"
  $$log = []
  $all_responses = []
  $syslog_subject = "Google Idle VMs: "
  call sys_log(join([$syslog_subject, "Identified Instances"]),to_s($data))
  foreach $item in $data do
    sub on_error: handle_error($response) do
      $response = http_delete(
        url: $item["selfLink"],
        auth: $$auth_google,
        headers: {
          "cache-control": "no-cache",
          "content-type": "application/json"
        }
      )
      $all_responses << $response
    end
  end
  call sys_log(join([$syslog_subject, "Responses"]),to_s($all_responses))
end

define handle_error($response) do
  $status_code = $response["code"]
  $syslog_subject = "Google Idle VM Termination Error: "
  call sys_log(join([$syslog_subject, $status_code]),to_s($response))
  $_error_behavior = "skip"
end

define sys_log($subject, $detail) do
  if $$debug
    rs_cm.audit_entries.create(
      notify: "None",
      audit_entry: {
        auditee_href: @@account,
        summary: $subject,
        detail: $detail
      }
    )
  end
end

name "Google Committed Use Discount Recommender"
rs_pt_ver 20180301
type "policy"
short_description "This Policy finds Google Committed Use Discount Recommendations and reports when it finds them. See the [README](https://github.com/flexera-public/policy_templates/tree/master/cost/google/cud_recommendations) and [docs.flexera.com/flexera/EN/Automation](https://docs.flexera.com/flexera/EN/Automation/AutomationGS.htm) to learn more."
category "Cost"
severity "low"
default_frequency "daily"
info(
  version: "3.1",
  provider: "Google",
  service: "Compute",
  recommendation_type: "Rate Reduction",
  policy_set: "Reserved Instances"
)

###############################################################################
# Parameters
###############################################################################

parameter "param_email" do
  type "list"
  label "Email addresses to notify"
  description "Email addresses of the recipients you wish to notify when new incidents are created"
end

parameter "param_term" do
  category "RI"
  label "Term"
  default "1 Year"
  description "The committed use discount term"
  allowed_values "1 Year", "3 Year"
  type "string"
end

parameter "param_algorithm" do
  label "Recommendation Algorithm"
  default "Optimal"
  description "Recommendations for CUDs are generated using either one of two algorithms. Stable Usage covers minimum stable usage over time. Optimal are based on overall usage and might cover resources that are not active all the time. See https://cloud.google.com/docs/cuds-recommender#understanding-recommendations"
  allowed_values "Stable Usage", "Optimal"
  type "string"
end

parameter "param_project" do
  type "list"
  label "Project ID"
  description "Google Projects to Query. Leave blank to query all projects."
end

parameter "param_regions" do
  type "list"
  label "Region"
  description "Location to check, this is region names"
end

parameter "param_log_to_cm_audit_entries" do
  type "string"
  label "Log to CM Audit Entries"
  description "Boolean for whether or not to log any debugging information from actions to CM Audit Entries, this should be left set to No on Flexera EU"
  default "No"
  allowed_values "Yes", "No"
end

###############################################################################
# Authentication
###############################################################################

# Authenticate with Google
credentials "auth_google" do
  schemes "oauth2"
  label "Google"
  description "Select the Google Cloud Credential from the list."
  tags "provider=gce"
end

###############################################################################
# Pagination
###############################################################################

pagination "google_pagination" do
  get_page_marker do
    body_path "nextPageToken"
  end
  set_page_marker do
    query "pageToken"
  end
end

###############################################################################
# Datasources & Scripts
###############################################################################

datasource "ds_currency_reference" do
  request do
    host "raw.githubusercontent.com"
    path "/rightscale/policy_templates/master/cost/scheduled_reports/currency_reference.json"
    header "User-Agent", "RS Policies"
  end
end

# Get list of GCP projects.
datasource "ds_google_project" do
  request do
    auth $auth_google
    pagination $google_pagination
    host "cloudresourcemanager.googleapis.com"
    path "/v1/projects/"
  end
  result do
    encoding "json"
    collect jmes_path(response, "projects[*]") do
      field "projectNumber", jmes_path(col_item,"projectNumber")
      field "accountID", jmes_path(col_item,"projectId")
      field "accountName", jmes_path(col_item,"name")
    end
  end
end

# Get list of regions.
datasource "ds_regions_list" do
  iterate $ds_google_project
  request do
    auth $auth_google
    pagination $google_pagination
    host "compute.googleapis.com"
    path join(["/compute/v1/projects/",val(iter_item, "accountID"),"/regions/"])
    ignore_status [403,404]
  end
  result do
    encoding "json"
      collect jmes_path(response, "items[*]") do
      field "region", jmes_path(col_item, "name")
      field "accountID", val(iter_item, "accountID")
    end
  end
end

# Get a list of CUD.
datasource "ds_recommenders" do
  run_script $js_recommenders, $ds_google_project, $param_project, $param_regions
end

# Get a list of items to make calls to GCP recommender API.
script "js_recommenders", type: "javascript" do
  parameters "ds_google_project", "param_project", "param_regions"
  result "results"
  code <<-EOF
  var results = []

  _.each(ds_google_project, function(project){
    if (_.contains(param_project, project.accountID) || param_project.length == 0) {
      _.each(param_regions, function(region){
        results.push({
          projectNumber: project.projectNumber,
          accountID: project.accountID,
          accountName: project.accountName
          region: region
        })
      })
    }
  })
EOF
end

# Get a list of recommendations obtained from making calls to GCP recommender API.
datasource "ds_recommendations" do
  iterate $ds_recommenders
  request do
    run_script $js_recommender_call, val(iter_item,"accountID"), val(iter_item, "region")
  end
  result do
    encoding "json"
    collect jmes_path(response, "recommendations[*]") do
      field "accountID", val(iter_item, "accountID")
      field "projectNumber", val(iter_item, "projectNumber")
      field "accountName", val(iter_item, "accountName")
      field "resourceID", val(col_item, "name")
      field "region", val(iter_item, "region")
      field "description", jmes_path(col_item, "description")
      field "content", jmes_path(col_item, "content")
      field "primaryImpact", jmes_path(col_item, "primaryImpact")
      field "costUnits", jmes_path(col_item, "primaryImpact.costProjection.cost.units")
      field "costNanos", jmes_path(col_item, "primaryImpact.costProjection.cost.nanos")
      field "duration", jmes_path(col_item, "primaryImpact.costProjection.duration")
      field "currency", jmes_path(col_item, "primaryImpact.costProjection.cost.currencyCode")
      field "priority", jmes_path(col_item, "priority")
      field "recommenderSubtype", jmes_path(col_item, "recommenderSubtype")
      field "state", jmes_path(col_item, "stateInfo.state")
    end
  end
end

script "js_recommender_call", type: "javascript" do
  parameters "accountID", "region"
  result "request"
  code <<-EOF
  var now = new Date().getTime();
  var sleepDuration = 10000
  while(new Date().getTime() < now + sleepDuration){ /* Do nothing */ }
  var request = {
    auth: "auth_google",
    pagination: "google_pagination",
    host: "recommender.googleapis.com",
    ignore_status: 403,
    path: "/v1/projects/"+ accountID +"/locations/" + region + "/recommenders/google.compute.commitment.UsageCommitmentRecommender/recommendations",
    query_strings: { alt: "json" }
  }
EOF
end

# Get a list of recommendations filtered by the parameters of term, algorithm and with a specific currency.
datasource "ds_cud_cost_mapping" do
  run_script $js_instance_cost_mapping, $ds_recommendations, $ds_currency_reference, $param_term, $param_algorithm
end

script "js_instance_cost_mapping", type:"javascript" do
  result "result"
  parameters  "recommendations", "ds_currency_reference", "param_term", "param_algorithm"
  code <<-EOS
    var instances = [];
    var result={};
    var message=''
    var count=0;
    var secondsInAMonth = 2628288
    function formatNumber(number, separator){
      var numString =number.toString();
      var values=numString.split(".");
      var result = ''
      while (values[0].length > 3){
        var chunk = values[0].substr(-3)
        values[0] = values[0].substr(0, values[0].length - 3)
        result = separator + chunk + result
      }
      if (values[0].length > 0){
        result = values[0] + result
      }
      if(values[1]==undefined){
        return result;
      }
      return result+"."+values[1];
    }
    total = 0
    var cur = ""
    var separator = ","

    //Create algorithm mapping (Parameter name mapped to API name & user-friendly name)
    algorithm_mapping = {
      "Stable Usage": {
        "value": "LOW_WATERMARK",
        "name": "Stable Usage (Low Watermark)"
      },
      "Optimal": {
        "value": "BREAK_EVEN_POINT",
        "name": "Optimal (Break-Even Point)"
      }
    }

    //Filter recommendations on Algorithm parameter
    recommendations = _.filter(recommendations, function(recommendation) {
      return recommendation.content.overview.algorithm == algorithm_mapping[param_algorithm].value
    })

    //For each recommendation calculate savings / give algorithm user-friendly name
    _.each(recommendations, function(recommendation) {
      count++
      if (recommendation['currency'] !== undefined) {
        if (ds_currency_reference[recommendation['currency']] !== undefined ) {
          cur = ds_currency_reference[recommendation['currency']]['symbol']
        } else {
          cur = "$"
        }
        recommendation['savingsCurrency'] = cur
      } else {
        cur = "$"
        separator = ","
      }

      //Convert Costs from Negative to Positive and add Units and Nanos
      if (!(recommendation.costNanos == null || recommendation.costNanos == undefined) && recommendation.costNanos != 0) {
        recommendation.costNanos = recommendation.costNanos * -1
      } else {
        recommendation.costNanos = 0
      }

      if (!(recommendation.costUnits == null || recommendation.costUnits == undefined) && (recommendation.costUnits != 0)) {
        recommendation.costUnits = recommendation.costUnits * -1
      } else {
        recommendation.costUnits = 0
      }

      var cost_nano = recommendation.costNanos * Math.pow(10, -9)
      var combine = Number(recommendation.costUnits) + Number(parseFloat(cost_nano))

      var months_duration = 0
      if (!(recommendation.duration == null || recommendation.duration == undefined)) {
        months_duration = parseFloat(recommendation.duration.replace("s","")) / secondsInAMonth
      }

      var monthly_savings = 0
      if (months_duration != 0) {
        monthly_savings = combine / months_duration
      }
      total += monthly_savings

      var algorithm = ""
      if (algorithm_mapping[param_algorithm]) {
        algorithm = algorithm_mapping[param_algorithm].name
      }

      _.each(recommendation.content.operationGroups, function(oGroup) {
        if(oGroup.operations != null) {
          _.each(oGroup.operations, function(operation) {
            if (operation.action == "add") {
              var plan = ""
              if (operation.value.plan == "TWELVE_MONTH"){
                plan = "1 Year"
              } else if (operation.value.plan == "THIRTY_SIX_MONTH") {
                plan = "3 Year"
              }
              var resourcesToPurchaseArray = _.map(operation.value.resources, function(r) {
                return r.amount + " " + r.type
              })
              var resourcesToPurchase = resourcesToPurchaseArray.join(", ")

              recommendation["resourceName"] = operation.value.name
              recommendation["plan"] = plan
              recommendation["resourceType"] = operation.value.type
              recommendation["resourcesToPurchase"] = resourcesToPurchase
            }
          })
        }
      })

      recommendation['savings'] = (Math.round( monthly_savings * 1000) / 1000)
      recommendation['savingsCurrency'] = cur
      recommendation['service'] = "Storage"
      recommendation['algorithm'] = algorithm
      tags = []
      recommendation['tags'] = tags
      instances.push(recommendation)
    })

    var instances = _.filter(instances, function(inst) {
      return inst.plan == param_term
    })

    if (instances.length != 0) {
      if (count) {
        total=cur + ' ' + formatNumber((Math.round(total * 100) / 100));
        message = "The total estimated monthly savings are " + total;
      } else {
        message = "The Flexera Optima system does not have any data to calculate savings for these resources";
      }
    } else {
      message = "unable to find resources between recommender and resource api";
    }
    result = {
      "instances": instances,
      "message": message
    };
    result.instances = _.sortBy(result.instances,"region");
    result.instances = _.sortBy(result.instances,"projectNumber");
  EOS
end

###############################################################################
# Policy
###############################################################################

policy "policy_recommendations" do
  validate $ds_cud_cost_mapping do
    summary_template "{{ rs_project_name }} (Account ID: {{ rs_project_id }}): {{ len data.instances }} rows found for Committed Use Discount Recommendations to Purchase"
    check eq(size(val(data, "instances")), 0)
    escalate $esc_email
    export "instances" do
      resource_level true
      field "accountID" do
        label "Project ID"
      end
      field "accountName" do
        label "Project Name"
      end
      field "projectNumber" do
        label "Project Number"
      end
      field "resourceID" do
        label "Resource ID"
      end
      field "resourceName" do
        label "Resource Name"
      end
      field "resourceType" do
        label "Resource Type"
      end
      field "resourcesToPurchase" do
        label "Resources To Purchase"
      end
      field "region" do
        label "Region"
      end
      field "plan" do
        label "Term"
      end
      field "algorithm" do
        label "Algorithm"
      end
      field "tags" do
        label "Tags"
      end
      field "description" do
        label "Description"
      end
      field "savings" do
        label "Estimated Monthly Savings"
      end
      field "savingsCurrency" do
        label "Currency"
      end
      field "priority" do
        label "Priority"
      end
      field "recommenderSubtype" do
        label "Sub Type"
      end
      field "state" do
        label "State"
      end
      field "id" do
        label "ID"
        path "resourceID"
      end
    end
  end
end

###############################################################################
# Escalations
###############################################################################

escalation "esc_email" do
  automatic true
  label "Send Email"
  description "Send incident email"
  email $param_email
end

###############################################################################
# Cloud Workflow
###############################################################################

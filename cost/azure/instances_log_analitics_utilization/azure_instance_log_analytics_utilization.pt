name "Azure Inefficient Instance Utilization using Log Analytics"
rs_pt_ver 20180301
type "policy"
short_description "This checks inefficient instance utilization using provided CPU and Memory thresholds. Instances matching the criteria can be resized after user approval. See the [README](https://github.com/flexera/policy_templates/tree/master/cost/azure/instances_log_analitics_utilization) and [docs.rightscale.com/policies](https://docs.rightscale.com/policies/) to learn more."
long_description ""
severity "low"
category "Cost"
info(
  version: "2.0",
  provider: "Azure",
  service: "Compute",
  policy_set: "Inefficient Instance Usage"
  )

###############################################################################
# Permissions
###############################################################################

permission "perm_read_creds" do
  actions   "rs_cm.show_sensitive","rs_cm.index_sensitive"
  resources "rs_cm.credentials"
end

###############################################################################
# Parameters
###############################################################################

parameter "param_avg_used_memory" do
  type "number"
  label "Average used memory percentage"
  description "Set to -1 to ignore memory utilization"
  default 60
  min_value -1
  max_value 100
end

parameter "param_avg_cpu" do
  type "number"
  label "Average used CPU percentage"
  description "Set to -1 to ignore CPU utilization"
  default 60
  min_value -1
  max_value 100
end

parameter "param_exclusion_tag_key" do
  category "User Inputs"
  label "Exclusion Tag Key"
  description "Cloud native tag key to ignore instances. Example: exclude_utilization"
  type "string"
end

parameter "param_email" do
  type "list"
  label "Email addresses"
  description "Email addresses of the recipients you wish to notify"
end

###############################################################################
# Authentication
###############################################################################

#authenticate with Azure
credentials "azure_auth" do
  schemes "oauth2"
  label "Azure"
  description "Select the Azure Resource Manager Credential from the list."
  tags "provider=azure_rm"
end

#authenticate with Log Analytics
credentials "log_analytics_auth" do
  schemes "oauth2"
  label "Azure Log Analytics"
  description "Select the Azure Resource Manager Credential for Log Analytics."
  tags "provider=azure_rm"
end


###############################################################################
# Pagination
###############################################################################

pagination "azure_pagination" do
  get_page_marker do
    body_path "nextLink"
  end
  set_page_marker do
    uri true
  end
end

###############################################################################
# Datasources
###############################################################################

#get all subscription details.
datasource "ds_subscriptions" do
  request do
    auth $azure_auth
    pagination $azure_pagination
    host "management.azure.com"
    path "/subscriptions/"
    query "api-version","2019-06-01"
    header "User-Agent", "RS Policies"
  end
  result do
    encoding "json"
    collect jmes_path(response, "value[*]") do
      field "subscriptionId", jmes_path(col_item,"subscriptionId")
      field "displayName", jmes_path(col_item,"displayName")
      field "state", jmes_path(col_item,"state")
    end
  end
end

datasource "ds_azure_skus" do
  iterate $ds_subscriptions
    request do
      auth $azure_auth
      pagination $azure_pagination
      host "management.azure.com"
      path join(["/subscriptions/", val(iter_item,"subscriptionId"), "/providers/Microsoft.Compute/skus"])
      query "api-version","2017-09-01"
      header "User-Agent", "RS Policies"
    end
    result do
      encoding "json"
      collect jmes_path(response, "value") do
        field "resourceType", jmes_path(col_item,"resourceType")
        field "name", jmes_path(col_item,"name")
        field "locations", jmes_path(col_item,"locations")
        field "capabilities", jmes_path(col_item,"capabilities")
        field "restrictions", jmes_path(col_item,"restrictions")
      end
    end
end

datasource "ds_azure_vm_sizes" do
  run_script $js_azure_vm_sizes, $ds_azure_skus
end

datasource "ds_azure_instances" do
  iterate $ds_subscriptions
    request do
      auth $azure_auth
      pagination $azure_pagination
      host "management.azure.com"
      path join(["/subscriptions/", val(iter_item,"subscriptionId"), "/providers/Microsoft.Compute/virtualMachines"])
      query "api-version","2018-10-01"
      header "User-Agent", "RS Policies"
	end
	result do
	  encoding "json"
	  collect jmes_path(response, "value") do
	    field "id", jmes_path(col_item,"id")
	    field "subscriptionId",val(iter_item,"subscriptionId")
	    field "subscriptionName",val(iter_item,"displayName")
	  end
	end
end

datasource "ds_azure_instances_view" do
  iterate $ds_azure_instances
  request do
    auth $azure_auth
    pagination $azure_pagination
    host "management.azure.com"
    path val(iter_item, "id")
    query "api-version","2018-10-01"
    header "User-Agent", "RS Policies"
  end
  result do
    encoding "json"
      field "id", jmes_path(response,"id")
      field "name", jmes_path(response,"name")
      field "location", jmes_path(response,"location")
      field "osType", jmes_path(response,"properties.storageProfile.osDisk.osType")
      field "vmSize", jmes_path(response,"properties.hardwareProfile.vmSize")
      field "resources", jmes_path(response,"resources")
      field "tags", jmes_path(response,"tags")
      field "availabilitySet", jmes_path(response,"properties.availabilitySet.id")
      field "subscriptionId",val(iter_item,"subscriptionId")
      field "subscriptionName",val(iter_item,"subscriptionName")
  end
end

datasource "ds_oms_resources" do
  run_script $js_oms_resources, $ds_azure_instances_view, $param_exclusion_tag_key
end

datasource "ds_la_instances_utilization" do
  iterate $ds_oms_resources
  request do
    auth $log_analytics_auth
    verb "POST"
    host "api.loganalytics.io"
    path join(["/v1/workspaces/", val(iter_item,"workspaceId"), "/query"])
    query "timespan","P30D"
    header "User-Agent", "RS Policies"
    body_field "query", join(['Perf | where _ResourceId == tolower("',val(iter_item,"id"),'") | where CounterName == "% Processor Time" or CounterName == "Available MBytes Memory" or CounterName == "% Committed Bytes In Use" | summarize ["avg"] = avg(CounterValue), ["max"] = max(CounterValue), ["min"] = min(CounterValue) by _ResourceId,CounterName'])
  end
  result do
    encoding "json"
      collect jmes_path(response, "tables") do
        field "resourceid", jmes_path(col_item, "rows[0][0]")
        field "results" do
          collect jmes_path(col_item, "rows") do
            field "counter", jmes_path(col_item, "[1]")
            field "avg", jmes_path(col_item, "[2]")
            field "max", jmes_path(col_item, "[3]")
            field "min", jmes_path(col_item, "[4]")
          end
        end
      end
  end
end

# get Azure instance size map
datasource "ds_azure_instance_size_map" do
  request do
    verb "GET"
    host "raw.githubusercontent.com"
    path "/rightscale/policy_templates/master/data/azure/instance_types.json"
    header "User-Agent", "RS Policies"
  end
end

datasource "ds_merged_metrics" do
  run_script $js_merged_metrics, $ds_oms_resources, $ds_la_instances_utilization, $ds_azure_vm_sizes
end

datasource "ds_inefficient_utilization_metrics" do
  run_script $js_inefficient_utilization_metrics, $ds_azure_instance_size_map, $ds_merged_metrics, $param_avg_used_memory, $param_avg_cpu
end

###############################################################################
# Scripts
###############################################################################

script "js_azure_vm_sizes", type: "javascript" do
  parameters "ds_azure_skus"
  result "result"
  code <<-EOS
    var result = [];
    _.each(ds_azure_skus, function(sku){

      if (sku.resourceType === "virtualMachines") {
        var skipVmSku = false;
        _.each(sku.restrictions, function(restriction){
          if (restriction.type === "Location" && restriction.reasonCode === "NotAvailableForSubscription") {
            skipVmSku = true
          }
        })

        if (skipVmSku) {
          // VM Sku not available in this location for this subscription
        } else {
          var capabilities = [];
          _.each(sku.capabilities, function(capability){
            capabilities[capability.name] = capability.value
          })

          result.push({
            name: sku.name,
            resourceType: sku.resourceType,
            locations: sku.locations,
            MaxResourceVolumeMB: capabilities.MaxResourceVolumeMB,
            OSVhdSizeMB: capabilities.OSVhdSizeMB,
            vCPUs: capabilities.vCPUs,
            HyperVGenerations: capabilities.HyperVGenerations,
            MemoryGB: capabilities.MemoryGB,
            MaxDataDiskCount: capabilities.MaxDataDiskCount,
            LowPriorityCapable: capabilities.LowPriorityCapable,
            PremiumIO: capabilities.PremiumIO,
            vCPUsAvailable: capabilities.vCPUsAvailable,
            ACUs: capabilities.ACUs,
            vCPUsPerCore: capabilities.vCPUsPerCore,
            CombinedTempDiskAndCachedIOPS: capabilities.CombinedTempDiskAndCachedIOPS,
            CombinedTempDiskAndCachedReadBytesPerSecond: capabilities.CombinedTempDiskAndCachedReadBytesPerSecond,
            CombinedTempDiskAndCachedWriteBytesPerSecond: capabilities.CombinedTempDiskAndCachedWriteBytesPerSecond,
            CachedDiskBytes: capabilities.CachedDiskBytes,
            UncachedDiskIOPS: capabilities.UncachedDiskIOPS,
            UncachedDiskBytesPerSecond: capabilities.UncachedDiskBytesPerSecond,
            EphemeralOSDiskSupported: capabilities.EphemeralOSDiskSupported
          })
        }
      }
    })
  EOS
end

script "js_oms_resources", type: "javascript" do
  parameters "azure_instances","exclusion_tag"
  result "result"
  code <<-EOS
    var result = [];
    _.each(azure_instances, function(instance){
      if (_.has(instance.tags, exclusion_tag)) {
        // Instance has exclusion tag, skip
      } else {
        var resourceGroup = instance.id.split('/')[4]
        var log_agent = false;
        var workspace_id = "N/A";
        var diag_agent = false;
        var storage_account = "N/A";
        _.each(instance.resources, function(resource){
          if (resource.name === "MicrosoftMonitoringAgent" || resource.name === "OmsAgentForLinux") {
            log_agent = true
            workspace_id = resource.properties.settings.workspaceId
          } else if (resource.name === "Microsoft.Insights.VMDiagnosticsSettings" || resource.name === "LinuxDiagnostic") {
            diag_agent = true
            storage_account = resource.properties.settings.StorageAccount
          }
        })
        if (instance["availabilitySet"]) {
          var availabilitySet = true
        } else {
          var availabilitySet = false
        }
        if (log_agent === true) {
          result.push({
            id: instance["id"],
            name: instance["name"],
            resourceGroup: resourceGroup,
            location: instance["location"],
            vmSize: instance["vmSize"],
            osType: instance["osType"],
            logAgent: log_agent,
            workspaceId: workspace_id,
            diagAgent: diag_agent,
            storageAccount: storage_account,
            tags: instance["tags"],
            availabilitySet: availabilitySet,
            subscriptionId: instance["subscriptionId"],
            subscriptionName:instance["subscriptionName"]
          })
        }
      }
    })
  EOS
end

script "js_merged_metrics", type: "javascript" do
  parameters "ds_oms_resources","ds_la_instances_utilization","ds_azure_vm_sizes"
  result "result"
  code <<-EOS
  var result = [];
  _.each(ds_oms_resources, function(instance){
    var cpu_maximum = "N/A";
    var cpu_average = "N/A";
    var mem_maximum = "N/A";
    var mem_average = "N/A";
    var metrics = (_.where(ds_la_instances_utilization, {"resourceid": instance["id"].toLowerCase()}));
    if (metrics[0]){
      _.each(metrics[0]["results"], function(metric){
        var counterName = metric.counter.replace("!"," ").replace("(MISSING)")
        if (counterName === "% Processor Time") {
          cpu_maximum = parseFloat(metric.max).toFixed(2)
          cpu_average = parseFloat(metric.avg).toFixed(2)
        }else if (counterName === "Available MBytes Memory") {
          // Linux counter is available/free, not used
          var instanceDetails = _.where(ds_azure_vm_sizes, {"name": instance["vmSize"]})
          var totalMem = instanceDetails[0].MemoryGB * 1024
          mem_maximum = parseFloat(((totalMem - metric.min) / totalMem) * 100).toFixed(2)
          mem_average = parseFloat(((totalMem - metric.avg) / totalMem) * 100).toFixed(2)
        }else if (counterName === "% Committed Bytes In Use") {
          mem_maximum = parseFloat(metric.max).toFixed(2)
          mem_average = parseFloat(metric.avg).toFixed(2)
        }
      })

      result.push({
        subscriptionId: instance["subscriptionId"]
        subscriptionName:instance["subscriptionName"]
        id: instance["id"],
        name: instance["name"],
        resourceGroup: instance["resourceGroup"],
        location: instance["location"],
        vmSize: instance["vmSize"],
        osType: instance["osType"],
        logAgent: instance["logAgent"],
        workspaceId: instance["workspaceId"],
        diagAgent: instance["diagAgent"],
        storageAccount: instance["storageAccount"],
        tags: instance["tags"],
        availabilitySet: instance["availabilitySet"]
        cpu_maximum: cpu_maximum,
        cpu_average: cpu_average,
        mem_maximum: mem_maximum,
        mem_average: mem_average
      })
    }
  })
EOS
end

script "js_inefficient_utilization_metrics", type: "javascript" do
  result "inefficient_utilization_results"
  parameters "ds_azure_instance_size_map", "ds_merged_metrics", "param_avg_used_memory", "param_avg_cpu"
  code <<-EOS
  var inefficient_utilization_results = []
  for ( i = 0; i < ds_merged_metrics.length; i++){
    var instance = ds_merged_metrics[i]
    var cpu_average = instance.cpu_average
    var mem_average = instance.mem_average
    var next_vm_size = ds_azure_instance_size_map[instance.vmSize].down
    if(next_vm_size == null && typeof next_vm_size == "undefined" ){
      next_vm_size="N/A";
    }
    if (cpu_average < param_avg_cpu || mem_average < param_avg_used_memory){
      inefficient_utilization_results.push({
        subscriptionName:instance.subscriptionName,
        id: instance.id,
        name: instance.name,
        resourceGroup: instance.resourceGroup,
        location: instance.location,
        vmSize: instance.vmSize,
        osType: instance.osType,
        logAgent: instance.logAgent,
        workspaceId: instance.workspaceId,
        diagAgent: instance.diagAgent,
        storageAccount: instance.storageAccount,
        tags: instance.tags,
        availabilitySet: instance.availabilitySet,
        cpu_maximum: instance.cpu_maximum,
        cpu_average: cpu_average,
        mem_maximum: instance.mem_maximum,
        mem_average: mem_average,
        next_vm_size: next_vm_size
      })
    }
  }
  inefficient_utilization_results = _.sortBy(inefficient_utilization_results, 'location');
  inefficient_utilization_results = _.sortBy(inefficient_utilization_results, 'subscriptionName');
  
EOS
end

###############################################################################
# Policy
###############################################################################

policy 'policy_azure_utilization' do
  validate_each $ds_inefficient_utilization_metrics do
    summary_template "{{ rs_project_name }} (Account ID: {{ rs_project_id }}): {{ len data }} Underutilized Instances Reporting to Azure Log Analytics"
    detail_template <<-EOS
# Azure Instance Utilization from Log Analytics

### Thresholds for Consideration
  - Average Memory Used %: {{ parameters.param_avg_used_memory }}
  - Average CPU Used %: {{ parameters.param_avg_cpu }}

___
###### Policy Applied in Account: {{ rs_project_name }} (Account ID: {{ rs_project_id }}) within Org: {{ rs_org_name }} (Org ID: {{ rs_org_id }})
EOS
    export do
      field "subscriptionName" do
        label "Subscription Name"
      end
      field "location" do
        label "Region"
      end
      field "name" do
        label "Hostname"
      end
      field "resourceGroup" do
        label "Resource Group"
      end
      field "vmSize" do
        label "Instance Size"
      end
      field "next_vm_size" do
        label "Next Instance Size"
      end
      field "osType" do
        label "OS Type"
      end
      field "availabilitySet" do
        label "Availability Set"
      end
      field "workspaceId" do
        label "OMS Workspace Id"
      end
      field "cpu_maximum" do
        label "CPU Maximum %"
      end
      field "cpu_average" do
        label "CPU Average %"
      end
      field "mem_maximum" do
        label "Memory Maximum %"
      end
      field "mem_average" do
        label "Memory Average %"
      end
    end

  escalate $email
  check logic_or(eq($param_avg_used_memory, -1), gt(to_n(val(item,"mem_average")), $param_avg_used_memory))
  check logic_or(eq($param_avg_cpu, -1), gt(to_n(val(item,"cpu_average")),$param_avg_cpu))
  escalate $esc_downsize_instances
  end
end

###############################################################################
# Escalations
###############################################################################

escalation "email" do
  email $param_email
end

escalation "esc_downsize_instances" do
  request_approval  do
    label "Approve Instances for downsizing"
    description "Approve downsize action"
    parameter "approval_reason" do
      type "string"
      label "Reason for approval"
      description "Explain why you are approving the action"
    end
  end
  run "downsize_instances", data
end

###############################################################################
# Cloud Workflow
###############################################################################

define downsize_instances($data) return $all_responses do
  $response={}
  $$debug = true
  $syslog_subject = "Azure Instance Utilization with Log Analytics Policy: "
  foreach $item in $data do
    if $item["next_vm_size"]!= "N/A"
      sub on_error: skip do
        $response = http_request(
          auth: $$azure_auth,
          verb: "patch",
          host: "management.azure.com",
          https: true,
          href: $item["id"],
          query_strings: {
            "api-version": "2019-03-01"
          },
          headers:{
            "content-type": "application/json"
          },
          body: {
            "properties":{
              "hardwareProfile": {
                "vmSize": $item["next_vm_size"]
              }
            }
          }
        ) 
      call sys_log(join([$syslog_subject, "Response"]),to_s($response))
      end 
	end
  end
end


define sys_log($subject, $detail) do
  if $$debug
    rs_cm.audit_entries.create(
      notify: "None",
      audit_entry: {
        auditee_href: @@account,
        summary: $subject,
        detail: $detail
      }
	)
  end
end
name "Azure Instances Utilization from Log Analytics"
rs_pt_ver 20180301
type "policy"
short_description "Gathers instance utilization data from Azure Log Analytics and tags underutilized instances.  See the [README](https://github.com/rightscale/policy_templates/tree/master/cost/azure/instances_log_analitics_utilization) and [docs.rightscale.com/policies](http://docs.rightscale.com/policies/) to learn more."
long_description "Version: 1.1"
severity "low"
category "Cost"

###############################################################################
# Permissions
###############################################################################

permission "perm_read_creds" do
  actions   "rs_cm.show_sensitive","rs_cm.index_sensitive"
  resources "rs_cm.credentials"
end

###############################################################################
# Parameters
###############################################################################

parameter "param_azure_tenant_id" do
  type "string"
  label "Azure AD Tenant ID"
  category "Azure"
end

parameter "param_azure_sub" do
  type "string"
  label "Azure Subscription ID"
  category "Azure"
end

parameter "param_avg_used_memory" do
  type "number"
  label "Average used memory percentage"
  description "Set to -1 to ignore memory utilization"
  default 60
  min_value -1
  max_value 100
end

parameter "param_avg_cpu" do
  type "number"
  label "Average used CPU percentage"
  description "Set to -1 to ignore CPU utilization"
  default 60
  min_value -1
  max_value 100
end

parameter "param_exclusion_tag_key" do
  category "User Inputs"
  label "Exclusion Tag Key"
  description "Cloud native tag key to ignore instances. Example: exclude_utilization"
  type "string"
end

parameter "param_take_action_tag" do
  category "User Inputs"
  label "Action Tag Key:Value"
  description "Cloud native instance tag key and value that will be added to an instance identified for action. Example: downsize:true"
  type "string"
end

parameter "param_email" do
  type "list"
  label "Email addresses"
  description "Email addresses of the recipients you wish to notify"
end

###############################################################################
# Authentication
###############################################################################

auth "azure_auth", type: "oauth2" do
  token_url join(["https://login.microsoftonline.com/",$param_azure_tenant_id,"/oauth2/token"])
  grant type: "client_credentials" do
    client_id cred("AZURE_APPLICATION_ID")
    client_secret cred("AZURE_APPLICATION_KEY")
    additional_params do {
      "resource" => "https://management.azure.com/"
    } end
  end
end

auth "log_analytics_auth", type: "oauth2" do
  token_url join(["https://login.microsoftonline.com/",$param_azure_tenant_id,"/oauth2/token"])
  grant type: "client_credentials" do
    client_id cred("AZURE_APPLICATION_ID")
    client_secret cred("AZURE_APPLICATION_KEY")
    additional_params do {
      "resource" => "https://api.loganalytics.io"
    } end
  end
end

###############################################################################
# Pagination
###############################################################################

pagination "azure_pagination" do
  get_page_marker do
    body_path "nextLink"
  end
  set_page_marker do
    uri true
  end
end

###############################################################################
# Datasources
###############################################################################

datasource "ds_azure_skus" do
  request do
    auth $azure_auth
    pagination $azure_pagination
    host "management.azure.com"
    path join(["/subscriptions/", $param_azure_sub, "/providers/Microsoft.Compute/skus"])
    query "api-version","2017-09-01"
    header "User-Agent", "RS Policies"
  end
  result do
    encoding "json"
      collect jmes_path(response, "value") do
        field "resourceType", jmes_path(col_item,"resourceType")
        field "name", jmes_path(col_item,"name")
        field "locations", jmes_path(col_item,"locations")
        field "capabilities", jmes_path(col_item,"capabilities")
        field "restrictions", jmes_path(col_item,"restrictions")
      end
  end
end

datasource "ds_azure_vm_sizes" do
  run_script $js_azure_vm_sizes, $ds_azure_skus
end

datasource "ds_azure_instances" do
  request do
    auth $azure_auth
    pagination $azure_pagination
    host "management.azure.com"
    path join(["/subscriptions/", $param_azure_sub, "/providers/Microsoft.Compute/virtualMachines"])
    query "api-version","2018-10-01"
    header "User-Agent", "RS Policies"
  end
  result do
    encoding "json"
      collect jmes_path(response, "value") do
        field "id", jmes_path(col_item,"id")
      end
  end
end

datasource "ds_azure_instances_view" do
  iterate $ds_azure_instances
  request do
    auth $azure_auth
    pagination $azure_pagination
    host "management.azure.com"
    path val(iter_item, "id")
    query "api-version","2018-10-01"
    header "User-Agent", "RS Policies"
  end
  result do
    encoding "json"
        field "id", jmes_path(response,"id")
        field "name", jmes_path(response,"name")
        field "location", jmes_path(response,"location")
        field "osType", jmes_path(response,"properties.storageProfile.osDisk.osType")
        field "vmSize", jmes_path(response,"properties.hardwareProfile.vmSize")
        field "resources", jmes_path(response,"resources")
        field "tags", jmes_path(response,"tags")
        field "availabilitySet", jmes_path(response,"properties.availabilitySet.id")
  end
end

datasource "ds_oms_resources" do
  run_script $js_oms_resources, $ds_azure_instances_view, $param_exclusion_tag_key
end

datasource "ds_la_instances_utilization" do
  iterate $ds_oms_resources
  request do
    auth $log_analytics_auth
    verb "POST"
    host "api.loganalytics.io"
    path join(["/v1/workspaces/", val(iter_item,"workspaceId"), "/query"])
    query "timespan","P30D"
    header "User-Agent", "RS Policies"
    body_field "query", join(['Perf | where _ResourceId == tolower("',val(iter_item,"id"),'") | where CounterName == "% Processor Time" or CounterName == "Available MBytes Memory" or CounterName == "% Committed Bytes In Use" | summarize ["avg"] = avg(CounterValue), ["max"] = max(CounterValue), ["min"] = min(CounterValue) by _ResourceId,CounterName'])
  end
  result do
    encoding "json"
      collect jmes_path(response, "tables") do
        field "resourceid", jmes_path(col_item, "rows[0][0]")
        field "results" do
          collect jmes_path(col_item, "rows") do
            field "counter", jmes_path(col_item, "[1]")
            field "avg", jmes_path(col_item, "[2]")
            field "max", jmes_path(col_item, "[3]")
            field "min", jmes_path(col_item, "[4]")
          end
        end
      end
  end
end

datasource "ds_merged_metrics" do
  run_script $js_merged_metrics, $ds_oms_resources, $ds_la_instances_utilization, $ds_azure_vm_sizes, $param_exclusion_tag_key
end

###############################################################################
# Scripts
###############################################################################

script "js_azure_vm_sizes", type: "javascript" do
  parameters "ds_azure_skus"
  result "result"
  code <<-EOS
    var result = [];
    _.each(ds_azure_skus, function(sku){
      
      if (sku.resourceType === "virtualMachines") {
        var skipVmSku = false;
        _.each(sku.restrictions, function(restriction){
          if (restriction.type === "Location" && restriction.reasonCode === "NotAvailableForSubscription") {
            skipVmSku = true
          }
        })
        
        if (skipVmSku) {
          // VM Sku not available in this location for this subscription
        } else {
          var capabilities = [];
          _.each(sku.capabilities, function(capability){
            capabilities[capability.name] = capability.value
          })

          result.push({
            name: sku.name,
            resourceType: sku.resourceType,
            locations: sku.locations,
            MaxResourceVolumeMB: capabilities.MaxResourceVolumeMB,
            OSVhdSizeMB: capabilities.OSVhdSizeMB,
            vCPUs: capabilities.vCPUs,
            HyperVGenerations: capabilities.HyperVGenerations,
            MemoryGB: capabilities.MemoryGB,
            MaxDataDiskCount: capabilities.MaxDataDiskCount,
            LowPriorityCapable: capabilities.LowPriorityCapable,
            PremiumIO: capabilities.PremiumIO,
            vCPUsAvailable: capabilities.vCPUsAvailable,
            ACUs: capabilities.ACUs,
            vCPUsPerCore: capabilities.vCPUsPerCore,
            CombinedTempDiskAndCachedIOPS: capabilities.CombinedTempDiskAndCachedIOPS,
            CombinedTempDiskAndCachedReadBytesPerSecond: capabilities.CombinedTempDiskAndCachedReadBytesPerSecond,
            CombinedTempDiskAndCachedWriteBytesPerSecond: capabilities.CombinedTempDiskAndCachedWriteBytesPerSecond,
            CachedDiskBytes: capabilities.CachedDiskBytes,
            UncachedDiskIOPS: capabilities.UncachedDiskIOPS,
            UncachedDiskBytesPerSecond: capabilities.UncachedDiskBytesPerSecond,
            EphemeralOSDiskSupported: capabilities.EphemeralOSDiskSupported
          })
        }
      }
    })
  EOS
end

script "js_oms_resources", type: "javascript" do
  parameters "azure_instances","exclusion_tag"
  result "result"
  code <<-EOS
    var result = [];
    _.each(azure_instances, function(instance){
      if (_.has(instance.tags, exclusion_tag)) {
        // Instance has exclusion tag, skip
      } else {
        var resourceGroup = instance.id.split('/')[4]
        var log_agent = false;
        var workspace_id = "N/A";
        var diag_agent = false;
        var storage_account = "N/A";
        _.each(instance.resources, function(resource){
          if (resource.name === "MicrosoftMonitoringAgent" || resource.name === "OmsAgentForLinux") {
            log_agent = true
            workspace_id = resource.properties.settings.workspaceId
          } else if (resource.name === "Microsoft.Insights.VMDiagnosticsSettings" || resource.name === "LinuxDiagnostic") {
            diag_agent = true
            storage_account = resource.properties.settings.StorageAccount
          }
        })
        if (instance["availabilitySet"]) {
          var availabilitySet = true
        } else {
          var availabilitySet = false
        }
        if (log_agent === true) {
          result.push({
            id: instance["id"],
            name: instance["name"],
            resourceGroup: resourceGroup,
            location: instance["location"],
            vmSize: instance["vmSize"],
            osType: instance["osType"],
            logAgent: log_agent,
            workspaceId: workspace_id,
            diagAgent: diag_agent,
            storageAccount: storage_account,
            tags: instance["tags"],
            availabilitySet: availabilitySet
          })
        }
      }
    })
  EOS
end

script "js_merged_metrics", type: "javascript" do
  parameters "ds_oms_resources","ds_la_instances_utilization","ds_azure_vm_sizes","exclusion_tag"
  result "result"
  code <<-EOS
    var result = [];

    _.each(ds_oms_resources, function(instance){
      var cpu_maximum = "N/A";
      var cpu_average = "N/A";
      var mem_maximum = "N/A";
      var mem_average = "N/A";

      var metrics = (_.where(ds_la_instances_utilization, {"resourceid": instance["id"].toLowerCase()}));

      if (metrics[0]) {
        _.each(metrics[0]["results"], function(metric){
          var counterName = metric.counter.replace("!"," ").replace("(MISSING)")
          if (counterName === "% Processor Time") {
            cpu_maximum = parseFloat(metric.max).toFixed(2)
            cpu_average = parseFloat(metric.avg).toFixed(2)
          } else if (counterName === "Available MBytes Memory") {
            // Linux counter is available/free, not used
            var instanceDetails = _.where(ds_azure_vm_sizes, {"name": instance["vmSize"]})
            var totalMem = instanceDetails[0].MemoryGB * 1024
            mem_maximum = parseFloat(((totalMem - metric.min) / totalMem) * 100).toFixed(2)
            mem_average = parseFloat(((totalMem - metric.avg) / totalMem) * 100).toFixed(2)
          } else if (counterName === "% Committed Bytes In Use") {
            mem_maximum = parseFloat(metric.max).toFixed(2)
            mem_average = parseFloat(metric.avg).toFixed(2)
          }
        })

        result.push({
          id: instance["id"],
          name: instance["name"],
          resourceGroup: instance["resourceGroup"],
          location: instance["location"],
          vmSize: instance["vmSize"],
          osType: instance["osType"],
          logAgent: instance["logAgent"],
          workspaceId: instance["workspaceId"],
          diagAgent: instance["diagAgent"],
          storageAccount: instance["storageAccount"],
          tags: instance["tags"],
          availabilitySet: instance["availabilitySet"]
          cpu_maximum: cpu_maximum,
          cpu_average: cpu_average,
          mem_maximum: mem_maximum,
          mem_average: mem_average
        })
      }
    })
  EOS
end

###############################################################################
# Policy
###############################################################################

policy 'policy_azure_utilization' do
  validate_each $ds_merged_metrics do
    summary_template "{{ rs_project_name }} (Account ID: {{ rs_project_id }}): {{ len data }} Underutilized Instances Reporting to Azure Log Analytics"
    detail_template <<-EOS
# Azure Instance Utilization from Log Analytics

### Thresholds for Consideration 
  - Average Memory Used %: {{ parameters.param_avg_used_memory }}
  - Average CPU Used %: {{ parameters.param_avg_cpu }}

| Region | Hostname | Resource Group | Instance Size | OS Type | Availability Set | OMS Workspace Id | CPU Maximum % | CPU Average % | Memory Maximum % | Memory Average % |
| ------ | -------- | -------------- | ------------- | ------- | ---------------- | ---------------- | ------------- | ------------- | ---------------- | ---------------- |
{{ range data -}}
| {{.location}} | {{.name}} | {{.resourceGroup}} | {{.vmSize}} | {{.osType}} | {{.availabilitySet}} | {{.workspaceId}} | {{ .cpu_maximum }} | {{ .cpu_average }} | {{.mem_maximum}} | {{.mem_average}} |
{{ end -}}

___
###### Policy Applied in Account: {{ rs_project_name }} (Account ID: {{ rs_project_id }}) within Org: {{ rs_org_name }} (Org ID: {{ rs_org_id }})
EOS
    escalate $email
    escalate $tag_resources
    check logic_or(eq($param_avg_used_memory, -1), gt(to_n(val(item,"mem_average")), $param_avg_used_memory))
    check logic_or(eq($param_avg_cpu, -1), gt(to_n(val(item,"cpu_average")),$param_avg_cpu))
  end
end

###############################################################################
# Escalations
###############################################################################

escalation "email" do
  email $param_email
end

escalation "tag_resources" do
  request_approval  do
    label "Approve to tag the Resources"
    description "Tag the input key and value on Resources"
    parameter "approval_reason" do
      type "string"
      label "Reason for approval"
      description "Explain why you are approving the action"
    end
  end
  run "tag_resources", data, $param_azure_tenant_id, $param_azure_sub, $param_take_action_tag
end

###############################################################################
# Cloud Workflow
###############################################################################

define tag_resources($data, $param_azure_tenant_id, $param_azure_sub, $param_take_action_tag) return $all_responses do
  $$debug=false
  $$log = []
  $all_responses = []

  $syslog_subject = "Azure Instance Utilization with Log Analytics Policy: "
  call sys_log(join([$syslog_subject, "Identified Instances"]),to_s($data))

  call get_access_token($param_azure_tenant_id) retrieve $access_token

  $providers_response = http_request(
    verb: "get",
    host: "management.azure.com",
    https: true,
    href: "/subscriptions/"+$param_azure_sub+"/providers",
    query_strings: {
      "api-version": "2018-05-01"
    },
    headers: {
      "cache-control": "no-cache",
      "content-type": "application/json",
      "authorization": "Bearer " + $access_token
    }
  )

  $providers_array = $providers_response["body"]["value"]
  call sys_log(join([$syslog_subject, "Resource Providers"]),to_s($providers_array))

  $namespace = "Microsoft.Compute" # Hardcoded because it is always the same
  $$log << "Namespace: " + $namespace
  $resource_type = "virtualMachines" # Hardcoded because it is always the same
  $$log << "Resource Type: " + $resource_type

  $namespace_obj = select($providers_array, {"namespace": $namespace})
  if $namespace_obj == []
    $namespace_obj = select($providers_array, {"namespace": downcase($namespace)})
  end 
  $resource_type_obj = select($namespace_obj[0]["resourceTypes"], {"resourceType": $resource_type})
  $api_versions = $resource_type_obj[0]["apiVersions"]
  $api_version = first($api_versions)
  $$log << "API Version: "+ $api_version

  call sys_log(join([$syslog_subject, "API Details"]),to_s($$log))

  foreach $item in $data do
    $$log << "ID: "+$item["id"]
    
    $new_tags = {}
    if $item["tags"] == null
      #skip
    else
      $new_tags = $item["tags"]
    end
    
    $new_tags[first(split($param_take_action_tag,":"))] = last(split($param_take_action_tag,":"))
    
    sub on_error: handle_error($update_resource_response) do 
      $update_resource_response = http_request(
        verb: "patch",
        host: "management.azure.com",
        https: true,
        href: $item["id"],
        query_strings: {
          "api-version": $api_version
        },
        headers: {
          "cache-control": "no-cache",
          "content-type": "application/json",
          "authorization": "Bearer " + $access_token
        },
        body: {"tags": $new_tags}
      )
    end 
    $all_responses << $update_resource_response
  end
  call sys_log(join([$syslog_subject, "All Responses"]),to_s($all_responses))
end

define handle_error($response) do 
  $status_code = $response["code"]
  if $status_code == 404
    $_error_behavior = "skip"
  else 
    $_error_behavior = "raise"
  end 
end 

define get_access_token($param_azure_tenant_id) return $access_token do

  $client_id = cred("AZURE_APPLICATION_ID")
  call url_encode(cred("AZURE_APPLICATION_KEY")) retrieve $client_secret

  $body_string = "grant_type=client_credentials&resource=https://management.core.windows.net/&client_id="+$client_id+"&client_secret="+$client_secret

  $auth_response = http_post(
    url: join(["https://login.microsoftonline.com/",$param_azure_tenant_id,"/oauth2/token"]),
    headers: {
      "cache-control": "no-cache",
      "content-type": "application/x-www-form-urlencoded"
    },
    body:$body_string
  )

  $auth_response_body = $auth_response["body"]
  $access_token = $auth_response_body["access_token"]

end

define sys_log($subject, $detail) do
  if $$debug
    rs_cm.audit_entries.create(
      notify: "None",
      audit_entry: {
        auditee_href: @@account,
        summary: $subject,
        detail: $detail
      }
    )
  end
end

define url_encode($string) return $encoded_string do
  $encoded_string = $string
  $encoded_string = gsub($encoded_string, " ", "%20")
  $encoded_string = gsub($encoded_string, "!", "%21")
  $encoded_string = gsub($encoded_string, "#", "%23")
  $encoded_string = gsub($encoded_string, "$", "%24")
  $encoded_string = gsub($encoded_string, "&", "%26")
  $encoded_string = gsub($encoded_string, "'", "%27")
  $encoded_string = gsub($encoded_string, "(", "%28")
  $encoded_string = gsub($encoded_string, ")", "%29")
  $encoded_string = gsub($encoded_string, "*", "%2A")
  $encoded_string = gsub($encoded_string, "+", "%2B")
  $encoded_string = gsub($encoded_string, ",", "%2C")
  $encoded_string = gsub($encoded_string, "/", "%2F")
  $encoded_string = gsub($encoded_string, ":", "%3A")
  $encoded_string = gsub($encoded_string, ";", "%3B")
  $encoded_string = gsub($encoded_string, "=", "%3D")
  $encoded_string = gsub($encoded_string, "?", "%3F")
  $encoded_string = gsub($encoded_string, "@", "%40")
  $encoded_string = gsub($encoded_string, "[", "%5B")
  $encoded_string = gsub($encoded_string, "]", "%5D")
end
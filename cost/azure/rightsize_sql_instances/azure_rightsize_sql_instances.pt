name "Azure Rightsize SQL Databases"
rs_pt_ver 20180301
type "policy"
short_description "Check for Inefficient Azure SQL single database services that are inside or outside the CPU threshold for the last 30 days and resizes them after approval. See the [README](https://github.com/flexera-public/policy_templates/tree/master/cost/azure/rightsize_sql_instances/) and [docs.flexera.com/flexera/EN/Automation](https://docs.flexera.com/flexera/EN/Automation/AutomationGS.htm) to learn more."
long_description ""
severity "low"
category "Cost"
default_frequency "daily"
info(
  version: "4.0",
  provider: "Azure",
  service: "SQL",
  policy_set: "RightSize Database Services"
)

###############################################################################
# Parameters
###############################################################################

parameter "param_email" do
  type "list"
  category "Policy Settings"
  label "Email Addresses"
  description "A list of email addresses to notify."
  default []
end

parameter "param_azure_endpoint" do
  type "string"
  category "Policy Settings"
  label "Azure Endpoint"
  description "Select the API endpoint to use for Azure. Use default value of management.azure.com unless using Azure China."
  allowed_values "management.azure.com", "management.chinacloudapi.cn"
  default "management.azure.com"
end

parameter "param_min_savings" do
  type "number"
  category "Policy Settings"
  label "Minimum Savings Threshold"
  description "Minimum potential savings required to generate a recommendation"
  min_value 0
  default 0
end

parameter "param_subscriptions_allow_or_deny" do
  type "string"
  category "Filters"
  label "Allow/Deny Subscriptions"
  description "Allow or Deny entered Subscriptions. See the README for more details."
  allowed_values "Allow", "Deny"
  default "Allow"
end

parameter "param_subscriptions_list" do
  type "list"
  category "Filters"
  label "Allow/Deny Subscriptions List"
  description "A list of allowed or denied Subscription IDs/names. See the README for more details."
  default []
end

parameter "param_regions_allow_or_deny" do
  type "string"
  category "Filters"
  label "Allow/Deny Regions"
  description "Allow or Deny entered regions. See the README for more details."
  allowed_values "Allow", "Deny"
  default "Allow"
end

parameter "param_regions_list" do
  type "list"
  category "Filters"
  label "Allow/Deny Regions List"
  description "A list of allowed or denied regions. See the README for more details."
  default []
end

parameter "param_exclusion_tags" do
  type "list"
  category "Filters"
  label "Exclusion Tags (Key:Value)"
  description "Cloud native tags to ignore resources that you don't want to produce recommendations for. Use Key:Value format for specific tag key/value pairs, and Key:* format to match any resource with a particular key, regardless of value. Examples: env:production, DO_NOT_DELETE:*"
  allowed_pattern /(^$)|[\w]*\:.*/
  default []
end

parameter "param_stats_underutil_threshold_cpu_value" do
  type "number"
  category "Statistics"
  label "Underutilized Instance CPU Threshold (%)"
  description "The CPU threshold at which to consider an instance to be 'underutilized' and therefore be flagged for downsizing. Set to -1 to ignore CPU utilization and only report unused instances"
  min_value -1
  max_value 100
  default 60
end

parameter "param_stats_lookback" do
  type "number"
  category "Statistics"
  label "Statistic Lookback Period"
  description "How many days back to look at instance metrics to determine if an instance is underutilized or unused. This value cannot be set higher than 90 because Azure does not retain metrics for longer than 90 days."
  default 30
  min_value 1
  max_value 90
end

parameter "param_automatic_action" do
  type "list"
  label "Automatic Actions"
  description "When this value is set, this policy will automatically take the selected action(s)"
  allowed_values ["Resize Instances"]
end

###############################################################################
# Authentication
###############################################################################

credentials "auth_azure" do
  schemes "oauth2"
  label "Azure"
  description "Select the Azure Resource Manager Credential from the list."
  tags "provider=azure_rm"
end

credentials "auth_flexera" do
  schemes "oauth2"
  label "Flexera"
  description "Select Flexera One OAuth2 credentials"
  tags "provider=flexera"
end

###############################################################################
# Pagination
###############################################################################

pagination "pagination_azure" do
  get_page_marker do
    body_path "nextLink"
  end
  set_page_marker do
    uri true
  end
end

###############################################################################
# Datasources & Scripts
###############################################################################

# Get applied policy metadata for use later
datasource "ds_applied_policy" do
  request do
    auth $auth_flexera
    host rs_governance_host
    path join(["/api/governance/projects/", rs_project_id, "/applied_policies/", policy_id])
    header "Api-Version", "1.0"
  end
end

datasource "ds_billing_centers" do
  request do
    auth $auth_flexera
    host rs_optima_host
    path join(["/analytics/orgs/", rs_org_id, "/billing_centers"])
    header "Api-Version", "1.0"
    header "User-Agent", "RS Policies"
    query "view", "allocation_table"
    ignore_status [403]
  end
  result do
    encoding "json"
    collect jmes_path(response, "[*]") do
      field "href", jmes_path(col_item, "href")
      field "id", jmes_path(col_item, "id")
      field "name", jmes_path(col_item, "name")
      field "parent_id", jmes_path(col_item, "parent_id")
    end
  end
end

# Gather top level billing center IDs for when we pull cost data
datasource "ds_top_level_bcs" do
  run_script $js_top_level_bcs, $ds_billing_centers
end

script "js_top_level_bcs", type: "javascript" do
  parameters "ds_billing_centers"
  result "result"
  code <<-EOS
  filtered_bcs = _.filter(ds_billing_centers, function(bc) {
    return bc['parent_id'] == null || bc['parent_id'] == undefined
  })

  result = _.compact(_.pluck(filtered_bcs, 'id'))
EOS
end

datasource "ds_currency_reference" do
  request do
    host "raw.githubusercontent.com"
    path "/rightscale/policy_templates/master/cost/scheduled_reports/currency_reference.json"
    header "User-Agent", "RS Policies"
  end
end

datasource "ds_currency_code" do
  request do
    auth $auth_flexera
    host rs_optima_host
    path join(["/bill-analysis/orgs/", rs_org_id, "/settings/currency_code"])
    header "Api-Version", "0.1"
    header "User-Agent", "RS Policies"
    ignore_status [403]
  end
  result do
    encoding "json"
    field "id", jmes_path(response, "id")
    field "value", jmes_path(response, "value")
  end
end

datasource "ds_currency" do
  run_script $js_currency, $ds_currency_reference, $ds_currency_code
end

script "js_currency", type:"javascript" do
  parameters "ds_currency_reference", "ds_currency_code"
  result "result"
  code <<-EOS
  symbol = "$"
  separator = ","

  if (ds_currency_code['value'] != undefined) {
    if (ds_currency_reference[ds_currency_code['value']] != undefined) {
      symbol = ds_currency_reference[ds_currency_code['value']]['symbol']

      if (ds_currency_reference[ds_currency_code['value']]['t_separator'] != undefined) {
        separator = ds_currency_reference[ds_currency_code['value']]['t_separator']
      } else {
        separator = ""
      }
    }
  }

  result = {
    symbol: symbol,
    separator: separator
  }
EOS
end

datasource "ds_azure_subscriptions" do
  request do
    auth $auth_azure
    pagination $pagination_azure
    host $param_azure_endpoint
    path "/subscriptions/"
    query "api-version","2020-01-01"
    header "User-Agent", "RS Policies"
    # Header X-Meta-Flexera has no affect on datasource query, but is required for Meta Policies
    # Forces `ds_is_deleted` datasource to run first during policy execution
    header "Meta-Flexera", val($ds_is_deleted, "path")
  end
  result do
    encoding "json"
    collect jmes_path(response, "value[*]") do
      field "id", jmes_path(col_item, "subscriptionId")
      field "name", jmes_path(col_item, "displayName")
      field "state", jmes_path(col_item, "state")
    end
  end
end

datasource "ds_azure_subscriptions_filtered" do
  run_script $js_azure_subscriptions_filtered, $ds_azure_subscriptions, $param_subscriptions_allow_or_deny, $param_subscriptions_list
end

script "js_azure_subscriptions_filtered", type: "javascript" do
  parameters "ds_azure_subscriptions", "param_subscriptions_allow_or_deny", "param_subscriptions_list"
  result "result"
  code <<-EOS
  if (param_subscriptions_list.length > 0) {
    result = _.filter(ds_azure_subscriptions, function(subscription) {
      include_subscription = _.contains(param_subscriptions_list, subscription['id']) || _.contains(param_subscriptions_list, subscription['name'])

      if (param_subscriptions_allow_or_deny == "Deny") {
        include_subscription = !include_subscription
      }

      return include_subscription
    })
  } else {
    result = ds_azure_subscriptions
  }
EOS
end

datasource "ds_azure_sql_databases" do
  iterate $ds_azure_subscriptions_filtered
  request do
    auth $auth_azure
    pagination $pagination_azure
    host $param_azure_endpoint
    path join(["/subscriptions/", val(iter_item, "id"), "/resources"])
    query "api-version", "2019-08-01"
    query "$filter", "resourceType eq 'Microsoft.Sql/servers/databases'"
    header "User-Agent", "RS Policies"
    # Ignore status 400, 403, and 404 which can be returned in certain (legacy) types of Azure Subscriptions
    ignore_status [400,403,404]
  end
  result do
    encoding "json"
    collect jmes_path(response, "value") do
      field "id", jmes_path(col_item, "id")
      field "name", jmes_path(col_item, "name")
      field "region", jmes_path(col_item, "location")
      field "type", jmes_path(col_item, "type")
      field "kind", jmes_path(col_item, "kind")
      field "sku" , jmes_path(col_item, "sku")
      field "tags", jmes_path(col_item, "tags")
      field "resourceGroup", get(4, split(jmes_path(col_item,"id"), "/"))
      field "subscriptionId",val(iter_item, "id")
      field "subscriptionName",val(iter_item, "name")
    end
  end
end

datasource "ds_azure_sql_databases_tag_filtered" do
  run_script $js_azure_sql_databases_tag_filtered, $ds_azure_sql_databases, $param_exclusion_tags
end

script "js_azure_sql_databases_tag_filtered", type: "javascript" do
  parameters "ds_azure_sql_databases", "param_exclusion_tags"
  result "result"
  code <<-EOS
  if (param_exclusion_tags.length > 0) {
    result = _.reject(ds_azure_sql_databases, function(db) {
      db_tags = []

      if (typeof(db['tags']) == 'object') {
        _.each(Object.keys(db['tags']), function(key) {
          db_tags.push([key, ":", db['tags'][key]].join(''))
          db_tags.push([key, ":*"].join(''))
        })
      }

      exclude_db = false

      _.each(param_exclusion_tags, function(exclusion_tag) {
        if (_.contains(db_tags, exclusion_tag)) {
          exclude_db = true
        }
      })

      return exclude_db
    })
  } else {
    result = ds_azure_sql_databases
  }
EOS
end

datasource "ds_azure_sql_databases_region_filtered" do
  run_script $js_azure_sql_databases_region_filtered, $ds_azure_sql_databases_tag_filtered, $param_regions_allow_or_deny, $param_regions_list
end

script "js_azure_sql_databases_region_filtered", type: "javascript" do
  parameters "ds_azure_sql_databases_tag_filtered", "param_regions_allow_or_deny", "param_regions_list"
  result "result"
  code <<-EOS
  if (param_regions_list.length > 0) {
    result = _.filter(ds_azure_sql_databases_tag_filtered, function(ip) {
      include_db = _.contains(param_regions_list, db['region'])

      if (param_regions_allow_or_deny == "Deny") {
        include_db = !include_db
      }

      return include_db
    })
  } else {
    result = ds_azure_sql_databases_tag_filtered
  }
EOS
end

datasource "ds_azure_sql_database_metrics" do
  iterate $ds_azure_sql_databases_region_filtered
  request do
    run_script $js_azure_sql_database_metrics, val(iter_item,"id"), $param_azure_endpoint, $param_stats_lookback
  end
  result do
    encoding "json"
    field "value", jmes_path(response, "value")
    field "id", val(iter_item, "id")
    field "region", val(iter_item, "region")
    field "name", val(iter_item, "name")
    field "kind", val(iter_item, "kind")
    field "type", val(iter_item, "type")
    field "sku" , val(iter_item, "sku")
    field "tags", val(iter_item, "tags")
    field "resourceGroup", val(iter_item, "resourceGroup")
    field "subscriptionId", val(iter_item, "subscriptionId")
    field "subscriptionName", val(iter_item, "subscriptionName")
  end
end

script "js_azure_sql_database_metrics", type: "javascript" do
  parameters "resource_id", "param_azure_endpoint", "param_stats_lookback"
  result "request"
  code <<-EOS
  end_date = new Date()
  end_date.setMilliseconds(999)
  end_date.setSeconds(59)
  end_date.setMinutes(59)
  end_date.setHours(23)

  start_date = new Date()
  start_date.setDate(start_date.getDate() - param_stats_lookback)
  start_date.setMilliseconds(0)
  start_date.setSeconds(0)
  start_date.setMinutes(0)

  timespan = start_date.toISOString() + "/" + end_date.toISOString()

  var request = {
    auth: "auth_azure",
    pagination: "pagination_azure",
    host: param_azure_endpoint,
    verb: "GET",
    path: resource_id + "/providers/microsoft.insights/metrics",
    query_params: {
      "api-version": "2018-01-01",
      "timespan": timespan,
      "metricnames": "cpu_percent,connection_successful",
      "aggregation": "Average,count",
      "interval":  "P1D"
    },
    headers: {
      "User-Agent": "RS Policies"
    },
    // Ignore status 400, 403, and 404 which can be returned in certain (legacy) types of Azure Subscriptions
    ignore_status: [400, 403, 404]
  }
EOS
end

datasource "ds_azure_sql_resize_map" do
  request do
    verb "GET"
    host "raw.githubusercontent.com"
    path "/flexera/policy_templates/master/data/azure/sql_service_tier_types.json"
    header "User-Agent", "RS Policies"
  end
end

datasource "ds_merged_metrics" do
  run_script $js_merged_metrics, $ds_azure_sql_database_metrics, $ds_azure_sql_resize_map, $param_stats_underutil_threshold_cpu_value, $param_stats_lookback
end

script "js_merged_metrics", type: "javascript" do
  parameters "ds_azure_sql_database_metrics", "ds_azure_sql_resize_map", "param_stats_underutil_threshold_cpu_value", "param_stats_lookback"
  result "result"
  code <<-EOS
  result = []

  _.each(ds_azure_sql_database_metrics, function(db) {
    instance = {
      id: db['id'],
      region: db['region'],
      name: db['name'],
      kind: db['kind'],
      type: db['type'],
      sku: db['sku'],
      tags: db['tags'],
      resourceGroup: db['resourceGroup'],
      subscriptionId: db['subscriptionId'],
      subscriptionName: db['subscriptionName'],
      lookbackPeriod: param_stats_lookback,
      threshold: param_stats_underutil_threshold_cpu_value
    }

    connection_metrics = null
    cpu_metrics = null

    _.each(db['value'], function(metric) {
      if (metric['name']['value'] == 'connection_successful') {
        connection_metrics = metric['timeseries'][0]['data']
      }

      if (metric['name']['value'] == 'cpu_percent') {
        cpu_metrics = metric['timeseries'][0]['data']
      }
    })

    if (connection_metrics != null) {
      if (connection_metrics.length == 0) {
        instance['recommendationType'] = 'Delete'
        instance['newResourceType'] = 'Delete'

        recommendationDetails = [
          "Delete Azure SQL database ", instance["name"], " ",
          "in Azure Subscription ", instance["subscriptionName"], " ",
          "(", instance["subscriptionId"], ")"
        ]

        instance["recommendationDetails"] = recommendationDetails.join('')
      }
    }

    if (cpu_metrics != null && instance['recommendationType'] != 'Delete' && param_stats_underutil_threshold_cpu_value != -1) {
      if (cpu_metrics.length > 0) {
        averages = _.pluck(cpu_metrics, 'average')
        cpu_average = null

        if (averages.length > 0) {
          cpu_average = _.reduce(averages, function(memo, num) { return memo + num }, 0) / averages.length
        }

        if (cpu_average != null && cpu_average <= param_stats_underutil_threshold_cpu_value) {
          instance['cpu_average'] = cpu_average
          instance['recommendationType'] = 'Downsize'

          tier = instance['sku']['tier']
          type = instance['sku']['name'] + '_' + instance['sku']['capacity']

          if (ds_azure_sql_resize_map[tier] != undefined) {
            if (ds_azure_sql_resize_map[tier][type] != undefined) {
              if (typeof(ds_azure_sql_resize_map[tier][type]['down']) == 'string') {
                instance['newResourceType'] = ds_azure_sql_resize_map[tier][type]['down']

                recommendationDetails = [
                  "Downsize Azure SQL database ", instance["name"], " ",
                  "in Azure Subscription ", instance["subscriptionName"], " ",
                  "(", instance["subscriptionId"], ") ",
                  "from ", instance['sku']['capacity'], " capacity ",
                  "to ", instance["newResourceType"], " capacity"
                ]

                instance["recommendationDetails"] = recommendationDetails.join('')
              }
            }
          }
        }
      }
    }

    if (instance["recommendationDetails"] != undefined) {
      result.push(instance)
    }
  })
EOS
end

datasource "ds_cost_subscriptions" do
  run_script $js_cost_subscriptions, $ds_merged_metrics
end

script "js_cost_subscriptions", type: "javascript" do
  parameters "ds_merged_metrics"
  result "result"
  code <<-EOS
  result = _.compact(_.uniq(_.pluck(ds_merged_metrics, 'subscriptionId')))
EOS
end

datasource "ds_sql_costs" do
  iterate $ds_cost_subscriptions
  request do
    run_script $js_sql_costs, iter_item, $ds_top_level_bcs, rs_org_id, rs_optima_host
  end
  result do
    encoding "json"
    collect jmes_path(response, "rows[*]") do
      field "resourceId", jmes_path(col_item, "dimensions.resource_id")
      field "cost", jmes_path(col_item, "metrics.cost_amortized_unblended_adj")
    end
  end
end

script "js_sql_costs", type:"javascript" do
  parameters "subscriptionId", "ds_top_level_bcs", "rs_org_id", "rs_optima_host"
  result "request"
  code <<-EOS
  start_date = new Date()
  start_date.setDate(start_date.getDate() - 3)
  start_date = start_date.toISOString().split('T')[0]

  end_date = new Date()
  end_date.setDate(end_date.getDate() - 2)
  end_date = end_date.toISOString().split('T')[0]

  var request = {
    auth: "auth_flexera",
    host: rs_optima_host,
    verb: "POST",
    path: "/bill-analysis/orgs/" + rs_org_id + "/costs/select",
    body_fields: {
      "dimensions": ["resource_id"],
      "granularity": "day",
      "start_at": start_date,
      "end_at": end_date,
      "metrics": ["cost_amortized_unblended_adj"],
      "billing_center_ids": ds_top_level_bcs,
      "limit": 100000,
      "filter": {
        "type": "and",
        "expressions": [
          {
            "type": "or",
            "expressions": [
              {
                "dimension": "service",
                "type": "equal",
                "value": "Microsoft.Sql"
              },
              {
                "dimension": "service",
                "type": "equal",
                "value": "microsoft.sql"
              }
            ]
          },
          {
            "dimension": "vendor_account",
            "type": "equal",
            "value": subscriptionId
          },
          {
            "type": "not",
            "expression": {
              "dimension": "adjustment_name",
              "type": "substring",
              "substring": "Shared"
            }
          }
        ]
      }
    },
    headers: {
      "User-Agent": "RS Policies",
      "Api-Version": "1.0"
    },
    ignore_status: [400]
  }
EOS
end

datasource "ds_sql_costs_grouped" do
  run_script $js_sql_costs_grouped, $ds_sql_costs
end

script "js_sql_costs_grouped", type: "javascript" do
  parameters "ds_sql_costs"
  result "result"
  code <<-EOS
  // Multiple a single day's cost by the average number of days in a month.
  // The 0.25 is to account for leap years for extra precision.
  cost_multiplier = 365.25 / 12

  // Group cost data by resourceId for later use
  result = {}

  _.each(ds_sql_costs, function(item) {
    id = item['resourceId'].toLowerCase()

    if (result[id] == undefined) { result[id] = 0.0 }
    result[id] += item['cost'] * cost_multiplier
  })
EOS
end

datasource "ds_unused_sql_incident" do
  run_script $js_unused_sql_incident, $ds_merged_metrics, $ds_sql_costs_grouped, $ds_currency, $param_min_savings
end

script "js_unused_sql_incident", type: "javascript" do
  parameters "ds_merged_metrics", "ds_sql_costs_grouped", "ds_currency", "param_min_savings"
  result "result"
  code <<-'EOS'
  result = []

  unused_instances = _.filter(ds_merged_metrics, function(item) {
    return item['recommendationType'] == 'Delete'
  })

  _.each(unused_instances, function(db) {
    savings = ds_sql_costs_grouped[db['id'].toLowerCase()]

    if (savings != null && savings != undefined) {
      savings = parseFloat(savings.toFixed(3))
    }

    if (savings >= param_min_savings || param_min_savings == 0) {
      result.push({
        id: db['id'],
        region: db['region'],
        resourceName: db['name'],
        kind: db['kind'],
        type: db['type'],
        sku: db['sku'],
        tags: db['tags'],
        resourceGroup: db['resourceGroup'],
        accountID: db['subscriptionId'],
        accountName: db['subscriptionName'],
        recommendationType: db['recommendationType'],
        recommendationDetails: db['recommendationDetails'],
        lookbackPeriod: db['lookbackPeriod'],
        savings: savings,
        savingsCurrency: ds_currency['symbol']
      })
    }
  })
EOS
end

datasource "ds_rightsize_sql_incident" do
  run_script $js_rightsize_sql_incident, $ds_merged_metrics, $ds_sql_costs_grouped, $ds_currency, $param_min_savings
end

script "js_rightsize_sql_incident", type: "javascript" do
  parameters "ds_merged_metrics", "ds_sql_costs_grouped", "ds_currency", "param_min_savings"
  result "result"
  code <<-'EOS'
  result = []

  unused_instances = _.filter(ds_merged_metrics, function(item) {
    return item['recommendationType'] == 'Downsize'
  })

  _.each(unused_instances, function(db) {
    savings = ds_sql_costs_grouped[db['id'].toLowerCase()]

    if (savings != null && savings != undefined) {
      savings = parseFloat(savings.toFixed(3))
    }

    if (savings >= param_min_savings || param_min_savings == 0) {
      result.push({
        id: db['id'],
        region: db['region'],
        resourceName: db['name'],
        kind: db['kind'],
        type: db['type'],
        sku: db['sku'],
        tags: db['tags'],
        resourceGroup: db['resourceGroup'],
        accountID: db['subscriptionId'],
        accountName: db['subscriptionName'],
        recommendationType: db['recommendationType'],
        recommendationDetails: db['recommendationDetails'],
        newResourceType: db['newResourceType'],
        cpuAverage: db['cpu_average'],
        lookbackPeriod: db['lookbackPeriod'],
        savings: savings,
        savingsCurrency: ds_currency['symbol']
      })
    }
  })
EOS
end

###############################################################################
# Policy
###############################################################################

policy "pol_azure_unused_sql" do
  validate_each $ds_unused_sql_incident do
    summary_template "{{ rs_project_name }} (Account ID: {{ rs_project_id }}): Found {{ len data }} Azure Rightsize SQL single Database"
    detail_template <<-EOS
      ### Thresholds for Consideration
      - Upsize Average CPU% threshold   : {{ parameters.param_stats_cpu_avg_upsize }}
      - Downsize Average CPU% threshold : {{ parameters.param_stats_underutil_threshold_cpu_value }}
    EOS
    escalate $email_report
    escalate $esc_update_rightsize_sql_databases_approval
    # Policy check fails and incident is created only if data is not empty and the Parent Policy has not been terminated
    check logic_or($ds_parent_policy_terminated, eq(size(data),0))
    export do
      resource_level true
      field "accountID" do
        label "Subscription ID"
        path "subscriptionId"
      end
      field "accountName" do
        label "Subscription Name"
        path "subscriptionName"
      end
      field "region" do
        label "Location"
        path "location"
      end
      field "resourceName" do
        label "Name"
        path "name"
      end
      field "resourceGroup" do
        label "Resource Group"
        path "resource_group"
      end
      field "kind" do
        label "Kind"
      end
      field "type" do
        label "Type"
      end
      field "skuCapacity" do
        label "Current Capacity"
        path "sku.capacity"
      end
      field "newResourceType" do
        label "Recommended Resource Type"
        path "recommended_capacity"
      end
      field "skuName" do
        label "SKU - Name"
        path "sku.name"
      end
      field "skuTier" do
        label "SKU - Tier"
        path "sku.tier"
      end
      field "cpuAverage" do
        label "CPU Average %"
        path "average_cpu"
      end
      field "recommendation" do
        label "Recommendation"
      end
      field "id" do
        label "Id"
      end
      field "resourceType" do
        label "Resource Type"
      end
      field "lookbackPeriod" do
        label "Lookback Period"
      end
      field "threshold" do
        label "Threshold"
      end
    end
  end
end

###############################################################################
# Escalations
###############################################################################

escalation "email_report" do
  automatic true
  label "Send Email"
  description "Sends incident email"
  email $param_email
end

escalation "esc_update_rightsize_sql_databases_approval" do
  automatic contains($param_automatic_action, "Resize Instances")
  label "Resize Database"
  description "Resized selected  SQL database"
  run "update_rightsize_sql_databases", data, $param_azure_endpoint, rs_optima_host
end

###############################################################################
# Cloud Workflow
###############################################################################

define update_rightsize_sql_databases($data, $param_azure_endpoint, $$rs_optima_host) return $all_responses do
  # Change "No" to "Yes" to enable CWF debug logging
  $log_to_cm_audit_entries = "No"

  $$debug = $log_to_cm_audit_entries == "Yes"

  $all_responses = []
  foreach $item in $data do
    if $item["recommended_capacity"] != "n/a"
      sub on_error: skip do
        $response = http_request(
          auth: $$auth_azure,
          verb: "patch",
          host: $param_azure_endpoint,
          https: true,
          href: $item["id"],
          query_strings: {
            "api-version": "2017-10-01-preview"
          },
          headers: {
            "cache-control": "no-cache",
            "content-type": "application/json"
          },
          body: {
            "sku": {
              "name": $item["skuName"],
              "tier": $item["skuTier"],
              "capacity": $item["recommended_capacity"]
            }
          }
        )
        call sys_log('Update RightSize Azure SQL Databases: ',to_s($response))
        $all_responses << $response
      end
    end
  end
end

define sys_log($subject, $detail) do
  # Create empty errors array if doesn't already exist
  if !$$errors
    $$errors = []
  end
  # Check if debug is enabled
  if $$debug
    # Append to global $$errors
    # This is the suggested way to capture errors
    $$errors << "Unexpected error for " + $subject + "\n  " + to_s($detail)
    # If Flexera NAM Zone, create audit_entries [to be deprecated]
    # This is the legacy method for capturing errors and only supported on Flexera NAM
    if $$rs_optima_host == "api.optima.flexeraeng.com"
      # skip_error_and_append is used to catch error if rs_cm.audit_entries.create fails unexpectedly
      $task_label = "Creating audit entry for " + $subject
      sub task_label: $task, on_error: skip_error_and_append($task) do
        rs_cm.audit_entries.create(
          notify: "None",
          audit_entry: {
            auditee_href: @@account,
            summary: $subject,
            detail: $detail
          }
        )
      end # End sub on_error
    end # End if rs_optima_host
  end # End if debug is enabled
end

define skip_error_and_append($subject) do
  $$errors << "Unexpected error for " + $subject + "\n  " + to_s($_error)
  $_error_behavior = "skip"
end

###############################################################################
# Meta Policy [alpha]
# Not intended to be modified or used by policy developers
###############################################################################

# If the meta_parent_policy_id is not set it will evaluate to an empty string and we will look for the policy itself,
# if it is set we will look for the parent policy.
datasource "ds_get_policy" do
  request do
    auth $auth_flexera
    host rs_governance_host
    ignore_status [404]
    path join(["/api/governance/projects/", rs_project_id, "/applied_policies/", switch(ne(meta_parent_policy_id,""), meta_parent_policy_id, policy_id) ])
    header "Api-Version", "1.0"
  end
  result do
    encoding "json"
    field "id", jmes_path(response, "id")
  end
end


datasource "ds_parent_policy_terminated" do
  run_script $js_decide_if_self_terminate, $ds_get_policy, policy_id, meta_parent_policy_id
end

# If the policy was applied by a meta_parent_policy we confirm it exists if it doesn't we confirm we are deleting
# This information is used in two places:
# - determining whether or not we make a delete call
# - determining if we should create an incident (we don't want to create an incident on the run where we terminate)
script "js_decide_if_self_terminate", type: "javascript" do
  parameters "found", "self_policy_id", "meta_parent_policy_id"
  result "result"
  code <<-EOS
  var result
  if (meta_parent_policy_id != "" && found.id == undefined) {
    result = true
  } else {
    result = false
  }
  EOS
end

# Two potentials ways to set this up:
# - this way and make a unneeded 'get' request when not deleting
# - make the delete request an interate and have it iterate over an empty array when not deleting and an array with one item when deleting
script "js_make_terminate_request", type: "javascript" do
  parameters "should_delete", "policy_id", "rs_project_id", "rs_governance_host"
  result "request"
  code <<-EOS

  var request = {
    auth:  'auth_flexera',
    host: rs_governance_host,
    path: "/api/governance/projects/" + rs_project_id + "/applied_policies/" + policy_id,
    headers: {
      "API-Version": "1.0",
      "Content-Type":"application/json"
    },
  }

  if (should_delete) {
    request.verb = 'DELETE'
  }
  EOS
end

datasource "ds_terminate_self" do
  request do
    run_script $js_make_terminate_request, $ds_parent_policy_terminated, policy_id, rs_project_id, rs_governance_host
  end
end

datasource "ds_is_deleted" do
  run_script $js_check_deleted, $ds_terminate_self
end

# This is just a way to have the check delete request connect to the farthest leaf from policy.
# We want the delete check to the first thing the policy does to avoid the policy erroring before it can decide whether or not it needs to self terminate
# Example a customer deletes a credential and then terminates the parent policy. We still want the children to self terminate
# The only way I could see this not happening is if the user who applied the parent_meta_policy was offboarded or lost policy access, the policies who are impersonating the user
# would not have access to self-terminate
# It may be useful for the backend to enable a mass terminate at some point for all meta_child_policies associated with an id.
script "js_check_deleted", type: "javascript" do
  parameters "response"
  result "result"
  code <<-EOS
  result = {"path":"/"}
  EOS
end


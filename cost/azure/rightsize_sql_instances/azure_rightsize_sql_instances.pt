name "Azure Rightsize SQL Databases"
rs_pt_ver 20180301
type "policy"
short_description "Check for Inefficient Azure SQL single database services that are inside or outside the CPU threshold for the last 30 days and resizes them after approval. See the [README](https://github.com/flexera-public/policy_templates/tree/master/cost/azure/rightsize_sql_instances/) and [docs.flexera.com/flexera/EN/Automation](https://docs.flexera.com/flexera/EN/Automation/AutomationGS.htm) to learn more."
long_description ""
severity "low"
category "Cost"
default_frequency "daily"
info(
  version: "3.0",
  provider: "Azure",
  service: "SQL",
  policy_set: "RightSize Database Services"
)

###############################################################################
# Parameters
###############################################################################

parameter "param_avg_cpu_upsize" do
  type "number"
  label "Average used CPU % - Upsize threshold"
  description "Set to -1 to ignore CPU utilization"
  default 80
  min_value -1
  max_value 100
end

parameter "param_avg_cpu_downsize" do
  type "number"
  label "Average used CPU % - Downsize Threshold"
  description "Set to -1 to ignore CPU utilization"
  default 60
  min_value -1
  max_value 100
end

parameter "param_exclusion_tag_key" do
  category "User Inputs"
  label "Exclusion Tag Key"
  description "Cloud native tag key to ignore instances. Example: exclude_utilization"
  type "string"
end

parameter "param_email" do
  type "list"
  label "Email addresses"
  description "Email addresses of the recipients you wish to notify"
end

parameter "param_azure_endpoint" do
  type "string"
  label "Azure Endpoint"
  allowed_values "management.azure.com", "management.chinacloudapi.cn"
  default "management.azure.com"
end

parameter "param_subscriptions_list" do
  label "Subscription Allowed List"
  type "list"
  description "Allowed Subscriptions, if empty, all subscriptions will be checked"
end

parameter "param_automatic_action" do
  type "list"
  label "Automatic Actions"
  description "When this value is set, this policy will automatically take the selected action(s)"
  allowed_values ["Resize Instances"]
end

parameter "param_log_to_cm_audit_entries" do
  type "string"
  label "Log to CM Audit Entries"
  description "Boolean for whether or not to log any debugging information from actions to CM Audit Entries, this should be left set to No on Flexera EU"
  default "No"
  allowed_values "Yes", "No"
end

###############################################################################
# Authentication
###############################################################################

#authenticate with Azure
credentials "auth_azure" do
  schemes "oauth2"
  label "Azure"
  description "Select the Azure Resource Manager Credential from the list."
  tags "provider=azure_rm"
end

credentials "auth_flexera" do
  schemes "oauth2"
  label "flexera"
  description "Select Flexera One OAuth2 credentials"
  tags "provider=flexera"
end

###############################################################################
# Pagination
###############################################################################
pagination "azure_pagination" do
  get_page_marker do
    body_path "nextLink"
  end
  set_page_marker do
    uri true
  end
end

###############################################################################
# Datasources
###############################################################################

datasource "ds_subscriptions" do
  request do
    auth $auth_azure
    pagination $azure_pagination
    host $param_azure_endpoint
    path "/subscriptions/"
    query "api-version","2019-06-01"
    header "User-Agent", "RS Policies"
    # Header X-Meta-Flexera has no affect on datasource query, but is required for Meta Policies
    # Forces `ds_is_deleted` datasource to run first during policy execution
    header "Meta-Flexera", val($ds_is_deleted, "path")
  end
  result do
    encoding "json"
    collect jmes_path(response, "value[*]") do
      field "subscriptionId", jmes_path(col_item,"subscriptionId")
      field "displayName", jmes_path(col_item,"displayName")
      field "state", jmes_path(col_item,"state")
    end
  end
end

datasource "ds_filtered_subscriptions" do
  run_script $js_filtered_subscriptions, $ds_subscriptions, $param_subscriptions_list
end

#https://docs.microsoft.com/en-us/rest/api/resources/resources/list
datasource "ds_azure_sql_databases" do
  iterate $ds_filtered_subscriptions
  request do
    auth $auth_azure
    pagination $azure_pagination
    host $param_azure_endpoint
    path join(["/subscriptions/", val(iter_item,"subscriptionId"), "/resources"])
    query "api-version","2019-08-01"
    query "$filter", "resourceType eq 'Microsoft.Sql/servers/databases'"
    header "User-Agent", "RS Policies"
    # Ignore status 400, 403, and 404 which can be returned in certain (legacy) types of Azure Subscriptions
    ignore_status [400,403,404]
  end
  result do
    encoding "json"
    collect jmes_path(response, "value") do
      field "id", jmes_path(col_item,"id")
      field "name", jmes_path(col_item,"name")
      field "location", jmes_path(col_item,"location")
      field "type", jmes_path(col_item,"type")
      field "kind", jmes_path(col_item,"kind")
      field "sku" , jmes_path(col_item,"sku")
      field "tags", jmes_path(col_item,"tags")
      field "subscriptionId",val(iter_item,"subscriptionId")
      field "subscriptionName",val(iter_item,"displayName")
    end
  end
end

datasource "ds_azure_sql_database_metrics" do
  iterate $ds_azure_sql_databases
  request do
    run_script $js_utilization_request, val(iter_item,"id"), $param_azure_endpoint
  end
  result do
    encoding "json"
    collect jmes_path(response, "value") do
      field "id", val(iter_item,"id")
      field "location", val(iter_item,"location")
      field "name", val(iter_item,"name")
      field "kind", val(iter_item,"kind")
      field "type", val(iter_item,"type")
      field "sku" , val(iter_item,"sku")
      field "tags", val(iter_item,"tags")
      field "unit", jmes_path(col_item,"unit")
      field "timeseries", jmes_path(col_item,"timeseries")
      field "subscriptionId",val(iter_item,"subscriptionId")
      field "subscriptionName",val(iter_item,"subscriptionName")
    end
  end
end

#Generates list of service tiers.
datasource "ds_azure_sql_resize_map" do
  request do
    verb "GET"
    host "raw.githubusercontent.com"
    path "/flexera/policy_templates/master/data/azure/sql_service_tier_types.json"
    header "User-Agent", "RS Policies"
  end
end

datasource "ds_merged_metrics" do
  run_script $js_merged_metrics, $ds_azure_sql_database_metrics, $ds_azure_sql_resize_map, $param_exclusion_tag_key, $param_avg_cpu_downsize, $param_avg_cpu_upsize
end

###############################################################################
# Scripts
###############################################################################

script "js_filtered_subscriptions", type: "javascript" do
  parameters "ds_subscriptions", "param_subscriptions_list"
  result "results"
  code <<-EOS
  var results = []
  if ( param_subscriptions_list.length != 0){
    results = []
    _.each(param_subscriptions_list, function(sub){
      var found = _.find(ds_subscriptions, function(item){
        return item.subscriptionId == sub || item.displayName.toLowerCase() == sub.toLowerCase();
      })
      results.push(found)
    })
  } else {
    results = ds_subscriptions
  }
EOS
end

# Build the API request object dynamically
script "js_utilization_request", type: "javascript" do
  parameters "resource_id", "param_azure_endpoint"
  result "request"
  code <<-EOS
    var end_date_tmp = new Date()
    end_date_tmp.setMilliseconds(999)
    end_date_tmp.setSeconds(59)
    end_date_tmp.setMinutes(59)
    end_date_tmp.setHours(23)
    var end_date = new Date(end_date_tmp).toISOString()
    var start_date_tmp = new Date(new Date().setDate(new Date().getDate() - 30))
    start_date_tmp.setMilliseconds(0)
    start_date_tmp.setSeconds(0)
    start_date_tmp.setMinutes(0)
    var start_date = new Date(start_date_tmp).toISOString()
    var sTimespan = start_date  + "/" + end_date;
    var request = {
      auth: "auth_azure",
      verb : "GET",
      scheme : "https",
      host : param_azure_endpoint,
      path : "" + resource_id + "/providers/microsoft.insights/metrics",
      query_params: {
        "api-version" : "2018-01-01",
        "timespan" : sTimespan,
        "metricnames" : "cpu_percent"
        "aggregation" : "Average,count",
        "interval" :  "P1D"                    //Dailey
      },
      // Ignore status 400, 403, and 404 which can be returned in certain (legacy) types of Azure Subscriptions
      ignore_status: [400,403,404],
      headers: {
        "User-Agent" : "RS Policies"
      }
    }
  EOS
end

script "js_merged_metrics", type: "javascript" do
  parameters "databases_metrics", "ds_azure_sql_resize_map", "exclusion_tag" , "down_threshold", "up_threshold"
  result "result"
  code <<-EOS
    var result = [];

    //exclude the database with the exclution tags, and the system databases
    for(i=0; i< databases_metrics.length; i++){
      if (databases_metrics[i].sku !== undefined && databases_metrics[i].sku != null){
        if(!(_.has(databases_metrics[i].tags, exclusion_tag) || databases_metrics[i].kind.toLowerCase().indexOf(",system") > -1)){
          //Find the Resource group
          var capacity = "";
          var recommended_capacity = "";
          var recommendation = "";
          var aTemp = databases_metrics[i].id.split("/resourceGroups/")
          var resource_group="";
          if(aTemp.length > 1){
            aTemp = aTemp[1].split("/");
            resource_group = aTemp[0];
          }else{
            resource_group = "";
          }

          //now find the metrics for the devices
          var objMetric = databases_metrics[i];
          var total = 0.0;
          var average_cpu = "";
          if (typeof objMetric == "object" && typeof objMetric.timeseries[0].data == "object"){
            var ts_data =  objMetric.timeseries[0].data;
            for (x=0; x < ts_data.length; x++) {
              total += ts_data[x].average;
            }
            average_cpu = total / ts_data.length;
            average_cpu = average_cpu.toFixed(2);
          }else{
            average_cpu = "n/a";
          }
          var sku = databases_metrics[i].sku;
          var threshold = "";
          //Now check for recommendation
          if(average_cpu !== "n/a"){
            if(Number(average_cpu) >= Number(up_threshold)){
              //Upsize
              threshold = up_threshold;
              recommendation = "Upsize";
              if (databases_metrics[i].sku !== undefined && databases_metrics[i].sku != null && ds_azure_sql_resize_map[sku.tier] !== undefined && ds_azure_sql_resize_map[sku.tier] != null){
                var json_tier = ds_azure_sql_resize_map[sku.tier];
                if (json_tier[sku.name+"_"+sku.capacity] !== undefined && json_tier[sku.name+"_"+sku.capacity] != null){
                  var json_name = json_tier[sku.name+"_"+sku.capacity];
                  if (json_name["up"] !== undefined && json_name["up"] != null){
                    capacity = json_name["up"];
                  }
                }
              }
              if(capacity != null && capacity.length > 0){
                recommended_capacity = capacity;
              }else{
                recommended_capacity = "n/a";
              }
            }else if(Number(average_cpu) <= Number(down_threshold)){
              //Downsize
              threshold = down_threshold;
              recommendation = "Downsize";
              if (databases_metrics[i].sku !== undefined && databases_metrics[i].sku != null && ds_azure_sql_resize_map[sku.tier] !== undefined && ds_azure_sql_resize_map[sku.tier] != null){
                if (sku.tier === "Basic"){
                  recommendation = "-";
                }
                var json_tier = ds_azure_sql_resize_map[sku["tier"]];
                if (json_tier[sku.name+"_"+sku.capacity] !== undefined && json_tier[sku.name+"_"+sku.capacity] != null){
                  var json_name = json_tier[sku.name+"_"+sku.capacity];
                  if (json_name["down"] !== undefined && json_name["down"] != null){
                    capacity = json_name["down"];
                  }
                }
              }
              if(capacity != null && capacity.length > 0){
                recommended_capacity = capacity;
              }else{
                recommended_capacity = "n/a";
              }
            }
          }else{
            recommendation = "-";
            recommended_capacity = "n/a";
          }
          if (recommended_capacity === "n/a" && recommendation !== "-"){
            recommendation = "Change tier"
          }
          if(average_cpu !== "n/a" && sku.name !== "ElasticPool"){
            result.push({
              id: databases_metrics[i].id,
              location: databases_metrics[i].location,
              average_cpu: average_cpu,
              name: databases_metrics[i].name,
              resource_group: resource_group,
              kind: databases_metrics[i].kind,
              type: databases_metrics[i].type,
              sku: databases_metrics[i].sku,
              unit: databases_metrics[i].unit,
              tags: databases_metrics[i].tags,
              recommendation: recommendation,
              recommended_capacity:recommended_capacity,
              subscriptionId: databases_metrics[i].subscriptionId,
              subscriptionName: databases_metrics[i].subscriptionName,
              lookbackPeriod: "30 days",
              resourceType: databases_metrics[i].sku.name + "_" + databases_metrics[i].sku.tier,
              threshold: threshold
            })
          }
        }
      }
    }
    result=_.sortBy(result, 'subscriptionName');
    result=_.sortBy(result, 'location');
    result=_.sortBy(result, 'name');
  EOS
end

###############################################################################
# Policy
###############################################################################

policy 'policy_azure_db_utilization' do
  validate $ds_merged_metrics do
    summary_template "{{ rs_project_name }} (Account ID: {{ rs_project_id }}): Found {{ len data }} Azure Rightsize SQL single Database"
    detail_template <<-EOS
      ### Thresholds for Consideration
      - Upsize Average CPU% threshold   : {{ parameters.param_avg_cpu_upsize }}
      - Downsize Average CPU% threshold : {{ parameters.param_avg_cpu_downsize }}
    EOS
    escalate $email_report
    escalate $esc_update_rightsize_sql_databases_approval
    # Policy check fails and incident is created only if data is not empty and the Parent Policy has not been terminated
    check logic_or($ds_parent_policy_terminated, eq(size(data),0))
    export do
      resource_level true
      field "accountID" do
        label "Subscription ID"
        path "subscriptionId"
      end
      field "accountName" do
        label "Subscription Name"
        path "subscriptionName"
      end
      field "region" do
        label "Location"
        path "location"
      end
      field "resourceName" do
        label "Name"
        path "name"
      end
      field "resourceGroup" do
        label "Resource Group"
        path "resource_group"
      end
      field "kind" do
        label "Kind"
      end
      field "type" do
        label "Type"
      end
      field "skuCapacity" do
        label "Current Capacity"
        path "sku.capacity"
      end
      field "newResourceType" do
        label "Recommended Resource Type"
        path "recommended_capacity"
      end
      field "skuName" do
        label "SKU - Name"
        path "sku.name"
      end
      field "skuTier" do
        label "SKU - Tier"
        path "sku.tier"
      end
      field "cpuAverage" do
        label "CPU Average %"
        path "average_cpu"
      end
      field "recommendation" do
        label "Recommendation"
      end
      field "id" do
        label "Id"
      end
      field "resourceType" do
        label "Resource Type"
      end
      field "lookbackPeriod" do
        label "Lookback Period"
      end
      field "threshold" do
        label "Threshold"
      end
    end
  end
end

###############################################################################
# Escalations
###############################################################################

escalation "email_report" do
  automatic true
  label "Send Email"
  description "Sends incident email"
  email $param_email
end

escalation "esc_update_rightsize_sql_databases_approval" do
  automatic contains($param_automatic_action, "Resize Instances")
  label "Resize Database"
  description "Resized selected  SQL database"
  run "update_rightsize_sql_databases", data, $param_log_to_cm_audit_entries, $param_azure_endpoint, rs_optima_host
end

###############################################################################
# Cloud Workflow
###############################################################################

define update_rightsize_sql_databases($data, $param_log_to_cm_audit_entries, $param_azure_endpoint, $$rs_optima_host) return $all_responses do
  $$debug = $param_log_to_cm_audit_entries == "Yes"
  $all_responses = []
  foreach $item in $data do
    if $item["recommended_capacity"] != "n/a"
      sub on_error: skip do
        $response = http_request(
          auth: $$auth_azure,
          verb: "patch",
          host: $param_azure_endpoint,
          https: true,
          href: $item["id"],
          query_strings: {
            "api-version": "2017-10-01-preview"
          },
          headers: {
            "cache-control": "no-cache",
            "content-type": "application/json"
          },
          body: {
            "sku": {
              "name": $item["skuName"],
              "tier": $item["skuTier"],
              "capacity": $item["recommended_capacity"]
            }
          }
        )
        call sys_log('Update RightSize Azure SQL Databases: ',to_s($response))
        $all_responses << $response
      end
    end
  end
end

define sys_log($subject, $detail) do
  # Create empty errors array if doesn't already exist
  if !$$errors
    $$errors = []
  end
  # Check if debug is enabled
  if $$debug
    # Append to global $$errors
    # This is the suggested way to capture errors
    $$errors << "Unexpected error for " + $subject + "\n  " + to_s($detail)
    # If Flexera NAM Zone, create audit_entries [to be deprecated]
    # This is the legacy method for capturing errors and only supported on Flexera NAM
    if $$rs_optima_host == "api.optima.flexeraeng.com"
      # skip_error_and_append is used to catch error if rs_cm.audit_entries.create fails unexpectedly
      $task_label = "Creating audit entry for " + $subject
      sub task_label: $task, on_error: skip_error_and_append($task) do
        rs_cm.audit_entries.create(
          notify: "None",
          audit_entry: {
            auditee_href: @@account,
            summary: $subject,
            detail: $detail
          }
        )
      end # End sub on_error
    end # End if rs_optima_host
  end # End if debug is enabled
end

define skip_error_and_append($subject) do
  $$errors << "Unexpected error for " + $subject + "\n  " + to_s($_error)
  $_error_behavior = "skip"
end

###############################################################################
# Meta Policy [alpha]
# Not intended to be modified or used by policy developers
###############################################################################

# If the meta_parent_policy_id is not set it will evaluate to an empty string and we will look for the policy itself,
# if it is set we will look for the parent policy.
datasource "ds_get_policy" do
  request do
    auth $auth_flexera
    host rs_governance_host
    ignore_status [404]
    path join(["/api/governance/projects/", rs_project_id, "/applied_policies/", switch(ne(meta_parent_policy_id,""), meta_parent_policy_id, policy_id) ])
    header "Api-Version", "1.0"
  end
  result do
    encoding "json"
    field "id", jmes_path(response, "id")
  end
end


datasource "ds_parent_policy_terminated" do
  run_script $js_decide_if_self_terminate, $ds_get_policy, policy_id, meta_parent_policy_id
end

# If the policy was applied by a meta_parent_policy we confirm it exists if it doesn't we confirm we are deleting
# This information is used in two places:
# - determining whether or not we make a delete call
# - determining if we should create an incident (we don't want to create an incident on the run where we terminate)
script "js_decide_if_self_terminate", type: "javascript" do
  parameters "found", "self_policy_id", "meta_parent_policy_id"
  result "result"
  code <<-EOS
  var result
  if (meta_parent_policy_id != "" && found.id == undefined) {
    result = true
  } else {
    result = false
  }
  EOS
end

# Two potentials ways to set this up:
# - this way and make a unneeded 'get' request when not deleting
# - make the delete request an interate and have it iterate over an empty array when not deleting and an array with one item when deleting
script "js_make_terminate_request", type: "javascript" do
  parameters "should_delete", "policy_id", "rs_project_id", "rs_governance_host"
  result "request"
  code <<-EOS

  var request = {
    auth:  'auth_flexera',
    host: rs_governance_host,
    path: "/api/governance/projects/" + rs_project_id + "/applied_policies/" + policy_id,
    headers: {
      "API-Version": "1.0",
      "Content-Type":"application/json"
    },
  }

  if (should_delete) {
    request.verb = 'DELETE'
  }
  EOS
end

datasource "ds_terminate_self" do
  request do
    run_script $js_make_terminate_request, $ds_parent_policy_terminated, policy_id, rs_project_id, rs_governance_host
  end
end

datasource "ds_is_deleted" do
  run_script $js_check_deleted, $ds_terminate_self
end

# This is just a way to have the check delete request connect to the farthest leaf from policy.
# We want the delete check to the first thing the policy does to avoid the policy erroring before it can decide whether or not it needs to self terminate
# Example a customer deletes a credential and then terminates the parent policy. We still want the children to self terminate
# The only way I could see this not happening is if the user who applied the parent_meta_policy was offboarded or lost policy access, the policies who are impersonating the user
# would not have access to self-terminate
# It may be useful for the backend to enable a mass terminate at some point for all meta_child_policies associated with an id.
script "js_check_deleted", type: "javascript" do
  parameters "response"
  result "result"
  code <<-EOS
  result = {"path":"/"}
  EOS
end


name "Azure Hybrid Use Benefit for Linux Server"
rs_pt_ver 20180301
type "policy"
short_description "Identifies Linux instances eligible for Azure Hybrid Use Benefit. See the [README](https://github.com/flexera-public/policy_templates/tree/master/cost/azure/hybrid_use_benefit_linux) and [docs.flexera.com/flexera/EN/Automation](https://docs.flexera.com/flexera/EN/Automation/AutomationGS.htm) to learn more."
long_description ""
severity "low"
category "Cost"
default_frequency "daily"
info(
  version: "3.0",
  provider: "Azure",
  service: "Compute",
  policy_set: ""
)

###############################################################################
# Parameters
###############################################################################

parameter "param_exclusion_tag_key" do
  category "User Inputs"
  label "Exclusion Tag Key"
  description "Azure-native instance tag to ignore instances that are not using AHUB/BYOL. Only supply the tag key. The policy assumes that the tag value is irrelevant."
  type "string"
  default "exclude_ahub"
end

parameter "param_email" do
  type "list"
  label "Email addresses of the recipients you wish to notify"
end

parameter "param_azure_endpoint" do
  type "string"
  label "Azure Endpoint"
  allowed_values "management.azure.com", "management.chinacloudapi.cn"
  default "management.azure.com"
end

parameter "param_subscriptions_list" do
  label "Subscription Allowed List"
  type "list"
  description "Allowed Subscriptions, if empty, all subscriptions will be checked"
end

parameter "param_automatic_action" do
  type "list"
  label "Automatic Actions"
  description "When this value is set, this policy will automatically take the selected action(s)"
  allowed_values "Hybrid use benefit for Linux"
end

###############################################################################
# Authentication
###############################################################################

credentials "auth_azure" do
  schemes "oauth2"
  label "Azure"
  description "Select the Azure Resource Manager Credential from the list."
  tags "provider=azure_rm"
end

credentials "auth_flexera" do
  schemes "oauth2"
  label "flexera"
  description "Select Flexera One OAuth2 credentials"
  tags "provider=flexera"
end

###############################################################################
# Pagination
###############################################################################

pagination "pagination_azure" do
  get_page_marker do
    body_path "nextLink"
  end
  set_page_marker do
    uri true
  end
end

###############################################################################
# Datasources & Scripts
###############################################################################

datasource "ds_subscriptions" do
  request do
    auth $auth_azure
    pagination $pagination_azure
    host $param_azure_endpoint
    path "/subscriptions/"
    query "api-version","2019-06-01"
    header "User-Agent", "RS Policies"
    # Header X-Meta-Flexera has no affect on datasource query, but is required for Meta Policies
    # Forces `ds_is_deleted` datasource to run first during policy execution
    header "Meta-Flexera", val($ds_is_deleted, "path")
  end
  result do
    encoding "json"
    collect jmes_path(response, "value[*]") do
      field "subscriptionId", jmes_path(col_item,"subscriptionId")
      field "subscriptionName", jmes_path(col_item,"displayName")
    end
  end
end

datasource "ds_filtered_subscriptions" do
  run_script $js_filtered_subscriptions, $ds_subscriptions, $param_subscriptions_list
end

script "js_filtered_subscriptions", type: "javascript" do
  parameters "ds_subscriptions", "param_subscriptions_list"
  result "results"
  code <<-EOS
  var results = []
  if ( param_subscriptions_list.length != 0){
    results = []
    _.each(param_subscriptions_list, function(sub){
      var found = _.find(ds_subscriptions, function(item){
        return item.subscriptionId == sub || item.subscriptionName.toLowerCase() == sub.toLowerCase();
      })
      results.push(found)
    })
  } else {
    results = ds_subscriptions
  }
EOS
end

datasource "ds_azure_instances" do
  iterate $ds_filtered_subscriptions
    request do
      auth $auth_azure
      pagination $pagination_azure
      host $param_azure_endpoint
      path join(["/subscriptions/", val(iter_item,"subscriptionId"), "/providers/Microsoft.Compute/virtualMachines"])
      query "api-version","2017-12-01"
      header "User-Agent", "RS Policies"
      # Ignore status 400, 403, and 404 which can be returned in certain (legacy) types of Azure Subscriptions
      ignore_status [400,403,404]
    end
    result do
      encoding "json"
      collect jmes_path(response, "value") do
        field "subscriptionName", val(iter_item,"subscriptionName")
        field "id", jmes_path(col_item,"id")
        field "name", jmes_path(col_item,"name")
        field "location", jmes_path(col_item,"location")
        field "licenseType", jmes_path(col_item,"properties.licenseType")
        field "vmSize", jmes_path(col_item,"properties.hardwareProfile.vmSize")
        field "osType", jmes_path(col_item,"properties.storageProfile.osDisk.osType")
        field "imagePublisher", jmes_path(col_item,"properties.storageProfile.imageReference.publisher")
        field "imageOffer", jmes_path(col_item,"properties.storageProfile.imageReference.offer")
        field "imageSku", jmes_path(col_item,"properties.storageProfile.imageReference.sku")
        field "imageVersion", jmes_path(col_item,"properties.storageProfile.imageReference.version")
        field "tags", jmes_path(col_item,"tags")
      end
    end
end

datasource "ds_filtered_resources" do
  run_script $js_filter_resources, $ds_azure_instances, $param_exclusion_tag_key
end

script "js_filter_resources", type: "javascript" do
  parameters "azure_instances","exclusion_tag"
  result "result"
  code <<-EOS
  // Dummy entry to ensure validation always executes at least once
  var result = [{ ahub: "Yes" }];
  _.each(azure_instances, function(instance){

    if (_.has(instance.tags, exclusion_tag) == false) {
      if (instance.osType === "Linux"){
        var resourceGroup = instance.id.split('/')[4];
        var tags = JSON.stringify(instance["tags"]);
        var ahub = "N/A";
        var lic_param = "N/A"
        if (instance.licenseType === "SLES_BYOS" || instance.licenseType === "RHEL_BYOS") {
          ahub = "Yes"
        } else {
          if (instance.imagePublisher === "suse" || instance.imagePublisher === "RedHat") {
            if (instance.licenseType === "None" || _.isUndefined(instance.licenseType)) {
              if (instance.imagePublisher === "suse") {
                lic_param = "SLES_BYOS"
                ahub = "No"
              } else {
              if (instance.imagePublisher === "RedHat") {
                lic_param = "RHEL_BYOS"
                ahub = "No"
              }
              }
              result.push({
                subscriptionName: instance["subscriptionName"],
                id: instance["id"],
                name: instance["name"],
                resourceGroup: resourceGroup,
                location: instance["location"],
                ahub: ahub,
                vmSize: instance["vmSize"],
                imagePublisher: instance["imagePublisher"],
                imageOffer: instance["imageOffer"],
                imageSku: instance["imageSku"],
                imageVersion: instance["imageVersion"],
                lic_param: lic_param,
                tags: tags
              })
            }
          }
        }
      }
    }
  })
  result = _.sortBy(result, 'subscriptionName');
  result = _.sortBy(result, 'location');
EOS
end

###############################################################################
# Policy
###############################################################################

policy "pol_azure_license_policy" do
  validate_each $ds_filtered_resources do
    summary_template "{{ rs_project_name }} (Account ID: {{ rs_project_id }}): {{ len data }} Instances Not Using Azure Hybrid Use Benefit for Linux Server"
    escalate $esc_email
    escalate $esc_license_instances
    check logic_or($ds_parent_policy_terminated, eq(val(item,"ahub"), "Yes"))
    export "result" do
      resource_level true
      field "subscriptionName" do
        label "Subscription Name"
      end
      field "location" do
        label "Location"
      end
      field "resourceGroup" do
        label "Resource Group"
      end
      field "name" do
        label "Instance Name"
      end
      field "vmSize" do
        label "Instance Size"
      end
      field "imagePublisher" do
        label "Image Publisher"
      end
      field "imageOffer" do
        label "Image Offer"
      end
      field "imageSku" do
        label "Image Sku"
      end
      field "imageVersion" do
        label "Image Version"
      end
      field "ahub" do
        label "AHUB"
      end
      field "tags" do
        label "Tags"
      end
      field "id" do
        label "Id"
      end
      field "lic_param" do
        label "lic_param"
      end
    end
  end
end

###############################################################################
# Escalations
###############################################################################

escalation "esc_email" do
  automatic true
  label "Send Email"
  description "Send Incident email"
  email $param_email
end

escalation "esc_license_instances" do
  automatic contains($param_automatic_action, "Hybrid Use Benefit for Linux")
  label "Approve AHUB for Linux"
  description "Approve escalation to apply Hybrid Use Benefit to identified instances"
  run "license_instances", data
end

###############################################################################
# Cloud Workflow
###############################################################################

define license_instances($data) return $all_responses do
  $all_responses = []
  foreach $item in $data do
    sub on_error: skip do
      $update_inst_response = http_request(
        auth: $$auth_azure,
        verb: "patch",
        host: "management.azure.com",
        https: true,
        href: $item["id"],
        query_strings: {
          "api-version": "2018-06-01"
        },
        headers: {
          "cache-control": "no-cache",
          "content-type": "application/json"
        },
        body: {
          "properties": {
            "licenseType": $item["lic_param"]
          }
        }
      )

      $all_responses << $update_inst_response
    end
  end
end

###############################################################################
# Meta Policy [alpha]
# Not intended to be modified or used by policy developers
###############################################################################

# If the meta_parent_policy_id is not set it will evaluate to an empty string and we will look for the policy itself,
# if it is set we will look for the parent policy.
datasource "ds_get_policy" do
  request do
    auth $auth_flexera
    host rs_governance_host
    ignore_status [404]
    path join(["/api/governance/projects/", rs_project_id, "/applied_policies/", switch(ne(meta_parent_policy_id,""), meta_parent_policy_id, policy_id) ])
    header "Api-Version", "1.0"
  end
  result do
    encoding "json"
    field "id", jmes_path(response, "id")
  end
end

datasource "ds_parent_policy_terminated" do
  run_script $js_decide_if_self_terminate, $ds_get_policy, policy_id, meta_parent_policy_id
end

# If the policy was applied by a meta_parent_policy we confirm it exists if it doesn't we confirm we are deleting
# This information is used in two places:
# - determining whether or not we make a delete call
# - determining if we should create an incident (we don't want to create an incident on the run where we terminate)
script "js_decide_if_self_terminate", type: "javascript" do
  parameters "found", "self_policy_id", "meta_parent_policy_id"
  result "result"
  code <<-EOS
  var result
  if (meta_parent_policy_id != "" && found.id == undefined) {
    result = true
  } else {
    result = false
  }
  EOS
end

# Two potentials ways to set this up:
# - this way and make a unneeded 'get' request when not deleting
# - make the delete request an interate and have it iterate over an empty array when not deleting and an array with one item when deleting
script "js_make_terminate_request", type: "javascript" do
  parameters "should_delete", "policy_id", "rs_project_id", "rs_governance_host"
  result "request"
  code <<-EOS

  var request = {
    auth:  'auth_flexera',
    host: rs_governance_host,
    path: "/api/governance/projects/" + rs_project_id + "/applied_policies/" + policy_id,
    headers: {
      "API-Version": "1.0",
      "Content-Type":"application/json"
    },
  }

  if (should_delete) {
    request.verb = 'DELETE'
  }
  EOS
end

datasource "ds_terminate_self" do
  request do
    run_script $js_make_terminate_request, $ds_parent_policy_terminated, policy_id, rs_project_id, rs_governance_host
  end
end

datasource "ds_is_deleted" do
  run_script $js_check_deleted, $ds_terminate_self
end

# This is just a way to have the check delete request connect to the farthest leaf from policy.
# We want the delete check to the first thing the policy does to avoid the policy erroring before it can decide whether or not it needs to self terminate
# Example a customer deletes a credential and then terminates the parent policy. We still want the children to self terminate
# The only way I could see this not happening is if the user who applied the parent_meta_policy was offboarded or lost policy access, the policies who are impersonating the user
# would not have access to self-terminate
# It may be useful for the backend to enable a mass terminate at some point for all meta_child_policies associated with an id.
script "js_check_deleted", type: "javascript" do
  parameters "response"
  result "result"
  code <<-EOS
  result = {"path":"/"}
  EOS
end

name "Azure Rightsize Managed Disks"
rs_pt_ver 20180301
type "policy"
short_description "Looks for oversized managed disks and suggest recommendations to save money. See the [README](https://github.com/flexera-public/policy_templates/tree/master/cost/azure/rightsize_managed_disks/) and [docs.flexera.com/flexera/EN/Automation](https://docs.flexera.com/flexera/EN/Automation/AutomationGS.htm) to learn more."
long_description ""
category "Cost"
severity "low"
default_frequency "weekly"
info(
  version: "0.0",
  provider: "Azure",
  service: "Managed Disks",
  policy_set: "Rightsize Managed Disks",
  recommendation_type: "Usage Reduction"
)

###############################################################################
# Parameters
###############################################################################

parameter "param_email" do
  type "list"
  category "Policy Settings"
  label "Email Addresses"
  description "A list of email addresses to notify."
  default []
end

parameter "param_azure_endpoint" do
  type "string"
  category "Policy Settings"
  label "Azure Endpoint"
  description "Select the API endpoint to use for Azure. Use default value of management.azure.com unless using Azure China."
  allowed_values "management.azure.com", "management.chinacloudapi.cn"
  default "management.azure.com"
end

parameter "param_min_savings" do
  type "number"
  category "Policy Settings"
  label "Minimum Savings Threshold"
  description "Minimum potential savings required to generate a recommendation."
  min_value 0
  default 0
end

parameter "param_exclusion_tags" do
  type "list"
  category "Filters"
  label "Exclusion Tags (Key:Value)"
  description "Cloud native tags to ignore managed disks that you don't want to consider for downsizing. Format: Key:Value"
  allowed_pattern /(^$)|([\w]?)+\:([\w]?)+/
  default []
end

parameter "param_subscriptions_allow_or_deny" do
  type "string"
  category "Filters"
  label "Allow/Deny Subscriptions"
  description "Allow or deny entered subscriptions. See the README for more details."
  allowed_values "Allow", "Deny"
  default "Allow"
end

parameter "param_subscriptions_list" do
  type "list"
  category "Filters"
  label "Allow/Deny Subscriptions List"
  description "A list of allowed or denied ubscription IDs/names. See the README for more details."
  default []
end

parameter "param_regions_allow_or_deny" do
  type "string"
  category "Filters"
  label "Allow/Deny Regions"
  description "Allow or deny entered regions. See the README for more details."
  allowed_values "Allow", "Deny"
  default "Allow"
end

parameter "param_regions_list" do
  type "list"
  category "Filters"
  label "Allow/Deny Regions List"
  description "A list of allowed or denied regions. See the README for more details."
  default []
end

parameter "param_stats_min_used_disk_space_pct_for_downsizing" do
  type "number"
  category "Statistics"
  label "Minimum used disk space percentage to consider a managed disk for downsizing"
  description "The minimum used disk space percentage threshold at which to consider a disk to be 'oversized' and therefore be flagged for downsizing. Set to -1 for automatic mode."
  min_value -1
  max_value 100
  default 50
end

parameter "param_stats_aggregation_for_disk_throughput_and_iops" do
  type "string"
  category "Statistics"
  label "Aggregation type for determining oversized disk throughput and IOPS"
  description "Statistic to use when determining if the disk throughput and IOPS is more than the disk actually uses."
  allowed_values "Average", "Maximum"
  default "Average"
end

parameter "param_stats_lookback" do
  type "number"
  category "Statistics"
  label "Lookback period"
  description "How many days back to look at disk IOPS and throughput data. This value cannot be set higher than 90 because Azure does not retain metrics for longer than 90 days."
  default 7
  min_value 1
  max_value 90
end

###############################################################################
# Authentication
###############################################################################

credentials "auth_azure" do
  schemes "oauth2"
  label "Azure"
  description "Select the Azure Resource Manager Credential from the list."
  tags "provider=azure_rm"
end

credentials "auth_flexera" do
  schemes "oauth2"
  label "Flexera"
  description "Select Flexera One OAuth2 credentials"
  tags "provider=flexera"
end

###############################################################################
# Pagination
###############################################################################

pagination "pagination_azure" do
  get_page_marker do
    body_path "nextLink"
  end
  set_page_marker do
    uri true
  end
end

###############################################################################
# Datasources & Scripts
###############################################################################

datasource "ds_azure_subscriptions" do
  request do
    auth $auth_azure
    pagination $pagination_azure
    host $param_azure_endpoint
    path "/subscriptions/"
    query "api-version","2020-01-01"
    header "User-Agent", "RS Policies"
    # Header X-Meta-Flexera has no affect on datasource query, but is required for Meta Policies
    # Forces `ds_is_deleted` datasource to run first during policy execution
    # header "Meta-Flexera", val($ds_is_deleted, "path")
  end
  result do
    encoding "json"
    collect jmes_path(response, "value[*]") do
      field "id", jmes_path(col_item, "subscriptionId")
      field "name", jmes_path(col_item, "displayName")
      field "state", jmes_path(col_item, "state")
    end
  end
end

datasource "ds_azure_subscriptions_filtered" do
  run_script $js_azure_subscriptions_filtered, $ds_azure_subscriptions, $param_subscriptions_allow_or_deny, $param_subscriptions_list
end

script "js_azure_subscriptions_filtered", type: "javascript" do
  parameters "ds_azure_subscriptions", "param_subscriptions_allow_or_deny", "param_subscriptions_list"
  result "result"
  code <<-EOS
  if (param_subscriptions_list.length > 0) {
    result = _.filter(ds_azure_subscriptions, function(subscription) {
      include_subscription = _.contains(param_subscriptions_list, subscription['id']) || _.contains(param_subscriptions_list, subscription['name'])

      if (param_subscriptions_allow_or_deny == "Deny") {
        include_subscription = !include_subscription
      }

      return include_subscription
    })
  } else {
    result = ds_azure_subscriptions
  }
EOS
end

datasource "ds_azure_disks" do
  iterate $ds_azure_subscriptions_filtered
  request do
    auth $auth_azure
    pagination $pagination_azure
    host $param_azure_endpoint
    path join(["/subscriptions/", val(iter_item, "id"), "/providers/Microsoft.Compute/disks"])
    query "api-version", "2019-07-01"
    # Ignore status 400, 403, and 404 which can be returned in certain (legacy) types of Azure Subscriptions
    ignore_status [400, 403, 404]
  end
  result do
    encoding "json"
    collect jmes_path(response, "value[?@.managedBy]") do
      field "id", jmes_path(col_item, "id")
      field "resourceName", jmes_path(col_item, "name")
      field "resourceGroup", get(4, split(jmes_path(col_item, "id"), '/'))
      field "resourceType", jmes_path(col_item, "type")
      field "region", jmes_path(col_item, "location")
      field "tags", jmes_path(col_item, "tags")
      field "managedBy", jmes_path(col_item, "managedBy")
      field "provisioningState", jmes_path(col_item, "properties.provisioningState")
      field "osType", jmes_path(col_item, "properties.osType")
      field "state", jmes_path(col_item, "properties.diskState")
      field "size", jmes_path(col_item, "properties.diskSizeGB")
      field "timeCreated", jmes_path(col_item, "properties.timeCreated")
      field "subscriptionID", val(iter_item, "id")
      field "subscriptionName", val(iter_item, "name")
    end
  end
end

datasource "ds_azure_disks_region_filtered" do
  run_script $js_azure_disks_region_filtered, $ds_azure_disks, $param_regions_allow_or_deny, $param_regions_list
end

script "js_azure_disks_region_filtered", type: "javascript" do
  parameters "ds_azure_disks", "param_regions_allow_or_deny", "param_regions_list"
  result "result"
  code <<-EOS
  if (param_regions_list.length > 0) {
    result = _.filter(ds_azure_disks, function(disk) {
      include_disk = _.contains(param_regions_list, disk['region'])

      if (param_regions_allow_or_deny == "Deny") {
        include_disk = !include_disk
      }

      return include_disk
    })
  } else {
    result = ds_azure_disks
  }
EOS
end

datasource "ds_azure_disks_tag_filtered" do
  run_script $js_azure_disks_tag_filtered, $ds_azure_disks_region_filtered, $param_exclusion_tags
end

script "js_azure_disks_tag_filtered", type: "javascript" do
  parameters "ds_azure_disks_region_filtered", "param_exclusion_tags"
  result "result"
  code <<-EOS
  if (param_exclusion_tags.length > 0) {
    result = _.reject(ds_azure_disks_region_filtered, function(disk) {
      disk_tags = []

      if (typeof(disk['tags']) == 'object') {
        _.each(Object.keys(disk['tags']), function(key) {
          disk_tags.push([key, ":", disk['tags'][key]].join(''))
          disk_tags.push([key, ":*"].join(''))
        })
      }

      exclude_disk = false

      _.each(param_exclusion_tags, function(exclusion_tag) {
        if (_.contains(disk_tags, exclusion_tag)) {
          exclude_disk = true
        }
      })

      return exclude_disk
    })
  } else {
    result = ds_azure_disks_region_filtered
  }
EOS
end

datasource "ds_azure_disks_grouped_by_vm" do
  run_script $js_azure_disks_grouped_by_vm, $ds_azure_disks_tag_filtered
end

script "js_azure_disks_grouped_by_vm", type: "javascript" do
  parameters "ds_azure_disks_tag_filtered"
  result "result"
  code <<-EOS
  var result = []
  var grouped_disks = _.groupBy(ds_azure_disks_tag_filtered, 'managedBy')
  for (var gd in grouped_disks) {
    result.push({vmId: gd, disks: grouped_disks[gd]})
  }
EOS
end

datasource "ds_azure_virtual_machines" do
  iterate $ds_azure_disks_grouped_by_vm
  request do
    auth $auth_azure
    host $param_azure_endpoint
    path val(iter_item, "vmId")
    query "api-version", "2023-07-01"
    # Ignore status 400, 403, and 404 which can be returned in certain (legacy) types of Azure Subscriptions
    ignore_status [400, 403, 404]
  end
  result do
    encoding "json"
    field "id", jmes_path(response, "id")
    field "resourceName", jmes_path(response, "name")
    field "osDisk", jmes_path(response, "properties.storageProfile.osDisk")
    field "dataDisks", jmes_path(response, "properties.storageProfile.dataDisks")
  end
end

datasource "ds_azure_virtual_machines_with_disks" do
  run_script $js_azure_virtual_machines_with_disks, $ds_azure_disks_grouped_by_vm, $ds_azure_virtual_machines
end

script "js_azure_virtual_machines_with_disks", type: "javascript" do
  parameters "ds_azure_disks_grouped_by_vm", "ds_azure_virtual_machines"
  result "result"
  code <<-EOS
  var result = []
  for (var i in ds_azure_disks_grouped_by_vm) {
    var vmId = ds_azure_disks_grouped_by_vm[i].vmId
    var correspondingVm = _.find(ds_azure_virtual_machines, function(vm) { return vm.id.toLowerCase() === vmId.toLowerCase() })
    if (correspondingVm === undefined) continue;
    var virtualMachineWithDiskData = { vmId: vmId, osDisk: null, dataDisks: [] }
    for (j in ds_azure_disks_grouped_by_vm[i].disks) {
      var disk = ds_azure_disks_grouped_by_vm[i].disks[j]
      if (correspondingVm.osDisk.managedDisk.id.toLowerCase() === disk.id.toLowerCase()) {
        virtualMachineWithDiskData.osDisk = disk
        continue
      }
      var correspondingDisk = _.find(correspondingVm.dataDisks, function(dataDisk) { return dataDisk.managedDisk.id.toLowerCase() === disk.id.toLowerCase() })
      if (correspondingDisk === undefined) continue;
      disk.lun = correspondingDisk.lun
      virtualMachineWithDiskData.dataDisks.push(disk)
    }
    result.push(virtualMachineWithDiskData)
  }
EOS
end

datasource "ds_azure_virtual_machines_with_metrics" do
  iterate $ds_azure_virtual_machines_with_disks
  request do
    run_script $js_azure_virtual_machines_with_metrics, val(iter_item, "vmId"), $param_azure_endpoint, $param_stats_lookback, $param_stats_aggregation_for_disk_throughput_and_iops 
  end
  result do
    encoding "json"
    field "vmId", val(iter_item, "vmId")
    field "metrics", jmes_path(response, "value[*]") 
  end
end

script "js_azure_virtual_machines_with_metrics", type: "javascript" do
  parameters "vmId", "param_azure_endpoint", "param_stats_lookback", "param_stats_aggregation_for_disk_throughput_and_iops"
  result "request"
  code <<-EOS
  var end_date = new Date()
  end_date.setMilliseconds(999)
  end_date.setSeconds(59)
  end_date.setMinutes(59)
  end_date.setHours(23)

  var start_date = new Date()
  start_date.setDate(start_date.getDate() - param_stats_lookback)
  start_date.setMilliseconds(0)
  start_date.setSeconds(0)
  start_date.setMinutes(0)

  timespan = start_date.toISOString() + "/" + end_date.toISOString()

  var request = {
    auth: "auth_azure",
    host: param_azure_endpoint,
    verb: "GET",
    path: vmId + "/providers/microsoft.insights/metrics",
    query_params: {
      "api-version": "2018-01-01",
      "metricnames": "OS Disk IOPS Consumed Percentage,OS Disk Bandwidth Consumed Percentage,Data Disk IOPS Consumed Percentage,Data Disk Bandwidth Consumed Percentage",
      "timespan": timespan,
      "$filter": "LUN eq '*'",
      "aggregation": "Average,Maximum",
      "interval": "FULL",
    },
    headers: {
      "User-Agent": "RS Policies",
    },
    ignore_status: [400, 403, 404],
  }
EOS
end

datasource "ds_azure_disks_with_metrics" do
  run_script $js_azure_disks_with_metrics, $ds_azure_virtual_machines_with_metrics, $ds_azure_virtual_machines_with_disks
end

script "js_azure_disks_with_metrics", type: "javascript" do
  parameters "ds_azure_virtual_machines_with_metrics", "ds_azure_virtual_machines_with_disks"
  result "result"
  code <<-EOS
  function findMetricsForDataDisk(metrics, metricName, lun) {
    for (var i in metrics) {
      var metric = metrics[i]
      if (metric.name.value != metricName) continue;
      var correspondingTs = _.find(metric.timeseries, function(ts) {
        return (
          ts.metadatavalues[0].name.value === "lun"
          && parseInt(ts.metadatavalues[0].value) === lun
        )
      })
      return {
        average: correspondingTs.data[0].average,
        maximum: correspondingTs.data[0].maximum,
      }
    }
  }
  
  for (var i in ds_azure_virtual_machines_with_disks) {
    var vmWithDisk = ds_azure_virtual_machines_with_disks[i]
    var correspondingVmWithMetrics = _.find(ds_azure_virtual_machines_with_metrics, function(vmWithMt) { return vmWithMt.vmId.toLowerCase() === vmWithDisk.vmId.toLowerCase() })
    if (correspondingVmWithMetrics === undefined) continue;
    // OS disk
    for (var j in correspondingVmWithMetrics.metrics) {
      var metric = correspondingVmWithMetrics.metrics[j]
      if (metric.name.value === "OS Disk IOPS Consumed Percentage") {
        vmWithDisk.osDisk.iopsConsumedPctAvg = metric.timeseries[0].data[0].average
        vmWithDisk.osDisk.iopsConsumedPctMax = metric.timeseries[0].data[0].maximum
      }
      if (metric.name.value === "OS Disk Bandwidth Consumed Percentage") {
        vmWithDisk.osDisk.bandwithConsumedPctAvg = metric.timeseries[0].data[0].average
        vmWithDisk.osDisk.bandwithConsumedPctMax = metric.timeseries[0].data[0].maximum
      }
    }
    // Data disks
    for (var j in vmWithDisk.dataDisks) {
      var dataDisk = vmWithDisk.dataDisks[j]
      // IOPS
      var correspondingIopsMetrics = findMetricsForDataDisk(
        correspondingVmWithMetrics.metrics,
        "Data Disk IOPS Consumed Percentage",
        dataDisk.lun
      )
      dataDisk.iopsConsumedPctAvg = correspondingIopsMetrics.average
      dataDisk.iopsConsumedPctMax = correspondingIopsMetrics.maximum
      // Bandwith
      var correspondingBandwidthMetrics = findMetricsForDataDisk(
        correspondingVmWithMetrics.metrics,
        "Data Disk Bandwidth Consumed Percentage",
        dataDisk.lun
      )
      dataDisk.bandwithConsumedPctAvg = correspondingBandwidthMetrics.average
      dataDisk.bandwithConsumedPctMax = correspondingBandwidthMetrics.maximum
    }
  }

  var result = ds_azure_virtual_machines_with_disks
EOS
end

###############################################################################
# Policy
###############################################################################

policy "pol_azure_rightsize_managed_disks" do
  validate $ds_azure_disks_with_metrics do
    summary_template "There are {{ len data }} oversized Azure Managed Disks"
    check eq(size(data), 0)
    escalate $esc_email
    export do
      resource_level true
      field "id" do
        label "ID"
        path "vm_name"
      end
      field "vm_name" do
        label "Virtual Machine Name"
      end

      field "total_disk_space_mb" do
        label "Total disk space in megabytes"
      end

      field "used_disk_space_mb" do
        label "Used disk space in megabytes"
      end

      field "free_disk_space_mb" do
        label "Free disk space in megabytes"
      end

      field "used_disk_space_pct" do
        label "Used disk space percentage"
      end
    end
  end
end

###############################################################################
# Escalations
###############################################################################

escalation "esc_email" do
  automatic true
  label "Send Email"
  description "Send incident email."
  email $param_email
end

###############################################################################
# Cloud Workflow
###############################################################################

###############################################################################
# Meta Policy [alpha]
# Not intended to be modified or used by policy developers
###############################################################################

# If the meta_parent_policy_id is not set it will evaluate to an empty string and we will look for the policy itself,
# if it is set we will look for the parent policy.
# datasource "ds_get_policy" do
#   request do
#     auth $auth_flexera
#     host rs_governance_host
#     ignore_status [404]
#     path join(["/api/governance/projects/", rs_project_id, "/applied_policies/", switch(ne(meta_parent_policy_id,""), meta_parent_policy_id, policy_id) ])
#     header "Api-Version", "1.0"
#   end
#   result do
#     encoding "json"
#     field "id", jmes_path(response, "id")
#   end
# end

# datasource "ds_parent_policy_terminated" do
#   run_script $js_decide_if_self_terminate, $ds_get_policy, policy_id, meta_parent_policy_id
# end

# If the policy was applied by a meta_parent_policy we confirm it exists if it doesn't we confirm we are deleting
# This information is used in two places:
# - determining whether or not we make a delete call
# - determining if we should create an incident (we don't want to create an incident on the run where we terminate)
# script "js_decide_if_self_terminate", type: "javascript" do
#   parameters "found", "self_policy_id", "meta_parent_policy_id"
#   result "result"
#   code <<-EOS
#   var result
#   if (meta_parent_policy_id != "" && found.id == undefined) {
#     result = true
#   } else {
#     result = false
#   }
#   EOS
# end

# Two potentials ways to set this up:
# - this way and make a unneeded 'get' request when not deleting
# - make the delete request an interate and have it iterate over an empty array when not deleting and an array with one item when deleting
# script "js_make_terminate_request", type: "javascript" do
#   parameters "should_delete", "policy_id", "rs_project_id", "rs_governance_host"
#   result "request"
#   code <<-EOS

#   var request = {
#     auth:  'auth_flexera',
#     host: rs_governance_host,
#     path: "/api/governance/projects/" + rs_project_id + "/applied_policies/" + policy_id,
#     headers: {
#       "API-Version": "1.0",
#       "Content-Type":"application/json"
#     },
#   }

#   if (should_delete) {
#     request.verb = 'DELETE'
#   }
#   EOS
# end

# datasource "ds_terminate_self" do
#   request do
#     run_script $js_make_terminate_request, $ds_parent_policy_terminated, policy_id, rs_project_id, rs_governance_host
#   end
# end

# datasource "ds_is_deleted" do
#   run_script $js_check_deleted, $ds_terminate_self
# end

# This is just a way to have the check delete request connect to the farthest leaf from policy.
# We want the delete check to the first thing the policy does to avoid the policy erroring before it can decide whether or not it needs to self terminate
# Example a customer deletes a credential and then terminates the parent policy. We still want the children to self terminate
# The only way I could see this not happening is if the user who applied the parent_meta_policy was offboarded or lost policy access, the policies who are impersonating the user
# would not have access to self-terminate
# It may be useful for the backend to enable a mass terminate at some point for all meta_child_policies associated with an id.
# script "js_check_deleted", type: "javascript" do
#   parameters "response"
#   result "result"
#   code <<-EOS
#   result = {"path":"/"}
#   EOS
# end

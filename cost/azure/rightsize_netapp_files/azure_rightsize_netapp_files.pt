name "Azure Rightsize NetApp Files"
rs_pt_ver 20180301
type "policy"
short_description "Cheks for oversized NetApp Capacity Pools and suggest recommendations to save money. See the [README](https://github.com/flexera-public/policy_templates/tree/master/cost/azure/rightsize_netapp_files/) and [docs.flexera.com/flexera/EN/Automation](https://docs.flexera.com/flexera/EN/Automation/AutomationGS.htm) to learn more."
long_description ""
category "Cost"
severity "low"
default_frequency "weekly"
info(
  version: "1.0",
  provider: "Azure",
  service: "NetApp Files",
  policy_set: "Rightsize Storage",
  recommendation_type: "Usage Reduction"
)

###############################################################################
# Parameters
###############################################################################

parameter "param_email" do
  type "list"
  category "Policy Settings"
  label "Email Addresses"
  description "A list of email addresses to notify."
  default []
end

parameter "param_azure_endpoint" do
  type "string"
  category "Policy Settings"
  label "Azure Endpoint"
  description "Select the API endpoint to use for Azure. Use default value of management.azure.com unless using Azure China."
  allowed_values "management.azure.com", "management.chinacloudapi.cn"
  default "management.azure.com"
end

parameter "param_stats_underutil_threshold_pool_value" do
  type "number"
  category "Statistics"
  label "Capacity Pool Allocated Used Threshold (%)"
  description "The NetApp Files threshold that should be the new allocated used of a capacity pool and therefore be flagged for rightsizing."
  min_value 0
  max_value 100
  default 40
end

parameter "param_stats_underutil_threshold_volume_value" do
  type "number"
  category "Statistics"
  label "Volume Logical Size Threshold (%)"
  description "The NetApp Files threshold that should be the new logical size of a volume and therefore be flagged for rightsizing."
  min_value -1
  max_value 100
  default 40
end

parameter "param_exclusion_tags" do
  type "list"
  category "Filters"
  label "Exclusion Tags (Key:Value)"
  description "Cloud native tags to ignore managed disks that you don't want to consider for downsizing. Format: Key:Value"
  allowed_pattern /(^$)|([\w]?)+\:([\w]?)+/
  default []
end

parameter "param_subscriptions_allow_or_deny" do
  type "string"
  category "Filters"
  label "Allow/Deny Subscriptions"
  description "Allow or Deny entered Subscriptions"
  allowed_values "Allow", "Deny"
  default "Allow"
end

parameter "param_subscriptions_list" do
  type "list"
  category "Filters"
  label "Allow/Deny Subscriptions List"
  description "A list of allowed or denied Subscription IDs/names"
  default []
end

parameter "param_regions_allow_or_deny" do
  type "string"
  category "Filters"
  label "Allow/Deny Regions"
  description "Allow or deny entered regions. See the README for more details."
  allowed_values "Allow", "Deny"
  default "Allow"
end

parameter "param_regions_list" do
  type "list"
  category "Filters"
  label "Allow/Deny Regions List"
  description "A list of allowed or denied regions. See the README for more details."
  default []
end

parameter "param_min_savings" do
  type "number"
  category "Policy Settings"
  label "Minimum Savings Threshold"
  description "Minimum potential savings required to generate a recommendation"
  min_value 0
  default 0
end

parameter "param_recommendation_mode" do
  type "string"
  category "Statistics"
  label "Recommendation mode"
  description "Choose if resize pools with or without volumes."
  allowed_values "Resize Pools", "Resize Pools and Volumes"
  default "Resize Pools"
end

parameter "param_automatic_action" do
  type "list"
  category "Actions"
  label "Automatic Actions"
  description "When this value is set, this policy will automatically take the selected action."
  allowed_values ["Rightsize Underutilized Pools", "Rightsize Underutilized Volumes"]
  default []
end

###############################################################################
# Authentication
###############################################################################

credentials "auth_azure" do
  schemes "oauth2"
  label "Azure"
  description "Select the Azure Resource Manager Credential from the list."
  tags "provider=azure_rm"
end

credentials "auth_flexera" do
  schemes "oauth2"
  label "Flexera"
  description "Select Flexera One OAuth2 credentials"
  tags "provider=flexera"
end

###############################################################################
# Pagination
###############################################################################

pagination "pagination_azure" do
  get_page_marker do
    body_path "nextLink"
  end
  set_page_marker do
    uri true
  end
end

###############################################################################
# Datasources & Scripts
###############################################################################

datasource "ds_currency_reference" do
  request do
    host "raw.githubusercontent.com"
    path "/rightscale/policy_templates/master/cost/scheduled_reports/currency_reference.json"
    header "User-Agent", "RS Policies"
  end
end

datasource "ds_currency_code" do
  request do
    auth $auth_flexera
    host rs_optima_host
    path join(["/bill-analysis/orgs/", rs_org_id, "/settings/currency_code"])
    header "Api-Version", "0.1"
    header "User-Agent", "RS Policies"
    ignore_status [403]
  end
  result do
    encoding "json"
    field "id", jmes_path(response, "id")
    field "value", jmes_path(response, "value")
  end
end

datasource "ds_currency" do
  run_script $js_currency, $ds_currency_reference, $ds_currency_code
end

script "js_currency", type:"javascript" do
  parameters "ds_currency_reference", "ds_currency_code"
  result "result"
  code <<-EOS
  symbol = "$"
  separator = ","

  if (ds_currency_code['value'] != undefined) {
    if (ds_currency_reference[ds_currency_code['value']] != undefined) {
      symbol = ds_currency_reference[ds_currency_code['value']]['symbol']

      if (ds_currency_reference[ds_currency_code['value']]['t_separator'] != undefined) {
        separator = ds_currency_reference[ds_currency_code['value']]['t_separator']
      } else {
        separator = ""
      }
    }
  }

  result = {
    symbol: symbol,
    separator: separator
  }
EOS
end

datasource "ds_azure_subscriptions" do
  request do
    auth $auth_azure
    pagination $pagination_azure
    host $param_azure_endpoint
    path "/subscriptions/"
    query "api-version","2020-01-01"
    header "User-Agent", "RS Policies"
    # Header X-Meta-Flexera has no affect on datasource query, but is required for Meta Policies
    # Forces `ds_is_deleted` datasource to run first during policy execution
    header "Meta-Flexera", val($ds_is_deleted, "path")
  end
  result do
    encoding "json"
    collect jmes_path(response, "value[*]") do
      field "id", jmes_path(col_item, "subscriptionId")
      field "name", jmes_path(col_item, "displayName")
      field "state", jmes_path(col_item, "state")
    end
  end
end

datasource "ds_azure_subscriptions_filtered" do
  run_script $js_azure_subscriptions_filtered, $ds_azure_subscriptions, $param_subscriptions_allow_or_deny, $param_subscriptions_list
end

script "js_azure_subscriptions_filtered", type: "javascript" do
  parameters "ds_azure_subscriptions", "param_subscriptions_allow_or_deny", "param_subscriptions_list"
  result "result"
  code <<-EOS
  if (param_subscriptions_list.length > 0) {
    result = _.filter(ds_azure_subscriptions, function(subscription) {
      include_subscription = _.contains(param_subscriptions_list, subscription['id']) || _.contains(param_subscriptions_list, subscription['name'])

      if (param_subscriptions_allow_or_deny == "Deny") {
        include_subscription = !include_subscription
      }

      return include_subscription
    })
  } else {
    result = ds_azure_subscriptions
  }
EOS
end

script "js_objects_region_filtered", type: "javascript" do
  parameters "ds_objects", "param_regions_allow_or_deny", "param_regions_list"
  result "result"
  code <<-EOS
  if (param_regions_list.length > 0) {
    result = _.filter(ds_objects, function(o) {
      include_o = _.contains(param_regions_list, o.region)

      if (param_regions_allow_or_deny == "Deny") {
        include_o = !include_o
      }

      return include_o
    })
  } else {
    result = ds_objects
  }
EOS
end

script "js_objects_tag_filtered", type: "javascript" do
  parameters "ds_objects", "param_exclusion_tags"
  result "result"
  code <<-EOS
  if (param_exclusion_tags.length > 0) {
    result = _.reject(ds_objects, function(o) {
      o_tags = []

      if (typeof(o['tags']) == 'object') {
        _.each(Object.keys(o['tags']), function(key) {
          o_tags.push([key, ":", o['tags'][key]].join(''))
          o_tags.push([key, ":*"].join(''))
        })
      }

      exclude_o = false

      _.each(param_exclusion_tags, function(exclusion_tag) {
        if (_.contains(o_tags, exclusion_tag)) {
          exclude_o = true
        }
      })

      return exclude_o
    })
  } else {
    result = ds_objects
  }
EOS
end

datasource "ds_naf_accounts" do
  iterate $ds_azure_subscriptions_filtered
  request do
    auth $auth_azure
    host $param_azure_endpoint
    path join(["/subscriptions/", val(iter_item, "id"), "/providers/Microsoft.NetApp/netAppAccounts"])
    query "api-version", "2023-05-01"
  end
  result do
    encoding "json"
    collect jmes_path(response, "value[*]") do
      field "subscription_id", jmes_path(iter_item, "id")
      field "subscription_name", val(iter_item, "name")
      field "resource_group_name", get(4, split(jmes_path(col_item, "id"), "/"))
      field "region", jmes_path(col_item, "location")
      field "naf_account_name", jmes_path(col_item, "name")
      field "tags", jmes_path(col_item, "tags")
    end
  end
end

datasource "ds_naf_accounts_region_filtered" do
  run_script $js_objects_region_filtered, $ds_naf_accounts, $param_regions_allow_or_deny, $param_regions_list
end

datasource "ds_naf_accounts_tag_filtered" do
  run_script $js_objects_tag_filtered, $ds_naf_accounts_region_filtered, $param_exclusion_tags
end

datasource "ds_naf_capacity_pools" do
  iterate $ds_naf_accounts_tag_filtered
  request do
    auth $auth_azure
    host $param_azure_endpoint
    path join(["/subscriptions/", val(iter_item, "subscription_id"), "/resourceGroups/", val(iter_item, "resource_group_name"), "/providers/Microsoft.NetApp/netAppAccounts/", val(iter_item, "naf_account_name"), "/capacityPools"])
    query "api-version", "2023-05-01"
  end
  result do
    encoding "json"
    collect jmes_path(response, "value[*]") do
      field "subscription_id", jmes_path(iter_item, "subscription_id")
      field "subscription_name", jmes_path(iter_item, "subscription_name")
      field "resource_group_name", jmes_path(iter_item, "resource_group_name")
      field "service_type", first(split(jmes_path(col_item, "type"), "/"))
      field "naf_account_name", jmes_path(iter_item, "naf_account_name")
      field "naf_pool_id", jmes_path(col_item, "id")
      field "naf_pool_name", last(split(jmes_path(col_item, "name"), "/"))
      field "naf_pool_size", jmes_path(col_item, "properties.size")
      field "naf_pool_region", jmes_path(col_item, "location")
      field "naf_pool_service", jmes_path(col_item, "properties.serviceLevel")
      field "naf_pool_encryption", jmes_path(col_item, "properties.encryptionType")
      field "naf_pool_cool", jmes_path(col_item, "properties.coolAccess")
      field "tags", jmes_path(col_item, "tags")
    end
  end
end

datasource "ds_naf_capacity_pools_tag_filtered" do
  run_script $js_objects_tag_filtered, $ds_naf_capacity_pools, $param_exclusion_tags
end

datasource "ds_naf_pool_metrics" do
  iterate $ds_naf_capacity_pools_tag_filtered
  request do
    run_script $js_naf_pool_metrics_request, val(iter_item, "naf_pool_id"), $param_azure_endpoint
  end
  result do
    encoding "json"
    field "subscription_id", jmes_path(iter_item, "subscription_id")
    field "subscription_name", jmes_path(iter_item, "subscription_name")
    field "resource_group_name", jmes_path(iter_item, "resource_group_name")
    field "service_type", jmes_path(iter_item, "service_type")
    field "naf_account_name", jmes_path(iter_item, "naf_account_name")
    field "naf_pool_id", jmes_path(iter_item, "naf_pool_id")
    field "naf_pool_name", jmes_path(iter_item, "naf_pool_name")
    field "naf_pool_size", jmes_path(iter_item, "naf_pool_size")
    field "naf_pool_region", jmes_path(iter_item, "naf_pool_region")
    field "naf_pool_service", jmes_path(iter_item, "naf_pool_service")
    field "naf_pool_encryption", jmes_path(iter_item, "naf_pool_encryption")
    field "naf_pool_cool", jmes_path(iter_item, "naf_pool_cool")
    field "tags", jmes_path(iter_item, "tags")
    field "naf_pool_metrics", jmes_path(response, "value[*]")
  end
end

script "js_naf_pool_metrics_request", type: "javascript" do
  parameters "poolId", "param_azure_endpoint"
  result "request"
  code <<-EOS
  var end_date = new Date()

  var start_date = new Date(end_date)
  start_date.setHours(end_date.getHours() - 12)
  start_date.setMilliseconds(0)
  start_date.setSeconds(0)
  start_date.setMinutes(0)

  timespan = start_date.toISOString() + "/" + end_date.toISOString()

  var request = {
    auth: "auth_azure",
    host: param_azure_endpoint,
    verb: "GET",
    path: poolId + "/providers/microsoft.insights/metrics",
    query_params: {
      "api-version": "2018-01-01",
      "metricnames": "VolumePoolAllocatedUsed,VolumePoolTotalLogicalSize,VolumePoolAllocatedSize",
      "timespan": timespan,
    },
    headers: {
      "User-Agent": "RS Policies",
    },
    ignore_status: [400, 403, 404],
  }
EOS
end

datasource "ds_naf_get_costs" do
  request do
    run_script $js_naf_get_costs, $ds_naf_capacity_pools_tag_filtered
  end
  result do
    encoding "json"
    collect jmes_path(response, "Items[*]") do
      field "retailPrice", jmes_path(col_item, "retailPrice")
      field "region", jmes_path(col_item, "armRegionName")
      field "skuName", jmes_path(col_item, "skuName")
    end
  end
end

script "js_naf_get_costs", type: "javascript" do
  parameters "ds_naf_capacity_pools_tag_filtered"
  result "request"
  code <<-EOS
  var locations = []
  var location = ""
  _.each(ds_naf_capacity_pools_tag_filtered, function(pool){
    locations.push("armRegionName eq '" + pool.naf_pool_region + "'")
  })
  if (locations.length > 0) {
    location = " and (" + locations.join(" or ") + ")"
  }
  var request = {
    host: "prices.azure.com"
    path: "/api/retail/prices"
    query_params: {
      "api-version": "2021-10-01-preview"
      "$filter": "serviceName eq 'Azure NetApp Files'" + location + " and priceType eq 'Consumption' and endsWith(meterName, 'Capacity') and (contains(skuName, 'Standard') or contains(skuName, 'Premium') or contains(skuName, 'Ultra'))"
    }
  }
EOS
end

datasource "ds_naf_volumes" do
  iterate $ds_naf_capacity_pools_tag_filtered
  request do
    auth $auth_azure
    host $param_azure_endpoint
    path join(["/subscriptions/", val(iter_item, "subscription_id"), "/resourceGroups/", val(iter_item, "resource_group_name"), "/providers/Microsoft.NetApp/netAppAccounts/", val(iter_item, "naf_account_name"), "/capacityPools/", val(iter_item, "naf_pool_name"), "/volumes"])
    query "api-version", "2023-05-01"
  end
  result do
    encoding "json"
    collect jmes_path(response, "value[*]") do
      field "subscription_id", jmes_path(iter_item, "subscription_id")
      field "resource_group_name", jmes_path(iter_item, "resource_group_name")
      field "naf_account_name", jmes_path(iter_item, "naf_account_name")
      field "naf_pool_id", jmes_path(iter_item, "naf_pool_id")
      field "naf_pool_name", jmes_path(iter_item, "naf_pool_name")
      field "naf_pool_size", jmes_path(iter_item, "naf_pool_size")
      field "naf_pool_region", jmes_path(iter_item, "naf_pool_region")
      field "naf_pool_service", jmes_path(iter_item, "naf_pool_service")
      field "naf_pool_encryption", jmes_path(iter_item, "naf_pool_encryption")
      field "naf_pool_cool", jmes_path(iter_item, "naf_pool_cool")
      field "naf_volume_name", jmes_path(col_item, "name")
      field "naf_volume_id", jmes_path(col_item, "id")
      field "naf_usage_threshold", jmes_path(col_item, "properties.usageThreshold")
      field "tags", jmes_path(col_item, "tags")
    end
  end
end

datasource "ds_naf_volumes_tag_filtered" do
  run_script $js_objects_tag_filtered, $ds_naf_volumes, $param_exclusion_tags
end

datasource "ds_naf_volume_metrics" do
  iterate $ds_naf_volumes
  request do
    run_script $js_naf_volume_metrics_request, val(iter_item, "naf_volume_id"), $param_azure_endpoint
  end
  result do
    encoding "json"
    field "subscription_id", jmes_path(iter_item, "subscription_id")
    field "resource_group_name", jmes_path(iter_item, "resource_group_name")
    field "naf_account_name", jmes_path(iter_item, "naf_account_name")
    field "naf_pool_id", jmes_path(iter_item, "naf_pool_id")
    field "naf_pool_name", jmes_path(iter_item, "naf_pool_name")
    field "naf_pool_size", jmes_path(iter_item, "naf_pool_size")
    field "naf_pool_region", jmes_path(iter_item, "naf_pool_region")
    field "naf_pool_service", jmes_path(iter_item, "naf_pool_service")
    field "naf_pool_encryption", jmes_path(iter_item, "naf_pool_encryption")
    field "naf_pool_cool", jmes_path(iter_item, "naf_pool_cool")
    field "naf_volume_name", jmes_path(iter_item, "naf_volume_name")
    field "naf_volume_id", jmes_path(iter_item, "naf_volume_id")
    field "naf_usage_threshold", jmes_path(iter_item, "naf_usage_threshold")
    field "tags", jmes_path(iter_item, "tags")
    field "naf_volume_metrics", jmes_path(response, "value[*]")
  end
end

script "js_naf_volume_metrics_request", type: "javascript" do
  parameters "volId", "param_azure_endpoint"
  result "request"
  code <<-EOS
  var end_date = new Date()

  var start_date = new Date(end_date)
  start_date.setHours(end_date.getHours() - 12)
  start_date.setMilliseconds(0)
  start_date.setSeconds(0)
  start_date.setMinutes(0)

  timespan = start_date.toISOString() + "/" + end_date.toISOString()

  var request = {
    auth: "auth_azure",
    host: param_azure_endpoint,
    verb: "GET",
    path: volId + "/providers/microsoft.insights/metrics",
    query_params: {
      "api-version": "2018-01-01",
      "metricnames": "VolumeLogicalSize,VolumeConsumedSizePercentage",
      "timespan": timespan,
    },
    headers: {
      "User-Agent": "RS Policies",
    },
    ignore_status: [400, 403, 404],
  }
EOS
end

datasource "ds_naf_oversized_pools" do
  run_script $js_naf_oversized_pools, $ds_naf_pool_metrics, $param_stats_underutil_threshold_pool_value, $ds_naf_get_costs, $param_min_savings, $ds_currency, $param_recommendation_mode
end

script "js_naf_oversized_pools", type: "javascript" do
  parameters "ds_naf_pool_metrics", "param_stats_underutil_threshold_pool_value", "ds_naf_get_costs", "param_min_savings", "ds_currency", "param_recommendation_mode"
  result "result"
  code <<-EOS

  //Variables

  result = []
  var minPoolSize = 2048
  var maxPoolSize = 1024000
  var total_savings = 0.0

  //Functions

  function formatNumber(number, separator) {
    var numString = number.toString()
    var values = numString.split(".")
    var formatted_number = ''
    while (values[0].length > 3) {
      var chunk = values[0].substr(-3)
      values[0] = values[0].substr(0, values[0].length - 3)
      formatted_number = separator + chunk + formatted_number
    }
    if (values[0].length > 0) { formatted_number = values[0] + formatted_number }
    if (values[1] == undefined) { return formatted_number }
    return formatted_number + "." + values[1]
  }

  function bytesToGibibytes(bytes) {
    return Math.round(bytes * 9.3132257461548e-10)
  }

  function poolCanBeResized(size, recommendedSize) {
    if (size == minPoolSize && recommendedSize < minPoolSize) {
      return false
    }
    if (size == maxPoolSize && recommendedSize > maxPoolSize) {
      return false
    }
    return true
  }

  function getMonthlyCost(pool, poolSize) {
    var monthlyCost = 0.0
    _.each(ds_naf_get_costs, function(cost){
      if(pool.naf_pool_region == cost.region) {
        if (pool.naf_pool_service == "Standard" && cost['skuName'].indexOf("Standard") > -1) {
          if (pool.naf_pool_cool == false && pool.naf_pool_encryption == "Single" && cost['skuName'] == "Standard") {
            monthlyCost = cost.retailPrice * poolSize * 730
          } else if (pool.naf_pool_cool == true && cost['skuName'].indexOf("Cool Access") > -1) {
            monthlyCost = cost.retailPrice * poolSize * 730
          } else if (pool.naf_pool_encryption == "Double" && cost['skuName'].indexOf("Double") > -1) {
            monthlyCost = cost.retailPrice * poolSize * 730
          }
        }
        if (pool.naf_pool_service == "Premium" && cost['skuName'].indexOf("Premium") > -1) {
          if (pool.naf_pool_encryption == "Single" && cost['skuName'] == "Premium") {
            monthlyCost = cost.retailPrice * poolSize * 730
          } else if (pool.naf_pool_encryption == "Double" && cost['skuName'].indexOf("Double") > -1) {
            monthlyCost = cost.retailPrice * poolSize * 730
          }
        }
        if (pool.naf_pool_service == "Ultra" && cost['skuName'].indexOf("Ultra") > -1) {
          if (pool.naf_pool_encryption == "Single" && cost['skuName'] == "Ultra") {
            monthlyCost = cost.retailPrice * poolSize * 730
          } else if (pool.naf_pool_encryption == "Double" && cost['skuName'].indexOf("Double") > -1) {
            monthlyCost = cost.retailPrice * poolSize * 730
          }
        }
      }
    })
    return monthlyCost
  }

  // Main Logic

  if (param_recommendation_mode == "Resize Pools") {
    _.each(ds_naf_pool_metrics, function(pool){
      _.each(pool.naf_pool_metrics, function (metric) {
        filteredTimeseries = _.filter(metric.timeseries[0].data, function(point) { return point.average != undefined })
        var lastPointInTS = _.last(filteredTimeseries).average
        switch (metric.name.value) {
          case "VolumePoolAllocatedUsed":
            pool.consumedSize = bytesToGibibytes(lastPointInTS)
            break;
          case "VolumePoolAllocatedSize":
            pool.allocatedSize = bytesToGibibytes(lastPointInTS)
            break;
        }
      })
      if (pool.allocatedSize != undefined && pool.consumedSize != undefined) {
        var poolConsumedPercentage = Math.round(pool.consumedSize * 100 / pool.allocatedSize)
        if (poolConsumedPercentage != param_stats_underutil_threshold_pool_value) {
          var poolRecommendedSize = Math.round(pool.consumedSize * 100 / param_stats_underutil_threshold_pool_value)
          if (poolCanBeResized(pool.allocatedSize, poolRecommendedSize)) {
            if (poolRecommendedSize < minPoolSize) {
              poolRecommendedSize = minPoolSize
            }
            if (poolRecommendedSize > maxPoolSize) {
              poolRecommendedSize = maxPoolSize
            }

            var allocatedSizeCost = getMonthlyCost(pool, pool.allocatedSize)
            var recommendedSizeCost = getMonthlyCost(pool, poolRecommendedSize)

            // If Recommended Size costs more than allocatedSize, savings will be 0
            var savings = (allocatedSizeCost-recommendedSizeCost) < 0 ? 0 : (allocatedSizeCost-recommendedSizeCost)

            var recommendedReduction = pool.allocatedSize - poolRecommendedSize
            var recommendationDetails = "Pool size reduction is recommended from " + pool.allocatedSize + " GiB to " + poolRecommendedSize + " GiB, that will result in " + parseFloat(savings.toFixed(3)) + " monthly savings."

            total_savings += savings
            tags = []
            if (typeof(pool.tags) == 'object') {
              _.each(Object.keys(pool.tags), function(key) {
                tags.push([key, "=", pool.tags[key]].join(''))
              })
            }
            result.push({
              accountID: pool['subscription_id'],
              accountName: pool['subscription_name'],
              resourceID: pool['naf_pool_id'],
              resourceGroup: pool['resource_group_name'],
              resourceName: pool['naf_pool_name'],
              poolSize: pool['allocatedSize'],
              poolAllocatedUsed: pool['consumedSize'],
              poolConsumedPercentage: poolConsumedPercentage,
              threshold: param_stats_underutil_threshold_pool_value,
              recommendedReduction: recommendedReduction,
              poolRecommendedSize: poolRecommendedSize,
              recommendationDetails: recommendationDetails,
              savings: parseFloat(savings.toFixed(3))
              id: pool['naf_pool_id'],
              region: pool['naf_pool_region'],
              resourceType: pool['naf_pool_service'],
              tags: tags,
              savingsCurrency: "USD",
              service: pool['service_type'],
            })
          }
        }
      }
    })

    if (result.length > 0 && total_savings >= param_min_savings) {
      var savings_message = ds_currency['symbol'] + ' ' + formatNumber(parseFloat(total_savings).toFixed(2), ds_currency['separator'])
      result[0]['total_savings'] = savings_message
    } else {
      result = []
    }
  }
EOS
end


datasource "ds_naf_oversized_volumes" do
  run_script $js_naf_oversized_volumes, $ds_naf_volume_metrics, $ds_naf_pool_metrics, $param_stats_underutil_threshold_pool_value, $param_stats_underutil_threshold_volume_value, $ds_naf_get_costs, $param_min_savings, $ds_currency, $param_recommendation_mode
end

script "js_naf_oversized_volumes", type: "javascript" do
  parameters "ds_naf_volume_metrics", "ds_naf_pool_metrics", "param_stats_underutil_threshold_pool_value", "param_stats_underutil_threshold_volume_value", "ds_naf_get_costs", "param_min_savings", "ds_currency", "param_recommendation_mode"
  result "result"
  code <<-EOS

  // Variables

  result = []
  var minPoolSize = 2048
  var maxPoolSize = 1024000
  var minVolSize = 100
  var maxVolSize = 512000
  var total_savings = 0.0

  // Functions

  function poolCanBeResized(size, recommendedSize) {
    if (size == minPoolSize && recommendedSize < minPoolSize) {
      return false
    }
    if (size == maxPoolSize && recommendedSize > maxPoolSize) {
      return false
    }
    return true
  }

  function getMonthlyCost(pool, poolSize) {
    var monthlyCost = 0.0
    _.each(ds_naf_get_costs, function(cost){
      if(pool.naf_pool_region == cost.region) {
        if (pool.naf_pool_service == "Standard" && cost['skuName'].indexOf("Standard") > -1) {
          if (pool.naf_pool_cool == false && pool.naf_pool_encryption == "Single" && cost['skuName'] == "Standard") {
            monthlyCost = cost.retailPrice * poolSize * 730
          } else if (pool.naf_pool_cool == true && cost['skuName'].indexOf("Cool Access") > -1) {
            monthlyCost = cost.retailPrice * poolSize * 730
          } else if (pool.naf_pool_encryption == "Double" && cost['skuName'].indexOf("Double") > -1) {
            monthlyCost = cost.retailPrice * poolSize * 730
          }
        }
        if (pool.naf_pool_service == "Premium" && cost['skuName'].indexOf("Premium") > -1) {
          if (pool.naf_pool_encryption == "Single" && cost['skuName'] == "Premium") {
            monthlyCost = cost.retailPrice * poolSize * 730
          } else if (pool.naf_pool_encryption == "Double" && cost['skuName'].indexOf("Double") > -1) {
            monthlyCost = cost.retailPrice * poolSize * 730
          }
        }
        if (pool.naf_pool_service == "Ultra" && cost['skuName'].indexOf("Ultra") > -1) {
          if (pool.naf_pool_encryption == "Single" && cost['skuName'] == "Ultra") {
            monthlyCost = cost.retailPrice * poolSize * 730
          } else if (pool.naf_pool_encryption == "Double" && cost['skuName'].indexOf("Double") > -1) {
            monthlyCost = cost.retailPrice * poolSize * 730
          }
        }
      }
    })
    return monthlyCost
  }

  function formatNumber(number, separator) {
    var numString = number.toString()
    var values = numString.split(".")
    var formatted_number = ''

    while (values[0].length > 3) {
      var chunk = values[0].substr(-3)
      values[0] = values[0].substr(0, values[0].length - 3)
      formatted_number = separator + chunk + formatted_number
    }

    if (values[0].length > 0) { formatted_number = values[0] + formatted_number }
    if (values[1] == undefined) { return formatted_number }

    return formatted_number + "." + values[1]
  }

  function bytesToGibibytes(bytes) {
    return Math.round(bytes * 9.3132257461548e-10)
  }

  function volumeCanBeResized(size, recommendedSize) {
    if (size == minVolSize && recommendedSize < minVolSize) {
      return false
    }
    if (size == maxVolSize && recommendedSize > maxVolSize) {
      return false
    }
    return true
  }

  // Main logic

  if (param_recommendation_mode == "Resize Pools and Volumes") {
    _.each(ds_naf_volume_metrics, function(volume) {
      volume.volume_allocated_size = bytesToGibibytes(volume.naf_usage_threshold)
      _.each(volume.naf_volume_metrics, function(metric) {
        filteredTimeseries = _.filter(metric.timeseries[0].data, function(point) { return point.average != undefined })
        var lastPointInTS = _.last(filteredTimeseries).average
        switch (metric.name.value) {
          case "VolumeLogicalSize":
            volume.volume_logical_size = bytesToGibibytes(lastPointInTS)
            break;
          case "VolumeConsumedSizePercentage":
            volume.volume_consumed_size_percentage = Math.round(lastPointInTS)
            break;
        }
      })

      // Check if volume contains required metrics info
      volume.recommendedAllocatedSize = volume.volume_allocated_size
      if (volume.volume_logical_size != undefined && volume.volume_allocated_size != undefined && volume.volume_consumed_size_percentage != undefined) {
        if (volume.volume_consumed_size_percentage != param_stats_underutil_threshold_volume_value) {
          var recommendedVolumeAllocatedSize = volume.volume_logical_size * 100 / param_stats_underutil_threshold_volume_value
          if (volumeCanBeResized(volume.volume_allocated_size, recommendedVolumeAllocatedSize)) {
            if (recommendedVolumeAllocatedSize < minVolSize) {
              recommendedVolumeAllocatedSize = minVolSize
            }
            if (recommendedVolumeAllocatedSize > maxVolSize) {
              recommendedVolumeAllocatedSize = maxVolSize
            }
            volume.recommendedAllocatedSize = recommendedVolumeAllocatedSize
          }
        }
      }
    })
    _.each(ds_naf_pool_metrics, function(pool){
      pool.naf_pool_volumes = []
      var recommendedPoolAllocatedUsed = 0
      _.each(ds_naf_volume_metrics, function(volume) {
        if(pool.naf_pool_id == volume.naf_pool_id) {
          if (volume.recommendedAllocatedSize != volume.volume_allocated_size) { pool.naf_pool_volumes.push(volume) }
          recommendedPoolAllocatedUsed += volume.recommendedAllocatedSize
        }
      })
      _.each(pool.naf_pool_metrics, function (metric) {
        filteredTimeseries = _.filter(metric.timeseries[0].data, function(point) { return point.average != undefined })
        var lastPointInTS = _.last(filteredTimeseries).average
        switch (metric.name.value) {
          case "VolumePoolAllocatedUsed":
            pool.consumedSize = bytesToGibibytes(lastPointInTS)
            break;
          case "VolumePoolAllocatedSize":
            pool.allocatedSize = bytesToGibibytes(lastPointInTS)
            break;
        }
      })
      if (pool.allocatedSize != undefined && pool.consumedSize != undefined) {
        var poolConsumedPercentage = Math.round(recommendedPoolAllocatedUsed * 100 / pool.allocatedSize)
        var poolOldConsumedPercentage = Math.round(pool.consumedSize * 100 / pool.allocatedSize)
        if (poolConsumedPercentage != param_stats_underutil_threshold_pool_value) {
          var poolRecommendedSize = Math.round(recommendedPoolAllocatedUsed * 100 / param_stats_underutil_threshold_pool_value)
          if (poolCanBeResized(pool.allocatedSize, poolRecommendedSize)) {
            if (poolRecommendedSize < minPoolSize) {
              poolRecommendedSize = minPoolSize
            }
            if (poolRecommendedSize > maxPoolSize) {
              poolRecommendedSize = maxPoolSize
            }

            var allocatedSizeCost = getMonthlyCost(pool, pool.allocatedSize)
            var recommendedSizeCost = getMonthlyCost(pool, poolRecommendedSize)

            // If Recommended Size costs more than allocatedSize, savings will be 0
            var savings = (allocatedSizeCost-recommendedSizeCost) < 0 ? 0 : (allocatedSizeCost-recommendedSizeCost)

            var recommendedReduction = pool.allocatedSize - poolRecommendedSize
            var recommendationDetails = "Pool size reduction is recommended from " + pool.allocatedSize + " GiB to " + poolRecommendedSize + " GiB, that will result in " + parseFloat(savings.toFixed(3)) + " monthly savings."

            total_savings += savings
            tags = []
            if (typeof(pool.tags) == 'object') {
              _.each(Object.keys(pool.tags), function(key) {
                tags.push([key, "=", pool.tags[key]].join(''))
              })
            }
            volumeRecommendedSizes = []
            _.each(pool.naf_pool_volumes, function(vol) {
              volumeRecommendedSizes.push([vol.naf_volume_name, "=", vol.recommendedAllocatedSize].join(""))
            })
            result.push({
              accountID: pool['subscription_id'],
              accountName: pool['subscription_name'],
              resourceID: pool['naf_pool_id'],
              resourceGroup: pool['resource_group_name'],
              resourceName: pool['naf_pool_name'],
              poolSize: pool['allocatedSize'],
              poolAllocatedUsed: pool['consumedSize'],
              poolOldConsumedPercentage: poolOldConsumedPercentage,
              volumeThreshold: param_stats_underutil_threshold_volume_value,
              recommendedPoolAllocatedUsed: recommendedPoolAllocatedUsed,
              poolConsumedPercentage: poolConsumedPercentage,
              threshold: param_stats_underutil_threshold_pool_value,
              recommendedReduction: recommendedReduction,
              poolRecommendedSize: poolRecommendedSize,
              recommendationDetails: recommendationDetails,
              savings: parseFloat(savings.toFixed(3))
              id: pool['naf_pool_id'],
              region: pool['naf_pool_region'],
              resourceType: pool['naf_pool_service'],
              tags: tags,
              savingsCurrency: "USD",
              service: pool['service_type'],
              volumeRecommendedSizes: volumeRecommendedSizes,
            })
          }
        }
      }
    })

    if (result.length > 0 && total_savings >= param_min_savings) {
      var savings_message = ds_currency['symbol'] + ' ' + formatNumber(parseFloat(total_savings).toFixed(2), ds_currency['separator'])
      result[0]['total_savings'] = savings_message
    } else {
      result = []
    }
  }
EOS
end

###############################################################################
# Policy
###############################################################################

policy "pol_azure_rightsize_netapp_files" do
  validate $ds_naf_oversized_pools do
    summary_template "There are {{ len data }} oversized Azure NetApp File Capacity Pools"
    detail_template <<-'EOS'
    **Potential Monthly Savings:** {{ with index data 0 }}{{ .total_savings }}{{ end }}
    EOS
    # Policy check fails and incident is created only if data is not empty and the Parent Policy has not been terminated
    check logic_or($ds_parent_policy_terminated, eq(size(data), 0))
    escalate $esc_email
    escalate $esc_rightsize_pools
    export do
      resource_level true
      field "accountID" do
        label "Account ID"
      end
      field "accountName" do
        label "Account Name"
      end
      field "resourceGroup" do
        label "Resource Group"
      end
      field "service" do
        label "Service"
      end
      field "resourceID" do
        label "Resource ID"
      end
      field "resourceName" do
        label "Resource Name"
      end
      field "resourceType" do
        label "Resource Type"
      end
      field "region" do
        label "Region"
      end
      field "tags" do
        label "Tags"
      end
      field "size" do
        label "Capacity Pool Size (GiB)"
        path "poolSize"
      end
      field "poolAllocatedUsed" do
        label "Capacity Pool Allocated Used (GiB)"
      end
      field "poolConsumedPercentage" do
        label "Capacity Pool Allocated Used Percentage (%)"
      end
      field "threshold" do
        label "Capacity Pool Allocated Used Threshold (%)"
      end
      field "recommendedReduction" do
        label "Recommended Capacity Pool Size Reduction (GiB)"
      end
      field "poolRecommendedSize" do
        label "Recommended Capacity Pool Size (GiB)"
      end
      field "savings" do
        label "Estimated Monthly Savings"
      end
      field "savingsCurrency" do
        label "Savings Currency"
      end
      field "recommendationDetails" do
        label "Recommendation Details"
      end
      field "id" do
        label "ID"
      end
    end
  end
  validate $ds_naf_oversized_volumes do
    summary_template "There are {{ len data }} oversized Azure NetApp File Capacity Pools"
    detail_template <<-'EOS'
    **Potential Monthly Savings:** {{ with index data 0 }}{{ .total_savings }}{{ end }}
    EOS
    # Policy check fails and incident is created only if data is not empty and the Parent Policy has not been terminated
    check logic_or($ds_parent_policy_terminated, eq(size(data), 0))
    escalate $esc_email
    export do
      resource_level true
      field "accountID" do
        label "Account ID"
      end
      field "accountName" do
        label "Account Name"
      end
      field "resourceGroup" do
        label "Resource Group"
      end
      field "service" do
        label "Service"
      end
      field "resourceID" do
        label "Resource ID"
      end
      field "resourceName" do
        label "Resource Name"
      end
      field "resourceType" do
        label "Resource Type"
      end
      field "region" do
        label "Region"
      end
      field "tags" do
        label "Tags"
      end
      field "size" do
        label "Capacity Pool Size (GiB)"
        path "poolSize"
      end
      field "poolAllocatedUsed" do
        label "Capacity Pool Allocated Used (GiB)"
      end
      field "poolOldConsumedPercentage" do
        label "Capacity Pool Allocated Used Percentage (GiB)"
      end
      field "volumeThreshold" do
        label "Volume Logical Size Threshold (%)"
      end
      field "recommendedPoolAllocatedUsed" do
        label "Recommended Capacity Pool Allocated Used (GiB)"
      end
      field "poolConsumedPercentage" do
        label "New Capacity Pool Allocated Used Percentage (%)"
      end
      field "threshold" do
        label "Capacity Pool Allocated Used Threshold (%)"
      end
      field "recommendedReduction" do
        label "Recommended Capacity Pool Size Reduction (GiB)"
      end
      field "poolRecommendedSize" do
        label "Recommended Capacity Pool Size (GiB)"
      end
      field "volumeRecommendedSizes" do
        label "Recommended Capacity Volume Sizes (GiB)"
      end
      field "savings" do
        label "Estimated Monthly Savings"
      end
      field "savingsCurrency" do
        label "Savings Currency"
      end
      field "recommendationDetails" do
        label "Recommendation Details"
      end
      field "id" do
        label "ID"
      end
    end
  end
end

###############################################################################
# Escalations
###############################################################################

escalation "esc_email" do
  automatic true
  label "Send Email"
  description "Send incident email."
  email $param_email
end

escalation "esc_rightsize_pools" do
  automatic contains($param_automatic_action, "Rightsize Underutilized Pools")
  label "Rightsize Underutilized Pools"
  description "Approval to rightsize all the selected pools"
  run "set_pool_sizes", data, $param_azure_endpoint
end

###############################################################################
# Cloud Workflow
###############################################################################

define handle_error() do
  if !$$errors
    $$errors = []
  end
  $$errors << $_error["type"] + ": " + $_error["message"]
  # We check for errors at the end, and raise them all together
  # Skip errors handled by this definition
  $_error_behavior = "skip"
end

define set_pool_size($pool_id, $size_TiB, $param_azure_endpoint) return $response do
  $url = $param_azure_endpoint + $pool_id + "api-version=2023-05-01"
  task_label("PATCH" + $url)

  # $response = http_request(
  #   auth: $$auth_azure,
  #   https: true,
  #   verb: "patch",
  #   host: $param_azure_endpoint,
  #   href: $pool_id,
  #   query_strings: { "api-version": "2023-05-01" },
  #   body: {
  #     "properties": {
  #       "size": $size_TiB
  #     }
  #   }
  # )

  task_label("Patch Azure NetApp capacity pool response: " + $pool_id + " " + to_json($response))
  $$all_responses << to_json({ "req": "PATCH " + $url, "resp": $response })

  if $response["code"] != 204 && $response["code"] != 202 && $response["code"] != 200
    raise "Unexpected response patching Azure NetApp capacity pool: " + $pool_id + " " + to_json($response)
  else
    task_label("Patch Azure NetApp capacity pool successful: " + $pool_id)
  end
end

define set_pool_sizes($data, $param_azure_endpoint) return $$all_responses do
  $$all_responses = []

  foreach $pool in $data do
    sub on_error: handle_error() do
      $recommended_size = $pool["poolRecommendedSize"] / 1024 * 1099511627776
      call set_pool_size($pool["resourceID"], $recommended_size, $param_azure_endpoint) retrieve $set_size_response
    end
  end

  if inspect($$errors) != "null"
    raise join($$errors, "\n")
  end
end

# define set_volume_size($vol_id, $size_GiB, $param_azure_endpoint) return $response do
#   $url = $param_azure_endpoint + $vol_id + "api-version=2023-05-01"

#   task_label("PATCH" + $url)

#   $response = http_request(
#     auth: $$auth_azure,
#     https: true,
#     verb: "patch",
#     host: $param_azure_endpoint,
#     href: $vol_id,
#     query_strings: { "api-version": "2023-05-01" },
#     body: {
#       "properties": {
#         "size": $size_TiB
#       }
#     }
#   )

#   task_label("Patch Azure NetApp volume response: " + $vol_id + " " + to_json($response))
#   $$all_responses << to_json({ "req": "PATCH " + $url, "resp": $response })

#   if $response["code"] != 204 && $response["code"] != 202 && $response["code"] != 200
#     raise "Unexpected response patching Azure NetApp volume: " + $vol_id + " " + to_json($response)
#   else
#     task_label("Patch Azure NetApp volume successful: " + $vol_id)
#   end
# end

# define set_volume_sizes($data, $param_azure_endpoint) return $$all_responses do
#   $$all_responses = []

#   foreach $pool in $data do
#     sub on_error: handle_error() do
#       $recommended_size = $pool["poolRecommendedSize"] / 1024 * 1099511627776
#       call set_pool_size($pool["resourceID"], $recommended_size, $param_azure_endpoint) retrieve $set_size_response
#     end
#   end

#   if inspect($$errors) != "null"
#     raise join($$errors, "\n")
#   end
# end

###############################################################################
# Meta Policy [alpha]
# Not intended to be modified or used by policy developers
###############################################################################

# If the meta_parent_policy_id is not set it will evaluate to an empty string and we will look for the policy itself,
# if it is set we will look for the parent policy.
datasource "ds_get_policy" do
  request do
    auth $auth_flexera
    host rs_governance_host
    ignore_status [404]
    path join(["/api/governance/projects/", rs_project_id, "/applied_policies/", switch(ne(meta_parent_policy_id,""), meta_parent_policy_id, policy_id) ])
    header "Api-Version", "1.0"
  end
  result do
    encoding "json"
    field "id", jmes_path(response, "id")
  end
end


datasource "ds_parent_policy_terminated" do
  run_script $js_decide_if_self_terminate, $ds_get_policy, policy_id, meta_parent_policy_id
end

# If the policy was applied by a meta_parent_policy we confirm it exists if it doesn't we confirm we are deleting
# This information is used in two places:
# - determining whether or not we make a delete call
# - determining if we should create an incident (we don't want to create an incident on the run where we terminate)
script "js_decide_if_self_terminate", type: "javascript" do
  parameters "found", "self_policy_id", "meta_parent_policy_id"
  result "result"
  code <<-EOS
  var result
  if (meta_parent_policy_id != "" && found.id == undefined) {
    result = true
  } else {
    result = false
  }
  EOS
end

# Two potentials ways to set this up:
# - this way and make a unneeded 'get' request when not deleting
# - make the delete request an interate and have it iterate over an empty array when not deleting and an array with one item when deleting
script "js_make_terminate_request", type: "javascript" do
  parameters "should_delete", "policy_id", "rs_project_id", "rs_governance_host"
  result "request"
  code <<-EOS

  var request = {
    auth:  'auth_flexera',
    host: rs_governance_host,
    path: "/api/governance/projects/" + rs_project_id + "/applied_policies/" + policy_id,
    headers: {
      "API-Version": "1.0",
      "Content-Type":"application/json"
    },
  }

  if (should_delete) {
    request.verb = 'DELETE'
  }
  EOS
end

datasource "ds_terminate_self" do
  request do
    run_script $js_make_terminate_request, $ds_parent_policy_terminated, policy_id, rs_project_id, rs_governance_host
  end
end

datasource "ds_is_deleted" do
  run_script $js_check_deleted, $ds_terminate_self
end

# This is just a way to have the check delete request connect to the farthest leaf from policy.
# We want the delete check to the first thing the policy does to avoid the policy erroring before it can decide whether or not it needs to self terminate
# Example a customer deletes a credential and then terminates the parent policy. We still want the children to self terminate
# The only way I could see this not happening is if the user who applied the parent_meta_policy was offboarded or lost policy access, the policies who are impersonating the user
# would not have access to self-terminate
# It may be useful for the backend to enable a mass terminate at some point for all meta_child_policies associated with an id.
script "js_check_deleted", type: "javascript" do
  parameters "response"
  result "result"
  code <<-EOS
  result = {"path":"/"}
  EOS
end

name "Azure Rightsize NetApp Files"
rs_pt_ver 20180301
type "policy"
short_description "Cheks for oversized NetApp Volumes and suggest recommendations to save money. See the [README](https://github.com/flexera-public/policy_templates/tree/master/cost/azure/rightsize_netapp_files/) and [docs.flexera.com/flexera/EN/Automation](https://docs.flexera.com/flexera/EN/Automation/AutomationGS.htm) to learn more."
long_description ""
category "Cost"
severity "low"
default_frequency "weekly"
info(
  version: "0.1",
  provider: "Azure",
  service: "NetApp Files",
  policy_set: "Rightsize NetApp Files",
  recommendation_type: "Usage Reduction"
)

###############################################################################
# Parameters
###############################################################################

parameter "param_email" do
  type "list"
  category "Policy Settings"
  label "Email Addresses"
  description "A list of email addresses to notify."
  default []
end

parameter "param_azure_endpoint" do
  type "string"
  category "Policy Settings"
  label "Azure Endpoint"
  description "Select the API endpoint to use for Azure. Use default value of management.azure.com unless using Azure China."
  allowed_values "management.azure.com", "management.chinacloudapi.cn"
  default "management.azure.com"
end

parameter "param_stats_underutil_threshold_pool_value" do
  type "number"
  category "Statistics"
  label "Capacity Pool Consumed Threshold (%)"
  description "The NetApp Files threshold that should be the new consumed size of a capacity pool and therefore be flagged for rightsizing. Set to -1 to ignore capacity pool utilization"
  min_value 0
  max_value 100
  default 40
end

parameter "param_stats_underutil_threshold_volume_value" do
  type "number"
  category "Statistics"
  label "Volume Threshold (%)"
  description "The NetApp Files threshold that should be the new consumed size of a volume and therefore be flagged for rightsizing. Set to -1 to ignore volume utilization"
  min_value -1
  max_value 100
  default 40
end

parameter "param_subscriptions_allow_or_deny" do
  type "string"
  category "Filters"
  label "Allow/Deny Subscriptions"
  description "Allow or Deny entered Subscriptions"
  allowed_values "Allow", "Deny"
  default "Allow"
end

parameter "param_subscriptions_list" do
  type "list"
  category "Filters"
  label "Allow/Deny Subscriptions List"
  description "A list of allowed or denied Subscription IDs/names"
  default []
end

parameter "param_min_savings" do
  type "number"
  category "Policy Settings"
  label "Minimum Savings Threshold"
  description "Minimum potential savings required to generate a recommendation"
  min_value 0
  default 0
end

###############################################################################
# Authentication
###############################################################################

credentials "auth_azure" do
  schemes "oauth2"
  label "Azure"
  description "Select the Azure Resource Manager Credential from the list."
  tags "provider=azure_rm"
end

credentials "auth_flexera" do
  schemes "oauth2"
  label "Flexera"
  description "Select Flexera One OAuth2 credentials"
  tags "provider=flexera"
end

###############################################################################
# Pagination
###############################################################################

pagination "pagination_azure" do
  get_page_marker do
    body_path "nextLink"
  end
  set_page_marker do
    uri true
  end
end

###############################################################################
# Datasources & Scripts
###############################################################################

datasource "ds_currency_reference" do
  request do
    host "raw.githubusercontent.com"
    path "/rightscale/policy_templates/master/cost/scheduled_reports/currency_reference.json"
    header "User-Agent", "RS Policies"
  end
end

datasource "ds_currency_code" do
  request do
    auth $auth_flexera
    host rs_optima_host
    path join(["/bill-analysis/orgs/", rs_org_id, "/settings/currency_code"])
    header "Api-Version", "0.1"
    header "User-Agent", "RS Policies"
    ignore_status [403]
  end
  result do
    encoding "json"
    field "id", jmes_path(response, "id")
    field "value", jmes_path(response, "value")
  end
end

datasource "ds_currency" do
  run_script $js_currency, $ds_currency_reference, $ds_currency_code
end

script "js_currency", type:"javascript" do
  parameters "ds_currency_reference", "ds_currency_code"
  result "result"
  code <<-EOS
  symbol = "$"
  separator = ","

  if (ds_currency_code['value'] != undefined) {
    if (ds_currency_reference[ds_currency_code['value']] != undefined) {
      symbol = ds_currency_reference[ds_currency_code['value']]['symbol']

      if (ds_currency_reference[ds_currency_code['value']]['t_separator'] != undefined) {
        separator = ds_currency_reference[ds_currency_code['value']]['t_separator']
      } else {
        separator = ""
      }
    }
  }

  result = {
    symbol: symbol,
    separator: separator
  }
EOS
end

datasource "ds_azure_subscriptions" do
  request do
    auth $auth_azure
    pagination $pagination_azure
    host $param_azure_endpoint
    path "/subscriptions/"
    query "api-version","2020-01-01"
    header "User-Agent", "RS Policies"
  end
  result do
    encoding "json"
    collect jmes_path(response, "value[*]") do
      field "id", jmes_path(col_item, "subscriptionId")
      field "name", jmes_path(col_item, "displayName")
      field "state", jmes_path(col_item, "state")
    end
  end
end

datasource "ds_azure_subscriptions_filtered" do
  run_script $js_azure_subscriptions_filtered, $ds_azure_subscriptions, $param_subscriptions_allow_or_deny, $param_subscriptions_list
end

script "js_azure_subscriptions_filtered", type: "javascript" do
  parameters "ds_azure_subscriptions", "param_subscriptions_allow_or_deny", "param_subscriptions_list"
  result "result"
  code <<-EOS
  if (param_subscriptions_list.length > 0) {
    result = _.filter(ds_azure_subscriptions, function(subscription) {
      include_subscription = _.contains(param_subscriptions_list, subscription['id']) || _.contains(param_subscriptions_list, subscription['name'])

      if (param_subscriptions_allow_or_deny == "Deny") {
        include_subscription = !include_subscription
      }

      return include_subscription
    })
  } else {
    result = ds_azure_subscriptions
  }
EOS
end

datasource "ds_resource_groups" do
  iterate $ds_azure_subscriptions_filtered
  request do
    auth $auth_azure
    host $param_azure_endpoint
    path join(["/subscriptions/", val(iter_item, "id"), "/resourceGroups"])
    query "api-version", "2020-09-01"
  end
  result do
    encoding "json"
    collect jmes_path(response, "value[*]") do
      field "subscription_id", val(iter_item, "id")
      field "resource_group_name", jmes_path(col_item, "name")
    end
  end
end

datasource "ds_naf_accounts" do
  iterate $ds_resource_groups
  request do
    auth $auth_azure
    host $param_azure_endpoint
    path join(["/subscriptions/", val(iter_item, "subscription_id"), "/resourceGroups/", val(iter_item, "resource_group_name"), "/providers/Microsoft.NetApp/netAppAccounts"])
    query "api-version", "2023-05-01"
  end
  result do
    encoding "json"
    collect jmes_path(response, "value[*]") do
      field "subscription_id", jmes_path(iter_item, "subscription_id")
      field "resource_group_name", jmes_path(iter_item, "resource_group_name")
      field "naf_account_name", jmes_path(col_item, "name")
    end
  end
end

datasource "ds_naf_capacity_pools_v1" do
  iterate $ds_naf_accounts
  request do
    auth $auth_azure
    host $param_azure_endpoint
    path join(["/subscriptions/", val(iter_item, "subscription_id"), "/resourceGroups/", val(iter_item, "resource_group_name"), "/providers/Microsoft.NetApp/netAppAccounts/", val(iter_item, "naf_account_name"), "/capacityPools"])
    query "api-version", "2023-05-01"
  end
  result do
    encoding "json"
    collect jmes_path(response, "value[*]") do
      field "subscription_id", jmes_path(iter_item, "subscription_id")
      field "resource_group_name", jmes_path(iter_item, "resource_group_name")
      field "naf_account_name", jmes_path(iter_item, "naf_account_name")
      field "naf_pool_id", jmes_path(col_item, "id")
      field "naf_pool_name", jmes_path(col_item, "name")
      field "naf_pool_size", jmes_path(col_item, "properties.size")
      field "naf_pool_region", jmes_path(col_item, "location")
      field "naf_pool_service", jmes_path(col_item, "properties.serviceLevel")
      field "naf_pool_encryption", jmes_path(col_item, "properties.encryptionType")
      field "naf_pool_cool", jmes_path(col_item, "properties.coolAccess")
    end
  end
end

datasource "ds_naf_capacity_pools_v2" do
  run_script $js_naf_capacity_pools_v2, $ds_naf_capacity_pools_v1
end

script "js_naf_capacity_pools_v2", type: "javascript" do
  parameters "ds_naf_capacity_pools_v1"
  result "result"
  code <<-EOS
  var result = _.map(ds_naf_capacity_pools_v1, function(item) {
    item.naf_pool_name = item.naf_pool_name.split("/")[1]
    return item
  })
EOS
end

datasource "ds_naf_pool_metrics" do
  iterate $ds_naf_capacity_pools_v2
  request do
    auth $auth_azure
    host $param_azure_endpoint
    path join([val(iter_item, "naf_pool_id"), "/providers/Microsoft.Insights/metrics"])
    query "api-version", "2018-01-01"
    query "metricnames", "VolumePoolAllocatedUsed,VolumePoolAllocatedSize"
  end
  result do
    encoding "json"
    field "subscription_id", jmes_path(iter_item, "subscription_id")
    field "resource_group_name", jmes_path(iter_item, "resource_group_name")
    field "naf_account_name", jmes_path(iter_item, "naf_account_name")
    field "naf_pool_id", jmes_path(iter_item, "naf_pool_id")
    field "naf_pool_name", jmes_path(iter_item, "naf_pool_name")
    field "naf_pool_size", jmes_path(iter_item, "naf_pool_size")
    field "naf_pool_region", jmes_path(iter_item, "naf_pool_region")
    field "naf_pool_service", jmes_path(iter_item, "naf_pool_service")
    field "naf_pool_encryption", jmes_path(iter_item, "naf_pool_encryption")
    field "naf_pool_cool", jmes_path(iter_item, "naf_pool_cool")
    field "naf_pool_metrics", jmes_path(response, "value[*]")
  end
end

datasource "ds_naf_get_costs" do
  request do
    run_script $js_naf_get_costs, $ds_naf_capacity_pools_v2
  end
  result do
    encoding "json"
    collect jmes_path(response, "Items[*]") do
      field "retailPrice", jmes_path(col_item, "retailPrice")
      field "region", jmes_path(col_item, "armRegionName")
      field "skuName", jmes_path(col_item, "skuName")
    end
  end
end

script "js_naf_get_costs", type: "javascript" do
  parameters "ds_naf_capacity_pools_v2"
  result "request"
  code <<-EOS
  locations = []
  _.each(ds_naf_capacity_pools_v2, function(pool){
    locations.push("armRegionName eq '" + pool.naf_pool_region + "'")
  })
  location = "(" + locations.join(" or ") + ")"
  //var location = "(armRegionName eq 'westus')"
  var request = {
    host: "prices.azure.com"
    path: "/api/retail/prices"
    query_params: {
      "api-version": "2021-10-01-preview"
      "$filter": "serviceName eq 'Azure NetApp Files' and " + location + " and priceType eq 'Consumption' and endsWith(meterName, 'Capacity') and (contains(skuName, 'Standard') or contains(skuName, 'Premium') or contains(skuName, 'Ultra'))"
    }
  }
EOS
end


datasource "ds_naf_get_costs_v2" do
  request do
    host "prices.azure.com"
    path "/api/retail/prices"
    query "api-version", "2021-10-01-preview"
    query "$filter","serviceName eq 'Azure NetApp Files' and location eq 'US West' and (skuName eq 'Premium' or skuName eq 'Standard' or skuName eq 'Ultra')"
  end
  result do
    encoding "json"
    collect jmes_path(response, "Items[*]") do
      field "retailPrice", jmes_path(col_item, "retailPrice")
      field "region", jmes_path(col_item, "armRegionName")
      field "skuName", jmes_path(col_item, "skuName")
    end
  end
end

datasource "ds_naf_volumes" do
  iterate $ds_naf_capacity_pools_v2
  request do
    auth $auth_azure
    host $param_azure_endpoint
    path join(["/subscriptions/", val(iter_item, "subscription_id"), "/resourceGroups/", val(iter_item, "resource_group_name"), "/providers/Microsoft.NetApp/netAppAccounts/", val(iter_item, "naf_account_name"), "/capacityPools/", val(iter_item, "naf_pool_name"), "/volumes"])
    query "api-version", "2023-05-01"
  end
  result do
    encoding "json"
    collect jmes_path(response, "value[*]") do
      field "subscription_id", jmes_path(iter_item, "subscription_id")
      field "resource_group_name", jmes_path(iter_item, "resource_group_name")
      field "naf_account_name", jmes_path(iter_item, "naf_account_name")
      field "naf_pool_id", jmes_path(iter_item, "naf_pool_id")
      field "naf_pool_name", jmes_path(iter_item, "naf_pool_name")
      field "naf_pool_size", jmes_path(iter_item, "naf_pool_size")
      field "naf_pool_region", jmes_path(iter_item, "naf_pool_region")
      field "naf_pool_service", jmes_path(iter_item, "naf_pool_service")
      field "naf_pool_encryption", jmes_path(iter_item, "naf_pool_encryption")
      field "naf_pool_cool", jmes_path(iter_item, "naf_pool_cool")
      field "naf_volume_name", jmes_path(col_item, "name")
      field "naf_volume_id", jmes_path(col_item, "id")
    end
  end
end

datasource "ds_naf_volume_metrics" do
  iterate $ds_naf_volumes
  request do
    auth $auth_azure
    host $param_azure_endpoint
    path join([val(iter_item, "naf_volume_id"), "/providers/Microsoft.Insights/metrics"])
    query "api-version", "2018-01-01"
    query "metricnames", "VolumeLogicalSize,VolumeAllocatedSize,VolumeConsumedSizePercentage"
  end
  result do
    encoding "json"
    field "subscription_id", jmes_path(iter_item, "subscription_id")
    field "resource_group_name", jmes_path(iter_item, "resource_group_name")
    field "naf_account_name", jmes_path(iter_item, "naf_account_name")
    field "naf_pool_id", jmes_path(iter_item, "naf_pool_id")
    field "naf_pool_name", jmes_path(iter_item, "naf_pool_name")
    field "naf_pool_size", jmes_path(iter_item, "naf_pool_size")
    field "naf_pool_region", jmes_path(iter_item, "naf_pool_region")
    field "naf_pool_service", jmes_path(iter_item, "naf_pool_service")
    field "naf_pool_encryption", jmes_path(iter_item, "naf_pool_encryption")
    field "naf_pool_cool", jmes_path(iter_item, "naf_pool_cool")
    field "naf_volume_name", jmes_path(iter_item, "naf_volume_name")
    field "naf_volume_id", jmes_path(iter_item, "naf_volume_id")
    field "naf_volume_metrics", jmes_path(response, "value[*]")
  end
end

datasource "ds_naf_oversized_pools" do
  run_script $js_naf_oversized_pools, $ds_naf_pool_metrics, $param_stats_underutil_threshold_pool_value, $ds_naf_get_costs, $param_min_savings, $ds_currency
end

script "js_naf_oversized_pools", type: "javascript" do
  parameters "ds_naf_pool_metrics", "param_stats_underutil_threshold_pool_value", "ds_naf_get_costs", "param_min_savings", "ds_currency"
  result "result"
  code <<-EOS
  result = []
  // Variables declaration
  var minPoolSize = 2048
  var maxPoolSize = 1024000
  var total_savings = 0.0

  //Functions declaration
  function formatNumber(number, separator) {
    var numString = number.toString()
    var values = numString.split(".")
    var formatted_number = ''
    while (values[0].length > 3) {
      var chunk = values[0].substr(-3)
      values[0] = values[0].substr(0, values[0].length - 3)
      formatted_number = separator + chunk + formatted_number
    }
    if (values[0].length > 0) { formatted_number = values[0] + formatted_number }
    if (values[1] == undefined) { return formatted_number }
    return formatted_number + "." + values[1]
  }
  function bytesToGibibytes(bytes) {
    return Math.round(bytes * 9.3132257461548e-10)
  }
  function poolCanBeResized(size, recommendedSize) {
    if (size == minPoolSize && recommendedSize < minPoolSize) {
      return false
    }
    if (size == maxPoolSize && recommendedSize > maxPoolSize) {
      return false
    }
    return true
  }


  _.each(ds_naf_pool_metrics, function(pool){
    _.each(pool.naf_pool_metrics, function (metric) {
      var lastPointInTS = metric.timeseries[0].data[metric.timeseries[0].data.length - 1].average
      switch (metric.name.value) {
        case "VolumePoolAllocatedUsed":
          pool.consumedSize = bytesToGibibytes(lastPointInTS)
          break;
        case "VolumePoolAllocatedSize":
          pool.allocatedSize = bytesToGibibytes(lastPointInTS)
          break;
      }
    })
    if (pool.allocatedSize != undefined && pool.consumedSize != undefined) {
      var poolConsumedPercentage = Math.round(pool.consumedSize * 100 / pool.allocatedSize)
      if (poolConsumedPercentage != param_stats_underutil_threshold_pool_value) {
        var poolRecommendedSize = Math.round(pool.consumedSize * 100 / param_stats_underutil_threshold_pool_value)
        if (poolCanBeResized(pool.allocatedSize, poolRecommendedSize)) {
          if (poolRecommendedSize < minPoolSize) {
            poolRecommendedSize = minPoolSize
          }
          if (poolRecommendedSize > maxPoolSize) {
            poolRecommendedSize = maxPoolSize
          }

          var finalCost = 0.0
          _.each(ds_naf_get_costs, function(cost){
            if(pool.naf_pool_region == cost.region) {
              if(cost.skuName.indexOf(pool.naf_pool_service) > -1) {
                if(pool.naf_pool_cool == true && cost['skuName'].indexOf("Cool Access") > -1) {
                  finalCost = cost.retailPrice
                }
                if (pool.naf_pool_cool == false && cost['skuName'].indexOf("Cool Access") == -1) {
                  if (pool.naf_pool_encryption == "Double" &&  cost['skuName'].indexOf("Double") > -1) {
                    finalCost = cost.retailPrice
                  }
                  if(pool.naf_pool_encryption == "Single" && cost['skuName'].indexOf("Double") == -1) {
                    finalCost  = cost.retailPrice
                  }
                }
              }
            }
          })

          var allocatedSizeCost = finalCost * pool.allocatedSize * 730
          var recommendedSizeCost = finalCost * poolRecommendedSize * 730

          // If Recommended Size costs more than allocatedSize, savings will be 0
          var savings = (allocatedSizeCost-recommendedSizeCost) < 0 ? 0 : (allocatedSizeCost-recommendedSizeCost)

          var recommendedReduction = pool.allocatedSize - poolRecommendedSize
          var recommendationDetails = "Pool size reduction is recommended from " + pool.allocatedSize + " GiB to " + poolRecommendedSize + " GiB, that will result in " + parseFloat(savings.toFixed(3)) + " monthly savings."

          if (savings >= param_min_savings) {
            total_savings += savings
            result.push({
              resourceID: pool['naf_pool_id'],
              resourceName: pool['naf_pool_name'],
              poolSize: pool['allocatedSize'],
              poolAllocatedUsed: pool['consumedSize'],
              poolConsumedPercentage: poolConsumedPercentage,
              threshold: param_stats_underutil_threshold_pool_value,
              recommendedReduction: recommendedReduction,
              poolRecommendedSize: poolRecommendedSize,
              recommendationDetails: recommendationDetails,
              savings: parseFloat(savings.toFixed(3))
              id: pool['naf_pool_id']
            })
          }
        }
      }
    }
  })

  if (result.length > 0) {
    var savings_message = ds_currency['symbol'] + ' ' + formatNumber(parseFloat(total_savings).toFixed(2), ds_currency['separator'])
    result[0]['total_savings'] = savings_message
  }
EOS
end

datasource "ds_naf_oversized_volumes" do
  run_script $js_naf_oversized_volumes, $ds_naf_volume_metrics, $ds_naf_pool_metrics, $param_stats_underutil_threshold_pool_value, $param_stats_underutil_threshold_volume_value, $ds_naf_get_costs, $param_min_savings, $ds_currency
end

script "js_naf_oversized_volumes", type: "javascript" do
  parameters "ds_naf_volume_metrics", "ds_naf_pool_metrics", "param_stats_underutil_threshold_pool_value", "param_stats_underutil_threshold_volume_value", "ds_naf_get_costs", "param_min_savings", "ds_currency"
  result "result"
  code <<-EOS
  result = []
  var minPoolSize = 2048
  var maxPoolSize = 1024000
  var minVolSize = 100
  var maxVolSize = 512000
  var total_savings = 0.0
  function formatNumber(number, separator) {
    var numString = number.toString()
    var values = numString.split(".")
    var formatted_number = ''

    while (values[0].length > 3) {
      var chunk = values[0].substr(-3)
      values[0] = values[0].substr(0, values[0].length - 3)
      formatted_number = separator + chunk + formatted_number
    }

    if (values[0].length > 0) { formatted_number = values[0] + formatted_number }
    if (values[1] == undefined) { return formatted_number }

    return formatted_number + "." + values[1]
  }
  function getCost(poolSize) {
    var savings = 0.0
    if (ds_naf_get_costs[0].retailPrice != undefined) {
      savings = poolSize * ds_naf_get_costs[0].retailPrice * 24 * 30
    }
    return savings
  }
  function bytesToGibibytes(bytes) {
    return Math.round(bytes * 9.3132257461548e-10)
  }
  function volumeCanBeResized(size, recommendedSize) {
    if (size == minVolSize && recommendedSize < minVolSize) {
      return false
    }
    if (size == maxVolSize && recommendedSize > maxVolSize) {
      return false
    }
    return true
  }
  if (param_stats_underutil_threshold_volume_value != -1) {
    _.each(ds_naf_volume_metrics, function(volume) {
      _.each(volume.naf_volume_metrics, function(metric) {
        var lastPointInTS = metric.timeseries[0].data[metric.timeseries[0].data.length - 1].average
        switch (metric.name.value) {
          case "VolumeLogicalSize":
            volume.volume_logical_size = bytesToGibibytes(lastPointInTS)
            break;
          case "VolumeAllocatedSize":
            volume.volume_allocated_size = bytesToGibibytes(lastPointInTS)
            break;
          case "VolumeConsumedSizePercentage":
            volume.volume_consumed_size_percentage = Math.round(lastPointInTS)
            break;
        }
      })
      // Check if volume contains required metrics info
      if (volume.volume_logical_size != undefined && volume.volume_allocated_size != undefined && volume.volume_consumed_size_percentage != undefined) {
        _.each(ds_naf_pool_metrics, function(pool){
          if (pool.naf_pool_id == volume.naf_pool_id) {
            _.each(pool.naf_pool_metrics, function (metric) {
              var lastPointInTS = metric.timeseries[0].data[metric.timeseries[0].data.length - 1].average
              switch (metric.name.value) {
                case "VolumePoolAllocatedUsed":
                  volume.volumePoolAllocatedUsed = bytesToGibibytes(lastPointInTS)
                  break;
                case "VolumePoolAllocatedSize":
                  volume.poolAllocatedSize = bytesToGibibytes(lastPointInTS)
                  break;
              }
            })
          }
        })
        if (volume.volumePoolAllocatedUsed != undefined && volume.poolAllocatedSize != undefined) {
          if (volume.volume_consumed_size_percentage != param_stats_underutil_threshold_volume_value) {
            var recommendedVolumeAllocatedSize = volume.volume_logical_size * 100 / param_stats_underutil_threshold_volume_value
            if (volumeCanBeResized(volume.volume_allocated_size, recommendedVolumeAllocatedSize)) {
              if (recommendedVolumeAllocatedSize < minVolSize) {
                recommendedVolumeAllocatedSize = minVolSize
              }
              if (recommendedVolumeAllocatedSize > maxVolSize) {
                recommendedVolumeAllocatedSize = maxVolSize
              }
              var newPoolAllocatedUsed = volume.volumePoolAllocatedUsed - (volume.volume_allocated_size - recommendedVolumeAllocatedSize)
              var recommendedPoolSize = newPoolAllocatedUsed * 100 / param_stats_underutil_threshold_pool_value
              if (recommendedPoolSize < minPoolSize) {
                recommendedPoolSize = minPoolSize
              }
              if (recommendedPoolSize > maxPoolSize) {
                recommendedPoolSize = maxPoolSize
              }


              var finalCost = 0.0
              _.each(ds_naf_get_costs, function(cost){
                if(volume.naf_pool_region == cost.region) {
                  if(cost.skuName.indexOf(volume.naf_pool_service) > -1) {
                    if(volume.naf_pool_cool == true && cost['skuName'].indexOf("Cool Access") > -1) {
                      finalCost = cost.retailPrice
                    }
                    if (volume.naf_pool_cool == false && cost['skuName'].indexOf("Cool Access") == -1) {
                      if (volume.naf_pool_encryption == "Double" &&  cost['skuName'].indexOf("Double") > -1) {
                        finalCost = cost.retailPrice
                      }
                      if(volume.naf_pool_encryption == "Single" && cost['skuName'].indexOf("Double") == -1) {
                        finalCost  = cost.retailPrice
                      }
                    }
                  }
                }
              })

              var allocatedSizeCost = finalCost * volume.poolAllocatedSize * 730
              var recommendedSizeCost = finalCost * recommendedPoolSize * 730

              var rightsizePool = volume.poolAllocatedSize - recommendedPoolSize
              //var rightsizePool = recommendedPoolSize - volume.poolAllocatedSize

              // If Recommended Size costs more than allocatedSize, savings will be 0
              var savings = (allocatedSizeCost-recommendedSizeCost) < 0 ? 0 : (allocatedSizeCost-recommendedSizeCost)

              var recommendationDetails = "Volume size reduction is recommended from " + volume.volume_allocated_size + " GiB, to " + recommendedVolumeAllocatedSize + " GiB, corresponding capacity pool size reduction by " + rightsizePool + " GiB will result in " + parseFloat(savings.toFixed(3)) + " monthly savings."
              if (savings >= param_min_savings) {
                total_savings += savings
                result.push({
                  resourceID: volume['naf_volume_id'],
                  resourceName: volume['naf_volume_name'],
                  volumeAllocatedSize: volume['volume_allocated_size'],
                  volumeLogicalSize: volume['volume_logical_size'],
                  volumeConsumedSizePercentage: volume['volume_consumed_size_percentage'],
                  volumeThreshold: param_stats_underutil_threshold_volume_value,
                  recommendedVolumeAllocatedSize: recommendedVolumeAllocatedSize,
                  poolName: volume['naf_pool_name'],
                  poolSize: bytesToGibibytes(volume['naf_pool_size']),
                  poolThreshold: param_stats_underutil_threshold_pool_value,
                  recommendedRightsize: rightsizePool,
                  recommendationDetails: recommendationDetails,
                  savings: parseFloat(savings.toFixed(3))
                  id: volume['naf_volume_id'],
                })
              }
            }
          }
        }
      }
    })
  }
  if (result.length > 0) {
    var savings_message = ds_currency['symbol'] + ' ' + formatNumber(parseFloat(total_savings).toFixed(2), ds_currency['separator'])
    result[0]['total_savings'] = savings_message
  }
EOS
end

###############################################################################
# Policy
###############################################################################

policy "pol_azure_rightsize_netapp_files" do
  validate $ds_naf_oversized_pools do
    summary_template "There are {{ len data }} oversized Azure NetApp File Capacity Pools"
    detail_template <<-'EOS'
    **Potential Monthly Savings:** {{ with index data 0 }}{{ .total_savings }}{{ end }}
    EOS
    check eq(size(data), 0)
    escalate $esc_email
    export do
      resource_level true
      field "resourceID" do
        label "Resource ID"
      end
      field "resourceName" do
        label "Resource Name"
      end
      field "poolSize" do
        label "Capacity Pool Size (GiB)"
      end
      field "poolAllocatedUsed" do
        label "Pool Allocated Used (GiB)"
      end
      field "poolConsumedPercentage" do
        label "Capacity Pool Consumed Percentage (%)"
      end
      field "threshold" do
        label "Capacity Pool Consumed Threshold (%)"
      end
      field "recommendedReduction" do
        label "Recommended Pool Size Reduction (GiB)"
      end
      field "poolRecommendedSize" do
        label "Capacity Pool Recommended Size (GiB)"
      end
      field "savings" do
        label "Estimated Monthly Savings"
      end
      field "recommendationDetails" do
        "Recommendation Details"
      end
      field "id" do
        label "ID"
      end
    end
  end
  validate $ds_naf_oversized_volumes do
    summary_template "There are {{ len data }} oversized Azure NetApp File Volumes"
    detail_template <<-'EOS'
    **Potential Monthly Savings:** {{ with index data 0 }}{{ .total_savings }}{{ end }}
    EOS
    check eq(size(data), 0)
    escalate $esc_email
    export do
      resource_level true
      field "resourceID" do
        label "Resource ID"
      end
      field "resourceName" do
        label "Resource Name"
      end
      field "volumeAllocatedSize" do
        label "Volume Allocated Size (GiB)"
      end
      field "volumeLogicalSize" do
        label "Volume Logical Size (GiB)"
      end
      field "volumeConsumedSizePercentage" do
        label "Volume Consumed Size Percentage (%)"
      end
      field "volumeThreshold" do
        label "Volume Consumed Threshold (%)"
      end
      field "recommendedVolumeAllocatedSize" do
        label "Volume Recommended Allocated Size (GiB)"
      end
      field "poolName" do
        label "Capacity Pool Name"
      end
      field "poolSize" do
        label "Capacity Pool Size (GiB)"
      end
      field "poolThreshold" do
        label "Capacity Pool Consumed Threshold (%)"
      end
      field "recommendedRightsize" do
        label "Recommended Pool Size Reduction (GiB)"
      end
      field "savings" do
        label "Estimated Monthly Savings"
      end
      field "recommendationDetails" do
        label "Recommendation Details"
      end
      field "id" do
        label "ID"
      end
    end
  end
end

###############################################################################
# Escalations
###############################################################################

escalation "esc_email" do
  automatic true
  label "Send Email"
  description "Send incident email."
  email $param_email
end

###############################################################################
# Cloud Workflow
###############################################################################

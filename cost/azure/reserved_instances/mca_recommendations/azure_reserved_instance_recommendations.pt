name "Azure Reserved Instances Recommendations"
rs_pt_ver 20180301
type "policy"
short_description "A policy that sends email notifications when Azure Reservation Recommendations are identified. NOTE: These Reservation Purchase Recommendations are generated by Microsoft Azure. See the [README](https://github.com/flexera/policy_templates/tree/master/cost/azure/reserved_instances/mca_recommendations) and [docs.rightscale.com/policies](https://docs.rightscale.com/policies/) to learn more."
long_description ""
severity "medium"
category "Cost"
default_frequency "daily"
info(
  version: "2.6",
  provider: "Azure",
  service: "Compute",
  policy_set: "Reserved Instance"
)

##################
# User inputs    #
##################

parameter "param_days" do
  category "RI"
  label "Look Back Period"
  default "Last7Days"
  description "Number of days of prior usage to analyze"
  allowed_values "Last7Days","Last30Days","Last60Days"
  type "string"
end

parameter "param_type" do
  category "RI"
  label "Resource Type"
  default "All"
  description "The resource type used for reservation recommendations"
  allowed_values "All","VirtualMachines","SQLDatabases","PostgreSQL","ManagedDisk", "MySQL", "RedHat", "MariaDB", "RedisCache", "CosmosDB", "SqlDataWarehouse", "SUSELinux", "AppService", "BlockBlob", "AzureDataExplorer", "VMwareCloudSimple"
  type "string"
end

parameter "param_term" do
  category "RI"
  label "Term"
  default "1 Year"
  description "The reservation term"
  allowed_values "1 Year", "3 Year"
  type "string"
end


parameter "param_scope" do
  category "RI"
  label "Reservation Scope"
  default "Single"
  description "Single or Shared Reservation Scope"
  allowed_values "Single","Shared"
  type "string"
end

parameter "param_savings_threshold" do
  category "RI"
  label "Net Savings Threshold"
  description "Specify the minimum net savings that should result in a recommendation"
  default 100
  type "number"
end

parameter "param_email" do
  type "list"
  label "Email addresses to notify"
  description "Email addresses of the recipients you wish to notify"
end

parameter "param_azure_endpoint" do
  type "string"
  label "Azure Endpoint"
  allowed_values "management.azure.com", "management.chinacloudapi.cn"
  default "management.azure.com"
end

parameter "param_subscription_whitelist" do
  label "Subscription Whitelist"
  type "list"
  description "Whitelisted Subscriptions, if empty, all subscriptions will be checked"
end

###############################################################################
# Authentication
###############################################################################

#authenticate with Azure
credentials "azure_auth" do
  schemes "oauth2"
  label "Azure"
  description "Select the Azure Resource Manager Credential from the list."
  tags "provider=azure_rm"
end

###############################################################################
# Pagination
###############################################################################

pagination "azure_pagination" do
  get_page_marker do
    body_path "nextLink"
  end
  set_page_marker do
    uri true
  end
end

###############################################################################
# Datasources
###############################################################################

datasource "ds_subscriptions" do
  request do
    auth $azure_auth
    pagination $azure_pagination
    host $param_azure_endpoint
    path "/subscriptions/"
    query "api-version","2020-01-01"
    header "User-Agent", "RS Policies"
  end
  result do
    encoding "json"
    collect jmes_path(response, "value[*]") do
      field "subscriptionId", jmes_path(col_item,"subscriptionId")
      field "subscriptionName", jmes_path(col_item,"displayName")
    end
  end
end

datasource "ds_ri_types" do
  run_script $js_ri_types, $param_type, $ds_filtered_subscriptions, $param_scope
end
  
datasource "ds_filtered_subscriptions" do
  run_script $js_filtered_subscriptions, $ds_subscriptions, $param_subscription_whitelist
end

datasource "ds_ri_recommendations" do
  iterate $ds_ri_types
  request do
    run_script $js_ri_request, val(iter_item,"subscriptionId"), $param_days, $param_scope, val(iter_item,"service"), $param_azure_endpoint
  end
  result do
    encoding "json"
    collect jmes_path(response, "value[*]") do
      field "meterId", jmes_path(col_item,"properties.meterId")
      field "skuName", jmes_path(col_item,"sku")
      field "term", jmes_path(col_item,"properties.term")
      field "region", jmes_path(col_item,"location")
      field "costWithNoRI", jmes_path(col_item,"properties.costWithNoReservedInstances")
      field "recommendedQuantity", jmes_path(col_item,"properties.recommendedQuantity")
      field "totalCostWithRI", jmes_path(col_item,"properties.totalCostWithReservedInstances")
      field "netSavings", jmes_path(col_item,"properties.netSavings")
      field "firstUsageDate", jmes_path(col_item,"properties.firstUsageDate")
      field "scope", jmes_path(col_item,"properties.scope")
      field "subscriptionId", val(iter_item,"subscriptionId")
      field "service", val(iter_item,"service")
    end
  end
end

datasource "ds_ri_normalization" do
  run_script $js_ri_cleanup, $ds_ri_recommendations, $param_term
end

###############################################################################
# Scripts
###############################################################################

script "js_filtered_subscriptions", type: "javascript" do
  parameters "ds_subscriptions", "param_subscription_whitelist"
  result "results"
  code <<-EOS
  var results = []
  if ( param_subscription_whitelist.length != 0){
    results = []
    _.each(param_subscription_whitelist, function(sub){
      var found = _.find(ds_subscriptions, function(item){
        return item.subscriptionId == sub || item.subscriptionName.toLowerCase() == sub.toLowerCase();
      })
      results.push(found)
    })
  } else {
    results = ds_subscriptions
  }
EOS
end

script "js_ri_types", type: "javascript" do
  parameters "param_service", "subscriptions", "param_scope"
  result "result"
  code <<-EOS
    var result = []

    var services = ["VirtualMachines","SQLDatabases","PostgreSQL","ManagedDisk", "MySQL", "RedHat", "MariaDB", "RedisCache", "CosmosDB", "SqlDataWarehouse", "SUSELinux", "AppService", "BlockBlob", "AzureDataExplorer", "VMwareCloudSimple"]
    if (param_scope == "Shared") {
      if (param_service === "All"){
        _.each(services, function(service){
          result.push({"service":service, "subscriptionId":subscriptions[0].subscriptionId})
        })
      } else {
        result.push({"service":param_service, "subscriptionId":subscriptions[0].subscriptionId})
      }
    } else {
      _.each(subscriptions, function(subscription){
        if (param_service === "All"){
          _.each(services, function(service){
            result.push({"service":service, "subscriptionId":subscription.subscriptionId})
          })
        } else {
            result.push({"service":param_service, "subscriptionId":subscription.subscriptionId})
        }
      })
    }
  EOS
end

script "js_ri_request", type: "javascript" do
  parameters "subscriptionId", "param_days", "param_scope", "param_type", "param_azure_endpoint"
  result "request"
  code <<-EOS
    var quote_str="'"+param_days+"'";
    var scope_str="'"+param_scope+"'";
    var type_str="'"+param_type+"'";
    var request = {
    auth: "azure_auth",
    pagination: "azure_pagination",
    host: param_azure_endpoint,
    /*
      {"code":"400","message":"Cost management data is unavailable for subscription XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX. The offer MS-AZR-0243P is not supported."}
      {"code":"404","message":"Cost Management supports only Enterprise Agreement, Web direct and Microsoft Customer Agreement offer types. Subscription XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX is not associated with a valid offer type."}
    */
    ignore_status: [400,404],
    path: "/subscriptions/"+subscriptionId+"/providers/Microsoft.Consumption/reservationRecommendations",
    query_params: {
        "api-version": "2021-10-01",
        "$filter": "properties/resourceType eq "+ type_str +" and properties/scope eq "+ scope_str + " and properties/lookBackPeriod eq "+quote_str
    },
    headers: {
        "User-Agent": "RS Policies"
    }
    }
  EOS
end

script "js_ri_cleanup", type: "javascript" do
  parameters "ri_recos", "param_term"
  result "result"
  code <<-EOS
    var result = [];
    _.each(ri_recos, function(reco){
      if (reco.term === "P1Y"){
        var term = "1 Year";
      }
      if (reco.term === "P3Y"){
        var term = "3 Year";
      }

      if ( param_term !== term ) {
        return true
      }

      result.push({
        subscriptionId: reco["subscriptionId"],
        service: reco["service"],
        skuName: reco["skuName"],
        term: term,
        region: reco["region"],
        scope: reco["scope"],
        costWithNoRI: (Math.round(reco["costWithNoRI"] * 100) / 100).toString(10),
        recommendedQuantity: reco["recommendedQuantity"],
        totalCostWithRI: (Math.round(reco["totalCostWithRI"] * 100) / 100).toString(10),
        netSavings: (Math.round(reco["netSavings"] * 100) / 100).toString(10),
        firstUsageDate: reco["firstUsageDate"]
        meterId: reco["meterId"],
      })
    })

    var result = _(result)
    .chain()
    .sortBy(function(result){
      return result.service;
    }).sortBy(function(result){
      return result.subscriptionId;
    }).value();

  EOS
end

###############################################################################
# Policy
###############################################################################

policy "azure_ri_recommendations" do
  validate_each $ds_ri_normalization do
    summary_template "{{ len data }} Azure Reservation Purchase Recommendations"
    hash_include 'netSavings'
    escalate $email
    check lt(to_n(val(item,"netSavings")),$param_savings_threshold)
    export do
      resource_level false
      field "subscriptionId" do
        label "Subscription Id"
      end
      field "service" do
        label "Service"
      end
      field "skuName" do
        label "SKU Name"
      end
      field "region" do
        label "Location"
      end
      field "term" do
        label "Term"
      end
      field "netSavings" do
        label "Net Savings"
      end
      field "recommendedQuantity" do
        label "Recommended Quantity to Purchase"
      end
      field "costWithNoRI" do
        label "Total Current Cost (without RI)"
      end
      field "totalCostWithRI" do
        label "Total Cost if RI was purchased"
      end
      field "firstUsageDate" do
        label "First Usage Date"
      end
      field "id" do
        label "Resource MeterID"
        path "meterId"
      end
    end
  end
end

###############################################################################
# Escalation
###############################################################################

escalation "email" do
  automatic true
  label "Send Email"
  description "Sends incident email"
  email $param_email
end

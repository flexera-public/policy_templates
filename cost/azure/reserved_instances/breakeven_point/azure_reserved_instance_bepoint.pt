name "Azure Reserved Instances Breakeven Point Report"
rs_pt_ver 20180301
type "policy"
short_description "Reports the Breakeven Point on purchased upfront Azure Reserved Instances. See the [README](https://github.com/flexera-public/policy_templates/tree/master/cost/azure/reserved_instances/breakeven_point) and [docs.flexera.com/flexera/EN/Automation](https://docs.flexera.com/flexera/EN/Automation/AutomationGS.htm) to learn more."
long_description ""
category "Cost"
severity "low"
default_frequency "weekly"
info(
  version: "0.1.0",
  provider: "Azure",
  service: "Compute",
  policy_set: "Reserved Instances",
  hide_skip_approvals: "true"
)

###############################################################################
# Parameters
###############################################################################

parameter "param_email" do
  type "list"
  category "Policy Settings"
  label "Email Addresses"
  description "Email addresses of the recipients you wish to notify when new incidents are created."
  default []
end

parameter "param_azure_endpoint" do
  type "string"
  category "Policy Settings"
  label "Azure Endpoint"
  description "Select the API endpoint to use for Azure. Use default value of management.azure.com unless using Azure China."
  allowed_values "management.azure.com", "management.chinacloudapi.cn"
  default "management.azure.com"
end

parameter "param_bc_allow_or_deny" do
  type "string"
  category "Filters"
  label "Allow/Deny Billing Centers"
  description "Allow or Deny entered Billing Centers."
  allowed_values "Allow", "Deny"
  default "Allow"
end

parameter "param_billing_centers" do
  type "list"
  category "Filters"
  label "Allow/Deny Billing Center List"
  description "A list of allowed or denied Billing Center names/IDs. Leave blank to report on Reservations in all Billing Centers."
  default []
end

###############################################################################
# Authentication
###############################################################################

credentials "auth_flexera" do
  schemes "oauth2"
  label "Flexera"
  description "Select Flexera One OAuth2 credentials"
  tags "provider=flexera"
end

credentials "auth_azure" do
  schemes "oauth2"
  label "Azure"
  description "Select the Azure Resource Manager Credential from the list."
  tags "provider=azure_rm"
end

###############################################################################
# Pagination
###############################################################################

pagination "pagination_azure" do
  get_page_marker do
    body_path "nextLink"
  end
  set_page_marker do
    uri true
  end
end

###############################################################################
# Datasources & Scripts
###############################################################################

# Get applied policy metadata for use later
datasource "ds_applied_policy" do
  request do
    auth $auth_flexera
    host rs_governance_host
    path join(["/api/governance/projects/", rs_project_id, "/applied_policies/", policy_id])
    header "Api-Version", "1.0"
  end
end

datasource "ds_region_table" do
  run_script $js_region_table
end

script "js_region_table", type:"javascript" do
  result "result"
  code <<-EOS
  result = {
    "ukwest": "UK West",
    "usgovvirginia": "US Gov Virginia",
    "eastus2": "US East 2",
    "uaenorth": "AE North",
    "southafricawest": "ZA West",
    "francesouth": "FR South",
    "westcentralus": "US West Central",
    "koreacentral": "KR Central",
    "westeurope": "EU West",
    "southafricanorth": "ZA North",
    "southeastasia": "AP Southeast",
    "centralindia": "IN Central",
    "switzerlandwest": "CH West",
    "norwayeast": "NO East",
    "germanywestcentral": "DE West Central",
    "westus2": "US West 2",
    "australiacentral": "AU Central",
    "italynorth": "IT North",
    "centralus": "US Central",
    "germanynorth": "DE North",
    "brazilsoutheast": "BR Southeast",
    "southindia": "IN South",
    "swedencentral": "SE Central",
    "francecentral": "FR Central",
    "australiasoutheast": "AU Southeast",
    "northeurope": "EU North",
    "koreasouth": "KR South",
    "usgovtexas": "US Gov TX",
    "polandcentral": "PL Central",
    "japaneast": "JA East",
    "westindia": "IN West",
    "japanwest": "JA West",
    "westus": "US West",
    "jioindiawest": "IN West Jio",
    "northcentralus": "US North Central",
    "southcentralus": "US South Central",
    "eastasia": "AP East",
    "jioindiacentral": "IN Central Jio",
    "australiacentral2": "AU Central 2",
    "canadaeast": "CA East",
    "eastus": "US East",
    "uaecentral": "AE Central",
    "norwaywest": "NO West",
    "canadacentral": "CA Central",
    "uksouth": "UK South",
    "qatarcentral": "QA Central",
    "swedensouth": "SE South",
    "brazilsouth": "BR South",
    "australiaeast": "AU East",
    "switzerlandnorth": "CH North",
    "usgovarizona": "US Gov AZ",
    "westus3": "US West 3"
  }
EOS
end

datasource "ds_azure_vm_pricing" do
  request do
    host "raw.githubusercontent.com"
    path "/flexera-public/policy_templates/master/data/azure/azure_vm_pricing.json"
    header "User-Agent", "RS Policies"
  end
end

datasource "ds_billing_centers" do
  request do
    auth $auth_flexera
    host rs_optima_host
    path join(["/analytics/orgs/", rs_org_id, "/billing_centers"])
    header "Api-Version", "1.0"
    header "User-Agent", "RS Policies"
  end
  result do
    encoding "json"
    collect jmes_path(response, "[*]") do
      field "href", jmes_path(col_item, "href")
      field "id", jmes_path(col_item, "id")
      field "name", jmes_path(col_item, "name")
      field "parent_id", jmes_path(col_item, "parent_id")
    end
  end
end

datasource "ds_billing_centers_filtered" do
  run_script $js_billing_centers_filtered, $ds_billing_centers, $param_bc_allow_or_deny, $param_billing_centers
end

script "js_billing_centers_filtered", type: "javascript" do
  parameters "ds_billing_centers", "param_bc_allow_or_deny", "param_billing_centers"
  result "result"
  code <<-EOS
  allow_deny_test = { "Allow": true, "Deny": false }

  if (param_billing_centers.length > 0) {
    billing_centers = _.filter(ds_billing_centers, function(item) {
      id_found = _.contains(param_billing_centers, item['id']) == allow_deny_test[param_bc_allow_or_deny]
      name_found = _.contains(param_billing_centers, item['name']) == allow_deny_test[param_bc_allow_or_deny]
      return id_found || name_found
    })

    // Check for conflicting parents/children and remove children if present
    bc_ids = _.compact(_.pluck(billing_centers, 'id'))
    bad_children = _.filter(ds_billing_centers, function(bc) { return _.contains(bc_ids, bc['parent_id']) })
    bad_children_ids = _.pluck(bad_children, 'id')

    // Create final result with the bad children removed
    final_list = _.reject(billing_centers, function(bc) { return _.contains(bad_children_ids, bc['id']) })
  } else {
    // If we're not filtering at all, just grab all of the top level billing centers
    final_list = _.filter(ds_billing_centers, function(bc) {
      return bc['parent_id'] == null || bc['parent_id'] == undefined
    })
  }

  result = _.compact(_.pluck(final_list, 'id'))
EOS
end

datasource "ds_accounts_by_billing_center" do
  request do
    run_script $js_accounts_by_billing_center, $ds_billing_centers_filtered, rs_org_id, rs_optima_host
  end
  result do
    encoding "json"
    collect jmes_path(response, "rows[*]") do
      field "cost", jmes_path(col_item, "metrics.cost_amortized_unblended_adj")
      field "billing_center_id", jmes_path(col_item, "dimensions.billing_center_id")
      field "vendor_account_id", jmes_path(col_item, "dimensions.vendor_account")
      field "vendor_account_name", jmes_path(col_item, "dimensions.vendor_account_name")
      field "timestamp", jmes_path(col_item, "timestamp")
    end
  end
end

script "js_accounts_by_billing_center", type: "javascript" do
  parameters "ds_billing_centers_filtered", "rs_org_id", "rs_optima_host"
  result "request"
  code <<-EOS
  start_date = new Date().toISOString()
  start_date = start_date.split('-')[0] + '-' + start_date.split('-')[1]

  end_year = Number(start_date.split('-')[0])
  end_month = Number(start_date.split('-')[1]) + 1
  if (end_month == 13) { end_month = 1; end_year++ }
  if (end_month < 10) { end_month = '0' + end_month.toString() }
  end_date = end_year.toString() + '-' + end_month.toString()

  var request = {
    auth: "auth_flexera",
    verb: "POST",
    host: rs_optima_host,
    path: "/bill-analysis/orgs/" + rs_org_id + "/costs/aggregated",
    body_fields: {
      "dimensions": [ "billing_center_id", "vendor_account", "vendor_account_name" ],
      "granularity": "month",
      "metrics": [ "cost_amortized_unblended_adj" ],
      "billing_center_ids": ds_billing_centers_filtered,
      "start_at": start_date,
      "end_at": end_date
    }
  }
EOS
end

datasource "ds_account_list" do
  run_script $js_account_list, $ds_accounts_by_billing_center, $ds_billing_centers
end

script "js_account_list", type: "javascript" do
  parameters "ds_accounts_by_billing_center", "ds_billing_centers"
  result "result"
  code <<-EOS
  bc_object = {}

  _.each(ds_billing_centers, function(bc) { bc_object[bc['id']] = bc['name'] })

  result = {}

  _.each(ds_accounts_by_billing_center, function(account) {
    if (result[account['vendor_account_id']] == undefined) {
      result[account['vendor_account_id']] = []
    }

    result[account['vendor_account_id']].push(bc_object[account['billing_center_id']])
  })
EOS
end

datasource "ds_azure_ri_orders" do
  request do
    auth $auth_azure
    pagination $pagination_azure
    host $param_azure_endpoint
    path "/providers/Microsoft.Capacity/reservationOrders"
    query "api-version", "2022-11-01"
  end
  result do
    encoding "json"
    collect jmes_path(response, "value[*]") do
      field "id", jmes_path(col_item, "id")
      field "name", jmes_path(col_item, "name")
    end
  end
end

datasource "ds_azure_ris_from_azure" do
  iterate $ds_azure_ri_orders
  request do
    auth $auth_azure
    pagination $pagination_azure
    host $param_azure_endpoint
    path join([val(iter_item, "id"), "/reservations"])
    query "api-version", "2022-11-01"
  end
  result do
    encoding "json"
    collect jmes_path(response, "value[*]") do
      field "id", jmes_path(col_item, "id")
      field "name", jmes_path(col_item, "name")
      field "region", jmes_path(col_item, "location")
      field "sku", jmes_path(col_item, "sku.name")
      field "order_id", val(iter_item, "name")
    end
  end
end

datasource "ds_azure_ri_order_table" do
  run_script $js_azure_ri_order_table, $ds_azure_ris_from_azure
end

script "js_azure_ri_order_table", type: "javascript" do
  parameters "ds_azure_ris_from_azure"
  result "result"
  code <<-EOS
  result = {}
  ris_by_order = _.groupBy(ds_azure_ris_from_azure, "order_id")

  _.each(_.keys(ris_by_order), function(order_id) {
    result[order_id] = {
      region: ris_by_order[order_id][0]["region"],
      sku: ris_by_order[order_id][0]["sku"]
    }
  })
EOS
end

datasource "ds_azure_ris_from_flexera" do
  request do
    auth $auth_flexera
    host rs_optima_host
    path join(["/reserved_instances/orgs/", rs_org_id, "/clouds/azure"])
  end
  result do
    encoding "json"
    collect jmes_path(response, "[*]") do
      field "id", jmes_path(col_item, "id")
      field "account_name", jmes_path(col_item, "account_name")
      field "amount", jmes_path(col_item, "amount")
      field "arm_sku_name", jmes_path(col_item, "arm_sku_name")
      field "billing_frequency", jmes_path(col_item, "billing_frequency")
      field "cost_center", jmes_path(col_item, "cost_center")
      field "currency", jmes_path(col_item, "currency")
      field "current_enrollment", jmes_path(col_item, "current_enrollment")
      field "department_name", jmes_path(col_item, "department_name")
      field "description", jmes_path(col_item, "description")
      field "event_date", jmes_path(col_item, "event_date")
      field "event_type", jmes_path(col_item, "event_type")
      field "expiration_date", jmes_path(col_item, "expiration_date")
      field "monthly_cost", jmes_path(col_item, "monthly_cost")
      field "purchased_quantity", jmes_path(col_item, "purchased_quantity")
      field "purchasing_enrollment", jmes_path(col_item, "purchasing_enrollment")
      field "purchasing_subscription_guid", jmes_path(col_item, "purchasing_subscription_guid")
      field "purchasing_subscription_name", jmes_path(col_item, "purchasing_subscription_name")
      field "quantity", jmes_path(col_item, "quantity")
      field "region", jmes_path(col_item, "region")
      field "remaining_quantity", jmes_path(col_item, "remaining_quantity")
      field "reservation_order_id", jmes_path(col_item, "reservation_order_id")
      field "reservation_order_name", jmes_path(col_item, "reservation_order_name")
      field "term", jmes_path(col_item, "term")
      field "util_avg_percentage", jmes_path(col_item, "utilization.avg_utilization_percentage")
      field "util_max_percentage", jmes_path(col_item, "utilization.max_utilization_percentage")
      field "util_min_percentage", jmes_path(col_item, "utilization.min_utilization_percentage")
      field "util_reservation_id", jmes_path(col_item, "utilization.reservation_id")
      field "util_reserved_hours", jmes_path(col_item, "utilization.reserved_hours")
      field "util_sku_name", jmes_path(col_item, "utilization.sku_name")
      field "util_usage_date", jmes_path(col_item, "utilization.usage_date")
      field "util_used_hours", jmes_path(col_item, "utilization.used_hours")
    end
  end
end

datasource "ds_azure_filtered_ris" do
  run_script $js_azure_filtered_ris, $ds_accounts_by_billing_center, $ds_azure_ris_from_flexera
end

script "js_azure_filtered_ris", type: "javascript" do
  parameters "ds_accounts_by_billing_center", "ds_azure_ris_from_flexera"
  result "result"
  code <<-EOS
  bc_account_ids = _.uniq(_.pluck(ds_accounts_by_billing_center, "vendor_account_id"))

  result = _.filter(ds_azure_ris_from_flexera, function(ri) {
    return _.contains(bc_account_ids, ri['purchasing_subscription_guid']) && ri["billing_frequency"] == "Upfront"
  })
EOS
end

datasource "ds_azure_ris_with_breakeven" do
  run_script $js_azure_ris_with_breakeven, $ds_azure_filtered_ris, $ds_azure_ri_order_table, $ds_account_list, $ds_region_table, $ds_azure_vm_pricing, $ds_applied_policy
end

script "js_azure_ris_with_breakeven", type: "javascript" do
  parameters "ds_azure_filtered_ris", "ds_azure_ri_order_table", "ds_account_list", "ds_region_table", "ds_azure_vm_pricing", "ds_applied_policy"
  result "result"
  code <<-EOS
  function breakEvenPoint(amount, reserved_hours, purchased_quantity, hourly_ondemand_price) {
    // Effective hourly rate under the commitment
    committed_rate = amount / (reserved_hours * purchased_quantity)

    // Savings per hour when you actually use the instance
    savings_per_hour = hourly_ondemand_price - committed_rate

    // Hours until your cumulative savings = the commitment cost
    // Return null if there is no breakeven point
    return savings_per_hour > 0 ? amount / savings_per_hour : null
  }

  result = _.map(ds_azure_filtered_ris, function(ri) {
    new_ri = {}
    _.each(_.keys(ri), function(key) { new_ri[key] = ri[key] })

    if (ds_azure_ri_order_table[ri['reservation_order_id']]) {
      new_ri["region"] = ds_azure_ri_order_table[ri['reservation_order_id']]["region"]
      new_ri["instanceType"] = ds_azure_ri_order_table[ri['reservation_order_id']]["sku"]
    } else {
      new_ri["instanceType"] = ri["util_sku_name"]
    }

    region = new_ri['region'] != "" && ds_region_table[new_ri['region']] ? ds_region_table[new_ri['region']] : "US East"
    sku = new_ri["instanceType"]
    os = ri['arm_sku_name'] && ri['arm_sku_name'].toLowerCase().indexOf("windows") != -1 ? "Windows" : "Linux"
    hourly_ondemand_price = null

    if (ds_azure_vm_pricing[region] && ds_azure_vm_pricing[region][sku] && ds_azure_vm_pricing[region][sku][os]) {
      hourly_ondemand_price = ds_azure_vm_pricing[region][sku][os]["pricePerUnit"]
    }

    if (hourly_ondemand_price) {
      new_ri["hourly_ondemand_price"] = hourly_ondemand_price
      new_ri["monthly_ondemand_price"] = hourly_ondemand_price * (365.25 / 12 * 24)

      breakeven = breakEvenPoint(ri["amount"], ri["util_reserved_hours"], ri["purchased_quantity"], hourly_ondemand_price)

      new_ri["breakeven_hours"] = breakeven ? Math.round(breakeven * 100) / 100 : "Never"
      new_ri["breakeven_months"] = breakeven ? Math.round(breakeven / (365.25 / 12 * 24) * 100) / 100 : "Never"
    } else {
      new_ri["hourly_ondemand_price"] = "Not Found"
      new_ri["monthly_ondemand_price"] = "Not Found"
      new_ri["breakeven_hours"] = "Unknown"
      new_ri["breakeven_months"] = "Unknown"
    }

    new_ri["resourceID"] = ri["util_reservation_id"]
    new_ri["accountID"] = ri["purchasing_subscription_guid"]
    new_ri["accountName"] = ri["purchasing_subscription_name"]
    new_ri["billing_centers"] = ds_account_list[new_ri["accountID"]] ? ds_account_list[new_ri["accountID"]].join(', ') : null
    new_ri["os"] = os
    new_ri["total_reserved_hours"] = new_ri["util_reserved_hours"] * ri["purchased_quantity"]
    new_ri["policy_name"] = ds_applied_policy["name"]

    return new_ri
  })
EOS
end

###############################################################################
# Policy
###############################################################################

policy "pol_azure_ris_with_breakeven" do
  validate_each $ds_azure_ris_with_breakeven do
    summary_template "{{ with index data 0 }}{{ .policy_name }}{{ end }}: {{ len data }} Azure Upfront Reservations Found"
    check eq(val(item, "resourceID"), "")
    escalate $esc_email
    export do
      resource_level true
      field "accountID" do
        label "Subscription ID"
      end
      field "accountName" do
        label "Subscription Name"
      end
      field "billing_centers" do
        label "Associated Billing Center(s)"
      end
      field "region" do
        label "Region"
      end
      field "term" do
        label "Term"
      end
      field "resourceID" do
        label "Lease ID"
      end
      field "instanceType" do
        label "Instance Type"
      end
      field "os" do
        label "Operating System"
      end
      field "purchased_quantity" do
        label "Purchased Quantity"
      end
      field "util_reserved_hours" do
        label "Reserved Hours per Commitment"
      end
      field "total_reserved_hours" do
        label "Total Reserved Hours"
      end
      field "expiration_date" do
        label "Expiration Date"
      end
      field "currency" do
        label "Currency"
      end
      field "amount" do
        label "Purchase Cost"
      end
      field "hourly_ondemand_price" do
        label "On-Demand Price (Hourly)"
      end
      field "monthly_ondemand_price" do
        label "On-Demand Price (Monthly)"
      end
      field "breakeven_hours" do
        label "Breakeven Point (Hours)"
      end
      field "breakeven_months" do
        label "Breakeven Point (Months)"
      end
      field "id" do
        label "ID"
        path "resourceID"
      end
    end
  end
end

###############################################################################
# Escalations
###############################################################################

escalation "esc_email" do
  automatic true
  label "Send Email"
  description "Send incident email"
  email $param_email
end

name "Azure Reserved Instances Utilization"
rs_pt_ver 20180301
type "policy"
short_description "Reports when Reserved Instance utilization falls below a threshold. See the [README](https://github.com/flexera-public/policy_templates/tree/master/cost/azure/reserved_instances/utilization) and [docs.flexera.com/flexera/EN/Automation](https://docs.flexera.com/flexera/EN/Automation/AutomationGS.htm) to learn more."
long_description ""
severity "high"
category "Cost"
default_frequency "daily"
info(
  version: "4.0.0",
  provider: "Azure",
  service: "Compute",
  policy_set: "Reserved Instances"
)

###############################################################################
# Parameters
###############################################################################

parameter "param_email" do
  type "list"
  category "Policy Settings"
  label "Email Addresses"
  description "Email addresses of the recipients you wish to notify when new incidents are created."
  default []
end

parameter "param_utilization" do
  type "number"
  category "Policy Settings"
  label "Utilization Threshold (%)"
  description "Reservations with utilization below this percentage will be included in the results."
  min_value 1
  max_value 100
  default 100
end

parameter "param_util_metric" do
  type "string"
  category "Filters"
  label "Utilization Metric"
  description "Whether to use maximum or average utilization when assessing whether a reservation is underutilized."
  allowed_values "Maximum", "Average"
  default "Average"
end

parameter "param_bc_allow_or_deny" do
  type "string"
  category "Filters"
  label "Allow/Deny Billing Centers"
  description "Allow or Deny entered Billing Centers."
  allowed_values "Allow", "Deny"
  default "Allow"
end

parameter "param_billing_centers" do
  type "list"
  category "Filters"
  label "Allow/Deny Billing Center List"
  description "A list of allowed or denied Billing Center names/IDs. Leave blank to report on reservations in all Billing Centers."
  default []
end

###############################################################################
# Authentication
###############################################################################

credentials "auth_flexera" do
  schemes "oauth2"
  label "Flexera"
  description "Select Flexera One OAuth2 credentials"
  tags "provider=flexera"
end

###############################################################################
# Datasources & Scripts
###############################################################################

# Get applied policy metadata for use later
datasource "ds_applied_policy" do
  request do
    auth $auth_flexera
    host rs_governance_host
    path join(["/api/governance/projects/", rs_project_id, "/applied_policies/", policy_id])
    header "Api-Version", "1.0"
  end
end

datasource "ds_billing_centers" do
  request do
    auth $auth_flexera
    host rs_optima_host
    path join(["/analytics/orgs/", rs_org_id, "/billing_centers"])
    header "Api-Version", "1.0"
    header "User-Agent", "RS Policies"
  end
  result do
    encoding "json"
    collect jmes_path(response, "[*]") do
      field "href", jmes_path(col_item, "href")
      field "id", jmes_path(col_item, "id")
      field "name", jmes_path(col_item, "name")
      field "parent_id", jmes_path(col_item, "parent_id")
    end
  end
end

datasource "ds_billing_centers_filtered" do
  run_script $js_billing_centers_filtered, $ds_billing_centers, $param_bc_allow_or_deny, $param_billing_centers
end

script "js_billing_centers_filtered", type: "javascript" do
  parameters "ds_billing_centers", "param_bc_allow_or_deny", "param_billing_centers"
  result "result"
  code <<-EOS
  allow_deny_test = { "Allow": true, "Deny": false }

  if (param_billing_centers.length > 0) {
    billing_centers = _.filter(ds_billing_centers, function(item) {
      id_found = _.contains(param_billing_centers, item['id']) == allow_deny_test[param_bc_allow_or_deny]
      name_found = _.contains(param_billing_centers, item['name']) == allow_deny_test[param_bc_allow_or_deny]
      return id_found || name_found
    })

    // Check for conflicting parents/children and remove children if present
    bc_ids = _.compact(_.pluck(billing_centers, 'id'))
    bad_children = _.filter(ds_billing_centers, function(bc) { return _.contains(bc_ids, bc['parent_id']) })
    bad_children_ids = _.pluck(bad_children, 'id')

    // Create final result with the bad children removed
    final_list = _.reject(billing_centers, function(bc) { return _.contains(bad_children_ids, bc['id']) })
  } else {
    // If we're not filtering at all, just grab all of the top level billing centers
    final_list = _.filter(ds_billing_centers, function(bc) {
      return bc['parent_id'] == null || bc['parent_id'] == undefined
    })
  }

  result = _.compact(_.pluck(final_list, 'id'))
EOS
end

datasource "ds_accounts_by_billing_center" do
  request do
    run_script $js_accounts_by_billing_center, $ds_billing_centers_filtered, rs_org_id, rs_optima_host
  end
  result do
    encoding "json"
    collect jmes_path(response, "rows[*]") do
      field "cost", jmes_path(col_item, "metrics.cost_amortized_unblended_adj")
      field "billing_center_id", jmes_path(col_item, "dimensions.billing_center_id")
      field "vendor_account_id", jmes_path(col_item, "dimensions.vendor_account")
      field "vendor_account_name", jmes_path(col_item, "dimensions.vendor_account_name")
      field "timestamp", jmes_path(col_item, "timestamp")
    end
  end
end

script "js_accounts_by_billing_center", type: "javascript" do
  parameters "ds_billing_centers_filtered", "rs_org_id", "rs_optima_host"
  result "request"
  code <<-EOS
  start_date = new Date().toISOString()
  start_date = start_date.split('-')[0] + '-' + start_date.split('-')[1]

  end_year = Number(start_date.split('-')[0])
  end_month = Number(start_date.split('-')[1]) + 1
  if (end_month == 13) { end_month = 1; end_year++ }
  if (end_month < 10) { end_month = '0' + end_month.toString() }
  end_date = end_year.toString() + '-' + end_month.toString()

  var request = {
    auth: "auth_flexera",
    verb: "POST",
    host: rs_optima_host,
    path: "/bill-analysis/orgs/" + rs_org_id + "/costs/aggregated",
    body_fields: {
      "dimensions": [ "billing_center_id", "vendor_account", "vendor_account_name" ],
      "granularity": "month",
      "metrics": [ "cost_amortized_unblended_adj" ],
      "billing_center_ids": ds_billing_centers_filtered,
      "start_at": start_date,
      "end_at": end_date
    }
  }
EOS
end

datasource "ds_azure_reservations" do
  request do
    auth $auth_flexera
    host rs_optima_host
    path join(["/reserved_instances/orgs/", rs_org_id, "/clouds/azure"])
  end
  result do
    encoding "json"
    collect jmes_path(response, "[*]") do
      field "id", jmes_path(col_item, "id")
      field "account_name", jmes_path(col_item, "account_name")
      field "amount", jmes_path(col_item, "amount")
      field "arm_sku_name", jmes_path(col_item, "arm_sku_name")
      field "billing_frequency", jmes_path(col_item, "billing_frequency")
      field "cost_center", jmes_path(col_item, "cost_center")
      field "currency", jmes_path(col_item, "currency")
      field "current_enrollment", jmes_path(col_item, "current_enrollment")
      field "department_name", jmes_path(col_item, "department_name")
      field "description", jmes_path(col_item, "description")
      field "event_date", jmes_path(col_item, "event_date")
      field "event_type", jmes_path(col_item, "event_type")
      field "expiration_date", jmes_path(col_item, "expiration_date")
      field "monthly_cost", jmes_path(col_item, "monthly_cost")
      field "purchased_quantity", jmes_path(col_item, "purchased_quantity")
      field "purchasing_enrollment", jmes_path(col_item, "purchasing_enrollment")
      field "purchasing_subscription_guid", jmes_path(col_item, "purchasing_subscription_guid")
      field "purchasing_subscription_name", jmes_path(col_item, "purchasing_subscription_name")
      field "quantity", jmes_path(col_item, "quantity")
      field "region", jmes_path(col_item, "region")
      field "remaining_quantity", jmes_path(col_item, "remaining_quantity")
      field "reservation_order_id", jmes_path(col_item, "reservation_order_id")
      field "reservation_order_name", jmes_path(col_item, "reservation_order_name")
      field "term", jmes_path(col_item, "term")
      field "util_avg_percentage", jmes_path(col_item, "utilization.avg_utilization_percentage")
      field "util_max_percentage", jmes_path(col_item, "utilization.max_utilization_percentage")
      field "util_min_percentage", jmes_path(col_item, "utilization.min_utilization_percentage")
      field "util_reservation_id", jmes_path(col_item, "utilization.reservation_id")
      field "util_reserved_hours", jmes_path(col_item, "utilization.reserved_hours")
      field "util_sku_name", jmes_path(col_item, "utilization.sku_name")
      field "util_usage_date", jmes_path(col_item, "utilization.usage_date")
      field "util_used_hours", jmes_path(col_item, "utilization.used_hours")
    end
  end
end

datasource "ds_filtered_azure_reservations" do
  run_script $js_filtered_azure_reservations, $ds_accounts_by_billing_center, $ds_azure_reservations
end

script "js_filtered_azure_reservations", type: "javascript" do
  parameters "ds_accounts_by_billing_center", "ds_azure_reservations"
  result "result"
  code <<-EOS
  bc_account_ids = _.uniq(_.pluck(ds_accounts_by_billing_center, "vendor_account_id"))

  result = _.filter(ds_azure_reservations, function(ri) {
    return _.contains(bc_account_ids, ri['purchasing_subscription_guid'])
  })
EOS
end

datasource "ds_account_list" do
  run_script $js_account_list, $ds_accounts_by_billing_center, $ds_billing_centers
end

script "js_account_list", type: "javascript" do
  parameters "ds_accounts_by_billing_center", "ds_billing_centers"
  result "result"
  code <<-EOS
  bc_object = {}

  _.each(ds_billing_centers, function(bc) { bc_object[bc['id']] = bc['name'] })

  result = {}

  _.each(ds_accounts_by_billing_center, function(account) {
    if (result[account['vendor_account_id']] == undefined) {
      result[account['vendor_account_id']] = []
    }

    result[account['vendor_account_id']].push(bc_object[account['billing_center_id']])
  })
EOS
end

datasource "ds_underutil_reservations" do
  run_script $js_underutil_reservations, $ds_filtered_azure_reservations, $ds_account_list, $ds_applied_policy, $param_utilization, $param_util_metric
end

script "js_underutil_reservations", type: "javascript" do
  parameters "ds_filtered_azure_reservations", "ds_account_list", "ds_applied_policy", "param_utilization", "param_util_metric"
  result "result"
  code <<-'EOS'
  underutil_ris = _.filter(ds_filtered_azure_reservations, function(ri) {
    utilization = ri['util_max_percentage']
    if (param_util_metric == "Average") { utilization = ri['util_avg_percentage'] }
    return utilization < param_utilization
  })

  result = _.map(underutil_ris, function(ri) {
    billing_centers = ""

    if (ds_account_list[ri['purchasing_subscription_guid']] != undefined) {
      billing_centers = ds_account_list[ri['purchasing_subscription_guid']].join(', ')
    }

    purchased_hours = ri['util_reserved_hours']
    used_hours = ri['util_used_hours']
    unused_hours = purchased_hours - used_hours

    term_table = { "P1Y": "1 Year", "P3Y": "3 Year" }
    term = term_table[ri['term']]
    if (term == undefined) { term = ri['term'] }

    return {
      account_name: ri['account_name'],
      instanceCount: ri['amount'],
      arm_sku_name: ri['arm_sku_name'],
      billing_frequency: ri['billing_frequency'],
      cost_center: ri['cost_center'],
      currency: ri['currency'],
      current_enrollment: ri['current_enrollment'],
      department_name: ri['department_name'],
      description: ri['description'],
      event_date: ri['event_date'],
      event_type: ri['event_type'],
      expiration_date: new Date(ri['expiration_date']).toISOString(),
      monthly_cost: ri['monthly_cost'],
      purchased_quantity: ri['purchased_quantity'],
      purchasing_enrollment: ri['purchasing_enrollment'],
      accountID: ri['purchasing_subscription_guid'],
      accountName: ri['purchasing_subscription_name'],
      quantity: ri['quantity'],
      region: ri['region'],
      remaining_quantity: ri['remaining_quantity'],
      reservation_order_id: ri['reservation_order_id'],
      reservation_order_name: ri['reservation_order_name'],
      util_avg_percentage: ri['util_avg_percentage'],
      util_max_percentage: ri['util_max_percentage'],
      util_min_percentage: ri['util_min_percentage'],
      id: ri['util_reservation_id'],
      instanceType: ri['util_sku_name'],
      util_usage_date: ri['util_usage_date'],
      term: term,
      purchased_hours: Math.round(purchased_hours * 100) / 100,
      used_hours: Math.round(used_hours * 100) / 100,
      unused_hours: Math.round(unused_hours * 100) / 100,
      billing_centers: billing_centers,
      policy_name: ds_applied_policy['name'],
      threshold: param_utilization,
      threshold_metric: param_util_metric,
      message: ""
    }
  })

  result = _.sortBy(result, 'utilization')

  // Message for incident output
  if (result.length > 0) {
    total_ris = ds_filtered_azure_reservations.length.toString()
    total_underutil_ris = result.length.toString()
    underutil_ris_percentage = (total_underutil_ris / total_ris * 100).toFixed(2).toString() + '%'

    ri_verb = "have"
    if (total_underutil_ris == 1) { ri_verb = "has" }

    result[0]['message'] = [
      "Out of ", total_ris, " Azure Reservations analyzed, ",
      total_underutil_ris, " (", underutil_ris_percentage,
      ") ", ri_verb, " less than ", param_utilization, "% ",
      param_util_metric.toLowerCase(), " utilization.\n\n",
      "The above settings can be modified by editing the applied policy and ",
      "changing the appropriate parameters."
    ].join('')
  }
EOS
end

###############################################################################
# Policy
###############################################################################

policy "pol_ri_utilization" do
  validate_each $ds_underutil_reservations do
    summary_template "{{ with index data 0 }}{{ .policy_name }}{{ end }}: {{ len data }} Azure Underutilized Reservations Found"
    detail_template "{{ with index data 0 }}{{ .message }}{{ end }}"
    check eq(val(item, "id"), "")
    escalate $esc_email
    export do
      resource_level true
      field "accountID" do
        label "Account ID"
      end
      field "accountName" do
        label "Account Name"
      end
      field "billing_centers" do
        label "Associated Billing Center(s)"
      end
      field "id" do
        label "Reservation ID"
      end
      field "region" do
        label "Region"
      end
      field "term" do
        label "Term"
      end
      field "expiration_date" do
        label "Expiration Date"
      end
      field "instanceType" do
        label "Instance Type"
      end
      field "instanceCount" do
        label "Instance Count"
      end
      field "util_avg_percentage" do
        label "Average Utilization (%)"
      end
      field "util_max_percentage" do
        label "Maximum Utilization (%)"
      end
      field "util_min_percentage" do
        label "Minimum Utilization (%)"
      end
      field "purchased_hours" do
        label "Purchased Hours"
      end
      field "used_hours" do
        label "Used Hours"
      end
      field "unused_hours" do
        label "Unused Hours"
      end
      field "threshold" do
        label "Utilization Threshold (%)"
      end
      field "threshold_metric" do
        label "Utilization Metric"
      end
    end
  end
end

###############################################################################
# Escalations
###############################################################################

escalation "esc_email" do
  automatic true
  label "Send Email"
  description "Send incident email"
  email $param_email
end

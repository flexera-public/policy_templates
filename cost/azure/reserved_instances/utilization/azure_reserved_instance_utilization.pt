name "Azure Reserved Instances Utilization"
rs_pt_ver 20180301
type "policy"
short_description "A policy that sends email notifications when utilization falls below a threshold. See the [README](https://github.com/flexera-public/policy_templates/tree/master/cost/azure/reserved_instances/utilization) and [docs.flexera.com/flexera/EN/Automation](https://docs.flexera.com/flexera/EN/Automation/AutomationGS.htm) to learn more."
long_description ""
severity "medium"
category "Cost"
default_frequency "weekly"
info(
  version: "3.1.1",
  provider: "Azure",
  service: "Compute",
  policy_set: ""
)

###############################################################################
# Parameters
###############################################################################

parameter "param_email" do
  type "list"
  category "Policy Settings"
  label "Email addresses"
  description "A list of email addresses to notify."
  default []
end

parameter "param_azure_endpoint" do
  type "string"
  category "Policy Settings"
  label "Azure Endpoint"
  description "Azure Endpoint to access resources"
  allowed_values "management.azure.com", "management.chinacloudapi.cn"
  default "management.azure.com"
end

parameter "param_utilization" do
  type "number"
  category "Policy Settings"
  label "Maximum Reservation Utilization Threshold"
  description "Show Reservations with utilization below this value (%)"
  min_value 1
  max_value 100
  default 100
end

parameter "param_lookback_period" do
  type "string"
  category "Reservation Settings"
  label "Look Back Period"
  description "Number of days of prior Azure Reservation usage to analyze."
  allowed_values "Last 7 days", "Last 30 days"
  default "Last 7 days"
end

###############################################################################
# Authentication
###############################################################################

credentials "auth_azure" do
  schemes "oauth2"
  label "Azure"
  description "Select the Azure Resource Manager Credential from the list."
  tags "provider=azure_rm"
end

###############################################################################
# Pagination
###############################################################################

pagination "pagination_azure" do
  get_page_marker do
    body_path "nextLink"
  end
  set_page_marker do
    uri true
  end
end

###############################################################################
# Datasources & Scripts
###############################################################################

#GET CURRENCY REFERENCE AND CURRENCY CODE
datasource "ds_currency_reference" do
  request do
    host "raw.githubusercontent.com"
    path "/flexera-public/policy_templates/master/data/currency/currency_reference.json"
    header "User-Agent", "RS Policies"
  end
end

#GET LIST OF BILLING ACCOUNTS
datasource "ds_billing_accounts" do
  request do
    auth $auth_azure
    host $param_azure_endpoint
    path "/providers/Microsoft.Billing/billingAccounts"
    query "api-version", "2019-10-01-preview"
  end
  result do
    encoding "json"
    collect jmes_path(response, "value") do
      field "id", jmes_path(col_item, "id")
      field "name", jmes_path(col_item, "name")
      field "agreementType", jmes_path(col_item, "properties.agreementType")
      field "currency", jmes_path(col_item, "enrollmentDetails.currency")
    end
  end
end

#GET LIST OF BILLING PROFILES (IF TYPE IS MICROSOFT CUSTOMER AGREEMENT)
datasource "ds_billing_profiles" do
  iterate $ds_billing_accounts
  request do
    auth $auth_azure
    host $param_azure_endpoint
    path join(["/providers/Microsoft.Billing/billingAccounts/", val(iter_item, "name"), "/billingProfiles" ])
    query "api-version", "2020-05-01"
    ignore_status [400]   # Required for policy to not error for EA Customers (as EA Customers do not have concept of billing profile)
  end
  result do
    encoding "json"
    collect jmes_path(response, "value") do
      field "billingAccountId", val(iter_item, "id")
      field "billingAccountName", val(iter_item, "name")
      field "agreementType", val(iter_item, "agreementType")
      field "billingAccountCurrency", val(iter_item, "currency")
      field "billingProfileId", jmes_path(col_item, "id")
      field "billingProfileName", jmes_path(col_item, "name")
      field "billingProfileCurrency", jmes_path(col_item, "properties.currency")
    end
  end
end

#IDENTIFY WHETHER ENTERPRISE AGREEMENT (EA) OR MICROSOFT CUSTOMER AGREEMENT (MCA)
datasource "ds_billing_details" do
  run_script $js_billing_details, $ds_billing_profiles, $ds_billing_accounts
end

script "js_billing_details", type: "javascript" do
  parameters "ds_billing_profiles", "ds_billing_accounts"
  result "result"
  code <<-EOS
    result = []

    _.each(ds_billing_accounts, function(acc) {
      if (acc.agreementType == "EnterpriseAgreement") {
        result.push({
          "id": acc.id,
          "name": acc.name,
          "agreementType": acc.agreementType,
          "currency": acc.currency
        })
      } else {
        var billing_profiles = _.filter(ds_billing_profiles, function(prof) { return acc.name == prof.billingAccountName })
        _.each(billing_profiles, function(prof) {
          result.push({
            "id": prof.billingProfileId,
            "name": prof.billingProfileName,
            "agreementType": prof.agreementType,
            "currency": prof.billingProfileCurrency
          })
        })
      }
    })
  EOS
end

#GET RESERVATION TRANSACTION DETAILS - https://learn.microsoft.com/en-us/rest/api/consumption/reservation-transactions/list?tabs=HTTP
#Details on Migration from EA - https://learn.microsoft.com/en-us/azure/cost-management-billing/automate/migrate-ea-reporting-arm-apis-overview
datasource "ds_reservation_transactions" do
  iterate $ds_billing_details
  request do
    run_script $js_reservation_transactions, val(iter_item, "id"), $param_azure_endpoint
  end
  result do
    encoding "json"
    collect jmes_path(response, "value") do
      field "billingAccountId", val(iter_item, "id")
      field "billingAccountName", val(iter_item, "name")
      field "agreementType", val(iter_item, "agreementType")
      field "billingFrequency", jmes_path(col_item, "properties.billingFrequency")
      field "billingMonth", jmes_path(col_item, "properties.billingMonth")
      field "purchasingEnrollment", jmes_path(col_item, "properties.purchasingEnrollment")
      field "currentEnrollment", jmes_path(col_item, "properties.currentEnrollment")
      field "skuName", jmes_path(col_item, "properties.armSkuName")
      field "term", jmes_path(col_item, "properties.term")
      field "region", jmes_path(col_item, "properties.region")
      field "purchasingSubscriptionGuid", jmes_path(col_item, "properties.purchasingSubscriptionGuid")
      field "purchasingSubscriptionName", jmes_path(col_item, "properties.purchasingSubscriptionName")
      field "departmentName", jmes_path(col_item, "properties.departmentName")
      field "costCenter", jmes_path(col_item, "properties.costCenter")
      field "eventDate", jmes_path(col_item, "properties.eventDate")
      field "eventType", jmes_path(col_item, "properties.eventType")
      field "reservationOrderId", jmes_path(col_item, "properties.reservationOrderId")
      field "reservationOrderName", jmes_path(col_item, "properties.reservationOrderName")
      field "quantity", jmes_path(col_item, "properties.quantity")
      field "amount", jmes_path(col_item, "properties.amount")
      field "currency", jmes_path(col_item, "properties.currency")
      field "description", jmes_path(col_item, "properties.description")
      field "accountName", jmes_path(col_item, "properties.accountName")
      field "accountOwnerEmail", jmes_path(col_item, "properties.accountOwnerEmail")
      field "monetaryCommitment", jmes_path(col_item, "properties.monetaryCommitment")
      field "overage", jmes_path(col_item, "properties.overage")
    end
  end
end

script "js_reservation_transactions", type: "javascript" do
  parameters "ds_billing_account_id", "param_azure_endpoint"
  result "request"
  code <<-EOS
    //Get start and end date (past 30 days)
    var date = new Date()
    date.setDate(date.getDate() - 2)
    var end_date = date.toISOString().slice(0, 10)
    date.setDate(date.getDate() - 1094)
    var start_date = date.toISOString().slice(0, 10)

    //Create Filter Query Param value
    var filter_query = "properties/eventDate ge " + start_date + " AND properties/eventDate le " + end_date

    //Create API request
    var request = {
      auth: "auth_azure",
      pagination: "pagination_azure",
      host: param_azure_endpoint,
      path: ds_billing_account_id + "/providers/Microsoft.Consumption/reservationTransactions",
      query_params: {
        "$filter": filter_query,
        "api-version": "2023-05-01"
      },
      headers: {
        "User-Agent": "RS Policies"
      }
    }
  EOS
end

#REMOVE DUPLICATE DATA
datasource "ds_reduced_reservation_transactions" do
  run_script $js_reduced_reservation_transactions, $ds_reservation_transactions
end

script "js_reduced_reservation_transactions", type: "javascript" do
  parameters "ds_reservation_transactions"
  result "result"
  code <<-'EOS'
    result = []

    //get rid of reservation transactions that no longer apply (if even applicable)
    charges_grouped_by_reservation_order = _.groupBy(ds_reservation_transactions, "reservationOrderId")
    reservation_orders = _.keys(charges_grouped_by_reservation_order, "reservationOrderId")

    var paid_to_date = []
    _.each(reservation_orders, function(order) {
      var total_amount_paid = 0
      var months_paid = 0

      //get the purchase date (the first event date) and expiration date for the reservation
      var first_month = _.last(charges_grouped_by_reservation_order[order])
      var purchase_date = first_month.eventDate

      var term_years = 1
      if (first_month.term == "P3Y") {
        term_years = 3
      }
      var expiration_date = new Date(purchase_date)
      expiration_date.setFullYear(expiration_date.getFullYear() + term_years)
      expiration_date = expiration_date.toISOString()

      //get the monthlyAmount for the most recent date
      var most_recent_month = _.first(_.filter(charges_grouped_by_reservation_order[order], function(ord) { return ord.eventType == "Purchase" }))
      //var most_recent_month = _.first(charges_grouped_by_reservation_order[order])
      var monthly_amount = most_recent_month.amount
      var event_type = most_recent_month.eventType
      var quantity_purchased = most_recent_month.quantity

      _.each(charges_grouped_by_reservation_order[order], function(charge){
        total_amount_paid += charge.amount
        months_paid ++
      })

      paid_to_date.push({
        "reservationOrderId": order,
        "totalAmount": total_amount_paid,
        "months": months_paid,
        "monthlyAmount": monthly_amount,
        "eventType": event_type,
        "quantity": quantity_purchased,
        "purchaseDate": purchase_date,
        "expirationDate": expiration_date
      })
    })

    //remove all duplicates
    result = _.uniq(ds_reservation_transactions, function(x){ return x.reservationOrderId })

    //enrich data with total amount paid to date, and total amount outstanding
    _.each(result, function(charge){

      amount_paid = _.find(paid_to_date, function(amount){ return amount.reservationOrderId == charge.reservationOrderId })
      charge["eventType"] = amount_paid.eventType
      charge["amountPaidToDate"] = parseFloat(amount_paid.totalAmount).toFixed(2)
      charge["quantity"] = amount_paid.quantity
      charge["purchaseDate"] = amount_paid.purchaseDate
      charge["expirationDate"] = amount_paid.expirationDate

      if( charge.billingFrequency == "Recurring" ){
        if (charge.term == "P1Y" ){
          charge["amountOutstandingToDate"] = parseFloat((12 - amount_paid.months) * amount_paid.monthlyAmount).toFixed(2)
        } else {
          charge["amountOutstandingToDate"] = parseFloat((36 - amount_paid.months) * amount_paid.monthlyAmount).toFixed(2)
        }
      } else {
        charge["amountOutstandingToDate"] = 0
      }

      charge["amount"] = parseFloat(amount_paid.monthlyAmount).toFixed(2)
    })
  EOS
end

#GET INDIVIDUAL DATES WITHIN LOOKBACK PERIOD - without doing this leads to this error: "The response is too large and exceeds the maximum permissible limit. Reduce the date range in the request and try again."
datasource "ds_lookback_period_dates" do
  run_script $js_lookback_period_dates, $param_lookback_period
end

script "js_lookback_period_dates", type: "javascript" do
  parameters "param_lookback_period"
  result "result"
  code <<-EOS
    //Get start and end date based on lookback period parameter
    var lookback_period = 30
    if ( param_lookback_period == "Last 7 days" ) {
      lookback_period = 7
    } else {
      lookback_period = 30
    }

    var end_date = new Date()
    end_date.setDate(end_date.getDate() - 2)
    var start_date = new Date()
    start_date.setDate(start_date.getDate() - lookback_period - 2)

    //Get the Dates in the Lookback Period
    var days_in_lookback_period = []
    while (start_date < end_date) {
      var next_day = new Date(start_date)
      next_day.setDate(start_date.getDate() + 1)

      days_in_lookback_period.push({
        "startDate": start_date.toISOString().split('T')[0],
        "endDate": next_day.toISOString().split('T')[0]
      })

      start_date = next_day
    }

    result = days_in_lookback_period
  EOS
end

#GET BILLING ACCOUNT-LOOKBACK PERIOD COMBINATIONS REQUIRED FOR MICROSOFT AZURE RESERVATION SUMMARIES DETAILS API CALL
datasource "ds_billing_account_lookback_period_combinations" do
  run_script $js_billing_account_lookback_period_combinations, $ds_billing_details, $ds_lookback_period_dates
end

script "js_billing_account_lookback_period_combinations", type: "javascript" do
  parameters "ds_billing_accounts", "ds_lookback_period_dates"
  result "result"
  code <<-EOS
    result = []

    //Loop through each billing account
    _.each(ds_billing_accounts, function(ba) {
      //Loop through each lookback period date range
      _.each(ds_lookback_period_dates, function(range) {
        result.push({
          "billingAccountId": ba.id,
          "agreementType": ba.agreementType,
          "lookbackPeriodDateRange": range
        })
      })
    })
  EOS
end

#GET RESERVATION SUMMARIES (UTILIZATION) DETAILS - https://learn.microsoft.com/en-us/rest/api/consumption/reservations-summaries/list?view=rest-consumption-2023-05-01&tabs=HTTP#reservationsummariesdailywithbillingaccountid
datasource "ds_reservation_summaries" do
  iterate $ds_billing_account_lookback_period_combinations
  request do
    run_script $js_reservation_summaries, val(iter_item, "billingAccountId"), val(iter_item, "agreementType"), val(iter_item, "lookbackPeriodDateRange"), $param_azure_endpoint 
  end
  result do
    encoding "json"
    collect jmes_path(response, "value[*]") do
      field "reservationSummaryId", jmes_path(col_item, "id")
      field "reservationSummaryName", jmes_path(col_item, "name")
      field "reservationOrderId", jmes_path(col_item, "properties.reservationOrderId")
      field "reservationId", jmes_path(col_item, "properties.reservationId")
      field "skuName", jmes_path(col_item, "properties.skuName")
      field "minUtilizationPercentage", jmes_path(col_item, "properties.minUtilizationPercentage")
      field "avgUtilizationPercentage", jmes_path(col_item, "properties.avgUtilizationPercentage")
      field "maxUtilizationPercentage", jmes_path(col_item, "properties.maxUtilizationPercentage")
      field "reservedHours", jmes_path(col_item, "properties.reservedHours")
      field "usedHours", jmes_path(col_item, "properties.usedHours")
      field "usageDate", jmes_path(col_item, "properties.usageDate")
    end
  end
end

script "js_reservation_summaries", type: "javascript" do
  parameters "ds_billing_account_id", "ds_agreement_type", "ds_lookback_period_date_range", "param_azure_endpoint"
  result "request"
  code <<-EOS
    //API query params are structured differently depending on Agreement Type (MCA vs EA)
    var query_params = {}
    if (ds_agreement_type == "EnterpriseAgreement") {
      //Create Filter Query Param value
      var filter_query = "properties/usageDate ge " + ds_lookback_period_date_range.startDate + " AND properties/usageDate le " + ds_lookback_period_date_range.startDate
      query_params = {
        "$filter": filter_query,
        "grain": "daily",
        "api-version": "2023-05-01"
      }
    } else {
      query_params = {
        "startDate": ds_lookback_period_date_range.startDate,
        "endDate": ds_lookback_period_date_range.startDate,
        "grain": "daily",
        "api-version": "2023-05-01"
      }
    }

    //Create API Request
    var request = {
      auth: "auth_azure",
      pagination: "pagination_azure",
      host: param_azure_endpoint,
      path: ds_billing_account_id + "/providers/Microsoft.Consumption/reservationSummaries",
      query_params: query_params,
      headers: {
        "User-Agent": "RS Policies"
      }
    }
  EOS
end

#CALCULATE AVERAGE UTILIZATION OVER LOOKBACK PERIOD FOR EACH RESERVATION ORDER ID
datasource "ds_reduced_reservation_summaries" do
  run_script $js_reduced_reservation_summaries, $ds_reservation_summaries
end

script "js_reduced_reservation_summaries", type: "javascript" do
  parameters "ds_reservation_summaries"
  result "result"
  code <<-EOS

    //group utilization data by reservation order ID
    util_grouped_by_reservation_order = _.groupBy(ds_reservation_summaries, "reservationOrderId")
    reservation_orders = _.keys(util_grouped_by_reservation_order, "reservationOrderId")

    //calculate average utilization and totals for reserved/used hours over period
    var period = []
    _.each(reservation_orders, function(order){

      var total_reserved_hours = 0, total_used_hours = 0
      var days = 0
      var sorted_utilization_data = _.sortBy(util_grouped_by_reservation_order[order], "usageDate")
      var sku_name = _.last(sorted_utilization_data).skuName
      var reservation_id = _.last(sorted_utilization_data).reservationId

      _.each(util_grouped_by_reservation_order[order], function(util) {
        //This If Statement catches Reservations that do not have Utilization data, such as Azure Databricks
        if ( util.reservedHours != null ) {
          total_reserved_hours += util.reservedHours
        }
        if ( util.usedHours != null ) {
          total_used_hours += util.usedHours
        }
        days ++
      })

      var avg_utilization_percentage = 0
      var reservation_data_exists = false
      if (total_reserved_hours != 0) {
        avg_utilization_percentage = (total_used_hours / total_reserved_hours) * 100
        reservation_data_exists = true
      }

      period.push({
        "reservationOrderId": order,
        "reservedHours": total_reserved_hours,
        "usedHours": total_used_hours,
        "avgUtilizationPercentage": avg_utilization_percentage,
        "skuName": sku_name,
        "reservationId": reservation_id,
        "reservationDataExists": reservation_data_exists
      })
    })
    result = period
  EOS
end

#GET DATA WITH INSTANCE FAMILIES FOR INSTANCE TYPES
datasource "ds_isf_ratio_csv" do
  request do
    host "aka.ms"
    path "/isf"
  end
  result do
    encoding "text"
  end
end

#COMBINE CHARGES DETAILS AND SUMMARY DETAILS FOR RESERVATIONS
datasource "ds_reservation_purchase_details" do
  run_script $js_reservation_purchase_details, $ds_reduced_reservation_transactions, $ds_reduced_reservation_summaries, $ds_isf_ratio_csv, $ds_currency_reference, $param_utilization
end

script "js_reservation_purchase_details", type: "javascript" do
  parameters "reservation_transactions_data", "reservation_summaries_data", "isf_ratio_csv", "currency_reference", "param_utilization"
  result "all_data"
  code <<-'EOS'

    //function for formatting spend number
    function formatNumber(number, separator) {
      var numString = number.toString();
      var values = numString.split(".");
      var result = ''
      while ( values[0].length > 3 ) {
        var chunk = values[0].substr(-3)
        values[0] = values[0].substr(0, values[0].length - 3)
        result = separator + chunk + result
      }
      if ( values[0].length > 0 ) {
        result = values[0] + result
      }
      if ( values[1] == undefined ) {
        return result;
      }
      return result + "." + values[1];
    }

    //format costs with currency symbol and thousands separator
    var cur = "", separator = ""
    if ( _.size(reservation_transactions_data) > 0 && reservation_transactions_data[0].currency !== undefined ) {
      if ( currency_reference[ reservation_transactions_data[0].currency ] !== undefined ) {
        cur = currency_reference[ reservation_transactions_data[0].currency ].symbol
        if ( currency_reference[ reservation_transactions_data[0].currency ].t_separator !== undefined ) {
          separator = currency_reference[ reservation_transactions_data[0].currency ].t_separator
        } else {
          separator = ""
        }
      } else {
        cur = ""
        separator = ""
      }
    } else {
      cur = "$"
      separator = ","
    }

    //convert normalization factor csv to json
    var isf_ratio_array = isf_ratio_csv.toString().split("\r\n")
    isf_ratio_array = _.rest(isf_ratio_array)

    var instance_data = []
    _.each(isf_ratio_array, function(ratio){
      instance_data.push({
        "instance_family": ratio.split(",")[0],
        "instance_type": ratio.split(",")[1],                 //specifying 'toLowerCase()' in If condition on line 374 results in cannot access member 'toLowerCase()' as is undefined in some cases
        "nfu": ratio.split(",")[2]
      })
    })

    //combine reservation charge data with reservation utilization data, and calculate total wasted spend per month
    var total_wastage = 0

    _.each(reservation_transactions_data, function(charge) {
      var summary_details = _.find(reservation_summaries_data, function(summary){
        return summary.reservationOrderId == charge.reservationOrderId
      })

      if ( summary_details != undefined ) {
        charge["reservationId"] = summary_details.reservationId
        charge["avgUtilizationPercentage"] = summary_details.avgUtilizationPercentage
        charge["reservedHours"] = summary_details.reservedHours
        charge["usedHours"] = summary_details.usedHours

        if ( summary_details.reservationDataExists == true ) {
          var wastage_amount = ((100 - Number(summary_details.avgUtilizationPercentage)) / 100) * Number(charge.amount)
          total_wastage += wastage_amount
          charge["wastageAmount"] = parseFloat(wastage_amount).toFixed(2)
        } else {
          charge["wastageAmount"] = "0.00"
        }
      } else {
        charge["reservationId"] = ""
        charge["avgUtilizationPercentage"] = ""
        charge["reservedHours"] = ""
        charge["usedHours"] = ""
      }
    })

    combined_reservation_details = _.reject(reservation_transactions_data, function(data) { return data.reservationId == "" })
    combined_reservation_details = _.reject(combined_reservation_details, function(data) { return Number(data.avgUtilizationPercentage) > param_utilization })

    //enrich combined_reservation_details with instance family
    _.each(combined_reservation_details, function(reservation) {
      var instance_family = _.find(instance_data, function(inst) { return reservation.skuName == inst.instance_type })           //find where instance type name matches (non-case sensitive)

      if ( instance_family == undefined ) {
        reservation["instanceFamily"] = ""
      } else {
        reservation["instanceFamily"] = instance_family.instance_family
      }
    })

    total_wastage = cur + ' ' + formatNumber((Math.round(total_wastage * 100) / 100), separator)

    all_data = {
      "reservation_details": combined_reservation_details,
      "message": "The total estimated monthly wasted spend is " + total_wastage
    }
  EOS
end

###############################################################################
# Policy
###############################################################################

policy "pol_azure_active_reserved_instances" do
  validate $ds_reservation_purchase_details do
    summary_template "{{ rs_project_name }} (Account ID: {{ rs_project_id }}): {{ len data.reservation_details }} active Azure Reserved Instances - {{ parameters.param_lookback_period }}"
    detail_template <<-EOS
{{data.message}}
EOS
    check eq(size(val(data, "reservation_details")), 0)
    escalate $esc_email
    export "reservation_details" do
      resource_level false
      field "agreementType" do
        label "Agreement Type"
      end
      field "reservationId" do
        label "Reservation ID"
      end
      field "purchasingSubscriptionGuid" do
        label "Purchasing Subscription GUID"
      end
      field "skuName" do
        label "SKU Name"
      end
      field "instanceFamily" do
        label "Instance Family"
      end
      field "region" do
        label "Region"
      end
      field "term" do
        label "Term"
      end
      field "quantity" do
        label "Quantity Purchased"
      end
      field "purchaseDate" do
        label "Reservation Purchase Date"
      end
      field "eventDate" do
        label "Most Recent Reservation Payment Date"
      end
      field "eventType" do
        label "Event Type"
      end
      field "expirationDate" do
        label "Reservation Expiration Date"
      end
      field "avgUtilizationPercentage" do
        label "Avg. Utilizaton %"
      end
      field "usedHours" do
        label "Used Hours"
      end
      field "reservedHours" do
        label "Reserved Hours"
      end
      field "amount" do
        label "Reservation Monthly Cost"
      end
      field "amountPaidToDate" do
        label "Reservation Amount Paid to Date"
      end
      field "amountOutstandingToDate" do
        label "Reservation Amount Outstanding"
      end
      field "wastageAmount" do
        label "Reservation Monthly Wasted Spend"
      end
      field "currency" do
        label "Currency"
      end
      field "purchasingSubscriptionName" do
        label "Purchasing Subscription Name"
      end
      field "reservationOrderId" do
        label "Reservation Order ID"
      end
      field "reservationOrderName" do
        label "Reservation Order Name"
      end
      field "departmentName" do
        label "Department Name"
      end
      field "costCenter" do
        label "Cost Center"
      end
      field "description" do
        label "Description"
      end
      field "billingFrequency" do
        label "Billing Frequency"
      end
      field "purchasingEnrollment" do
        label "Purchasing Enrollment"
      end
      field "currentEnrollment" do
        label "Current Enrollment"
      end
      field "id" do
        label "ID"
        path "reservationOrderId"
      end
    end
  end
end

###############################################################################
# Escalations
###############################################################################

escalation "esc_email" do
  automatic true
  label "Send Email"
  description "Sends incident email"
  email $param_email
end

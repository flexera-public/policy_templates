name "Azure Unused SQL Databases"
rs_pt_ver 20180301
type "policy"
short_description "Check for database services that have no connections and decommissions them after approval. See the [README](https://github.com/flexera/policy_templates/tree/master/cost/azure/unused_sql_databases/) and [docs.flexera.com/flexera/EN/Automation](https://docs.flexera.com/flexera/EN/Automation/AutomationGS.htm) to learn more."
long_description ""
severity "low"
category "Cost"
default_frequency "daily"
info(
  version: "3.1",
  provider: "Azure",
  service: "SQL",
  policy_set: "Unused Database Services"
  )

###############################################################################
# Parameters
###############################################################################

parameter "param_email" do
  type "list"
  label "Email addresses to notify"
  description "Email addresses of the recipients you wish to notify when new incidents are created."
end

parameter "param_exclusion_tag_key" do
  type "string"
  category "User Inputs"
  label "Exclusion Tag Key"
  description "Azure-native SQL Database tag key to ignore databases. Only supply the tag key. The policy assumes that the tag value is irrelevant."
end

parameter "param_azure_endpoint" do
  type "string"
  label "Azure Endpoint"
  description "Azure Endpoint to access resources"
  allowed_values "management.azure.com", "management.chinacloudapi.cn"
  default "management.azure.com"
end

parameter "param_subscription_whitelist" do
  label "Subscription Whitelist"
  type "list"
  description "Whitelisted Subscriptions, if empty, all subscriptions will be checked"
end

parameter "param_automatic_action" do
  type "list"
  label "Automatic Actions"
  description "When this value is set, this policy will automatically take the selected action(s)"
  allowed_values ["Terminate Instances"]
end

parameter "param_log_to_cm_audit_entries" do
  type "string"
  label "Log to CM Audit Entries"
  description "Boolean for whether or not to log any debugging information from actions to CM Audit Entries, this should be left set to No on Flexera EU"
  default "No"
  allowed_values "Yes", "No"
end

###############################################################################
# Authentication
###############################################################################
#authenticate with Azure
credentials "azure_auth" do
  schemes "oauth2"
  label "Azure"
  description "Select the Azure Resource Manager Credential from the list."
  tags "provider=azure_rm"
end

credentials "auth_rs" do
  schemes "oauth2"
  label "flexera"
  description "Select FlexeraOne OAuth2 credentials"
  tags "provider=flexera"
end

###############################################################################
# Pagination
###############################################################################
pagination "azure_pagination" do
  get_page_marker do
    body_path "nextLink"
  end
  set_page_marker do
    uri true
  end
end

###############################################################################
# Datasources
###############################################################################
#To get all subscriptions
datasource "ds_subscriptions" do
  request do
    auth $azure_auth
    pagination $azure_pagination
    host $param_azure_endpoint
    path "/subscriptions/"
    query "api-version","2020-01-01"
    header "User-Agent", "RS Policies"
  end
  result do
    encoding "json"
    collect jmes_path(response, "value[*]") do
      field "subscriptionID", jmes_path(col_item,"subscriptionId")
      field "subscriptionName", jmes_path(col_item,"displayName")
      field "state", jmes_path(col_item,"state")
    end
  end
end

datasource "ds_filtered_subscriptions" do
  run_script $js_filtered_subscriptions, $ds_subscriptions, $param_subscription_whitelist
end

#https://docs.microsoft.com/en-us/rest/api/resources/resources/list
datasource "ds_azure_sql_databases" do
  iterate $ds_filtered_subscriptions
  request do
    auth $azure_auth
    pagination $azure_pagination
    host $param_azure_endpoint
    path join(["/subscriptions/", val(iter_item,"subscriptionID"), "/resources"])
    query "api-version","2021-04-01"
    query "$filter", "resourceType eq 'Microsoft.Sql/servers/databases'"
    header "User-Agent", "RS Policies"
  end
  result do
    encoding "json"
      collect jmes_path(response, "value") do
        field "resourceID", jmes_path(col_item,"id")
        field "resourceName", jmes_path(col_item,"name")
        field "region", jmes_path(col_item,"location")
        field "resourceType", jmes_path(col_item,"type")
        field "resourceKind", jmes_path(col_item,"kind")
        field "sku" , jmes_path(col_item,"sku")
        field "tags", jmes_path(col_item,"tags")
        field "subscriptionID",val(iter_item,"subscriptionID")
        field "subscriptionName",val(iter_item,"subscriptionName")
    end
  end
end

datasource "ds_azure_sql_database_metrics" do
  iterate $ds_azure_sql_databases
  request do
    run_script $js_utilization_request, val(iter_item,"resourceID"), $param_azure_endpoint
  end
  result do
    encoding "json"
      collect jmes_path(response, "value") do
        field "resourceID", val(iter_item,"resourceID")
        field "region", val(iter_item,"region")
        field "resourceName", val(iter_item,"resourceName")
        field "resourceKind", val(iter_item,"resourceKind")
        field "resourceType", val(iter_item,"resourceType")
        field "sku" , val(iter_item,"sku")
        field "unit", jmes_path(col_item,"unit")
        field "timeseries", jmes_path(col_item,"timeseries")
        field "subscriptionID",val(iter_item,"subscriptionID")
        field "subscriptionName",val(iter_item,"subscriptionName")
        field "tags", val(iter_item,"tags")
    end
  end
end

datasource "ds_currency_reference" do
  request do
    host "raw.githubusercontent.com"
    path "/rightscale/policy_templates/master/cost/scheduled_reports/currency_reference.json"
    header "User-Agent", "RS Policies"
  end
end

datasource "ds_currency_code" do
  request do
    auth $auth_rs
    host rs_optima_host
    path join(["/bill-analysis/orgs/",rs_org_id,"/settings/currency_code"])
    header "Api-Version", "0.1"
    header "User-Agent", "RS Policies"
    ignore_status [403]
  end
  result do
    encoding "json"
    field "id", jmes_path(response,"id")
    field "value", jmes_path(response,"value")
  end
end

datasource "ds_billing_centers" do
  request do
    auth $auth_rs
    host rs_optima_host
    path join(["/analytics/orgs/",rs_org_id,"/billing_centers"])
    header "Api-Version", "1.0"
    header "User-Agent", "RS Policies"
    query "view", "allocation_table"
    ignore_status [403]
  end
  result do
    encoding "json"
    collect jmes_path(response,"[*]") do
      field "href", jmes_path(col_item,"href")
      field "id", jmes_path(col_item,"id")
      field "name", jmes_path(col_item,"name")
      field "parent_id", jmes_path(col_item,"parent_id")
    end
  end
end

datasource "ds_instance_costs" do
  iterate $ds_filtered_subscriptions
  request do
    run_script $js_get_costs, val(iter_item,"subscriptionID"), $ds_top_level_billing_centers, rs_org_id, rs_optima_host
  end
  result do
    encoding "json"
    collect jmes_path(response,"rows[*]") do
      field "resource_id", jmes_path(col_item, "dimensions.resource_id")
      field "resource_type", jmes_path(col_item, "dimensions.resource_type")
      field "cost_nonamortized_unblended_adj", jmes_path(col_item,"metrics.cost_nonamortized_unblended_adj")
    end
  end
end

datasource "ds_top_level_billing_centers" do
  run_script $js_top_level_bc, $ds_billing_centers
end

datasource "ds_merged_metrics" do
  run_script $js_merged_metrics, $ds_azure_sql_database_metrics, $param_exclusion_tag_key
end

datasource "ds_instance_cost_mapping" do
  run_script $js_instance_cost_mapping, $ds_merged_metrics, $ds_instance_costs, $ds_currency_code, $ds_currency_reference, $ds_billing_centers
end

###############################################################################
# Scripts
###############################################################################

script "js_filtered_subscriptions", type: "javascript" do
  parameters "ds_subscriptions", "param_subscription_whitelist"
  result "results"
  code <<-EOS
  var results = []
  if ( param_subscription_whitelist.length != 0){
    results = []
    _.each(param_subscription_whitelist, function(sub){
      var found = _.find(ds_subscriptions, function(item){
        return item.subscriptionID == sub || item.subscriptionName.toLowerCase() == sub.toLowerCase();
      })
      results.push(found)
    })
  } else {
    results = ds_subscriptions
  }
EOS
end

# Build the API request object dynamically
script "js_utilization_request", type: "javascript" do
  parameters "resource_id", "param_azure_endpoint"
  result "request"
  code <<-EOS
    var end_date_tmp = new Date()
    end_date_tmp.setMilliseconds(999)
    end_date_tmp.setSeconds(59)
    end_date_tmp.setMinutes(59)
    end_date_tmp.setHours(23)
    var end_date = new Date(end_date_tmp).toISOString()

    var start_date_tmp = new Date(new Date().setDate(new Date().getDate() - 30))
    start_date_tmp.setMilliseconds(0)
    start_date_tmp.setSeconds(0)
    start_date_tmp.setMinutes(0)
    var start_date = new Date(start_date_tmp).toISOString()

    var sTimespan = start_date  + "/" + end_date;

    var request = {
      auth: "azure_auth",
      verb : "GET",
      scheme : "https",
      host : param_azure_endpoint,
      path : "" + resource_id + "/providers/microsoft.insights/metrics",
      query_params: {
        "api-version" : "2018-01-01",
        "timespan" : sTimespan,
        "metricnames" : "connection_successful"
        "aggregation" : "Average,count",
        "interval" :  "P1D"                    //Dailey
      },
      headers: {
        "User-Agent" : "RS Policies"
      }
    }
  EOS
end

script "js_merged_metrics", type: "javascript" do
  parameters "databases_metrics", "exclusion_tag"
  result "result"
  code <<-EOS
    var result = [];
    //exclude the database with the exclution tags, and the system databases
    for(i=0; i< databases_metrics.length; i++){
      var tags = []

      if (typeof databases_metrics[i].tags === "undefined" || databases_metrics[i].tags === null) {
        databases_metrics[i].tags = tags
      }

      if(!(_.has(databases_metrics[i].tags, exclusion_tag) || databases_metrics[i].resourceKind.toLowerCase().indexOf(",system") > -1)){
        //Find the Resource groupe
        var aTemp = databases_metrics[i].resourceID.split("/resourceGroups/")
        var resourceGroup="";
        if(aTemp.length > 1){
          aTemp = aTemp[1].split("/");
          resourceGroup = aTemp[0];
        }else{
          resourceGroup = "";
        }

        Object.keys(databases_metrics[i]['tags']).forEach(function(key) {
          tags.push(key+'='+databases_metrics[i]['tags'][key])
        })

        resourceTypeSplit = databases_metrics[i].resourceType.split("/")
        service = resourceTypeSplit[0]

        //now find the metrics for the devices
        var objMetric = databases_metrics[i];
        var total = 0;
        if (typeof objMetric == "object" && typeof objMetric.timeseries[0].data == "object"){
          var ts_data =  objMetric.timeseries[0].data;
          for (x=0; x < ts_data.length; x++) {
            total += ts_data[x].count;
          }
          if(total == 0){
            if(databases_metrics[i].sku === null || typeof databases_metrics[i].sku === "undefined"){
              var sku={
                "capacity": "Not available",
                "name": "Not available",
                "tier": "Not available"
              }
            } else {
              var sku=databases_metrics[i].sku;
            }
            result.push({
              resourceID: databases_metrics[i].resourceID,
              region: databases_metrics[i].region,
              resourceName: databases_metrics[i].resourceName,
              resourceGroup: resourceGroup,
              resourceKind: databases_metrics[i].resourceKind,
              resourceType: databases_metrics[i].resourceType,
              sku: sku,
              tags: tags,
              service: service,
              unit: databases_metrics[i].unit,
              subscriptionName: databases_metrics[i].subscriptionName,
              subscriptionID: databases_metrics[i].subscriptionID
            })
          }
        }
      }
    }
    result = _.sortBy(result, 'subscriptionName');
    result = _.sortBy(result, 'region');
  EOS
end

script "js_top_level_bc", type: "javascript" do
  parameters "billing_centers"
  result "filtered_billing_centers"
  code <<-EOS
  var filtered_billing_centers =
    _.reject(billing_centers, function(bc){ return bc.parent_id != null });
EOS
end

script "js_get_costs", type:"javascript" do
  parameters  "account_id","billing_centers","org", "rs_optima_host"
  result "request"
  code <<-EOS
    // returns date formatted as string: YYYY-mm-dd
    function getFormattedDailyDate(date) {
      var year = date.getFullYear();
      var month = (1 + date.getMonth()).toString();
      month = month.length > 1 ? month : '0' + month;
      var day = date.getDate().toString();
      day = day.length > 1 ? day : '0' + day;
      return year + '-' + month + '-' + day;
    }
    var start_date = getFormattedDailyDate(new Date(new Date().setDate(new Date().getDate() - 3)));
    var end_date = getFormattedDailyDate(new Date(new Date().setDate(new Date().getDate() - 2)));
    var request = {
      auth: "auth_rs",
      host: rs_optima_host,
      verb: "POST",
      path: "/bill-analysis/orgs/" + org + "/costs/select",
      body_fields: {
        "dimensions": ["resource_id"],
        "granularity": "day",
        "start_at": start_date,
        "end_at": end_date,
        "metrics": ["cost_nonamortized_unblended_adj"],
        "billing_center_ids": _.compact(_.map(billing_centers, function(value){ return value.id})),
        "limit": 10000,
        "filter": {
          "expressions": [
            {
              "dimension": "service",
              "type": "equal",
              "value": "Microsoft.Sql"
            },
            {
              "dimension": "vendor_account",
              "type": "equal",
              "value": account_id
            }
          ],
          "type": "and"
        }
      },
      headers: {
        "User-Agent": "RS Policies",
        "Api-Version": "1.0"
      },
      ignore_status: [400]
    }
  EOS
end

script "js_instance_cost_mapping", type:"javascript" do
  parameters  "instance_list","instance_costs","ds_currency_code","ds_currency_reference", "ds_billing_centers"
  result "result"
  code <<-EOS
    var result = {};
    var idle_instance_list=[];
    var message=''
    var count=0;
    function formatNumber(number, separator){
      var numString =number.toString();
      var values=numString.split(".");
      var result = ''
      while (values[0].length > 3){
        var chunk = values[0].substr(-3)
        values[0] = values[0].substr(0, values[0].length - 3)
        result = separator + chunk + result
      }
      if (values[0].length > 0){
        result = values[0] + result
      }
      if(values[1]==undefined){
        return result;
      }
      return result+"."+values[1];
    }
    if(ds_billing_centers.length!=0){
      // Put costs into a map by resource ID and only include them for resource IDs we actually need
      var costs_by_resource_id = {};
      _.each(instance_list, function(instance) {
        costs_by_resource_id[instance.resourceID] = [];
      });
      _.each(instance_costs, function(cost) {
        var costs = costs_by_resource_id[cost.resource_id];
        if (costs != null) {
          costs.push(cost);
        }
      });
      // Format costs with currency symbol and thousands separator
      if( ds_currency_code['value'] !== undefined ) {
        if (ds_currency_reference[ds_currency_code['value']] !== undefined ) {
          var cur = ds_currency_reference[ds_currency_code['value']]['symbol']
          if( ds_currency_reference[ds_currency_code['value']]['t_separator'] !== undefined ) {
            var separator = ds_currency_reference[ds_currency_code['value']]['t_separator']
          } else {
            var separator = ""
          }
        } else {
          var cur = ""
          var separator = ""
        }
      } else {
        var cur = "$"
        var separator = ","
      }
      var total_savings=0;
      _.each(instance_list, function(instance){
        var cost_objects = costs_by_resource_id[instance.resourceID];
        if (_.size(cost_objects) > 0){
          count++;
          var sum = _.reduce(_.compact(_.map(cost_objects, function(value){return value.cost_nonamortized_unblended_adj})), function(memo, num){ return memo + num; }, 0);
          var monthly_savings = sum*30;
          total_savings=total_savings+monthly_savings;
          instance['savings']=(Math.round(monthly_savings * 1000) / 1000);
          instance['savingsCurrency']=cur;
          idle_instance_list.push(instance);
        } else {
          instance['savings']= 0.0;
          instance['savingsCurrency']=cur;
          idle_instance_list.push(instance);
        }
      })
      if(count){
        total_savings=cur + ' '+formatNumber((Math.round(total_savings * 100) / 100), separator);
        message="The total estimated monthly savings are " +total_savings;
      }
      else{
        message="The Flexera Optima system does not have any data to calculate savings for these resources";
      }
    }
    else{
      message="You do not have the minimum required role of billing_center_viewer to view the savings";
      idle_instance_list=instance_list;
    }
    result={ "instance_list": idle_instance_list,
      "message": message}
    result.instance_list = _.sortBy(result.instance_list,"region");
    result.instance_list = _.sortBy(result.instance_list,"subscriptionName");
  EOS
end

###############################################################################
# Policy
###############################################################################

policy "policy_azure_db_utilization" do
  validate $ds_instance_cost_mapping do
    summary_template "{{ rs_project_name }} (Account ID: {{ rs_project_id }}): {{ len data.instance_list }} Unused Azure Databases Found"
    detail_template <<-EOS
{{data.message}}.
EOS
    escalate $esc_email_report
    escalate $esc_delete_unused_sql_databases_approval
    check eq(size(val(data, "instance_list")), 0)
    export "instance_list" do
      resource_level true
      field "subscriptionID" do
        label "Subscription ID"
      end
      field "subscriptionName" do
        label "subscription Name"
      end
      field "resourceID" do
        label "Resource ID"
      end
      field "resourceName" do
        label "Resource Name"
      end
      field "resourceGroup" do
        label "Resource Group"
      end
      field "region" do
        label "Region"
      end
      field "resourceKind" do
        label "Resource Kind"
      end
      field "resourceType" do
        label "Resource Type"
      end
      field "savings" do
        label "Estimated Monthly Savings"
      end
      field "savingsCurrency" do
        label "Savings Currency"
      end
      field "tags" do
        label "Tags"
      end
      field "service" do
        label "Service"
      end
      field "skuName" do
        label "SKU - Name"
        path "sku.name"
      end
      field "skuTier" do
        label "SKU - Tier"
        path "sku.tier"
      end
      field "skuCapacity" do
        label "SKU - Capacity"
        path "sku.capacity"
      end
      field "accountID" do
        label "Account ID"
        path "subscriptionID"
      end
      field "accountName" do
        label "Account Name"
        path "subscriptionName"
      end
      field "id" do
        label "ID"
        path "resourceID"
      end
    end
  end
end

###############################################################################
# Escalations
###############################################################################

escalation "esc_email_report" do
  automatic true
  label "Send Email"
  description "Send incident email"
  email $param_email
end

escalation "esc_delete_unused_sql_databases_approval" do
  automatic contains($param_automatic_action, "Terminate Instances")
  label "Delete SQL databases"
  description "Deleted unused SQL Databases"
  run "delete_unused_sql_databases", data, $param_log_to_cm_audit_entries, $param_azure_endpoint
end

###############################################################################
# Cloud Workflow
###############################################################################

define delete_unused_sql_databases($data,$param_log_to_cm_audit_entries, $param_azure_endpoint) return $all_responses do
end

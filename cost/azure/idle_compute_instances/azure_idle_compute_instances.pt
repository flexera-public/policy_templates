name "Azure Idle Compute Instances"
rs_pt_ver 20180301
type "policy"
short_description "**Deprecated: This policy is no longer being updated. Please see [README](https://github.com/flexera-public/policy_templates/tree/master/cost/azure/idle_compute_instances/) for more details.**  Checks for instances that are idle for the last 30 days and terminates them after approval. See the [README](https://github.com/flexera-public/policy_templates/tree/master/cost/azure/idle_compute_instances/) and [docs.flexera.com/flexera/EN/Automation](https://docs.flexera.com/flexera/EN/Automation/AutomationGS.htm) to learn more."
long_description ""
category "Cost"
severity "low"
default_frequency "daily"
info(
  version: "5.5.4",
  provider: "Azure",
  service: "Compute",
  policy_set: "Idle Compute Instances",
  recommendation_type: "Usage Reduction",
  deprecated: "true",
  publish: "false",
  hide_skip_approvals: "true"
)

###############################################################################
# Parameters
###############################################################################

#pass in the email address to notify
parameter "param_email" do
  type "list"
  category "Policy Settings"
  label "Email addresses"
  description "Email addresses of the recipients you wish to notify when new incidents are created"
  default []
end

parameter "param_azure_endpoint" do
  type "string"
  category "Policy Settings"
  label "Azure Endpoint"
  description "Select the API endpoint to use for Azure. Use default value of management.azure.com unless using Azure China."
  allowed_values "management.azure.com", "management.chinacloudapi.cn"
  default "management.azure.com"
end

#pass in the CPU in percentage
parameter "param_cpu_average_percentage" do
  type "string"
  category "Policy Settings"
  label "CPU Threshold"
  description "Average CPU threshold at which to trigger a decommission"
  allowed_pattern /^[0-9]$|^[1-9][0-9]$|^(100)$/
  default "60"
end

parameter "param_subscriptions_list" do
  type "list"
  category "Policy Settings"
  label "Subscription Allowed List"
  description "Allowed Subscriptions, if empty, all subscriptions will be checked"
  default []
end

parameter "param_exclusion_tag_key" do
  type "string"
  category "Policy Settings"
  label "Exclusion Tag Key"
  description "An Azure-native instance tag key to ignore instances that you don't want to consider for downsizing. Example: exclude_utilization"
  default ""
end

parameter "param_automatic_action" do
  type "list"
  category "Policy Settings"
  label "Automatic Actions"
  description "When this value is set, this policy will automatically take the selected action(s)"
  allowed_values ["Terminate Instances"]
  default []
end

###############################################################################
# Authentication
###############################################################################

#authenticate with Azure
credentials "auth_azure" do
  schemes "oauth2"
  label "Azure"
  description "Select the Azure Resource Manager Credential from the list."
  tags "provider=azure_rm"
end

credentials "auth_flexera" do
  schemes "oauth2"
  label "flexera"
  description "Select Flexera One OAuth2 credentials"
  tags "provider=flexera"
end

###############################################################################
# Pagination
###############################################################################

#pagination support
pagination "pagination_azure" do
  get_page_marker do
    body_path "nextLink"
  end
  set_page_marker do
    uri true
  end
end

###############################################################################
# Datasources & Scripts
###############################################################################
#get all subscription details.
datasource "ds_subscriptions" do
  request do
    auth $auth_azure
    pagination $pagination_azure
    host $param_azure_endpoint
    path "/subscriptions/"
    query "api-version", "2020-01-01"
    header "User-Agent", "RS Policies"
    # Header X-Meta-Flexera has no affect on datasource query, but is required for Meta Policies
    # Forces `ds_is_deleted` datasource to run first during policy execution
    header "Meta-Flexera", val($ds_is_deleted, "path")
    # Ignore status 400, 403, and 404 which can be returned in certain (legacy) types of Azure Subscriptions
    ignore_status [400, 403, 404]
  end
  result do
    encoding "json"
    collect jmes_path(response, "value[*]") do
      field "subscriptionID", jmes_path(col_item, "subscriptionId")
      field "displayName", jmes_path(col_item, "displayName")
      field "state", jmes_path(col_item, "state")
    end
  end
end

datasource "ds_filtered_subscriptions" do
  run_script $js_filtered_subscriptions, $ds_subscriptions, $param_subscriptions_list
end

script "js_filtered_subscriptions", type: "javascript" do
  parameters "ds_subscriptions", "param_subscriptions_list"
  result "results"
  code <<-EOS
  var results = []
  if ( param_subscriptions_list.length != 0){
    results = []
    _.each(param_subscriptions_list, function(sub){
      var found = _.find(ds_subscriptions, function(item){
        return item.subscriptionID == sub || item.displayName.toLowerCase() == sub.toLowerCase();
      })
      results.push(found)
    })

  } else {
    results = ds_subscriptions
  }
EOS
end

#get all virtual machines
datasource "ds_azure_virtualmachines" do
  iterate $ds_filtered_subscriptions
  request do
    auth $auth_azure
    pagination $pagination_azure
    host $param_azure_endpoint
    path join(["/subscriptions/", val(iter_item, "subscriptionID"), "/providers/Microsoft.Compute/virtualMachines"])
    query "api-version", "2019-03-01"
    header "User-Agent", "RS Policies"
    # Ignore status 400, 403, and 404 which can be returned in certain (legacy) types of Azure Subscriptions
    ignore_status [400, 403, 404]
  end
  result do
    encoding "json"
    collect jmes_path(response, "value[*]") do
      field "resourceID", jmes_path(col_item, "id")
      field "resourceGroup", get(4, split(jmes_path(col_item, "id"), '/'))
      field "resourceKind", jmes_path(col_item, "type")
      field "name", jmes_path(col_item, "name")
      field "region", jmes_path(col_item, "location")
      field "tags", jmes_path(col_item, "tags")
      field "platform", jmes_path(col_item, "properties.storageProfile.osDisk.osType")
      field "resourceType", jmes_path(col_item, "properties.hardwareProfile.vmSize")
      field "subscriptionID", val(iter_item, "subscriptionID")
      field "subscriptionName", val(iter_item, "displayName")
    end
  end
end

datasource "ds_filter_instances" do
  run_script $js_filter_instances, $ds_azure_virtualmachines, $param_exclusion_tag_key
end

script "js_filter_instances", type: "javascript" do
  parameters "ds_azure_virtualmachines", "param_exclusion_tag_key"
  result "result"
  code <<-EOF
  if (param_exclusion_tag_key == "" || param_exclusion_tag_key == null || param_exclusion_tag_key == undefined) {
    result = ds_azure_virtualmachines
  } else {
    result = []

    _.each(ds_azure_virtualmachines, function(vm) {
      if (vm['tags'] != null && vm['tags'] != undefined) {
        tag_keys = Object.keys(vm['tags'])
      } else {
        tag_keys = []
      }

      if (_.contains(tag_keys, param_exclusion_tag_key) == false) {
        result.push(vm)
      }
    })
  }
EOF
end

#get cpu performance stats
datasource "ds_azure_instance_performance" do
  iterate $ds_filter_instances
  request do
    auth $auth_azure
    pagination $pagination_azure
    host $param_azure_endpoint
    path join(["/subscriptions/", val(iter_item, "subscriptionID"), "/resourceGroups/", val(iter_item, "resourceGroup"), "/providers/Microsoft.Compute/virtualMachines/", val(iter_item, "name"), "/providers/microsoft.insights/metrics"])
    query "api-version", "2018-01-01"
    query "timespan", "P30D"
    query "interval", "P1D"
    header "User-Agent", "RS Policies"
    # Ignore status 400, 403, and 404 which can be returned in certain (legacy) types of Azure Subscriptions
    ignore_status [400, 403, 404]
  end
  result do
    encoding "json"
    field "resourceName", val(iter_item, "name")
    field "resourceGroup", val(iter_item, "resourceGroup")
    field "resourceID", val(iter_item, "resourceID")
    field "resourceKind", val(iter_item, "resourceKind")
    field "region", val(iter_item, "region")
    field "tags", val(iter_item, "tags")
    field "service", val(iter_item, "service")
    field "platform", val(iter_item, "platform")
    field "resourceType", val(iter_item, "resourceType")
    field "subscriptionID", val(iter_item, "subscriptionID")
    field "subscriptionName", val(iter_item, "subscriptionName")
    field "averages" do
      collect jmes_path(response, "value[].timeseries[].data[]") do
        field "average", jmes_path(col_item, "average")
      end
    end
  end
end

datasource "ds_currency_reference" do
  request do
    host "raw.githubusercontent.com"
    path "/flexera-public/policy_templates/master/data/currency/currency_reference.json"
    header "User-Agent", "RS Policies"
  end
end

datasource "ds_currency_code" do
  request do
    auth $auth_flexera
    host rs_optima_host
    path join(["/bill-analysis/orgs/", rs_org_id, "/settings/currency_code"])
    header "Api-Version", "0.1"
    header "User-Agent", "RS Policies"
    ignore_status [403]
  end
  result do
    encoding "json"
    field "id", jmes_path(response, "id")
    field "value", jmes_path(response, "value")
  end
end

datasource "ds_billing_centers" do
  request do
    auth $auth_flexera
    host rs_optima_host
    path join(["/analytics/orgs/", rs_org_id, "/billing_centers"])
    query "view", "allocation_table"
    header "Api-Version", "1.0"
    header "User-Agent", "RS Policies"
    ignore_status [403]
  end
  result do
    encoding "json"
    collect jmes_path(response, "[*]") do
      field "href", jmes_path(col_item, "href")
      field "id", jmes_path(col_item, "id")
      field "name", jmes_path(col_item, "name")
      field "parent_id", jmes_path(col_item, "parent_id")
    end
  end
end

datasource "ds_instance_costs" do
  iterate $ds_filtered_subscriptions
  request do
    run_script $js_instance_costs, val(iter_item, "subscriptionID"), $ds_top_level_billing_centers, rs_org_id, rs_optima_host
  end
  result do
    encoding "json"
    collect jmes_path(response, "rows[*]") do
      field "resource_id", jmes_path(col_item, "dimensions.resource_id")
      field "resource_type", jmes_path(col_item, "dimensions.resource_type")
      field "cost_nonamortized_unblended_adj", jmes_path(col_item, "metrics.cost_nonamortized_unblended_adj")
    end
  end
end

script "js_instance_costs", type:"javascript" do
  parameters  "account_id", "billing_centers", "org", "optima_host"
  result "request"
  code <<-EOS
    // returns date formatted as string: YYYY-mm-dd
    function getFormattedDailyDate(date) {
      var year = date.getFullYear();
      var month = (1 + date.getMonth()).toString();
      month = month.length > 1 ? month : '0' + month;
      var day = date.getDate().toString();
      day = day.length > 1 ? day : '0' + day;
      return year + '-' + month + '-' + day;
    }
    var start_date = getFormattedDailyDate(new Date(new Date().setDate(new Date().getDate() - 3)));
    var end_date = getFormattedDailyDate(new Date(new Date().setDate(new Date().getDate() - 2)));
    var request = {
      auth: "auth_flexera",
      host: optima_host,
      verb: "POST",
      path: "/bill-analysis/orgs/" + org + "/costs/select",
      body_fields: {
        "dimensions": ["resource_id", "resource_type"],
        "granularity": "day",
        "start_at": start_date,
        "end_at": end_date,
        "metrics": ["cost_nonamortized_unblended_adj"],
        "billing_center_ids": _.compact(_.map(billing_centers, function(value){ return value.id})),
        "limit": 100000,
        "filter": {
          "type": "and",
          "expressions": [
            {
              "type": "or",
              "expressions": [
                {
                  "dimension": "service",
                  "type": "equal",
                  "value": "Microsoft.Compute"
                },
                {
                  "dimension": "service",
                  "type": "equal",
                  "value": "microsoft.compute"
                }
              ]
            },
            {
              "dimension": "vendor_account",
              "type": "equal",
              "value": account_id
            }
          ]
        }
      },
      headers: {
        "User-Agent": "RS Policies",
        "Api-Version": "1.0"
      },
      ignore_status: [400]
    }
  EOS
end

datasource "ds_top_level_billing_centers" do
  run_script $js_top_level_billing_centers, $ds_billing_centers
end

script "js_top_level_billing_centers", type: "javascript" do
  parameters "billing_centers"
  result "filtered_billing_centers"
  code <<-EOS
  var filtered_billing_centers =
    _.reject(billing_centers, function(bc){ return bc.parent_id != null });
EOS
end

datasource "ds_azure_instances_performance_parsed" do
  run_script $js_azure_instances_performance_parsed, $ds_azure_instance_performance
end

#This is to create an array of tag names per instance based on its tags
script "js_azure_instances_performance_parsed", type: "javascript" do
  parameters "ds_azure_instance_performance"
  result "results"
  code <<-EOS
    var results = []
    _.each(ds_azure_instance_performance, function(result){
      var tagsArray = []
      for (var tag in result.tags) {
        tagsArray.push(tag + "=" + result.tags[tag])
      }
      result['tags'] = tagsArray;
      results.push(result)
    })
  EOS
end

datasource "ds_combineddata" do
  run_script $js_combineddata, $ds_azure_instances_performance_parsed, $param_cpu_average_percentage
end

#This is to get the average cpu over time for the machine and return the dataset of machines with issues
script "js_combineddata", type: "javascript" do
  parameters "ds_azure_instance_performance", "param_cpu_average_percentage"
  result "results"
  code <<-EOS
    var results = []
    _.each(ds_azure_instance_performance, function(result){
      var averages = _.pluck(result.averages, "average")

      var sum = _.reduce(averages, function(memo, num){
        if (num != null && num !== undefined){
          return memo + parseFloat(num)
        } else {}
        return memo + 0;
        },
      0)

      var final_average = parseFloat((sum / averages.length).toFixed(2))

      if (final_average < param_cpu_average_percentage && final_average != 0) {
        result["averageCPU"] = final_average
        result['savings']=0.0;
        results.push(result)
      }
    })
  EOS
end

datasource "ds_instance_cost_mapping" do
  run_script $js_instance_cost_mapping, $ds_combineddata, $ds_instance_costs, $ds_currency_code, $ds_currency_reference, $ds_billing_centers, $param_cpu_average_percentage
end

script "js_instance_cost_mapping", type:"javascript" do
  parameters  "instance_list", "instance_costs", "ds_currency_code", "ds_currency_reference", "ds_billing_centers", "param_cpu_average_percentage"
  result "result"
  code <<-EOS
    var result = {};
    var idle_instance_list=[];
    var message=''
    var count=0;
    function formatNumber(number, separator){
      var numString =number.toString();
      var values=numString.split(".");
      var result = ''
      while (values[0].length > 3){
        var chunk = values[0].substr(-3)
        values[0] = values[0].substr(0, values[0].length - 3)
        result = separator + chunk + result
      }
      if (values[0].length > 0){
        result = values[0] + result
      }
      if(values[1]==undefined){
        return result;
      }
      return result+"."+values[1];
    }
    if(ds_billing_centers.length!=0){
      // Put costs into a map by resource ID and only include them for resource IDs we actually need
      var costs_by_resource_id = {};
      _.each(instance_list, function(instance) {
        costs_by_resource_id[instance.resourceID] = [];
      });
      _.each(instance_costs, function(cost) {
        var costs = costs_by_resource_id[cost.resource_id];
        if (costs != null) {
          costs.push(cost);
        }
      });
      // Format costs with currency symbol and thousands separator
      if( ds_currency_code['value'] !== undefined ) {
        if (ds_currency_reference[ds_currency_code['value']] !== undefined ) {
          var cur = ds_currency_reference[ds_currency_code['value']]['symbol']
          if( ds_currency_reference[ds_currency_code['value']]['t_separator'] !== undefined ) {
            var separator = ds_currency_reference[ds_currency_code['value']]['t_separator']
          } else {
            var separator = ""
          }
        } else {
          var cur = ""
          var separator = ""
        }
      } else {
        var cur = "$"
        var separator = ","
      }
      var total_savings=0;
      _.each(instance_list, function(instance){
        var cost_objects = costs_by_resource_id[instance.resourceID];
        instance['lookbackPeriod'] = "30 days"
        instance['threshold'] = param_cpu_average_percentage
        if (_.size(cost_objects) > 0){
          count++;
          var sum = _.reduce(_.compact(_.map(cost_objects, function(value){return value.cost_nonamortized_unblended_adj})), function(memo, num){ return memo + num; }, 0);
          var monthly_savings = sum*30;
          total_savings=total_savings+monthly_savings;
          instance['savings']=(Math.round(monthly_savings * 1000) / 1000);
          instance['savingsCurrency']=cur;
          idle_instance_list.push(instance);
        } else {
          instance['savings']= 0.0;
          instance['savingsCurrency']=cur;
          idle_instance_list.push(instance);
        }
      })
      if(count){
        total_savings=cur + ' '+formatNumber((Math.round(total_savings * 100) / 100), separator);
        message="The total estimated monthly savings are " +total_savings;
      }
      else{
        message="Flexera does not have any data to calculate savings for these resources";
      }
    }
    else{
      message="You do not have the minimum required role of billing_center_viewer to view the savings";
      idle_instance_list=instance_list;
    }
    result={ "instance_list": idle_instance_list,
      "message": message}
    result.instance_list = _.sortBy(result.instance_list, "region");
    result.instance_list = _.sortBy(result.instance_list, "subscriptionName");
  EOS
end

datasource "ds_only_instances" do
  run_script $js_only_instances, $ds_instance_cost_mapping
end

script "js_only_instances", type: "javascript" do
  parameters "arg"
  result "results"
  code <<-EOS
    results = arg.instance_list
    if (results && results.length) {
      results[0].message = arg.message
    }
  EOS
end

###############################################################################
# Policy
###############################################################################

policy "pol_azure_resource_policy" do
  validate $ds_only_instances do
    summary_template "{{ rs_project_name }} (Account ID: {{ rs_project_id }}): Azure idle compute instances found"
    detail_template <<-EOS
    {{with index data 0}}{{ .message }}{{end}}
    EOS
    check logic_or($ds_parent_policy_terminated, eq(size(data), 0))
    escalate $esc_email
    escalate $esc_delete_resources
    hash_exclude "averageCPU", "averages", "savings"
    export do
      resource_level true
      field "accountName" do
        label "Subscription Name"
        path "subscriptionName"
      end
      field "accountID" do
        label "Subscription ID"
        path "subscriptionID"
      end
      field "resourceID" do
        label "Resource ID"
      end
      field "resourceName" do
        label "Resource Name"
      end
      field "resourceKind" do
        label "Resource Kind"
      end
      field "region" do
        label "Region"
      end
      field "savings" do
        label "Estimated Monthly Savings"
      end
      field "savingsCurrency" do
        label "Savings Currency"
      end
      field "cpuAverage" do
        label "CPU Average"
        path "averageCPU"
      end
      field "resourceGroup" do
        label "Resource Group"
      end
      field "tags" do
        label "Tags"
      end
      field "service" do
        label "Service"
      end
      field "id" do
        label "ID"
        path "resourceID"
      end
      field "lookbackPeriod" do
        label "Lookback Period"
      end
      field "threshold" do
        label "Threshold"
      end
      field "platform" do
        label "Platform"
      end
      field "resourceType" do
        label "Resource Type"
      end
    end
  end
end

###############################################################################
# Escalations
###############################################################################

escalation "esc_email" do
  automatic true
  label "Send Email"
  description "Send incident email"
  email $param_email
end

escalation "esc_delete_resources" do
  automatic contains($param_automatic_action, "Terminate Instances")
  label "Terminate Instances"
  description "Approval to terminate all selected instances"
  run "delete_resources", data, $param_azure_endpoint, rs_optima_host
end

###############################################################################
# Cloud Workflow
###############################################################################

define delete_resources($data, $param_azure_endpoint, $$rs_optima_host) return $all_responses do
  $$errors = []
  $$all_responses = []
  foreach $item in $data do
    sub on_error: skip_error_and_append($item) do
      $response = http_request(
        verb: "delete",
        host: $param_azure_endpoint,
        auth: $$auth_azure,
        href: join(["/subscriptions/", $item['accountID'], "/resourceGroups/", $item["resourceGroup"], "/providers/Microsoft.Compute/virtualMachines/", $item["resourceName"]]),
        https: true,
        query_strings: {
          "api-version": "2018-06-01"
        },
        headers: {
          "cache-control": "no-cache",
          "content-type": "application/json"
        }
      )
      $$all_responses << $response
    end
  end
end

define skip_error_and_append($subject) do
  $$errors << "Unexpected error for " + $subject + "\n  " + to_s($_error)
  $_error_behavior = "skip"
end

###############################################################################
# Meta Policy [alpha]
# Not intended to be modified or used by policy developers
###############################################################################

# If the meta_parent_policy_id is not set it will evaluate to an empty string and we will look for the policy itself,
# if it is set we will look for the parent policy.
datasource "ds_get_policy" do
  request do
    auth $auth_flexera
    host rs_governance_host
    ignore_status [404]
    path join(["/api/governance/projects/", rs_project_id, "/applied_policies/", switch(ne(meta_parent_policy_id, ""), meta_parent_policy_id, policy_id) ])
    header "Api-Version", "1.0"
  end
  result do
    encoding "json"
    field "id", jmes_path(response, "id")
  end
end

datasource "ds_parent_policy_terminated" do
  run_script $js_decide_if_self_terminate, $ds_get_policy, policy_id, meta_parent_policy_id
end

# If the policy was applied by a meta_parent_policy we confirm it exists if it doesn't we confirm we are deleting
# This information is used in two places:
# - determining whether or not we make a delete call
# - determining if we should create an incident (we don't want to create an incident on the run where we terminate)
script "js_decide_if_self_terminate", type: "javascript" do
  parameters "found", "self_policy_id", "meta_parent_policy_id"
  result "result"
  code <<-EOS
  var result
  if (meta_parent_policy_id != "" && found.id == undefined) {
    result = true
  } else {
    result = false
  }
  EOS
end

# Two potentials ways to set this up:
# - this way and make a unneeded 'get' request when not deleting
# - make the delete request an interate and have it iterate over an empty array when not deleting and an array with one item when deleting
script "js_make_terminate_request", type: "javascript" do
  parameters "should_delete", "policy_id", "rs_project_id", "rs_governance_host"
  result "request"
  code <<-EOS

  var request = {
    auth:  'auth_flexera',
    host: rs_governance_host,
    path: "/api/governance/projects/" + rs_project_id + "/applied_policies/" + policy_id,
    headers: {
      "API-Version": "1.0",
      "Content-Type":"application/json"
    },
  }

  if (should_delete) {
    request.verb = 'DELETE'
  }
  EOS
end

datasource "ds_terminate_self" do
  request do
    run_script $js_make_terminate_request, $ds_parent_policy_terminated, policy_id, rs_project_id, rs_governance_host
  end
end

datasource "ds_is_deleted" do
  run_script $js_check_deleted, $ds_terminate_self
end

# This is just a way to have the check delete request connect to the farthest leaf from policy.
# We want the delete check to the first thing the policy does to avoid the policy erroring before it can decide whether or not it needs to self terminate
# Example a customer deletes a credential and then terminates the parent policy. We still want the children to self terminate
# The only way I could see this not happening is if the user who applied the parent_meta_policy was offboarded or lost policy access, the policies who are impersonating the user
# would not have access to self-terminate
# It may be useful for the backend to enable a mass terminate at some point for all meta_child_policies associated with an id.
script "js_check_deleted", type: "javascript" do
  parameters "response"
  result "result"
  code <<-EOS
  result = {"path":"/"}
  EOS
end

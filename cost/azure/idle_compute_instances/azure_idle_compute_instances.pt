name "Azure Idle Compute Instances"
rs_pt_ver 20180301
type "policy"
short_description "Checks for instances that are idle for the last 30 days and terminates them after approval.Â \n See the [README](https://github.com/flexera/policy_templates/tree/master/cost/azure/idle_compute_instances/) and [docs.rightscale.com/policies](https://docs.rightscale.com/policies/) to learn more."
long_description ""
category "Cost"
severity "low"
default_frequency "daily"
info(
  version: "2.10",
  provider: "Azure",
  service: "Compute",
  policy_set: "Idle Compute Instances"
  )

###############################################################################
# Parameters
###############################################################################

#pass in the email address to notify
parameter "param_email" do
  type "list"
  label "Email addresses"
  description "Email addresses of the recipients you wish to notify when new incidents are created"
end

#pass in the CPU in percentage
parameter "param_cpu_average_percentage" do
  type "string"
  label "CPU Threshold"
  description "Average CPU threshold at which to trigger a decommission"
  default "60"
  allowed_pattern /^[0-9]$|^[1-9][0-9]$|^(100)$/
end

parameter "param_exclusion_tag_key" do
  category "User Inputs"
  label "Exclusion Tag Key"
  description "An Azure-native instance tag key to ignore instances that you don't want to consider for downsizing. Example: exclude_utilization"
  type "string"
end

parameter "param_automatic_action" do
  type "list"
  label "Automatic Actions"
  description "When this value is set, this policy will automatically take the selected action(s)"
  allowed_values ["Terminate Instances"]
end

parameter "param_log_to_cm_audit_entries" do
  type "string"
  label "Log to CM Audit Entries"
  description "Boolean for whether or not to log any debugging information from actions to CM Audit Entries, this should be left set to No on Flexera EU"
  default "No"
  allowed_values "Yes", "No"
end

###############################################################################
# Authentication
###############################################################################

#authenticate with Azure
credentials "azure_auth" do
  schemes "oauth2"
  label "Azure"
  description "Select the Azure Resource Manager Credential from the list."
  tags "provider=azure_rm"
end

credentials "auth_rs" do
  schemes "oauth2"
  label "flexera"
  description "Select FlexeraOne OAuth2 credentials"
  tags "provider=flexera"
end

###############################################################################
# Pagination
###############################################################################

#pagination support
pagination "azure_pagination" do
  get_page_marker do
    body_path "nextLink"
  end
  set_page_marker do
    uri true
  end
end

###############################################################################
# Datasources
###############################################################################
#get all subscription details.
datasource "ds_subscriptions" do
  request do
    auth $azure_auth
    pagination $azure_pagination
    host "management.azure.com"
    path "/subscriptions/"
    query "api-version","2019-06-01"
    header "User-Agent", "RS Policies"
  end
  result do
    encoding "json"
    collect jmes_path(response, "value[*]") do
      field "subscriptionId", jmes_path(col_item,"subscriptionId")
      field "displayName", jmes_path(col_item,"displayName")
      field "state", jmes_path(col_item,"state")
    end
  end
end

#get all virtual machines
datasource "ds_azure_virtualmachines" do
  iterate $ds_subscriptions
  request do
    auth $azure_auth
    pagination $azure_pagination
    host "management.azure.com"
	path join(["/subscriptions/", val(iter_item,"subscriptionId"), "/providers/Microsoft.Compute/virtualMachines"])
    query "api-version","2019-03-01"
    header "User-Agent", "RS Policies"
    ignore_status [404]
  end
  result do
    encoding "json"
    collect jmes_path(response, "value[*]") do
      field "id", jmes_path(col_item,"id")
      field "rg", get(4,split(jmes_path(col_item,"id"),'/'))
      field "name", jmes_path(col_item,"name")
      field "location", jmes_path(col_item, "location")
      field "tags", jmes_path(col_item,"tags")
	  field "subscriptionId",val(iter_item,"subscriptionId")
      field "subscriptionName",val(iter_item,"displayName")
    end
  end
end

datasource "ds_filter_instances" do
  run_script $js_filter_instances, $ds_azure_virtualmachines, $param_exclusion_tag_key
end

#get cpu performance stats
datasource "ds_azure_instance_performance" do
  iterate $ds_filter_instances
  request do
    auth $azure_auth
    pagination $azure_pagination
    host "management.azure.com"
    path join(["/subscriptions/", val(iter_item,"subscriptionId"), "/resourceGroups/", val(iter_item,"rg"), "/providers/Microsoft.Compute/virtualMachines/",val(iter_item,"name"),"/providers/microsoft.insights/metrics"])
    query "api-version","2018-01-01"
    query "timespan","P30D"
    query "interval", "P1D"
    header "User-Agent", "RS Policies"
    ignore_status [404]
  end
  result do
    encoding "json"
    field "vmname", val(iter_item,"name")
    field "rg", val(iter_item, "rg")
    field "id", val(iter_item, "id")
    field "location", val(iter_item, "location")
    field "tags", val(iter_item, "tags")
	field "subscriptionId",val(iter_item,"subscriptionId")
    field "subscriptionName",val(iter_item,"subscriptionName")
    field "averages" do
      collect jmes_path(response,"value[].timeseries[].data[]") do
        field "average", jmes_path(col_item,"average")
      end
    end
  end
end

datasource "ds_currency_reference" do
  request do
    host "raw.githubusercontent.com"
    path "/rightscale/policy_templates/master/cost/scheduled_reports/currency_reference.json"
    header "User-Agent", "RS Policies"
  end
end

datasource "ds_currency_code" do
  request do
    auth $auth_rs
    host rs_optima_host
    path join(["/bill-analysis/orgs/",rs_org_id,"/settings/currency_code"])
    header "Api-Version", "0.1"
    header "User-Agent", "RS Policies"
    ignore_status [403]
  end
  result do
    encoding "json"
    field "id", jmes_path(response,"id")
    field "value", jmes_path(response,"value")
  end
end

datasource "ds_billing_centers" do
  request do
    auth $auth_rs
    host rs_optima_host
    path join(["/analytics/orgs/",rs_org_id,"/billing_centers"])
    header "Api-Version", "1.0"
    header "User-Agent", "RS Policies"
    query "view", "allocation_table"
    ignore_status [403]
  end
  result do
    encoding "json"
    collect jmes_path(response,"[*]") do
      field "href", jmes_path(col_item,"href")
      field "id", jmes_path(col_item,"id")
      field "name", jmes_path(col_item,"name")
      field "parent_id", jmes_path(col_item,"parent_id")
    end
  end
end

datasource "ds_instance_costs" do
  iterate $ds_subscriptions
  request do
    run_script $js_get_costs, val(iter_item,"subscriptionId"), $ds_top_level_billing_centers, rs_org_id, rs_optima_host
  end
  result do
    encoding "json"
    collect jmes_path(response,"rows[*]") do
      field "resource_id", jmes_path(col_item, "dimensions.resource_id")
      field "resource_type", jmes_path(col_item, "dimensions.resource_type")
      field "cost_nonamortized_unblended_adj", jmes_path(col_item,"metrics.cost_nonamortized_unblended_adj")
    end
  end
end

datasource "ds_top_level_billing_centers" do
  run_script $js_top_level_bc, $ds_billing_centers
end

datasource "ds_combineddata" do
  run_script $js_combineddata, $param_cpu_average_percentage, $ds_azure_instance_performance
end

datasource "ds_instance_cost_mapping" do
  run_script $js_instance_cost_mapping, $ds_combineddata, $ds_instance_costs, $ds_currency_code, $ds_currency_reference, $ds_billing_centers
end

###############################################################################
# Scripts
###############################################################################

script "js_top_level_bc", type: "javascript" do
  parameters "billing_centers"
  result "filtered_billing_centers"
  code <<-EOS
  var filtered_billing_centers =
    _.reject(billing_centers, function(bc){ return bc.parent_id != null });
EOS
end

script "js_get_costs", type:"javascript" do
  parameters  "account_id","billing_centers","org","optima_host"
  result "request"
  code <<-EOS
    // returns date formatted as string: YYYY-mm-dd
    function getFormattedDailyDate(date) {
      var year = date.getFullYear();
      var month = (1 + date.getMonth()).toString();
      month = month.length > 1 ? month : '0' + month;
      var day = date.getDate().toString();
      day = day.length > 1 ? day : '0' + day;
      return year + '-' + month + '-' + day;
    }
    var start_date = getFormattedDailyDate(new Date(new Date().setDate(new Date().getDate() - 3)));
    var end_date = getFormattedDailyDate(new Date(new Date().setDate(new Date().getDate() - 2)));
    var request = {
      auth: "auth_rs",
      host: optima_host,
      verb: "POST",
      path: "/bill-analysis/orgs/" + org + "/costs/select",
      body_fields: {
        "dimensions": ["resource_id", "resource_type"],
        "granularity": "day",
        "start_at": start_date,
        "end_at": end_date,
        "metrics": ["cost_nonamortized_unblended_adj"],
        "billing_center_ids": _.compact(_.map(billing_centers, function(value){ return value.id})),
        "limit": 10000,
        "filter": {
          "expressions": [
            {
              "dimension": "service",
              "type": "equal",
              "value": "Microsoft.Compute"
            },
            {
              "dimension": "vendor_account",
              "type": "equal",
              "value": account_id
            }
          ],
          "type": "and"
        }
      },
      headers: {
        "User-Agent": "RS Policies",
        "Api-Version": "1.0"
      },
      ignore_status: [400]
    }
  EOS
end

script "js_filter_instances", type: "javascript" do
  parameters "ds_azure_virtualmachines", "param_exclusion_tag_key"
  result "results"
  code <<-EOF
  var results = _.filter(ds_azure_virtualmachines, function(instance){
    if (_.has(instance.tags, param_exclusion_tag_key)) {
    }else{
      var tagsList = "";
      for(var prop in instance.tags){
        tagsList = tagsList+prop+":"+instance.tags[prop]+", ";
	  }
      if(tagsList.length > 0){
        instance.tags = tagsList.substring(0,tagsList.length-2);
	   }else{
         instance.tags = "< No Value >"
	   }
       return instance
    }
  })
 EOF
end

#This is to get the average cpu over time for the machine and return the dataset of machines with issues
script "js_combineddata", type: "javascript" do
parameters "param_cpu_average_percentage","ds_azure_instance_performance"
result "results"
code <<-EOS
  var results = []
  _.each(ds_azure_instance_performance, function(result){
    var averages = _.pluck(result.averages,"average")

    var sum = _.reduce(averages, function(memo, num){
      if (num != null && num !== undefined){
        return memo + parseFloat(num)
      } else {}
      return memo + 0;
      },
    0)

    var final_average = parseFloat(sum/averages.length)

    if (final_average < param_cpu_average_percentage && final_average != 0) {
      result["averagecpu"] = final_average
      result['savings']="N/A";
      results.push(result)
    }
  })
EOS
end

script "js_instance_cost_mapping", type:"javascript" do
  parameters  "instance_list","instance_costs","ds_currency_code","ds_currency_reference", "ds_billing_centers"
  result "result"
  code <<-EOS
    var result = {};
    var idle_instance_list=[];
    var message=''
    var count=0;
    function formatNumber(number, separator){
      var numString =number.toString();
      var values=numString.split(".");
      var result = ''
      while (values[0].length > 3){
        var chunk = values[0].substr(-3)
        values[0] = values[0].substr(0, values[0].length - 3)
        result = separator + chunk + result
      }
      if (values[0].length > 0){
        result = values[0] + result
      }
      if(values[1]==undefined){
        return result;
      }
      return result+"."+values[1];
    }
    if(ds_billing_centers.length!=0){
      // Format costs with currency symbol and thousands separator
      if( ds_currency_code['value'] !== undefined ) {
        if (ds_currency_reference[ds_currency_code['value']] !== undefined ) {
          var cur = ds_currency_reference[ds_currency_code['value']]['symbol']
          if( ds_currency_reference[ds_currency_code['value']]['t_separator'] !== undefined ) {
            var separator = ds_currency_reference[ds_currency_code['value']]['t_separator']
          } else {
            var separator = ""
          }
        } else {
          var cur = ""
          var separator = ""
        }
      } else {
        var cur = "$"
        var separator = ","
      }
      var total_savings=0;
      _.each(instance_list, function(instance){
        var cost_objects = _.where(instance_costs, {resource_id: instance['id']});
        if (_.size(cost_objects) > 0){
          count++;
          var sum = _.reduce(_.compact(_.map(cost_objects, function(value){return value.cost_nonamortized_unblended_adj})), function(memo, num){ return memo + num; }, 0);
          var monthly_savings = sum*30;
          total_savings=total_savings+monthly_savings;
          instance['savings']=cur + ' '+formatNumber((Math.round(monthly_savings * 100) / 100), separator);
          idle_instance_list.push(instance);
        } else {
          instance['savings']= "N/A";
          idle_instance_list.push(instance);
        }
      })
      if(count){
        total_savings=cur + ' '+formatNumber((Math.round(total_savings * 100) / 100), separator);
        message="The total estimated monthly savings are " +total_savings;
      }
      else{
        message="The Flexera Optima system does not have any data to calculate savings for these resources";
      }
    }
    else{
      message="You do not have the minimum required role of billing_center_viewer to view the savings";
      idle_instance_list=instance_list;
    }
    result={ "instance_list": idle_instance_list,
      "message": message}
    result.instance_list = _.sortBy(result.instance_list,"location");
    result.instance_list = _.sortBy(result.instance_list,"subscriptionName");
  EOS
end

###############################################################################
# Policy
###############################################################################

policy "azure_resource_policy" do
  validate $ds_instance_cost_mapping do
    summary_template "{{ rs_project_name }} (Account ID: {{ rs_project_id }}): Azure idle compute instances found"
    detail_template <<-EOS
    {{data.message}}
    EOS
    check eq(size(val(data, "instance_list")), 0)
    escalate $email
    escalate $delete_resources
    export "instance_list" do
      resource_level true
      field "subscriptionName" do
        label "Subscription Name"
      end
      field "subscriptionId" do
        label "Subscription Id"
      end
      field "location" do
        label "Location"
      end
      field "vmname" do
        label "Name"
      end
      field "savings" do
        label "Estimated Monthly Savings"
      end
      field "averagecpu" do
        label "CPU Average"
      end
      field "rg" do
        label "Resource Group"
      end
      field "tags" do
        label "Tags"
      end
      field "id" do
        label "ID"
      end
    end
  end
end

###############################################################################
# Escalations
###############################################################################

escalation "email" do
  automatic true
  label "Send Email"
  description "Send incident email"
  email $param_email
end

escalation "delete_resources" do
  automatic contains($param_automatic_action, "Terminate Instances")
  label "Terminate Instances"
  description "Approval to terminate all selected instances"
  run "delete_resources", data, $param_log_to_cm_audit_entries
end

###############################################################################
# Cloud Workflow
###############################################################################

define delete_resources($data,$param_log_to_cm_audit_entries) return $all_responses do
  $$debug = $param_log_to_cm_audit_entries == "Yes"
  $$log = []
  $all_responses = []
  $syslog_subject = "Azure Terminate Instance: "
  call sys_log(join([$syslog_subject, "Identified Instances"]),to_s($data))
  $all_responses = []
  foreach $item in $data do
   sub on_error: skip do
      $response = http_request(
        verb: "delete",
        host: "management.azure.com",
		auth: $$azure_auth,
        href: join(["/subscriptions/", $item['subscriptionId'], "/resourceGroups/", $item["rg"], "/providers/Microsoft.Compute/virtualMachines/",$item["vmname"]]),
        https: true,
        query_strings: {
          "api-version": "2018-06-01"
        },
        headers: {
          "cache-control": "no-cache",
          "content-type": "application/json"
        }
      )
      $all_responses << $response
    end
  end
  call sys_log(join([$syslog_subject, "Responses"]),to_s($all_responses))
end

#function to log
define sys_log($subject, $detail) do
  if $$debug
    rs_cm.audit_entries.create(
      notify: "None",
      audit_entry: {
        auditee_href: @@account,
        summary: $subject,
        detail: $detail
      }
    )
  end
end

name "Azure Rightsize Synapse SQL Pools"
rs_pt_ver 20180301
type "policy"
short_description "Checks for Synapse Dedicated SQL Pools instances that have inefficient utilization for the user-specified number of days and pauses them after approval. See the [README](https://github.com/flexera-public/policy_templates/tree/master/cost/azure/rightsize_synapse_sql_pools/) and [docs.flexera.com/flexera/EN/Automation](https://docs.flexera.com/flexera/EN/Automation/AutomationGS.htm) to learn more."
long_description ""
category "Cost"
severity "low"
default_frequency "weekly"
info(
  version: "0.0.1",
  provider: "Azure",
  service: "SQL",
  policy_set: "Rightsize Synapse SQL Pools",
  recommendation_type: "Usage Reduction"
)

###############################################################################
# Parameters
###############################################################################

parameter "param_email" do
  type "list"
  category "Policy Settings"
  label "Email addresses"
  description "A list of email addresses to notify."
  default []
end

parameter "param_azure_endpoint" do
  type "string"
  category "Policy Settings"
  label "Azure Endpoint"
  description "Select the API endpoint to use for Azure. Use default value of management.azure.com unless using Azure China."
  allowed_values "management.azure.com", "management.chinacloudapi.cn"
  default "management.azure.com"
end

parameter "param_subscriptions_allow_or_deny" do
  type "string"
  category "Filters"
  label "Allow/Deny Subscriptions"
  description "Allow or Deny entered Subscriptions. See the README for more details."
  allowed_values "Allow", "Deny"
  default "Allow"
end

parameter "param_subscriptions_list" do
  type "list"
  category "Filters"
  label "Allow/Deny Subscriptions List"
  description "A list of allowed or denied Subscription IDs/names. See the README for more details."
  default []
end

parameter "param_regions_allow_or_deny" do
  type "string"
  category "Filters"
  label "Allow/Deny Regions"
  description "Allow or Deny entered regions. See the README for more details."
  allowed_values "Allow", "Deny"
  default "Allow"
end

parameter "param_regions_list" do
  type "list"
  category "Filters"
  label "Allow/Deny Regions List"
  description "A list of allowed or denied regions. See the README for more details."
  default []
end

parameter "param_exclusion_tags" do
  type "list"
  category "Filters"
  label "Exclusion Tags"
  description "Cloud native tags to ignore resources that you don't want to produce recommendations for. Enter the Key name to filter resources with a specific Key, regardless of Value, and enter Key==Value to filter resources with a specific Key:Value pair. Other operators and regex are supported; please see the README for more details."
  default []
end

parameter "param_exclusion_tags_boolean" do
  type "string"
  category "Filters"
  label "Exclusion Tags: Any / All"
  description "Whether to filter instances containing any of the specified tags or only those that contain all of them. Only applicable if more than one value is entered in the 'Exclusion Tags' field."
  allowed_values "Any", "All"
  default "Any"
end

parameter "param_filter_stats" do
  type "string"
  category "Filters"
  label "Threshold Statistic"
  description "Statistic to use when determining if an instance is underutilized."
  allowed_values "Average", "Maximum", "P90", "P95", "P99"
  default "Average"
end

parameter "param_stats_threshold" do
  type "number"
  category "Statistics"
  label "DWU Used Threshold (%)"
  description "The DWU threshold at which to consider an instance to be 'underutilized' and therefore be flagged for downsizing."
  min_value 1
  max_value 100
  default 20
end

parameter "param_terminate_lookback" do
  type "number"
  category "Statistics"
  label "Terminate Lookback Period (Days)"
  description "How many days back to look at metrics to consider a pool idle for termination. This value cannot be set higher than 90 because Azure does not retain metrics for longer than 90 days."
  min_value 1
  max_value 90
  default 30
end

parameter "param_pause_lookback" do
  type "number"
  category "Statistics"
  label "Pause Lookback Period (Days)"
  description "How many days back to look at metrics to consider a pool idle for pausing. This value cannot be set higher than 90 because Azure does not retain metrics for longer than 90 days."
  min_value 1
  max_value 90
  default 30
end

parameter "param_downsize_lookback" do
  type "number"
  category "Statistics"
  label "Downsize Lookback Period (Days)"
  description "How many days back to look at metrics to consider a pool underutilized for downsizing. This value cannot be set higher than 90 because Azure does not retain metrics for longer than 90 days."
  min_value 1
  max_value 90
  default 30
end

parameter "param_min_active" do
  type "number"
  category "Statistics"
  label "Minimum Time Active (Days)"
  description "Only include pools in the results if they have not been paused for at least the number of specified days. Set to '0' to disable this filter and not consider minimum time active in the results."
  min_value 0
  max_value 90
  default 15
end

parameter "param_min_savings" do
  type "number"
  category "Policy Settings"
  label "Minimum Savings Threshold"
  description "Minimum potential savings required to generate a recommendation"
  min_value 0
  default 0
end

parameter "param_automatic_pause" do
  type "string"
  category "Actions"
  label "Enable Automatic Pausing"
  description "When this value is set to Yes, this policy will automatically pause the selected idle Synapse SQL Pools."
  allowed_values "Yes", "No"
  default "No"
end

###############################################################################
# Authentication
###############################################################################

credentials "auth_azure" do
  schemes "oauth2"
  label "Azure"
  description "Select the Azure Resource Manager Credential from the list."
  tags "provider=azure_rm"
end

credentials "auth_flexera" do
  schemes "oauth2"
  label "Flexera"
  description "Select Flexera One OAuth2 credentials"
  tags "provider=flexera"
end

###############################################################################
# Pagination
###############################################################################

pagination "pagination_azure" do
  get_page_marker do
    body_path "nextLink"
  end
  set_page_marker do
    uri true
  end
end

###############################################################################
# Datasources & Scripts
###############################################################################

# Get applied policy metadata for use later
datasource "ds_applied_policy" do
  request do
    auth $auth_flexera
    host rs_governance_host
    path join(["/api/governance/projects/", rs_project_id, "/applied_policies/", policy_id])
    header "Api-Version", "1.0"
  end
end

datasource "ds_billing_centers" do
  request do
    auth $auth_flexera
    host rs_optima_host
    path join(["/analytics/orgs/", rs_org_id, "/billing_centers"])
    query "view", "allocation_table"
    header "Api-Version", "1.0"
    header "User-Agent", "RS Policies"
    ignore_status [403]
  end
  result do
    encoding "json"
    collect jmes_path(response, "[*]") do
      field "href", jmes_path(col_item, "href")
      field "id", jmes_path(col_item, "id")
      field "name", jmes_path(col_item, "name")
      field "parent_id", jmes_path(col_item, "parent_id")
    end
  end
end

# Gather top level billing center IDs for when we pull cost data
datasource "ds_top_level_bcs" do
  run_script $js_top_level_bcs, $ds_billing_centers
end

script "js_top_level_bcs", type: "javascript" do
  parameters "ds_billing_centers"
  result "result"
  code <<-EOS
  filtered_bcs = _.filter(ds_billing_centers, function(bc) {
    return bc['parent_id'] == null || bc['parent_id'] == undefined
  })

  result = _.compact(_.pluck(filtered_bcs, 'id'))
EOS
end

datasource "ds_azure_synapse_size_map" do
  request do
    verb "GET"
    host "raw.githubusercontent.com"
    path "/flexera-public/policy_templates/master/data/azure/azure_synapse_tier_types.json"
    header "User-Agent", "RS Policies"
  end
end

datasource "ds_currency_reference" do
  request do
    host "raw.githubusercontent.com"
    path "/flexera-public/policy_templates/master/data/currency/currency_reference.json"
    header "User-Agent", "RS Policies"
  end
end

datasource "ds_currency_code" do
  request do
    auth $auth_flexera
    host rs_optima_host
    path join(["/bill-analysis/orgs/", rs_org_id, "/settings/currency_code"])
    header "Api-Version", "0.1"
    header "User-Agent", "RS Policies"
    ignore_status [403]
  end
  result do
    encoding "json"
    field "id", jmes_path(response, "id")
    field "value", jmes_path(response, "value")
  end
end

datasource "ds_currency" do
  run_script $js_currency, $ds_currency_reference, $ds_currency_code
end

script "js_currency", type:"javascript" do
  parameters "ds_currency_reference", "ds_currency_code"
  result "result"
  code <<-EOS
  symbol = "$"
  separator = ","

  if (ds_currency_code['value'] != undefined) {
    if (ds_currency_reference[ds_currency_code['value']] != undefined) {
      symbol = ds_currency_reference[ds_currency_code['value']]['symbol']

      if (ds_currency_reference[ds_currency_code['value']]['t_separator'] != undefined) {
        separator = ds_currency_reference[ds_currency_code['value']]['t_separator']
      } else {
        separator = ""
      }
    }
  }

  result = {
    symbol: symbol,
    separator: separator
  }
EOS
end

datasource "ds_azure_subscriptions" do
  request do
    auth $auth_azure
    pagination $pagination_azure
    host $param_azure_endpoint
    path "/subscriptions/"
    query "api-version", "2020-01-01"
    header "User-Agent", "RS Policies"
    # Header X-Meta-Flexera has no affect on datasource query, but is required for Meta Policies
    # Forces `ds_is_deleted` datasource to run first during policy execution
    header "Meta-Flexera", val($ds_is_deleted, "path")
  end
  result do
    encoding "json"
    collect jmes_path(response, "value[*]") do
      field "id", jmes_path(col_item, "subscriptionId")
      field "name", jmes_path(col_item, "displayName")
      field "state", jmes_path(col_item, "state")
    end
  end
end

datasource "ds_azure_subscriptions_filtered" do
  run_script $js_azure_subscriptions_filtered, $ds_azure_subscriptions, $param_subscriptions_allow_or_deny, $param_subscriptions_list
end

script "js_azure_subscriptions_filtered", type: "javascript" do
  parameters "ds_azure_subscriptions", "param_subscriptions_allow_or_deny", "param_subscriptions_list"
  result "result"
  code <<-EOS
  if (param_subscriptions_list.length > 0) {
    if (param_subscriptions_allow_or_deny == "Deny") {
        result = _.filter(ds_azure_subscriptions, function (s) {
            return !_.contains(param_subscriptions_list, s.id) && !_.contains(param_subscriptions_list, s.name)
        })
    }

    if (param_subscriptions_allow_or_deny == "Allow") {
        result = _.filter(ds_azure_subscriptions, function(s) {
            return _.contains(param_subscriptions_list, s.id) || _.contains(param_subscriptions_list, s.name)
        })
    }
  } else {
      result = ds_azure_subscriptions
  }
  EOS
end

datasource "ds_azure_synapse_workspaces" do
  iterate $ds_azure_subscriptions_filtered
  request do
    auth $auth_azure
    pagination $pagination_azure
    host $param_azure_endpoint
    path join(["/subscriptions/", val(iter_item, "id"), "/providers/Microsoft.Synapse/workspaces"])
    query "api-version", "2021-06-01"
    header "User-Agent", "RS Policies"
    # Ignore status 400, 403, and 404 which can be returned in certain (legacy) types of Azure Subscriptions
    ignore_status [400, 403, 404]
  end
  result do
    encoding "json"
    collect jmes_path(response, "value[*]") do
      field "workspaceId", jmes_path(col_item, "id")
      field "workspaceName", jmes_path(col_item, "name")
      field "resourceGroup", jmes_path(col_item, "properties.managedResourceGroupName")
      field "resourceKind", jmes_path(col_item, "type")
      field "region", jmes_path(col_item, "location")
      field "tags", jmes_path(col_item, "tags")
      field "subscriptionId", val(iter_item, "id")
      field "subscriptionName", val(iter_item, "name")
    end
  end
end

datasource "ds_azure_synapse_sql_pools" do
  iterate $ds_azure_synapse_workspaces
  request do
    auth $auth_azure
    pagination $pagination_azure
    host $param_azure_endpoint
#    path join(["/subscriptions/", val(iter_item, "subscriptionId"), "/resourceGroups/", val(iter_item, "resourceGroup"), "/providers/Microsoft.Synapse/workspaces/", val(iter_item, "workspaceName"), "/sqlPools"])
    path join([val(iter_item, "workspaceId"), "/sqlPools"])
    query "api-version", "2021-06-01"
    header "User-Agent", "RS Policies"
    # Ignore status 400, 403, and 404 which can be returned in certain (legacy) types of Azure Subscriptions
    ignore_status [400, 403, 404]
  end
  result do
    encoding "json"
    collect jmes_path(response, "value[*]") do
      field "resourceId", jmes_path(col_item, "id")
      field "resourceGroup", val(iter_item, "resourceGroup")
      field "resourceKind", jmes_path(col_item, "type")
      field "name", jmes_path(col_item, "name")
      field "region", jmes_path(col_item, "location")
      field "sku", jmes_path(col_item, "sku.name")
      field "status", jmes_path(col_item, "properties.status")
      field "creationDate", jmes_path(col_item, "properties.creationDate")
      field "provisioningState", jmes_path(col_item, "properties.provisioningState")
      field "storageAccountType", jmes_path(col_item, "properties.storageAccountType")
      field "subscriptionId", val(iter_item, "subscriptionId")
      field "subscriptionName", val(iter_item, "subscriptionName")
    end
  end
end

datasource "ds_azure_synapse_sql_pools_tag_filtered" do
  run_script $js_azure_synapse_sql_pools_tag_filtered, $ds_azure_synapse_sql_pools, $param_exclusion_tags, $param_exclusion_tags_boolean
end

script "js_azure_synapse_sql_pools_tag_filtered", type: "javascript" do
  parameters "ds_azure_synapse_sql_pools", "param_exclusion_tags", "param_exclusion_tags_boolean"
  result "result"
  code <<-EOS
  comparators = _.map(param_exclusion_tags, function(item) {
    if (item.indexOf('==') != -1) {
      return { comparison: '==', key: item.split('==')[0], value: item.split('==')[1], string: item }
    }

    if (item.indexOf('!=') != -1) {
      return { comparison: '!=', key: item.split('!=')[0], value: item.split('!=')[1], string: item }
    }

    if (item.indexOf('=~') != -1) {
      value = item.split('=~')[1]
      regex = new RegExp(value.slice(1, value.length - 1))
      return { comparison: '=~', key: item.split('=~')[0], value: regex, string: item }
    }

    if (item.indexOf('!~') != -1) {
      value = item.split('!~')[1]
      regex = new RegExp(value.slice(1, value.length - 1))
      return { comparison: '!~', key: item.split('!~')[0], value: regex, string: item }
    }

    // If = is present but none of the above are, assume user error and that the user intended ==
    if (item.indexOf('=') != -1) {
      return { comparison: '==', key: item.split('=')[0], value: item.split('=')[1], string: item }
    }

    // Assume we're just testing for a key if none of the comparators are found
    return { comparison: 'key', key: item, value: null, string: item }
  })

  if (param_exclusion_tags.length > 0) {
    result = _.reject(ds_azure_synapse_sql_pools, function(resource) {
      resource_tags = {}
      if (typeof(resource['tags']) == 'object') { resource_tags = resource['tags'] }

      // Store a list of found tags
      found_tags = []

      _.each(comparators, function(comparator) {
        comparison = comparator['comparison']
        value = comparator['value']
        string = comparator['string']
        resource_tag = resource_tags[comparator['key']]

        if (comparison == 'key' && resource_tag != undefined) { found_tags.push(string) }
        if (comparison == '==' && resource_tag == value) { found_tags.push(string) }
        if (comparison == '!=' && resource_tag != value) { found_tags.push(string) }

        if (comparison == '=~') {
          if (resource_tag != undefined && value.test(resource_tag)) { found_tags.push(string) }
        }

        if (comparison == '!~') {
          if (resource_tag == undefined) { found_tags.push(string) }
          if (resource_tag != undefined && value.test(resource_tag)) { found_tags.push(string) }
        }
      })

      all_tags_found = found_tags.length == comparators.length
      any_tags_found = found_tags.length > 0 && param_exclusion_tags_boolean == 'Any'

      return all_tags_found || any_tags_found
    })
  } else {
    result = ds_azure_synapse_sql_pools
  }
EOS
end

datasource "ds_azure_synapse_sql_pools_region_filtered" do
  run_script $js_azure_synapse_sql_pools_region_filtered, $ds_azure_synapse_sql_pools_tag_filtered, $param_regions_allow_or_deny, $param_regions_list
end

script "js_azure_synapse_sql_pools_region_filtered", type: "javascript" do
  parameters "ds_azure_synapse_sql_pools_tag_filtered", "param_regions_allow_or_deny", "param_regions_list"
  result "result"
  code <<-EOS
  if (param_regions_list.length > 0) {
    result = _.filter(ds_azure_synapse_sql_pools_tag_filtered, function(pool) {
      include_pool = _.contains(param_regions_list, pool['region'])

      if (param_regions_allow_or_deny == "Deny") {
        include_pool = !include_pool
      }

      return include_pool
    })
  } else {
    result = ds_azure_synapse_sql_pools_tag_filtered
  }
EOS
end

datasource "ds_azure_synapse_sql_pool_terminate_metrics" do
  iterate $ds_azure_synapse_sql_pools_region_filtered
  request do
    run_script $js_azure_synapse_sql_pool_metrics, val(iter_item, "resourceId"), val(iter_item, "creationDate"), $param_azure_endpoint, $param_terminate_lookback, "FULL", "Connections", "maximum"
  end
  result do
    encoding "json"
    field "value", val(response, "value")
    field "resourceName", val(iter_item, "name")
    field "resourceGroup", val(iter_item, "resourceGroup")
    field "resourceId", val(iter_item, "resourceId")
    field "resourceKind", val(iter_item, "resourceKind")
    field "region", val(iter_item, "region")
    field "tags", val(iter_item, "tags")
    field "resourceType", val(iter_item, "resourceType")
    field "subscriptionId", val(iter_item, "subscriptionId")
    field "subscriptionName", val(iter_item, "subscriptionName")
  end
end

datasource "ds_azure_synapse_sql_pool_pause_metrics" do
  iterate $ds_azure_synapse_sql_pools_region_filtered
  request do
    run_script $js_azure_synapse_sql_pool_metrics, val(iter_item, "resourceId"), val(iter_item, "creationDate"), $param_azure_endpoint, $param_pause_lookback, "FULL", "DWUUsed|DWUUsedPercent|CPUPercent|MemoryUsedPercent|Connections", "average|maximum"
  end
  result do
    encoding "json"
    field "value", val(response, "value")
    field "resourceName", val(iter_item, "name")
    field "resourceGroup", val(iter_item, "resourceGroup")
    field "resourceId", val(iter_item, "resourceId")
    field "resourceKind", val(iter_item, "resourceKind")
    field "region", val(iter_item, "region")
    field "tags", val(iter_item, "tags")
    field "resourceType", val(iter_item, "resourceType")
    field "subscriptionId", val(iter_item, "subscriptionId")
    field "subscriptionName", val(iter_item, "subscriptionName")
  end
end

datasource "ds_azure_synapse_sql_pool_downsize_metrics" do
  iterate $ds_azure_synapse_sql_pools_region_filtered
  request do
    run_script $js_azure_synapse_sql_pool_metrics, val(iter_item, "resourceId"), val(iter_item, "creationDate"), $param_azure_endpoint, $param_downsize_lookback, "FULL", "DWUUsed|DWUUsedPercent|CPUPercent|MemoryUsedPercent|Connections", "average|maximum"
  end
  result do
    encoding "json"
    field "value", val(response, "value")
    field "resourceName", val(iter_item, "name")
    field "resourceGroup", val(iter_item, "resourceGroup")
    field "resourceId", val(iter_item, "resourceId")
    field "resourceKind", val(iter_item, "resourceKind")
    field "region", val(iter_item, "region")
    field "tags", val(iter_item, "tags")
    field "resourceType", val(iter_item, "resourceType")
    field "subscriptionId", val(iter_item, "subscriptionId")
    field "subscriptionName", val(iter_item, "subscriptionName")
  end
end

datasource "ds_azure_synapse_sql_pool_percentile_metrics" do
  iterate $ds_azure_synapse_sql_pools_region_filtered
  request do
    run_script $js_azure_synapse_sql_pool_metrics, val(iter_item, "resourceId"), val(iter_item, "creationDate"), $param_azure_endpoint, $param_downsize_lookback, "PT1H", "DWUUsedPercent", "maximum"
  end
  result do
    encoding "json"
    field "value", val(response, "value")
    field "resourceId", val(iter_item, "resourceId")
  end
end

datasource "ds_azure_synapse_sql_pool_min_active_metrics" do
  iterate $ds_azure_synapse_sql_pools_region_filtered
  request do
    run_script $js_azure_synapse_sql_pool_metrics, val(iter_item, "resourceId"), val(iter_item, "creationDate"), $param_azure_endpoint, $param_downsize_lookback, "P1D", "DWUUsed", "average"
  end
  result do
    encoding "json"
    field "value", val(response, "value")
    field "resourceId", val(iter_item, "resourceId")
  end
end

script "js_azure_synapse_sql_pool_metrics", type: "javascript" do
  parameters "resourceId", "creationDate", "param_azure_endpoint", "param_lookback", "interval", "metricnames", "aggregation"
  result "request"
  code <<-EOS
  // We use this approach since ".dangerfile/policy_test.rb" returns an error when we put comma directly as string.
  metricnames = metricnames.split('|').join(',')
  aggregation = aggregation.split('|').join(',')

  var end_date = new Date()
  end_date.setMilliseconds(999)
  end_date.setSeconds(59)
  end_date.setMinutes(59)
  end_date.setHours(23)

  var start_date = new Date()
  start_date.setDate(start_date.getDate() - param_lookback)
  var creation_date = new Date(creationDate)

  if (start_date < creation_date) {
      start_date = creation_date
  }

  start_date.setMilliseconds(0)
  start_date.setSeconds(0)
  start_date.setMinutes(0)
  start_date.setHours(0)

  var timespan = start_date.toISOString() + "/" + end_date.toISOString()

  var request = {
      auth: "auth_azure",
      pagination: "pagination_azure",
      host: param_azure_endpoint,
      verb: "GET",
      path: resourceId + "/providers/microsoft.insights/metrics",
      query_params: {
          "api-version": "2023-10-01",
          "timespan": timespan,
          "interval": interval,
          "metricnames": metricnames,
          "aggregation": aggregation
      },
      headers: {
          "User-Agent": "RS Policies"
      },
      // Ignore status 400, 403, and 404 which can be returned in certain (legacy) types of Azure Subscriptions
      ignore_status: [400, 403, 404]
  }
EOS
end

datasource "ds_azure_synapse_sql_pool_costs" do
  iterate $ds_azure_subscriptions_filtered
  request do
    run_script $js_azure_synapse_sql_pool_costs, val(iter_item, 'id'), $ds_top_level_bcs, rs_org_id, rs_optima_host
  end
  result do
    encoding "json"
    collect jmes_path(response, "rows[*]") do
      field "resourceId", jmes_path(col_item, "dimensions.resource_id")
      field "resourceCategory", jmes_path(col_item, "dimensions.resource_type")
      field "cost", jmes_path(col_item, "metrics.cost_amortized_unblended_adj")
    end
  end
end

script "js_azure_synapse_sql_pool_costs", type: "javascript" do
  parameters "subscription_id", "ds_top_level_bcs", "rs_org_id", "rs_optima_host"
  result "request"
  code <<-EOS
  end_date = new Date()
  end_date.setDate(end_date.getDate() - 2)
  end_date = end_date.toISOString().split('T')[0]

  start_date = new Date()
  start_date.setDate(start_date.getDate() - 3)
  start_date = start_date.toISOString().split('T')[0]

  var request = {
    auth: "auth_flexera",
    host: rs_optima_host,
    verb: "POST",
    path: "/bill-analysis/orgs/" + rs_org_id + "/costs/select",
    body_fields: {
      dimensions: ["resource_id", "resource_type"],
      granularity: "day",
      start_at: start_date,
      end_at: end_date,
      metrics: ["cost_amortized_unblended_adj"],
      billing_center_ids: ds_top_level_bcs,
      limit: 100000,
      filter: {
        "type": "and",
        "expressions": [
          {
            "type": "or",
            "expressions": [
              {
                "dimension": "service",
                "type": "equal",
                "value": "Microsoft.Synapse"
              },
              {
                "dimension": "service",
                "type": "equal",
                "value": "microsoft.synapse"
              }
            ]
          },
          {
            "type": "or",
            "expressions": [
              {
                "dimension": "resource_type",
                "type": "equal",
                "value": "Azure Synapse Analytics-Compute Optimized Gen2"
              },
              {
                "dimension": "resource_type",
                "type": "equal",
                "value": "Azure Synapse Analytics-Disaster Recovery Storage"
              },
              {
                "dimension": "resource_type",
                "type": "equal",
                "value": "Azure Synapse Analytics-Storage"
              }
            ]
          },
          {
              "type": "not",
              "expression": {
                  "dimension": "resource_id",
                  "type": "equal",
                  "value": ""
              }
          },
          {
            "dimension": "vendor_account",
            "type": "equal",
            "value": subscription_id
          },
          {
            "type": "not",
            "expression": {
              "dimension": "adjustment_name",
              "type": "substring",
              "substring": "Shared"
            }
          }
        ]
      }
    },
    headers: {
      'User-Agent': "RS Policies",
      'Api-Version': "1.0"
    },
    ignore_status: [400]
  }
EOS
end

datasource "ds_azure_synapse_sql_pool_costs_grouped" do
  run_script $js_azure_synapse_sql_pool_costs_grouped, $ds_azure_synapse_sql_pool_costs
end

script "js_azure_synapse_sql_pool_costs_grouped", type: "javascript" do
  parameters "ds_azure_synapse_sql_pool_costs"
  result "result"
  code <<-EOS
  var cost_multiplier = 365.25 / 12;

  // Group cost data by resourceId for later use
  var result = {};

  _.each(ds_azure_synapse_sql_pool_costs, function (item) {
    var id = item["resourceId"].toLowerCase();

    var types = {
      "Azure Synapse Analytics-Compute Optimized Gen2": "Compute",
      "Azure Synapse Analytics-Disaster Recovery Storage": "Storage",
      "Azure Synapse Analytics-Storage": "Storage",
    };

    if (result[id] == undefined) {
      result[id] = {
        cost: 0.0,
        resourceCategory: types[item.resourceCategory],
      };
    }
    result[id].cost += item["cost"] * cost_multiplier;
  });
EOS
end

datasource "ds_azure_synapse_underutil_and_idle_pools" do
  run_script $js_azure_synapse_underutil_and_idle_pools, $ds_azure_synapse_sql_pool_terminate_metrics, $ds_azure_synapse_sql_pool_pause_metrics, $ds_azure_synapse_sql_pool_downsize_metrics, $ds_azure_synapse_sql_pool_percentile_metrics, $ds_azure_synapse_sql_pool_min_active_metrics, $ds_azure_synapse_sql_pools_region_filtered, $ds_azure_synapse_sql_pool_costs_grouped, $ds_applied_policy, $ds_currency, $ds_azure_synapse_size_map, $param_terminate_lookback, $param_pause_lookback, $param_downsize_lookback, $param_stats_threshold, $param_min_savings, $param_min_active, $param_filter_stats
end

script "js_azure_synapse_underutil_and_idle_pools", type: "javascript" do
  parameters "ds_azure_synapse_sql_pool_terminate_metrics", "ds_azure_synapse_sql_pool_pause_metrics", "ds_azure_synapse_sql_pool_downsize_metrics", "ds_azure_synapse_sql_pool_percentile_metrics", "ds_azure_synapse_sql_pool_min_active_metrics", "ds_azure_synapse_sql_pools_region_filtered", "ds_azure_synapse_sql_pool_costs_grouped", "ds_applied_policy", "ds_currency", "ds_azure_synapse_size_map", "param_terminate_lookback", "param_pause_lookback", "param_downsize_lookback", "param_stats_threshold", "param_min_savings", "param_min_active", "param_filter_stats"
  result "result"
  code <<-EOS
  // Used for formatting numbers to look pretty
  function formatNumber(number, separator) {
    var numString = number.toString()
    var values = numString.split(".")
    var formatted_number = ''

    while (values[0].length > 3) {
      var chunk = values[0].substr(-3)
      values[0] = values[0].substr(0, values[0].length - 3)
      formatted_number = separator + chunk + formatted_number
    }

    if (values[0].length > 0) { formatted_number = values[0] + formatted_number }
    if (values[1] == undefined) { return formatted_number }

    return formatted_number + "." + values[1]
  }

  // Returns an array of single values sorted.
  function sortArray(array) {
    return array.sort(function (a, b) {
      return a - b;
    });
  }

  function percentile(sortedArray, p) {
    if (sortedArray.length === 0) return 0
    var index = (p / 100) * sortedArray.length
    var result = sortedArray[Math.ceil(index) - 1]
    return result
  }

  // Used to add common attributes to all kind of recommendations
  function addItemAttributes(item, id, pools, metrics) {
    item["status"] = pools[id]['status']
    item["creationDate"] = pools[id]['creationDate']
    item["provisioningState"] = pools[id]['provisioningState']
    item["storageAccountType"] = pools[id]['storageAccountType']
    item["Connections"] = metrics['Connections'][0]['maximum']
    item["service"] = "Microsoft.Synapse"
    item['savingsCurrency'] = ds_currency['symbol']
    item["resourceType"] = pools[id]['sku']
  }

  function poolIsNotAvailable(recommendedPool) {
    return recommendedPool != null && recommendedPool != undefined && recommendedPool == true
  }

  var result = []
  var pools = {}
  var daysUsed = {}
  var arr_percentile = {}
  var recommendedPools = {}

  var terminate_total_savings = 0.0
  var idle_total_savings = 0.0
  var underutil_total_savings = 0.0
  var terminate_list = []
  var idle_list = []
  var underutil_list = []

  _.each(ds_azure_synapse_sql_pools_region_filtered, function (item) {
    var id = item['resourceId'].toLowerCase()
    pools[id] = item
  })

  // Terminate Instances
  _.each(ds_azure_synapse_sql_pool_terminate_metrics, function (item) {
    var id = item['resourceId'].toLowerCase()
    var total_cost = 0.0
    var groupedResource = ds_azure_synapse_sql_pool_costs_grouped[id]

    if (groupedResource != undefined) {
      total_cost = groupedResource.cost;

      if (groupedResource.resourceCategory != "Storage") { return }
    } else {
      return
    }
    
    var metrics = {}
    var values = item['value']

    _.each(values, function (metric) {
      metrics[metric['name']['value']] = metric['timeseries'][0]['data']
    })

    var connections = parseInt(metrics['Connections'][0]['maximum'])

    var savings = parseFloat(parseFloat(total_cost).toFixed(3))

    var status = pools[id]['status']

    if (connections == 0 && status == "Paused" && savings >= param_min_savings) {
      addItemAttributes(item, id, pools, metrics)

      item["lookbackPeriod"] = param_terminate_lookback
      item["savings"] = savings
      item["newResourceType"] = "Terminate Azure Synapse SQL Pool"
      item["recommendationDetails"] = [
        "Terminate Azure Synapse SQL pool ", item["resourceName"], " ",
        "in Azure Subscription ", item["subscriptionName"], " ",
        "(", item["subscriptionId"], ")"
      ].join('')

      terminate_list.push(item)
      terminate_total_savings += total_cost

      recommendedPools[id] = true
    }
  })

  // Pause Instances
  _.each(ds_azure_synapse_sql_pool_pause_metrics, function (item) {
    var id = item['resourceId'].toLowerCase()

    if (poolIsNotAvailable(recommendedPools[id])) {
      return
    }

    var total_cost = 0.0
    var groupedResource = ds_azure_synapse_sql_pool_costs_grouped[id]

    if (groupedResource != undefined) {
      total_cost = groupedResource.cost;

      if (groupedResource.resourceCategory != "Compute") { return }
    } else {
      return
    }

    var savings = parseFloat(parseFloat(total_cost).toFixed(3))

    if (savings < param_min_savings) {
      return
    }

    var metrics = {}
    var values = item['value']

    _.each(values, function (metric) {
      metrics[metric['name']['value']] = metric['timeseries'][0]['data']
    })

    var connections = parseInt(metrics['Connections'][0]['maximum'])

    var status = pools[id]['status']

    if (connections == 0 && status != "Paused") {

      addItemAttributes(item, id, pools, metrics)

      item["DWUavgUsed"] = parseFloat(metrics['DWUUsed'][0]['average']).toFixed(3)
      item["DWUavgUsedPercent"] = parseFloat(metrics['DWUUsedPercent'][0]['average']).toFixed(3)
      item["DWUUsed"] = metrics['DWUUsed'][0]['maximum']
      item["DWUUsedPercent"] = metrics['DWUUsedPercent'][0]['maximum']
      item["CPUavgPercent"] = parseFloat(metrics['CPUPercent'][0]['average']).toFixed(3)
      item["CPUPercent"] = metrics['CPUPercent'][0]['maximum']
      item["MemoryAvgUsedPercent"] = parseFloat(metrics['MemoryUsedPercent'][0]['average']).toFixed(3)
      item["MemoryUsedPercent"] = metrics['MemoryUsedPercent'][0]['maximum']
      item["lookbackPeriod"] = param_pause_lookback
      item["savings"] = savings
      item["newResourceType"] = "Pause Azure Synapse SQL Pool"
      item["recommendationDetails"] = [
        "Pause Azure Synapse SQL pool ", item["resourceName"], " ",
        "in Azure Subscription ", item["subscriptionName"], " ",
        "(", item["subscriptionId"], ")"
      ].join('')

      idle_list.push(item)
      idle_total_savings += total_cost

      recommendedPools[id] = true
    }

  })

  // Percentile Metrics
  _.each(ds_azure_synapse_sql_pool_percentile_metrics, function (item) {
    id = item['resourceId'].toLowerCase()

    if (poolIsNotAvailable(recommendedPools[id])) {
      return
    }

    metrics = {}
    values = item['value']

    _.each(values, function (metric) {
      metrics[metric['name']['value']] = metric['timeseries'][0]['data']
    })

    var all_measurements = []
    _.each(metrics['DWUUsedPercent'], function (data) {
      all_measurements = all_measurements.concat(data['maximum'])
    })

    var sortedArray = sortArray(all_measurements)

    arr_percentile[id + "90"] = percentile(all_measurements, 90).toFixed(3)
    arr_percentile[id + "95"] = percentile(all_measurements, 95).toFixed(3)
    arr_percentile[id + "99"] = percentile(all_measurements, 99).toFixed(3)
    arr_percentile[id + "maximum"] = 0.0;
    arr_percentile[id + "average"] = 0.0;

    // If sortedArray isn't empty, takes as "maximum" the last item in the list.
    if (sortedArray.length > 0) {
      // Set maximum
      arr_percentile[id + "maximum"] = sortedArray[sortedArray.length - 1];
      // Calculate average
      var sum = _.reduce(sortedArray, function (memo, num) { return memo + num; }, 0);
      var average = sum / sortedArray.length;
      arr_percentile[id + "average"] = average;
    }
  })

  // Min Active Metrics for Downsizing
  _.each(ds_azure_synapse_sql_pool_min_active_metrics, function (item) {
    var id = item['resourceId'].toLowerCase()

    if (poolIsNotAvailable(recommendedPools[id])) {
      return
    }

    var days = 0

    _.each(item['value'][0]['timeseries'][0]['data'], function (day) {
      if (day['average'] > 0) {
        days++
      }
    })

    daysUsed[id] = days
  })

  // Downsize Instances
  _.each(ds_azure_synapse_sql_pool_downsize_metrics, function (item) {
    var id = item['resourceId'].toLowerCase()

    if (poolIsNotAvailable(recommendedPools[id])) {
      return
    }

    var notEnoughDaysActive = false
    if (daysUsed[id] != null && daysUsed[id] != undefined && daysUsed[id] < param_min_active) { notEnoughDaysActive = true }

    if (notEnoughDaysActive) {
      return
    }

    var total_cost = 0.0
    var groupedResource = ds_azure_synapse_sql_pool_costs_grouped[id]

    if (groupedResource != undefined) {
      total_cost = groupedResource.cost;

      if (groupedResource.resourceCategory != "Compute") { return }
    } else {
      return
    }

    if (item["resourceType"] == null || item["resourceType"] == undefined) {
      var sku = pools[id]['sku']
      
      if (sku == null || sku == undefined) {
        return
      }

      item["resourceType"] = sku
    }

    if (item["resourceType"].indexOf('c') == -1) {
      return
    }

    metrics = {}
    values = item['value']

    _.each(values, function (metric) {
      metrics[metric['name']['value']] = metric['timeseries'][0]['data']
    })

    var connections = parseInt(metrics['Connections'][0]['maximum'])
    var dwuUsedPercent = 0.0
    var dwuUsed = 0.0
    var currentResourceSize = item["resourceType"].substring(2, item["resourceType"].indexOf('c'))

    if (param_filter_stats == "Average") {
      dwuUsedPercent = arr_percentile[id + "average"]
    } else if (param_filter_stats == "Maximum") {
      dwuUsedPercent = arr_percentile[id + "maximum"]
    } else if (param_filter_stats == "P90") {
      dwuUsedPercent = arr_percentile[id + "90"]
    } else if (param_filter_stats == "P95") {
      dwuUsedPercent = arr_percentile[id + "95"]
    } else if (param_filter_stats == "P99") {
      dwuUsedPercent = arr_percentile[id + "99"]
    }

    dwuUsed = dwuUsedPercent * currentResourceSize / 100

    if (dwuUsedPercent <= param_stats_threshold) {
      addItemAttributes(item, id, pools, metrics)

      item["threshold"] = param_stats_threshold

      item["lookbackPeriod"] = param_downsize_lookback

      var tempNewSize = dwuUsed * 100 / param_stats_threshold
      var newResourceType = null
      var recommendationType = ""

      if (ds_azure_synapse_size_map[item['resourceType']]) {
        item["newResourceType"] = item['resourceType']

        if (tempNewSize < currentResourceSize) {

          recommendationType = "Downsize"

          while (ds_azure_synapse_size_map[item['newResourceType']]['down'] != null) {

            newResourceType = ds_azure_synapse_size_map[item['newResourceType']]['down']
            newResourceSize = newResourceType.substring(2, newResourceType.indexOf('c'))

            if (newResourceSize >= tempNewSize) {
              item["newResourceType"] = newResourceType
            } else {
              break
            }
          }
        }

        if (tempNewSize > currentResourceSize) {
          recommendationType = "Upsize"

          while (ds_azure_synapse_size_map[item['newResourceType']]['up'] != null) {

            newResourceType = ds_azure_synapse_size_map[item['newResourceType']]['up']
            newResourceSize = newResourceType.substring(2, newResourceType.indexOf('c'))

            if (item["newResourceType"] <= tempNewSize) {
              item["newResourceType"] = newResourceType
            } else {
              break
            }
          }
        }

      }

      if (item["newResourceType"] != null && item["newResourceType"] != undefined && item["newResourceType"] != item["resourceType"]) {
        item["recommendationDetails"] = [
          recommendationType, " Azure Synapse SQL pool ", item["resourceName"], " ",
          "in Azure Subscription ", item["subscriptionName"], " ",
          "(", item["subscriptionId"], ") ",
          "from ", item["resourceType"], " ",
          "to ", item["newResourceType"]
        ].join('')

        newResourceSize = item["newResourceType"].substring(2, item["newResourceType"].indexOf('c'))

        item["savings"] = parseFloat(total_cost / parseFloat(currentResourceSize) * (parseFloat(currentResourceSize) - parseFloat(newResourceSize))).toFixed(3)
        var savings = parseFloat(item["savings"])

        if (item["savings"] >= param_min_savings) {
          var dwuAvgPercent = arr_percentile[id + "average"];
          var dwuAvgUsed = dwuAvgPercent * currentResourceSize / 100;

          var dwuMaxPercent = arr_percentile[id + "maximum"]
          var dwuMaxUsed = dwuMaxPercent * currentResourceSize / 100

          item["DWUavgUsed"] = parseFloat(dwuAvgUsed).toFixed(3)
          item["DWUavgUsedPercent"] = parseFloat(dwuAvgPercent).toFixed(3)
          item["DWUUsed"] = parseFloat(dwuMaxUsed).toFixed(3)
          item["DWUUsedPercent"] = parseFloat(dwuMaxPercent).toFixed(3)
          item["CPUavgPercent"] = parseFloat(metrics['CPUPercent'][0]['average']).toFixed(3)
          item["CPUPercent"] = metrics['CPUPercent'][0]['maximum']
          item["MemoryAvgUsedPercent"] = parseFloat(metrics['MemoryUsedPercent'][0]['average']).toFixed(3)
          item["MemoryUsedPercent"] = metrics['MemoryUsedPercent'][0]['maximum']
          item["DWUP90"] = arr_percentile[id + "90"],
            item["DWUP95"] = arr_percentile[id + "95"],
            item["DWUP99"] = arr_percentile[id + "99"],
            underutil_list.push(item)
          underutil_total_savings += savings
        }
      }
    }
  })

  if (terminate_list.length > 0) {
    var items_total = ds_azure_synapse_sql_pools_region_filtered.length.toString()
    var terminate_items_total = terminate_list.length.toString()
    var terminate_items_percentage = (terminate_items_total / items_total * 100).toFixed(2).toString() + '%'
    var terminate_total_savings = ds_currency['symbol'] + ' ' + formatNumber(parseFloat(terminate_total_savings).toFixed(2), ds_currency['separator'])
    var terminate_verb = "are"
    if (terminate_items_total == 1) { terminate_verb = "is" }
    var day_message = "day"
    if (param_terminate_lookback > 1) { day_message += "s" }
    var terminate_findings = [
      "Out of ", items_total, " Azure Synapse SQL pools analyzed, ",
      terminate_items_total, " (", terminate_items_percentage,
      ") ", terminate_verb, " idle in the last ", param_terminate_lookback, " ", day_message, " and recommended for termination. "
    ].join('')
    var terminate_analysis_message = [
      "An Azure Synapse SQL pool is considered unused for termination if it has not had any connections ",
      "in the last ", param_terminate_lookback, " ", day_message, ". "
    ].join('')
    var disclaimer = "The above settings can be modified by editing the applied policy and changing the appropriate parameters."
    var terminate_message = terminate_findings + terminate_analysis_message + disclaimer

    terminate_list[0]['terminate_message'] = terminate_message
    terminate_list[0]['terminate_total_savings'] = terminate_total_savings
    terminate_list[0]['policy_name'] = ds_applied_policy['name']
  }

  if (idle_list.length > 0) {
    items_total = ds_azure_synapse_sql_pools_region_filtered.length.toString()
    var idle_items_total = idle_list.length.toString()
    var idle_items_percentage = (idle_items_total / items_total * 100).toFixed(2).toString() + '%'
    idle_total_savings = ds_currency['symbol'] + ' ' + formatNumber(parseFloat(idle_total_savings).toFixed(2), ds_currency['separator'])
    var idle_verb = "are"
    if (idle_items_total == 1) { idle_verb = "is" }
    var day_message = "day"
    if (param_pause_lookback > 1) { day_message += "s" }
    var idle_findings = [
      "Out of ", items_total, " Azure Synapse SQL pools analyzed, ",
      idle_items_total, " (", idle_items_percentage,
      ") ", idle_verb, " idle in the last ", param_pause_lookback, " ", day_message, " and recommended for pausing. "
    ].join('')
    var idle_analysis_message = [
      "An Azure Synapse SQL pool is considered unused for pausing if it has not had any connections ",
      "in the last ", param_pause_lookback, " ", day_message, ", and its status is not 'Paused'. "
    ].join('')
    disclaimer = "The above settings can be modified by editing the applied policy and changing the appropriate parameters."
    var idle_message = idle_findings + idle_analysis_message + disclaimer

    idle_list[0]['idle_message'] = idle_message
    idle_list[0]['idle_total_savings'] = idle_total_savings
    idle_list[0]['policy_name'] = ds_applied_policy['name']
  }

  if (underutil_list.length > 0) {
    items_total = ds_azure_synapse_sql_pools_region_filtered.length.toString()
    underutil_items_total = underutil_list.length.toString()
    underutil_items_percentage = (underutil_items_total / items_total * 100).toFixed(2).toString() + '%'
    underutil_total_savings = ds_currency['symbol'] + ' ' + formatNumber(parseFloat(underutil_total_savings).toFixed(2), ds_currency['separator'])
    underutil_verb = "are"
    if (underutil_items_total == 1) { underutil_verb = "is" }
    underutil_findings = [
      "Out of ", items_total, " Azure Synapse SQL pools analyzed, ",
      underutil_items_total, " (", underutil_items_percentage,
      ") ", underutil_verb, " underutilized and recommended for downsizing. "
    ].join('')
    day_message = "day"
    if (param_downsize_lookback > 1) { day_message += "s" }
    underutil_analysis_message = [
      "An Azure Synapse SQL pool is considered underutilized if it has been used ",
      "for at least ", param_min_active, " ", day_message, " in the last ", param_downsize_lookback,
      " ", day_message, ", but has an average DWU usage below ",
      param_stats_threshold, "% for that same time period. "
    ].join('')
    disclaimer = "The above settings can be modified by editing the applied policy and changing the appropriate parameters."
    underutil_message = underutil_findings + underutil_analysis_message + disclaimer

    underutil_list[0]['underutil_message'] = underutil_message
    underutil_list[0]['underutil_total_savings'] = underutil_total_savings
    underutil_list[0]['policy_name'] = ds_applied_policy['name']
  }

  result = {
    terminate_list: terminate_list,
    idle_list: idle_list,
    underutil_list: underutil_list
  }
  EOS
end

datasource "ds_azure_synapse_terminate_pools" do
  run_script $js_azure_synapse_terminate_pools, $ds_azure_synapse_underutil_and_idle_pools
end

script "js_azure_synapse_terminate_pools", type: "javascript" do
  parameters "ds_azure_synapse_underutil_and_idle_pools"
  result "result"
  code <<-EOS
  result = [{
    "policy_name": "",
    "terminate_message": "",
    "idle_message": "",
    "underutil_message": "",
    "terminate_total_savings": "",
    "idle_total_savings": "",
    "underutil_total_savings": "",  
    "resourceName": "",
    "resourceGroup": "",
    "resourceId": "",
    "region": "",
    "resourceType": "",
    "newResourceType": "",
    "subscriptionId": "",
    "subscriptionName": "",
    "tags": "",
    "region": "",
    "status": "",
    "creationDate": "",
    "provisioningState": "",
    "storageAccountType": "",
    "Connections": "",
    "service": "",
    "lookbackPeriod": "",
    "savings": "",
    "savingsCurrency": "",
    "recommendationDetails": "",
  }]

  result = ds_azure_synapse_underutil_and_idle_pools["terminate_list"].concat(result)
EOS
end

datasource "ds_azure_synapse_idle_pools" do
  run_script $js_azure_synapse_idle_pools, $ds_azure_synapse_underutil_and_idle_pools
end

script "js_azure_synapse_idle_pools", type: "javascript" do
  parameters "ds_azure_synapse_underutil_and_idle_pools"
  result "result"
  code <<-EOS
  result = [{
    "policy_name": "",
    "terminate_message": "",
    "idle_message": "",
    "underutil_message": "",
    "terminate_total_savings": "",
    "idle_total_savings": "",
    "underutil_total_savings": "", 
    "resourceName": "",
    "resourceGroup": "",
    "resourceId": "",
    "region": "",
    "resourceType": "",
    "newResourceType": "",
    "subscriptionId": "",
    "subscriptionName": "",
    "tags": "",
    "region": "",
    "status": "",
    "creationDate": "",
    "provisioningState": "",
    "storageAccountType": "",
    "DWUavgUsed": "",
    "DWUavgUsedPercent": "",
    "DWUUsed": "",
    "DWUUsedPercent": "",
    "CPUavgPercent": "",
    "CPUPercent": "",
    "MemoryAvgUsedPercent": "",
    "MemoryUsedPercent": "",
    "Connections": "",
    "service": "",
    "lookbackPeriod": "",
    "savings": "",
    "savingsCurrency": "",
    "recommendationDetails": "",
  }]

  result = ds_azure_synapse_underutil_and_idle_pools["idle_list"].concat(result)
EOS
end

datasource "ds_azure_synapse_underutil_pools" do
  run_script $js_azure_synapse_underutil_pools, $ds_azure_synapse_underutil_and_idle_pools
end

script "js_azure_synapse_underutil_pools", type: "javascript" do
  parameters "ds_azure_synapse_underutil_and_idle_pools"
  result "result"
  code <<-EOS
  result = [{
    "policy_name": "",
    "terminate_message": "",
    "idle_message": "",
    "underutil_message":"",
    "terminate_total_savings": "",
    "idle_total_savings": "",
    "underutil_total_savings": "",
    "resourceName": "",
    "resourceGroup": "",
    "resourceId": "",
    "region": "",
    "resourceType": "",
    "newResourceType": "",
    "subscriptionId": "",
    "subscriptionName": "",
    "tags": "",
    "region": "",
    "status": "",
    "creationDate": "",
    "provisioningState": "",
    "storageAccountType": "",
    "DWUavgUsed": "",
    "DWUavgUsedPercent": "",
    "DWUUsed": "",
    "DWUUsedPercent": "",
    "DWUP90": "",
    "DWUP95": "",
    "DWUP99": "",
    "CPUavgPercent": "",
    "CPUPercent": "",
    "MemoryAvgUsedPercent": "",
    "MemoryUsedPercent": "",
    "Connections": "",
    "service": "",
    "lookbackPeriod": "",
    "threshold": "",
    "savings": "",
    "savingsCurrency": "",
    "recommendationDetails": "",
  }]

  result = ds_azure_synapse_underutil_and_idle_pools["underutil_list"].concat(result)
EOS
end

###############################################################################
# Policy
###############################################################################

policy "pol_azure_synapse_sql_pool_utilization" do
  validate_each $ds_azure_synapse_terminate_pools do
    summary_template "{{ with index data 0 }}{{ .policy_name }}{{ end }}: {{ len data }} Azure Idle for termination Synapse SQL pools found"
    detail_template <<-'EOS'
    **Potential Monthly Savings:** {{ with index data 0 }}{{ .terminate_total_savings }}{{ end }}

    {{ with index data 0 }}{{ .terminate_message }}{{ end }}
    EOS
    # Policy check fails and incident is created only if data is not empty and the Parent Policy has not been terminated
    check eq(val(item, "resourceId"), "")
    escalate $esc_email
    escalate $esc_pause_instances
    export do
      resource_level true
      field "accountID" do
        label "Subscription ID"
        path "subscriptionId"
      end
      field "accountName" do
        label "Subscription Name"
        path "subscriptionName"
      end
      field "resourceGroup" do
        label "Resource Group"
      end
      field "resourceName" do
        label "Resource Name"
        path "name"
      end
      field "resourceID" do
        label "Resource ID"
        path "resourceId"
      end
      field "resourceType" do
        label "Resource Type"
      end
      field "newResourceType" do
        label "Recommended Resource Type"
      end
      field "resourceKind" do
        label "Resource Kind"
      end
      field "region" do
        label "Region"
      end
      field "status" do
        label "Status"
      end
      field "creationDate" do
        label "Creation Date"
      end
      field "provisioningState" do
        label "Provisioning State"
      end
      field "storageAccountType" do
        label "Storage Account Type"
      end
      field "savings" do
        label "Estimated Monthly Savings"
      end
      field "savingsCurrency" do
        label "Savings Currency"
      end
      field "Connections" do
        label "Connections Utilization (Maximum)"
      end
      field "lookbackPeriod" do
        label "Look Back Period (Days)"
      end
      field "service" do
        label "Service"
      end
      field "id" do
        label "ID"
        path "resourceId"
      end
      field "recommendationDetails" do
        label "Recommendation"
      end
    end
  end
  validate_each $ds_azure_synapse_idle_pools do
    summary_template "{{ with index data 0 }}{{ .policy_name }}{{ end }}: {{ len data }} Azure Idle for pausing Synapse SQL pools found"
    detail_template <<-'EOS'
    **Potential Monthly Savings:** {{ with index data 0 }}{{ .idle_total_savings }}{{ end }}

    {{ with index data 0 }}{{ .idle_message }}{{ end }}
    EOS
    # Policy check fails and incident is created only if data is not empty and the Parent Policy has not been terminated
    check logic_or($ds_parent_policy_terminated, eq(val(item, "resourceId"), ""))
    escalate $esc_email
    escalate $esc_pause_instances
    export do
      resource_level true
      field "accountID" do
        label "Subscription ID"
        path "subscriptionId"
      end
      field "accountName" do
        label "Subscription Name"
        path "subscriptionName"
      end
      field "resourceGroup" do
        label "Resource Group"
      end
      field "resourceName" do
        label "Resource Name"
        path "name"
      end
      field "resourceID" do
        label "Resource ID"
        path "resourceId"
      end
      field "resourceType" do
        label "Resource Type"
      end
      field "newResourceType" do
        label "Recommended Resource Type"
      end
      field "resourceKind" do
        label "Resource Kind"
      end
      field "region" do
        label "Region"
      end
      field "status" do
        label "Status"
      end
      field "creationDate" do
        label "Creation Date"
      end
      field "provisioningState" do
        label "Provisioning State"
      end
      field "storageAccountType" do
        label "Storage Account Type"
      end
      field "savings" do
        label "Estimated Monthly Savings"
      end
      field "savingsCurrency" do
        label "Savings Currency"
      end
      field "DWUavgUsed" do
        label "DWU Utilization (Average)"
      end
      field "DWUavgUsedPercent" do
        label "DWU Utilization % (Average)"
      end
      field "DWUUsed" do
        label "DWU Utilization (Maximum)"
      end
      field "DWUUsedPercent" do
        label "DWU Utilization % (Maximum)"
      end
      field "Connections" do
        label "Connections Utilization (Maximum)"
      end
      field "cpuAverage" do
        label "CPU Utilization % (Average)"
        path "CPUavgPercent"
      end
      field "cpuMaximum" do
        label "CPU Utilization % (Maximum)"
        path "CPUPercent"
      end
      field "memAverage" do
        label "Memory Utilization % (Average)"
        path "MemoryAvgUsedPercent"
      end
      field "memMaximum" do
        label "Memory Utilization % (Maximum)"
        path "MemoryUsedPercent"
      end
      field "lookbackPeriod" do
        label "Look Back Period (Days)"
      end
      field "service" do
        label "Service"
      end
      field "id" do
        label "ID"
        path "resourceId"
      end
      field "recommendationDetails" do
        label "Recommendation"
      end
    end
  end
  validate_each $ds_azure_synapse_underutil_pools do
    summary_template "{{ with index data 0 }}{{ .policy_name }}{{ end }}: {{ len data }} Azure Underutilized Synapse SQL pools found"
    detail_template <<-'EOS'
    **Potential Monthly Savings:** {{ with index data 0 }}{{ .underutil_total_savings }}{{ end }}

    {{ with index data 0 }}{{ .underutil_message }}{{ end }}
    EOS
    # Policy check fails and incident is created only if data is not empty and the Parent Policy has not been terminated
    check eq(val(item, "resourceId"), "")
    escalate $esc_email
    escalate $esc_pause_instances
    export do
      resource_level true
      field "accountID" do
        label "Subscription ID"
        path "subscriptionId"
      end
      field "accountName" do
        label "Subscription Name"
        path "subscriptionName"
      end
      field "resourceGroup" do
        label "Resource Group"
      end
      field "resourceName" do
        label "Resource Name"
        path "name"
      end
      field "resourceID" do
        label "Resource ID"
        path "resourceId"
      end
      field "resourceType" do
        label "Resource Type"
      end
      field "newResourceType" do
        label "Recommended Resource Type"
      end
      field "resourceKind" do
        label "Resource Kind"
      end
      field "region" do
        label "Region"
      end
      field "status" do
        label "Status"
      end
      field "creationDate" do
        label "Creation Date"
      end
      field "provisioningState" do
        label "Provisioning State"
      end
      field "storageAccountType" do
        label "Storage Account Type"
      end
      field "savings" do
        label "Estimated Monthly Savings"
      end
      field "savingsCurrency" do
        label "Savings Currency"
      end
      field "DWUavgUsed" do
        label "DWU Utilization (Average)"
      end
      field "DWUavgUsedPercent" do
        label "DWU Utilization % (Average)"
      end
      field "DWUUsed" do
        label "DWU Utilization (Maximum)"
      end
      field "DWUUsedPercent" do
        label "DWU Utilization % (Maximum)"
      end
      field "DWUP90" do
        label "DWU Utilization % (P90)"
      end
      field "DWUP95" do
        label "DWU Utilization % (P95)"
      end
      field "DWUP99" do
        label "DWU Utilization % (P99)"
      end
      field "threshold" do
        label "Threshold"
      end
      field "Connections" do
        label "Connections Utilization (Maximum)"
      end
      field "cpuAverage" do
        label "CPU Utilization % (Average)"
        path "CPUavgPercent"
      end
      field "cpuMaximum" do
        label "CPU Utilization % (Maximum)"
        path "CPUPercent"
      end
      field "memAverage" do
        label "Memory Utilization % (Average)"
        path "MemoryAvgUsedPercent"
      end
      field "memMaximum" do
        label "Memory Utilization % Maximum"
        path "MemoryUsedPercent"
      end
      field "lookbackPeriod" do
        label "Look Back Period (Days)"
      end
      field "service" do
        label "Service"
      end
      field "id" do
        label "ID"
        path "resourceId"
      end
      field "recommendationDetails" do
        label "Recommendation"
      end
    end
  end
end

###############################################################################
# Escalations
###############################################################################

escalation "esc_email" do
  automatic true
  label "Send Email"
  description "Send incident email"
  email $param_email
end
  
escalation "esc_pause_instances" do
  automatic contains($param_automatic_pause, "Yes")
  label "Pause Underutilized Instances"
  description "Automatically pause the dedicated Synapse SQL Pool in the Test MCA subscription"
  run "pause_instances", data, $param_azure_endpoint
end
  
###############################################################################
# Cloud Workflow
###############################################################################
define pause_instances($data, $param_azure_endpoint) return $all_responses do
  $$all_responses = []
    
  sub on_error: handle_error() do
    $idle_data = []
    foreach $instance in $data do
      if $instance["Connections"] == 0 && $instance["status"] != "Paused"
        $idle_data << $instance
      end
    end
    
    foreach $instance in $idle_data do
      sub on_error: handle_error() do
        call pause_instance($instance, $param_azure_endpoint) retrieve $pause_response
        $$all_responses << $pause_response
      end
    end
  end
    
  if inspect($$errors) != "null"
    raise join($$errors, "\n")
  end
end
  
define pause_instance($instance, $param_azure_endpoint) return $response do
  $host = $param_azure_endpoint
  $href = $instance["id"] + "/pause"
  $params = "?api-version=2021-06-01"
  $url = $host + $href + $params
  task_label("POST " + $url)
  
  $response = http_request(
    auth: $$auth_azure,
    https: true,
    verb: "post",
    host: $host,
    href: $href,
    query_strings: { "api-version": "2021-06-01" },
    headers: {
      "cache-control": "no-cache",
      "content-type": "application/json"
    }
  )
  
  task_label("Pause Azure SQL instance response: " + $instance["id"] + " " + to_json($response))
  
  if $response["code"] != 204 && $response["code"] != 202
    raise "Unexpected response pausing Azure SQL instance: " + $instance["id"] + " " + to_json($response)
  else
    task_label("Pause Azure SQL instance successful: " + $instance["id"])
  end
end
  
define handle_error() do
  $error_message = "Error encountered while processing: " + $_error["message"]
  task_label($error_message)
  if !$$errors
    $$errors = []
  end
  $$errors << $error_message
  $_error_behavior = "skip"
end
  
###############################################################################
# Meta Policy [alpha]
# Not intended to be modified or used by policy developers
###############################################################################

# If the meta_parent_policy_id is not set it will evaluate to an empty string and we will look for the policy itself,
# if it is set we will look for the parent policy.
datasource "ds_get_policy" do
  request do
    auth $auth_flexera
    host rs_governance_host
    ignore_status [404]
    path join(["/api/governance/projects/", rs_project_id, "/applied_policies/", switch(ne(meta_parent_policy_id, ""), meta_parent_policy_id, policy_id) ])
    header "Api-Version", "1.0"
  end
  result do
    encoding "json"
    field "id", jmes_path(response, "id")
  end
end

datasource "ds_parent_policy_terminated" do
  run_script $js_decide_if_self_terminate, $ds_get_policy, policy_id, meta_parent_policy_id
end

# If the policy was applied by a meta_parent_policy we confirm it exists if it doesn't we confirm we are deleting
# This information is used in two places:
# - determining whether or not we make a delete call
# - determining if we should create an incident (we don't want to create an incident on the run where we terminate)
script "js_decide_if_self_terminate", type: "javascript" do
  parameters "found", "self_policy_id", "meta_parent_policy_id"
  result "result"
  code <<-EOS
  var result
  if (meta_parent_policy_id != "" && found.id == undefined) {
    result = true
  } else {
    result = false
  }
  EOS
end

# Two potentials ways to set this up:
# - this way and make a unneeded 'get' request when not deleting
# - make the delete request an interate and have it iterate over an empty array when not deleting and an array with one item when deleting
script "js_make_terminate_request", type: "javascript" do
  parameters "should_delete", "policy_id", "rs_project_id", "rs_governance_host"
  result "request"
  code <<-EOS

  var request = {
    auth:  'auth_flexera',
    host: rs_governance_host,
    path: "/api/governance/projects/" + rs_project_id + "/applied_policies/" + policy_id,
    headers: {
      "API-Version": "1.0",
      "Content-Type":"application/json"
    },
  }

  if (should_delete) {
    request.verb = 'DELETE'
  }
  EOS
end

datasource "ds_terminate_self" do
  request do
    run_script $js_make_terminate_request, $ds_parent_policy_terminated, policy_id, rs_project_id, rs_governance_host
  end
end

datasource "ds_is_deleted" do
  run_script $js_check_deleted, $ds_terminate_self
end

# This is just a way to have the check delete request connect to the farthest leaf from policy.
# We want the delete check to the first thing the policy does to avoid the policy erroring before it can decide whether or not it needs to self terminate
# Example a customer deletes a credential and then terminates the parent policy. We still want the children to self terminate
# The only way I could see this not happening is if the user who applied the parent_meta_policy was offboarded or lost policy access, the policies who are impersonating the user
# would not have access to self-terminate
# It may be useful for the backend to enable a mass terminate at some point for all meta_child_policies associated with an id.
script "js_check_deleted", type: "javascript" do
  parameters "response"
  result "result"
  code <<-EOS
  result = {"path":"/"}
  EOS
end

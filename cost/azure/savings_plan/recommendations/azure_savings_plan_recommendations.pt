name "Azure Savings Plan Recommendations"
rs_pt_ver 20180301
type "policy"
short_description "A policy that sends email notifications when Azure Savings Plan Recommendations are identified. NOTE: These Savings Plan Purchase Recommendations are generated by Microsoft Azure. See the [README](https://github.com/flexera/policy_templates/tree/master/cost/azure/savings_plan/recommendations) and [docs.flexera.com/flexera/EN/Automation](https://docs.flexera.com/flexera/EN/Automation/AutomationGS.htm) to learn more."
long_description ""
severity "medium"
category "Cost"
default_frequency "daily"
info(
  version: "1.1",
  provider: "Azure",
  service: "Compute",
  policy_set: "Savings Plan",
  recommendation_type: "Rate Reduction"
)

###############################################################################
# Parameters
###############################################################################

parameter "param_days" do
  category "RI"
  label "Look Back Period"
  default "Last7Days"
  description "Number of days of prior usage to analyze"
  allowed_values "Last7Days","Last30Days","Last60Days"
  type "string"
end

parameter "param_term" do
  category "RI"
  label "Term"
  default "3 Year"
  description "The Savings Plan term"
  allowed_values "1 Year", "3 Year"
  type "string"
end

parameter "param_scope" do
  category "RI"
  label "Reservation Scope"
  default "Single"
  description "Single or Shared Savings Plan Scope"
  allowed_values "Single","Shared"
  type "string"
end

parameter "param_savings_threshold" do
  category "RI"
  label "Net Savings Threshold"
  description "Specify the minimum net savings that should result in a recommendation"
  default 100
  type "number"
end

parameter "param_email" do
  type "list"
  label "Email addresses to notify"
  description "Email addresses of the recipients you wish to notify"
end

parameter "param_azure_endpoint" do
  type "string"
  label "Azure Endpoint"
  allowed_values "management.azure.com", "management.chinacloudapi.cn"
  default "management.azure.com"
end

parameter "param_subscription_whitelist" do
  label "Subscription Whitelist"
  type "list"
  description "Whitelisted Subscriptions, if empty, all subscriptions will be checked"
end

###############################################################################
# Authentication
###############################################################################

#AUTHNETICATE WITH AZURE
credentials "azure_auth" do
  schemes "oauth2"
  label "Azure"
  description "Select the Azure Resource Manager Credential from the list."
  tags "provider=azure_rm"
end

###############################################################################
# Pagination
###############################################################################

pagination "azure_pagination" do
  get_page_marker do
    body_path "nextLink"
  end
  set_page_marker do
    uri true
  end
end

###############################################################################
# Datasources and Scripts
###############################################################################

#GET LIST OF SUBSCRIPTIONS
datasource "ds_subscriptions" do
  request do
    auth $azure_auth
    pagination $azure_pagination
    host $param_azure_endpoint
    path "/subscriptions/"
    query "api-version", "2020-01-01"
    header "User-Agent", "RS Policies"
  end
  result do
    encoding "json"
    collect jmes_path(response, "value[*]") do
      field "subscriptionId", jmes_path(col_item,"subscriptionId")
      field "subscriptionName", jmes_path(col_item,"displayName")
    end
  end
end

#FILTER SUBSCRIPTIONS BASED ON USER-DEFINED PARAMETER
datasource "ds_filtered_subscriptions" do
  run_script $js_filtered_subscriptions, $ds_subscriptions, $param_subscription_whitelist
end

script "js_filtered_subscriptions", type: "javascript" do
  parameters "ds_subscriptions", "param_subscription_whitelist"
  result "results"
  code <<-EOS
    var results = []
    if ( param_subscription_whitelist.length != 0){
      results = []
      _.each(param_subscription_whitelist, function(sub){
        var found = _.find(ds_subscriptions, function(item){
          return item.subscriptionId == sub || item.subscriptionName.toLowerCase() == sub.toLowerCase();
        })
        results.push(found)
      })
    } else {
      results = ds_subscriptions
    }
  EOS
end

#GET TERM API VALUES
datasource "ds_term" do
  run_script $js_get_term, $param_term
end

script "js_get_term", type: "javascript" do
  parameters "param_term"
  result "data"
  code <<-EOS
  var data = {}
  if(param_term == "1 Year"){
    data["term"] = "P1Y"
  } else {
    data["term"] = "P3Y"
  }
  EOS
end

#GET SAVINGS PLAN RECOMMENDATIONS FOR EACH SUBSCRIPTION
datasource "ds_sp_recommendations" do
  iterate $ds_filtered_subscriptions
  request do
    auth $azure_auth
    pagination $azure_pagination
    host $param_azure_endpoint
    path join(["/subscriptions/", val(iter_item,"subscriptionId"), "/providers/Microsoft.CostManagement/benefitRecommendations"])
    query "api-version", "2022-10-01"
    query "$filter", join(["properties/scope eq ", "'", $param_scope, "'", " and properties/term eq ", "'", val($ds_term, "term"), "'", " and properties/lookBackPeriod eq ", "'", $param_days, "'"])
    header "User-Agent", "RS Policies"
    # Ignore status 400, 403, and 404 which can be returned in certain (legacy) types of Azure Subscriptions
    # Ignore status 401 and 422 which can get returned when the user does not have access to the subscription
    ignore_status [400, 401, 403, 404, 422]
  end
  result do
    encoding "json"
    collect jmes_path(response, "value[*]") do
      field "id", jmes_path(col_item, "id")
      field "name", jmes_path(col_item, "name")
      field "subscriptionId", val(iter_item, "subscriptionId")
      field "subscriptionName", val(iter_item, "subscriptionName")
      field "kind", jmes_path(col_item, "kind")
      field "totalHours", jmes_path(col_item, "properties.totalHours")
      field "lookBackPeriod", jmes_path(col_item, "properties.lookBackPeriod")
      field "term", jmes_path(col_item, "properties.term")
      field "scope", jmes_path(col_item, "properties.scope")
      field "commitmentGranularity", jmes_path(col_item, "properties.commitmentGranularity")
      field "costWithoutBenefit", jmes_path(col_item, "properties.costWithoutBenefit")
      field "averageUtilizationPercentage", jmes_path(col_item, "properties.recommendationDetails.averageUtilizationPercentage")
      field "coveragePercentage", jmes_path(col_item, "properties.recommendationDetails.coveragePercentage")
      field "commitmentAmount", jmes_path(col_item, "properties.recommendationDetails.commitmentAmount")
      field "overageCost", jmes_path(col_item, "properties.recommendationDetails.overageCost")
      field "benefitCost", jmes_path(col_item, "properties.recommendationDetails.benefitCost")
      field "savingsAmount", jmes_path(col_item, "properties.recommendationDetails.savingsAmount")
      field "savingsPercentage", jmes_path(col_item, "properties.recommendationDetails.savingsPercentage")
      field "totalCost", jmes_path(col_item, "properties.recommendationDetails.totalCost")
      field "wastageCost", jmes_path(col_item, "properties.recommendationDetails.wastageCost")
    end
  end
end

#EVALUATE DATA BASED ON SCOPE PARAMETER
datasource "ds_sp_recommendations_data" do
  run_script $js_eval_sp_recommendations, $ds_sp_recommendations, $param_scope
end

script "js_eval_sp_recommendations", type: "javascript" do
  parameters "ds_sp_recommendations", "param_scope"
  result "result"
  code <<-EOS
    if( param_scope == "Shared"){
      var shared_sp_recs = []           //array of SP Recommendations excluding Subscription data
      _.each(ds_sp_recommendations, function(rec){
        var sp_rec = _.omit(rec, ["id", "subscriptionId", "subscriptionName"])
        sp_rec["id"] = sp_rec.name
        sp_rec["subscriptionId"] = "N/A"
        sp_rec["subscriptionName"] = "All"
        shared_sp_recs.push( sp_rec )
      })
      console.log(shared_sp_recs)
      var unique_shared_sp_recs = _.uniq( shared_sp_recs, function(shared_rec){ return shared_rec.name })
      console.log(unique_shared_sp_recs)
      result = unique_shared_sp_recs
    } else {
      result = ds_sp_recommendations
    }
  EOS
end

###############################################################################
# Policy
###############################################################################

policy "azure_sp_recommendations" do
  validate_each $ds_sp_recommendations_data do
    summary_template "{{ rs_project_name }} (Account ID: {{ rs_project_id }}): {{ len data }} Azure Savings Plan Purchase Recommendations"
    hash_include 'savingsAmount'
    escalate $email
    check lt(to_n(val(item,"savingsAmount")),$param_savings_threshold)
    export do
      resource_level false
      field "name" do
        label "Reservation Recommendation Name"
      end
      field "accountID" do
        label "Subscription ID"
        path "subscriptionId"
      end
      field "accountName" do
        label "Subscription Name"
        path "subscriptionName"
      end
      field "scope" do
        label "Scope"
      end
      field "term" do
        label "Term"
      end
      field "savings" do
        label "Savings Amount (Over Lookback Period)"
        path "savingsAmount"
      end
      field "savingsPercentage" do
        label "Savings Percentage (%)"
      end
      field "overageCost" do
        label "Overage Cost (Over Lookback Period)"
      end
      field "totalCost" do
        label "Total Cost (Over Lookback Period)"
      end
      field "wastageCost" do
        label "Wastage Amount (Over Lookback Period)"
      end
      field "costWithoutBenefit" do
        label "Cost Without Benefit (Over Lookback Period)"
      end
      field "totalHours" do
        label "Total Hours (Over Lookback Period)"
      end
      field "coveragePercentage" do
        label "Coverage Percentage"
      end
      field "commitmentAmount" do
        label "Commitment Amount"
      end
      field "commitmentGranularity" do
        label "Commitment Granularity"
      end
      field "lookBackPeriod" do
        label "Lookback Period"
      end
      field "id" do
        label "Reservation Recommendation ID"
      end
    end
  end
end

###############################################################################
# Escalation
###############################################################################

escalation "email" do
  automatic true
  label "Send Email"
  description "Sends incident email"
  email $param_email
end

name "Azure Savings Plan Recommendations"
rs_pt_ver 20180301
type "policy"
short_description "A policy that sends email notifications when Azure Savings Plan Recommendations are identified. NOTE: These Savings Plan Purchase Recommendations are generated by Microsoft Azure. See the [README](https://github.com/flexera-public/policy_templates/tree/master/cost/azure/savings_plan/recommendations) and [docs.flexera.com/flexera/EN/Automation](https://docs.flexera.com/flexera/EN/Automation/AutomationGS.htm) to learn more."
long_description ""
severity "medium"
category "Cost"
default_frequency "weekly"
info(
  version: "3.0.0",
  provider: "Azure",
  service: "Compute",
  policy_set: "Savings Plans",
  recommendation_type: "Rate Reduction"
)

###############################################################################
# Parameters
###############################################################################

parameter "param_email" do
  type "list"
  category "Policy Settings"
  label "Email Addresses"
  description "A list of email addresses to notify."
  default []
end

parameter "param_azure_endpoint" do
  type "string"
  category "Policy Settings"
  label "Azure Endpoint"
  description "Select the API endpoint to use for Azure. Use default value of management.azure.com unless using Azure China."
  allowed_values "management.azure.com", "management.chinacloudapi.cn"
  default "management.azure.com"
end

parameter "param_min_savings" do
  type "number"
  category "Policy Settings"
  label "Minimum Savings Threshold"
  description "Minimum potential savings required to generate a recommendation."
  min_value 0
  default 0
end

parameter "param_subscriptions_allow_or_deny" do
  type "string"
  category "Filters"
  label "Allow/Deny Subscriptions"
  description "Allow or Deny entered Subscriptions."
  allowed_values "Allow", "Deny"
  default "Allow"
end

parameter "param_subscriptions_list" do
  type "list"
  category "Filters"
  label "Allow/Deny Subscriptions List"
  description "A list of allowed or denied Subscription IDs/names. Leave blank to check all Subscriptions."
  default []
end

parameter "param_days" do
  type "string"
  category "Savings Plan Settings"
  label "Look Back Period"
  description "Number of days of prior usage to analyze."
  allowed_values "Last 7 Days", "Last 30 Days", "Last 60 Days"
  default "Last 30 Days"
end

parameter "param_term" do
  type "string"
  category "Savings Plan Settings"
  label "Savings Plan Term"
  description "Length of savings plan term to provide recommendations for."
  allowed_values "1 Year", "3 Year"
  default "1 Year"
end

parameter "param_scope" do
  type "string"
  category "Savings Plan Settings"
  label "Savings Plan Scope"
  description "The scope to provide recommendations for. Select 'Shared' to not have recommendations scoped to individual Subscriptions or Resource Groups."
  allowed_values "Subscription", "Resource Group", "Shared"
  default "Subscription"
end

###############################################################################
# Authentication
###############################################################################

credentials "auth_azure" do
  schemes "oauth2"
  label "Azure"
  description "Select the Azure Resource Manager Credential from the list."
  tags "provider=azure_rm"
end

credentials "auth_flexera" do
  schemes "oauth2"
  label "Flexera"
  description "Select Flexera One OAuth2 credentials"
  tags "provider=flexera"
end

###############################################################################
# Pagination
###############################################################################

pagination "pagination_azure" do
  get_page_marker do
    body_path "nextLink"
  end
  set_page_marker do
    uri true
  end
end

###############################################################################
# Datasources & Scripts
###############################################################################

# Get applied policy metadata for use later
datasource "ds_applied_policy" do
  request do
    auth $auth_flexera
    host rs_governance_host
    path join(["/api/governance/projects/", rs_project_id, "/applied_policies/", policy_id])
    header "Api-Version", "1.0"
  end
end

# Gather local currency info
datasource "ds_currency_reference" do
  request do
    host "raw.githubusercontent.com"
    path "/flexera-public/policy_templates/master/data/currency/currency_reference.json"
    header "User-Agent", "RS Policies"
  end
end

datasource "ds_currency_code" do
  request do
    auth $auth_flexera
    host rs_optima_host
    path join(["/bill-analysis/orgs/", rs_org_id, "/settings/currency_code"])
    header "Api-Version", "0.1"
    header "User-Agent", "RS Policies"
    ignore_status [403]
  end
  result do
    encoding "json"
    field "id", jmes_path(response, "id")
    field "value", jmes_path(response, "value")
  end
end

datasource "ds_currency_target" do
  run_script $js_currency_target, $ds_currency_reference, $ds_currency_code
end

script "js_currency_target", type:"javascript" do
  parameters "ds_currency_reference", "ds_currency_code"
  result "result"
  code <<-EOS
  // Default to USD if currency is not found
  result = ds_currency_reference['USD']

  if (ds_currency_code['value'] != undefined && ds_currency_reference[ds_currency_code['value']] != undefined) {
    result = ds_currency_reference[ds_currency_code['value']]
  }
EOS
end

datasource "ds_azure_subscriptions" do
  request do
    auth $auth_azure
    pagination $pagination_azure
    host $param_azure_endpoint
    path "/subscriptions/"
    query "api-version", "2020-01-01"
    header "User-Agent", "RS Policies"
    # Header X-Meta-Flexera has no affect on datasource query, but is required for Meta Policies
    # Forces `ds_is_deleted` datasource to run first during policy execution
    header "Meta-Flexera", val($ds_is_deleted, "path")
    # Ignore status 400, 403, and 404 which can be returned in certain (legacy) types of Azure Subscriptions
    ignore_status [400, 403, 404]
  end
  result do
    encoding "json"
    collect jmes_path(response, "value[*]") do
      field "id", jmes_path(col_item, "subscriptionId")
      field "name", jmes_path(col_item, "displayName")
      field "state", jmes_path(col_item, "state")
    end
  end
end

datasource "ds_azure_subscriptions_filtered" do
  run_script $js_azure_subscriptions_filtered, $ds_azure_subscriptions, $param_subscriptions_allow_or_deny, $param_subscriptions_list
end

script "js_azure_subscriptions_filtered", type: "javascript" do
  parameters "ds_azure_subscriptions", "param_subscriptions_allow_or_deny", "param_subscriptions_list"
  result "result"
  code <<-EOS
  if (param_subscriptions_list.length > 0) {
    result = _.filter(ds_azure_subscriptions, function(subscription) {
      include_subscription = _.contains(param_subscriptions_list, subscription['id']) || _.contains(param_subscriptions_list, subscription['name'])

      if (param_subscriptions_allow_or_deny == "Deny") {
        include_subscription = !include_subscription
      }

      return include_subscription
    })
  } else {
    result = ds_azure_subscriptions
  }
EOS
end

# Only request the resource groups in each subscription if we're doing "Resource Group" scope
datasource "ds_azure_resource_groups_requests" do
  run_script $js_azure_resource_groups_requests, $ds_azure_subscriptions_filtered, $param_scope
end

script "js_azure_resource_groups_requests", type: "javascript" do
  parameters "ds_azure_subscriptions_filtered", "param_scope"
  result "result"
  code <<-EOS
  result = []
  if (param_scope == "Resource Group") { result = ds_azure_subscriptions_filtered }
EOS
end

datasource "ds_azure_resource_groups" do
  iterate $ds_azure_resource_groups_requests
  request do
    auth $auth_azure
    pagination $pagination_azure
    host $param_azure_endpoint
    path join(["/subscriptions/", val(iter_item, "id"), "/resourcegroups"])
    query "api-version", "2021-04-01"
    header "User-Agent", "RS Policies"
    ignore_status [400, 403, 404]
  end
  result do
    encoding "json"
    collect jmes_path(response, "value[*]") do
      field "resourceGroup", jmes_path(col_item, "name")
      field "id", val(iter_item, "id")
      field "name", val(iter_item, "name")
    end
  end
end

# Ensure that we're only doing the required API requests for the scope that has been selected
datasource "ds_sp_recommendation_requests" do
  run_script $js_sp_recommendation_requests, $ds_azure_subscriptions_filtered, $ds_azure_resource_groups, $param_scope
end

script "js_sp_recommendation_requests", type: "javascript" do
  parameters "ds_azure_subscriptions_filtered", "ds_azure_resource_groups", "param_scope"
  result "result"
  code <<-EOS
  result = ds_azure_subscriptions_filtered.slice(0, 1)
  if (param_scope == "Subscription") { result = ds_azure_subscriptions_filtered }
  if (param_scope == "Resource Group") { result = ds_azure_resource_groups }
EOS
end

datasource "ds_sp_recommendations" do
  iterate $ds_sp_recommendation_requests
  request do
    run_script $js_sp_recommendations, iter_item, $param_days, $param_scope, $param_term, $param_azure_endpoint
  end
  result do
    encoding "json"
    collect jmes_path(response, "value[*]") do
      field "id", jmes_path(col_item, "id")
      field "name", jmes_path(col_item, "name")
      field "kind", jmes_path(col_item, "kind")
      field "totalHours", jmes_path(col_item, "properties.totalHours")
      field "lookbackPeriod", jmes_path(col_item, "properties.lookBackPeriod")
      field "armSkuName", jmes_path(col_item, "properties.armSkuName")
      field "term", jmes_path(col_item, "properties.term")
      field "scope", jmes_path(col_item, "properties.scope")
      field "currency", jmes_path(col_item, "properties.currencyCode")
      field "commitmentGranularity", jmes_path(col_item, "properties.commitmentGranularity")
      field "costWithoutBenefit", jmes_path(col_item, "properties.costWithoutBenefit")
      field "averageUtilizationPercentage", jmes_path(col_item, "properties.recommendationDetails.averageUtilizationPercentage")
      field "coveragePercentage", jmes_path(col_item, "properties.recommendationDetails.coveragePercentage")
      field "commitmentAmount", jmes_path(col_item, "properties.recommendationDetails.commitmentAmount")
      field "overageCost", jmes_path(col_item, "properties.recommendationDetails.overageCost")
      field "benefitCost", jmes_path(col_item, "properties.recommendationDetails.benefitCost")
      field "savingsAmount", jmes_path(col_item, "properties.recommendationDetails.savingsAmount")
      field "savingsPercentage", jmes_path(col_item, "properties.recommendationDetails.savingsPercentage")
      field "totalCost", jmes_path(col_item, "properties.recommendationDetails.totalCost")
      field "wastageCost", jmes_path(col_item, "properties.recommendationDetails.wastageCost")
      field "resourceGroup", val(iter_item, "resourceGroup")
      field "subscriptionId", val(iter_item, "id")
      field "subscriptionName", val(iter_item, "name")
    end
  end
end

script "js_sp_recommendations", type: "javascript" do
  parameters "account", "param_days", "param_scope", "param_term", "param_azure_endpoint"
  result "request"
  code <<-EOS
  term_table = { "1 Year": "P1Y", "3 Year": "P3Y" }

  filter = [
    "properties/scope eq '", param_scope, "' ",
    "and properties/term eq '", term_table[param_term], "' ",
    "and properties/lookBackPeriod eq '", param_days.replace(' ', '').replace(' ', ''), "'"
  ].join('')

  path_prefix = "/subscriptions/" + account['id']
  if (param_scope == "Resource Group") { path_prefix += "/resourceGroups/" + account['resourceGroup'] }

  var request = {
    auth: "auth_azure",
    pagination: "pagination_azure",
    host: param_azure_endpoint,
    // Ignore status 400, 403, and 404 which can be returned in certain (legacy) types of Azure Subscriptions
    ignore_status: [400, 403, 404, 422],
    path: path_prefix + "/providers/Microsoft.CostManagement/benefitRecommendations",
    query_params: { "api-version": "2023-08-01", "$filter": filter },
    headers: { "User-Agent": "RS Policies" }
  }
EOS
end

# Branching logic:
# This datasource returns an empty array if the target currency is USD.
# This prevents ds_currency_conversion from running if it's not needed.
datasource "ds_conditional_currency_conversion" do
  run_script $js_conditional_currency_conversion, $ds_currency_target, $ds_sp_recommendations
end

script "js_conditional_currency_conversion", type: "javascript" do
  parameters "ds_currency_target", "ds_sp_recommendations"
  result "result"
  code <<-EOS
  result = []
  from_currency = "USD"

  if (ds_sp_recommendations.length > 0) {
    from_currency = ds_sp_recommendations[0]["currency"]
  }

  // Make the request only if the target currency is not the same
  if (ds_currency_target['code'] != from_currency) {
    result = [{ from: from_currency }]
  }
EOS
end

datasource "ds_currency_conversion" do
  # Only make a request if the target currency is not USD
  iterate $ds_conditional_currency_conversion
  request do
    host "api.xe-auth.flexeraeng.com"
    path "/prod/{proxy+}"
    query "from", val(iter_item, 'from')
    query "to", val($ds_currency_target, 'code')
    query "amount", "1"
    # Ignore currency conversion if API has issues
    ignore_status [400, 404, 502]
  end
  result do
    encoding "json"
    field "from", jmes_path(response, "from")
    field "to", jmes_path(response, "to")
    field "amount", jmes_path(response, "amount")
    field "year", jmes_path(response, "year")
  end
end

datasource "ds_currency" do
  run_script $js_currency, $ds_currency_target, $ds_currency_conversion
end

script "js_currency", type:"javascript" do
  parameters "ds_currency_target", "ds_currency_conversion"
  result "result"
  code <<-EOS
  result = ds_currency_target
  result['exchange_rate'] = 1

  if (ds_currency_conversion.length > 0) {
    currency_code = ds_currency_target['code']
    current_month = parseInt(new Date().toISOString().split('-')[1])

    conversion_block = _.find(ds_currency_conversion[0]['to'][currency_code], function(item) {
      return item['month'] == current_month
    })

    if (conversion_block != undefined) {
      result['exchange_rate'] = conversion_block['monthlyAverage']
    }
  }
EOS
end

datasource "ds_sp_incident" do
  run_script $js_sp_incident, $ds_sp_recommendations, $ds_currency, $ds_currency_conversion, $ds_conditional_currency_conversion, $ds_applied_policy, $param_term, $param_days, $param_scope, $param_min_savings
end

script "js_sp_incident", type: "javascript" do
  parameters "ds_sp_recommendations", "ds_currency", "ds_currency_conversion", "ds_conditional_currency_conversion", "ds_applied_policy", "param_term", "param_days", "param_scope", "param_min_savings"
  result "result"
  code <<-'EOS'
  // Used for formatting numbers to look pretty
  function formatNumber(number, separator){
    numString = number.toString()
    values = numString.split(".")
    formatted_number = ''

    while (values[0].length > 3) {
      var chunk = values[0].substr(-3)
      values[0] = values[0].substr(0, values[0].length - 3)
      formatted_number = separator + chunk + formatted_number
    }

    if (values[0].length > 0) { formatted_number = values[0] + formatted_number }
    if (values[1] == undefined) { return formatted_number }

    return formatted_number + "." + values[1]
  }

  result = []
  total_savings = 0.0

  exchange_rate = ds_currency['exchange_rate']

  _.each(ds_sp_recommendations, function(recommendation) {
    if (recommendation["savingsAmount"] * exchange_rate >= param_min_savings) {
      total_savings += recommendation["savingsAmount"] * exchange_rate

      savingsAmount = Math.round(recommendation["savingsAmount"] * exchange_rate * 100) / 100
      costWithoutBenefit = Math.round(recommendation["costWithoutBenefit"] * exchange_rate * 100) / 100
      totalCost = Math.round(recommendation["totalCost"] * exchange_rate * 100) / 100

      overageCost = Math.round(recommendation["overageCost"] * 100) / 100
      benefitCost = Math.round(recommendation["benefitCost"] * 100) / 100
      wastageCost = Math.round(recommendation["wastageCost"] * 100) / 100

      id = recommendation['id']
      accountID = recommendation['subscriptionId']
      accountName = recommendation['subscriptionName']
      resourceGroup = recommendation['resourceGroup']

      if (param_scope == "Shared") {
        id = recommendation['name']
        accountID = ""
        accountName = "All"
        resourceGroup = ""
      }

      result.push({
        name: recommendation['name'],
        kind: recommendation['kind'],
        resourceType: recommendation['armSkuName'].replace('_', ' ').replace('_', ' '),
        totalHours: recommendation['totalHours'],
        commitmentGranularity: recommendation['commitmentGranularity'],
        averageUtilizationPercentage: recommendation['averageUtilizationPercentage'],
        coveragePercentage: recommendation['coveragePercentage'],
        recommendedQuantity: recommendation['commitmentAmount'],
        savingsPercentage: recommendation['savingsPercentage'],
        accountID: accountID,
        accountName: accountName,
        resourceGroup: resourceGroup,
        id: id,
        lookbackPeriod: param_days,
        term: param_term,
        scope: param_scope,
        costWithoutBenefit: costWithoutBenefit,
        overageCost: overageCost,
        benefitCost: benefitCost,
        totalCost: totalCost,
        wastageCost: wastageCost,
        savings: savingsAmount,
        savingsCurrency: ds_currency['symbol'],
        policy_name: ds_applied_policy['name'],
        total_savings: "",
        message: "",
        service: "Microsoft.Compute"
      })
    }
  })

  // Messaging for currency conversion
  currency = ds_currency['code']

  if (ds_conditional_currency_conversion[0] != undefined) {
    currency = ds_conditional_currency_conversion[0]['from']
  }

  conversion_message = ""

  if (ds_currency['code'] != currency && ds_currency_conversion.length > 0 && exchange_rate != 1) {
    conversion_message = [
      "Savings values were converted from ", currency,
      " to ", ds_currency['code'],
      " using an exchange rate of ", exchange_rate, ".\n\n"
    ].join('')
  }

  if (ds_currency['code'] != currency && ds_currency_conversion.length == 0) {
    conversion_message = "Savings values are in ", currency, " due to a malfunction with Flexera's internal currency conversion API. Please contact Flexera support to report this issue."
  }

  message = [
    "The following settings were used when generating recommendations:\n",
    "- Scope: ", param_scope, "\n",
    "- Term: ", param_term, "\n",
    "- Look Back Period: ", param_days, "\n",
    "- Minimum Savings Threshold: ", param_min_savings, "\n\n"
  ].join('')

  disclaimer = "The above settings can be modified by editing the applied policy and changing the appropriate parameters.\n\n"
  empty_fields = "Empty fields indicate information that is not applicable to that particular recommendation."

  savings_message = [
    ds_currency['symbol'], ' ',
    formatNumber(parseFloat(total_savings).toFixed(2), ds_currency['t_separator'])
  ].join('')

  // Sort by highest savings first
  result = _.sortBy(result, function(item) { return item['savings'] * -1 })

  if (result.length > 0) {
    result[0]['total_savings'] = savings_message
    result[0]['message'] = conversion_message + message + disclaimer + empty_fields
  }
EOS
end

###############################################################################
# Policy
###############################################################################

policy "pol_azure_sp_recommendations" do
  validate_each $ds_sp_incident do
    summary_template "{{ with index data 0 }}{{ .policy_name }}{{ end }}: {{ len data }} Azure Savings Plan Purchase Recommendations"
    detail_template <<-'EOS'
    **Potential Monthly Savings:** {{ with index data 0 }}{{ .total_savings }}{{ end }}

    {{ with index data 0 }}{{ .message }}{{ end }}
    EOS
    check logic_or($ds_parent_policy_terminated, lt(val(item, "savings"), 0))
    escalate $esc_email
    export do
      resource_level false
      field "accountID" do
        label "Subscription ID"
      end
      field "accountName" do
        label "Subscription Name"
      end
      field "resourceGroup" do
        label "Resource Group"
      end
      field "name" do
        label "Recommendation Name"
      end
      field "resourceType" do
        label "Recommendation Type"
      end
      field "term" do
        label "Term"
      end
      field "recommendedQuantity" do
        label "Recommended Quantity to Purchase"
      end
      field "savingsCurrency" do
        label "Currency"
      end
      field "costWithoutBenefit" do
        label "Current Monthly Cost"
      end
      field "totalCost" do
        label "New Monthly Cost with Savings Plan"
      end
      field "savings" do
        label "Estimated Monthly Savings"
      end
      field "savingsPercentage" do
        label "Savings Percentage (%)"
      end
      field "totalHours" do
        label "Total Hours"
      end
      field "benefitCost" do
        label "Benefit Cost (Hours)"
      end
      field "wastageCost" do
        label "Wastage Cost (Hours)"
      end
      field "overageCost" do
        label "Overage Cost (Hours)"
      end
      field "coveragePercentage" do
        label "Coverage Percentage"
      end
      field "commitmentGranularity" do
        label "Commitment Granularity"
      end
      field "scope" do
        label "Scope"
      end
      field "service" do
        label "Service"
      end
      field "id" do
        label "Recommendation ID"
      end
      field "lookbackPeriod" do
        label "Look Back Period"
      end
    end
  end
end

###############################################################################
# Escalations
###############################################################################

escalation "esc_email" do
  automatic true
  label "Send Email"
  description "Send incident email"
  email $param_email
end

###############################################################################
# Meta Policy [alpha]
# Not intended to be modified or used by policy developers
###############################################################################

# If the meta_parent_policy_id is not set it will evaluate to an empty string and we will look for the policy itself,
# if it is set we will look for the parent policy.
datasource "ds_get_policy" do
  request do
    auth $auth_flexera
    host rs_governance_host
    ignore_status [404]
    path join(["/api/governance/projects/", rs_project_id, "/applied_policies/", switch(ne(meta_parent_policy_id, ""), meta_parent_policy_id, policy_id) ])
    header "Api-Version", "1.0"
  end
  result do
    encoding "json"
    field "id", jmes_path(response, "id")
  end
end

datasource "ds_parent_policy_terminated" do
  run_script $js_decide_if_self_terminate, $ds_get_policy, policy_id, meta_parent_policy_id
end

# If the policy was applied by a meta_parent_policy we confirm it exists if it doesn't we confirm we are deleting
# This information is used in two places:
# - determining whether or not we make a delete call
# - determining if we should create an incident (we don't want to create an incident on the run where we terminate)
script "js_decide_if_self_terminate", type: "javascript" do
  parameters "found", "self_policy_id", "meta_parent_policy_id"
  result "result"
  code <<-EOS
  var result
  if (meta_parent_policy_id != "" && found.id == undefined) {
    result = true
  } else {
    result = false
  }
  EOS
end

# Two potentials ways to set this up:
# - this way and make a unneeded 'get' request when not deleting
# - make the delete request an interate and have it iterate over an empty array when not deleting and an array with one item when deleting
script "js_make_terminate_request", type: "javascript" do
  parameters "should_delete", "policy_id", "rs_project_id", "rs_governance_host"
  result "request"
  code <<-EOS

  var request = {
    auth:  'auth_flexera',
    host: rs_governance_host,
    path: "/api/governance/projects/" + rs_project_id + "/applied_policies/" + policy_id,
    headers: {
      "API-Version": "1.0",
      "Content-Type":"application/json"
    },
  }

  if (should_delete) {
    request.verb = 'DELETE'
  }
  EOS
end

datasource "ds_terminate_self" do
  request do
    run_script $js_make_terminate_request, $ds_parent_policy_terminated, policy_id, rs_project_id, rs_governance_host
  end
end

datasource "ds_is_deleted" do
  run_script $js_check_deleted, $ds_terminate_self
end

# This is just a way to have the check delete request connect to the farthest leaf from policy.
# We want the delete check to the first thing the policy does to avoid the policy erroring before it can decide whether or not it needs to self terminate
# Example a customer deletes a credential and then terminates the parent policy. We still want the children to self terminate
# The only way I could see this not happening is if the user who applied the parent_meta_policy was offboarded or lost policy access, the policies who are impersonating the user
# would not have access to self-terminate
# It may be useful for the backend to enable a mass terminate at some point for all meta_child_policies associated with an id.
script "js_check_deleted", type: "javascript" do
  parameters "response"
  result "result"
  code <<-EOS
  result = {"path":"/"}
  EOS
end

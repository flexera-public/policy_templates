name "Azure Expiring Savings Plans"
rs_pt_ver 20180301
type "policy"
short_description "Reports on Azure Savings Plans that have or will soon expire. See the [README](https://github.com/flexera/policy_templates/tree/master/cost/azure/savings_plan/expiration) and [docs.flexera.com/flexera/EN/Automation](https://docs.flexera.com/flexera/EN/Automation/AutomationGS.htm) to learn more."
long_description ""
category "Cost"
severity "medium"
default_frequency "daily"
info(
  version: "0.1.0",
  provider: "Azure",
  service: "Compute",
  policy_set: "Savings Plan"
)

###############################################################################
# Parameters
###############################################################################

parameter "param_email" do
  type "list"
  category "Policy Settings"
  label "Email Addresses"
  description "A list of email addresses to notify."
  default []
end

parameter "param_azure_endpoint" do
  type "string"
  category "Policy Settings"
  label "Azure Endpoint"
  description "Select the API endpoint to use for Azure. Use default value of management.azure.com unless using Azure China."
  allowed_values "management.azure.com", "management.chinacloudapi.cn"
  default "management.azure.com"
end

parameter "param_days_expiration" do
  type "number"
  category "Policy Settings"
  label "Days Until Expiration"
  description "The number of days until expiration to include a Savings Plan in the report. Set to '0' to only report expired Savings Plans."
  min_value 0
  default 15
end

###############################################################################
# Authentication
###############################################################################

credentials "auth_azure" do
  schemes "oauth2"
  label "Azure"
  description "Select the Azure Resource Manager Credential from the list."
  tags "provider=azure_rm"
end

credentials "auth_flexera" do
  schemes "oauth2"
  label "Flexera"
  description "Select Flexera One OAuth2 credentials"
  tags "provider=flexera"
end

###############################################################################
# Pagination
###############################################################################

pagination "pagination_azure" do
  get_page_marker do
    body_path "nextLink"
  end
  set_page_marker do
    uri true
  end
end

###############################################################################
# Datasources & Scripts
###############################################################################

# Get applied policy metadata for use later
datasource "ds_applied_policy" do
  request do
    auth $auth_flexera
    host rs_governance_host
    path join(["/api/governance/projects/", rs_project_id, "/applied_policies/", policy_id])
    header "Api-Version", "1.0"
  end
end

datasource "ds_azure_savings_plans" do
  request do
    auth $auth_azure
    pagination $pagination_azure
    host $param_azure_endpoint
    path "/providers/Microsoft.BillingBenefits/savingsPlans"
    query "api-version", "2022-11-01"
    header "User-Agent", "RS Policies"
  end
  result do
    encoding "json"
    collect jmes_path(response, "value[*]") do
      field "id", jmes_path(col_item, "id")
      field "name", jmes_path(col_item, "name")
      field "type", jmes_path(col_item, "type")
      field "sku", jmes_path(col_item, "sku.name")
      field "appliedScopeProperties", jmes_path(col_item, "properties.appliedScopeProperties")
      field "appliedScopeType", jmes_path(col_item, "properties.appliedScopeType")
      field "billingScopeId", jmes_path(col_item, "properties.billingScopeId")
      field "billingProfileId", jmes_path(col_item, "properties.billingProfileId")
      field "billingAccountId", jmes_path(col_item, "properties.billingAccountId")
      field "commitment", jmes_path(col_item, "properties.commitment")
      field "displayName", jmes_path(col_item, "properties.displayName")
      field "displayProvisioningState", jmes_path(col_item, "properties.displayProvisioningState")
      field "provisioningState", jmes_path(col_item, "properties.provisioningState")
      field "renew", jmes_path(col_item, "properties.renew")
      field "term", jmes_path(col_item, "properties.term")
      field "userFriendlyAppliedScopeType", jmes_path(col_item, "properties.userFriendlyAppliedScopeType")
      field "expiryDateTime", jmes_path(col_item, "properties.expiryDateTime")
      field "purchaseDateTime", jmes_path(col_item, "properties.purchaseDateTime")
      field "effectiveDateTime", jmes_path(col_item, "properties.effectiveDateTime")
      field "utilization", jmes_path(col_item, "properties.utilization")
    end
  end
end

datasource "ds_azure_expiring_savings_plans" do
  run_script $js_azure_expiring_savings_plans, $ds_azure_savings_plans, $ds_applied_policy, $param_days_expiration
end

script "js_azure_expiring_savings_plans", type: "javascript" do
  parameters "ds_azure_savings_plans", "ds_applied_policy", "param_days_expiration"
  result "result"
  code <<-'EOS'
  result = []
  today = new Date()

  _.each(ds_azure_savings_plans, function(sp) {
    expirationDate = new Date(sp['expiryDateTime'])
    daysUntilExpiration = Math.round((expirationDate - today) / 1000 / 60 / 60 / 24)
    if (daysUntilExpiration < 0) { daysUntilExpiration = 0 }

    if (daysUntilExpiration <= param_days_expiration) {
      result.push({
        id: sp['id'],
        name: sp['name'],
        sku: sp['sku'],
        term: sp['term'],
        expirationDate: expirationDate.toISOString(),
        daysUntilExpiration: daysUntilExpiration,
        lookbackPeriod: param_days_expiration,
        policyName: ds_applied_policy['name'],
        message: ""
      })
    }
  })

  if (result.length > 0) {
    sp_total = ds_azure_savings_plans.length
    expiring_sp_total = result.length
    expiring_sp_percentage = (expiring_sp_total / sp_total * 100).toFixed(2) + '%'

    noun = "Savings Plans"
    if (sp_total == 1) { noun = "Savings Plan" }

    verb = "are"
    if (expiring_sp_total == 1) { verb = "is" }

    day = "days"
    if (param_days_expiration == 1) { day = "day" }

    findings = [
      "Out of ", sp_total, " Azure ", noun, " analyzed, ",
      expiring_sp_total, " (", expiring_sp_percentage,
      ") ", verb, " going to expire within ",
      param_days_expiration, " ", day, ".\n\n"
    ].join('')

    disclaimer = "The above settings can be modified by editing the applied policy and changing the appropriate parameters."

    result[0]['message'] = findings + disclaimer
  }
EOS
end

###############################################################################
# Policy
###############################################################################

policy "pol_azure_expiring_savings_plans" do
  validate_each $ds_azure_expiring_savings_plans do
    summary_template "{{ with index data 0 }}{{ .policyName }}{{ end }}: {{ len data }} Azure Expiring Savings Plans Found"
    detail_template "{{ with index data 0 }}{{ .message }}{{ end }}"
    check eq(val(item, "id"), "")
    escalate $esc_email
    hash_exclude "daysUntilExpiration", "message"
    export do
      resource_level false
      field "id" do
        label "ID"
      end
      field "name" do
        label "Name"
      end
      field "sku" do
        label "SKU"
      end
      field "term" do
        label "Term"
      end
      field "daysUntilExpiration" do
        label "Days Until Expiration"
      end
      field "expirationDate" do
        label "Expiration Date"
      end
    end
  end
end

###############################################################################
# Escalations
###############################################################################

escalation "esc_email" do
  automatic true
  label "Send Email"
  description "Send incident email"
  email $param_email
end

name "Azure Savings Plan Utilization"
rs_pt_ver 20180301
type "policy"
short_description "A policy that sends email notifications when Azure Savings Plan Utilizations are identified. NOTE: These Utilizations are generated by Azure. See the [README](https://github.com/flexera-public/policy_templates/tree/master/cost/azure/savings_plan/utilization) and [docs.flexera.com/flexera/EN/Automation](https://docs.flexera.com/flexera/EN/Automation/AutomationGS.htm) to learn more."
long_description ""
severity "medium"
category "Cost"
default_frequency "monthly"
info(
  version: "0.1.9",
  provider: "Azure",
  service: "Billing Benefits",
  policy_set: "Savings Plan Utilization"
)

###############################################################################
# Parameters
###############################################################################

parameter "param_lookback_days" do
  category "Savings Plan"
  label "Savings Plan Utilization Threshold"
  description "Specify the minimum Savings Plan Utilization threshold as a percentage that should result in an alert"
  default 30
  type "number"
  allowed_values 1, 7, 30 # Allowed values as per Azure API
end

parameter "param_utilization_threshold" do
  category "Savings Plan"
  label "Savings Plan Utilization Threshold"
  description "The minimum Savings Plan Utilization threshold as a percentage that should be included in the incident. 0 value results in all Savings Plan Utilizations should be included in the incident."
  default 0
  min_value 0
  max_value 100
  type "number"
end

parameter "param_email" do
  type "list"
  label "Email addresses to notify"
  description "Email addresses of the recipients you wish to notify"
  default []
end

parameter "param_azure_endpoint" do
  type "string"
  label "Azure Endpoint"
  allowed_values "management.azure.com", "management.chinacloudapi.cn"
  default "management.azure.com"
end

parameter "param_subscription_allowed_list" do
  label "Subscription Allowed List"
  type "list"
  description "Allowed Subscriptions, if empty, all subscriptions will be checked"
  default []
end


###############################################################################
# Authentication
###############################################################################

#AUTHENTICATE WITH FLEXERA/OPTIMA
credentials "auth_flexera" do
  schemes "oauth2"
  label "flexera"
  description "Select Flexera One OAuth2 credentials"
  tags "provider=flexera"
end

#AUTHNETICATE WITH AZURE
credentials "auth_azure" do
  schemes "oauth2"
  label "Azure"
  description "Select the Azure Resource Manager Credential from the list."
  tags "provider=azure_rm"
end

###############################################################################
# Pagination
###############################################################################

pagination "azure_pagination" do
  get_page_marker do
    body_path "nextLink"
  end
  set_page_marker do
    uri true
  end
end

###############################################################################
# Datasources and Scripts
###############################################################################

#GET LIST OF SUBSCRIPTIONS
datasource "ds_subscriptions" do
  request do
    auth $auth_azure
    pagination $azure_pagination
    host $param_azure_endpoint
    path "/subscriptions/"
    query "api-version", "2020-01-01"
    header "User-Agent", "RS Policies"
  end
  result do
    encoding "json"
    collect jmes_path(response, "value[*]") do
      field "subscriptionId", jmes_path(col_item,"subscriptionId")
      field "subscriptionName", jmes_path(col_item,"displayName")
    end
  end
end

#FILTER SUBSCRIPTIONS BASED ON USER-DEFINED PARAMETER
datasource "ds_filtered_subscriptions" do
  run_script $js_filtered_subscriptions, $ds_subscriptions, $param_subscription_allowed_list
end

script "js_filtered_subscriptions", type: "javascript" do
  parameters "ds_subscriptions", "param_subscription_allowed_list"
  result "results"
  code <<-EOS
    var results = []
    if ( param_subscription_allowed_list.length != 0){
      results = []
      _.each(param_subscription_allowed_list, function(sub){
        var found = _.find(ds_subscriptions, function(item){
          return item.subscriptionId == sub || item.subscriptionName.toLowerCase() == sub.toLowerCase();
        })
        results.push(found)
      })
    } else {
      results = ds_subscriptions
    }
  EOS
end

#GET SAVINGS PLANS FOR EACH SUBSCRIPTION
# https://learn.microsoft.com/en-us/rest/api/billingbenefits/savings-plan/list-all
datasource "ds_savingsplans" do
  iterate $ds_filtered_subscriptions
  request do
    auth $auth_azure
    pagination $azure_pagination
    host $param_azure_endpoint
    path join(["/providers/Microsoft.BillingBenefits/savingsPlans"])
    query "api-version", "2022-11-01"
    header "User-Agent", "RS Policies"
    query "$filter", join(["properties/archived eq false"])
    # Ignore status 400, 403, and 404 which can be returned in certain (legacy) types of Azure Subscriptions
    # Ignore status 401 and 422 which can get returned when the user does not have access to the subscription
    # ignore_status [400, 401, 403, 404, 422]
  end
  result do
    collect jmes_path(response, "value[*]") do
      field "id", jmes_path(col_item, "id")
      field "name", jmes_path(col_item, "name")
      field "subscriptionId", val(iter_item, "subscriptionId")
      field "subscriptionName", val(iter_item, "subscriptionName")
      field "term", jmes_path(col_item, "properties.term")
      field "scope", jmes_path(col_item, "properties.appliedScopeType")
      field "commitmentGranularity", jmes_path(col_item, "properties.commitment.grain")
      field "commitmentCurrency", jmes_path(col_item, "properties.commitment.currencyCode")
      field "commitmentAmount", jmes_path(col_item, "properties.commitment.amount")
      field "utilization", jmes_path(col_item, "properties.utilization")
    end
  end
end

#FILTER SAVINGS PLANS BASED ON USER-DEFINED PARAMETER
datasource "ds_filtered_savingsplans" do
  run_script $js_filtered_savingsplans, $ds_savingsplans, $param_lookback_days, $param_utilization_threshold
end

script "js_filtered_savingsplans", type: "javascript" do
  parameters "ds_savingsplans", "param_lookback_days", "param_utilization_threshold"
  result "results"
  code <<-EOS
results = []
// Loop through each savings plan
_.each(ds_savingsplans, function(sp){
  // Check that we have utilization data
  if (sp.utilization) {
    if (sp.utilization.trend) {
      sp["trend"] = sp.utilization.trend
    }
    if (sp.utilization.aggregates.length > 0){
      // Add the trend and utilization values to the savings plan object
      // This makes it easier to path to in the export
      _.each(sp.utilization.aggregates, function(agg){
        sp["utilization_"+agg.grain+agg.grainUnit] = agg.value
      })
    }
    // unset the utilization object to save some memory
    sp["utilization"] = undefined
    // selected_utilization will be used for the policy incident check using the parameter value
    sp["selected_utilization"] = sp["utilization_"+param_lookback_days+"days"]
  }
  results.push(sp)
})
EOS
end

###############################################################################
# Policy
###############################################################################

policy "azure_sp_utilization" do
  validate_each $ds_filtered_savingsplans do
    summary_template "Azure Savings Plan Utilization Details for Account {{with(index data 0)}}{{.subscriptionName}} ({{.subscriptionId}}){{end}}"
    detail_template <<-EOS
# Azure Savings Plan Utilization
{{ range data }}
### {{ .id }}

**Utilization:**

- Last 1 Days: {{ .utilization_1days }}%
- Last 7 Days: {{ .utilization_7days }}%
- Last 30 Days: {{ .utilization_30days }}%
- Trend: {{ .trend }}

**Commitment:**

- Term: {{ .term }}
- Scope: {{ .scope }}
- Amount: {{ .commitmentAmount }}
- Currency: {{ .commitmentCurrency }}
- Granularity: {{ .commitmentGranularity }}
___
{{ end }}
###### Policy Applied in Account: {{ rs_project_name }} (Account ID: {{ rs_project_id }}) within Org: {{ rs_org_name }} (Org ID: {{ rs_org_id }})
EOS
    escalate $email
    check lt(to_n(val(item,"selected_utilization")),$param_utilization_threshold)
    export do
      resource_level false
      field "id" do
        label "ID"
      end
      field "name" do
        label "Name"
      end
      field "subscriptionId" do
        label "Subscription ID"
      end
      field "subscriptionName" do
        label "Subscription Name"
      end
      field "term" do
        label "Term"
      end
      field "scope" do
        label "Scope"
      end
      field "trend" do
        label "Trend"
      end
      field "utilization_1days" do
        label "Utilization % Last 1 Days"
      end
      field "utilization_7days" do
        label "Utilization % Last 7 Days"
      end
      field "utilization_30days" do
        label "Utilization % Last 30 Days"
      end
      field "commitmentAmount" do
        label "Commitment Amount"
      end
      field "commitmentCurrency" do
        label "Commitment Currency"
      end
      field "commitmentGranularity" do
        label "Commitment Granularity"
      end
    end
  end
end

###############################################################################
# Escalation
###############################################################################

escalation "email" do
  automatic true
  label "Send Email"
  description "Sends incident email"
  email $param_email
end

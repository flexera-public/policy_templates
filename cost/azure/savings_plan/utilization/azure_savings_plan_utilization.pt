name "Azure Savings Plan Utilization"
rs_pt_ver 20180301
type "policy"
short_description "A policy that sends email notifications when Azure Savings Plan Utilizations are identified. NOTE: These Utilizations are generated by Azure. See the [README](https://github.com/flexera-public/policy_templates/tree/master/cost/azure/savings_plan/utilization) and [docs.flexera.com/flexera/EN/Automation](https://docs.flexera.com/flexera/EN/Automation/AutomationGS.htm) to learn more."
long_description ""
severity "medium"
category "Cost"
default_frequency "monthly"
info(
  version: "0.2.0",
  provider: "Azure",
  service: "Billing Benefits",
  policy_set: "Savings Plan Utilization"
)

###############################################################################
# Parameters
###############################################################################

parameter "param_email" do
  type "list"
  category "Policy Settings"
  label "Email addresses to notify"
  description "Email addresses of the recipients you wish to notify"
  default []
end

parameter "param_azure_endpoint" do
  type "string"
  category "Policy Settings"
  label "Azure Endpoint"
  description "Azure Endpoint to access resources"
  allowed_values "management.azure.com", "management.chinacloudapi.cn"
  default "management.azure.com"
end

parameter "param_utilization_threshold" do
  type "number"
  category "Policy Settings"
  label "Maximum Savings Plan Utilization Threshold"
  description "Show Savings Plans with utilization below this value (%)"
  min_value 1
  max_value 100
  default 100
end

parameter "param_lookback_days" do
  type "number"
  category "Savings Plan Settings"
  label "Look Back Period"
  description "Number of days of prior Azure ReserSavings Plan usage to analyze."
  allowed_values 1, 7, 30 # Allowed values as per Azure API
  default 30
end

###############################################################################
# Authentication
###############################################################################

credentials "auth_azure" do
  schemes "oauth2"
  label "Azure"
  description "Select the Azure Resource Manager Credential from the list."
  tags "provider=azure_rm"
end

###############################################################################
# Pagination
###############################################################################

pagination "pagination_azure" do
  get_page_marker do
    body_path "nextLink"
  end
  set_page_marker do
    uri true
  end
end

###############################################################################
# Datasources & Scripts
###############################################################################

# GET CURRENCY REFERENCE AND CURRENCY CODE
datasource "ds_currency_reference" do
  request do
    host "raw.githubusercontent.com"
    path "/flexera-public/policy_templates/master/data/currency/currency_reference.json"
    header "User-Agent", "RS Policies"
  end
end

# GET LIST OF BILLING ACCOUNTS
datasource "ds_billing_accounts" do
  request do
    auth $auth_azure
    host $param_azure_endpoint
    path "/providers/Microsoft.Billing/billingAccounts"
    query "api-version", "2024-04-01"
  end
  result do
    encoding "json"
    collect jmes_path(response, "value") do
      field "id", jmes_path(col_item, "id")
      field "name", jmes_path(col_item, "name")
      field "agreementType", jmes_path(col_item, "properties.agreementType")
      field "currency", jmes_path(col_item, "enrollmentDetails.currency")
    end
  end
end

# GET LIST OF BILLING PROFILES (IF TYPE IS MICROSOFT CUSTOMER AGREEMENT)
datasource "ds_billing_profiles" do
  iterate $ds_billing_accounts
  request do
    auth $auth_azure
    host $param_azure_endpoint
    path join(["/providers/Microsoft.Billing/billingAccounts/", val(iter_item, "name"), "/billingProfiles" ])
    query "api-version", "2020-05-01"
    ignore_status [400]   # Required for policy to not error for EA Customers (as EA Customers do not have concept of billing profile)
  end
  result do
    encoding "json"
    collect jmes_path(response, "value") do
      field "billingAccountId", val(iter_item, "id")
      field "billingAccountName", val(iter_item, "name")
      field "agreementType", val(iter_item, "agreementType")
      field "billingAccountCurrency", val(iter_item, "currency")
      field "billingProfileId", jmes_path(col_item, "id")
      field "billingProfileName", jmes_path(col_item, "name")
      field "billingProfileCurrency", jmes_path(col_item, "properties.currency")
    end
  end
end

# IDENTIFY WHETHER ENTERPRISE AGREEMENT (EA) OR MICROSOFT CUSTOMER AGREEMENT (MCA)
datasource "ds_billing_details" do
  run_script $js_billing_details, $ds_billing_profiles, $ds_billing_accounts
end

script "js_billing_details", type: "javascript" do
  parameters "ds_billing_details", "ds_billing_accounts"
  result "result"
  code <<-EOS
    result = []

    _.each(ds_billing_accounts, function(acc) {
      if (acc.agreementType == "EnterpriseAgreement") {
        result.push({
          "billingAccountId": acc.id,
          "billingAccountName": acc.name,
          "billingProfileId": "N/A",
          "billingProfileName": "N/A",
          "agreementType": acc.agreementType,
          "currency": acc.currency
        })
      } else {
        var billing_profiles = _.filter(ds_billing_details, function(prof) { return acc.name == prof.billingAccountName })
        _.each(billing_profiles, function(prof) {
          result.push({
            "billingAccountId": prof.billingAccountId,
            "billingAccountName": prof.billingAccountName,
            "billingProfileId": prof.billingProfileId,
            "billingProfileName": prof.billingProfileName,
            "agreementType": prof.agreementType,
            "currency": prof.billingProfileCurrency
          })
        })
      }
    })
  EOS
end

# GET SAVINGS PLAN ORDER DETAILS
datasource "ds_savings_plan_details" do
  iterate $ds_billing_details
  request do
    run_script $js_savings_plan_details, iter_item, $param_azure_endpoint
  end
  result do
    encoding "json"
    collect jmes_path(response, "value[*]") do
      field "billingAccountId", val(iter_item, "billingAccountId")
      field "billingAccountName", val(iter_item, "billingAccountName")
      field "billingProfileId", val(iter_item, "billingProfileId")
      field "billingProfileName", val(iter_item, "billingProfileName")
      field "agreementType", val(iter_item, "agreementType")
      field "savingsPlanOrderId", jmes_path(col_item, "id")
      field "savingsPlanOrderName", jmes_path(col_item, "name")
    end  
  end
end

script "js_savings_plan_details", type: "javascript" do
  parameters "ds_billing_detail", "param_azure_endpoint"
  result "request"
  code <<-EOS

  // Define whether $filter query_param is required (only required if MCA)
  filter_query = ""

  if (ds_billing_detail.billingProfileId && ds_billing_detail.billingProfileId != "N/A") {
    filter_query = "properties/billingProfileId eq '" + ds_billing_detail.billingProfileId + "'"
  }

  query_params = {
    "api-version": "2024-04-01"
  }

  if (filter_query != "") {
    query_params["$filter"] = filter_query
  }

  // Create API request
  var request = {
    auth: "auth_azure",
    pagination: "pagination_azure",
    host: param_azure_endpoint,
    path: ds_billing_detail.billingAccountId + "/savingsPlanOrders",
    query_params: query_params,
    headers: {
      "User-Agent": "RS Policies"
    }
  }
  EOS
end

# GET SAVINGS PLAN DETAILS
datasource "ds_savings_plan_order_details" do
  iterate $ds_savings_plan_details
  request do
    auth $auth_azure
    host $param_azure_endpoint
    path join([val(iter_item, "savingsPlanOrderId"), "/savingsPlans"])
    query "api-version", "2024-04-01"
  end
  result do
    encoding "json"
    collect jmes_path(response, "value[*]") do
      field "billingAccountId", val(iter_item, "billingAccountId")
      field "billingAccountName", val(iter_item, "billingAccountName")
      field "billingProfileId", val(iter_item, "billingProfileId")
      field "billingProfileName", val(iter_item, "billingProfileName")
      field "agreementType", val(iter_item, "agreementType")
      field "savingsPlanOrderId", val(iter_item, "savingsPlanOrderId")
      field "savingsPlanOrderName", val(iter_item, "savingsPlanOrderName")
      field "billingPlan", jmes_path(col_item, "properties.billingPlan")
      field "skuName", jmes_path(col_item, "sku.name")
      field "productCode", jmes_path(col_item, "properties.productCode")
      field "term", jmes_path(col_item, "properties.term")
      field "scopeType", jmes_path(col_item, "properties.userFriendlyAppliedScopeType")
      field "scopeProperties", jmes_path(col_item, "properties.appliedScopeProperties")
      field "purchaseDate", jmes_path(col_item, "properties.purchaseDateTime")
      field "benefitStartDate", jmes_path(col_item, "properties.benefitStartTime")
      field "effectiveDate", jmes_path(col_item, "properties.effectiveDate")
      field "expirationDate", jmes_path(col_item, "properties.expiryDateTime")
      field "savingsPlanId", jmes_path(col_item, "id")
      field "savingsPlanName", jmes_path(col_item, "name")
      field "commitmentAmount", jmes_path(col_item, "properties.commitment.amount")
      field "commitmentGranularity", jmes_path(col_item, "properties.commitment.grain")
      field "commitmentCurrency", jmes_path(col_item, "properties.commitment.currencyCode")
      field "autoRenew", jmes_path(col_item, "properties.renew")
      field "utilization", jmes_path(col_item, "properties.utilization")
    end
  end
end

# FILTER SAVINGS PLANS BASED ON USER-DEFINED PARAMETER
datasource "ds_filtered_savings_plans" do
  run_script $js_filtered_savings_plans, $ds_savings_plan_order_details, $param_lookback_days
end

script "js_filtered_savings_plans", type: "javascript" do
  parameters "ds_savings_plan_order_details", "param_lookback_days"
  result "result"
  code <<-EOS
  result = _.map(ds_savings_plan_order_details, function(sp) {

    // Applied Scope Properties
    if (sp.scopeProperties) {
      if (sp.scopeProperties.managementGroupId) {
        sp["scopeDetailId"] = sp.scopeProperties.managementGroupId 
        sp["scopeDetailName"] = sp.scopeProperties.displayName 
      } else if (sp.scopeProperties.subscriptionId) {
        sp["scopeDetailId"] = sp.scopeProperties.subscriptionId 
        sp["scopeDetailName"] = sp.scopeProperties.displayName 
      } 

      sp = _.omit(sp, "scopeProperties")
    } else {
      sp["scopeDetailId"] = "N/A"
      sp["scopeDetailName"] = "N/A"
    }

    // Utilization
    if (sp.utilization ) {
      if (sp.utilization.trend) {
        sp["utilizationTrend"] = sp.utilization.trend
      }
      
      if (_.size(sp.utilization.aggregates) > 0) {
        // Add the trend and utilization values to the savings plan object
        // This makes it easier to path to in the export
        _.each(sp.utilization.aggregates, function(agg) {
          sp["utilization_" + agg.grain + agg.grainUnit] = agg.value
        })
      }

      utilization_aggregate = _.find(sp.utilization.aggregates, function(agg) {
        return agg.grain == param_lookback_days
      })
      
      if (utilization_aggregate != undefined) {
        sp["utilizationAmount"] = utilization_aggregate.value
        sp["utilizationAmountUnit"] = utilization_aggregate.valueUnit
      }

      sp = _.omit(sp, "utilization")
    }
 
    return sp
  })
  EOS
end

# ORGANIZE DATA FOR POLICY INCIDENT
datasource "ds_sp_data_for_incident" do
  run_script $js_sp_data_for_incident, $ds_filtered_savings_plans, $ds_currency_reference, $param_utilization_threshold
end

script "js_sp_data_for_incident", type: "javascript" do
  parameters "ds_filtered_savings_plans", "ds_currency_reference", "param_utilization_threshold"
  result "result"
  code <<-EOS

  // function for formatting spend number
  function formatNumber(number, separator) {
    var numString = number.toString();
    var values = numString.split(".");
    var result = ''
    while ( values[0].length > 3 ) {
      var chunk = values[0].substr(-3)
      values[0] = values[0].substr(0, values[0].length - 3)
      result = separator + chunk + result
    }
    if ( values[0].length > 0 ) {
      result = values[0] + result
    }
    if ( values[1] == undefined ) {
      return result;
    }
    return result + "." + values[1];
  }

  // format costs with currency symbol and thousands separator
  var cur = "", separator = ""
  if ( _.size(ds_filtered_savings_plans) > 0 && ds_filtered_savings_plans[0].commitmentCurrency !== undefined ) {
    if ( ds_currency_reference[ ds_filtered_savings_plans[0].commitmentCurrency ] !== undefined ) {
      cur = ds_currency_reference[ ds_filtered_savings_plans[0].commitmentCurrency ].symbol
      if ( ds_currency_reference[ ds_filtered_savings_plans[0].commitmentCurrency ].t_separator !== undefined ) {
        separator = ds_currency_reference[ ds_filtered_savings_plans[0].commitmentCurrency ].t_separator
      } else {
        separator = ""
      }
    } else {
      cur = ""
      separator = ""
    }
  } else {
    cur = "$"
    separator = ","
  }

  filtered_sps = _.reject(ds_filtered_savings_plans, function(sp) {
    if (sp.utilizationAmount != null) {
      return Number(sp.utilizationAmount) > param_utilization_threshold
    } else {
      return sp
    }
  })

  total_wastage = 0
  _.each(filtered_sps, function(sp) {
    if (sp.commitmentAmount && sp.commitmentAmount != null) {
      total_wastage += Number(sp.commitmentAmount)
    }
  })

  total_wastage = cur + " " + formatNumber((Math.round(total_wastage * 100) / 100), separator)
  
  result = {
    "savings_plan_details": filtered_sps,
    "message": "The total estimated hourly wasted spend is " + total_wastage
  }
  EOS
end

###############################################################################
# Policy
###############################################################################

policy "pol_azure_sp_utilization" do
  validate $ds_sp_data_for_incident do
    summary_template "Azure Savings Plan Utilization Details: {{ len data.savings_plan_details }} Azure Savings Plans - Last {{ parameters.param_lookback_days}} days"
    detail_template <<-EOS
# Azure Savings Plan Utilization
{{ data.message }}

{{ range data.savings_plan_details }}
### Savings Plan {{ .savingsPlanName }} for {{.scopeType}}: {{.scopeDetailId}}

**Utilization:**

- Last 1 Days: {{ .utilization_1days }}%
- Last 7 Days: {{ .utilization_7days }}%
- Last 30 Days: {{ .utilization_30days }}%
- Trend: {{ .utilizationTrend }}

**Commitment:**

- Term: {{ .term }}
- Scope: {{ .scopeType }}
- Amount: {{ .commitmentAmount }}
- Currency: {{ .commitmentCurrency }}
- Granularity: {{ .commitmentGranularity }}
___
{{ end }}
###### Policy Applied in Account: {{ rs_project_name }} (Account ID: {{ rs_project_id }}) within Org: {{ rs_org_name }} (Org ID: {{ rs_org_id }})
EOS
    check eq(size(val(data, "savings_plan_details")), 0)
    escalate $esc_email
    export "savings_plan_details" do
      resource_level false
      field "agreementType" do
        label "Agreement Type"
      end
      field "billingAccountId" do
        label "Billing Account/Enrollment ID"
      end
      field "savingsPlanId" do
        label "Savings Plan ID"
      end
      field "savingsPlanName" do
        label "Savings Plan Name"
      end
      field "savingsPlanOrderId" do
        label "Savings Plan Order ID"
      end
      field "savingsPlanOrderName" do
        label "Savings Plan Order Name"
      end
      field "scopeType" do
        label "Applied Scope Type"
      end
      field "scopeDetailId" do
        label "Applied Scope Management Group/Subscription ID"
      end
      field "scopeDetailName" do
        label "Applied Scope Management Group/Subscription Name"
      end
      field "skuName" do
        label "SKU Name"
      end
      field "term" do
        label "Term"
      end
      field "purchaseDate" do
        label "Savings Plan Purchase Date"
      end
      field "expirationDate" do
        label "Savings Plan Expiration Date"
      end
      field "utilizationAmount" do
        label "Utilization Amount"
      end
      field "utilizationAmountUnit" do
        label "Utilization Amount Unit"
      end
      field "commitmentAmount" do
        label "Commitment Amount"
      end
      field "commitmentCurrency" do
        label "Commitment Currency"
      end
      field "commitmentGranularity" do
        label "Commitment Granularity"
      end
    end
  end
end

###############################################################################
# Escalation
###############################################################################

escalation "esc_email" do
  automatic true
  label "Send Email"
  description "Sends incident email"
  email $param_email
end

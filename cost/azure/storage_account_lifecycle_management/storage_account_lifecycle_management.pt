name "Azure Storage Accounts without Lifecycle Management Policies"
rs_pt_ver 20180301
type "policy"
short_description "Check a list of Azure Storage Accounts without Lifecycle Management Policies. See the [README](https://github.com/flexera-public/policy_templates/tree/master/cost/azure/storage_account_lifecycle_management/) and [docs.flexera.com/flexera/EN/Automation](https://docs.flexera.com/flexera/EN/Automation/AutomationGS.htm) to learn more."
long_description ""
severity "low"
category "Cost"
default_frequency "daily"
info(
  version: "3.0",
  provider: "Azure",
  service: "Storage Accounts",
  policy_set: "Lifecycle Management"
)

###############################################################################
# Parameters
###############################################################################

parameter "param_exclusion_tag_key" do
  category "User Inputs"
  label "Exclusion Tag Key"
  description "Cloud native tag key to ignore instances. Example: exclude_utilization"
  type "string"
  default ""
end

parameter "param_email" do
  type "list"
  label "Email addresses"
  description "Email addresses of the recipients you wish to notify"
end

parameter "param_azure_endpoint" do
  type "string"
  label "Azure Endpoint"
  allowed_values "management.azure.com", "management.chinacloudapi.cn"
  default "management.azure.com"
end

parameter "param_subscriptions_list" do
  label "Subscription Allowed List"
  type "list"
  description "Allowed Subscriptions, if empty, all subscriptions will be checked"
  default []
end

parameter "param_api_wait" do
  type "number"
  label "Azure API Wait Time"
  description "Amount of time to wait between Azure API requests to avoid throttling (seconds)"
  default 1
  min_value 0
  max_value 60
end

###############################################################################
# Authentication
###############################################################################

#authenticate with Azure
credentials "auth_azure" do
  schemes "oauth2"
  label "Azure"
  description "Select the Azure Resource Manager Credential from the list."
  tags "provider=azure_rm"
end

credentials "auth_flexera" do
  schemes "oauth2"
  label "flexera"
  description "Select Flexera One OAuth2 credentials"
  tags "provider=flexera"
end

###############################################################################
# Pagination
###############################################################################

pagination "azure_pagination" do
  get_page_marker do
    body_path "nextLink"
  end
  set_page_marker do
    uri true
  end
end

###############################################################################
# Datasources
###############################################################################

datasource "ds_subscriptions" do
  request do
    auth $auth_azure
    pagination $azure_pagination
    host $param_azure_endpoint
    path "/subscriptions/"
    query "api-version", "2019-06-01"
    header "User-Agent", "RS Policies"
    # Header X-Meta-Flexera has no affect on datasource query, but is required for Meta Policies
    # Forces `ds_is_deleted` datasource to run first during policy execution
    header "Meta-Flexera", val($ds_is_deleted, "path")
  end
  result do
    encoding "json"
    collect jmes_path(response, "value[*]") do
      field "subscriptionId", jmes_path(col_item, "subscriptionId")
      field "displayName", jmes_path(col_item, "displayName")
      field "state", jmes_path(col_item, "state")
    end
  end
end

datasource "ds_filtered_subscriptions" do
  run_script $js_filtered_subscriptions, $ds_subscriptions, $param_subscriptions_list
end

datasource "ds_storage_accounts" do
  iterate $ds_filtered_subscriptions
  request do
    run_script $js_storage_accounts_request, val(iter_item, "subscriptionId"), $param_azure_endpoint, $param_api_wait
  end
  result do
    encoding "json"
    collect jmes_path(response, "value") do
      field "id", jmes_path(col_item,"id")
      field "name", jmes_path(col_item,"name")
      field "location", jmes_path(col_item,"location")
      field "tags", jmes_path(col_item,"tags")
      field "subscriptionId",val(iter_item,"subscriptionId")
      field "subscriptionName",val(iter_item,"displayName")
    end
  end
end

datasource "ds_management_policies" do
  iterate $ds_storage_accounts
  request do
    run_script $js_management_policies_request, val(iter_item,"id"), $param_azure_endpoint, $param_api_wait
  end
  result do
    encoding "json"
    field "id", val(iter_item, "id")
    field "management_policy_id", jmes_path(response, "id")
    field "management_policy_name", jmes_path(response, "name")
    field "management_policy", jmes_path(response, "properties.policy")
    field "name", val(iter_item, "name")
    field "location", val(iter_item, "location")
    field "tags", val(iter_item, "tags")
    field "subscriptionId", val(iter_item, "subscriptionId")
    field "subscriptionName", val(iter_item, "displayName")
  end
end

datasource "ds_merged_metrics" do
  run_script $js_merged_metrics, $ds_storage_accounts, $ds_management_policies, $param_exclusion_tag_key
end

###############################################################################
# Scripts
###############################################################################

script "js_filtered_subscriptions", type: "javascript" do
  parameters "ds_subscriptions", "param_subscriptions_list"
  result "results"
  code <<-EOS
  var results = []
  if ( param_subscriptions_list.length != 0){
    results = []
    _.each(param_subscriptions_list, function(sub){
      var found = _.find(ds_subscriptions, function(item){
        return item.subscriptionId == sub || item.displayName.toLowerCase() == sub.toLowerCase();
      })
      results.push(found)
    })
  } else {
    results = ds_subscriptions
  }
EOS
end

script "js_storage_accounts_request", type: "javascript" do
  result "result"
  parameters "subscription_id", "azure_endpoint", "api_wait"
  code <<-EOS
  // Slow down rate of requests to prevent throttling
  var now = new Date().getTime()
  while(new Date().getTime() < now + (api_wait * 1000)) { /* Do nothing */ }

  result = {
    "auth": "auth_azure",
    "pagination": "azure_pagination",
    "host": azure_endpoint,
    "verb": "GET",
    "path": "/subscriptions/" + subscription_id + "/providers/Microsoft.Storage/storageAccounts",
    "headers": {
      "User-Agent": "RS Policies",
      "Content-Type": "application/json"
    },
    // Ignore status 400, 403, and 404 which can be returned in certain (legacy) types of Azure Subscriptions
    ignore_status: [400,403,404],
    "query_params": {
      'api-version': '2021-04-01'
    },
    "ignore_status": [400, 403, 404]
  }
EOS
end

script "js_management_policies_request", type: "javascript" do
  result "result"
  parameters "storage_id", "azure_endpoint", "api_wait"
  code <<-EOS
  // Slow down rate of requests to prevent throttling
  var now = new Date().getTime()
  while(new Date().getTime() < now + (api_wait * 1000)) { /* Do nothing */ }

  result = {
    "auth": "auth_azure",
    "pagination": "azure_pagination",
    "host": azure_endpoint,
    "verb": "GET",
    "path": storage_id + "/managementPolicies/default",
    "headers": {
      "User-Agent": "RS Policies",
      "Content-Type": "application/json"
    },
    // Ignore status 400, 403, and 404 which can be returned in certain (legacy) types of Azure Subscriptions
    ignore_status: [400,403,404],
    "query_params": {
      'api-version': '2021-04-01'
    },
    "ignore_status": [403, 404]
  }
EOS
end

script "js_merged_metrics", type: "javascript" do
  parameters "ds_storage_accounts", "ds_management_policies", "param_exclusion_tag_key"
  result "results"
  code <<-EOS
  var results = []
  _.each(ds_storage_accounts, function(storage_account){
    var mp = _.first(
      _.filter(ds_management_policies, function(policy){
        if (storage_account.id == policy.id) {
          return policy
        }
      })
    )
    if ( !_.has(storage_account.tags, param_exclusion_tag_key) && (mp == undefined)){
      resource_group = storage_account.id.split('/')[4]
      var tag_string = ""
      _.each(storage_account.tags, function(value, key){
        tag_string = tag_string + key + '=' + value + ', '
      })
      storage_account['resource_group'] = resource_group
      storage_account['tagString'] = tag_string
      results.push(storage_account)
    }
  })
EOS
end

###############################################################################
# Policy
###############################################################################

policy 'policy_azure_storage_account_lifecycle' do
  validate $ds_merged_metrics do
    summary_template "{{ rs_project_name }} (Account ID: {{ rs_project_id }}): Found {{ len data }} Azure Storage Accounts without Lifecycle Policies"
    escalate $email_report
    check logic_or($ds_parent_policy_terminated, eq(size(data), 0))
    export do
      resource_level true
      field "subscriptionName" do
        label "Subscription Name"
      end
      field "location" do
        label "Location"
      end
      field "name" do
        label "Name"
      end
      field "resource_group" do
        label "Resource Group"
      end
      field "tagString" do
        label "Tags"
      end
      field "id" do
        label "Id"
      end
    end
  end
end

###############################################################################
# Escalations
###############################################################################

escalation "email_report" do
  automatic true
  label "Send Email"
  description "Sends incident email"
  email $param_email
end

###############################################################################
# Meta Policy [alpha]
# Not intended to be modified or used by policy developers
###############################################################################

# If the meta_parent_policy_id is not set it will evaluate to an empty string and we will look for the policy itself,
# if it is set we will look for the parent policy.
datasource "ds_get_policy" do
  request do
    auth $auth_flexera
    host rs_governance_host
    ignore_status [404]
    path join(["/api/governance/projects/", rs_project_id, "/applied_policies/", switch(ne(meta_parent_policy_id,""), meta_parent_policy_id, policy_id) ])
    header "Api-Version", "1.0"
  end
  result do
    encoding "json"
    field "id", jmes_path(response, "id")
  end
end

datasource "ds_parent_policy_terminated" do
  run_script $js_decide_if_self_terminate, $ds_get_policy, policy_id, meta_parent_policy_id
end

# If the policy was applied by a meta_parent_policy we confirm it exists if it doesn't we confirm we are deleting
# This information is used in two places:
# - determining whether or not we make a delete call
# - determining if we should create an incident (we don't want to create an incident on the run where we terminate)
script "js_decide_if_self_terminate", type: "javascript" do
  parameters "found", "self_policy_id", "meta_parent_policy_id"
  result "result"
  code <<-EOS
  var result
  if (meta_parent_policy_id != "" && found.id == undefined) {
    result = true
  } else {
    result = false
  }
  EOS
end

# Two potentials ways to set this up:
# - this way and make a unneeded 'get' request when not deleting
# - make the delete request an interate and have it iterate over an empty array when not deleting and an array with one item when deleting
script "js_make_terminate_request", type: "javascript" do
  parameters "should_delete", "policy_id", "rs_project_id", "rs_governance_host"
  result "request"
  code <<-EOS

  var request = {
    auth:  'auth_flexera',
    host: rs_governance_host,
    path: "/api/governance/projects/" + rs_project_id + "/applied_policies/" + policy_id,
    headers: {
      "API-Version": "1.0",
      "Content-Type":"application/json"
    },
  }

  if (should_delete) {
    request.verb = 'DELETE'
  }
  EOS
end

datasource "ds_terminate_self" do
  request do
    run_script $js_make_terminate_request, $ds_parent_policy_terminated, policy_id, rs_project_id, rs_governance_host
  end
end

datasource "ds_is_deleted" do
  run_script $js_check_deleted, $ds_terminate_self
end

# This is just a way to have the check delete request connect to the farthest leaf from policy.
# We want the delete check to the first thing the policy does to avoid the policy erroring before it can decide whether or not it needs to self terminate
# Example a customer deletes a credential and then terminates the parent policy. We still want the children to self terminate
# The only way I could see this not happening is if the user who applied the parent_meta_policy was offboarded or lost policy access, the policies who are impersonating the user
# would not have access to self-terminate
# It may be useful for the backend to enable a mass terminate at some point for all meta_child_policies associated with an id.
script "js_check_deleted", type: "javascript" do
  parameters "response"
  result "result"
  code <<-EOS
  result = {"path":"/"}
  EOS
end


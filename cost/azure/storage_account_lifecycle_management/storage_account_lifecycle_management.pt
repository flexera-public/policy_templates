name "Azure Storage Accounts without Lifecycle Management Policies"
rs_pt_ver 20180301
type "policy"
short_description "Check a list of Azure Storage Accounts without Lifecycle Management Policies. See the [README](https://github.com/flexera/policy_templates/tree/master/cost/azure/storage_account_lifecycle_management/) and [docs.rightscale.com/policies](https://docs.rightscale.com/policies/) to learn more."
long_description ""
severity "low"
category "Cost"
default_frequency "daily"
info(
  version: "2.2",
  provider: "Azure",
  service: "Storage Accounts",
  policy_set: "Lifecycle Management"
)

###############################################################################
# Parameters
###############################################################################

parameter "param_exclusion_tag_key" do
  category "User Inputs"
  label "Exclusion Tag Key"
  description "Cloud native tag key to ignore instances. Example: exclude_utilization"
  type "string"
end

parameter "param_email" do
  type "list"
  label "Email addresses"
  description "Email addresses of the recipients you wish to notify"
end

parameter "param_azure_endpoint" do
  type "string"
  label "Azure Endpoint"
  allowed_values "management.azure.com", "management.chinacloudapi.cn"
  default "management.azure.com"
end

parameter "param_subscription_whitelist" do
  label "Subscription Whitelist"
  type "list"
  description "Whitelisted Subscriptions, if empty, all subscriptions will be checked"
end

###############################################################################
# Authentication
###############################################################################

#authenticate with Azure
credentials "azure_auth" do
  schemes "oauth2"
  label "Azure"
  description "Select the Azure Resource Manager Credential from the list."
  tags "provider=azure_rm"
end

###############################################################################
# Pagination
###############################################################################
pagination "azure_pagination" do
  get_page_marker do
    body_path "nextLink"
  end
  set_page_marker do
    uri true
  end
end

###############################################################################
# Datasources
###############################################################################

datasource "ds_subscriptions" do
  request do
    auth $azure_auth
    pagination $azure_pagination
    host $param_azure_endpoint
    path "/subscriptions/"
    query "api-version","2019-06-01"
    header "User-Agent", "RS Policies"
  end
  result do
    encoding "json"
    collect jmes_path(response, "value[*]") do
      field "subscriptionId", jmes_path(col_item,"subscriptionId")
      field "displayName", jmes_path(col_item,"displayName")
      field "state", jmes_path(col_item,"state")
    end
  end
end

datasource "ds_filtered_subscriptions" do
  run_script $js_filtered_subscriptions, $ds_subscriptions, $param_subscription_whitelist
end

#https://docs.microsoft.com/en-us/rest/api/resources/resources/list
datasource "ds_storage_accounts" do
  iterate $ds_filtered_subscriptions
  request do
    auth $azure_auth
    pagination $azure_pagination
    host $param_azure_endpoint
    path join(["/subscriptions/", val(iter_item,"subscriptionId"), "/providers/Microsoft.Storage/storageAccounts"])
    query "api-version","2021-04-01"
    header "User-Agent", "RS Policies"
    ignore_status [400,403,404]
  end
  result do
    encoding "json"
    collect jmes_path(response, "value") do
      field "id", jmes_path(col_item,"id")
      field "name", jmes_path(col_item,"name")
      field "location", jmes_path(col_item,"location")
      field "tags", jmes_path(col_item,"tags")
      field "subscriptionId",val(iter_item,"subscriptionId")
      field "subscriptionName",val(iter_item,"displayName")
    end
  end
end

datasource "ds_management_policies" do
  iterate $ds_storage_accounts
  request do
    auth $azure_auth
    pagination $azure_pagination
    host $param_azure_endpoint
    ignore_status [403, 404]
    path join([val(iter_item,"id"), "/managementPolicies/default"])
    query "api-version","2021-04-01"
    header "User-Agent", "RS Policies"
  end
  result do
    encoding "json"
    field "id", val(iter_item, "id")
    field "management_policy_id", jmes_path(response,"id")
    field "management_policy_name", jmes_path(response,"name")
    field "management_policy", jmes_path(response, "properties.policy")
    field "name", val(iter_item,"name")
    field "location", val(iter_item,"location")
    field "tags", val(iter_item,"tags")
    field "subscriptionId", val(iter_item,"subscriptionId")
    field "subscriptionName", val(iter_item,"displayName")
  end
end

datasource "ds_merged_metrics" do
  run_script $js_merged_metrics, $ds_storage_accounts, $ds_management_policies, $param_exclusion_tag_key
end

###############################################################################
# Scripts
###############################################################################

script "js_merged_metrics", type: "javascript" do
  parameters "ds_storage_accounts", "ds_management_policies", "param_exclusion_tag_key"
  result "results"
  code <<-EOS
  var results = []
  _.each(ds_storage_accounts, function(storage_account){
    var mp = _.first(
      _.filter(ds_management_policies, function(policy){
        if (storage_account.id == policy.id) {
          return policy
        }
      })
    )
    if ( !_.has(storage_account.tags, param_exclusion_tag_key) && (mp == undefined)){
      resource_group = storage_account.id.split('/')[4]
      var tag_string = ""
      _.each(storage_account.tags, function(value, key){
        tag_string = tag_string + key + '=' + value + ', '
      })
      storage_account['resource_group'] = resource_group
      storage_account['tagString'] = tag_string
      results.push(storage_account)
    }
  })
EOS
end

script "js_filtered_subscriptions", type: "javascript" do
  parameters "ds_subscriptions", "param_subscription_whitelist"
  result "results"
  code <<-EOS
  var results = []
  if ( param_subscription_whitelist.length != 0){
    results = []
    _.each(param_subscription_whitelist, function(sub){
      var found = _.find(ds_subscriptions, function(item){
        return item.subscriptionId == sub || item.displayName.toLowerCase() == sub.toLowerCase();
      })
      results.push(found)
    })
  } else {
    results = ds_subscriptions
  }
EOS
end

###############################################################################
# Policy
###############################################################################

policy 'policy_azure_storage_account_lifecycle' do
  validate $ds_merged_metrics do
    summary_template "{{ rs_project_name }} (Account ID: {{ rs_project_id }}): Found {{ len data }} Azure Storage Accounts without Lifecycle Policies"
    escalate $email_report
    check eq(size(data),0)
    export do
      resource_level true
      field "subscriptionName" do
        label "Subscription Name"
      end
      field "location" do
        label "Location"
      end
      field "name" do
        label "Name"
      end
      field "resource_group" do
        label "Resource Group"
      end
      field "tagString" do
        label "Tags"
      end
      field "id" do
        label "Id"
      end
    end
  end
end

###############################################################################
# Escalations
###############################################################################

escalation "email_report" do
  automatic true
  label "Send Email"
  description "Sends incident email"
  email $param_email
end

###############################################################################
# Cloud Workflow
###############################################################################

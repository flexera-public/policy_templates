name "Azure Rightsize Compute Instances"
rs_pt_ver 20180301
type "policy"
short_description "Checks for instances that have inefficient utilization for the last 30 days and downsizes or deletes them after approval. \n See the [README](https://github.com/flexera-public/policy_templates/tree/master/cost/azure/rightsize_compute_instances/) and [docs.flexera.com/flexera/EN/Automation](https://docs.flexera.com/flexera/EN/Automation/AutomationGS.htm) to learn more."
long_description ""
category "Cost"
severity "low"
default_frequency "weekly"
info(
  version: "3.1",
  provider: "Azure",
  service: "Compute",
  policy_set: "Rightsize Compute Instances",
  recommendation_type: "Usage Reduction"
)

###############################################################################
# Parameters
###############################################################################

parameter "param_email" do
  type "list"
  category "Policy Settings"
  label "Email addresses"
  description "A list of email addresses to notify."
  default []
end

parameter "param_azure_endpoint" do
  type "string"
  category "Policy Settings"
  label "Azure Endpoint"
  description "Select the API endpoint to use for Azure. Use default value of management.azure.com unless using Azure China."
  allowed_values "management.azure.com", "management.chinacloudapi.cn"
  default "management.azure.com"
end

parameter "param_min_savings" do
  type "number"
  category "Policy Settings"
  label "Minimum Savings Threshold"
  description "Minimum potential savings required to generate a recommendation"
  min_value 0
  default 0
end

parameter "param_exclusion_tags" do
  type "list"
  category "Filters"
  label "Exclusion Tags (Key:Value)"
  description "Cloud native tags to ignore instances that you don't want to consider for downsizing or deletion. Format: Key:Value"
  allowed_pattern /(^$)|([\w]?)+\:([\w]?)+/
  default []
end

parameter "param_subscriptions_allow_or_deny" do
  type "string"
  category "Filters"
  label "Allow/Deny Subscriptions"
  description "Allow or Deny entered Subscriptions. See the README for more details."
  allowed_values "Allow", "Deny"
  default "Allow"
end

parameter "param_subscriptions_list" do
  type "list"
  category "Filters"
  label "Allow/Deny Subscriptions List"
  description "A list of allowed or denied Subscription IDs/names. See the README for more details."
  default []
end

parameter "param_stats_idle_threshold_cpu_value" do
  type "number"
  category "Statistics"
  label "Idle Instance CPU Threshold (%)"
  description "The CPU threshold at which to consider an instance to be 'idle' and therefore be flagged for termination. Set to -1 to ignore CPU utilization"
  min_value -1
  max_value 100
  default 5
end

parameter "param_stats_idle_threshold_mem_value" do
  type "number"
  category "Statistics"
  label "Idle Instance Memory Threshold (%)"
  description "The Memory threshold at which to consider an instance to be 'idle' and therefore be flagged for termination. Set to -1 to ignore memory utilization"
  min_value -1
  max_value 100
  default 5
end

parameter "param_stats_underutil_threshold_cpu_value" do
  type "number"
  category "Statistics"
  label "Underutilized Instance CPU Threshold (%)"
  description "The CPU threshold at which to consider an instance to be 'underutilized' and therefore be flagged for downsizing. Set to -1 to ignore CPU utilization"
  min_value -1
  max_value 100
  default 40
end

parameter "param_stats_underutil_threshold_mem_value" do
  type "number"
  category "Statistics"
  label "Underutilized Instance Memory Threshold (%)"
  description "The Memory threshold at which to consider an instance to be 'underutilized' and therefore be flagged for downsizing. Set to -1 to ignore memory utilization"
  min_value -1
  max_value 100
  default 40
end

parameter "param_stats_check_both" do
  type "string"
  category "Statistics"
  label "Idle/Utilized for both CPU/Memory or either"
  description "Set whether an instance should be considered idle and/or underutilized only if both CPU and memory are under the thresholds or if either CPU or memory are under. Note: this parameter is only valid when at least one Memory Utilization threshold and one CPU Utilization threshold is NOT set to -1"
  allowed_values "Both CPU and Memory", "Either CPU or Memory"
  default "Either CPU or Memory"
end

parameter "param_stats_threshold" do
  type "string"
  category "Statistics"
  label "Threshold Statistic"
  description "Statistic to use when determining if an instance is idle/underutilized."
  allowed_values "Average", "Maximum"
  default "Average"
end

parameter "param_stats_lookback" do
  type "number"
  category "Statistics"
  label "Statistic Lookback Period"
  description "How many days back to look at CPU and/or memory data for instances. This value cannot be set higher than 90 because Azure does not retain metrics for longer than 90 days."
  default 30
  min_value 1
  max_value 90
end

parameter "param_automatic_action" do
  type "list"
  category "Actions"
  label "Automatic Actions"
  description "When this value is set, this policy will automatically take the selected action."
  allowed_values ["Downsize Instances", "Delete Instances"]
  default []
end

###############################################################################
# Authentication
###############################################################################

credentials "auth_azure" do
  schemes "oauth2"
  label "Azure"
  description "Select the Azure Resource Manager Credential from the list."
  tags "provider=azure_rm"
end

credentials "auth_flexera" do
  schemes "oauth2"
  label "Flexera"
  description "Select Flexera One OAuth2 credentials"
  tags "provider=flexera"
end

###############################################################################
# Pagination
###############################################################################

pagination "pagination_azure" do
  get_page_marker do
    body_path "nextLink"
  end
  set_page_marker do
    uri true
  end
end

###############################################################################
# Datasources & Scripts
###############################################################################

# Get applied policy metadata for use later
datasource "ds_applied_policy" do
  request do
    auth $auth_flexera
    host rs_governance_host
    path join(["/api/governance/projects/", rs_project_id, "/applied_policies/", policy_id])
    header "Api-Version", "1.0"
  end
end

datasource "ds_billing_centers" do
  request do
    auth $auth_flexera
    host rs_optima_host
    path join(["/analytics/orgs/", rs_org_id, "/billing_centers"])
    header "Api-Version", "1.0"
    header "User-Agent", "RS Policies"
    query "view", "allocation_table"
    ignore_status [403]
  end
  result do
    encoding "json"
    collect jmes_path(response, "[*]") do
      field "href", jmes_path(col_item, "href")
      field "id", jmes_path(col_item, "id")
      field "name", jmes_path(col_item, "name")
      field "parent_id", jmes_path(col_item, "parent_id")
    end
  end
end

# Gather top level billing center IDs for when we pull cost data
datasource "ds_top_level_bcs" do
  run_script $js_top_level_bcs, $ds_billing_centers
end

script "js_top_level_bcs", type: "javascript" do
  parameters "ds_billing_centers"
  result "result"
  code <<-EOS
  filtered_bcs = _.filter(ds_billing_centers, function(bc) {
    return bc['parent_id'] == null || bc['parent_id'] == undefined
  })

  result = _.compact(_.pluck(filtered_bcs, 'id'))
EOS
end

datasource "ds_currency_reference" do
  request do
    host "raw.githubusercontent.com"
    path "/rightscale/policy_templates/master/cost/scheduled_reports/currency_reference.json"
    header "User-Agent", "RS Policies"
  end
end

datasource "ds_currency_code" do
  request do
    auth $auth_flexera
    host rs_optima_host
    path join(["/bill-analysis/orgs/", rs_org_id, "/settings/currency_code"])
    header "Api-Version", "0.1"
    header "User-Agent", "RS Policies"
    ignore_status [403]
  end
  result do
    encoding "json"
    field "id", jmes_path(response, "id")
    field "value", jmes_path(response, "value")
  end
end

datasource "ds_currency" do
  run_script $js_currency, $ds_currency_reference, $ds_currency_code
end

script "js_currency", type:"javascript" do
  parameters "ds_currency_reference", "ds_currency_code"
  result "result"
  code <<-EOS
  symbol = "$"
  separator = ","

  if (ds_currency_code['value'] != undefined) {
    if (ds_currency_reference[ds_currency_code['value']] != undefined) {
      symbol = ds_currency_reference[ds_currency_code['value']]['symbol']

      if (ds_currency_reference[ds_currency_code['value']]['t_separator'] != undefined) {
        separator = ds_currency_reference[ds_currency_code['value']]['t_separator']
      } else {
        separator = ""
      }
    }
  }

  result = {
    symbol: symbol,
    separator: separator
  }
EOS
end

datasource "ds_azure_subscriptions" do
  request do
    auth $auth_azure
    pagination $pagination_azure
    host $param_azure_endpoint
    path "/subscriptions/"
    query "api-version","2020-01-01"
    header "User-Agent", "RS Policies"
    # Header X-Meta-Flexera has no affect on datasource query, but is required for Meta Policies
    # Forces `ds_is_deleted` datasource to run first during policy execution
    header "Meta-Flexera", val($ds_is_deleted, "path")
  end
  result do
    encoding "json"
    collect jmes_path(response, "value[*]") do
      field "id", jmes_path(col_item, "subscriptionId")
      field "name", jmes_path(col_item, "displayName")
      field "state", jmes_path(col_item, "state")
    end
  end
end

datasource "ds_azure_subscriptions_filtered" do
  run_script $js_azure_subscriptions_filtered, $ds_azure_subscriptions, $param_subscriptions_allow_or_deny, $param_subscriptions_list
end

script "js_azure_subscriptions_filtered", type: "javascript" do
  parameters "ds_azure_subscriptions", "param_subscriptions_allow_or_deny", "param_subscriptions_list"
  result "result"
  code <<-EOS
  if (param_subscriptions_list.length > 0) {
    result = _.filter(ds_azure_subscriptions, function(subscription) {
      include_subscription = _.contains(param_subscriptions_list, subscription['id']) || _.contains(param_subscriptions_list, subscription['name'])

      if (param_subscriptions_allow_or_deny == "Deny") {
        include_subscription = !include_subscription
      }

      return include_subscription
    })
  } else {
    result = ds_azure_subscriptions
  }
EOS
end

datasource "ds_azure_instances" do
  iterate $ds_azure_subscriptions_filtered
  request do
    auth $auth_azure
    pagination $pagination_azure
    host $param_azure_endpoint
    path join(["/subscriptions/", val(iter_item, "id"), "/providers/Microsoft.Compute/virtualMachines"])
    query "api-version", "2019-03-01"
    header "User-Agent", "RS Policies"
    # Ignore status 400, 403, and 404 which can be returned in certain (legacy) types of Azure Subscriptions
    ignore_status [400, 403, 404]
  end
  result do
    encoding "json"
    collect jmes_path(response, "value[*]") do
      field "resourceId", jmes_path(col_item, "id")
      field "resourceGroup", get(4, split(jmes_path(col_item, "id"), '/'))
      field "resourceKind", jmes_path(col_item, "type")
      field "name", jmes_path(col_item, "name")
      field "region", jmes_path(col_item, "location")
      field "osType", jmes_path(col_item, "properties.storageProfile.osDisk.osType")
      field "resourceType", jmes_path(col_item, "properties.hardwareProfile.vmSize")
      field "tags", jmes_path(col_item, "tags")
      field "subscriptionId",val(iter_item, "id")
      field "subscriptionName",val(iter_item, "name")
    end
  end
end

datasource "ds_azure_instances_filtered" do
  run_script $js_azure_instances_filtered, $ds_azure_instances, $param_exclusion_tags
end

script "js_azure_instances_filtered", type: "javascript" do
  parameters "ds_azure_instances", "param_exclusion_tags"
  result "result"
  code <<-EOS
  if (param_exclusion_tags.length > 0) {
    result = _.reject(ds_azure_instances, function(vm) {
      vm_tags = []

      if (typeof(vm['tags']) == 'object') {
        _.each(Object.keys(vm['tags']), function(key) {
          vm_tags.push([key, ":", vm['tags'][key]].join(''))
        })
      }

      exclude_vm = false

      _.each(param_exclusion_tags, function(exclusion_tag) {
        if (_.contains(vm_tags, exclusion_tag)) {
          exclude_vm = true
        }
      })

      return exclude_vm
    })
  } else {
    result = ds_azure_instances
  }
EOS
end

datasource "ds_azure_skus" do
  iterate $ds_azure_subscriptions_filtered
  request do
    auth $auth_azure
    pagination $pagination_azure
    host $param_azure_endpoint
    path join(["/subscriptions/", val(iter_item, "id"), "/providers/Microsoft.Compute/skus"])
    query "api-version", "2017-09-01"
    header "User-Agent", "RS Policies"
    # Ignore status 400, 403, and 404 which can be returned in certain (legacy) types of Azure Subscriptions
    ignore_status [400, 403, 404]
  end
  result do
    encoding "json"
    collect jmes_path(response, "value") do
      field "resourceType", jmes_path(col_item, "resourceType")
      field "name", jmes_path(col_item, "name")
      field "locations", jmes_path(col_item, "locations")
      field "capabilities", jmes_path(col_item, "capabilities")
      field "restrictions", jmes_path(col_item, "restrictions")
    end
  end
end

datasource "ds_azure_sku_memory" do
  run_script $js_azure_sku_memory, $ds_azure_skus
end

script "js_azure_sku_memory", type: "javascript" do
  parameters "ds_azure_skus"
  result "result"
  code <<-EOS
  result = {}

  _.each(ds_azure_skus, function(sku) {
    name = sku['name'].toLowerCase()

    if (result[name] == undefined && sku["resourceType"] == "virtualMachines") {
      memory = _.find(sku['capabilities'], function(item) {
        return item["name"] == "MemoryGB"
      })

      result[name] = memory["value"] * 1024 * 1024 * 1024
    }
  })
EOS
end

datasource "ds_azure_instances_metrics" do
  iterate $ds_azure_instances_filtered
  request do
    run_script $js_azure_instances_metrics, val(iter_item, "resourceId"), $param_azure_endpoint, $param_stats_lookback
  end
  result do
    encoding "json"
    field "value", val(response, "value")
    field "resourceName", val(iter_item, "name")
    field "resourceGroup", val(iter_item, "resourceGroup")
    field "resourceId", val(iter_item, "resourceId")
    field "resourceKind", val(iter_item, "resourceKind")
    field "region", val(iter_item, "region")
    field "tags", val(iter_item, "tags")
    field "osType", val(iter_item, "osType")
    field "resourceType", val(iter_item, "resourceType")
    field "subscriptionId",val(iter_item, "subscriptionId")
    field "subscriptionName",val(iter_item, "subscriptionName")
  end
end

script "js_azure_instances_metrics", type: "javascript" do
  parameters "resourceId", "param_azure_endpoint", "param_stats_lookback"
  result "request"
  code <<-EOS
  end_date = new Date()
  end_date.setMilliseconds(999)
  end_date.setSeconds(59)
  end_date.setMinutes(59)
  end_date.setHours(23)

  start_date = new Date()
  start_date.setDate(start_date.getDate() - param_stats_lookback)
  start_date.setMilliseconds(0)
  start_date.setSeconds(0)
  start_date.setMinutes(0)

  timespan = start_date.toISOString() + "/" + end_date.toISOString()

  var request = {
    auth: "auth_azure",
    pagination: "pagination_azure",
    host: param_azure_endpoint,
    verb: "GET",
    path: resourceId + "/providers/microsoft.insights/metrics",
    query_params: {
      "api-version": "2018-01-01",
      "timespan": timespan,
      "interval": "P1D",
      "metricnames": "Percentage CPU,Available Memory Bytes",
      "aggregation": "average,maximum,minimum"
    },
    headers: {
      "User-Agent": "RS Policies"
    },
    // Ignore status 400, 403, and 404 which can be returned in certain (legacy) types of Azure Subscriptions
    ignore_status: [400, 403, 404]
  }
EOS
end

datasource "ds_azure_instances_metrics_organized" do
  run_script $js_azure_instances_metrics_organized, $ds_azure_instances_metrics, $ds_azure_sku_memory
end

script "js_azure_instances_metrics_organized", type: "javascript" do
  parameters "ds_azure_instances_metrics", "ds_azure_sku_memory"
  result "result"
  code <<-EOS
  result = []

  _.each(ds_azure_instances_metrics, function(vm) {
    cpu_stats = null
    mem_stats = null

    _.each(vm['value'], function(stat) {
      if (stat["timeseries"][0] != undefined) {
        if (stat['name']['value'] == "Percentage CPU") {
          cpu_stats = stat["timeseries"][0]["data"]
        }

        if (stat['name']['value'] == "Available Memory Bytes") {
          mem_stats = stat["timeseries"][0]["data"]
        }
      }
    })

    // Default to 0 in case there are no stats because instance is not powered on
    cpu_min = 0
    cpu_max = 0
    cpu_avg = 0
    cpu_min_count = 0
    cpu_max_count = 0
    cpu_avg_count = 0

    if (cpu_stats != null && cpu_stats != undefined) {
      _.each(cpu_stats, function(item) {
        if (item["average"] != undefined && item["average"] != null) {
          cpu_avg += item["average"]
          cpu_avg_count += 1
        }

        if (item["minimum"] != undefined && item["minimum"] != null) {
          cpu_min += item["minimum"]
          cpu_min_count += 1
        }

        if (item["maximum"] != undefined && item["maximum"] != null) {
          cpu_max += item["maximum"]
          cpu_max_count += 1
        }
      })
    }

    if (cpu_min_count != 0) { cpu_min = cpu_min / cpu_min_count }
    if (cpu_max_count != 0) { cpu_max = cpu_max / cpu_max_count }
    if (cpu_avg_count != 0) { cpu_avg = cpu_avg / cpu_avg_count }

    // Default to 0 in case there are no stats because instance is not powered on
    mem_min = 0
    mem_max = 0
    mem_avg = 0
    mem_min_count = 0
    mem_max_count = 0
    mem_avg_count = 0

    total_memory = ds_azure_sku_memory[vm['resourceType'].toLowerCase()]

    if (mem_stats != null && mem_stats != undefined) {
      _.each(mem_stats, function(item) {
        // Convert available memory in bytes to used memory in percentage
        // Note: The switch between min and max is intentional because
        // the maximum available memory is equivalent to the minumum
        // memory used.
        if (item["average"] != undefined && item["average"] != null) {
          mem_avg += (total_memory - item["average"]) / total_memory
          mem_avg_count += 1
        }

        if (item["minimum"] != undefined && item["minimum"] != null) {
          mem_max += (total_memory - item["minimum"]) / total_memory
          mem_max_count += 1
        }

        if (item["maximum"] != undefined && item["maximum"] != null) {
          mem_min += (total_memory - item["maximum"]) / total_memory
          mem_min_count += 1
        }
      })
    }

    if (mem_min_count != 0) { mem_min = mem_min / mem_min_count * 100 }
    if (mem_max_count != 0) { mem_max = mem_max / mem_max_count * 100 }
    if (mem_avg_count != 0) { mem_avg = mem_avg / mem_avg_count * 100 }

    vm_tags = []

    if (typeof(vm['tags']) == 'object') {
      _.each(Object.keys(vm['tags']), function(key) {
        vm_tags.push(key + '=' + vm['tags'][key])
      })
    }

    result.push({
      resourceName: vm['resourceName'],
      resourceGroup: vm['resourceGroup'],
      resourceId: vm['resourceId'],
      resourceKind: vm['resourceKind'],
      region: vm['region'],
      osType: vm['osType'],
      resourceType: vm['resourceType'],
      subscriptionId: vm['subscriptionId'],
      subscriptionName: vm['subscriptionName'],
      tags: vm_tags.join(', '),
      cpu_minimum: parseFloat(cpu_min.toFixed(2)),
      cpu_maximum: parseFloat(cpu_max.toFixed(2)),
      cpu_average: parseFloat(cpu_avg.toFixed(2)),
      mem_minimum: parseFloat(mem_min.toFixed(2)),
      mem_maximum: parseFloat(mem_max.toFixed(2)),
      mem_average: parseFloat(mem_avg.toFixed(2)),
      service: "Microsoft.Compute",
      underutil_message: "",
      idle_message: "",
      underutil_total_savings: "",
      idle_total_savings: ""
    })
  })
EOS
end

datasource "ds_instance_costs" do
  iterate $ds_azure_subscriptions_filtered
  request do
    run_script $js_instance_costs, val(iter_item, 'id'), $ds_top_level_bcs, rs_org_id, rs_optima_host
  end
  result do
    encoding "json"
    collect jmes_path(response, "rows[*]") do
      field "resourceId", jmes_path(col_item, "dimensions.resource_id")
      field "cost", jmes_path(col_item, "metrics.cost_amortized_unblended_adj")
    end
  end
end

script "js_instance_costs", type: "javascript" do
  parameters "subscription_id", "ds_top_level_bcs", "rs_org_id", "rs_optima_host"
  result "request"
  code <<-EOS
  end_date = new Date()
  end_date.setDate(end_date.getDate() - 2)
  end_date = end_date.toISOString().split('T')[0]

  start_date = new Date()
  start_date.setDate(start_date.getDate() - 3)
  start_date = start_date.toISOString().split('T')[0]

  var request = {
    auth: "auth_flexera",
    host: rs_optima_host,
    verb: "POST",
    path: "/bill-analysis/orgs/" + rs_org_id + "/costs/select",
    body_fields: {
      dimensions: ["resource_id"],
      granularity: "day",
      start_at: start_date,
      end_at: end_date,
      metrics: ["cost_amortized_unblended_adj"],
      billing_center_ids: ds_top_level_bcs,
      limit: 100000,
      filter: {
        "type": "and",
        "expressions": [
          {
            "dimension": "service",
            "type": "equal",
            "value": "Microsoft.Compute"
          },
          {
            "dimension": "vendor_account",
            "type": "equal",
            "value": subscription_id
          },
          {
            "type": "not",
            "expression": {
              "dimension": "adjustment_name",
              "type": "substring",
              "substring": "Shared"
            }
          }
        ]
      }
    },
    headers: {
      'User-Agent': "RS Policies",
      'Api-Version': "1.0"
    },
    ignore_status: [400]
  }
EOS
end

datasource "ds_instance_costs_grouped" do
  run_script $js_instance_costs_grouped, $ds_instance_costs
end

script "js_instance_costs_grouped", type: "javascript" do
  parameters "ds_instance_costs"
  result "result"
  code <<-EOS
  // Multiple a single day's cost by the average number of days in a month.
  // The 0.25 is to account for leap years for extra precision.
  cost_multiplier = 365.25 / 12

  // Group cost data by resourceId for later use
  result = {}

  _.each(ds_instance_costs, function(item) {
    id = item['resourceId'].toLowerCase()

    if (result[id] == undefined) { result[id] = 0.0 }
    result[id] += item['cost'] * cost_multiplier
  })
EOS
end

datasource "ds_azure_instance_size_map" do
  request do
    verb "GET"
    host "raw.githubusercontent.com"
    path "/rightscale/policy_templates/master/data/azure/instance_types.json"
    header "User-Agent", "RS Policies"
  end
end

datasource "ds_idle_and_underutil_instances" do
  run_script $js_idle_and_underutil_instances, $ds_azure_instances_filtered, $ds_azure_instances_metrics_organized, $ds_instance_costs_grouped, $ds_azure_instance_size_map, $ds_currency, $ds_applied_policy, $param_stats_idle_threshold_cpu_value, $param_stats_idle_threshold_mem_value, $param_stats_underutil_threshold_cpu_value, $param_stats_underutil_threshold_mem_value, $param_stats_check_both, $param_stats_threshold, $param_min_savings, $param_stats_lookback
end

script "js_idle_and_underutil_instances", type:"javascript" do
  parameters "ds_azure_instances_filtered", "ds_azure_instances_metrics_organized", "ds_instance_costs_grouped", "ds_azure_instance_size_map", "ds_currency", "ds_applied_policy", "param_stats_idle_threshold_cpu_value", "param_stats_idle_threshold_mem_value", "param_stats_underutil_threshold_cpu_value", "param_stats_underutil_threshold_mem_value", "param_stats_check_both", "param_stats_threshold", "param_min_savings", "param_stats_lookback"
  result "result"
  code <<-'EOS'
  // Used for formatting numbers to look pretty
  function formatNumber(number, separator){
    numString = number.toString()
    values = numString.split(".")
    formatted_number = ''

    while (values[0].length > 3) {
      var chunk = values[0].substr(-3)
      values[0] = values[0].substr(0, values[0].length - 3)
      formatted_number = separator + chunk + formatted_number
    }

    if (values[0].length > 0) { formatted_number = values[0] + formatted_number }
    if (values[1] == undefined) { return formatted_number }

    return formatted_number + "." + values[1]
  }

  // The key name is lowercase, param value needs to be lowercase.
  threshold_statistic = param_stats_threshold.toLowerCase()

  // Determine whether we're checking for CPU, memory, or both
  checking_cpu = param_stats_underutil_threshold_cpu_value != -1 || param_stats_idle_threshold_cpu_value != -1
  checking_mem = param_stats_underutil_threshold_mem_value != -1 || param_stats_idle_threshold_mem_value != -1

  underutil_total_savings = 0.0
  idle_total_savings = 0.0

  underutil_list = []
  idle_list = []

  // Only bother doing anything if we're checking at least one metric
  if (checking_cpu || checking_mem) {
    // Loop through metrics data, appending cost data
    _.each(ds_azure_instances_metrics_organized, function(instance) {
      id = instance['resourceId'].toLowerCase()

      // Assume cost is 0 unless we have cost data for the instance
      total_cost = 0.0
      if (ds_instance_costs_grouped[id] != undefined) { total_cost = ds_instance_costs_grouped[id] }

      // Add baked-in values
      instance['savingsCurrency'] = ds_currency['symbol']
      instance['lookbackPeriod'] = param_stats_lookback
      instance['thresholdType'] = param_stats_threshold

      // Store relevant CPU and memory stats into these variables for later use
      cpu_value = instance['cpu_' + threshold_statistic]
      mem_value = instance['mem_' + threshold_statistic]

      // Test for whether to consider the instance idle or underutilized.
      // Assume instance is not idle or underutilized by default.
      is_idle = false
      is_underutil = false

      // Determine if the instance is idle or underutilized for each category.
      // Store boolean result for later use.
      is_idle_cpu = cpu_value < param_stats_idle_threshold_cpu_value
      is_underutil_cpu = cpu_value < param_stats_underutil_threshold_cpu_value
      is_idle_mem = mem_value < param_stats_idle_threshold_mem_value
      is_underutil_mem = mem_value < param_stats_underutil_threshold_mem_value

      // If we're only checking CPU, simply set is_idle/is_underutil to their CPU equivalents
      if (!checking_mem) { is_idle = is_idle_cpu }
      if (!checking_mem) { is_underutil = is_underutil_cpu }

      // If we're only checking memory, simply set is_idle/is_underutil to their memory equivalents
      if (!checking_cpu) { is_idle = is_idle_mem }
      if (!checking_cpu) { is_underutil = is_underutil_mem }

      // If we're checking both, do an 'and' or an 'or' depending on the value of param_stats_check_both
      if (checking_cpu && checking_mem) {
        if (param_stats_check_both == "Both CPU and Memory") {
          is_idle = is_idle_cpu && is_idle_mem
          is_underutil = is_underutil_cpu && is_underutil_mem
        } else {
          is_idle = is_idle_cpu || is_idle_mem
          is_underutil = is_underutil_cpu || is_underutil_mem
        }
      }

      instance["newResourceType"] = null

      // Set appropriate values based on whether instance is idle or underutilized
      // and then add it to the appropriate list
      if (is_idle) {
        instance["savings"] = parseFloat(parseFloat(total_cost).toFixed(3))
        instance["recommendationType"] = "Delete"
        instance["threshold"] = param_stats_idle_threshold_cpu_value
        instance["memoryThreshold"] = param_stats_idle_threshold_mem_value

        recommendationDetails = [
          "Delete Azure virtual machine ", instance["resourceName"], " ",
          "in Azure Subscription ", instance["subscriptionName"], " ",
          "(", instance["subscriptionId"], ")"
        ]

        instance["recommendationDetails"] = recommendationDetails.join('')

        if (instance['savings'] >= param_min_savings) {
          idle_total_savings += total_cost
          idle_list.push(instance)
        }
      } else if (is_underutil) {
        instance["savings"] = parseFloat(parseFloat(total_cost / 2).toFixed(3))
        instance["recommendationType"] = "Downsize"
        instance["threshold"] = param_stats_underutil_threshold_cpu_value
        instance["memoryThreshold"] = param_stats_underutil_threshold_mem_value

        if (ds_azure_instance_size_map[instance['resourceType']]) {
          instance["newResourceType"] = ds_azure_instance_size_map[instance['resourceType']]['down']
        }

        recommendationDetails = [
          "Resize Azure virtual machine ", instance["resourceName"], " ",
          "in Azure Subscription ", instance["subscriptionName"], " ",
          "(", instance["subscriptionId"], ") ",
          "from ", instance["resourceType"], " ",
          "to ", instance["newResourceType"]
        ]

        instance["recommendationDetails"] = recommendationDetails.join('')

        if (instance["newResourceType"] != null && instance["newResourceType"] != undefined) {
          if (instance['savings'] >= param_min_savings) {
            underutil_total_savings += total_cost / 2
            underutil_list.push(instance)
          }
        }
      }
    })
  }

  // Build out the detail_template for the incidents
  if (checking_cpu || checking_mem) {
    instances_total = ds_azure_instances_filtered.length.toString()
    underutil_instances_total = underutil_list.length.toString()
    underutil_instances_percentage = (underutil_instances_total / instances_total * 100).toFixed(2).toString() + '%'
    idle_instances_total = idle_list.length.toString()
    idle_instances_percentage = (idle_instances_total / instances_total * 100).toFixed(2).toString() + '%'

    underutil_total_savings = ds_currency['symbol'] + ' ' + formatNumber(parseFloat(underutil_total_savings).toFixed(2), ds_currency['separator'])
    idle_total_savings = ds_currency['symbol'] + ' ' + formatNumber(parseFloat(idle_total_savings).toFixed(2), ds_currency['separator'])

    underutil_findings = [
      "Out of ", instances_total, " Azure virtual machines analyzed, ",
      underutil_instances_total, " (", underutil_instances_percentage,
      ") are underutilized and recommended for downsizing. "
    ].join('')

    idle_findings = [
      "Out of ", instances_total, " Azure virtual machines analyzed, ",
      idle_instances_total, " (", idle_instances_percentage,
      ") are idle and recommended for termination. "
    ].join('')

    if (checking_cpu && checking_mem) {
      message_boolean = "or"

      if (param_stats_check_both == "Both CPU and Memory") {
        message_boolean = "and"
      }

      underutil_analysis_message = [
        "A virtual machine is considered underutilized if its CPU usage (",
        param_stats_threshold.toLowerCase(), ") is below ",
        param_stats_underutil_threshold_cpu_value, "% ", message_boolean,
        " its memory usage (", param_stats_threshold.toLowerCase(),
        ") is below ", param_stats_underutil_threshold_mem_value,
        "% but its CPU usage is still above or equal to ",
        param_stats_idle_threshold_cpu_value, "% ", message_boolean,
        " its memory usage is still above or equal to ",
        param_stats_idle_threshold_mem_value, "%. "
      ].join('')

      idle_analysis_message = [
        "A virtual machine is considered idle if its CPU usage (",
        param_stats_threshold.toLowerCase(), ") is below ",
        param_stats_idle_threshold_cpu_value, "% ", message_boolean,
        " its memory usage (", param_stats_threshold.toLowerCase(),
        ") is below ", param_stats_idle_threshold_mem_value, "%. "
      ].join('')

      lookback_message = [
        "CPU and memory usage was analyzed over the last ",
        param_stats_lookback.toString(), " days.\n\n"
      ].join('')
    }

    if (checking_cpu && !checking_mem) {
      underutil_analysis_message = [
        "A virtual machine is considered underutilized if its CPU usage (",
        param_stats_threshold.toLowerCase(), ") is below ",
        param_stats_underutil_threshold_cpu_value,
        "% but its CPU usage is still above or equal to ",
        param_stats_idle_threshold_cpu_value, "%. "
      ].join('')

      idle_analysis_message = [
        "A virtual machine is considered idle if its CPU usage (",
        param_stats_threshold.toLowerCase(), ") is below ",
        param_stats_idle_threshold_cpu_value, "%. "
      ].join('')

      lookback_message = [
        "CPU usage was analyzed over the last ",
        param_stats_lookback.toString() + " days.\n\n"
      ].join('')
    }

    if (!checking_cpu && checking_mem) {
      underutil_analysis_message = [
        "A virtual machine is considered underutilized if its memory usage (",
        param_stats_threshold.toLowerCase(), ") is below ",
        param_stats_underutil_threshold_mem_value,
        "% but its memory usage is still above or equal to ",
        param_stats_idle_threshold_mem_value, "%. "
      ].join('')

      idle_analysis_message = [
        "A virtual machine is considered idle if its memory usage (",
        param_stats_threshold.toLowerCase(), ") is below ",
        param_stats_idle_threshold_mem_value, "%. "
      ].join('')

      lookback_message = [
        "Memory usage was analyzed over the last ",
        param_stats_lookback.toString() + " days.\n\n"
      ].join('')
    }

    disclaimer = "The above settings can be modified by editing the applied policy and changing the appropriate parameters."

    underutil_message = underutil_findings + underutil_analysis_message + lookback_message + disclaimer
    idle_message = idle_findings + idle_analysis_message + lookback_message + disclaimer
  } else {
    underutil_message = "No results were found because all CPU and memory parameters were set to -1 when this policy was applied. Please terminate and reapply this policy with one of these settings enabled."
    idle_message = underutil_message
  }

  // Sort by descending order of savings value
  idle_list = _.sortBy(idle_list, function(item) { return item['savings'] * -1 })
  underutil_list = _.sortBy(underutil_list, function(item) { return item['savings'] * -1 })

  // Add these to both lists to ensure the first item that fails validation for each
  // contains the necessary data for the summary and detail templates
  if (idle_list.length > 0) {
    idle_list[0]['idle_message'] = idle_message
    idle_list[0]['idle_total_savings'] = idle_total_savings
    idle_list[0]['policy_name'] = ds_applied_policy['name']
  }

  if (underutil_list.length > 0) {
    underutil_list[0]['underutil_message'] = underutil_message
    underutil_list[0]['underutil_total_savings'] = underutil_total_savings
    underutil_list[0]['policy_name'] = ds_applied_policy['name']
  }

  result = {
    idle_list: idle_list,
    underutil_list: underutil_list
  }
EOS
end

datasource "ds_underutilized_instances" do
  run_script $js_underutilized_instances, $ds_idle_and_underutil_instances
end

script "js_underutilized_instances", type: "javascript" do
  parameters "ds_idle_and_underutil_instances"
  result "result"
  code <<-EOS
  result = [{
    "recommendationType": "",
    "underutil_message": "",
    "idle_message": "",
    "underutil_total_savings": "",
    "idle_total_savings": "",
    "tags": "",
    "savings": "",
    "savingsCurrency": "",
    "cpu_maximum": "",
    "cpu_minimum": "",
    "cpu_average": "",
    "mem_maximum": "",
    "mem_minimum": "",
    "mem_average": ""
  }]

  result = ds_idle_and_underutil_instances["underutil_list"].concat(result)
EOS
end

datasource "ds_idle_instances" do
  run_script $js_idle_instances, $ds_idle_and_underutil_instances
end

script "js_idle_instances", type: "javascript" do
  parameters "ds_idle_and_underutil_instances"
  result "result"
  code <<-EOS
  result = [{
    "recommendationType": "",
    "underutil_message": "",
    "idle_message": "",
    "underutil_total_savings": "",
    "idle_total_savings": "",
    "tags": "",
    "savings": "",
    "savingsCurrency": "",
    "cpu_maximum": "",
    "cpu_minimum": "",
    "cpu_average": "",
    "mem_maximum": "",
    "mem_minimum": "",
    "mem_average": ""
  }]

  result = ds_idle_and_underutil_instances["idle_list"].concat(result)
EOS
end


###############################################################################
# Policy
###############################################################################

policy "pol_utilization" do
  validate_each $ds_underutilized_instances do
    summary_template "{{ with index data 0 }}{{ .policy_name }}{{ end }}: {{ len data }} Azure Underutilized Virtual Machines Found"
    detail_template <<-'EOS'
    **Potential Monthly Savings:** {{ with index data 0 }}{{ .underutil_total_savings }}{{ end }}

    {{ with index data 0 }}{{ .underutil_message }}{{ end }}
    EOS
    # Policy check fails and incident is created only if data is not empty and the Parent Policy has not been terminated
    check logic_or($ds_parent_policy_terminated, ne(val(item, "recommendationType"), "Downsize"))
    escalate $esc_email
    escalate $esc_downsize_instances
    hash_exclude "underutil_message", "idle_message", "underutil_total_savings", "idle_total_savings", "tags", "savings", "savingsCurrency", "cpu_maximum", "cpu_minimum", "cpu_average", "mem_maximum", "mem_minimum", "mem_average"
    export do
      resource_level true
      field "accountID" do
        label "Subscription ID"
        path "subscriptionId"
      end
      field "accountName" do
        label "Subscription Name"
        path "subscriptionName"
      end
      field "resourceGroup" do
        label "Resource Group"
      end
      field "resourceName" do
        label "Resource Name"
      end
      field "resourceID" do
        label "Resource ID"
        path "resourceId"
      end
      field "tags" do
        label "Resource Tags"
      end
      field "recommendationDetails" do
        label "Recommendation"
      end
      field "resourceType" do
        label "Instance Size"
      end
      field "newResourceType" do
        label "Recommended Instance Size"
      end
      field "resourceKind" do
        label "Resource Kind"
      end
      field "region" do
        label "Region"
      end
      field "osType" do
        label "Operating System"
      end
      field "savings" do
        label "Estimated Monthly Savings"
      end
      field "savingsCurrency" do
        label "Savings Currency"
      end
      field "cpuMaximum" do
        label "CPU Maximum %"
        path "cpu_maximum"
      end
      field "cpuMinimum" do
        label "CPU Minimum %"
        path "cpu_minimum"
      end
      field "cpuAverage" do
        label "CPU Average %"
        path "cpu_average"
      end
      field "memMaximum" do
        label "Memory Maximum %"
        path "mem_maximum"
      end
      field "memMinimum" do
        label "Memory Minimum %"
        path "mem_minimum"
      end
      field "memAverage" do
        label "Memory Average %"
        path "mem_average"
      end
      field "thresholdType" do
        label "Threshold Statistic"
      end
      field "threshold" do
        label "CPU Threshold"
      end
      field "memoryThreshold" do
        label "Memory Threshold"
      end
      field "lookbackPeriod" do
        label "Look Back Period (Days)"
      end
      field "service" do
        label "Service"
      end
      field "id" do
        label "ID"
        path "resourceId"
      end
    end
  end
  validate_each $ds_idle_instances do
    summary_template "{{ with index data 0 }}{{ .policy_name }}{{ end }}: {{ len data }} Azure Idle Virtual Machines Found"
    detail_template <<-'EOS'
    **Potential Monthly Savings:** {{ with index data 0 }}{{ .idle_total_savings }}{{ end }}

    {{ with index data 0 }}{{ .idle_message }}{{ end }}
    EOS
    # Policy check fails and incident is created only if data is not empty and the Parent Policy has not been terminated
    check logic_or($ds_parent_policy_terminated, ne(val(item, "recommendationType"), "Delete"))
    escalate $esc_email
    escalate $esc_delete_instances
    hash_exclude "underutil_message", "idle_message", "underutil_total_savings", "idle_total_savings", "tags", "savings", "savingsCurrency", "cpu_maximum", "cpu_minimum", "cpu_average", "mem_maximum", "mem_minimum", "mem_average"
    export do
      resource_level true
      field "accountID" do
        label "Subscription ID"
        path "subscriptionId"
      end
      field "accountName" do
        label "Subscription Name"
        path "subscriptionName"
      end
      field "resourceGroup" do
        label "Resource Group"
      end
      field "resourceName" do
        label "Resource Name"
      end
      field "resourceID" do
        label "Resource ID"
        path "resourceId"
      end
      field "tags" do
        label "Resource Tags"
      end
      field "recommendationDetails" do
        label "Recommendation"
      end
      field "resourceType" do
        label "Instance Size"
      end
      field "resourceKind" do
        label "Resource Kind"
      end
      field "region" do
        label "Region"
      end
      field "osType" do
        label "Operating System"
      end
      field "savings" do
        label "Estimated Monthly Savings"
      end
      field "savingsCurrency" do
        label "Savings Currency"
      end
      field "cpuMaximum" do
        label "CPU Maximum %"
        path "cpu_maximum"
      end
      field "cpuMinimum" do
        label "CPU Minimum %"
        path "cpu_minimum"
      end
      field "cpuAverage" do
        label "CPU Average %"
        path "cpu_average"
      end
      field "memMaximum" do
        label "Memory Maximum %"
        path "mem_maximum"
      end
      field "memMinimum" do
        label "Memory Minimum %"
        path "mem_minimum"
      end
      field "memAverage" do
        label "Memory Average %"
        path "mem_average"
      end
      field "thresholdType" do
        label "Threshold Statistic"
      end
      field "threshold" do
        label "CPU Threshold"
      end
      field "memoryThreshold" do
        label "Memory Threshold"
      end
      field "lookbackPeriod" do
        label "Look Back Period (Days)"
      end
      field "service" do
        label "Service"
      end
      field "id" do
        label "ID"
        path "resourceId"
      end
    end
  end
end

###############################################################################
# Escalations
###############################################################################

escalation "esc_email" do
  automatic true
  label "Send Email"
  description "Send incident email"
  email $param_email
end

escalation "esc_downsize_instances" do
  automatic contains($param_automatic_action, "Downsize Instances")
  label "Downsize Instances"
  description "Approval to downsize all selected instances"
  run "downsize_instances", data, $param_azure_endpoint
end

escalation "esc_delete_instances" do
  automatic contains($param_automatic_action, "Delete Instances")
  label "Delete Instances"
  description "Approval to delete all selected instances"
  run "delete_instances", data, $param_azure_endpoint
end

###############################################################################
# Cloud Workflow
###############################################################################

#DOWNSIZE AZURE VM INSTANCE DEFINITION
define downsize_instances($data, $param_azure_endpoint) return $all_responses do
  # Change "No" to "Yes" to enable CWF debug logging
  $log_to_cm_audit_entries = "No"

  $$debug = $log_to_cm_audit_entries == "Yes"

  $response={}

  $syslog_subject = "Azure Instance Utilization with Log Analytics Policy: "
  foreach $item in $data do
    if $item["recommendedVmSize"] != "N/A"
      sub on_error: skip do
        $response = http_request(
          auth: $$auth_azure,
          verb: "patch",
          host: $param_azure_endpoint,
          https: true,
          href: $item["id"],
          query_strings: {
            "api-version": "2019-03-01"
          },
          headers:{
            "content-type": "application/json"
          },
          body: {
            "properties":{
              "hardwareProfile": {
                "vmSize": $item["recommendedVmSize"]
              }
            }
          }
        )
      call sys_log(join([$syslog_subject, "Response"]), to_s($response))
      end
  end
  end
end

#TERMINATE AZURE VM INSTANCE DEFINITION
define delete_instances($data, $param_azure_endpoint) return $all_responses do
  # Change "No" to "Yes" to enable CWF debug logging
  $log_to_cm_audit_entries = "No"

  $$debug = $log_to_cm_audit_entries == "Yes"

  $$log = []
  $all_responses = []
  $syslog_subject = "Azure Delete Instance: "
  call sys_log(join([$syslog_subject, "Identified Instances"]),to_s($data))
  $all_responses = []
  foreach $item in $data do
    sub on_error: skip do
      $response = http_request(
        verb: "delete",
        host: $param_azure_endpoint,
        auth: $$auth_azure,
        href: $item["id"],
        https: true,
        query_strings: {
          "api-version": "2018-06-01"
        },
        headers: {
          "cache-control": "no-cache",
          "content-type": "application/json"
        }
      )
      $all_responses << $response
    end
  end
  call sys_log(join([$syslog_subject, "Responses"]), to_s($all_responses))
end

#function to log
define sys_log($subject, $detail) do
  if $$debug
    rs_cm.audit_entries.create(
      notify: "None",
      audit_entry: {
        auditee_href: @@account,
        summary: $subject,
        detail: $detail
      }
    )
  end
end

###############################################################################
# Meta Policy [alpha]
# Not intended to be modified or used by policy developers
###############################################################################

# If the meta_parent_policy_id is not set it will evaluate to an empty string and we will look for the policy itself,
# if it is set we will look for the parent policy.
datasource "ds_get_policy" do
  request do
    auth $auth_flexera
    host rs_governance_host
    ignore_status [404]
    path join(["/api/governance/projects/", rs_project_id, "/applied_policies/", switch(ne(meta_parent_policy_id,""), meta_parent_policy_id, policy_id) ])
    header "Api-Version", "1.0"
  end
  result do
    encoding "json"
    field "id", jmes_path(response, "id")
  end
end


datasource "ds_parent_policy_terminated" do
  run_script $js_decide_if_self_terminate, $ds_get_policy, policy_id, meta_parent_policy_id
end

# If the policy was applied by a meta_parent_policy we confirm it exists if it doesn't we confirm we are deleting
# This information is used in two places:
# - determining whether or not we make a delete call
# - determining if we should create an incident (we don't want to create an incident on the run where we terminate)
script "js_decide_if_self_terminate", type: "javascript" do
  parameters "found", "self_policy_id", "meta_parent_policy_id"
  result "result"
  code <<-EOS
  var result
  if (meta_parent_policy_id != "" && found.id == undefined) {
    result = true
  } else {
    result = false
  }
  EOS
end

# Two potentials ways to set this up:
# - this way and make a unneeded 'get' request when not deleting
# - make the delete request an interate and have it iterate over an empty array when not deleting and an array with one item when deleting
script "js_make_terminate_request", type: "javascript" do
  parameters "should_delete", "policy_id", "rs_project_id", "rs_governance_host"
  result "request"
  code <<-EOS

  var request = {
    auth:  'auth_flexera',
    host: rs_governance_host,
    path: "/api/governance/projects/" + rs_project_id + "/applied_policies/" + policy_id,
    headers: {
      "API-Version": "1.0",
      "Content-Type":"application/json"
    },
  }

  if (should_delete) {
    request.verb = 'DELETE'
  }
  EOS
end

datasource "ds_terminate_self" do
  request do
    run_script $js_make_terminate_request, $ds_parent_policy_terminated, policy_id, rs_project_id, rs_governance_host
  end
end

datasource "ds_is_deleted" do
  run_script $js_check_deleted, $ds_terminate_self
end

# This is just a way to have the check delete request connect to the farthest leaf from policy.
# We want the delete check to the first thing the policy does to avoid the policy erroring before it can decide whether or not it needs to self terminate
# Example a customer deletes a credential and then terminates the parent policy. We still want the children to self terminate
# The only way I could see this not happening is if the user who applied the parent_meta_policy was offboarded or lost policy access, the policies who are impersonating the user
# would not have access to self-terminate
# It may be useful for the backend to enable a mass terminate at some point for all meta_child_policies associated with an id.
script "js_check_deleted", type: "javascript" do
  parameters "response"
  result "result"
  code <<-EOS
  result = {"path":"/"}
  EOS
end

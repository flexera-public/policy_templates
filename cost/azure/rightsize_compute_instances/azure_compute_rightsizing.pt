name "Azure Rightsize Compute Instances"
rs_pt_ver 20180301
type "policy"
short_description "Checks for instances that have inefficient utilization for the last 30 days and rightsizes or terminates them after approval. \n See the [README](https://github.com/flexera-public/policy_templates/tree/master/cost/azure/rightsize_compute_instances/) and [docs.flexera.com/flexera/EN/Automation](https://docs.flexera.com/flexera/EN/Automation/AutomationGS.htm) to learn more."
long_description ""
category "Cost"
severity "low"
default_frequency "weekly"
info(
  version: "2.3",
  provider: "Azure",
  service: "Compute",
  policy_set: "Rightsize Compute Instances",
  recommendation_type: "Usage Reduction"
)

###############################################################################
# Parameters
###############################################################################

parameter "param_email" do
  type "list"
  label "Email addresses"
  description "Email addresses of the recipients you wish to notify when new incidents are created"
  default []
end

parameter "param_cpu_idle_avg_percentage" do
  type "number"
  label "Idle Instance CPU Threshold (%)"
  description "Average CPU threshold at which to trigger instance termination"
  default 5
  min_value 0
  max_value 100
end

parameter "param_cpu_underutil_avg_percentage" do
  type "number"
  label "Inefficient Instance CPU Threshold (%)"
  description "Average CPU threshold at which to trigger instance downsize"
  default 40
  min_value 0
  max_value 100
end

parameter "param_threshold_statistic" do
  type "string"
  label "Threshold Statistic"
  description "Statistic to use for the metric threshold"
  default "Average"
  allowed_values "Average", "Minimum", "Maximum"
end

parameter "param_subscription_allowed_list" do
  label "Subscription Allowed List"
  type "list"
  description "Allowed Subscriptions, if empty, all subscriptions will be checked"
  default []
end

parameter "param_exclusion_tag_key" do
  category "User Inputs"
  label "Exclusion Tag Key"
  description "An Azure-native instance tag key to ignore instances that you don't want to consider for downsizing. Example: exclude_utilization"
  type "string"
  default ""
end

parameter "param_automatic_action" do
  type "list"
  label "Automatic Actions"
  description "When this value is set, this policy will automatically take the selected action(s)"
  allowed_values ["Terminate Instances"]
  default []
end

parameter "param_azure_endpoint" do
  type "string"
  label "Azure Endpoint"
  description "The Azure Resource Manager API endpoint to use."
  allowed_values "management.azure.com", "management.chinacloudapi.cn"
  default "management.azure.com"
end

parameter "param_log_to_cm_audit_entries" do
  type "string"
  label "Log to CM Audit Entries"
  description "Boolean for whether or not to log any debugging information from actions to CM Audit Entries, this should be left set to No on Flexera EU"
  default "No"
  allowed_values "Yes", "No"
end

###############################################################################
# Authentication
###############################################################################

#AUTHENTICATE WITH AZURE
credentials "azure_auth" do
  schemes "oauth2"
  label "Azure"
  description "Select the Azure Resource Manager Credential from the list."
  tags "provider=azure_rm"
end

#AUTHENTICATE WITH RIGHTSCALE/OPTIMA
credentials "auth_flexera" do
  schemes "oauth2"
  label "Flexera_Automation"
  description "Select FlexeraOne OAuth2 credentials"
  tags "provider=flexera"
end

###############################################################################
# Pagination
###############################################################################

#PAGINATION FOR AZURE APIS
pagination "azure_pagination" do
  get_page_marker do
    body_path "nextLink"
  end
  set_page_marker do
    uri true
  end
end

###############################################################################
# Datasources & Scripts
###############################################################################

#GET CURRENCY REFERENCE AND CURRENCY CODE FOR ORG
datasource "ds_currency_reference" do
  request do
    host "raw.githubusercontent.com"
    path "/rightscale/policy_templates/master/cost/scheduled_reports/currency_reference.json"
    header "User-Agent", "RS Policies"
  end
end

datasource "ds_currency_code" do
  request do
    auth $auth_flexera
    host rs_optima_host
    path join(["/bill-analysis/orgs/", rs_org_id, "/settings/currency_code"])
    header "Api-Version", "0.1"
    header "User-Agent", "RS Policies"
    ignore_status [403]
  end
  result do
    encoding "json"
    field "id", jmes_path(response, "id")
    field "value", jmes_path(response, "value")
  end
end

#GET ALL SUBSCRIPTION DETAILS
datasource "ds_subscriptions" do
  request do
    auth $azure_auth
    pagination $azure_pagination
    host $param_azure_endpoint
    path "/subscriptions/"
    query "api-version","2020-01-01"
    header "User-Agent", "RS Policies"
  end
  result do
    encoding "json"
    collect jmes_path(response, "value[*]") do
      field "subscriptionId", jmes_path(col_item, "subscriptionId")
      field "subscriptionName", jmes_path(col_item, "displayName")
      field "state", jmes_path(col_item, "state")
    end
  end
end

#FILTER SUBSCRIPTION BASED ON ALLOWED LIST PARAMETER
datasource "ds_filtered_subscriptions" do
  run_script $js_filtered_subscriptions, $ds_subscriptions, $param_subscription_allowed_list
end

script "js_filtered_subscriptions", type: "javascript" do
  parameters "ds_subscriptions", "param_subscription_allowed_list"
  result "result"
  code <<-EOS
  result = []

  if (param_subscription_allowed_list.length != 0) {
    _.each(param_subscription_allowed_list, function(sub) {
      found = _.find(ds_subscriptions, function(item) {
        return item['subscriptionId'] == sub || item['subscriptionName'].toLowerCase() == sub.toLowerCase()
      })

      result.push(found)
    })
  } else {
    result = ds_subscriptions
  }
EOS
end

#GET AZURE VIRTUAL MACHINE INSTANCES FOR EACH SUBSCRIPTION
datasource "ds_azure_instances" do
  iterate $ds_filtered_subscriptions
  request do
    auth $azure_auth
    pagination $azure_pagination
    host $param_azure_endpoint
    path join(["/subscriptions/", val(iter_item, "subscriptionId"), "/providers/Microsoft.Compute/virtualMachines"])
    query "api-version", "2019-03-01"
    header "User-Agent", "RS Policies"
    # Ignore status 400, 403, and 404 which can be returned in certain (legacy) types of Azure Subscriptions
    ignore_status [400, 403, 404]
  end
  result do
    encoding "json"
    collect jmes_path(response, "value[*]") do
      field "resourceId", jmes_path(col_item, "id")
      field "resourceGroup", get(4, split(jmes_path(col_item, "id"), '/'))
      field "resourceKind", jmes_path(col_item, "type")
      field "name", jmes_path(col_item, "name")
      field "region", jmes_path(col_item, "location")
      field "osType", jmes_path(col_item, "properties.storageProfile.osDisk.osType")
      field "resourceType", jmes_path(col_item, "properties.hardwareProfile.vmSize")
      field "tags", jmes_path(col_item, "tags")
      field "subscriptionId",val(iter_item, "subscriptionId")
      field "subscriptionName",val(iter_item, "subscriptionName")
    end
  end
end

#FILTER VIRTUAL MACHINE INSTANCES ON EXCLUSING TAG KEY PARAMETER
datasource "ds_filtered_instances" do
  run_script $js_filter_instances, $ds_azure_instances, $param_exclusion_tag_key
end

script "js_filter_instances", type: "javascript" do
  parameters "ds_azure_virtualmachines", "param_exclusion_tag_key"
  result "results"
  code <<-EOS
  results = _.filter(ds_azure_virtualmachines, function(instance) {
    tags = []

    if (!(_.has(instance['tags'], param_exclusion_tag_key))) {
      if (typeof instance['tags'] === "undefined" || instance['tags'] === null) {
        instance['tags'] = tags
      } else {
        Object.keys(instance['tags']).forEach(function(key) {
          tags.push(key + '=' + instance['tags'][key])
        })

        instance['tags'] = tags
        resourceKindSplit = instance['resourceKind'].split("/")
        service = resourceKindSplit[0]
        instance['service'] = service

        return instance
      }
    }
  })
EOS
end

#GET CPU PERFORMANCE STATS
datasource "ds_azure_instance_utilization" do
  iterate $ds_filtered_instances
  request do
    auth $azure_auth
    pagination $azure_pagination
    host $param_azure_endpoint
    path join(["/subscriptions/", val(iter_item, "subscriptionId"), "/resourceGroups/", val(iter_item, "resourceGroup"), "/providers/Microsoft.Compute/virtualMachines/", val(iter_item, "name"), "/providers/microsoft.insights/metrics"])
    query "api-version", "2018-01-01"
    query "timespan", "P30D"
    query "interval", "P1D"
    query "aggregation", "average,maximum,minimum"
    header "User-Agent", "RS Policies"
    # Ignore status 400, 403, and 404 which can be returned in certain (legacy) types of Azure Subscriptions
    ignore_status [400, 403, 404]
  end
  result do
    encoding "json"
    field "resourceName", val(iter_item, "name")
    field "resourceGroup", val(iter_item, "resourceGroup")
    field "resourceId", val(iter_item, "resourceId")
    field "resourceKind", val(iter_item, "resourceKind")
    field "region", val(iter_item, "region")
    field "tags", val(iter_item, "tags")
    field "osType", val(iter_item, "osType")
    field "resourceType", val(iter_item, "resourceType")
    field "service", val(iter_item, "service")
    field "subscriptionId",val(iter_item, "subscriptionId")
    field "subscriptionName",val(iter_item, "subscriptionName")
    field "statistics" do
      collect jmes_path(response, "value[].timeseries[].data[]") do
        field "average", jmes_path(col_item, "average")
        field "minimum", jmes_path(col_item, "minimum")
        field "maximum", jmes_path(col_item, "maximum")
      end
    end
  end
end

#FILTER VIRTUAL MACHINE INSTANCES ON CPU UTILIZATION PARAMETER
datasource "ds_filtered_instance_utilization" do
  run_script $js_filter_instance_utilization, $ds_azure_instance_utilization, $param_cpu_underutil_avg_percentage, $param_threshold_statistic
end

script "js_filter_instance_utilization", type: "javascript" do
  parameters "ds_azure_instance_utilization", "param_cpu_underutil_avg_percentage", "param_threshold_statistic"
  result "result"
  code <<-EOS
  var result = [];
  //Calculate average CPU for each instance
  _.each(ds_azure_instance_utilization, function(data) {
    total_of_avgs = 0, count = 0
    total_of_min = 0, count1 = 0
    total_of_max = 0, count2 = 0
    _.each(data.statistics, function(stat){
      if (stat.average != null) {
        total_of_avgs += stat.average;
        count++;
      }
      if (stat.minimum != null) {
        total_of_min += stat.minimum;
        count1++;
      }
      if (stat.maximum != null) {
        total_of_max += stat.maximum;
        count2++;
      }
    });
    data.averageCPU = count > 0 ? total_of_avgs / count : null;
    data.minCPU = count1 > 0 ? total_of_min / count1 : null;
    data.maxCPU = count2 > 0 ? total_of_max / count2 : null;
    data["savings"] = 0.0
    data = _.omit(data, "averages")
    result.push(data);
  })

  //Filter out instances if the CPU usage is above the Underutilized CPU threshold
  result = _.reject(result, function(util_data) {
    if (param_threshold_statistic.toLowerCase() === "minimum") {
      return  util_data.minCPU >= param_cpu_underutil_avg_percentage
    }
    if (param_threshold_statistic.toLowerCase() === "average") {
      return util_data.averageCPU >= param_cpu_underutil_avg_percentage
    }
    if (param_threshold_statistic.toLowerCase() === "maximum") {
      return util_data.maxCPU >= param_cpu_underutil_avg_percentage
    }
  })
EOS
end

#GET AZURE INSTANCE SIZE MAP
datasource "ds_azure_instance_size_map" do
  request do
    verb "GET"
    host "raw.githubusercontent.com"
    path "/rightscale/policy_templates/master/data/azure/instance_types.json"
    header "User-Agent", "RS Policies"
  end
end

#ADD AZURE INSTANCE DOWNSIZE DATA
datasource "ds_rightsizing_and_utilization_data" do
  run_script $js_add_instance_downsize_data, $ds_filtered_instance_utilization, $ds_azure_instance_size_map, $param_cpu_idle_avg_percentage, $param_threshold_statistic
end

script "js_add_instance_downsize_data", type: "javascript" do
  result "result"
  parameters "data", "instance_size_map", "param_cpu_idle_avg_percentage", "param_threshold_statistic"
  code <<-EOS
  result = []
  _.each(data, function(instance) {
    next_vm_size = null
    cpuValue = null;
    if (param_threshold_statistic.toLowerCase() === 'average') {
      cpuValue = instance.averageCPU;
    } else if (param_threshold_statistic.toLowerCase() === 'minimum') {
      cpuValue = instance.minCPU;
    } else if (param_threshold_statistic.toLowerCase() === 'maximum') {
      cpuValue = instance.maxCPU;
    }

    if (cpuValue >= param_cpu_idle_avg_percentage) {
      if (instance_size_map[instance['resourceType']] != undefined && instance_size_map[instance['resourceType']] != null) {
        next_vm_size = instance_size_map[instance['resourceType']]['down']
      }
    } else {
      next_vm_size = "Terminate Instance"
    }

    if (next_vm_size != null) {
      instance['recommendedVmSize'] = next_vm_size
      result.push(instance)
    }
  })
EOS
end

#GET BILLING CENTERS FOR ORG
datasource "ds_billing_centers" do
  request do
    auth $auth_flexera
    host rs_optima_host
    path join(["/analytics/orgs/", rs_org_id, "/billing_centers"])
    header "Api-Version", "1.0"
    header "User-Agent", "RS Policies"
    query "view", "allocation_table"
    ignore_status [403]
  end
  result do
    encoding "json"
    collect jmes_path(response, "[*]") do
      field "href", jmes_path(col_item, "href")
      field "id", jmes_path(col_item, "id")
      field "name", jmes_path(col_item, "name")
      field "parent_id", jmes_path(col_item, "parent_id")
    end
  end
end

#FILTER BILLING CENTERS FOR TOP LEVEL BCS
datasource "ds_top_level_billing_centers" do
  run_script $js_top_level_bc, $ds_billing_centers
end

script "js_top_level_bc", type: "javascript" do
  parameters "billing_centers"
  result "filtered_billing_centers"
  code <<-EOS
  filtered_billing_centers = _.reject(billing_centers, function(bc) {
    return bc.parent_id != null
  })
EOS
end

#GET INSTANCE COSTS FOR EACH BILLING CENTER
datasource "ds_instance_costs" do
  iterate $ds_filtered_subscriptions
  request do
    run_script $js_get_costs, val(iter_item, "subscriptionId"), $ds_top_level_billing_centers, rs_org_id, rs_optima_host
  end
  result do
    encoding "json"
    collect jmes_path(response,"rows[*]") do
      field "resource_id", jmes_path(col_item, "dimensions.resource_id")
      field "cost", jmes_path(col_item, "metrics.cost_amortized_unblended_adj")
    end
  end
end

script "js_get_costs", type: "javascript" do
  parameters "account_id", "billing_centers", "org", "optima_host"
  result "request"
  code <<-EOS
  //Get Start and End dates
  start_date = new Date()
  start_date.setMonth(start_date.getMonth() - 1)
  start_date = start_date.toISOString().split('-')[0] + '-' + start_date.toISOString().split('-')[1]

  end_date = new Date()
  end_date = end_date.toISOString().split('-')[0] + '-' + end_date.toISOString().split('-')[1]

  request = {
    auth: "auth_flexera",
    host: optima_host,
    verb: "POST",
    path: "/bill-analysis/orgs/" + org + "/costs/select",
    body_fields: {
      "dimensions": ["resource_id"],
      "granularity": "month",
      "start_at": start_date,
      "end_at": end_date,
      "metrics": ["cost_amortized_unblended_adj"],
      "billing_center_ids": _.compact(_.map(billing_centers, function(value) { return value.id })),
      "limit": 100000,
      "filter": {
        "expressions": [
          {
            "dimension": "service",
            "type": "equal",
            "value": "Microsoft.Compute"
          },
          {
            "dimension": "vendor_account",
            "type": "equal",
            "value": account_id
          },
          {
            "type": "not",
            "expression": {
              "dimension": "adjustment_name",
              "type": "substring",
              "substring": "Shared"
            }
          }
        ],
        "type": "and"
      }
    },
    headers: {
      "User-Agent": "RS Policies",
      "Api-Version": "1.0"
    },
    ignore_status: [400]
  }
EOS
end

datasource "ds_cost_object" do
  run_script $js_cost_object, $ds_instance_costs
end

script "js_cost_object", type: "javascript" do
  parameters "instance_cost_data"
  result "result"
  code <<-EOS
  result = {}

  _.each(instance_cost_data, function(item) {
    resource_id = item['resource_id'].toLowerCase()

    if (result[resource_id] == undefined) {
      result[resource_id] = 0
    }

    result[resource_id] += item['cost']
  })
EOS
end

#COMBINE INSTANCE UTILIZATION DATA WITH INSTANCE COST DATA
datasource "ds_combined_data" do
  run_script $js_combine_data, $ds_rightsizing_and_utilization_data, $ds_cost_object, $ds_currency_code, $ds_currency_reference, $ds_billing_centers, $param_cpu_idle_avg_percentage, $param_cpu_underutil_avg_percentage
end

script "js_combine_data", type: "javascript" do
  parameters "instance_utilization_data", "instance_costs", "ds_currency_code", "ds_currency_reference", "ds_billing_centers", "param_idle_prc", "param_underutil_prc"
  result "result"
  code <<-EOS
  function formatNumber(number, separator) {
    numString = number.toString()
    values = numString.split(".")
    formattedNumber = ''

    while (values[0].length > 3) {
      chunk = values[0].substr(-3)
      values[0] = values[0].substr(0, values[0].length - 3)
      formattedNumber = separator + chunk + formattedNumber
    }

    if (values[0].length > 0) {
      formattedNumber = values[0] + formattedNumber
    }

    if (values[1] == undefined) {
      return formattedNumber
    }

    return formattedNumber + "." + values[1]
  }

  //Format costs with currency symbol and thousands separator
  if (ds_currency_code['value'] !== undefined) {
    if (ds_currency_reference[ds_currency_code['value']] !== undefined) {
      cur = ds_currency_reference[ds_currency_code['value']]['symbol']

      if (ds_currency_reference[ds_currency_code['value']]['t_separator'] !== undefined) {
        separator = ds_currency_reference[ds_currency_code['value']]['t_separator']
      } else {
        separator = ""
      }
    } else {
      cur = ""
      separator = ""
    }
  } else {
    cur = "$"
    separator = ","
  }

  result = []
  underutil_total_savings = 0
  idle_total_savings = 0

  underutil_count = 0
  idle_count = 0

  _.each(instance_utilization_data, function(util_data) {
    instance_cost = instance_costs[util_data['resourceId'].toLowerCase()]

    if (instance_cost != null && instance_cost != undefined) {
      if (util_data['recommendedVmSize'] == "Terminate Instance") {
        util_data['savings'] = parseFloat(instance_cost).toFixed(3)
        idle_total_savings += instance_cost
      } else {
        util_data['savings'] = parseFloat(instance_cost / 2).toFixed(3)
        underutil_total_savings += instance_cost / 2
      }
    } else {
      util_data['savings'] = parseFloat(0).toFixed(3)
    }

    util_data['savingsCurrency'] = cur
    util_data['averageCPU'] = parseFloat(util_data['averageCPU']).toFixed(2)
    util_data['minCPU'] = parseFloat(util_data['minCPU']).toFixed(2)
    util_data['maxCPU'] = parseFloat(util_data['maxCPU']).toFixed(2)

    if (util_data['averageCPU'] === "NaN") {
      util_data['averageCPU'] = 0
    }
    if (util_data['minCPU'] === "NaN" ){
      util_data['minCPU'] = 0
    }
    if (util_data['maxCPU'] === "NaN") {
      util_data['maxCPU'] = 0
    }
    if (util_data['recommendedVmSize'] == "Terminate Instance") {
      idle_count += 1
    } else {
      underutil_count += 1
    }

    result.push(util_data)
  })

  result = _.sortBy(result, "region")
  result = _.sortBy(result, "subscriptionName")

  underutil_total_savings = cur + ' ' + formatNumber((Math.round(underutil_total_savings * 100) / 100), separator)
  idle_total_savings = cur + ' ' + formatNumber((Math.round(idle_total_savings * 100) / 100), separator)

  summary_data = {
    "underutilMessage": "The total estimated monthly savings is " + underutil_total_savings,
    "idleMessage": "The total estimated monthly savings is " + idle_total_savings,
    "underutilInstanceCount": underutil_count,
    "idleInstanceCount": idle_count
  }

  _.each(result, function(item) {
    item['summaryData'] = summary_data
    item['underutilThreshold'] = param_underutil_prc
    item['idleThreshold'] = param_idle_prc
    item['lookBackPeriod'] = "30 days"
  })
EOS
end

###############################################################################
# Policy
###############################################################################

policy "policy_azure_rightsizing_data" do
  validate_each $ds_combined_data do
    summary_template <<-EOS
    {{ rs_project_name }} (Account ID: {{ rs_project_id }}): {{ with index data 0 }}{{ .summaryData.underutilInstanceCount }}{{ end }} Azure underutilized compute instances found
        EOS
    detail_template <<-EOS
    {{ with index data 0 }}{{ .summaryData.underutilMessage }}{{ end }}
        EOS
    check eq(val(item, "recommendedVmSize"), "Terminate Instance")
    escalate $email
    escalate $esc_downsize_instances
    export do
      resource_level true
      field "subscriptionName" do
        label "Subscription Name"
      end
      field "subscriptionId" do
        label "Subscription ID"
      end
      field "resourceID" do
        label "Resource ID"
        path "resourceId"
      end
      field "resourceName" do
        label "Resource Name"
      end
      field "resourceKind" do
        label "Resource Kind"
      end
      field "resourceType" do
        label "Resource Type"
      end
      field "recommendedResourceType" do
        label "Recommended Resource Type"
        path "recommendedVmSize"
      end
      field "platform" do
        label "OS Type"
        path "osType"
      end
      field "region" do
        label "Region"
      end
      field "savings" do
        label "Estimated Monthly Savings"
      end
      field "savingsCurrency" do
        label "Savings Currency"
      end
      field "minCPU" do
        label "CPU Minimum (%)"
      end
      field "cpuAverage" do
        label "CPU Average (%)"
        path "averageCPU"
      end
      field "maxCPU" do
        label "CPU Maximum (%)"
      end
      field "resourceGroup" do
        label "Resource Group"
      end
      field "tags" do
        label "Tags"
      end
      field "service" do
        label "Service"
      end
      field "id" do
        label "ID"
        path "resourceId"
      end
      field "accountName" do
        label "Account Name"
        path "subscriptionName"
      end
      field "accountID" do
        label "Account ID"
        path "subscriptionId"
      end
      field "lookBackPeriod" do
        label "Lookback Period"
      end
      field "threshold" do
        label "Underutilized Threshold"
        path "underutilThreshold"
      end
    end
  end
  validate_each $ds_combined_data do
    summary_template <<-EOS
{{ rs_project_name }} (Account ID: {{ rs_project_id }}): {{ with index data 0 }}{{ .summaryData.idleInstanceCount }}{{end}} Azure idle compute instances found
EOS
    detail_template <<-EOS
{{ with index data 0 }}{{ .summaryData.idleMessage }}{{ end }}
EOS
    check ne(val(item, "recommendedVmSize"), "Terminate Instance")
    escalate $email
    escalate $esc_terminate_instances
    export do
      resource_level true
      field "subscriptionName" do
        label "Subscription Name"
      end
      field "subscriptionId" do
        label "Subscription ID"
      end
      field "resourceID" do
        label "Resource ID"
        path "resourceId"
      end
      field "resourceName" do
        label "Resource Name"
      end
      field "resourceKind" do
        label "Resource Kind"
      end
      field "resourceType" do
        label "Resource Type"
      end
      field "recommendedResourceType" do
        label "Recommended Resource Type"
        path "recommendedVmSize"
      end
      field "platform" do
        label "OS Type"
        path "osType"
      end
      field "region" do
        label "Region"
      end
      field "savings" do
        label "Estimated Monthly Savings"
      end
      field "savingsCurrency" do
        label "Savings Currency"
      end
      field "minCPU" do
        label "CPU Minimum (%)"
      end
      field "cpuAverage" do
        label "CPU Average (%)"
        path "averageCPU"
      end
      field "maxCPU" do
        label "CPU Maximum (%)"
      end
      field "resourceGroup" do
        label "Resource Group"
      end
      field "tags" do
        label "Tags"
      end
      field "service" do
        label "Service"
      end
      field "id" do
        label "ID"
        path "resourceId"
      end
      field "accountName" do
        label "Account Name"
        path "subscriptionName"
      end
      field "accountID" do
        label "Account ID"
        path "subscriptionId"
      end
      field "lookBackPeriod" do
        label "Lookback Period"
      end
      field "threshold" do
        label "Idle Threshold"
        path "idleThreshold"
      end
    end
  end
end

###############################################################################
# Escalations
###############################################################################

escalation "email" do
  automatic true
  label "Send Email"
  description "Send incident email"
  email $param_email
end

escalation "esc_downsize_instances" do
  automatic contains($param_automatic_action, "Downsize Instances")
  label "Downsize Instances"
  description "Approval to downsize all selected instances"
  run "downsize_instance", data, $param_log_to_cm_audit_entries, $param_azure_endpoint
end

escalation "esc_terminate_instances" do
  automatic contains($param_automatic_action, "Terminate Instances")
  label "Terminate Instances"
  description "Approval to terminate all selected instances"
  run "delete_instance", data, $param_log_to_cm_audit_entries, $param_azure_endpoint
end

###############################################################################
# Cloud Workflow
###############################################################################

#DOWNSIZE AZURE VM INSTANCE DEFINITION
define downsize_instance($data, $param_log_to_cm_audit_entries, $param_azure_endpoint) return $all_responses do
  $response={}
  $$debug = $param_log_to_cm_audit_entries == "Yes"
  $syslog_subject = "Azure Instance Utilization with Log Analytics Policy: "
  foreach $item in $data do
    if $item["recommendedVmSize"] != "N/A"
      sub on_error: skip do
        $response = http_request(
          auth: $$azure_auth,
          verb: "patch",
          host: $param_azure_endpoint,
          https: true,
          href: $item["id"],
          query_strings: {
            "api-version": "2019-03-01"
          },
          headers:{
            "content-type": "application/json"
          },
          body: {
            "properties":{
              "hardwareProfile": {
                "vmSize": $item["recommendedVmSize"]
              }
            }
          }
        )
      call sys_log(join([$syslog_subject, "Response"]),to_s($response))
      end
  end
  end
end

#TERMINATE AZURE VM INSTANCE DEFINITION
define delete_instance($data, $param_log_to_cm_audit_entries, $param_azure_endpoint) return $all_responses do
  $$debug = $param_log_to_cm_audit_entries == "Yes"
  $$log = []
  $all_responses = []
  $syslog_subject = "Azure Terminate Instance: "
  call sys_log(join([$syslog_subject, "Identified Instances"]),to_s($data))
  $all_responses = []
  foreach $item in $data do
    sub on_error: skip do
      $response = http_request(
        verb: "delete",
        host: $param_azure_endpoint,
        auth: $$azure_auth,
        href: join(["/subscriptions/", $item['subscriptionId'], "/resourceGroups/", $item["resourceGroup"], "/providers/Microsoft.Compute/virtualMachines/",$item["resourceName"]]),
        https: true,
        query_strings: {
          "api-version": "2018-06-01"
        },
        headers: {
          "cache-control": "no-cache",
          "content-type": "application/json"
        }
      )
      $all_responses << $response
    end
  end
  call sys_log(join([$syslog_subject, "Responses"]),to_s($all_responses))
end

#function to log
define sys_log($subject, $detail) do
  if $$debug
    rs_cm.audit_entries.create(
      notify: "None",
      audit_entry: {
        auditee_href: @@account,
        summary: $subject,
        detail: $detail
      }
    )
  end
end

name "Azure Rightsize NetApp Resources"
rs_pt_ver 20180301
type "policy"
short_description "Reports oversized NetApp capacity pools and volumes and, optionally, resizes them. See the [README](https://github.com/flexera-public/policy_templates/tree/master/cost/azure/rightsize_netapp/) and [docs.flexera.com/flexera/EN/Automation](https://docs.flexera.com/flexera/EN/Automation/AutomationGS.htm) to learn more."
long_description ""
doc_link "https://github.com/flexera-public/policy_templates/tree/master/cost/azure/rightsize_netapp/"
category "Cost"
severity "low"
default_frequency "weekly"
info(
  version: "2.0.7",
  provider: "Azure",
  service: "NetApp Files",
  policy_set: "Rightsize Storage",
  recommendation_type: "Usage Reduction",
  hide_skip_approvals: "true"
)

###############################################################################
# Parameters
###############################################################################

parameter "param_email" do
  type "list"
  category "Policy Settings"
  label "Email Addresses"
  description "A list of email addresses to notify."
  default []
end

parameter "param_azure_endpoint" do
  type "string"
  category "Policy Settings"
  label "Azure Endpoint"
  description "Select the API endpoint to use for Azure. Use default value of management.azure.com unless using Azure China."
  allowed_values "management.azure.com", "management.chinacloudapi.cn"
  default "management.azure.com"
end

parameter "param_stats_underutil_threshold_pool_value" do
  type "number"
  category "Statistics"
  label "Pool Allocated to Volume Threshold (%)"
  description "The allocation threshold at which to consider a NetApp pool to be 'oversized' and therefore be flagged for downsizing."
  min_value 0
  max_value 100
  default 50
end

parameter "param_stats_underutil_threshold_volume_value" do
  type "number"
  category "Statistics"
  label "Volume Consumed Capacity Threshold (%)"
  description "The capacity usage threshold at which to consider a NetApp volume to be 'oversized' and therefore be flagged for downsizing."
  min_value 0
  max_value 100
  default 50
end

parameter "param_exclusion_tags" do
  type "list"
  category "Filters"
  label "Exclusion Tags"
  description "Cloud native tags to ignore resources that you don't want to produce recommendations for. Enter the Key name to filter resources with a specific Key, regardless of Value, and enter Key==Value to filter resources with a specific Key:Value pair. Other operators and regex are supported; please see the README for more details."
  default []
end

parameter "param_exclusion_tags_boolean" do
  type "string"
  category "Filters"
  label "Exclusion Tags: Any / All"
  description "Whether to filter instances containing any of the specified tags or only those that contain all of them. Only applicable if more than one value is entered in the 'Exclusion Tags' field."
  allowed_values "Any", "All"
  default "Any"
end

parameter "param_subscriptions_allow_or_deny" do
  type "string"
  category "Filters"
  label "Allow/Deny Subscriptions"
  description "Allow or Deny entered Subscriptions"
  allowed_values "Allow", "Deny"
  default "Allow"
end

parameter "param_subscriptions_list" do
  type "list"
  category "Filters"
  label "Allow/Deny Subscriptions List"
  description "A list of allowed or denied Subscription IDs/names"
  default []
end

parameter "param_regions_allow_or_deny" do
  type "string"
  category "Filters"
  label "Allow/Deny Regions"
  description "Allow or deny entered regions. See the README for more details."
  allowed_values "Allow", "Deny"
  default "Allow"
end

parameter "param_regions_list" do
  type "list"
  category "Filters"
  label "Allow/Deny Regions List"
  description "A list of allowed or denied regions. See the README for more details."
  default []
end

parameter "param_show_size_increment_recommendations" do
  type "string"
  category "Filters"
  label "Show Upsize Recommendations"
  description "Whether or not to include upsize recommendations for pools and volumes"
  allowed_values "Yes", "No"
  default "No"
end

parameter "param_resource_types" do
  type "string"
  category "Filter"
  label "Resource Types"
  description "Whether to produce recommendations only for pools or for both pools and volumes"
  allowed_values "Pools", "Pools and Volumes"
  default "Pools"
end

parameter "param_min_savings" do
  type "number"
  category "Policy Settings"
  label "Minimum Savings Threshold"
  description "Minimum potential savings required to generate a recommendation"
  min_value 0
  default 0
end

parameter "param_automatic_action" do
  type "list"
  category "Actions"
  label "Automatic Actions"
  description "When this value is set, this policy will automatically take the selected action."
  allowed_values ["Rightsize NetApp Resources"]
  default []
end

###############################################################################
# Authentication
###############################################################################

credentials "auth_azure" do
  schemes "oauth2"
  label "Azure"
  description "Select the Azure Resource Manager Credential from the list."
  tags "provider=azure_rm"
end

credentials "auth_flexera" do
  schemes "oauth2"
  label "Flexera"
  description "Select Flexera One OAuth2 credentials"
  tags "provider=flexera"
end

###############################################################################
# Pagination
###############################################################################

pagination "pagination_azure" do
  get_page_marker do
    body_path "nextLink"
  end
  set_page_marker do
    uri true
  end
end

###############################################################################
# Datasources & Scripts
###############################################################################

# Get region-specific Flexera API endpoints
datasource "ds_flexera_api_hosts" do
  run_script $js_flexera_api_hosts, rs_optima_host
end

script "js_flexera_api_hosts", type: "javascript" do
  parameters "rs_optima_host"
  result "result"
  code <<-EOS
  host_table = {
    "api.optima.flexeraeng.com": {
	    api: "api.flexera.com",
      flexera: "api.flexera.com",
      fsm: "api.fsm.flexeraeng.com",
      grs: "grs-front.iam-us-east-1.flexeraeng.com",
      ui: "app.flexera.com",
      tld: "flexera.com"
    },
    "api.optima-eu.flexeraeng.com": {
	    api: "api.flexera.eu",
      flexera: "api.flexera.eu",
      fsm: "api.fsm-eu.flexeraeng.com",
      grs: "grs-front.eu-central-1.iam-eu.flexeraeng.com",
      ui: "app.flexera.eu",
      tld: "flexera.eu"
    },
    "api.optima-apac.flexeraeng.com": {
	    api: "api.flexera.au",
      flexera: "api.flexera.au",
      fsm: "api.fsm-apac.flexeraeng.com",
      grs: "grs-front.ap-southeast-2.iam-apac.flexeraeng.com",
      ui: "app.flexera.au",
      tld: "flexera.au"
    }
  }

  result = host_table[rs_optima_host]
EOS
end

# Get applied policy metadata for use later
datasource "ds_applied_policy" do
  request do
    auth $auth_flexera
    host val($ds_flexera_api_hosts, "flexera")
    path join(["/policy/v1/orgs/", rs_org_id, "/projects/", rs_project_id, "/applied-policies", switch(policy_id, join(["/", policy_id]), "")]])
  end
end

datasource "ds_currency_reference" do
  request do
    host "raw.githubusercontent.com"
    path "/flexera-public/policy_templates/master/data/currency/currency_reference.json"
    header "User-Agent", "RS Policies"
  end
end

datasource "ds_currency_code" do
  request do
    auth $auth_flexera
    host rs_optima_host
    path join(["/bill-analysis/orgs/", rs_org_id, "/settings/currency_code"])
    header "Api-Version", "0.1"
    header "User-Agent", "RS Policies"
    ignore_status [403]
  end
  result do
    encoding "json"
    field "id", jmes_path(response, "id")
    field "value", jmes_path(response, "value")
  end
end

datasource "ds_currency" do
  run_script $js_currency, $ds_currency_reference, $ds_currency_code
end

script "js_currency", type:"javascript" do
  parameters "ds_currency_reference", "ds_currency_code"
  result "result"
  code <<-EOS
  symbol = "$"
  separator = ","

  if (ds_currency_code['value'] != undefined) {
    if (ds_currency_reference[ds_currency_code['value']] != undefined) {
      symbol = ds_currency_reference[ds_currency_code['value']]['symbol']

      if (ds_currency_reference[ds_currency_code['value']]['t_separator'] != undefined) {
        separator = ds_currency_reference[ds_currency_code['value']]['t_separator']
      } else {
        separator = ""
      }
    }
  }

  result = {
    symbol: symbol,
    separator: separator
  }
EOS
end

datasource "ds_azure_subscriptions" do
  request do
    auth $auth_azure
    pagination $pagination_azure
    host $param_azure_endpoint
    path "/subscriptions/"
    query "api-version", "2020-01-01"
    header "User-Agent", "RS Policies"
    # Header X-Meta-Flexera has no affect on datasource query, but is required for Meta Policies
    # Forces `ds_is_deleted` datasource to run first during policy execution
    header "Meta-Flexera", val($ds_is_deleted, "path")
    # Ignore status 400, 403, and 404 which can be returned in certain (legacy) types of Azure Subscriptions
    ignore_status [400, 403, 404]
  end
  result do
    encoding "json"
    collect jmes_path(response, "value[*]") do
      field "id", jmes_path(col_item, "subscriptionId")
      field "name", jmes_path(col_item, "displayName")
      field "state", jmes_path(col_item, "state")
    end
  end
end

datasource "ds_azure_subscriptions_filtered" do
  run_script $js_azure_subscriptions_filtered, $ds_azure_subscriptions, $param_subscriptions_allow_or_deny, $param_subscriptions_list
end

script "js_azure_subscriptions_filtered", type: "javascript" do
  parameters "ds_azure_subscriptions", "param_subscriptions_allow_or_deny", "param_subscriptions_list"
  result "result"
  code <<-EOS
  if (param_subscriptions_list.length > 0) {
    result = _.filter(ds_azure_subscriptions, function(subscription) {
      include_subscription = _.contains(param_subscriptions_list, subscription['id']) || _.contains(param_subscriptions_list, subscription['name'])
      if (param_subscriptions_allow_or_deny == "Deny") { include_subscription = !include_subscription }
      return include_subscription
    })
  } else {
    result = ds_azure_subscriptions
  }
EOS
end

datasource "ds_naf_accounts" do
  iterate $ds_azure_subscriptions_filtered
  request do
    auth $auth_azure
    host $param_azure_endpoint
    path join(["/subscriptions/", val(iter_item, "id"), "/providers/Microsoft.NetApp/netAppAccounts"])
    query "api-version", "2023-05-01"
    ignore_status [400, 403, 404]
  end
  result do
    encoding "json"
    collect jmes_path(response, "value[*]") do
      field "subscription_id", jmes_path(iter_item, "id")
      field "subscription_name", val(iter_item, "name")
      field "resource_group_name", get(4, split(jmes_path(col_item, "id"), "/"))
      field "region", jmes_path(col_item, "location")
      field "naf_account_name", jmes_path(col_item, "name")
      field "tags", jmes_path(col_item, "tags")
    end
  end
end

datasource "ds_naf_accounts_region_filtered" do
  run_script $js_naf_accounts_region_filtered, $ds_naf_accounts, $param_regions_allow_or_deny, $param_regions_list
end

script "js_naf_accounts_region_filtered", type: "javascript" do
  parameters "ds_objects", "param_regions_allow_or_deny", "param_regions_list"
  result "result"
  code <<-EOS
  if (param_regions_list.length > 0) {
    result = _.filter(ds_objects, function(item) {
      include_item = _.contains(param_regions_list, item['region'])
      if (param_regions_allow_or_deny == "Deny") { include_item = !include_item }
      return include_item
    })
  } else {
    result = ds_objects
  }
EOS
end

datasource "ds_naf_accounts_tag_filtered" do
  run_script $js_objects_tag_filtered, $ds_naf_accounts_region_filtered, $param_exclusion_tags, $param_exclusion_tags_boolean
end

datasource "ds_naf_capacity_pools" do
  iterate $ds_naf_accounts_tag_filtered
  request do
    auth $auth_azure
    host $param_azure_endpoint
    path join(["/subscriptions/", val(iter_item, "subscription_id"), "/resourceGroups/", val(iter_item, "resource_group_name"), "/providers/Microsoft.NetApp/netAppAccounts/", val(iter_item, "naf_account_name"), "/capacityPools"])
    query "api-version", "2023-05-01"
    ignore_status [400, 403, 404]
  end
  result do
    encoding "json"
    collect jmes_path(response, "value[*]") do
      field "subscription_id", jmes_path(iter_item, "subscription_id")
      field "subscription_name", jmes_path(iter_item, "subscription_name")
      field "resource_group_name", jmes_path(iter_item, "resource_group_name")
      field "resource_kind", jmes_path(col_item, "type")
      field "service_type", first(split(jmes_path(col_item, "type"), "/"))
      field "naf_account_name", jmes_path(iter_item, "naf_account_name")
      field "naf_pool_id", jmes_path(col_item, "id")
      field "naf_pool_name", last(split(jmes_path(col_item, "name"), "/"))
      field "naf_pool_size", jmes_path(col_item, "properties.size")
      field "naf_pool_region", jmes_path(col_item, "location")
      field "naf_pool_service", jmes_path(col_item, "properties.serviceLevel")
      field "naf_pool_encryption", jmes_path(col_item, "properties.encryptionType")
      field "naf_pool_cool", jmes_path(col_item, "properties.coolAccess")
      field "naf_pool_created_at", jmes_path(col_item, "systemData.createdAt")
      field "tags", jmes_path(col_item, "tags")
    end
  end
end

datasource "ds_naf_capacity_pools_tag_filtered" do
  run_script $js_objects_tag_filtered, $ds_naf_capacity_pools, $param_exclusion_tags, $param_exclusion_tags_boolean
end

script "js_objects_tag_filtered", type: "javascript" do
  parameters "objects_to_filter", "param_exclusion_tags", "param_exclusion_tags_boolean"
  result "result"
  code <<-EOS
  comparators = _.map(param_exclusion_tags, function(item) {
    if (item.indexOf('==') != -1) {
      return { comparison: '==', key: item.split('==')[0], value: item.split('==')[1], string: item }
    }

    if (item.indexOf('!=') != -1) {
      return { comparison: '!=', key: item.split('!=')[0], value: item.split('!=')[1], string: item }
    }

    if (item.indexOf('=~') != -1) {
      value = item.split('=~')[1]
      regex = new RegExp(value.slice(1, value.length - 1))
      return { comparison: '=~', key: item.split('=~')[0], value: regex, string: item }
    }

    if (item.indexOf('!~') != -1) {
      value = item.split('!~')[1]
      regex = new RegExp(value.slice(1, value.length - 1))
      return { comparison: '!~', key: item.split('!~')[0], value: regex, string: item }
    }

    // If = is present but none of the above are, assume user error and that the user intended ==
    if (item.indexOf('=') != -1) {
      return { comparison: '==', key: item.split('=')[0], value: item.split('=')[1], string: item }
    }

    // Assume we're just testing for a key if none of the comparators are found
    return { comparison: 'key', key: item, value: null, string: item }
  })

  if (param_exclusion_tags.length > 0) {
    result = _.reject(objects_to_filter, function(resource) {
      resource_tags = {}
      if (typeof(resource['tags']) == 'object') { resource_tags = resource['tags'] }

      // Store a list of found tags
      found_tags = []

      _.each(comparators, function(comparator) {
        comparison = comparator['comparison']
        value = comparator['value']
        string = comparator['string']
        resource_tag = resource_tags[comparator['key']]

        if (comparison == 'key' && resource_tag != undefined) { found_tags.push(string) }
        if (comparison == '==' && resource_tag == value) { found_tags.push(string) }
        if (comparison == '!=' && resource_tag != value) { found_tags.push(string) }

        if (comparison == '=~') {
          if (resource_tag != undefined && value.test(resource_tag)) { found_tags.push(string) }
        }

        if (comparison == '!~') {
          if (resource_tag == undefined) { found_tags.push(string) }
          if (resource_tag != undefined && value.test(resource_tag)) { found_tags.push(string) }
        }
      })

      all_tags_found = found_tags.length == comparators.length
      any_tags_found = found_tags.length > 0 && param_exclusion_tags_boolean == 'Any'

      return all_tags_found || any_tags_found
    })
  } else {
    result = objects_to_filter
  }
EOS
end

datasource "ds_naf_pool_metrics" do
  iterate $ds_naf_capacity_pools_tag_filtered
  request do
    run_script $js_naf_pool_metrics, val(iter_item, "naf_pool_id"), $param_azure_endpoint
  end
  result do
    encoding "json"
    field "subscription_id", jmes_path(iter_item, "subscription_id")
    field "subscription_name", jmes_path(iter_item, "subscription_name")
    field "resource_group_name", jmes_path(iter_item, "resource_group_name")
    field "resource_kind", jmes_path(iter_item, "resource_kind")
    field "service_type", jmes_path(iter_item, "service_type")
    field "naf_account_name", jmes_path(iter_item, "naf_account_name")
    field "naf_pool_id", jmes_path(iter_item, "naf_pool_id")
    field "naf_pool_name", jmes_path(iter_item, "naf_pool_name")
    field "naf_pool_size", jmes_path(iter_item, "naf_pool_size")
    field "naf_pool_region", jmes_path(iter_item, "naf_pool_region")
    field "naf_pool_service", jmes_path(iter_item, "naf_pool_service")
    field "naf_pool_encryption", jmes_path(iter_item, "naf_pool_encryption")
    field "naf_pool_cool", jmes_path(iter_item, "naf_pool_cool")
    field "naf_pool_created_at", jmes_path(iter_item, "naf_pool_created_at")
    field "tags", jmes_path(iter_item, "tags")
    field "naf_pool_metrics", jmes_path(response, "value[*]")
  end
end

script "js_naf_pool_metrics", type: "javascript" do
  parameters "poolId", "param_azure_endpoint"
  result "request"
  code <<-EOS
  var end_date = new Date()

  var start_date = new Date(end_date)
  start_date.setHours(end_date.getHours() - 12)
  start_date.setMilliseconds(0)
  start_date.setSeconds(0)
  start_date.setMinutes(0)

  timespan = start_date.toISOString() + "/" + end_date.toISOString()

  var request = {
    auth: "auth_azure",
    host: param_azure_endpoint,
    path: poolId + "/providers/microsoft.insights/metrics",
    query_params: {
      "api-version": "2018-01-01",
      "metricnames": "VolumePoolAllocatedUsed,VolumePoolTotalLogicalSize,VolumePoolAllocatedSize",
      "timespan": timespan,
    },
    headers: {
      "User-Agent": "RS Policies",
    },
    ignore_status: [400, 403, 404]
  }
EOS
end

datasource "ds_naf_get_costs" do
  request do
    run_script $js_naf_get_costs, $ds_naf_capacity_pools_tag_filtered
  end
  result do
    encoding "json"
    collect jmes_path(response, "Items[*]") do
      field "retailPrice", jmes_path(col_item, "retailPrice")
      field "region", jmes_path(col_item, "armRegionName")
      field "skuName", jmes_path(col_item, "skuName")
    end
  end
end

script "js_naf_get_costs", type: "javascript" do
  parameters "ds_naf_capacity_pools_tag_filtered"
  result "request"
  code <<-EOS
  var locations = []
  var location = ""

  _.each(ds_naf_capacity_pools_tag_filtered, function(pool){
    locations.push("armRegionName eq '" + pool.naf_pool_region + "'")
  })

  if (locations.length > 0) { location = " and (" + locations.join(" or ") + ")" }

  var request = {
    host: "prices.azure.com"
    path: "/api/retail/prices"
    query_params: {
      "api-version": "2021-10-01-preview"
      "$filter": "serviceName eq 'Azure NetApp Files'" + location + " and priceType eq 'Consumption' and endsWith(meterName, 'Capacity') and (contains(skuName, 'Standard') or contains(skuName, 'Premium') or contains(skuName, 'Ultra'))"
    },
    ignore_status: [400, 403, 404]
  }
EOS
end

datasource "ds_naf_capacity_pools_option_filtered" do
  run_script $js_naf_capacity_pools_option_filtered, $ds_naf_capacity_pools_tag_filtered, $param_resource_types
end

script "js_naf_capacity_pools_option_filtered", type: "javascript" do
  parameters "ds_naf_capacity_pools_tag_filtered", "param_resource_types"
  result "result"
  code <<-EOS
  result = []

  if (param_resource_types == "Pools and Volumes") {
    result = ds_naf_capacity_pools_tag_filtered
  }
EOS
end

datasource "ds_naf_volumes" do
  iterate $ds_naf_capacity_pools_option_filtered
  request do
    auth $auth_azure
    host $param_azure_endpoint
    path join(["/subscriptions/", val(iter_item, "subscription_id"), "/resourceGroups/", val(iter_item, "resource_group_name"), "/providers/Microsoft.NetApp/netAppAccounts/", val(iter_item, "naf_account_name"), "/capacityPools/", val(iter_item, "naf_pool_name"), "/volumes"])
    query "api-version", "2023-05-01"
    ignore_status [400, 403, 404]
  end
  result do
    encoding "json"
    collect jmes_path(response, "value[*]") do
      field "subscription_id", jmes_path(iter_item, "subscription_id")
      field "resource_group_name", jmes_path(iter_item, "resource_group_name")
      field "resource_kind", jmes_path(col_item, "type")
      field "naf_account_name", jmes_path(iter_item, "naf_account_name")
      field "naf_pool_id", jmes_path(iter_item, "naf_pool_id")
      field "naf_pool_name", jmes_path(iter_item, "naf_pool_name")
      field "naf_pool_size", jmes_path(iter_item, "naf_pool_size")
      field "naf_pool_region", jmes_path(iter_item, "naf_pool_region")
      field "naf_pool_service", jmes_path(iter_item, "naf_pool_service")
      field "naf_pool_encryption", jmes_path(iter_item, "naf_pool_encryption")
      field "naf_pool_cool", jmes_path(iter_item, "naf_pool_cool")
      field "naf_volume_name", jmes_path(col_item, "name")
      field "naf_volume_id", jmes_path(col_item, "id")
      field "naf_usage_threshold", jmes_path(col_item, "properties.usageThreshold")
      field "naf_volume_created_at", jmes_path(col_item, "systemData.createdAt")
      field "tags", jmes_path(col_item, "tags")
    end
  end
end

datasource "ds_naf_volumes_tag_filtered" do
  run_script $js_objects_tag_filtered, $ds_naf_volumes, $param_exclusion_tags, $param_exclusion_tags_boolean
end

datasource "ds_naf_volume_metrics" do
  iterate $ds_naf_volumes_tag_filtered
  request do
    run_script $js_naf_volume_metrics, val(iter_item, "naf_volume_id"), $param_azure_endpoint
  end
  result do
    encoding "json"
    field "subscription_id", jmes_path(iter_item, "subscription_id")
    field "resource_group_name", jmes_path(iter_item, "resource_group_name")
    field "resource_kind", jmes_path(iter_item, "resource_kind")
    field "naf_account_name", jmes_path(iter_item, "naf_account_name")
    field "naf_pool_id", jmes_path(iter_item, "naf_pool_id")
    field "naf_pool_name", jmes_path(iter_item, "naf_pool_name")
    field "naf_pool_size", jmes_path(iter_item, "naf_pool_size")
    field "naf_pool_region", jmes_path(iter_item, "naf_pool_region")
    field "naf_pool_service", jmes_path(iter_item, "naf_pool_service")
    field "naf_pool_encryption", jmes_path(iter_item, "naf_pool_encryption")
    field "naf_pool_cool", jmes_path(iter_item, "naf_pool_cool")
    field "naf_volume_name", jmes_path(iter_item, "naf_volume_name")
    field "naf_volume_id", jmes_path(iter_item, "naf_volume_id")
    field "naf_usage_threshold", jmes_path(iter_item, "naf_usage_threshold")
    field "naf_volume_created_at", jmes_path(iter_item, "naf_volume_created_at")
    field "tags", jmes_path(iter_item, "tags")
    field "naf_volume_metrics", jmes_path(response, "value[*]")
  end
end

script "js_naf_volume_metrics", type: "javascript" do
  parameters "volId", "param_azure_endpoint"
  result "request"
  code <<-EOS
  var end_date = new Date()

  var start_date = new Date(end_date)
  start_date.setHours(end_date.getHours() - 12)
  start_date.setMilliseconds(0)
  start_date.setSeconds(0)
  start_date.setMinutes(0)

  timespan = start_date.toISOString() + "/" + end_date.toISOString()

  var request = {
    auth: "auth_azure",
    host: param_azure_endpoint,
    path: volId + "/providers/microsoft.insights/metrics",
    query_params: {
      "api-version": "2018-01-01",
      "metricnames": "VolumeLogicalSize,VolumeConsumedSizePercentage",
      "timespan": timespan,
    },
    headers: {
      "User-Agent": "RS Policies",
    },
    ignore_status: [400, 403, 404]
  }
EOS
end

datasource "ds_naf_oversized_pools" do
  run_script $js_naf_oversized_pools, $ds_naf_pool_metrics, $ds_naf_get_costs, $ds_currency, $ds_applied_policy, $param_stats_underutil_threshold_pool_value, $param_min_savings, $param_resource_types, $param_show_size_increment_recommendations
end

script "js_naf_oversized_pools", type: "javascript" do
  parameters "ds_naf_pool_metrics", "ds_naf_get_costs", "ds_currency", "ds_applied_policy", "param_stats_underutil_threshold_pool_value", "param_min_savings", "param_resource_types", "param_show_size_increment_recommendations"
  result "result"
  code <<-'EOS'
  // Variables
  result = []
  var minPoolSize = 2048
  var maxPoolSize = 1024000
  var total_savings = 0.0

  // Functions
  function bytesToGibibytes(bytes) { return Math.ceil(bytes * 9.3132257461548e-10) }

  function gibibytesToTebibytes(gibibytes) { return Math.ceil(gibibytes / 1024) }

  function poolCanBeResized(size, recommendedSize, param_show_size_increment_recommendations) {
    var sizeChangeGiB = Math.abs(size - recommendedSize)
    // Azure only admits 1 TiB steps
    if (sizeChangeGiB < 1024) { return false }
    if (recommendedSize == size) { return false }
    if (recommendedSize > size && param_show_size_increment_recommendations == "No") { return false }
    if (size == minPoolSize && recommendedSize < minPoolSize) { return false }
    if (size == maxPoolSize && recommendedSize > maxPoolSize) { return false }
    return true
  }

  function objectTagsToArrayTags(tags) {
    var arrayTags = []

    if (typeof(tags) == 'object') {
      _.each(Object.keys(tags), function(key) { arrayTags.push([key, "=", tags[key]].join('')) })
    }

    return arrayTags
  }

  function getMonthlyCost(pool, poolSize) {
    var monthlyCost = 0.0
    _.each(ds_naf_get_costs, function(cost){
      if (pool.naf_pool_region == cost.region) {
        if (pool.naf_pool_service == "Standard" && cost['skuName'].indexOf("Standard") > -1) {
          if (pool.naf_pool_cool == false && pool.naf_pool_encryption == "Single" && cost['skuName'] == "Standard") {
            monthlyCost = cost.retailPrice * poolSize * 730
          } else if (pool.naf_pool_cool == true && cost['skuName'].indexOf("Cool Access") > -1) {
            monthlyCost = cost.retailPrice * poolSize * 730
          } else if (pool.naf_pool_encryption == "Double" && cost['skuName'].indexOf("Double") > -1) {
            monthlyCost = cost.retailPrice * poolSize * 730
          }
        }

        if (pool.naf_pool_service == "Premium" && cost['skuName'].indexOf("Premium") > -1) {
          if (pool.naf_pool_encryption == "Single" && cost['skuName'] == "Premium") {
            monthlyCost = cost.retailPrice * poolSize * 730
          } else if (pool.naf_pool_encryption == "Double" && cost['skuName'].indexOf("Double") > -1) {
            monthlyCost = cost.retailPrice * poolSize * 730
          }
        }

        if (pool.naf_pool_service == "Ultra" && cost['skuName'].indexOf("Ultra") > -1) {
          if (pool.naf_pool_encryption == "Single" && cost['skuName'] == "Ultra") {
            monthlyCost = cost.retailPrice * poolSize * 730
          } else if (pool.naf_pool_encryption == "Double" && cost['skuName'].indexOf("Double") > -1) {
            monthlyCost = cost.retailPrice * poolSize * 730
          }
        }
      }
    })
    return monthlyCost
  }

  // Main Logic
  if (param_resource_types == "Pools") {
    _.each(ds_naf_pool_metrics, function(pool){
      _.each(pool.naf_pool_metrics, function (metric) {
        filteredTimeseries = _.filter(metric.timeseries[0].data, function(point) { return point.average != undefined })
        var lastPointInTS = _.last(filteredTimeseries).average
        switch (metric.name.value) {
          case "VolumePoolAllocatedUsed":
            pool.consumedSize = bytesToGibibytes(lastPointInTS)
            break
          case "VolumePoolAllocatedSize":
            pool.allocatedSize = bytesToGibibytes(lastPointInTS)
            break
        }
      })

      if (pool.allocatedSize != undefined && pool.consumedSize != undefined) {
        var poolConsumedPercentage = Math.round(pool.consumedSize * 100 / pool.allocatedSize)
        if (poolConsumedPercentage != param_stats_underutil_threshold_pool_value) {
          var poolRecommendedSize = Math.ceil(Math.ceil(pool.consumedSize * 100 / param_stats_underutil_threshold_pool_value) / 1024) * 1024
          if (poolCanBeResized(pool.allocatedSize, poolRecommendedSize, param_show_size_increment_recommendations)) {
            if (poolRecommendedSize < minPoolSize) { poolRecommendedSize = minPoolSize }
            if (poolRecommendedSize > maxPoolSize) { poolRecommendedSize = maxPoolSize }

            var allocatedSizeCost = getMonthlyCost(pool, pool.allocatedSize)
            var recommendedSizeCost = getMonthlyCost(pool, poolRecommendedSize)

            // If Recommended Size costs more than allocatedSize, savings will be 0
            var savings = (allocatedSizeCost-recommendedSizeCost) < 0 ? 0 : (allocatedSizeCost-recommendedSizeCost)
            if (savings >= param_min_savings) {
              total_savings += savings

              size = Math.round(pool['allocatedSize'] / 1024)
              recommendedSize = gibibytesToTebibytes(poolRecommendedSize)

              recommendationDetails = [
                "Downsize Azure NetApp Pool ", pool['naf_pool_name'], " ",
                "in Azure Subscription ", pool['subscription_name'], " ",
                "(", pool['subscription_id'], ") ",
                "from ", size, " TiB ",
                "to ", recommendedSize, " TiB"
              ].join('')

              result.push({
                accountID: pool['subscription_id'],
                accountName: pool['subscription_name'],
                resourceID: pool['naf_pool_id'],
                resourceGroup: pool['resource_group_name'],
                resourceName: pool['naf_pool_name'],
                size: size,
                allocatedUsed: (pool['consumedSize'] / 1024).toFixed(3),
                consumedPercentage: poolConsumedPercentage,
                createdAt: pool['naf_pool_created_at'],
                threshold: param_stats_underutil_threshold_pool_value,
                recommendedSize: recommendedSize,
                savings: parseFloat(savings.toFixed(3))
                id: pool['naf_pool_id'],
                region: pool['naf_pool_region'],
                resourceTier: pool['naf_pool_service'],
                resourceType: pool['resource_kind'],
                tags: objectTagsToArrayTags(pool.tags),
                savingsCurrency: "USD",
                service: pool['service_type'],
                recommendationDetails: recommendationDetails
              })
            }
          }
        }
      }
    })
  }

  if (result.length > 0 && param_resource_types == "Pools") {
    result[0].total_savings = total_savings.toFixed(2)
    result[0].savings_currency = "USD"
    result[0].message = "Pools shown here meet the following conditions:\n\n"
    result[0].message += "- A " + (param_show_size_increment_recommendations == "Yes" ? "different" : "lower") + " value than " + param_stats_underutil_threshold_pool_value + "% of used capacity.\n"
    result[0].message += "\nThe above settings can be modified by editing the applied policy and changing the appropriate parameters."
    result[0].policy_name = ds_applied_policy.name
  } else {
    result = [{
      accountID: "",
      accountName: "",
      resourceID: "",
      resourceGroup: "",
      resourceName: "",
      size: "",
      allocatedUsed: "",
      consumedPercentage: "",
      createdAt: "",
      threshold: "",
      recommendedSize: "",
      savings: "",
      id: "",
      region: "",
      resourceTier: "",
      resourceType: "",
      tags: "",
      savingsCurrency: "",
      service: "",
      recommendationDetails: "",
      total_savings: "",
      savings_currency: "",
      message: "",
      policy_name: ""
    }]
  }
EOS
end

datasource "ds_naf_oversized_volumes" do
  run_script $js_naf_oversized_volumes, $ds_naf_volume_metrics, $ds_naf_pool_metrics, $ds_naf_get_costs, $ds_currency, $ds_applied_policy, $param_stats_underutil_threshold_pool_value, $param_stats_underutil_threshold_volume_value, $param_min_savings, $param_resource_types, $param_show_size_increment_recommendations
end

script "js_naf_oversized_volumes", type: "javascript" do
  parameters "ds_naf_volume_metrics", "ds_naf_pool_metrics", "ds_naf_get_costs", "ds_currency", "ds_applied_policy", "param_stats_underutil_threshold_pool_value", "param_stats_underutil_threshold_volume_value", "param_min_savings", "param_resource_types", "param_show_size_increment_recommendations"
  result "result"
  code <<-'EOS'
  // Variables
  result = []
  var minPoolSize = 2048
  var maxPoolSize = 1024000
  var minVolSize = 100
  var maxVolSize = 512000
  var total_savings = 0.0

  // Functions
  function poolCanBeResized(size, recommendedSize, param_show_size_increment_recommendations) {
    var sizeChangeGiB = Math.abs(size - recommendedSize)
    // Azure only admits 1 TiB steps
    if (sizeChangeGiB < 1024) { return false }
    if (recommendedSize == size) { return false }
    if (recommendedSize > size && param_show_size_increment_recommendations == "No") { return false }
    if (size == minPoolSize && recommendedSize < minPoolSize) { return false }
    if (size == maxPoolSize && recommendedSize > maxPoolSize) { return false }
    return true
  }

  function objectTagsToArrayTags(tags) {
    var arrayTags = []

    if (typeof(tags) == 'object') {
      _.each(Object.keys(tags), function(key) { arrayTags.push([key, "=", tags[key]].join('')) })
    }

    return arrayTags
  }

  function getMonthlyCost(pool, poolSize) {
    var monthlyCost = 0.0
    _.each(ds_naf_get_costs, function(cost){
      if (pool.naf_pool_region == cost.region) {
        if (pool.naf_pool_service == "Standard" && cost['skuName'].indexOf("Standard") > -1) {
          if (pool.naf_pool_cool == false && pool.naf_pool_encryption == "Single" && cost['skuName'] == "Standard") {
            monthlyCost = cost.retailPrice * poolSize * 730
          } else if (pool.naf_pool_cool == true && cost['skuName'].indexOf("Cool Access") > -1) {
            monthlyCost = cost.retailPrice * poolSize * 730
          } else if (pool.naf_pool_encryption == "Double" && cost['skuName'].indexOf("Double") > -1) {
            monthlyCost = cost.retailPrice * poolSize * 730
          }
        }

        if (pool.naf_pool_service == "Premium" && cost['skuName'].indexOf("Premium") > -1) {
          if (pool.naf_pool_encryption == "Single" && cost['skuName'] == "Premium") {
            monthlyCost = cost.retailPrice * poolSize * 730
          } else if (pool.naf_pool_encryption == "Double" && cost['skuName'].indexOf("Double") > -1) {
            monthlyCost = cost.retailPrice * poolSize * 730
          }
        }

        if (pool.naf_pool_service == "Ultra" && cost['skuName'].indexOf("Ultra") > -1) {
          if (pool.naf_pool_encryption == "Single" && cost['skuName'] == "Ultra") {
            monthlyCost = cost.retailPrice * poolSize * 730
          } else if (pool.naf_pool_encryption == "Double" && cost['skuName'].indexOf("Double") > -1) {
            monthlyCost = cost.retailPrice * poolSize * 730
          }
        }
      }
    })
    return monthlyCost
  }

  function formatNumber(number, separator) {
    formatted_number = "0"

    if (number) {
      formatted_number = (Math.round(number * 100) / 100).toString().split(".")[0]

      if (separator) {
        withSeparator = ""

        for (var i = 0; i < formatted_number.length; i++) {
          if (i > 0 && (formatted_number.length - i) % 3 == 0) { withSeparator += separator }
          withSeparator += formatted_number[i]
        }

        formatted_number = withSeparator
      }

      decimal = (Math.round(number * 100) / 100).toString().split(".")[1]
      if (decimal) { formatted_number += "." + decimal }
    }

    return formatted_number
  }

  function bytesToGibibytes(bytes) { return Math.ceil(bytes * 9.3132257461548e-10) }

  function gibibytesToTebibytes(gibibytes) { return Math.ceil(gibibytes / 1024) }

  function volumeCanBeResized(size, recommendedSize) {
    if (size == minVolSize && recommendedSize < minVolSize) { return false }
    if (size == maxVolSize && recommendedSize > maxVolSize) { return false }
    return true
  }

  // Main logic
  if (param_resource_types == "Pools and Volumes") {
    _.each(ds_naf_volume_metrics, function(volume) {
      volume.volume_allocated_size = bytesToGibibytes(volume.naf_usage_threshold)
      _.each(volume.naf_volume_metrics, function(metric) {
        filteredTimeseries = _.filter(metric.timeseries[0].data, function(point) { return point.average != undefined })
        var lastPointInTS = _.last(filteredTimeseries).average
        switch (metric.name.value) {
          case "VolumeLogicalSize":
            volume.volume_logical_size = bytesToGibibytes(lastPointInTS)
            break
          case "VolumeConsumedSizePercentage":
            volume.volume_consumed_size_percentage = Math.round(lastPointInTS)
            break
        }
      })

      // Check if volume contains required metrics info
      volume.recommendedAllocatedSize = volume.volume_allocated_size
      if (volume.volume_logical_size != undefined && volume.volume_allocated_size != undefined && volume.volume_consumed_size_percentage != undefined) {
        if (volume.volume_consumed_size_percentage != param_stats_underutil_threshold_volume_value) {
          var recommendedVolumeAllocatedSize = Math.ceil(volume.volume_logical_size * 100 / param_stats_underutil_threshold_volume_value)
          if (volumeCanBeResized(volume.volume_allocated_size, recommendedVolumeAllocatedSize)) {
            if (recommendedVolumeAllocatedSize < minVolSize) { recommendedVolumeAllocatedSize = minVolSize }
            if (recommendedVolumeAllocatedSize > maxVolSize) { recommendedVolumeAllocatedSize = maxVolSize }
            volume.recommendedAllocatedSize = recommendedVolumeAllocatedSize
          }
        }
      }
    })
    _.each(ds_naf_pool_metrics, function(pool){
      pool.naf_pool_volumes = []
      var recommendedPoolAllocatedUsed = 0
      _.each(ds_naf_volume_metrics, function(volume) {
        if (pool.naf_pool_id == volume.naf_pool_id) {
          if (volume.recommendedAllocatedSize != volume.volume_allocated_size && volume.volume_logical_size != undefined) {
            endpool.naf_pool_volumes.push(volume)
          }
          recommendedPoolAllocatedUsed += volume.recommendedAllocatedSize
        }
      })

      _.each(pool.naf_pool_metrics, function (metric) {
        filteredTimeseries = _.filter(metric.timeseries[0].data, function(point) { return point.average != undefined })
        var lastPointInTS = _.last(filteredTimeseries).average

        switch (metric.name.value) {
          case "VolumePoolAllocatedUsed":
            pool.consumedSize = bytesToGibibytes(lastPointInTS)
            break
          case "VolumePoolAllocatedSize":
            pool.allocatedSize = bytesToGibibytes(lastPointInTS)
            break
        }
      })

      if (pool.allocatedSize != undefined && pool.consumedSize != undefined) {
        var poolConsumedPercentage = Math.round(recommendedPoolAllocatedUsed * 100 / pool.allocatedSize)
        var poolOldConsumedPercentage = Math.round(pool.consumedSize * 100 / pool.allocatedSize)
        if (poolConsumedPercentage != param_stats_underutil_threshold_pool_value) {
          var poolRecommendedSize = Math.ceil(Math.ceil(recommendedPoolAllocatedUsed * 100 / param_stats_underutil_threshold_pool_value) / 1024) * 1024
          if (poolCanBeResized(pool.allocatedSize, poolRecommendedSize, param_show_size_increment_recommendations)) {
            if (poolRecommendedSize < minPoolSize) {
              poolRecommendedSize = minPoolSize
            }
            if (poolRecommendedSize > maxPoolSize) {
              poolRecommendedSize = maxPoolSize
            }

            var allocatedSizeCost = getMonthlyCost(pool, pool.allocatedSize)
            var recommendedSizeCost = getMonthlyCost(pool, poolRecommendedSize)

            // If Recommended Size costs more than allocatedSize, savings will be 0
            var savings = (allocatedSizeCost-recommendedSizeCost) < 0 ? 0 : (allocatedSizeCost-recommendedSizeCost)
            if (savings >= param_min_savings) {
              total_savings += savings

              size = Math.round(pool['allocatedSize'] / 1024)
              recommendedSize = gibibytesToTebibytes(poolRecommendedSize)

              recommendationDetails = [
                "Downsize Azure NetApp Pool ", pool['naf_pool_name'], " ",
                "in Azure Subscription ", pool['subscription_name'], " ",
                "(", pool['subscription_id'], ") ",
                "from ", size, " TiB ",
                "to ", recommendedSize, " TiB"
              ].join('')

              result.push({
                accountID: pool['subscription_id'],
                accountName: pool['subscription_name'],
                resourceGroup: pool['resource_group_name'],
                service: pool['service_type'],
                resourceID: pool['naf_pool_id'],
                resourceName: pool['naf_pool_name'],
                resourceType: pool['resource_kind'],
                resourceTier: pool['naf_pool_service'],
                region: pool['naf_pool_region'],
                tags: objectTagsToArrayTags(pool.tags),
                size: size,
                sizeUnit: 'TiB',
                allocatedUsed: (pool['consumedSize'] / 1024).toFixed(3),
                allocatedUsedUnit: 'TiB',
                consumedPercentage: poolOldConsumedPercentage,
                threshold: param_stats_underutil_threshold_pool_value,
                recommendedSize: recommendedSize,
                recommendedSizeUnit: 'TiB',
                savings: parseFloat(savings.toFixed(3)),
                savingsCurrency: "USD",
                id: pool['naf_pool_id'],
                createdAt: pool['naf_pool_created_at'],
                recommendationDetails: recommendationDetails
              })

              _.each(pool.naf_pool_volumes, function(vol) {
                recommendationDetails = [
                  "Downsize Azure NetApp Volume ", vol['naf_volume_name'], " ",
                  "in Azure Subscription ", pool['subscription_name'], " ",
                  "(", pool['subscription_id'], ") ",
                  "from ", vol['volume_allocated_size'], " GiB ",
                  "to ", vol['recommendedAllocatedSize'], " GiB"
                ].join('')

                result.push({
                  accountID: pool['subscription_id'],
                  accountName: pool['subscription_name'],
                  resourceGroup: pool['resource_group_name'],
                  service: pool['service_type'],
                  resourceID: vol['naf_volume_id'],
                  resourceName: vol['naf_volume_name'],
                  resourceType: vol['resource_kind'],
                  resourceTier: pool['naf_pool_service'],
                  region: pool['naf_pool_region'],
                  tags: objectTagsToArrayTags(vol['tags']),
                  size: vol['volume_allocated_size'],
                  sizeUnit: 'GiB',
                  allocatedUsed: vol['volume_logical_size'],
                  allocatedUsedUnit: 'GiB',
                  consumedPercentage: vol['volume_consumed_size_percentage'],
                  threshold: param_stats_underutil_threshold_volume_value,
                  recommendedSize: vol['recommendedAllocatedSize'],
                  recommendedSizeUnit: 'GiB',
                  savings: 0,
                  savingsCurrency: "USD",
                  id: vol['naf_volume_id'],
                  createdAt: vol['naf_volume_created_at'],
                  recommendationDetails: recommendationDetails
                })
              })
            }
          }
        }
      }
    })
  }

  if (result.length > 0 && param_resource_types == "Pools and Volumes") {
    result[0].total_savings = total_savings.toFixed(2)
    result[0].savings_currency = "USD"
    var comparisonWord = (param_show_size_increment_recommendations == "Yes" ? "different" : "lower")
    result[0].message = "Resources shown here meet the following conditions:\n\n"
    result[0].message += "- Pools that have a " + comparisonWord + " value than " + param_stats_underutil_threshold_pool_value + "% of used capacity.\n"
    result[0].message += "- Volumes that have a " + comparisonWord + " value than " + param_stats_underutil_threshold_volume_value + "% of used capacity.\n"
    result[0].message += "\nThe above settings can be modified by editing the applied policy and changing the appropriate parameters."
    result[0].policy_name = ds_applied_policy.name
  } else {
    result = [{
      accountID: "",
      accountName: "",
      resourceGroup: "",
      service: "",
      resourceID: "",
      resourceName: "",
      resourceType: "",
      resourceTier: "",
      region: "",
      tags: "",
      size: "",
      sizeUnit: "",
      allocatedUsed: "",
      allocatedUsedUnit: "",
      consumedPercentage: "",
      threshold: "",
      recommendedSize: "",
      recommendedSizeUnit: "",
      savings: "",
      savingsCurrency: "",
      id: "",
      createdAt: "",
      recommendationDetails: "",
      total_savings: "",
      savings_currency: "",
      message: "",
      policy_name: ""
    }]
  }
EOS
end

###############################################################################
# Policy
###############################################################################

policy "pol_azure_rightsize_netapp_files" do
  validate_each $ds_naf_oversized_pools do
    summary_template "{{ with index data 0 }}{{ .policy_name }}{{ end }}: {{ len data }} Azure Oversized NetApp Pools Found"
    detail_template <<-'EOS'
    **Potential Monthly Savings:** {{ with index data 0 }}${{ .total_savings }} {{ .savings_currency }}

    {{ .message }}{{ end }}
    EOS
    # Policy check fails and incident is created only if data is not empty and the Parent Policy has not been terminated
    check logic_or($ds_parent_policy_terminated, eq(val(item, "resourceID"), ""))
    escalate $esc_email
    escalate $esc_rightsize_resources
    export do
      resource_level true
      field "accountID" do
        label "Account ID"
      end
      field "accountName" do
        label "Account Name"
      end
      field "resourceGroup" do
        label "Resource Group"
      end
      field "service" do
        label "Service"
      end
      field "resourceID" do
        label "Resource ID"
      end
      field "resourceName" do
        label "Resource Name"
      end
      field "createdAt" do
        label "Date/Time Created"
      end
      field "resourceType" do
        label "Resource Type"
      end
      field "resourceTier" do
        label "Resource Tier"
      end
      field "region" do
        label "Region"
      end
      field "tags" do
        label "Tags"
      end
      field "size" do
        label "Size (TiB)"
      end
      field "allocatedUsed" do
        label "Allocated Used (TiB)"
      end
      field "consumedPercentage" do
        label "Allocated Used %"
      end
      field "threshold" do
        label "Allocated Used Threshold %"
      end
      field "recommendationDetails" do
        label "Recommendation"
      end
      field "recommendedSize" do
        label "Recommended Size (TiB)"
      end
      field "savings" do
        label "Estimated Monthly Savings"
      end
      field "savingsCurrency" do
        label "Savings Currency"
      end
      field "id" do
        label "ID"
      end
    end
  end
  validate_each $ds_naf_oversized_volumes do
    summary_template "{{ with index data 0 }}{{ .policy_name }}{{ end }}: {{ len data }} Azure Oversized NetApp Pools And Volumes Found"
    detail_template <<-'EOS'
    **Potential Monthly Savings:** {{ with index data 0 }}${{ .total_savings }} {{ .savings_currency }}

    {{ .message }}{{ end }}
    EOS
    # Policy check fails and incident is created only if data is not empty and the Parent Policy has not been terminated
    check logic_or($ds_parent_policy_terminated, eq(val(item, "resourceID"), ""))
    escalate $esc_email
    escalate $esc_rightsize_resources
    export do
      resource_level true
      field "accountID" do
        label "Account ID"
      end
      field "accountName" do
        label "Account Name"
      end
      field "resourceGroup" do
        label "Resource Group"
      end
      field "service" do
        label "Service"
      end
      field "resourceID" do
        label "Resource ID"
      end
      field "resourceName" do
        label "Resource Name"
      end
      field "createdAt" do
        label "Date/Time Created"
      end
      field "resourceType" do
        label "Resource Type"
      end
      field "resourceTier" do
        label "Resource Tier"
      end
      field "region" do
        label "Region"
      end
      field "tags" do
        label "Tags"
      end
      field "size" do
        label "Size"
      end
      field "sizeUnit" do
        label "Size Unit"
      end
      field "allocatedUsed" do
        label "Allocated Used"
      end
      field "allocatedUsedUnit" do
        label "Allocated Used Unit"
      end
      field "consumedPercentage" do
        label "Allocated Used %"
      end
      field "threshold" do
        label "Allocated Used Threshold %"
      end
      field "recommendationDetails" do
        label "Recommendation"
      end
      field "recommendedSize" do
        label "Recommended Size"
      end
      field "recommendedSizeUnit" do
        label "Recommended Size Unit"
      end
      field "savings" do
        label "Estimated Monthly Savings"
      end
      field "savingsCurrency" do
        label "Savings Currency"
      end
      field "id" do
        label "ID"
      end
    end
  end
end

###############################################################################
# Escalations
###############################################################################

escalation "esc_email" do
  automatic true
  label "Send Email"
  description "Send incident email."
  email $param_email
end

escalation "esc_rightsize_resources" do
  automatic contains($param_automatic_action, "Rightsize NetApp Resources")
  label "Rightsize NetApp Resources"
  description "Approval to rightsize all selected NetApp resources"
  run "set_sizes", data, $param_azure_endpoint
end

###############################################################################
# Cloud Workflow
###############################################################################

define set_sizes($data, $param_azure_endpoint) return $all_responses do
  $$all_responses = []

  # Resize volumes first, so pools can be resized to the recommended by the policy.
  foreach $resource in $data do
    if $resource["resourceType"] == "Microsoft.NetApp/netAppAccounts/capacityPools/volumes"
      sub on_error: handle_error() do
        call set_volume_size($resource, $param_azure_endpoint) retrieve $set_size_response
      end
    end
  end

  # Resize pools.
  foreach $resource in $data do
    if $resource["resourceType"] == "Microsoft.NetApp/netAppAccounts/capacityPools"
      sub on_error: handle_error() do
        call set_pool_size($resource, $param_azure_endpoint) retrieve $set_size_response
      end
    end
  end

  if inspect($$errors) != "null"
    raise join($$errors, "\n")
  end
end

define set_pool_size($resource, $param_azure_endpoint) return $response do
  $host = $param_azure_endpoint
  $href = $resource["resourceID"]
  $params = "?api-version=2023-05-01"
  $url = $host + $href + $params
  task_label("PATCH " + $url)

  $response = http_request(
    auth: $$auth_azure,
    https: true,
    verb: "patch",
    host: $host,
    href: $href,
    query_strings: { "api-version": "2023-05-01" },
    body: {
      "properties": {
        "size": $resource["recommendedSize"] * (2 ^ 30)
      }
    }
  )

  task_label("Patch Azure NetApp capacity pool response: " + $resource["resourceID"] + " " + to_json($response))
  $$all_responses << to_json({ "req": "PATCH " + $url, "resp": $response })

  if $response["code"] != 204 && $response["code"] != 202 && $response["code"] != 200
    raise "Unexpected response patching Azure NetApp capacity pool: " + $resource["resourceID"] + " " + to_json($response)
  else
    task_label("Patch Azure NetApp capacity pool successful: " + $resource["resourceID"])
  end
end

define set_volume_size($resource, $param_azure_endpoint) return $response do
  $host = $param_azure_endpoint
  $href = $resource["resourceID"]
  $params = "?api-version=2023-07-01"
  $url = $host + $href + $params
  task_label("PATCH " + $url)

  $response = http_request(
    auth: $$auth_azure,
    https: true,
    verb: "patch",
    host: $host,
    href: $href,
    query_strings: { "api-version": "2023-07-01" },
    body: {
      "properties": {
        "usageThreshold": $resource["recommendedSize"] * (2 ^ 40)
      }
    }
  )

  task_label("Patch Azure NetApp volume response: " + $resource["resourceID"] + " " + to_json($response))
  $$all_responses << to_json({ "req": "PATCH " + $url, "resp": $response })

  if $response["code"] != 204 && $response["code"] != 202 && $response["code"] != 200
    raise "Unexpected response patching Azure NetApp volume: " + $resource["resourceID"] + " " + to_json($response)
  else
    task_label("Patch Azure NetApp volume successful: " + $resource["resourceID"])
  end
end

define handle_error() do
  if !$$errors
    $$errors = []
  end

  $$errors << $_error["type"] + ": " + $_error["message"]
  # We check for errors at the end, and raise them all together
  # Skip errors handled by this definition
  $_error_behavior = "skip"
end

###############################################################################
# Meta Policy [alpha]
# Not intended to be modified or used by policy developers
###############################################################################

# If the meta_parent_policy_id is not set it will evaluate to an empty string and we will look for the policy itself,
# if it is set we will look for the parent policy.
datasource "ds_get_policy" do
  request do
    auth $auth_flexera
    host rs_governance_host
    ignore_status [404]
    path join(["/api/governance/projects/", rs_project_id, "/applied_policies/", switch(ne(meta_parent_policy_id, ""), meta_parent_policy_id, policy_id) ])
    header "Api-Version", "1.0"
  end
  result do
    encoding "json"
    field "id", jmes_path(response, "id")
  end
end

datasource "ds_parent_policy_terminated" do
  run_script $js_decide_if_self_terminate, $ds_get_policy, policy_id, meta_parent_policy_id
end

# If the policy was applied by a meta_parent_policy we confirm it exists if it doesn't we confirm we are deleting
# This information is used in two places:
# - determining whether or not we make a delete call
# - determining if we should create an incident (we don't want to create an incident on the run where we terminate)
script "js_decide_if_self_terminate", type: "javascript" do
  parameters "found", "self_policy_id", "meta_parent_policy_id"
  result "result"
  code <<-EOS
  var result
  if (meta_parent_policy_id != "" && found.id == undefined) {
    result = true
  } else {
    result = false
  }
  EOS
end

# Two potentials ways to set this up:
# - this way and make a unneeded 'get' request when not deleting
# - make the delete request an interate and have it iterate over an empty array when not deleting and an array with one item when deleting
script "js_make_terminate_request", type: "javascript" do
  parameters "should_delete", "policy_id", "rs_project_id", "rs_governance_host"
  result "request"
  code <<-EOS

  var request = {
    auth: 'auth_flexera',
    host: rs_governance_host,
    path: "/api/governance/projects/" + rs_project_id + "/applied_policies/" + policy_id,
    headers: {
      "API-Version": "1.0",
      "Content-Type":"application/json"
    },
  }

  if (should_delete) {
    request.verb = 'DELETE'
  }
  EOS
end

datasource "ds_terminate_self" do
  request do
    run_script $js_make_terminate_request, $ds_parent_policy_terminated, policy_id, rs_project_id, rs_governance_host
  end
end

datasource "ds_is_deleted" do
  run_script $js_check_deleted, $ds_terminate_self
end

# This is just a way to have the check delete request connect to the farthest leaf from policy.
# We want the delete check to the first thing the policy does to avoid the policy erroring before it can decide whether or not it needs to self terminate
# Example a customer deletes a credential and then terminates the parent policy. We still want the children to self terminate
# The only way I could see this not happening is if the user who applied the parent_meta_policy was offboarded or lost policy access, the policies who are impersonating the user
# would not have access to self-terminate
# It may be useful for the backend to enable a mass terminate at some point for all meta_child_policies associated with an id.
script "js_check_deleted", type: "javascript" do
  parameters "response"
  result "result"
  code <<-EOS
  result = {"path":"/"}
  EOS
end

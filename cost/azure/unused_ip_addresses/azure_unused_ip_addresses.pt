name "Azure Unused IP Addresses"
rs_pt_ver 20180301
type "policy"
short_description "Checks for unused IP addresses in the given account and, optionally deletes them. See the [README](https://github.com/flexera/policy_templates/tree/master/cost/azure/unused_ip_addresses) and [docs.rightscale.com/policies](https://docs.rightscale.com/policies/) to learn more"
severity "low"
category "Cost"
default_frequency "daily"
info(
  version: "2.5",
  provider: "Azure",
  service: "Compute",
  policy_set: "Unused IP Addresses"
)

##################
# User inputs    #
##################

parameter "param_email" do
  type "list"
  label "Email Addresses"
  description "Email addresses of the recipients you wish to notify"
end

parameter "param_exclude_tags" do
  type "list"
  category "User Inputs"
  label "Exclude Tags"
  description "A list of tags used to exclude IP addresses from the incident."
end

parameter "param_automatic_action" do
  type "list"
  label "Automatic Actions"
  description "When this value is set, this policy will automatically take the selected action(s)"
  allowed_values ["Delete Unused IP Addresses"]
end

###############################################################################
# Authentication
###############################################################################

#Authenticate with azure
credentials "azure_auth" do
  schemes "oauth2"
  label "Azure"
  description "Select the Azure Resource Manager Credential from the list."
  tags "provider=azure_rm"
end

credentials "auth_rs" do
  schemes "oauth2"
  label "flexera"
  description "Select FlexeraOne OAuth2 credentials"
  tags "provider=flexera"
end

###############################################################################
# Pagination
###############################################################################

pagination "azure_pagination" do
  get_page_marker do
    body_path "nextLink"
  end
  set_page_marker do
    uri true
  end
end

###############################################################################
# Datasources
###############################################################################

#To get all subscriptions
datasource "ds_subscriptions" do
  request do
    auth $azure_auth
    pagination $azure_pagination
    host "management.azure.com"
    path "/subscriptions/"
    query "api-version", "2020-01-01"
    header "User-Agent", "RS Policies"
  end
  result do
    encoding "json"
    collect jmes_path(response, "value[*]") do
      field "subscriptionId", jmes_path(col_item,"subscriptionId")
      field "displayName", jmes_path(col_item,"displayName")
    end
  end
end

#To get all resource groups
datasource "ds_resource_groups" do
  iterate $ds_subscriptions
  request do
    auth $azure_auth
    pagination $azure_pagination
    host "management.azure.com"
    path join(["/subscriptions/",val(iter_item,"subscriptionId"),"/resourcegroups"])
    query "api-version","2019-10-01"
  end
  result do
    encoding "json"
    collect jmes_path(response, "value[*]") do
      field "resourceGroupName", jmes_path(col_item,"name")
      field "subscriptionId", val(iter_item,"subscriptionId")
      field "subscriptionName", val(iter_item,"displayName")
    end
  end
end

#To get all public IP addresses
datasource "ds_public_ip_addresses" do
  iterate $ds_resource_groups
  request do
    auth $azure_auth
    host "management.azure.com"
    path join(["/subscriptions/",val(iter_item,"subscriptionId"),"/resourceGroups/",val(iter_item,"resourceGroupName"),"/providers/Microsoft.Network/publicIPAddresses"])
    query "api-version","2020-03-01"
  end
  result do
    encoding "json"
    collect jmes_path(response,"value[*]") do
      field "subscriptionId", val(iter_item,"subscriptionId")
      field "subscriptionName", val(iter_item,"subscriptionName")
      field "resourceGroupName", val(iter_item,"resourceGroupName")
      field "ipAddressName", jmes_path(col_item,"name")
      field "location", jmes_path(col_item,"location")
      field "ipAddressId", jmes_path(col_item,"id")
      field "properties", jmes_path(col_item,"properties")
      field "tags", jmes_path(col_item,"tags")
    end
  end
end

datasource "ds_currency_reference" do
  request do
    host "raw.githubusercontent.com"
    path "/rightscale/policy_templates/master/cost/scheduled_reports/currency_reference.json"
    header "User-Agent", "RS Policies"
  end
end

datasource "ds_currency_code" do
  request do
    auth $auth_rs
    host rs_optima_host
    path join(["/bill-analysis/orgs/",rs_org_id,"/settings/currency_code"])
    header "Api-Version", "0.1"
    header "User-Agent", "RS Policies"
    ignore_status [403]
  end
  result do
    encoding "json"
    field "id", jmes_path(response,"id")
    field "value", jmes_path(response,"value")
  end
end

datasource "ds_billing_centers" do
  request do
    auth $auth_rs
    host rs_optima_host
    path join(["/analytics/orgs/",rs_org_id,"/billing_centers"])
    header "Api-Version", "1.0"
    header "User-Agent", "RS Policies"
    query "view", "allocation_table"
    ignore_status [403]
  end
  result do
    encoding "json"
    collect jmes_path(response,"[*]") do
      field "href", jmes_path(col_item,"href")
      field "id", jmes_path(col_item,"id")
      field "name", jmes_path(col_item,"name")
      field "parent_id", jmes_path(col_item,"parent_id")
    end
  end
end

datasource "ds_top_level_billing_centers" do
  run_script $js_top_level_bc, $ds_billing_centers
end

datasource "ds_ip_costs" do
  iterate $ds_subscriptions
  request do
    run_script $js_get_costs, val(iter_item,"subscriptionId"), $ds_top_level_billing_centers, rs_org_id, rs_optima_host
  end
  result do
    encoding "json"
    collect jmes_path(response,"rows[*]") do
      field "resource_id", jmes_path(col_item,"dimensions.resource_id")
      field "cost_nonamortized_unblended_adj", jmes_path(col_item,"metrics.cost_nonamortized_unblended_adj")
    end
  end
end

#Login to exclude tags and filter only unused IP addresses
datasource "ds_unused_ip_addresses" do
  run_script $js_exclude_tags, $ds_public_ip_addresses, $param_exclude_tags
end

datasource "ds_ip_cost_mapping" do
  run_script $js_ip_cost_mapping, $ds_unused_ip_addresses, $ds_ip_costs, $ds_currency_code, $ds_currency_reference, $ds_billing_centers
end

###############################################################################
# Scripts
###############################################################################

script "js_top_level_bc", type: "javascript" do
  parameters "billing_centers"
  result "filtered_billing_centers"
  code <<-EOS
  var filtered_billing_centers =
    _.reject(billing_centers, function(bc){ return bc.parent_id != null });
EOS
end

script "js_get_costs", type:"javascript" do
  parameters  "account_id","billing_centers","org", "optima_host"
  result "request"
  code <<-EOS
    // returns date formatted as string: YYYY-mm-dd
    function getFormattedDailyDate(date) {
      var year = date.getFullYear();
      var month = (1 + date.getMonth()).toString();
      month = month.length > 1 ? month : '0' + month;
      var day = date.getDate().toString();
      day = day.length > 1 ? day : '0' + day;
      return year + '-' + month + '-' + day;
    }
    var start_date = getFormattedDailyDate(new Date(new Date().setDate(new Date().getDate() - 3)));
    var end_date = getFormattedDailyDate(new Date(new Date().setDate(new Date().getDate() - 2)));
    var request = {
      auth: "auth_rs",
      host: optima_host,
      verb: "POST",
      path: "/bill-analysis/orgs/" + org + "/costs/select",
      body_fields: {
        "dimensions": ["resource_id"],
        "granularity": "day",
        "start_at": start_date,
        "end_at": end_date,
        "metrics": ["cost_nonamortized_unblended_adj"],
        "billing_center_ids": _.compact(_.map(billing_centers, function(value){ return value.id})),
        "limit": 10000,
        "filter": {
          "expressions": [
            {
              "dimension": "service",
              "type": "equal",
              "value": "Microsoft.Network"
            },
            {
              "dimension": "vendor_account",
              "type": "equal",
              "value": account_id
            },
            {
              "dimension": "resource_type",
              "type": "equal",
              "value": "Virtual Network-IP Addresses"
            }
          ],
          "type": "and"
        }
      },
      headers: {
        "User-Agent": "RS Policies",
        "Api-Version": "1.0"
      },
      ignore_status: [400]
    }
  EOS
end

script "js_exclude_tags", type: "javascript" do
  parameters "publicIPAddressesList","param_exclude_tags"
  result "results"
  code <<-EOS
    var results = [];
    _.each(publicIPAddressesList, function(ipAddress){
      var tags = '';
      var isTagMatched = false;
      var properties = ipAddress.properties;
      //Exclude tags
      for(var i=0;i<param_exclude_tags.length;i++){
        if(_.has(ipAddress.tags, param_exclude_tags[i])){
          isTagMatched = true;
		}
	  }

      if(!isTagMatched){
        if(properties.ipConfiguration == null){
          results.push({
            subscriptionId:ipAddress["subscriptionId"],
            subscriptionName:ipAddress["subscriptionName"],
            resourceGroupName:ipAddress["resourceGroupName"],
            ipAddressName:ipAddress["ipAddressName"],
            location:ipAddress["location"],
            tags:ipAddress["tags"],
            ipAddressId:ipAddress["ipAddressId"],
            savings:"N/A"
		  })
		}
	  }
	})
  EOS
end

script "js_ip_cost_mapping", type:"javascript" do
  parameters  "ip_list","ip_costs","ds_currency_code","ds_currency_reference", "ds_billing_centers"
  result "result"
  code <<-EOS
  var result = {};
  var unused_ip_list=[];
  var message='';
  var count=0;
  function formatNumber(number, separator){
    var numString =number.toString();
    var values=numString.split(".");
    var result = ''
    while (values[0].length > 3){
      var chunk = values[0].substr(-3)
      values[0] = values[0].substr(0, values[0].length - 3)
      result = separator + chunk + result
    }
    if (values[0].length > 0){
      result = values[0] + result
    }
    if(values[1]==undefined){
      return result;
    }
    return result+"."+values[1];
  }
  if(ds_billing_centers.length!=0){
    // Format costs with currency symbol and thousands separator
    if( ds_currency_code['value'] !== undefined ) {
      if (ds_currency_reference[ds_currency_code['value']] !== undefined ) {
        var cur = ds_currency_reference[ds_currency_code['value']]['symbol']
        if( ds_currency_reference[ds_currency_code['value']]['t_separator'] !== undefined ) {
          var separator = ds_currency_reference[ds_currency_code['value']]['t_separator']
        } else {
          var separator = ""
        }
      } else {
        var cur = ""
        var separator = ""
      }
    } else {
      var cur = "$"
      var separator = ","
    }
    var total_savings=0;
    _.each(ip_list, function(ip){
      var cost_objects = _.where(ip_costs, {resource_id: ip["ipAddressId"]});
      if (_.size(cost_objects) > 0){
        count++;
        var sum = _.reduce(_.compact(_.map(cost_objects, function(value){ return value.cost_nonamortized_unblended_adj})), function(memo, num){ return memo + num; }, 0);
        var monthly_savings = sum*30;
        total_savings=total_savings+monthly_savings;
        unused_ip_list.push({
          subscriptionId:ip["subscriptionId"],
          subscriptionName:ip["subscriptionName"],
          resourceGroupName:ip["resourceGroupName"],
          ipAddressName:ip["ipAddressName"],
          location:ip["location"],
          tags:ip["tags"],
          ipAddressId:ip["ipAddressId"],
          savings: cur + ' '+formatNumber((Math.round(monthly_savings * 100) / 100), separator)
        })
      } else {
        unused_ip_list.push({
          subscriptionId:ip["subscriptionId"],
          subscriptionName:ip["subscriptionName"],
          resourceGroupName:ip["resourceGroupName"],
          ipAddressName:ip["ipAddressName"],
          location:ip["location"],
          tags:ip["tags"],
          ipAddressId:ip["ipAddressId"],
          savings: "N/A"
        })
      }
    })
    if(count){
      total_savings=cur + ' '+formatNumber((Math.round(total_savings * 100) / 100), separator);
      message="The total estimated monthly savings are "+total_savings;
    }
    else{
      message="The Flexera Optima system does not have any data to calculate savings for these resources";
    }
  }
  else{
    unused_ip_list=ip_list;
    message="You do not have the minimum required role of billing_center_viewer to view the savings";
  }
  result={ "ip_list": unused_ip_list,
    "message": message}
  result.ip_list = _.sortBy(result.ip_list,"location");
  result.ip_list = _.sortBy(result.ip_list,"subscriptionName");
  EOS
end

###############################################################################
# Escalations
###############################################################################

escalation "send_email_report" do
  automatic true
  label "Send Email"
  description "Send incident email"
  email $param_email
end

escalation "delete_unused_ip_addresses" do
  automatic contains($param_automatic_action, "Delete Unused IP Addresses")
  label "Delete Resources"
  description "Delete selected unused IP addresses"
  run "delete_ip_addresses", data
end

###############################################################################
# Policy
###############################################################################

policy "pol_unused_ip_addresses" do
  validate $ds_ip_cost_mapping do
    summary_template "{{ rs_project_name }} (Account ID: {{ rs_project_id }}): {{ len data.ip_list }} Unused IP Addresses Found"
	detail_template <<-EOS
	{{data.message}}
	EOS
    check eq(size(val(data, "ip_list")), 0)
    escalate $send_email_report
    escalate $delete_unused_ip_addresses
    export "ip_list" do
      resource_level true
      field "location" do
        label "Location"
      end
      field "subscriptionName" do
        label "Subscription Name"
      end
      field "resourceGroupName" do
        label "Resource Group Name"
      end
      field "savings" do
        label "Estimated Monthly Savings"
      end
      field "id" do
        label "IP Address Name"
        path "ipAddressName"
      end
      field "ipAddressId" do
        label "IP Address Id"
      end
    end
  end
end

###############################################################################
# Cloud Workflow
###############################################################################

define delete_ip_addresses($data) return $all_responses do
  $$debug = false
  $all_responses = []
  foreach $item in $data do
    sub on_error: skip do
      call azure_delete_ip_addresses(to_s($item['ipAddressId']))
    end
  end
end

define azure_delete_ip_addresses($ipAddressId) do
  $response={}
  $syslog_subject = "Azure unused IP addresses : "
  $response = http_request(
          auth: $$azure_auth,
          verb: "delete",
          host: "management.azure.com",
          https: true,
          href: $ipAddressId,
          query_strings: {
            "api-version": "2020-03-01"
          }
        )
    call sys_log($syslog_subject,to_s($response))
end

define sys_log($subject, $detail) do
  if $$debug
    rs_cm.audit_entries.create(
      notify: "None",
      audit_entry: {
        auditee_href: @@account,
        summary: join(["Azure unused IP addresses - ", $subject]),
        detail: $detail
      }
    )
  end
end

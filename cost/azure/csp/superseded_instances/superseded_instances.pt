name "Azure CSP Superseded Instances"
rs_pt_ver 20180301
type "policy"
short_description "Specify which regions have cheaper alternatives by specifying the expensive region name and the cheaper region name for analysis. See the [README](https://github.com/rightscale/policy_templates/tree/master/cost/azure/cheaper_regions/) and [docs.rightscale.com/policies](http://docs.rightscale.com/policies/) to learn more."
long_description "Version: 1.0"
severity "medium"
category "Operational"

###############################################################################
# Permissions
###############################################################################


###############################################################################
# Parameters
###############################################################################

parameter "param_email" do
  type "list"
  label "Email addresses of the recipients you wish to notify"
end

parameter "param_billing_centers" do
  label "Billing Center Name"
  type "list"
  min_length 1
end

###############################################################################
# Authentication
###############################################################################

auth "auth_rs", type: "rightscale"

###############################################################################
# Resources
###############################################################################

###############################################################################
# Datasources
###############################################################################

datasource "ds_billing_centers" do
  request do
    auth $auth_rs
    host rs_optima_host
    path join(["/analytics/orgs/",rs_org_id,"/billing_centers"])
    header "Api-Version", "1.0"
    header "User-Agent", "RS Policies"
    query "view", "allocation_table"
  end
  result do
    encoding "json"
    collect jmes_path(response,"[*]") do
      field "href", jmes_path(col_item,"href")
      field "id", jmes_path(col_item,"id")
      field "name", jmes_path(col_item,"name")
      field "parent_id", jmes_path(col_item,"parent_id")
      field "ancestor_ids", jmes_path(col_item,"ancestor_ids")
      field "allocation_table", jmes_path(col_item,"allocation_table")
    end
  end
end

datasource "ds_new_bc_costs" do
  request do
    run_script $js_new_costs_request,rs_org_id,$ds_billing_centers,$param_billing_centers
  end 
  result do
    encoding "json"
    collect jmes_path(response,"rows[*]") do
      field "billing_center_id", jmes_path(col_item, "dimensions.billing_center_id")
      field "instance_type", jmes_path(col_item,"dimensions.instance_type")
      field "region", jmes_path(col_item,"dimensions.region")
    end
  end
end

datasource "ds_new_bc_cost_name" do
  run_script $js_merge_bc_name, $ds_new_bc_costs, $ds_billing_centers
end

###############################################################################
# Scripts
###############################################################################
script "js_new_costs_request", type: "javascript" do
  parameters "org_id","billing_centers","param_billing_centers"
  result "request"
  code <<-EOS
    var start_at = "";
    var end_at = "";
    var cost_metric = {
      "Unamortized Unblended":"cost_nonamortized_unblended_adj",
      "Amortized Unblended":"cost_amortized_unblended_adj",
      "Unamortized Blended": "cost_nonamortized_blended_adj",
      "Amortized Blended":"cost_amortized_blended_adj"
    }
    // format the date for the `daily` API
    // returns date formatted as string: YYYY-mm-dd
    function getFormattedDailyDate(date) {
      var year = date.getFullYear();
      var month = (1 + date.getMonth()).toString();
      month = month.length > 1 ? month : '0' + month;
      var day = date.getDate().toString();
      day = day.length > 1 ? day : '0' + day;
      return year + '-' + month;
    }
    function getStartDate( date ) {
      y = date.getFullYear()
      m = date.getMonth();
      start_date = new Date(y, m, 1);
      return start_date;
    }
    function getEndDate( date ) {
      y = date.getFullYear()
      m = date.getMonth();
      end_date = new Date(y, m + 1, 1);
      return end_date;
    }
    start_at = getFormattedDailyDate(getStartDate(new Date())) 
    end_at = getFormattedDailyDate(getEndDate(new Date()))

    var top_billing_centers = billing_centers
    var billing_center_ids = []
    if (param_billing_centers.length === 0){
      billing_center_ids = _.map(top_billing_centers, function(value, key){ return value.id });
    } else {
      // get array of billing center id's that match the names in param_billing_centers.
      billing_center_names = _.map(param_billing_centers, function(name){ return name.toLowerCase(); });
      billing_center_ids = _.compact(_.map(top_billing_centers, function(value){ if(_.contains(billing_center_names, value.name.toLowerCase())){return value.id} }));
    }
    console.log('billing_centers:'+JSON.stringify(billing_centers))
    console.log('billing_centers_ids:'+ billing_center_ids)
        console.log('top_billing_centers:'+ JSON.stringify(top_billing_centers))

    var request = {
      auth: "auth_rs",
      verb: "POST",
      host: "optima.rightscale.com",
      path: "/bill-analysis/orgs/" + org_id + "/costs/aggregated",
      body_fields: {
        "dimensions": ["instance_type","billing_center_id"],
        "granularity": "month",
        "metrics": ["cost_amortized_unblended_adj"],
        "billing_center_ids": billing_center_ids,
        "start_at": start_at,
        "end_at": end_at
      },
      headers: {
        "Api-Version": "1.0",
        "User-Agent": "RS Policies",
      }
    }
  EOS
end

script "js_merge_bc_name", type: "javascript" do
  parameters "new_bc_costs", "billing_centers"
  result "results"
  code <<-EOS
    var results = []
    var ds_newer_instance_types = {
      "instance_types": {
        "Standard_F*_v1": "Standard_F*_v2",
        "Standard_A1":           "Standard_A1_v2",
        "Standard_A2":           "Standard_A2_v2",
        "Standard_A3":           "Standard_A4_v2",
        "Standard_A4":           "Standard_A8_v2",
        "Standard_A5":           "Standard_A2m_v2",
        "Standard_A6":           "Standard_A4m_v2",
        "Standard_A7":           "Standard_A8m_v2",
        "Standard_A10":          "Standard_H8",
        "Standard_A11":          "Standard_H16",
        "Standard_D2":           "Standard_D2_v3",
        "Standard_D3":           "Standard_D4_v3",
        "Standard_D4":           "Standard_D8_v3",
        "Standard_D11":          "Standard_E2_v3",
        "Standard_D12":          "Standard_E4_v3",
        "Standard_D13":          "Standard_E8_v3",
        "Standard_D14":          "Standard_E16_v3",
        "Standard_D2_v2":        "Standard_D2_v3",
        "Standard_D3_v2":        "Standard_D4_v3",
        "Standard_D4_v2":        "Standard_D8_v3",
        "Standard_D5_v2":        "Standard_D16_v3",
        "Standard_D11_v2":       "Standard_E2_v3",
        "Standard_D12_v2":       "Standard_E4_v3",
        "Standard_D13_v2":       "Standard_E8_v3",
        "Standard_D14_v2":       "Standard_E16_v3",
        "Standard_DS2_v2":       "Standard_D2s_v3",
        "Standard_DS3_v2":       "Standard_D4s_v3",
        "Standard_DS4_v2":       "Standard_D8s_v3",
        "Standard_DS5_v2":       "Standard_D16s_v3",
        "Standard_DS11_v2":      "Standard_E2s_v3",
        "Standard_DS12_v2":      "Standard_E4s_v3",
        "Standard_DS13_v2":      "Standard_E8s_v3",
        "Standard_DS14_v2":      "Standard_E16s_v3",
        "Standard_D2_v2_Promo":  "Standard_D2_v3",
        "Standard_D3_v2_Promo":  "Standard_D4_v3",
        "Standard_D4_v2_Promo":  "Standard_D8_v3",
        "Standard_D5_v2_Promo":  "Standard_D16_v3",
        "Standard_D11_v2_Promo": "Standard_E2_v3",
        "Standard_D12_v2_Promo": "Standard_E4_v3",
        "Standard_D13_v2_Promo": "Standard_E8_v3",
        "Standard_D14_v2_Promo": "Standard_E16_v3"
      }
    }
    for (var i = 0; i < new_bc_costs.length; i++) {
      console.log(new_bc_costs[i])
      console.log(new_bc_costs[i].billing_center_id)
      var arr_bc_name = _.reject(billing_centers, function(bc){ return bc.id != new_bc_costs[i].billing_center_id });
      var bc_name = arr_bc_name[0].name
      var new_instance_type = ds_newer_instance_types["instance_types"][new_bc_costs[i].instance_type]
      console.log(new_instance_type)
      console.log(bc_name)
      if (new_instance_type != null && new_instance_type !== undefined ) {
        results.push({
          billing_center_name: bc_name,
          billing_center_id: new_bc_costs[i].billing_center_id,
          old_instance_type: new_bc_costs[i].instance_type,
          new_instance_type: new_instance_type
        })
      }else{
        continue
      }
    }
EOS
end

###############################################################################
# Policy
###############################################################################

policy "azure_cheaper_regions" do
  validate_each $ds_new_bc_cost_name do
    summary_template "{{ rs_project_name }} (Account ID: {{ rs_project_id }}): {{ len data }} rows with cheaper data"
    detail_template <<-EOS
# Cheaper Regions
| Billing Center Name | Billing Center ID | Region | Old Instance Type | New Instance Type |
| ------------------- | ----------------- | ------ | ----------------- | ----------------- |
{{ range data -}}
| {{ .billing_center_name }} | {{ .billing_center_id }} | {{ .region }} | {{.old_instance_type}} | {{ .new_instance_type }} |
{{ end -}}
EOS
    check eq(0,1)
    escalate $email
  end
end

###############################################################################
# Escalations
###############################################################################

escalation "email" do
  email $param_email
end

###############################################################################
# Cloud Workflow
###############################################################################

define sys_log($subject, $detail) do
  if $$debug
    rs_cm.audit_entries.create(
      notify: "None",
      audit_entry: {
        auditee_href: @@account,
        summary: $subject,
        detail: $detail
      }
    )
  end
end
name "Azure Unused Volumes"
rs_pt_ver 20180301
type "policy"
short_description "Checks for unused volumes older than specified number of days and, optionally, deletes them. See the [README](https://github.com/flexera-public/policy_templates/tree/master/cost/azure/unused_volumes) and [docs.flexera.com/flexera/EN/Automation](https://docs.flexera.com/flexera/EN/Automation/AutomationGS.htm) to learn more."
long_description ""
severity "low"
category "Cost"
default_frequency "daily"
info(
  version: "4.7",
  provider: "Azure",
  service: "Storage",
  policy_set: "Unused Volumes",
  recommendation_type: "Usage Reduction"
)

###############################################################################
# Parameters
###############################################################################

parameter "param_email" do
  type "list"
  label "Email addresses"
  description "A list of email addresses to notify"
  default []
end

parameter "param_unattached_days" do
  type "number"
  label "Unused Age"
  description "Number of days the volume is unused"
  default 30
  min_value 1
  max_value 90
end

parameter "param_create_snapshot" do
  type "string"
  label "Create Final Snapshot"
  description "Boolean for whether or not to take a final snapshot before deleting"
  allowed_values "true", "false"
  default "true"
end

parameter "param_exclusion_tag_key" do
  category "User Inputs"
  label "Exclusion Tag Key"
  description "A list of tags used to excluded volumes from the incident."
  type "list"
  default []
end

parameter "param_azure_endpoint" do
  type "string"
  label "Azure Endpoint"
  description "Azure Endpoint to access resources"
  allowed_values "management.azure.com", "management.chinacloudapi.cn"
  default "management.azure.com"
end

parameter "param_subscription_allowed_list" do
  label "Subscription Allowed List"
  type "list"
  description "Allowed Subscriptions, if empty, all subscriptions will be checked"
  default []
end

parameter "param_automatic_action" do
  type "list"
  label "Automatic Action(s)"
  description "When this value is set, this policy will automatically take the selected action(s)"
  allowed_values ["Delete Unused Volumes"]
  default []
end

parameter "param_log_to_cm_audit_entries" do
  type "string"
  label "Log to CM Audit Entries"
  description "Boolean for whether or not to log any debugging information from actions to CM Audit Entries, this should be left set to No on Flexera EU"
  allowed_values "Yes", "No"
  default "No"
end

###############################################################################
# Authentication
###############################################################################

credentials "auth_azure" do
  schemes "oauth2"
  label "Azure"
  description "Select the Azure Resource Manager Credential from the list."
  tags "provider=azure_rm"
end

credentials "auth_flexera" do
  schemes "oauth2"
  label "flexera"
  description "Select Flexera One OAuth2 credentials"
  tags "provider=flexera"
end

###############################################################################
# Pagination
###############################################################################

pagination "pagination_azure" do
  get_page_marker do
    body_path "nextLink"
  end
  set_page_marker do
    uri true
  end
end

###############################################################################
# Datasources & Scripts
###############################################################################

datasource "ds_currency_reference" do
  request do
    host "raw.githubusercontent.com"
    path "/rightscale/policy_templates/master/cost/scheduled_reports/currency_reference.json"
    header "User-Agent", "RS Policies"
  end
end

datasource "ds_currency_code" do
  request do
    auth $auth_flexera
    host rs_optima_host
    path join(["/bill-analysis/orgs/",rs_org_id,"/settings/currency_code"])
    header "Api-Version", "0.1"
    header "User-Agent", "RS Policies"
    ignore_status [403]
  end
  result do
    encoding "json"
    field "id", jmes_path(response,"id")
    field "value", jmes_path(response,"value")
  end
end

datasource "ds_billing_centers" do
  request do
    auth $auth_flexera
    host rs_optima_host
    path join(["/analytics/orgs/",rs_org_id,"/billing_centers"])
    header "Api-Version", "1.0"
    header "User-Agent", "RS Policies"
    query "view", "allocation_table"
    ignore_status [403]
  end
  result do
    encoding "json"
    collect jmes_path(response,"[*]") do
      field "href", jmes_path(col_item,"href")
      field "id", jmes_path(col_item,"id")
      field "name", jmes_path(col_item,"name")
      field "parent_id", jmes_path(col_item,"parent_id")
    end
  end
end

datasource "ds_top_level_bcs" do
  run_script $js_top_level_bcs, $ds_billing_centers
end

script "js_top_level_bcs", type: "javascript" do
  parameters "ds_billing_centers"
  result "result"
  code <<-EOS
  filtered_bcs = _.reject(ds_billing_centers, function(bc) { return bc['parent_id'] != null })
  result = _.compact(_.pluck(filtered_bcs, 'id'))
EOS
end

datasource "ds_subscriptions" do
  request do
    auth $auth_azure
    pagination $pagination_azure
    host $param_azure_endpoint
    path "/subscriptions/"
    query "api-version","2020-01-01"
    header "User-Agent", "RS Policies"
  end
  result do
    encoding "json"
    collect jmes_path(response, "value[*]") do
      field "subscriptionID", jmes_path(col_item, "subscriptionId")
      field "subscriptionName", jmes_path(col_item, "displayName")
      field "state", jmes_path(col_item, "state")
    end
  end
end

datasource "ds_filtered_subscriptions" do
  run_script $js_filtered_subscriptions, $ds_subscriptions, $param_subscription_allowed_list
end

script "js_filtered_subscriptions", type: "javascript" do
  parameters "ds_subscriptions", "param_subscription_allowed_list"
  result "result"
  code <<-EOS
  if (param_subscription_allowed_list.length > 0) {
    result = _.filter(ds_subscriptions, function(sub) {
      return _.contains(param_subscription_allowed_list, sub['subscriptionID']) || _.contains(param_subscription_allowed_list, sub['subscriptionName'])
    })
  } else {
    result = ds_subscriptions
  }
EOS
end

datasource "ds_azure_disks" do
  iterate $ds_filtered_subscriptions
  request do
    auth $auth_azure
    pagination $pagination_azure
    host $param_azure_endpoint
    path join(["/subscriptions/", val(iter_item,"subscriptionID"), "/providers/Microsoft.Compute/disks"])
    query "api-version", "2019-07-01"
    # Ignore status 400, 403, and 404 which can be returned in certain (legacy) types of Azure Subscriptions
    ignore_status [400, 403, 404]
  end
  result do
    encoding "json"
    collect jmes_path(response, "value[*]") do
      field "id", jmes_path(col_item,"id")
      field "resourceName", jmes_path(col_item, "name")
      field "resourceGroup", get(4, split(jmes_path(col_item, "id"), '/'))
      field "resourceType", jmes_path(col_item, "type")
      field "region", jmes_path(col_item, "location")
      field "tags", jmes_path(col_item, "tags")
      field "diskState", jmes_path(col_item, "properties.diskState")
      field "timeCreated", jmes_path(col_item, "properties.timeCreated")
      field "diskSize", jmes_path(col_item, "properties.diskSizeGB")
      field "subscriptionID",val(iter_item, "subscriptionID")
      field "subscriptionName",val(iter_item, "subscriptionName")
    end
  end
end

datasource "ds_filter_disks" do
  run_script $js_filter_disks, $param_exclusion_tag_key, $ds_azure_disks
end

script "js_filter_disks", type: "javascript" do
  parameters "param_exclusion_tag_key", "ds_azure_disks"
  result "result"
  code <<-EOS
  result = []

  _.each(ds_azure_disks, function(disk) {
    tags = []
    tag_found = false

    if (disk['tags'] != "undefined" && disk['tags'] != null) {
      _.each(Object.keys(disk['tags']), function(key) {
        tags.push(key + '=' + disk['tags'][key])

        if (_.contains(param_exclusion_tag_key, key)) {
          tag_found = true
        }
      })
    }

    if (disk['diskState'] == "Unattached" && tag_found == false) {
      result.push({
        disk_id: disk['id'],
        resourceName: disk['resourceName'],
        region: disk['region'],
        diskState: disk['diskState'],
        diskSize: disk['diskSize'],
        resourceGroup: disk['resourceGroup'],
        resourceType: disk['resourceType'],
        timeCreated: disk['timeCreated'],
        subscriptionID: disk['subscriptionID'],
        subscriptionName: disk['subscriptionName'],
        service: disk['resourceType'].split("/")[0],
        tags: tags
      })
    }
  })
EOS
end

# Pull log activity per disk instead of per subscription.
# This is because pulling data via subscription actually takes longer due to pagination
# and the large number of irrelevant log entries due to Azure's limited filtering options.
datasource "ds_azure_log_activity" do
  iterate $ds_filter_disks
  request do
    run_script $js_azure_log_activity, val(iter_item,"subscriptionID"), val(iter_item, "disk_id"), $param_unattached_days, $param_azure_endpoint
  end
  result do
    encoding "json"
    collect jmes_path(response, "value[*]") do
      field "operationName", jmes_path(col_item, "operationName.localizedValue")
      field "resourceID", jmes_path(col_item, "resourceId")
    end
  end
end

script "js_azure_log_activity", type: "javascript" do
  parameters "subscriptionID", "disk_id", "param_unattached_days", "param_azure_endpoint"
  result "request"
  code <<-EOS
  end_date = new Date()
  end_date = end_date.toISOString().split('T')[0] + 'T23:59:59Z'

  start_date = new Date()
  start_date.setDate(start_date.getDate() - parseInt(param_unattached_days))
  start_date = start_date.toISOString().split('T')[0] + 'T00:00:00Z'

  filter = [
    "eventTimestamp ge '", start_date, "' and ",
    "eventTimestamp le '", end_date, "' and ",
    "eventChannels eq 'Admin, Operation' and ",
    "resourceId eq '", disk_id, "'"
  ].join('')

  var request = {
    host: param_azure_endpoint,
    path: "/subscriptions/" + subscriptionID + "/providers/microsoft.insights/eventtypes/management/values",
    verb: "GET",
    // Ignore status 400, 403, and 404 which can be returned in certain (legacy) types of Azure Subscriptions
    ignore_status: [400, 403, 404],
    auth: "auth_azure",
    pagination: "pagination_azure",
    query_params: {
      'api-version': '2015-04-01',
      '$filter': filter
      '$select': 'operationName,properties'
    }
  }
EOS
end

datasource "ds_volume_costs" do
  iterate $ds_filtered_subscriptions
  request do
    run_script $js_volume_costs, val(iter_item, "subscriptionID"), $ds_top_level_bcs, rs_org_id, rs_optima_host
  end
  result do
    encoding "json"
    collect jmes_path(response, "rows[*]") do
      field "resource_id", jmes_path(col_item, "dimensions.resource_id")
      field "cost_nonamortized_unblended_adj", jmes_path(col_item, "metrics.cost_nonamortized_unblended_adj")
    end
  end
end

script "js_volume_costs", type:"javascript" do
  parameters "subscriptionID", "ds_top_level_bcs", "rs_org_id", "rs_optima_host"
  result "request"
  code <<-EOS
  start_date = new Date()
  start_date.setDate(start_date.getDate() - 3)
  start_date = start_date.toISOString().split('T')[0]

  end_date = new Date()
  end_date.setDate(end_date.getDate() - 2)
  end_date = end_date.toISOString().split('T')[0]

  var request = {
    auth: "auth_flexera",
    host: rs_optima_host,
    verb: "POST",
    path: "/bill-analysis/orgs/" + rs_org_id + "/costs/select",
    body_fields: {
      "dimensions": ["resource_id"],
      "granularity": "day",
      "start_at": start_date,
      "end_at": end_date,
      "metrics": ["cost_nonamortized_unblended_adj"],
      "billing_center_ids": ds_top_level_bcs,
      "limit": 100000,
      "filter": {
        "type": "and",
        "expressions": [
          {
            "dimension": "service",
            "type": "equal",
            "value": "Microsoft.Compute"
          },
          {
            "dimension": "vendor_account",
            "type": "equal",
            "value": subscriptionID
          }
        ]
      }
    },
    headers: {
      "User-Agent": "RS Policies",
      "Api-Version": "1.0"
    },
    ignore_status: [400]
  }
EOS
end

datasource "ds_filter_activities" do
  run_script $js_filter_activities, $ds_filter_disks, $ds_azure_log_activity, $param_unattached_days
end

script "js_filter_activities", type: "javascript" do
  parameters "ds_filter_disks", "ds_azure_log_activity", "param_unattached_days"
  result "result"
  code <<-EOS
  result = []

  azure_log_activity = {}

  _.each(ds_azure_log_activity, function(item) {
    azure_log_activity[item['resourceID'].toLowerCase()] = false
  })

  _.each(ds_filter_disks, function(disk) {
    inactive_disk = azure_log_activity[disk['disk_id'].toLowerCase()]

    if (inactive_disk == null || inactive_disk == undefined) {
      inactive_disk = true
    }

    expectedDate = new Date()
    createdTime = new Date(disk['timeCreated'])
    expectedDate.setDate(expectedDate.getDate() - parseInt(param_unattached_days))

    if (inactive_disk && expectedDate.getTime() >= createdTime.getTime()) {
      result.push({
        disk_id: disk['disk_id'],
        resourceName: disk['resourceName'],
        region: disk['region'],
        diskSize: disk['diskSize'],
        subscriptionID: disk['subscriptionID'],
        subscriptionName: disk['subscriptionName'],
        resourceGroup: disk['resourceGroup'],
        resourceType: disk['resourceType'],
        tags: disk['tags'].join(', '),
        service: disk['service'],
        savings: 0.0,
        savingsCurrency: ''
      })
    }
  })
EOS
end

datasource "ds_volume_cost_mapping" do
  run_script $js_volume_cost_mapping, $ds_filter_activities, $ds_volume_costs, $ds_currency_code, $ds_currency_reference, $ds_billing_centers
end

script "js_volume_cost_mapping", type:"javascript" do
  parameters "ds_filter_activities", "ds_volume_costs", "ds_currency_code", "ds_currency_reference", "ds_billing_centers"
  result "result"
  code <<-EOS
  // Output will contain both a list of instances and a general status message
  instances = []
  message = ''

  // Function to format numbers nicely
  function formatNumber(number, separator) {
    numString = number.toString()
    values = numString.split(".")
    formatted_number = ''

    while (values[0].length > 3) {
      chunk = values[0].substr(-3)
      values[0] = values[0].substr(0, values[0].length - 3)
      formatted_number = separator + chunk + formatted_number
    }

    if (values[0].length > 0) {
      formatted_number = values[0] + formatted_number
    }

    if (values[1] == undefined) {
      return formatted_number
    }

    return formatted_number + "." + values[1]
  }

  // Format costs with currency symbol and thousands separator
  cur = "$"
  separator = ","

  if (ds_currency_code['value'] !== undefined) {
    if (ds_currency_reference[ds_currency_code['value']] !== undefined) {
      var cur = ds_currency_reference[ds_currency_code['value']]['symbol']
      if (ds_currency_reference[ds_currency_code['value']]['t_separator'] !== undefined) {
        var separator = ds_currency_reference[ds_currency_code['value']]['t_separator']
      } else {
        var separator = ""
      }
    } else {
      var cur = ""
      var separator = ""
    }
  }

  // Integrate the cost data into our list of volumes
  total = 0

  if (ds_billing_centers.length != 0) {
    // This is to keep track of whether any cost data was found
    costs_exist = false

    // Create an object with a key for each volume whose value is set to 0
    var costs_by_resource_id = {}

    _.each(ds_filter_activities, function(volume) {
      costs_by_resource_id[volume['disk_id'].toLowerCase()] = 0
    })

    // Add in the cost data to the above object so each key is equal to all
    // of the costs for that volume
    _.each(ds_volume_costs, function(cost) {
      if (costs_by_resource_id[cost['resource_id'].toLowerCase()] != null && costs_by_resource_id[cost['resource_id'].toLowerCase()] != undefined) {
        costs_by_resource_id[cost['resource_id'].toLowerCase()] += cost['cost_nonamortized_unblended_adj']
        total += cost['cost_nonamortized_unblended_adj']

        // If we're here, cost data was found, so we set this to true
        costs_exist = true
      }
    })

    _.each(ds_filter_activities, function(volume) {
      monthly_savings = costs_by_resource_id[volume['disk_id'].toLowerCase()] * 30

      instances.push({
        disk_id: volume['disk_id'],
        resourceName: volume['resourceName'],
        region: volume['region'],
        diskSize: volume['diskSize'],
        resourceGroup: volume['resourceGroup'],
        resourceType: volume['resourceType'],
        subscriptionID: volume['subscriptionID'],
        subscriptionName: volume['subscriptionName'],
        tags: volume['tags'],
        service: volume['service'],
        savings: parseFloat(monthly_savings).toFixed(3),
        savingsCurrency: cur
      })
    })

    if (costs_exist) {
      message = "The total estimated monthly savings are " + cur + ' ' + formatNumber((Math.round(total * 30 * 100) / 100), separator)
    } else {
      message = "The Flexera Optima system does not have any data to calculate savings for these resources"
    }
  } else {
    instances = ds_filter_activities
    message = "You do not have the minimum required role of billing_center_viewer to view the savings"
  }

  instances = _.sortBy(instances, 'subscriptionName')
  instances = _.sortBy(instances, 'region')

  result = {
    "instances": instances,
    "message": message
  }
EOS
end

###############################################################################
# Policy
###############################################################################

policy "pol_azure_unattached_volumes" do
  validate $ds_volume_cost_mapping do
    summary_template "{{ rs_project_name }} (Account ID: {{ rs_project_id }}): {{ len data.instances }} Unused Volumes Found"
    detail_template <<-EOS
The following {{ len data.instances }} unused volumes, for Account: {{ rs_project_name }} (ID: {{ rs_project_id }}), have exceeded the specified age of: {{ parameters.param_unattached_days }} days old.\n
{{data.message}}
EOS
    escalate $esc_email
    escalate $esc_delete_volumes
    check eq(size(val(data, "instances")), 0)
    export "instances" do
      resource_level true
      field "accountID" do
        label "Subscription ID"
        path "subscriptionID"
      end
      field "accountName" do
        label "Subscription Name"
        path "subscriptionName"
      end
      field "resourceID" do
        label "Resource ID"
        path "disk_id"
      end
      field "resourceName" do
        label "Resource Name"
      end
      field "resourceType" do
        label "Resource Type"
      end
      field "region" do
        label "Region"
      end
      field "resourceGroup" do
        label "Resource Group"
      end
      field "diskSize" do
        label "Disk Size in GB"
      end
      field "tags" do
        label "Tags"
      end
      field "savings" do
        label "Estimated Monthly Savings"
      end
      field "savingsCurrency" do
        label "Savings Currency"
      end
      field "id" do
        label "Disk Id"
        path "disk_id"
      end
      field "service" do
        label "Service"
      end
    end
  end
end

###############################################################################
# Escalations
###############################################################################

escalation "esc_email" do
  automatic true
  label "Send Email"
  description "Send incident email"
  email $param_email
end

escalation "esc_delete_volumes" do
  automatic contains($param_automatic_action, "Delete Unused Volumes")
  label "Delete unused volumes"
  description "Delete the unused volumes"
  run "delete_unused_volumes", data, $param_create_snapshot, $param_log_to_cm_audit_entries, rs_optima_host
end

###############################################################################
# Cloud Workflow
###############################################################################

define delete_unused_volumes($data, $param_create_snapshot,$param_log_to_cm_audit_entries, $$rs_optima_host) return $all_responses do
  $$debug = $param_log_to_cm_audit_entries == "Yes"
  $status_code=''
  $all_responses = []
  foreach $item in $data do
    sub on_error: skip do
      call sys_log("In for item =",to_s($item))
      if $param_create_snapshot == "true"
        call create_snapshot($item) retrieve $status_code
        if to_s($status_code)=="202"
          call delete_unattached_disk($item['id'])
        else
          call sys_log("Azure create snapshot error statusCode: ",to_s($status_code))
        end
      else
        call delete_unattached_disk($item['id'])
      end
    end
  end
end

define create_snapshot($item) return $status_code do
  $response={}
  $syslog_subject = "Azure create snapshot API response: "
  call sys_log($syslog_subject,to_s($item))
  $snapshotName=split($item['id'], "Microsoft.Compute")
  $snapshotName=join([$snapshotName[0], "Microsoft.Compute", "/snapshots/", $item['name'], "Snapshot"])
  $response = http_request(
    auth: $$auth_azure,
    verb: "put",
    host: "management.azure.com",
    https: true,
    href: $snapshotName,
    query_strings: {
      "api-version": "2019-07-01"
    },
    headers:{
      "content-type": "application/json"
    },
    body: {
      "properties": {
        "creationData": {
          "createOption": "Copy",
          "sourceUri": $item["id"]
        }
      },
      "region": $item["region"]
    }
  )
  call sys_log("Create Snapshot response",to_s($response))
  $status_code = $response["code"]
  call sys_log("status_code",to_s($status_code))
  if $status_code == 202
    $snapshotstatus=$response["body"]["properties"]["provisioningState"]
    if $snapshotstatus == "Updating"
      $expected_status = "Succeeded"
      while $expected_status !~ $snapshotstatus do
        call sys_log("In while snapshotstatus",to_s($disksnapshot_status))
        call get_disksnapshot($snapshotName) retrieve $status
        $disksnapshot_status = $status
        call sys_log("disksnapshot_status",to_s($disksnapshot_status))
        if $disksnapshot_status == "Creating"
          $disksnapshot_status="Updating"
        end
        if $disksnapshot_status == "Succeeded"
          call sys_log("disksnapshot_status in if","")
          $snapshotstatus= "Succeeded"
        elsif  $disksnapshot_status !~ "Updating"
          call sys_log("disksnapshot_status in elsif","")
          $snapshotstatus= "Succeeded"
          $status_code = 400
          call sys_log($syslog_subject, join(["Failed to create snapshot for following disk: ", to_s($item['name'])]))
        end
      end
    end
  end
end

define get_disksnapshot($snapshotId) return $status do
  $snapshot_response = http_request(
    auth: $$auth_azure,
    https: true,
    verb: "get",
    host: "management.azure.com",
    href: $snapshotId,
    query_strings: {
      "api-version": "2019-07-01"
    }
  )
  call sys_log("Get Snapshot Details ",to_s($snapshot_response))
  call sys_log("Get Snapshot status ",to_s($snapshot_response["body"]["properties"]["provisioningState"]))
  $status = to_s($snapshot_response["body"]["properties"]["provisioningState"])
end

define delete_unattached_disk($disk_id) do
  $response={}
  $syslog_subject = "Azure delete unattached disk API response: "
  $response = http_request(
    auth: $$auth_azure,
    verb: "delete",
    host: "management.azure.com",
    https: true,
    href: $disk_id,
    query_strings: {
      "api-version": "2019-07-01"
    }
  )
  call sys_log($syslog_subject,to_s($response))
  $delete_status = $response["code"]
  if $delete_status != 202
    $error_code = $response["body"]["error"]["code"]
    call tagdisk_error($disk_id,$error_code)
  end
end

define tagdisk_error($disk_id,$error_code) do
  $response={}
  $syslog_subject = "Azure tag a disk API response: "
  $response = http_request(
    auth: $$auth_azure,
    verb: "patch",
    host: "management.azure.com",
    https: true,
    href: $disk_id,
    query_strings: {
      "api-version": "2019-07-01"
    },
    headers: {
      "content-type": "application/json"
    },
    body: {
      "tags": {
        "DeleteDiskError" :$error_code
      }
    }
  )
  call sys_log(join([$syslog_subject, "Response"]),to_s($response))
end

define sys_log($subject, $detail) do
  # Create empty errors array if doesn't already exist
  if !$$errors
    $$errors = []
  end
  # Check if debug is enabled
  if $$debug
    # Append to global $$errors
    # This is the suggested way to capture errors
    $$errors << "Unexpected error for " + $subject + "\n  " + to_s($detail)
    # If Flexera NAM Zone, create audit_entries [to be deprecated]
    # This is the legacy method for capturing errors and only supported on Flexera NAM
    if $$rs_optima_host == "api.optima.flexeraeng.com"
      # skip_error_and_append is used to catch error if rs_cm.audit_entries.create fails unexpectedly
      $task_label = "Creating audit entry for " + $subject
      sub task_label: $task, on_error: skip_error_and_append($task) do
        rs_cm.audit_entries.create(
          notify: "None",
          audit_entry: {
            auditee_href: @@account,
            summary: $subject,
            detail: $detail
          }
        )
      end # End sub on_error
    end # End if rs_optima_host
  end # End if debug is enabled
end

define skip_error_and_append($subject) do
  $$errors << "Unexpected error for " + $subject + "\n  " + to_s($_error)
  $_error_behavior = "skip"
end

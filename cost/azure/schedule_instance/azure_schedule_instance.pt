name "Azure Schedule Instance"
rs_pt_ver 20180301
type "policy"
short_description "This Policy Template allows you to schedule start and stop times for your instance, along with the option to terminate instance, update and delete schedule. See the [README](https://github.com/flexera-public/policy_templates/tree/master/cost/azure/schedule_instance/) and [docs.flexera.com/flexera/EN/Automation](https://docs.flexera.com/flexera/EN/Automation/AutomationGS.htm) to learn more."
long_description ""
category "Cost"
severity "low"
default_frequency "daily"
info(
  version: "4.0",
  provider: "Azure",
  service: "Compute",
  policy_set: "Schedule Instance"
)

###############################################################################
# Parameters
###############################################################################

parameter "param_email" do
  type "list"
  category "Policy Settings"
  label "Email addresses"
  description "A list of email addresses to notify."
  default []
end

parameter "param_azure_endpoint" do
  type "string"
  category "Policy Settings"
  label "Azure Endpoint"
  description "Select the API endpoint to use for Azure. Use default value of management.azure.com unless using Azure China."
  allowed_values "management.azure.com", "management.chinacloudapi.cn"
  default "management.azure.com"
end

parameter "param_tag_schedule" do
  type "string"
  category "Tag Keys"
  label "Schedule Tag Key"
  description "Tag key that schedule information is stored in. Default is recommended for most use cases."
  default "schedule"
end

parameter "param_tag_next_start" do
  type "string"
  category "Tag Keys"
  label "Next Start Tag Key"
  description "Tag key to use for scheduling instance to start. Default is recommended for most use cases."
  default "next_start"
end

parameter "param_tag_next_stop" do
  type "string"
  category "Tag Keys"
  label "Next Stop Tag Key"
  description "Tag key to use for scheduling instance to stop. Default is recommended for most use cases."
  default "next_stop"
end

parameter "param_exclusion_tags" do
  type "list"
  category "Filters"
  label "Exclusion Tags (Key:Value)"
  description "Cloud native tags to ignore resources that you don't want to produce recommendations for. Use Key:Value format for specific tag key/value pairs, and Key:* format to match any resource with a particular key, regardless of value. Examples: env:production, DO_NOT_DELETE:*"
  allowed_pattern /(^$)|[\w]*\:.*/
  default []
end

parameter "param_subscriptions_allow_or_deny" do
  type "string"
  category "Filters"
  label "Allow/Deny Subscriptions"
  description "Allow or Deny entered Subscriptions. See the README for more details."
  allowed_values "Allow", "Deny"
  default "Allow"
end

parameter "param_subscriptions_list" do
  type "list"
  category "Filters"
  label "Allow/Deny Subscriptions List"
  description "A list of allowed or denied Subscription IDs/names. See the README for more details."
  default []
end

parameter "param_regions_allow_or_deny" do
  type "string"
  category "Filters"
  label "Allow/Deny Regions"
  description "Allow or Deny entered regions. See the README for more details."
  allowed_values "Allow", "Deny"
  default "Allow"
end

parameter "param_regions_list" do
  type "list"
  category "Filters"
  label "Allow/Deny Regions List"
  description "A list of allowed or denied regions. See the README for more details."
  default []
end

parameter "param_automatic_action" do
  type "list"
  category "Actions"
  label "Automatic Actions"
  description "When this value is set, this policy will automatically take the selected action."
  allowed_values ["Execute Schedules"]
  default []
end

###############################################################################
# Authentication
###############################################################################

credentials "auth_azure" do
  schemes "oauth2"
  label "Azure"
  description "Select the Azure Resource Manager Credential from the list."
  tags "provider=azure_rm"
end

credentials "auth_flexera" do
  schemes "oauth2"
  label "Flexera"
  description "Select Flexera One OAuth2 credentials"
  tags "provider=flexera"
end

###############################################################################
# Pagination
###############################################################################

pagination "pagination_azure" do
  get_page_marker do
    body_path "nextLink"
  end
  set_page_marker do
    uri true
  end
end

###############################################################################
# Datasources & Scripts
###############################################################################

# Get applied policy metadata for use later
datasource "ds_applied_policy" do
  request do
    auth $auth_flexera
    host rs_governance_host
    path join(["/api/governance/projects/", rs_project_id, "/applied_policies/", policy_id])
    header "Api-Version", "1.0"
  end
end

datasource "ds_azure_subscriptions" do
  request do
    auth $auth_azure
    pagination $pagination_azure
    host $param_azure_endpoint
    path "/subscriptions/"
    query "api-version", "2020-01-01"
    header "User-Agent", "RS Policies"
    # Header X-Meta-Flexera has no affect on datasource query, but is required for Meta Policies
    # Forces `ds_is_deleted` datasource to run first during policy execution
    header "Meta-Flexera", val($ds_is_deleted, "path")
    # Ignore status 400, 403, and 404 which can be returned in certain (legacy) types of Azure Subscriptions
    ignore_status [400, 403, 404]
  end
  result do
    encoding "json"
    collect jmes_path(response, "value[*]") do
      field "id", jmes_path(col_item, "subscriptionId")
      field "name", jmes_path(col_item, "displayName")
      field "state", jmes_path(col_item, "state")
    end
  end
end

datasource "ds_azure_subscriptions_filtered" do
  run_script $js_azure_subscriptions_filtered, $ds_azure_subscriptions, $param_subscriptions_allow_or_deny, $param_subscriptions_list
end

script "js_azure_subscriptions_filtered", type: "javascript" do
  parameters "ds_azure_subscriptions", "param_subscriptions_allow_or_deny", "param_subscriptions_list"
  result "result"
  code <<-EOS
  if (param_subscriptions_list.length > 0) {
    result = _.filter(ds_azure_subscriptions, function(subscription) {
      include_subscription = _.contains(param_subscriptions_list, subscription['id']) || _.contains(param_subscriptions_list, subscription['name'])

      if (param_subscriptions_allow_or_deny == "Deny") {
        include_subscription = !include_subscription
      }

      return include_subscription
    })
  } else {
    result = ds_azure_subscriptions
  }
EOS
end

datasource "ds_azure_instances" do
  iterate $ds_azure_subscriptions_filtered
  request do
    auth $auth_azure
    pagination $pagination_azure
    host $param_azure_endpoint
    path join(["/subscriptions/", val(iter_item, "id"), "/providers/Microsoft.Compute/virtualMachines"])
    query "api-version", "2019-03-01"
    header "User-Agent", "RS Policies"
    # Ignore status 400, 403, and 404 which can be returned in certain (legacy) types of Azure Subscriptions
    ignore_status [400, 403, 404]
  end
  result do
    encoding "json"
    collect jmes_path(response, "value[*]") do
      field "resourceID", jmes_path(col_item, "id")
      field "resourceGroup", get(4, split(jmes_path(col_item, "id"), '/'))
      field "resourceKind", jmes_path(col_item, "type")
      field "name", jmes_path(col_item, "name")
      field "region", jmes_path(col_item, "location")
      field "osType", jmes_path(col_item, "properties.storageProfile.osDisk.osType")
      field "resourceType", jmes_path(col_item, "properties.hardwareProfile.vmSize")
      field "tags", jmes_path(col_item, "tags")
      field "subscriptionId", val(iter_item, "id")
      field "subscriptionName", val(iter_item, "name")
    end
  end
end

datasource "ds_azure_instances_tag_filtered" do
  run_script $js_azure_instances_tag_filtered, $ds_azure_instances, $param_exclusion_tags, $param_tag_schedule
end

script "js_azure_instances_tag_filtered", type: "javascript" do
  parameters "ds_azure_instances", "param_exclusion_tags", "param_tag_schedule"
  result "result"
  code <<-EOS
  if (param_exclusion_tags.length > 0) {
    result = _.reject(ds_azure_instances, function(vm) {
      vm_tags = []

      if (typeof(vm['tags']) == 'object') {
        _.each(Object.keys(vm['tags']), function(key) {
          vm_tags.push([key, ":", vm['tags'][key]].join(''))
          vm_tags.push([key, ":*"].join(''))
        })
      }

      exclude_vm = false

      // Exclude any VMs that are missing the schedule tag key
      exclusion_tags = param_exclusion_tags.concat(param_tag_schedule + ':*')

      _.each(exclusion_tags, function(exclusion_tag) {
        if (_.contains(vm_tags, exclusion_tag)) {
          exclude_vm = true
        }
      })

      return exclude_vm
    })
  } else {
    result = ds_azure_instances
  }
EOS
end

datasource "ds_azure_instances_region_filtered" do
  run_script $js_azure_instances_region_filtered, $ds_azure_instances_tag_filtered, $param_regions_allow_or_deny, $param_regions_list
end

script "js_azure_instances_region_filtered", type: "javascript" do
  parameters "ds_azure_instances_tag_filtered", "param_regions_allow_or_deny", "param_regions_list"
  result "result"
  code <<-EOS
  if (param_regions_list.length > 0) {
    result = _.filter(ds_azure_instances_tag_filtered, function(vm) {
      include_vm = _.contains(param_regions_list, vm['region'])

      if (param_regions_allow_or_deny == "Deny") {
        include_vm = !include_vm
      }

      return include_vm
    })
  } else {
    result = ds_azure_instances_tag_filtered
  }
EOS
end

datasource "ds_azure_instances_with_status" do
  iterate $ds_azure_instances_region_filtered
  request do
    auth $auth_azure
    pagination $pagination_azure
    host $param_azure_endpoint
    path join([val(iter_item, "resourceID"), '/instanceView'])
    query "api-version", "2019-03-01"
    header "User-Agent", "RS Policies"
    # Ignore status 400, 403, and 404 which can be returned in certain (legacy) types of Azure Subscriptions
    ignore_status [400, 403, 404]
  end
  result do
    encoding "json"
    collect jmes_path(response, "value[*]") do
      field "status", jq(response, '.statuses[] | select( .code | match("PowerState")).code | split("/")[1]')
      field "resourceID", val(iter_item, "resourceID")
      field "resourceGroup", val(iter_item, "resourceGroup")
      field "resourceKind", val(iter_item, "resourceKind")
      field "name", val(iter_item, "name")
      field "region", val(iter_item, "region")
      field "osType", val(iter_item, "osType")
      field "resourceType", val(iter_item, "resourceType")
      field "tags", val(iter_item, "tags")
      field "subscriptionId", val(iter_item, "subscriptionId")
      field "subscriptionName", val(iter_item, "subscriptionName")
    end
  end
end

datasource "ds_instances_to_schedule" do
  run_script $js_instances_to_schedule, $ds_azure_instances_with_status, $ds_applied_policy, $param_tag_schedule, $param_tag_next_start, $param_tag_next_stop
end

script "js_instances_to_schedule", type: "javascript" do
  parameters "ds_azure_instances_with_status", "ds_applied_policy", "param_tag_schedule", "param_tag_next_start", "param_tag_next_stop"
  result "result"
  code <<-EOS
  result = []
  now = new Date()

  _.each(ds_instances, function(instance) {
    schedule = null
    next_start = null
    next_stop = null
    tags = []

    if (typeof(instance['tags']) == 'object') {
      _.each(_.keys(instance['tags']), function(key) {
        value = instance['tags'][key]

        tags.push(key + '=' + value)

        if (key == param_tag_schedule)   { schedule = item['value']   }
        if (key == param_tag_next_start) { next_start = item['value'] }
        if (key == param_tag_next_stop)  { next_stop = item['value']  }
      })
    }

    if (next_start != null) { next_start = new Date(next_start) }
    if (next_stop != null)  { next_stop = new Date(next_stop)   }

    if (now > next_start || now > next_stop || next_start == null || next_stop == null) {
      if (next_start != null) { next_start = next_start.toISOString() }
      if (next_stop != null)  { next_stop = next_stop.toISOString()   }

      result.push({
        accountID: instance['subscriptionId'],
        accountName: instance['subscriptionName'],
        resourceGroup: instance['resourceGroup'],
        resourceName: instance['name'],
        resourceID: instance['resourceID'],
        resourceType: instance['resourceType'],
        resourceKind: instance['resourceKind'],
        region: instance['region'],
        osType: instance['osType'],
        service: "Microsoft.Compute",
        tags: tags.join(', '),
        policy_name: ds_applied_policy['name'],
        next_start: next_start,
        next_stop: next_stop,
        schedule: schedule
      })
    }
  })

  result = _.sortBy(result, 'resourceID')
  result = _.sortBy(result, 'region')
  result = _.sortBy(result, 'resourceGroup')
  result = _.sortBy(result, 'subscriptionId')
EOS
end

###############################################################################
# Policy
###############################################################################

policy "pol_schedule_instance" do
  validate_each $ds_instances_to_schedule do
    summary_template "{{ with index data 0 }}{{ .policy_name }}{{ end }}: {{ len data }} Azure Schedule Instance List"
    # Policy check fails and incident is created only if data is not empty and the Parent Policy has not been terminated
    check logic_or($ds_parent_policy_terminated, eq(val(item, "resourceID"), ""))
    escalate $esc_email
    escalate $esc_execute_schedules
    escalate $esc_update_schedules
    escalate $esc_delete_schedules
    escalate $esc_poweron_instances
    escalate $esc_poweroff_instances
    escalate $esc_delete_instances
    hash_exclude "tags"
    export do
      resource_level true
      field "accountID" do
        label "Subscription ID"
      end
      field "accountName" do
        label "Subscription Name"
      end
      field "resourceGroup" do
        label "Resource Group"
      end
      field "resourceName" do
        label "Resource Name"
      end
      field "resourceID" do
        label "Resource ID"
      end
      field "tags" do
        label "Resource Tags"
      end
      field "resourceType" do
        label "Instance Size"
      end
      field "resourceKind" do
        label "Resource Kind"
      end
      field "region" do
        label "Region"
      end
      field "osType" do
        label "Operating System"
      end
      field "service" do
        label "Service"
      end
      field "schedule" do
        label "Schedule"
      end
      field "next_start" do
        label "Next Start"
      end
      field "next_stop" do
        label "Next Stop"
      end
      field "id" do
        label "ID"
        path "resourceID"
      end
    end
  end
end
###############################################################################
# Escalations
###############################################################################

escalation "esc_email" do
  automatic true
  label "Send Email"
  description "Send incident email"
  email $param_email
end

escalation "esc_execute_schedules" do
  automatic contains($param_automatic_action, "Execute Schedules")
  label "Execute Schedules"
  description "Approval to start or stop all selected instances based on schedule"
  run "execute_schedules", data, $param_azure_endpoint, $param_tag_schedule, $param_tag_next_start, $param_tag_next_stop
end

escalation "esc_update_schedules" do
  automatic false
  label "Update Schedules"
  description "Approval to update the schedule tags on all selected instances"
  parameter "param_schedule" do
    type "string"
    category "Policy Actions"
    label "New Schedule"
    description "Enter a new value for the schedule tag. See README for more details"
  end
  run "update_schedules", data, $param_azure_endpoint, $param_schedule, $param_tag_schedule, $param_tag_next_start, $param_tag_next_stop
end

escalation "esc_delete_schedules" do
  automatic false
  label "Delete Schedules"
  description "Approval to delete the schedule tags on all selected instances"
  run "delete_schedules", data, $param_azure_endpoint, $param_tag_schedule, $param_tag_next_start, $param_tag_next_stop
end

escalation "esc_poweron_instances" do
  automatic contains($param_automatic_action, "Power On Instances")
  label "Power On Instances"
  description "Approval to power on all selected instances"
  run "poweron_instances", data, $param_azure_endpoint
end

escalation "esc_poweroff_instances" do
  automatic contains($param_automatic_action, "Power Off Instances")
  label "Power Off Instances"
  description "Approval to power off all selected instances"
  run "poweroff_instances", data, $param_azure_endpoint
end

escalation "esc_delete_instances" do
  automatic contains($param_automatic_action, "Delete Idle Instances")
  label "Delete Idle Instances"
  description "Approval to delete all selected instances"
  run "delete_instances", data, $param_azure_endpoint
end

###############################################################################
# Cloud Workflow
###############################################################################

define terminate_instance($data, $$rs_optima_host) return $all_response do
  $all_responses = []
  foreach $item in $data do
    call sys_log('> ' + $item['id'] + ': Terminating ...', to_s($item))
    sub on_error: skip do
      $response= http_request(
        auth: $$auth_azure,
        verb: "delete",
        host: "management.azure.com",
        https: true,
        href: $item['id'],
        query_strings: {
          "api-version": "2019-12-01"
        },
        headers: {
          "cache-control": "no-cache",
          "content-type": "application/json"
        }
      )
      $all_responses << $response
    end
  end
end

define schedule_instance($data, $$rs_optima_host) return $all_responses do
  $all_responses = []
  foreach $item in $data do
    $rule = split($item['schedule'],';')[1]
    $time_range = split($item['schedule'],';')[0]
    $start_time = split($time_range,'-')[0]
    $start_hour = split($start_time, ':')[0]
    $start_minute = split($start_time, ':')[1]
    $stop_time = split($time_range,'-')[1]
    $stop_hour = split($stop_time, ':')[0]
    $stop_minute = split($stop_time, ':')[1]
    $start_rule = join(["FREQ=WEEKLY;BYDAY=",$rule])
    $stop_rule = join(["FREQ=WEEKLY;BYDAY=",$rule])
    $timezone = split($item['schedule'],';')[2]
    if $start_minute == null
      $start_minute = "00"
    end
    if $stop_minute == null
      $stop_minute = "00"
    end
    if ! $timezone
      $timezone = "UTC"
    end
    call window_active($start_hour, $start_minute, $start_rule, $stop_hour, $stop_minute, $stop_rule, $timezone) retrieve $window_active , $next_start, $next_stop

    call sys_log('window_active',$window_active)
    call sys_log('next_start',$next_start)
    call sys_log('next_stop',$next_stop)

    if ($window_active)
      call sys_log($item['schedule'] + ' schedule window is currently active: Instances may be started.', '')
    else
      call sys_log($item['schedule'] + ' schedule window is currently in-active: Instances may be stopped.', '')
    end

    $stoppable = /^(running|starting|deallocating|deallocated)$/
    $startable = /^(stopped|stopping|deallocating|deallocated)$/
    call tag_resources($item, $item['schedule'], $next_start, $next_stop) retrieve $responses
    if($window_active)
      if($item['state']=~$startable)
        call sys_log('> ' + $item['id'] + ': Starting ...', to_s($item))
        sub on_error: skip do
        $response= http_request(
          auth: $$auth_azure,
          verb: "post",
          host: "management.azure.com",
          https: true,
          href: join([$item['id'],"/start"]),
          query_strings: {
              "api-version": "2019-12-01"
          },
          headers: {
              "cache-control": "no-cache",
              "content-type": "application/json"
          }
      )
    $all_responses << $response
        end
      else
        call sys_log('> ' + $item['id'] + ': No action - Instance state is ' + $item['state'], '')
      end
    else
      if($item['state'] =~ $stoppable)
        call sys_log('> ' + $item['id'] + ': Stopping ...', to_s($item))
        sub on_error: skip do
        $response= http_request(
            auth: $$auth_azure,
            verb: "post",
            host: "management.azure.com",
            https: true,
            href: join([$item['id'],"/deallocate"]),
            query_strings: {
              "api-version": "2022-08-01"
            },
            headers: {
              "cache-control": "no-cache",
              "content-type": "application/json"
            }
        )
    $all_responses << $response
        end
      else
        call sys_log('> ' + $item['id'] + ': No action - Instance state is ' + $item['state'], '')
      end
    end
  end
end


define update_schedule($data, $param, $$rs_optima_host) return $all_responses do
  $all_responses = []
  foreach $item in $data do
    $rule = split($param,';')[1]
    $time_range = split($param,';')[0]
    $start_time = split($time_range,'-')[0]
    $start_hour = split($start_time, ':')[0]
    $start_minute = split($start_time, ':')[1]
    $stop_time = split($time_range,'-')[1]
    $stop_hour = split($stop_time, ':')[0]
    $stop_minute = split($stop_time, ':')[1]
    $start_rule = join(["FREQ=WEEKLY;BYDAY=",$rule])
    $stop_rule = join(["FREQ=WEEKLY;BYDAY=",$rule])
    $timezone = split($param,';')[2]
    if $start_minute == null
      $start_minute = "00"
    end
    if $stop_minute == null
      $stop_minute = "00"
    end
    if ! $timezone
      $timezone = "UTC"
    end
    call window_active($start_hour, $start_minute, $start_rule, $stop_hour, $stop_minute, $stop_rule, $timezone) retrieve $window_active , $next_start, $next_stop
    call sys_log('> ' + $item['id'] + ': Updating schedule Tag ...', to_s($item))
    call tag_resources($item, $param, $next_start, $next_stop) retrieve $response
    $all_responses << $response
  end
end

define delete_schedule($data, $$rs_optima_host) return $all_responses do
  $all_responses = []
  foreach $item in $data do
    call sys_log('> ' + $item['id'] + ': Deleting schedule Tag ...', to_s($item))
      $delete_tag = "delete"
      call tag_resources($item, $delete_tag, $next_start, $next_stop) retrieve $response
      $all_responses << $response
  end
end

define tag_resources($item, $param, $next_start, $next_stop) return $update_resource_response do
  $$log = []
  $new_tags = {}
  $old_tags = $item["tags"]
  if $param == "delete"
    foreach $tag_key in keys($old_tags) do
      if $tag_key != "next_start" && $tag_key != "next_stop" && $tag_key != "schedule"
        $new_tags[$tag_key] = $old_tags[$tag_key]
      end
    end
  else
    $new_tags = $old_tags
    $new_tags["next_start"]= $next_start
    $new_tags["next_stop"]= $next_stop
    $new_tags["schedule"]= $param
  end
  $$log << to_s($new_tags)
  $$log << $next_start
  $$log << $next_stop
  $$log << $param
  call sys_log('all tags ', to_s($new_tags))
  sub on_error: handle_error($update_resource_response) do
    $update_resource_response = http_request(
      auth: $$auth_azure,
      verb: "patch",
      host: "management.azure.com",
      https: true,
      href: $item["id"],
      query_strings: {
        "api-version": "2020-06-01"
      },
      headers: {
        "cache-control": "no-cache",
        "content-type": "application/json"
      },
      body: {"tags": $new_tags}
    )
  end
end

define window_active($start_hour, $start_minute, $start_rule, $stop_hour, $stop_minute, $stop_rule, $tz) return $window_active, $next_start, $next_stop do
  $params = {
    verb: 'post',
    host: 'bjlaftw4kh.execute-api.us-east-1.amazonaws.com',
    https: true,
    href: '/production',
    headers:{
      'content-type': 'application/json'
    },
    body: {
      'start_hour': $start_hour,
      'start_minute': $start_minute,
      'start_rule': $start_rule,
      'stop_minute': $stop_minute,
      'stop_hour': $stop_hour,
      'stop_rule': $stop_rule,
      'tz': $tz
    }
  }
  call sys_log('window active $params', to_s($params))
  $response = http_request($params)
  call sys_log('window active $response', to_s($response))
  $body = $response['body']
  call sys_log('window active $body', to_s($body))

  $window_active = to_b($body['event_active'])
  $next_start   = $body['next_start']
  $next_stop    = $body['next_stop']
end

define handle_error($response) do
  $status_code = $response["code"]
  if $status_code == 404
    $_error_behavior = "skip"
  else
    $_error_behavior = "raise"
  end
end

define sys_log($subject, $detail) do
  # Create empty errors array if doesn't already exist
  if !$$errors
    $$errors = []
  end
  # Check if debug is enabled
  if $$debug
    # Append to global $$errors
    # This is the suggested way to capture errors
    $$errors << "Unexpected error for " + $subject + "\n  " + to_s($detail)
    # If Flexera NAM Zone, create audit_entries [to be deprecated]
    # This is the legacy method for capturing errors and only supported on Flexera NAM
    if $$rs_optima_host == "api.optima.flexeraeng.com"
      # skip_error_and_append is used to catch error if rs_cm.audit_entries.create fails unexpectedly
      $task_label = "Creating audit entry for " + $subject
      sub task_label: $task, on_error: skip_error_and_append($task) do
        rs_cm.audit_entries.create(
          notify: "None",
          audit_entry: {
            auditee_href: @@account,
            summary: $subject,
            detail: $detail
          }
        )
      end # End sub on_error
    end # End if rs_optima_host
  end # End if debug is enabled
end

define skip_error_and_append($subject) do
  $$errors << "Unexpected error for " + $subject + "\n  " + to_s($_error)
  $_error_behavior = "skip"
end

###############################################################################
# Meta Policy [alpha]
# Not intended to be modified or used by policy developers
###############################################################################

# If the meta_parent_policy_id is not set it will evaluate to an empty string and we will look for the policy itself,
# if it is set we will look for the parent policy.
datasource "ds_get_policy" do
  request do
    auth $auth_flexera
    host rs_governance_host
    ignore_status [404]
    path join(["/api/governance/projects/", rs_project_id, "/applied_policies/", switch(ne(meta_parent_policy_id,""), meta_parent_policy_id, policy_id) ])
    header "Api-Version", "1.0"
  end
  result do
    encoding "json"
    field "id", jmes_path(response, "id")
  end
end


datasource "ds_parent_policy_terminated" do
  run_script $js_decide_if_self_terminate, $ds_get_policy, policy_id, meta_parent_policy_id
end

# If the policy was applied by a meta_parent_policy we confirm it exists if it doesn't we confirm we are deleting
# This information is used in two places:
# - determining whether or not we make a delete call
# - determining if we should create an incident (we don't want to create an incident on the run where we terminate)
script "js_decide_if_self_terminate", type: "javascript" do
  parameters "found", "self_policy_id", "meta_parent_policy_id"
  result "result"
  code <<-EOS
  var result
  if (meta_parent_policy_id != "" && found.id == undefined) {
    result = true
  } else {
    result = false
  }
  EOS
end

# Two potentials ways to set this up:
# - this way and make a unneeded 'get' request when not deleting
# - make the delete request an interate and have it iterate over an empty array when not deleting and an array with one item when deleting
script "js_make_terminate_request", type: "javascript" do
  parameters "should_delete", "policy_id", "rs_project_id", "rs_governance_host"
  result "request"
  code <<-EOS

  var request = {
    auth:  'auth_flexera',
    host: rs_governance_host,
    path: "/api/governance/projects/" + rs_project_id + "/applied_policies/" + policy_id,
    headers: {
      "API-Version": "1.0",
      "Content-Type":"application/json"
    },
  }

  if (should_delete) {
    request.verb = 'DELETE'
  }
  EOS
end

datasource "ds_terminate_self" do
  request do
    run_script $js_make_terminate_request, $ds_parent_policy_terminated, policy_id, rs_project_id, rs_governance_host
  end
end

datasource "ds_is_deleted" do
  run_script $js_check_deleted, $ds_terminate_self
end

# This is just a way to have the check delete request connect to the farthest leaf from policy.
# We want the delete check to the first thing the policy does to avoid the policy erroring before it can decide whether or not it needs to self terminate
# Example a customer deletes a credential and then terminates the parent policy. We still want the children to self terminate
# The only way I could see this not happening is if the user who applied the parent_meta_policy was offboarded or lost policy access, the policies who are impersonating the user
# would not have access to self-terminate
# It may be useful for the backend to enable a mass terminate at some point for all meta_child_policies associated with an id.
script "js_check_deleted", type: "javascript" do
  parameters "response"
  result "result"
  code <<-EOS
  result = {"path":"/"}
  EOS
end

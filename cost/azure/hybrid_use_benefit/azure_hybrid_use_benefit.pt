name "Azure Hybrid Use Benefit for Windows Server"
rs_pt_ver 20180301
type "policy"
short_description "Identifies instances eligible for Azure Hybrid Use Benefit. See the [README](https://github.com/flexera-public/policy_templates/tree/master/cost/azure/hybrid_use_benefit) and [docs.flexera.com/flexera/EN/Automation](https://docs.flexera.com/flexera/EN/Automation/AutomationGS.htm) to learn more."
long_description ""
severity "low"
category "Cost"
default_frequency "daily"
info(
  version: "3.1",
  provider: "Azure",
  service: "Compute",
  policy_set: "Hybrid Use Benefit",
  recommendation_type: "Usage Reduction"
)

###############################################################################
# Parameters
###############################################################################

parameter "param_exclusion_tags" do
  type "list"
  category "Filters"
  label "Exclusion Tags (Key:Value)"
  description "Cloud native tags to ignore resources that you don't want to produce recommendations for. Use Key:Value format for specific tag key/value pairs, and Key:* format to match any resource with a particular key, regardless of value. Examples: env:production, DO_NOT_DELETE:*"
  allowed_pattern /(^$)|[\w]*\:.*/
  default []
end

parameter "param_email" do
  type "list"
  label "Email addresses"
  description "A list of email addresses of the recipients you wish to notify"
end

parameter "param_azure_endpoint" do
  type "string"
  label "Azure Endpoint"
  allowed_values "management.azure.com", "management.chinacloudapi.cn"
  default "management.azure.com"
end

parameter "param_subscriptions_list" do
  label "Subscription Allowed List"
  type "list"
  description "Allowed Subscriptions, if empty, all subscriptions will be checked"
end

parameter "param_automatic_action" do
  type "list"
  label "Automatic Actions"
  description "When this value is set, this policy will automatically take the selected action(s)"
  allowed_values ["Hybrid use benefit"]
end

###############################################################################
# Authentication
###############################################################################

credentials "auth_azure" do
  schemes "oauth2"
  label "Azure"
  description "Select the Azure Resource Manager Credential from the list."
  tags "provider=azure_rm"
end

credentials "auth_flexera" do
  schemes "oauth2"
  label "Flexera"
  description "Select Flexera One OAuth2 credentials"
  tags "provider=flexera"
end

###############################################################################
# Pagination
###############################################################################

pagination "pagination_azure" do
  get_page_marker do
    body_path "nextLink"
  end
  set_page_marker do
    uri true
  end
end

###############################################################################
# Datasources & Scripts
###############################################################################

# Get applied policy metadata for use later
datasource "ds_applied_policy" do
  request do
    auth $auth_flexera
    host rs_governance_host
    path join(["/api/governance/projects/", rs_project_id, "/applied_policies/", policy_id])
    header "Api-Version", "1.0"
  end
end

datasource "ds_azure_pricing" do
  request do
    host "raw.githubusercontent.com"
    path "/flexera-public/policy_templates/master/data/azure/azure_vm_pricing.json"
    header "User-Agent", "RS Policies"
  end
end

# Gather local currency info
datasource "ds_currency_reference" do
  request do
    host "raw.githubusercontent.com"
    path "/rightscale/policy_templates/master/cost/scheduled_reports/currency_reference.json"
    header "User-Agent", "RS Policies"
  end
end

datasource "ds_currency_code" do
  request do
    auth $auth_flexera
    host rs_optima_host
    path join(["/bill-analysis/orgs/", rs_org_id, "/settings/currency_code"])
    header "Api-Version", "0.1"
    header "User-Agent", "RS Policies"
    ignore_status [403]
  end
  result do
    encoding "json"
    field "id", jmes_path(response, "id")
    field "value", jmes_path(response, "value")
  end
end

datasource "ds_currency_target" do
  run_script $js_currency_target, $ds_currency_reference, $ds_currency_code
end

script "js_currency_target", type:"javascript" do
  parameters "ds_currency_reference", "ds_currency_code"
  result "result"
  code <<-EOS
  // Default to USD if currency is not found
  result = ds_currency_reference['USD']

  if (ds_currency_code['value'] != undefined && ds_currency_reference[ds_currency_code['value']] != undefined) {
    result = ds_currency_reference[ds_currency_code['value']]
  }
EOS
end

datasource "ds_currency_conversion" do
  request do
    host "api.xe-auth.flexeraeng.com"
    path "/prod/{proxy+}"
    query "from", "USD"
    query "to", val($ds_currency_target, 'code')
    query "amount", "1"
  end
  result do
    encoding "json"
    field "from", jmes_path(response, "from")
    field "to", jmes_path(response, "to")
    field "amount", jmes_path(response, "amount")
    field "year", jmes_path(response, "year")
  end
end

datasource "ds_currency" do
  run_script $js_currency, $ds_currency_target, $ds_currency_conversion
end

script "js_currency", type:"javascript" do
  parameters "ds_currency_target", "ds_currency_conversion"
  result "result"
  code <<-EOS
  result = ds_currency_target
  result['exchange_rate'] = 1

  currency_code = ds_currency_target['code']
  current_month = parseInt(new Date().toISOString().split('-')[1])

  conversion_block = _.find(ds_currency_conversion['to'][currency_code], function(item) {
    return item['month'] == current_month
  })

  if (conversion_block != undefined) {
    result['exchange_rate'] = conversion_block['monthlyAverage']
  }
EOS
end

datasource "ds_subscriptions" do
  request do
    auth $auth_azure
    pagination $pagination_azure
    host $param_azure_endpoint
    path "/subscriptions/"
    query "api-version","2019-06-01"
    header "User-Agent", "RS Policies"
    # Header X-Meta-Flexera has no affect on datasource query, but is required for Meta Policies
    # Forces `ds_is_deleted` datasource to run first during policy execution
    header "Meta-Flexera", val($ds_is_deleted, "path")
  end
  result do
    encoding "json"
    collect jmes_path(response, "value[*]") do
      field "subscriptionId", jmes_path(col_item,"subscriptionId")
      field "subscriptionName", jmes_path(col_item,"displayName")
    end
  end
end

datasource "ds_filtered_subscriptions" do
  run_script $js_filtered_subscriptions, $ds_subscriptions, $param_subscriptions_list
end

script "js_filtered_subscriptions", type: "javascript" do
  parameters "ds_subscriptions", "param_subscriptions_list"
  result "result"
  code <<-EOS
  if (param_subscriptions_list.length > 0) {
    result = _.filter(ds_subscriptions, function(subscription) {
      return _.contains(param_subscriptions_list, subscription['subscriptionId']) || _.contains(param_subscriptions_list, subscription['subscriptionName'])
    })
  } else {
    result = ds_subscriptions
  }
EOS
end

datasource "ds_azure_instances" do
  iterate $ds_filtered_subscriptions
  request do
    auth $auth_azure
    pagination $pagination_azure
    host $param_azure_endpoint
    path join(["/subscriptions/", val(iter_item, "subscriptionId"), "/providers/Microsoft.Compute/virtualMachines"])
    query "api-version","2017-12-01"
    header "User-Agent", "RS Policies"
    # Ignore status 400, 403, and 404 which can be returned in certain (legacy) types of Azure Subscriptions
    ignore_status [400,403,404]
  end
  result do
    encoding "json"
    collect jmes_path(response, "value") do
      field "subscriptionName", val(iter_item, "subscriptionName")
      field "subscriptionId", val(iter_item, "subscriptionId")
      field "resourceGroup", get(4, split(jmes_path(col_item, "id"), '/'))
      field "id", jmes_path(col_item, "id")
      field "name", jmes_path(col_item, "name")
      field "location", jmes_path(col_item, "location")
      field "licenseType", jmes_path(col_item, "properties.licenseType")
      field "vmSize", jmes_path(col_item, "properties.hardwareProfile.vmSize")
      field "osType", jmes_path(col_item, "properties.storageProfile.osDisk.osType")
      field "imagePublisher", jmes_path(col_item, "properties.storageProfile.imageReference.publisher")
      field "imageOffer", jmes_path(col_item, "properties.storageProfile.imageReference.offer")
      field "imageSku", jmes_path(col_item, "properties.storageProfile.imageReference.sku")
      field "imageVersion", jmes_path(col_item, "properties.storageProfile.imageReference.version")
      field "tags", jmes_path(col_item, "tags")
    end
  end
end

datasource "ds_filtered_resources" do
  run_script $js_filtered_resources, $ds_azure_instances, $param_exclusion_tags, $ds_azure_pricing, $ds_currency, $ds_applied_policy
end

script "js_filtered_resources", type: "javascript" do
  parameters "ds_azure_instances", "param_exclusion_tags", "ds_azure_pricing", "ds_currency", "ds_applied_policy"
  result "result"
  code <<-EOS
  // Function for formatting currency numbers later
  function formatNumber(number, separator) {
    var numString = number.toString()
    var values = numString.split(".")
    var formatted_number = ''

    while (values[0].length > 3) {
      var chunk = values[0].substr(-3)
      values[0] = values[0].substr(0, values[0].length - 3)
      formatted_number = separator + chunk + formatted_number
    }

    if (values[0].length > 0) { formatted_number = values[0] + formatted_number }

    if (values[1] == undefined) { return formatted_number }

    return formatted_number + "." + values[1]
  }

  function getPriceInfo(location, vmSize, osType, pricingData) {
    if (!pricingData[location] || !pricingData[location][vmSize] || !pricingData[location][vmSize][osType]) {
      return null
    }

    var pricePerUnit = pricingData[location][vmSize][osType].pricePerUnit
    var pricePerUnitAHUB =  pricingData[location][vmSize][osType].pricePerUnitAHUB

    if (pricePerUnit && pricePerUnitAHUB) {
      return pricePerUnit - pricePerUnitAHUB
    } else {
      return null
    }
  }

  region_table = {
    "ukwest": "UK West",
    "usgovvirginia": "US Gov Virginia",
    "eastus2": "US East 2",
    "uaenorth": "AE North",
    "southafricawest": "ZA West",
    "francesouth": "FR South",
    "westcentralus": "US West Central",
    "koreacentral": "KR Central",
    "westeurope": "EU West",
    "southafricanorth": "ZA North",
    "southeastasia": "AP Southeast",
    "centralindia": "IN Central",
    "switzerlandwest": "CH West",
    "norwayeast": "NO East",
    "germanywestcentral": "DE West Central",
    "westus2": "US West 2",
    "australiacentral": "AU Central",
    "italynorth": "IT North",
    "centralus": "US Central",
    "germanynorth": "DE North",
    "brazilsoutheast": "BR Southeast",
    "southindia": "IN South",
    "swedencentral": "SE Central",
    "francecentral": "FR Central",
    "australiasoutheast": "AU Southeast",
    "northeurope": "EU North",
    "koreasouth": "KR South",
    "usgovtexas": "US Gov TX",
    "polandcentral": "PL Central",
    "japaneast": "JA East",
    "westindia": "IN West",
    "japanwest": "JA West",
    "westus": "US West",
    "jioindiawest": "IN West Jio",
    "northcentralus": "US North Central",
    "southcentralus": "US South Central",
    "eastasia": "AP East",
    "jioindiacentral": "IN Central Jio",
    "australiacentral2": "AU Central 2",
    "canadaeast": "CA East",
    "eastus": "US East",
    "uaecentral": "AE Central",
    "norwaywest": "NO West",
    "canadacentral": "CA Central",
    "uksouth": "UK South",
    "qatarcentral": "QA Central",
    "swedensouth": "SE South",
    "brazilsouth": "BR South",
    "australiaeast": "AU East",
    "switzerlandnorth": "CH North",
    "usgovarizona": "US Gov AZ",
    "westus3": "US West 3"
  }

  result = []

  _.each(ds_azure_instances, function(value) {
    tags = []
    vm_tags = []

    if (typeof(value['tags']) == 'object') {
      _.each(Object.keys(value['tags']), function(key) {
        tags.push([key, "=", value['tags'][key]].join(''))
        vm_tags.push([key, ":", value['tags'][key]].join(''))
        vm_tags.push([key, ":*"].join(''))
      })
    }

    include_vm = true

    _.each(param_exclusion_tags, function(exclusion_tag) {
      if (_.contains(vm_tags, exclusion_tag)) {
        include_vm = false
      }
    })

    if (include_vm) {
      regionMapping = region_table[value['location']]
      priceDifference = getPriceInfo(regionMapping, value['vmSize'], value['osType'], ds_azure_pricing)

      if (value.osType == "Windows" && priceDifference != null && value['licenseType'] == null) {
        monthlySavings = (priceDifference * 24 * 365.25 / 12) * ds_currency['exchange_rate']

        result.push({
          subscriptionName: value["subscriptionName"],
          subscriptionId: value["subscriptionId"],
          resourceGroup: value["resourceGroup"],
          id: value["id"],
          name: value["name"],
          region: value["location"],
          osType: value["osType"],
          tags: tags.join(', ')
          ahub: "No",
          vmSize: value["vmSize"],
          imagePublisher: value["imagePublisher"],
          imageOffer: value["imageOffer"],
          imageSku: value["imageSku"],
          imageVersion: value["imageVersion"],
          savingsCurrency: ds_currency['symbol'],
          savings: parseFloat(monthlySavings.toFixed(3)),
          policy_name: ds_applied_policy['name']
        })
      }
    }
  })

  result = _.sortBy(result, function(item) { return item['savings'] * -1 })
EOS
end

###############################################################################
# Policy
###############################################################################

policy "pol_azure_license_policy" do
  validate_each $ds_filtered_resources do
    summary_template "{{ with index data 0 }}{{ .policy_name }}{{ end }}: {{ len data }} Instances Not Using Azure Hybrid Use Benefit for Windows Server"
    escalate $esc_email
    escalate $esc_license_instances
    check logic_or($ds_parent_policy_terminated, eq(val(item,"ahub"), "Yes"))
    export do
      resource_level true
      field "accountID" do
        label "Subscription ID"
        path "subscriptionId"
      end
      field "accountName" do
        label "Subscription Name"
        path "subscriptionName"
      end
      field "resourceGroup" do
        label "Resource Group"
      end
      field "name" do
        label "Resource Name"
      end
      field "tags" do
        label "Resource Tags"
      end
      field "resourceType" do
        label "Instance Size"
        path "vmSize"
      end
      field "region" do
        label "Region"
      end
      field "osType" do
        label "Operating System"
      end
      field "savingsCurrency" do
        label "Savings Currency"
      end
      field "savings" do
        label "Estimated Monthly Savings"
      end
      field "imagePublisher" do
        label "Image Publisher"
      end
      field "imageOffer" do
        label "Image Offer"
      end
      field "imageId" do
        label "Image Sku"
        path "imageSku"
      end
      field "imageVersion" do
        label "Image Version"
      end
      field "resourceID" do
        label "Resource ID"
        path "id"
      end
      field "id" do
        label "ID"
      end
    end
  end
end

###############################################################################
# Escalations
###############################################################################

escalation "esc_email" do
  automatic true
  label "Send Email"
  description "Send incident email"
  email $param_email
end

escalation "esc_license_instances" do
  automatic contains($param_automatic_action, "Hybrid use benefit")
  label "Add Hybrid Use Benefit"
  description "Apply hybrid use benefit to the selected intance"
  run "esc_license_instances", data
end

###############################################################################
# Cloud Workflow
###############################################################################

define esc_license_instances($data) return $all_responses do
  $all_responses = []
  foreach $item in $data do
    sub on_error: skip do
      $update_inst_response = http_request(
        auth: $$auth_azure,
        verb: "patch",
        host: "management.azure.com",
        https: true,
        href: $item["id"],
        query_strings: {
          "api-version": "2018-06-01"
        },
        headers: {
          "cache-control": "no-cache",
          "content-type": "application/json"
        },
        body: {
          "properties": {
          "licenseType": "Windows_Server"
          }
        }
      )

      $all_responses << $update_inst_response
    end
  end
end


###############################################################################
# Meta Policy [alpha]
# Not intended to be modified or used by policy developers
###############################################################################

# If the meta_parent_policy_id is not set it will evaluate to an empty string and we will look for the policy itself,
# if it is set we will look for the parent policy.
datasource "ds_get_policy" do
  request do
    auth $auth_flexera
    host rs_governance_host
    ignore_status [404]
    path join(["/api/governance/projects/", rs_project_id, "/applied_policies/", switch(ne(meta_parent_policy_id,""), meta_parent_policy_id, policy_id) ])
    header "Api-Version", "1.0"
  end
  result do
    encoding "json"
    field "id", jmes_path(response, "id")
  end
end

datasource "ds_parent_policy_terminated" do
  run_script $js_decide_if_self_terminate, $ds_get_policy, policy_id, meta_parent_policy_id
end

# If the policy was applied by a meta_parent_policy we confirm it exists if it doesn't we confirm we are deleting
# This information is used in two places:
# - determining whether or not we make a delete call
# - determining if we should create an incident (we don't want to create an incident on the run where we terminate)
script "js_decide_if_self_terminate", type: "javascript" do
  parameters "found", "self_policy_id", "meta_parent_policy_id"
  result "result"
  code <<-EOS
  var result
  if (meta_parent_policy_id != "" && found.id == undefined) {
    result = true
  } else {
    result = false
  }
  EOS
end

# Two potentials ways to set this up:
# - this way and make a unneeded 'get' request when not deleting
# - make the delete request an interate and have it iterate over an empty array when not deleting and an array with one item when deleting
script "js_make_terminate_request", type: "javascript" do
  parameters "should_delete", "policy_id", "rs_project_id", "rs_governance_host"
  result "request"
  code <<-EOS

  var request = {
    auth:  'auth_flexera',
    host: rs_governance_host,
    path: "/api/governance/projects/" + rs_project_id + "/applied_policies/" + policy_id,
    headers: {
      "API-Version": "1.0",
      "Content-Type":"application/json"
    },
  }

  if (should_delete) {
    request.verb = 'DELETE'
  }
  EOS
end

datasource "ds_terminate_self" do
  request do
    run_script $js_make_terminate_request, $ds_parent_policy_terminated, policy_id, rs_project_id, rs_governance_host
  end
end

datasource "ds_is_deleted" do
  run_script $js_check_deleted, $ds_terminate_self
end

# This is just a way to have the check delete request connect to the farthest leaf from policy.
# We want the delete check to the first thing the policy does to avoid the policy erroring before it can decide whether or not it needs to self terminate
# Example a customer deletes a credential and then terminates the parent policy. We still want the children to self terminate
# The only way I could see this not happening is if the user who applied the parent_meta_policy was offboarded or lost policy access, the policies who are impersonating the user
# would not have access to self-terminate
# It may be useful for the backend to enable a mass terminate at some point for all meta_child_policies associated with an id.
script "js_check_deleted", type: "javascript" do
  parameters "response"
  result "result"
  code <<-EOS
  result = {"path":"/"}
  EOS
end

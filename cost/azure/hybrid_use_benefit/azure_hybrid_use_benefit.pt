name "Azure Hybrid Use Benefit for Windows Server"
rs_pt_ver 20180301
type "policy"
short_description "Identifies eligible instances not utilizing Azure Hybrid Use Benefit.  See the [README](https://github.com/rightscale/policy_templates/tree/master/cost/azure/hybrid_use_benefit) and [docs.rightscale.com/policies](http://docs.rightscale.com/policies/) to learn more."
long_description "Version: 1.0"
severity "low"
category "Cost"

parameter "param_azure_tenant_id" do
  type "string"
  label "Azure AD Tenant ID"
  category "Azure"
end

parameter "param_azure_sub" do
  type "string"
  label "Azure Subscription ID"
  category "Azure"
end

parameter "param_exclusion_tag_key" do
  category "User Inputs"
  label "Exclusion Tag Key"
  description "Azure-native instance tag to ignore instances that are not using AHUB/BYOL. Only supply the tag key. The policy assumes that the tag value is irrelevant."
  type "string"
  default "exclude_ahub"
end

parameter "param_email" do
  type "list"
  label "Email addresses of the recipients you wish to notify"
end

auth "azure_auth", type: "oauth2" do
  token_url join(["https://login.microsoftonline.com/",$param_azure_tenant_id,"/oauth2/token"])
  grant type: "client_credentials" do
    client_id cred("AZURE_APPLICATION_ID")
    client_secret cred("AZURE_APPLICATION_KEY")
    additional_params do {
      "resource" => "https://management.azure.com/"
    } end
  end
end
  
pagination "azure_pagination" do
  get_page_marker do
    body_path "nextLink"
  end
  set_page_marker do
    uri true
  end
end

datasource "azure_instances" do
  request do
    auth $azure_auth
    pagination $azure_pagination
    host "management.azure.com"
    path join(["/subscriptions/", $param_azure_sub, "/providers/Microsoft.Compute/virtualMachines"])
    query "api-version","2017-12-01"
    header "User-Agent", "RS Policies"
  end
  result do
    encoding "json"
      collect jmes_path(response, "value") do
        field "id", jmes_path(col_item,"id")
        field "name", jmes_path(col_item,"name")
        field "location", jmes_path(col_item,"location")
        field "licenseType", jmes_path(col_item,"properties.licenseType")
        field "vmSize", jmes_path(col_item,"properties.hardwareProfile.vmSize")
        field "osType", jmes_path(col_item,"properties.storageProfile.osDisk.osType")
        field "imagePublisher", jmes_path(col_item,"properties.storageProfile.imageReference.publisher")
        field "imageOffer", jmes_path(col_item,"properties.storageProfile.imageReference.offer")
        field "imageSku", jmes_path(col_item,"properties.storageProfile.imageReference.sku")
        field "imageVersion", jmes_path(col_item,"properties.storageProfile.imageReference.version")
        field "tags", jmes_path(col_item,"tags")
      end
  end
end

datasource "filtered_resources" do
  run_script $js_filter_resources, $azure_instances, $param_exclusion_tag_key
end
  
script "js_filter_resources", type: "javascript" do
  parameters "azure_instances","exclusion_tag"
  result "result"
  code <<-EOS
    var result = [];
    _.each(azure_instances, function(instance){

      console.log("Instance Name: ", instance["name"])

      if (_.has(instance.tags, exclusion_tag)) {
        console.log(instance["name"], "SKIP")
      } else {
        if (instance.osType === "Windows"){
          var resourceGroup = instance.id.split('/')[4]
          var tags = JSON.stringify(instance["tags"]);
          var ahub = "N/A"

          console.log(instance["name"], "OS: Windows")
          
          if (instance.licenseType === "Windows_Server") {
            ahub = "Yes"
          } else {
            ahub = "No"
          }

          console.log(instance["name"], "AHUB: ", ahub)

          result.push({
            id: instance["id"],
            name: instance["name"],
            resourceGroup: resourceGroup,
            location: instance["location"],
            ahub: ahub,
            vmSize: instance["vmSize"],
            imagePublisher: instance["imagePublisher"],
            imageOffer: instance["imageOffer"],
            imageSku: instance["imageSku"],
            imageVersion: instance["imageVersion"],
            tags: tags
          })
        }
      }
    })
  EOS
end

policy 'azure_license_policy' do
  validate_each $filtered_resources do
    summary_template "{{ rs_project_name }} (Account ID: {{ rs_project_id }}): {{ len data }} Instances Not Using Azure Hybrid Use Benefit for Windows Server"
    detail_template <<-EOS
# Azure Hybrid Use Benefit
| Instance Name | Resource Group | Location | Instance Size | Image Publisher | Image Offer | Image Sku | Image Version | AHUB | Tags |
| ------------- | -------------- | -------- | ------------- | --------------- | ----------- | --------- | ------------- | ---- | ---- |
{{ range data -}}
| {{.name}} | {{.resourceGroup}} | {{.location}} | {{.vmSize}} | {{.imagePublisher}} | {{.imageOffer}} | {{.imageSku}} | {{.imageVersion}} | {{.ahub}} | {{.tags}} |
{{ end -}}
EOS
    escalate $email
    escalate $license_instances
    check eq(val(item,"ahub"),"Yes")
  end
end

escalation "email" do
  email $param_email
end

escalation "license_instances" do
  request_approval  do
    label "Approve Hybrid Use Benefit"
    description "Approve escalation to apply Hybrid Use Benefit to identified instances"
    parameter "approval_reason" do
      type "string"
      label "Reason for Approval"
      description "Explain why you are approving the action"
    end
  end
  run "license_instances", data, $param_azure_tenant_id
end

define license_instances($data, $param_azure_tenant_id) return $all_responses do
  call get_access_token($param_azure_tenant_id) retrieve $access_token

  $all_responses = []
  foreach $item in $data do
    sub on_error: skip do
      $update_inst_response = http_request(
        verb: "patch",
        host: "management.azure.com",
        https: true,
        href: $item["id"],
        query_strings: {
          "api-version": "2018-06-01"
        },
        headers: {
          "cache-control": "no-cache",
          "content-type": "application/json",
          "authorization": "Bearer " + $access_token
        },
        body: {
          "properties": {
            "licenseType": "Windows_Server"
          }
        }
      )

      $all_responses << $update_inst_response

    end
  end
end

define get_access_token($param_azure_tenant_id) return $access_token do
  $client_id = cred("AZURE_APPLICATION_ID")
  $client_secret = cred("AZURE_APPLICATION_KEY")

  $body_string = "grant_type=client_credentials&resource=https://management.core.windows.net/&client_id="+$client_id+"&client_secret="+$client_secret

  $auth_response = http_post(
    url: join(["https://login.microsoftonline.com/",$param_azure_tenant_id,"/oauth2/token?api-version=1.0"]),
    headers : {
      "cache-control":"no-cache",
      "content-type":"application/x-www-form-urlencoded"
    },
    body:$body_string
  )

  $auth_response_body = $auth_response["body"]
  $access_token = $auth_response_body["access_token"]
end
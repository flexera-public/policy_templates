name "Azure Savings Realized from Reservations"
rs_pt_ver 20180301
type "policy"
short_description "This policy calculates savings realized by Reserved Instance purchases for Azure. See the [README](https://github.com/flexera-public/policy_templates/tree/master/cost/azure/savings_realized/) and [docs.flexera.com/flexera/EN/Automation](https://docs.flexera.com/flexera/EN/Automation/AutomationGS.htm) to learn more."
long_description ""
category "Cost"
severity "low"
default_frequency "monthly"
info(
  version: "3.6",
  provider: "Azure",
  service: "Compute",
  policy_set: "Savings Realized"
)

###############################################################################
# Parameters
###############################################################################

parameter "param_email" do
  type "list"
  category "Policy Settings"
  label "Email addresses"
  description "A list of email addresses to notify."
  default []
end

parameter "param_billing_centers" do
  type "list"
  category "Policy Settings"
  label "Billing Center Name"
  description "List of Billing Center Names/IDs to check Savings Realized for. Leave blank for whole Organization view."
  default []
end

parameter "param_period_start" do
  type "string"
  category "Policy Settings"
  label "Period Start Date"
  description 'The starting month of the historical data to analyze (in YYYY-MM format e.g., "2021-10")'
  allowed_pattern /20[2-9][0-9]-[0-1][0-9]/
end

parameter "param_period_end" do
  type "string"
  category "Policy Settings"
  label "Period End Date"
  description "The ending month of the historical data to analyze (in YYYY-MM format)"
  allowed_pattern /20[2-9][0-9]-[0-1][0-9]/
end

parameter "param_chart_type" do
  type "string"
  category "Policy Settings"
  label "Chart Type"
  description "The type of bar chart to view savings realized data by"
  allowed_values "Grouped Bar Chart", "Stacked Bar Chart"
  default "Grouped Bar Chart"
end

###############################################################################
# Authentication
###############################################################################

credentials "auth_flexera" do
  schemes "oauth2"
  label "Flexera"
  description "Select Flexera One OAuth2 credentials"
  tags "provider=flexera"
end

###############################################################################
# Datasources & Scripts
###############################################################################

# Get applied policy metadata for use later
datasource "ds_applied_policy" do
  request do
    auth $auth_flexera
    host rs_governance_host
    path join(["/api/governance/projects/", rs_project_id, "/applied_policies/", policy_id])
    header "Api-Version", "1.0"
  end
end

datasource "ds_billing_centers" do
  request do
    auth $auth_flexera
    host rs_optima_host
    path join(["/analytics/orgs/", rs_org_id, "/billing_centers"])
    header "Api-Version", "1.0"
    header "User-Agent", "RS Policies"
    query "view", "allocation_table"
    ignore_status [403]
  end
  result do
    encoding "json"
    collect jmes_path(response, "[*]") do
      field "href", jmes_path(col_item, "href")
      field "id", jmes_path(col_item, "id")
      field "name", jmes_path(col_item, "name")
      field "parent_id", jmes_path(col_item, "parent_id")
    end
  end
end

datasource "ds_filtered_bcs" do
  run_script $js_filtered_bcs, $ds_billing_centers, $param_billing_centers
end

script "js_filtered_bcs", type: "javascript" do
  parameters "ds_billing_centers", "param_billing_centers"
  result "result"
  code <<-EOS
  if (param_billing_centers.length == 0) {
    filtered_bcs = _.filter(ds_billing_centers, function(bc) {
      return bc['parent_id'] == null || bc['parent_id'] == undefined
    })
  } else {
    filtered_bcs = _.filter(ds_billing_centers, function(bc) {
      return _.contains(param_billing_centers, bc['id']) || _.contains(param_billing_centers, bc['name']) || _.contains(param_billing_centers, bc['name'].toLowerCase()) || _.contains(param_billing_centers, bc['name'].toUpperCase())
    })
  }

  result = _.compact(_.pluck(filtered_bcs, 'id'))
EOS
end

# Gather list of bill connections from Optima data
datasource "ds_bill_connections" do
  request do
    run_script $js_bill_connections, $ds_filtered_bcs, $param_period_start, $param_period_end, rs_org_id, rs_optima_host
  end
  result do
    encoding "json"
    collect jmes_path(response, "rows") do
      field "bill_source", jmes_path(col_item, "dimensions.bill_source")
    end
  end
end

script "js_bill_connections", type: "javascript" do
  parameters "ds_filtered_bcs", "start_date","end_date", "org_id", "optima_host"
  result "request"
  code <<-EOS
  payload = {
    "billing_center_ids": ds_filtered_bcs,
    "dimensions": [ "bill_source" ],
    "granularity": "month",
    "metrics": [ "cost_amortized_unblended_adj" ],
    "end_at": end_date,
    "start_at": start_date
  }

  var request = {
    auth: "auth_flexera",
    host: optima_host,
    path: "/bill-analysis/orgs/" + org_id + "/costs/aggregated",
    verb: "POST",
    body_fields: payload,
    headers: {
      "User-Agent": "RS Policies"
    }
  }
EOS
end

# Filter out old Azure EA connections and new Azure EA connections
datasource "ds_bill_connections_old" do
  run_script $js_bill_connections_filter, $ds_bill_connections, 0
end

datasource "ds_bill_connections_new" do
  run_script $js_bill_connections_filter, $ds_bill_connections, 7
end

script "js_bill_connections_filter", type:"javascript" do
  parameters "ds_bill_connections", "index"
  result "result"
  code <<-EOS
  bill_sources = _.filter(ds_bill_connections, function(connection) {
    return connection['bill_source'].indexOf('azure-ea') == index
  })

  result = _.uniq(_.compact(_.pluck(bill_sources, 'bill_source')))
EOS
end

datasource "ds_ri_aggregated_costs_old" do
  iterate $ds_bill_connections_old
  request do
    run_script $js_get_aggregated_costs, iter_item, $ds_filtered_bcs, $param_period_start, $param_period_end, rs_org_id, rs_optima_host, "ri_old"
  end
  result do
    encoding "json"
    collect jmes_path(response, "rows") do
      field "instance_type", jmes_path(col_item, "dimensions.instance_type")
      field "region", jmes_path(col_item, "dimensions.region")
      field "usage_unit", jmes_path(col_item, "dimensions.usage_unit")
      field "usage_amount", jmes_path(col_item, "metrics.usage_amount")
      field "cost", jmes_path(col_item, "metrics.cost_amortized_unblended_adj")
      field "month", jmes_path(col_item, "timestamp")
    end
  end
end

datasource "ds_ri_aggregated_costs_new" do
  iterate $ds_bill_connections_new
  request do
    run_script $js_get_aggregated_costs, iter_item, $ds_filtered_bcs, $param_period_start, $param_period_end, rs_org_id, rs_optima_host, "ri_new"
  end
  result do
    encoding "json"
    collect jmes_path(response, "rows") do
      field "instance_type", jmes_path(col_item, "dimensions.instance_type")
      field "region", jmes_path(col_item, "dimensions.region")
      field "usage_unit", jmes_path(col_item, "dimensions.usage_unit")
      field "usage_amount", jmes_path(col_item, "metrics.usage_amount")
      field "cost", jmes_path(col_item, "metrics.cost_amortized_unblended_adj")
      field "month", jmes_path(col_item, "timestamp")
    end
  end
end

datasource "ds_base_aggregated_costs_old" do
  iterate $ds_bill_connections_old
  request do
    run_script $js_get_aggregated_costs, iter_item, $ds_filtered_bcs, $param_period_start, $param_period_end, rs_org_id, rs_optima_host, "base_old"
  end
  result do
    encoding "json"
    collect jmes_path(response, "rows") do
      field "instance_type", jmes_path(col_item, "dimensions.instance_type")
      field "region", jmes_path(col_item, "dimensions.region")
      field "usage_unit", jmes_path(col_item, "dimensions.usage_unit")
      field "usage_amount", jmes_path(col_item, "metrics.usage_amount")
      field "cost", jmes_path(col_item, "metrics.cost_amortized_unblended_adj")
      field "month", jmes_path(col_item, "timestamp")
    end
  end
end

datasource "ds_base_aggregated_costs_new" do
  iterate $ds_bill_connections_new
  request do
    run_script $js_get_aggregated_costs, iter_item, $ds_filtered_bcs, $param_period_start, $param_period_end, rs_org_id, rs_optima_host, "base_new"
  end
  result do
    encoding "json"
    collect jmes_path(response, "rows") do
      field "instance_type", jmes_path(col_item, "dimensions.instance_type")
      field "region", jmes_path(col_item, "dimensions.region")
      field "usage_unit", jmes_path(col_item, "dimensions.usage_unit")
      field "usage_amount", jmes_path(col_item, "metrics.usage_amount")
      field "cost", jmes_path(col_item, "metrics.cost_amortized_unblended_adj")
      field "month", jmes_path(col_item, "timestamp")
    end
  end
end

script "js_get_aggregated_costs", type: "javascript" do
  parameters "bill_connection_id", "ds_filtered_bcs", "start_date", "end_date", "org_id", "optima_host", "connection_type"
  result "request"
  code <<-EOS
  // Set filters based on the type of request (RI or Base)
  // and whether or not we're pulling costs for an old Azure EA connection or a new one
  if (connection_type == 'ri_old') {
    filter = {
      "type": "and",
      "expressions": [
        {
          "type": "or",
          "expressions": [
            { "dimension": "service", "type": "equal", "value": "Microsoft.Compute" },
            { "dimension": "service", "type": "equal", "value": "microsoft.compute" }
          ]
        },
        {
          "type": "or",
          "expressions": [
            {
              "dimension": "resource_type",
              "type": "equal",
              "value": "Virtual Machines-Reservation-Base VM"
            },
            {
              "dimension": "resource_type",
              "type": "equal",
              "value": "virtual machines-reservation-base vm"
            }
          ]
        },
        {
          "type": "not",
          "expression": { "dimension": "instance_type", "type": "equal", "value": "None" }
        }
      ]
    }
  }

  if (connection_type == 'ri_new') {
    filter = {
      "type": "and",
      "expressions": [
        {
          "type": "or",
          "expressions": [
            { "dimension": "category", "type": "equal", "value": "Commitments" },
            { "dimension": "category", "type": "equal", "value": "commitments" }
          ]
        },
        {
          "type": "or",
          "expressions": [
            { "dimension": "purchase_option", "type": "equal", "value": "Reserved" },
            { "dimension": "purchase_option", "type": "equal", "value": "reserved" }
          ]
        }
      ]
    }
  }

  if (connection_type == 'base_old') {
    filter = {
      "type": "and",
      "expressions": [
        {
          "type": "or",
          "expressions": [
            { "dimension": "service", "type": "equal", "value": "Microsoft.Compute" },
            { "dimension": "service", "type": "equal", "value": "microsoft.compute" }
          ]
        },
        {
          "type": "not",
          "expression": {
            "type": "or",
            "expressions": [
              {
                "dimension": "resource_type",
                "type": "equal",
                "value": "Virtual Machines-Reservation-Base VM"
              },
              {
                "dimension": "resource_type",
                "type": "equal",
                "value": "virtual machines-reservation-base vm"
              }
            ]
          }
        },
        {
          "type": "not",
          "expression": { "dimension": "instance_type", "type": "equal", "value": "None" }
        }
      ]
    }
  }

  if (connection_type == 'base_new') {
    filter = {
      "type": "and",
      "expressions": [
        {
          "type": "or",
          "expressions": [
            { "dimension": "service", "type": "equal", "value": "Microsoft.Compute" },
            { "dimension": "service", "type": "equal", "value": "microsoft.compute" }
          ]
        },
        {
          "type": "not",
          "expression": {
            "type": "or",
            "expressions": [
              { "dimension": "purchase_option", "type": "equal", "value": "Reserved" },
              { "dimension": "purchase_option", "type": "equal", "value": "reserved" },
              { "dimension": "purchase_option", "type": "equal", "value": "Spot" },
              { "dimension": "purchase_option", "type": "equal", "value": "spot" },
              { "dimension": "purchase_option", "type": "equal", "value": "Savings Plan" },
              { "dimension": "purchase_option", "type": "equal", "value": "savings plan" }
            ]
          }
        }
      ]
    }
  }

  // Ensure we're filtering our request to just the specific bill connection
  filter["expressions"].push({
    "dimension": "bill_source",
    "type": "equal",
    "value": bill_connection_id
  })

  payload = {
    "billing_center_ids": ds_filtered_bcs,
    "filter": filter,
    "dimensions": [
      "instance_type",
      "region",
      "usage_unit"
    ],
    "granularity": "month",
    "metrics": [
      "cost_amortized_unblended_adj",
      "usage_amount"
    ]
    "end_at": end_date,
    "start_at": start_date
  }

  var request = {
    auth: "auth_flexera",
    host: optima_host,
    path: "/bill-analysis/orgs/" + org_id + "/costs/aggregated",
    verb: "POST",
    body_fields: payload,
    headers: {
      "User-Agent": "RS Policies"
    }
  }
EOS
end

datasource "ds_ri_aggregated_costs" do
  run_script $js_cost_combiner, $ds_ri_aggregated_costs_old, $ds_ri_aggregated_costs_new
end

datasource "ds_base_aggregated_costs" do
  run_script $js_cost_combiner, $ds_base_aggregated_costs_old, $ds_base_aggregated_costs_new
end

script "js_cost_combiner", type:"javascript" do
  parameters "ds_costs_1", "ds_costs_2"
  result "result"
  code <<-EOS
  result = ds_costs_1.concat(ds_costs_2)
EOS
end

datasource "ds_savings_realized" do
  run_script $js_savings_realized, $ds_ri_aggregated_costs, $ds_base_aggregated_costs
end

script "js_savings_realized", type: "javascript" do
  parameters "ds_ri_aggregated_costs", "ds_base_aggregated_costs"
  result "result"
  code <<-'EOS'
  result = []

  all_costs = ds_ri_aggregated_costs.concat(ds_base_aggregated_costs)

  // Get list of Instance Types, Regions, Months
  instance_types = _.uniq(_.pluck(all_costs, 'instance_type'))
  regions = _.uniq(_.pluck(all_costs, 'region'))
  months = _.uniq(_.pluck(all_costs, 'month'))

  // Calculate total cost for each month
  _.each(months, function(month) {
    month_costs = _.filter(all_costs, function(cost) { return cost['month'] == month })
    total_month_cost = _.reduce(_.pluck(month_costs, 'cost'), function(memo, num) { return memo + num }, 0)

    result.push({
      month: month,
      cost: total_month_cost,
      dimension: "Total Actual Spend On Discountable Compute"
    })
  })

  // Calculate base cost of instance per hour across all months
  // for each instance type/region/operating system combination
  unique_cost_instance_hours = []

  _.each(instance_types, function(type) {
    _.each(regions, function(region) {
      base_cost_instance_hour_total = 0
      count = 0

      _.each(ds_base_aggregated_costs, function(cost){
        if (cost['instance_type'] == type && cost['region'] == region) {
          base_cost_instance_hour_total += (cost['cost'] / cost['usage_amount'])
          count += 1
        }
      })

      avg_base_cost_instance_hour = 0
      if (count > 0) { avg_base_cost_instance_hour = base_cost_instance_hour_total / count }

      unique_cost_instance_hours.push({
        instance_type: type,
        region: region,
        avg_base_cost_instance_hour: avg_base_cost_instance_hour
      })
    })
  })

  // Apply cost_instance_hour to calculate savings realized
  savings_realized_object = {}

  _.each(ds_ri_aggregated_costs, function(cost) {
    _.each(unique_cost_instance_hours, function(instance_hour) {
      if (cost['instance_type'] == instance_hour['instance_type'] && cost['region'] == instance_hour['region']) {
        savings_realized_per_instance_hour = instance_hour['avg_base_cost_instance_hour'] - (cost['cost'] / cost['usage_amount'])

        savings_realized = 0
        if (cost['cost'] > 0) {
          savings_realized = savings_realized_per_instance_hour * cost['usage_amount']
        }

        if (savings_realized_object[cost['month']] == undefined) { savings_realized_object[cost['month']] = 0 }
          savings_realized_object[cost['month']] += savings_realized
      }
    })
  })

  _.each(months, function(month) {
    cost = 0
    if (typeof(savings_realized_object[cost['month']]) == 'number') {
      cost = savings_realized_object[cost['month']]
    }

    result.push({
      month: month,
      cost: cost,
      dimension: "Savings Realized On Compute Reservations"
    })
  })

  result = _.sortBy(result, "month")
EOS
end

#CHART CREATION
datasource "ds_chart_data" do
  run_script $js_create_chart_data, $ds_savings_realized, $ds_applied_policy, $param_chart_type
end

script "js_create_chart_data", type: "javascript" do
  parameters "savings_realized_data", "ds_applied_policy", "param_chart_type"
  result "report"
  code <<-EOS
  //Get months
  var months = _.pluck( _.uniq(savings_realized_data, function(data){ return data.month }), "month" )

  //Create report data (Concatenate savings realized and total costs into one object/row of data)
  var report = []
  _.each(months, function(mo){
    savings_realized = 0
    total_spend = 0
    _.each(savings_realized_data, function(data){
      if(mo == data.month && data.dimension == "Savings Realized On Compute Reservations"){
        savings_realized = data.cost
      }
      if(mo == data.month && data.dimension == "Total Actual Spend On Discountable Compute"){
        total_spend = data.cost
      }
    })

    month = mo
    report.push({
      "month": mo.split('-')[0] + '-' + mo.split('-')[1],
      "total_spend": parseFloat(total_spend).toFixed(2),
      "savings_realized": parseFloat(savings_realized).toFixed(2),
      "percentage": parseFloat((savings_realized/(total_spend + savings_realized))*100).toFixed(0).toString() + "%"
    })
  })

  //Group data by Cost Dimension
  group_by_dimension =
  _.groupBy(savings_realized_data, function(data){ return data.dimension })

  //Determine chart type
  chart_type = "cht="
  if (param_chart_type == "Grouped Bar Chart") { chart_type += "bvg" }
  else if (param_chart_type == "Stacked Bar Chart" ) { chart_type += "bvs" }

  //Create chart axis labels
  chart_axis_labels =
  ("chxl=1:," +
    _.uniq(savings_realized_data, function(sr) { return sr.month })
    .map(function(sr){ return sr.month.substring(0,7) })
  ).split(",").join("|")

  //Create legend
  chart_legend = "chdl="
  var i = 0
  for (var key in group_by_dimension) {
    chart_legend += key
    i++
    if (i < _.size(group_by_dimension)) { chart_legend += "|" }
  }

  //calculate scale
  //chart_range = ("chxr=0," +
  max = (Math.max.apply(Math, savings_realized_data.map(function(sr){ return sr.savings_realized }))*1.1).toFixed(2)
  min = (Math.min.apply(Math, savings_realized_data.map(function(sr){ return sr.savings_realized }))*0.9).toFixed(2)
  chart_range = "chxr=0," + min + "," + max

  //Create chart dataset
  chart_data = "chd=t:"
  var count_1 = 0
  _.each(group_by_dimension, function(o){
    var count_2 = 0
    _.each(o, function(p){
      chart_data = chart_data + p.cost
      count_2++
      if (count_2 < _.size(o)){ chart_data = chart_data + "," }
    })
    count_1++
    if (count_1 < _.size(group_by_dimension)){ chart_data = chart_data + "|" }
  })

  //Whole Chart object
  chart = {
    chart_type: encodeURI(chart_type),
    chart_size: encodeURI("chs=999x450"),
    chart_data: encodeURI(chart_data),
    chart_title: encodeURI("chtt=Savings Realized On Compute Reservations For Organization"),
    chart_image: encodeURI("chof=.png"),
    chart_y_axis: encodeURI("chxt=y,x"),
    chart_axis_label: encodeURI(chart_axis_labels),
    chart_axis_format: encodeURI("chxs=0N*cUSD0sz*|1,min40"),
    chart_line_style: encodeURI("chls=3|3|3|3|3|3|3|3|3|3|3"),
    chart_line_color: encodeURI("chco=1f5ab8,55b81f,198038,b28600,1192e8,009d9a,005d5d,007d79"),
    chart_data_scale: encodeURI("chds=a"),
    chart_legend: encodeURI(chart_legend),
    chart_legend_size: encodeURI("chdls=000000,10"),
    chart_legend_position: encodeURI("chdlp=b")
  }

  if ( report.length !== 0 ){
    report[0]["chart_dimensions"] = chart
    report[0]["policy_name"] = ds_applied_policy['name']
  }
EOS
end

###############################################################################
# Policy
###############################################################################

policy "policy_purchase_option_by_inst_type_and_region" do
  validate_each $ds_chart_data do
    summary_template "{{ with index data 0 }}{{ .policy_name }}{{ end }}"
    detail_template <<-'EOS'
    # Savings Realized On Compute Reservations Report
    ![Savings Realized On Compute Reservations Chart](https://api.image-charts-auth.flexeraeng.com/ic-function?rs_org_id={{ rs_org_id }}&rs_project_id={{ rs_project_id }}&{{ with index data 0 }}{{ .chart_dimensions.chart_data }}{{ end }}&{{ with index data 0 }}{{ .chart_dimensions.chart_size }}{{ end }}&{{ with index data 0 }}{{ .chart_dimensions.chart_type }}{{ end }}&{{ with index data 0 }}{{ .chart_dimensions.chart_image }}{{ end }}&{{ with index data 0 }}{{ .chart_dimensions.chart_title }}{{ end }}&{{ with index data 0 }}{{ .chart_dimensions.chart_y_axis }}{{ end }}&{{ with index data 0 }}{{ .chart_dimensions.chart_axis_label }}{{ end }}&{{ with index data 0 }}{{ .chart_dimensions.chart_line_style }}{{ end }}&{{ with index data 0 }}{{ .chart_dimensions.chart_line_color }}{{ end }}&{{ with index data 0 }}{{ .chart_dimensions.chart_data_scale }}{{ end }}&{{ with index data 0 }}{{ .chart_dimensions.chart_legend_size }}{{ end }}&{{ with index data 0 }}{{ .chart_dimensions.chart_legend }}{{ end }}&{{ with index data 0 }}{{ .chart_dimensions.chart_axis_format }}{{ end }}&{{ with index data 0 }}{{ .chart_dimensions.chart_legend_position }}{{ end }})
    EOS
    check eq(0, 1)
    escalate $esc_email
    export do
      resource_level false
      field "month" do
        label "Month"
      end
      field "total_spend" do
        label "Total Actual Spend On Discountable Compute"
      end
      field "savings_realized" do
        label "Savings Realized On Compute Reservations"
      end
      field "percentage" do
        label "Savings Rate"
      end
    end
  end
end

###############################################################################
# Escalations
###############################################################################

escalation "esc_email" do
  automatic true
  label "Send Email"
  description "Send incident email"
  email $param_email
end

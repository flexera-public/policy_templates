name "Azure Savings Realized from Reservations"
rs_pt_ver 20180301
type "policy"
short_description "This policy calculates savings realized by Reserved Instance purchases for Azure. See the [README](https://github.com/flexera-public/policy_templates/tree/master/cost/azure/savings_realized/) and [docs.flexera.com/flexera/EN/Automation](https://docs.flexera.com/flexera/EN/Automation/AutomationGS.htm) to learn more."
long_description ""
category "Cost"
severity "low"
default_frequency "monthly"
info(
  version: "3.9.3",
  provider: "Azure",
  service: "Compute",
  policy_set: "Savings Realized",
  hide_skip_approvals: "true"
)

###############################################################################
# Parameters
###############################################################################

parameter "param_email" do
  type "list"
  category "Policy Settings"
  label "Email addresses"
  description "A list of email addresses to notify."
  default []
end

parameter "param_billing_centers" do
  type "list"
  category "Policy Settings"
  label "Billing Center Name"
  description "List of Billing Center Names/IDs to check Savings Realized for. Leave blank for whole Organization view."
  default []
end

parameter "param_period_start" do
  type "string"
  category "Policy Settings"
  label "Period Start Date"
  description 'The starting month of the historical data to analyze (in YYYY-MM format e.g., "2021-10")'
  allowed_pattern /20[2-9][0-9]-[0-1][0-9]/
  # No default value, user input required
end

parameter "param_period_end" do
  type "string"
  category "Policy Settings"
  label "Period End Date"
  description "The ending month of the historical data to analyze (in YYYY-MM format)"
  allowed_pattern /20[2-9][0-9]-[0-1][0-9]/
  # No default value, user input required
end

parameter "param_chart_type" do
  type "string"
  category "Policy Settings"
  label "Chart Type"
  description "The type of bar chart to view savings realized data by"
  allowed_values "Grouped Bar Chart", "Stacked Bar Chart"
  default "Grouped Bar Chart"
end

parameter "param_chart_currency" do
  type "string"
  category "Policy Settings"
  label "Chart currency format"
  description "The format to show the currency in the chart"
  allowed_values "Symbol (e.g. $)", "Code (e.g. USD)"
  default "Symbol (e.g. $)"
end

###############################################################################
# Authentication
###############################################################################

credentials "auth_flexera" do
  schemes "oauth2"
  label "Flexera"
  description "Select Flexera One OAuth2 credentials"
  tags "provider=flexera"
end

###############################################################################
# Datasources & Scripts
###############################################################################

# Get applied policy metadata for use later
datasource "ds_applied_policy" do
  request do
    auth $auth_flexera
    host rs_governance_host
    path join(["/api/governance/projects/", rs_project_id, "/applied_policies/", policy_id])
    header "Api-Version", "1.0"
  end
end

# Table to convert region names from old EA connections to the new ones
datasource "ds_region_table" do
  run_script $js_region_table
end

script "js_region_table", type: "javascript" do
  result "result"
  code <<-EOS
  result = {
    "AE Central": "UAE Central",
    "AE North": "UAE North",
    "AP East": "East Asia",
    "AP Southeast": "Southeast Asia",
    "AU Central": "Australia Central",
    "AU Central 2": "Australia Central 2",
    "AU East": "Australia East",
    "AU Southeast": "Australia Southeast",
    "BR South": "Brazil South",
    "BR Southeast": "Brazil Southeast",
    "CA Central": "Canada Central",
    "CA East": "Canada East",
    "CH North": "China North",
    "CH West": "China West",
    "DE North": "Germany North",
    "DE West Central": "Germany West Central",
    "EU North": "North Europe",
    "EU West": "West Europe",
    "FR Central": "France Central",
    "FR South": "France South",
    "IN Central": "Central India",
    "IN Central Jio": "Jio India Central",
    "IN South": "South India",
    "IN West": "West India",
    "IN West Jio": "Jio India West",
    "IT North": "Italy North",
    "JA East": "Japan East",
    "JA West": "Japan West",
    "KR Central": "Korea Central",
    "KR South": "Korea South",
    "NO East": "Norway East",
    "NO West": "Norway West",
    "PL Central": "Poland Central",
    "QA Central": "Qatar Central",
    "SE Central": "Sweden Central",
    "SE South": "Sweden South",
    "UK South": "UK South",
    "UK West": "UK West",
    "US Central": "Central US",
    "US East": "East US",
    "US East 2": "East US 2",
    "US North Central": "North Central US",
    "US South Central": "South Central US",
    "US West": "West US",
    "US West 2": "West US 2",
    "US West 3": "West US 3",
    "US West Central": "West Central US",
    "ZA North": "South Africa North",
    "ZA West": "South Africa West",
    "All Regions": "All Regions",
    "Unassigned": "Unassigned"
  }
EOS
end

datasource "ds_billing_centers" do
  request do
    auth $auth_flexera
    host rs_optima_host
    path join(["/analytics/orgs/", rs_org_id, "/billing_centers"])
    query "view", "allocation_table"
    header "Api-Version", "1.0"
    header "User-Agent", "RS Policies"
    ignore_status [403]
  end
  result do
    encoding "json"
    collect jmes_path(response, "[*]") do
      field "href", jmes_path(col_item, "href")
      field "id", jmes_path(col_item, "id")
      field "name", jmes_path(col_item, "name")
      field "parent_id", jmes_path(col_item, "parent_id")
    end
  end
end

datasource "ds_filtered_bcs" do
  run_script $js_filtered_bcs, $ds_billing_centers, $param_billing_centers
end

script "js_filtered_bcs", type: "javascript" do
  parameters "ds_billing_centers", "param_billing_centers"
  result "result"
  code <<-EOS
  if (param_billing_centers.length == 0) {
    filtered_bcs = _.filter(ds_billing_centers, function(bc) {
      return bc['parent_id'] == null || bc['parent_id'] == undefined
    })
  } else {
    filtered_bcs = _.filter(ds_billing_centers, function(bc) {
      return _.contains(param_billing_centers, bc['id']) || _.contains(param_billing_centers, bc['name']) || _.contains(param_billing_centers, bc['name'].toLowerCase()) || _.contains(param_billing_centers, bc['name'].toUpperCase())
    })
  }

  result = _.compact(_.pluck(filtered_bcs, 'id'))
EOS
end

# Gather list of bill connections from Flexera data
datasource "ds_bill_connections" do
  request do
    run_script $js_bill_connections, $ds_filtered_bcs, $param_period_start, $param_period_end, rs_org_id, rs_optima_host
  end
  result do
    encoding "json"
    collect jmes_path(response, "rows") do
      field "bill_source", jmes_path(col_item, "dimensions.bill_source")
    end
  end
end

script "js_bill_connections", type: "javascript" do
  parameters "ds_filtered_bcs", "start_date", "end_date", "org_id", "optima_host"
  result "request"
  code <<-EOS
  payload = {
    "billing_center_ids": ds_filtered_bcs,
    "dimensions": [ "bill_source" ],
    "granularity": "month",
    "metrics": [ "cost_amortized_unblended_adj" ],
    "end_at": end_date,
    "start_at": start_date
  }

  var request = {
    auth: "auth_flexera",
    host: optima_host,
    path: "/bill-analysis/orgs/" + org_id + "/costs/aggregated",
    verb: "POST",
    body_fields: payload,
    headers: {
      "User-Agent": "RS Policies"
    }
  }
EOS
end

# Filter out old Azure EA connections and new Azure EA connections
datasource "ds_bill_connections_old" do
  run_script $js_bill_connections_filter, $ds_bill_connections, "ea_old"
end

datasource "ds_bill_connections_new" do
  run_script $js_bill_connections_filter, $ds_bill_connections, "ea_new"
end

datasource "ds_bill_connections_mca_encbi" do
  run_script $js_bill_connections_filter, $ds_bill_connections, "mca_encbi"
end

script "js_bill_connections_filter", type:"javascript" do
  parameters "bill_connections", "type"
  result "result"
  code <<-EOS
  switch (type) {
    case "ea_old":
      bill_sources = _.filter(bill_connections, function(connection) {
        return connection["bill_source"].indexOf("azure-ea") == 0
      })
      break;
    case "ea_new":
      bill_sources = _.filter(bill_connections, function(connection) {
        return connection["bill_source"].indexOf("azure-ea") == 7
      })
      break;
    case "mca_encbi":
      bill_sources = _.filter(bill_connections, function(connection) {
        return connection["bill_source"].indexOf("cbi-oi-azure-mca") >= 0
      })
      break;
  }
  result = _.uniq(_.compact(_.pluck(bill_sources, 'bill_source')))
EOS
end

datasource "ds_aggregated_costs_old_base" do
  request do
    run_script $js_get_aggregated_costs, $ds_bill_connections_old, $ds_filtered_bcs, $param_period_start, $param_period_end, rs_org_id, rs_optima_host, "old_base"
  end
  result do
    encoding "json"
    collect jmes_path(response, "rows") do
      field "instance_type", jmes_path(col_item, "dimensions.instance_type")
      field "region", jmes_path(col_item, "dimensions.region")
      field "usage_unit", jmes_path(col_item, "dimensions.usage_unit")
      field "usage_amount", jmes_path(col_item, "metrics.usage_amount")
      field "cost", jmes_path(col_item, "metrics.cost_amortized_unblended_adj")
      field "month", jmes_path(col_item, "timestamp")
    end
  end
end

datasource "ds_aggregated_costs_old_ri" do
  request do
    run_script $js_get_aggregated_costs, $ds_bill_connections_old, $ds_filtered_bcs, $param_period_start, $param_period_end, rs_org_id, rs_optima_host, "old_ri"
  end
  result do
    encoding "json"
    collect jmes_path(response, "rows") do
      field "instance_type", jmes_path(col_item, "dimensions.instance_type")
      field "region", jmes_path(col_item, "dimensions.region")
      field "usage_unit", jmes_path(col_item, "dimensions.usage_unit")
      field "usage_amount", jmes_path(col_item, "metrics.usage_amount")
      field "cost", jmes_path(col_item, "metrics.cost_amortized_unblended_adj")
      field "month", jmes_path(col_item, "timestamp")
    end
  end
end

datasource "ds_aggregated_costs_new_base" do
  request do
    run_script $js_get_aggregated_costs, $ds_bill_connections_new, $ds_filtered_bcs, $param_period_start, $param_period_end, rs_org_id, rs_optima_host, "new_base"
  end
  result do
    encoding "json"
    collect jmes_path(response, "rows") do
      field "instance_type", jmes_path(col_item, "dimensions.instance_type")
      field "region", jmes_path(col_item, "dimensions.region")
      field "usage_unit", jmes_path(col_item, "dimensions.usage_unit")
      field "usage_amount", jmes_path(col_item, "metrics.usage_amount")
      field "cost", jmes_path(col_item, "metrics.cost_amortized_unblended_adj")
      field "month", jmes_path(col_item, "timestamp")
    end
  end
end

datasource "ds_aggregated_costs_new_ri" do
  request do
    run_script $js_get_aggregated_costs, $ds_bill_connections_new, $ds_filtered_bcs, $param_period_start, $param_period_end, rs_org_id, rs_optima_host, "new_ri"
  end
  result do
    encoding "json"
    collect jmes_path(response, "rows") do
      field "instance_type", jmes_path(col_item, "dimensions.instance_type")
      field "region", jmes_path(col_item, "dimensions.region")
      field "usage_unit", jmes_path(col_item, "dimensions.usage_unit")
      field "usage_amount", jmes_path(col_item, "metrics.usage_amount")
      field "cost", jmes_path(col_item, "metrics.cost_amortized_unblended_adj")
      field "month", jmes_path(col_item, "timestamp")
    end
  end
end

datasource "ds_aggregated_costs_mca_encbi_base_optima" do
  request do
    run_script $js_get_aggregated_costs, $ds_bill_connections_mca_encbi, $ds_filtered_bcs, $param_period_start, $param_period_end, rs_org_id, rs_optima_host, "mca_encbi_base"
  end
  result do
    collect jmes_path(response, "rows") do
      field "instance_type", jmes_path(col_item, "dimensions.instance_type")
      field "region", jmes_path(col_item, "dimensions.region")
      field "usage_unit", jmes_path(col_item, "dimensions.usage_unit")
      field "usage_amount", jmes_path(col_item, "metrics.usage_amount")
      field "cost", jmes_path(col_item, "metrics.cost_amortized_unblended_adj")
      field "month", jmes_path(col_item, "timestamp")
    end
  end
end

datasource "ds_aggregated_costs_mca_encbi_base" do
  run_script $js_empty_aggregated_costs_if_no_bill_connections, $ds_bill_connections_mca_encbi, $ds_aggregated_costs_mca_encbi_base_optima
end

datasource "ds_aggregated_costs_mca_encbi_ri_optima" do
  request do
    run_script $js_get_aggregated_costs, $ds_bill_connections_mca_encbi, $ds_filtered_bcs, $param_period_start, $param_period_end, rs_org_id, rs_optima_host, "mca_encbi_ri"
  end
  result do
    collect jmes_path(response, "rows") do
      field "instance_type", jmes_path(col_item, "dimensions.instance_type")
      field "region", jmes_path(col_item, "dimensions.region")
      field "usage_unit", jmes_path(col_item, "dimensions.usage_unit")
      field "usage_amount", jmes_path(col_item, "metrics.usage_amount")
      field "cost", jmes_path(col_item, "metrics.cost_amortized_unblended_adj")
      field "month", jmes_path(col_item, "timestamp")
    end
  end
end

datasource "ds_aggregated_costs_mca_encbi_ri" do
  run_script $js_empty_aggregated_costs_if_no_bill_connections, $ds_bill_connections_mca_encbi, $ds_aggregated_costs_mca_encbi_ri_optima
end

script "js_empty_aggregated_costs_if_no_bill_connections", type: "javascript" do
  parameters "bill_connections", "aggregated_costs"
  result "result"
  code <<-EOS
  result = []
  if (bill_connections.length > 0) {
    result = aggregated_costs
  }
EOS
end

script "js_get_aggregated_costs", type: "javascript" do
  parameters "bill_sources", "ds_filtered_bcs", "start_date", "end_date", "org_id", "optima_host", "connection_type"
  result "request"
  code <<-EOS
  // Set filters based on the type of request
  if (connection_type == 'old_base') {
    filter = {
      "type": "and",
      "expressions": [
        {
          "type": "or",
          "expressions": [
            { "dimension": "service", "type": "equal", "value": "Microsoft.Compute" },
            { "dimension": "service", "type": "equal", "value": "microsoft.compute" }
          ]
        },
        {
          "type": "not",
          "expression": {
            "type": "or",
            "expressions": [
              {
                "dimension": "resource_type",
                "type": "equal",
                "value": "Virtual Machines-Reservation-Base VM"
              },
              {
                "dimension": "resource_type",
                "type": "equal",
                "value": "virtual machines-reservation-base vm"
              }
            ]
          }
        },
        {
          "type": "not",
          "expression": { "dimension": "instance_type", "type": "equal", "value": "None" }
        }
      ]
    }
  }

  if (connection_type == 'old_ri') {
    filter = {
      "type": "and",
      "expressions": [
        {
          "type": "or",
          "expressions": [
            { "dimension": "service", "type": "equal", "value": "Microsoft.Compute" },
            { "dimension": "service", "type": "equal", "value": "microsoft.compute" }
          ]
        },
        {
          "type": "or",
          "expressions": [
            {
              "dimension": "resource_type",
              "type": "equal",
              "value": "Virtual Machines-Reservation-Base VM"
            },
            {
              "dimension": "resource_type",
              "type": "equal",
              "value": "virtual machines-reservation-base vm"
            }
          ]
        },
        {
          "type": "not",
          "expression": { "dimension": "instance_type", "type": "equal", "value": "None" }
        }
      ]
    }
  }

  if (connection_type == 'new_base') {
    filter = {
      "type": "and",
      "expressions": [
        {
          "type": "not",
          "expression": {
            "type": "or",
            "expressions": [
              { "dimension": "purchase_option", "type": "equal", "value": "Reserved" },
              { "dimension": "purchase_option", "type": "equal", "value": "reserved" },
              { "dimension": "purchase_option", "type": "equal", "value": "Savings Plan" },
              { "dimension": "purchase_option", "type": "equal", "value": "savings plan" },
              { "dimension": "purchase_option", "type": "equal", "value": "Spot" },
              { "dimension": "purchase_option", "type": "equal", "value": "spot" }
            ]
          }
        },
        {
          "type": "or",
          "expressions": [
            { "dimension": "vendor", "type": "equal", "value": "Azure"  },
            { "dimension": "vendor", "type": "equal", "value": "azure"  }
          ]
        },
        {
          "type": "or",
          "expressions": [
            { "dimension": "service", "type": "equal", "value": "Microsoft.Compute" },
            { "dimension": "service", "type": "equal", "value": "microsoft.compute" }
          ]
        },
        {
          "type": "not",
          "expression": { "dimension": "instance_type", "type": "equal", "value": "None" }
        }
      ]
    }
  }

  if (connection_type == 'new_ri') {
    filter = {
      "type": "and",
      "expressions": [
        {
          "type": "or",
          "expressions": [
            { "dimension": "purchase_option", "type": "equal", "value": "Reserved" },
            { "dimension": "purchase_option", "type": "equal", "value": "reserved" }
          ]
        },
        {
          "type": "or",
          "expressions": [
            { "dimension": "vendor", "type": "equal", "value": "Azure"  },
            { "dimension": "vendor", "type": "equal", "value": "azure"  }
          ]
        },
        {
          "type": "or",
          "expressions": [
            { "dimension": "service", "type": "equal", "value": "Microsoft.Compute" },
            { "dimension": "service", "type": "equal", "value": "microsoft.compute" }
          ]
        },
        {
          "type": "not",
          "expression": { "dimension": "instance_type", "type": "equal", "value": "None" }
        }
      ]
    }
  }

  if (connection_type == 'mca_encbi_base') {
    filter = {
      "type": "and",
      "expressions": [
         {
          "type": "or",
          "expressions": [
            { "dimension": "service", "type": "equal", "value": "Microsoft.Compute" },
            { "dimension": "service", "type": "equal", "value": "microsoft.compute" },
          ]
        },
        {
          "type": "or",
          "expressions": [
            { "dimension": "purchase_option", "type": "equal", "value": "On Demand" },
            { "dimension": "purchase_option", "type": "equal", "value": "on demand" }
          ]
        },
        {
          "type": "not",
          "expression": { "dimension": "instance_type", "type": "equal", "value": "None" }
        }
      ]
    }
  }

  if (connection_type == 'mca_encbi_ri') {
    filter = {
      "type": "and",
      "expressions": [
         {
          "type": "or",
          "expressions": [
            { "dimension": "service", "type": "equal", "value": "Microsoft.Compute" },
            { "dimension": "service", "type": "equal", "value": "microsoft.compute" },
          ]
        },
        {
          "type": "or",
          "expressions": [
            { "dimension": "purchase_option", "type": "equal", "value": "Reserved" },
            { "dimension": "purchase_option", "type": "equal", "value": "reserved" }
          ]
        },
        {
          "type": "not",
          "expression": { "dimension": "instance_type", "type": "equal", "value": "None" }
        }
      ]
    }
  }

  // Ensure we're filtering our request to just the specific bill connection
  bill_source_expressions = _.map(bill_sources, function(bill_source) {
    return { "dimension": "bill_source", "type": "equal", "value": bill_source }
  })

  if (bill_source_expressions.length > 0) {
    filter["expressions"].push({ "type": "or", "expressions": bill_source_expressions })
  }

  payload = {
    "billing_center_ids": ds_filtered_bcs,
    "filter": filter,
    "dimensions": [ "instance_type", "region", "usage_unit" ],
    "granularity": "month",
    "metrics": [ "cost_amortized_unblended_adj", "usage_amount" ],
    "end_at": end_date,
    "start_at": start_date
  }

  var request = {
    auth: "auth_flexera",
    host: optima_host,
    path: "/bill-analysis/orgs/" + org_id + "/costs/aggregated",
    verb: "POST",
    body_fields: payload,
    headers: {
      "User-Agent": "RS Policies"
    }
  }
EOS
end

datasource "ds_savings_realized" do
  run_script $js_savings_realized, $ds_aggregated_costs_old_base, $ds_aggregated_costs_old_ri, $ds_aggregated_costs_new_base, $ds_aggregated_costs_new_ri, $ds_aggregated_costs_mca_encbi_base, $ds_aggregated_costs_mca_encbi_ri, $ds_region_table
end

script "js_savings_realized", type: "javascript" do
  parameters "ds_aggregated_costs_old_base", "ds_aggregated_costs_old_ri", "ds_aggregated_costs_new_base", "ds_aggregated_costs_new_ri", "ds_aggregated_costs_mca_encbi_base", "ds_aggregated_costs_mca_encbi_ri", "ds_region_table"
  result "result"
  code <<-'EOS'
  result = []

  // Convert region value for old Azure endpoint data to match new Azure endpoint for consistency
  old_base_mapped = _.map(ds_aggregated_costs_old_base, function(cost) {
    region = cost['region']
    if (ds_region_table[region] != undefined) { region = ds_region_table[region] }

    return {
      instance_type: cost['instance_type'],
      usage_unit: cost['usage_unit'],
      usage_amount: cost['usage_amount'],
      cost: cost['cost'],
      month: cost['month'],
      region: region
    }
  })

  old_ri_mapped = _.map(ds_aggregated_costs_old_ri, function(cost) {
    region = cost['region']
    if (ds_region_table[region] != undefined) { region = ds_region_table[region] }

    return {
      instance_type: cost['instance_type'],
      usage_unit: cost['usage_unit'],
      usage_amount: cost['usage_amount'],
      cost: cost['cost'],
      month: cost['month'],
      region: region
    }
  })

  base_costs = old_base_mapped.concat(ds_aggregated_costs_new_base).concat(ds_aggregated_costs_mca_encbi_base)
  ri_costs = old_ri_mapped.concat(ds_aggregated_costs_new_ri).concat(ds_aggregated_costs_mca_encbi_ri)
  all_costs = base_costs.concat(ri_costs)

  // Get list of Instance Types, Regions, Months
  instance_types = _.uniq(_.pluck(all_costs, 'instance_type'))
  regions = _.uniq(_.pluck(all_costs, 'region'))
  months = _.uniq(_.pluck(all_costs, 'month'))

  // Calculate total cost for each month
  _.each(months, function(month) {
    month_costs = _.filter(all_costs, function(cost) { return cost['month'] == month })
    total_month_cost = _.reduce(_.pluck(month_costs, 'cost'), function(memo, num) { return memo + num }, 0)

    result.push({
      month: month,
      cost: total_month_cost,
      dimension: "Total Actual Spend On Discountable Compute"
    })
  })

  // Calculate base cost of instance per hour across all months
  // for each instance type/region/operating system combination
  base_aggregated_costs = {}

  _.each(base_costs, function(cost) {
    index = [cost['instance_type'], cost['region']].join('_').toLowerCase().trim()

    if (base_aggregated_costs[index] == undefined) { base_aggregated_costs[index] = [] }

    base_aggregated_costs[index].push(cost)
  })

  unique_cost_instance_hours = {}

  _.each(instance_types, function(type) {
    _.each(regions, function(region) {
      base_cost_instance_hour_total = 0
      count = 0

      index = [type, region].join('_').toLowerCase().trim()

      if (base_aggregated_costs[index] != undefined) {
        _.each(base_aggregated_costs[index], function(cost) {
          base_cost_instance_hour_total += cost['cost'] / cost['usage_amount']
          count += 1
        })
      }

      avg_base_cost_instance_hour = 0
      if (count > 0) { avg_base_cost_instance_hour = base_cost_instance_hour_total / count }

      unique_cost_instance_hours[index] = avg_base_cost_instance_hour
    })
  })

  // Apply cost_instance_hour to calculate savings realized
  savings_realized_object = {}

  _.each(ri_costs, function(cost) {
    index = [cost['instance_type'], cost['region']].join('_').toLowerCase().trim()
    avg_base_cost_instance_hour = 0
    if (unique_cost_instance_hours[index]) { avg_base_cost_instance_hour = unique_cost_instance_hours[index] }

    if (avg_base_cost_instance_hour != undefined) {
      savings_realized_per_instance_hour = avg_base_cost_instance_hour - (cost['cost'] / cost['usage_amount'])
      savings_realized = savings_realized_per_instance_hour * cost['usage_amount']

      if (savings_realized_object[cost['month']] == undefined) { savings_realized_object[cost['month']] = 0 }
      savings_realized_object[cost['month']] += savings_realized
    }
  })

  _.each(months, function(month) {
    savings = 0
    if (savings_realized_object[month] != undefined) {
      savings = savings_realized_object[month]
    }

    result.push({
      month: month,
      cost: savings,
      dimension: "Savings Realized On Compute Reservations"
    })
  })

  // Sort by month
  result = _.sortBy(result, "month")
EOS
end

datasource "ds_currency_reference" do
  request do
    host "raw.githubusercontent.com"
    path "/flexera-public/policy_templates/master/data/currency/currency_reference.json"
    header "User-Agent", "RS Policies"
  end
end

datasource "ds_currency_code" do
  request do
    auth $auth_flexera
    host rs_optima_host
    path join(["/bill-analysis/orgs/", rs_org_id, "/settings/currency_code"])
    header "Api-Version", "0.1"
    header "User-Agent", "RS Policies"
    ignore_status [403]
  end
  result do
    encoding "json"
    field "id", jmes_path(response, "id")
    field "value", jmes_path(response, "value")
  end
end

datasource "ds_chart_data" do
  run_script $js_chart_data, $ds_savings_realized, $ds_applied_policy, $ds_currency_reference, $ds_currency_code, $param_chart_type, $param_chart_currency
end

script "js_chart_data", type: "javascript" do
  parameters "ds_savings_realized", "ds_applied_policy", "ds_currency_reference", "ds_currency_code", "param_chart_type", "param_chart_currency"
  result "result"
  code <<-'EOS'
  // Get currency code or symbol
  currency_data = ds_currency_reference[ds_currency_code.value]
  currency = currency_data.code
  switch (param_chart_currency) {
    case "Code (e.g. USD)":
      currency = currency_data.code
      break;
    case "Symbol (e.g. $)":
      currency = currency_data.symbol_native
      break;
  }

  // Create report data
  result = []
  savings_by_month = _.groupBy(ds_savings_realized, 'month')

  _.each(_.keys(savings_by_month), function(month) {
    total_spend_entry = _.find(savings_by_month[month], function(item) {
      return item['dimension'] == "Total Actual Spend On Discountable Compute"
    })

    savings_realized_ri_entry  = _.find(savings_by_month[month], function(item) {
      return item['dimension'] == "Savings Realized On Compute Reservations"
    })

    total_spend_cost = 0
    savings_realized_ri = 0
    percentage_ri = 0

    if (total_spend_entry != undefined) {
      total_spend_cost = total_spend_entry['cost']
    }

    if (savings_realized_ri_entry != undefined) {
      savings_realized_ri = savings_realized_ri_entry['cost']
      percentage_ri = (savings_realized_ri / (total_spend_cost + savings_realized_ri)) * 100
    }

    result.push({
      "month": month.substring(0, 7),
      "total_spend": parseFloat(total_spend_cost.toFixed(2)),
      "savings_realized_ri": parseFloat(savings_realized_ri.toFixed(2)),
      "percentage_ri": parseFloat(percentage_ri.toFixed(2))
    })
  })

  // Determine chart type
  chart_table = {
    "Grouped Bar Chart": "cht=bvg",
    "Stacked Bar Chart": "cht=bvs"
  }

  chart_type = chart_table[param_chart_type]

  // Create chart axis labels
  chart_axis_labels = ("chxl=1:," + _.pluck(result, 'month')).split(',').join('|')

  // Create legend
  chart_legend = "chdl=" + _.uniq(_.pluck(ds_savings_realized, 'dimension')).join('|')

  // Calculate scale
  costs = _.pluck(ds_savings_realized, 'cost')
  max = (Math.max.apply(Math, costs) * 1.1).toFixed(2)
  min = (Math.min.apply(Math, costs) * 0.9).toFixed(2)
  chart_range = "chxr=0," + min + "," + max

  //Create chart dataset
  savings_by_dimension = _.groupBy(ds_savings_realized, 'dimension')

  chart_data_list = []

  _.each(_.keys(savings_by_dimension), function(key) {
    chart_data_list.push(_.pluck(savings_by_dimension[key], 'cost').join(','))
  })

  chart_data = "chd=t:" + chart_data_list.join('|')

  // Whole Chart object
  if (result.length > 0) {
    result[0]["policy_name"] = ds_applied_policy['name']

    result[0]["chart_dimensions"] = {
      chart_type: encodeURI(chart_type),
      chart_size: encodeURI("chs=999x450"),
      chart_data: encodeURI(chart_data),
      chart_title: encodeURI("chtt=Savings Realized On Compute Reservations For Organization"),
      chart_image: encodeURI("chof=.png"),
      chart_y_axis: encodeURI("chxt=y,x"),
      chart_axis_label: encodeURI(chart_axis_labels),
      chart_axis_format: encodeURI("chxs=0N" + currency + " *0sz*|1,min40"),
      chart_line_style: encodeURI("chls=3|3|3|3|3|3|3|3|3|3|3"),
      chart_line_color: encodeURI("chco=1f5ab8,55b81f,198038,b28600,1192e8,009d9a,005d5d,007d79"),
      chart_data_scale: encodeURI("chds=a"),
      chart_legend: encodeURI(chart_legend),
      chart_legend_size: encodeURI("chdls=000000,10"),
      chart_legend_position: encodeURI("chdlp=b")
    }
  }
EOS
end

###############################################################################
# Policy
###############################################################################

policy "pol_purchase_option_by_inst_type_and_region" do
  validate_each $ds_chart_data do
    summary_template "{{ with index data 0 }}{{ .policy_name }}{{ end }}"
    detail_template <<-'EOS'
    # Savings Realized On Compute Reservations Report
    ![Savings Realized On Compute Reservations Chart](https://api.image-charts-auth.flexeraeng.com/ic-function?rs_org_id={{ rs_org_id }}&rs_project_id={{ rs_project_id }}&{{ with index data 0 }}{{ .chart_dimensions.chart_data }}{{ end }}&{{ with index data 0 }}{{ .chart_dimensions.chart_size }}{{ end }}&{{ with index data 0 }}{{ .chart_dimensions.chart_type }}{{ end }}&{{ with index data 0 }}{{ .chart_dimensions.chart_image }}{{ end }}&{{ with index data 0 }}{{ .chart_dimensions.chart_title }}{{ end }}&{{ with index data 0 }}{{ .chart_dimensions.chart_y_axis }}{{ end }}&{{ with index data 0 }}{{ .chart_dimensions.chart_axis_label }}{{ end }}&{{ with index data 0 }}{{ .chart_dimensions.chart_line_style }}{{ end }}&{{ with index data 0 }}{{ .chart_dimensions.chart_line_color }}{{ end }}&{{ with index data 0 }}{{ .chart_dimensions.chart_data_scale }}{{ end }}&{{ with index data 0 }}{{ .chart_dimensions.chart_legend_size }}{{ end }}&{{ with index data 0 }}{{ .chart_dimensions.chart_legend }}{{ end }}&{{ with index data 0 }}{{ .chart_dimensions.chart_axis_format }}{{ end }}&{{ with index data 0 }}{{ .chart_dimensions.chart_legend_position }}{{ end }})
    EOS
    check eq(0, 1)
    escalate $esc_email
    export do
      resource_level false
      field "month" do
        label "Month"
      end
      field "total_spend" do
        label "Total Actual Spend On Discountable Compute"
      end
      field "savings_realized_ri" do
        label "Savings Realized On Compute Reservations"
      end
      field "percentage_ri" do
        label "Savings Rate (%) from Reservation Usage"
      end
    end
  end
end

###############################################################################
# Escalations
###############################################################################

escalation "esc_email" do
  automatic true
  label "Send Email"
  description "Send incident email"
  email $param_email
end

name "Azure Savings Realized from Reservations"
rs_pt_ver 20180301
type "policy"
short_description "Calculate savings realized by RI purchases. See the [README](https://github.com/flexera/policy_templates/tree/master/cost/aws/[]) and [docs.flexera.com/flexera/EN/Automation](https://docs.flexera.com/flexera/EN/Automation/AutomationGS.htm) to learn more. "
long_description ""
default_frequency "monthly"
severity "low"
category "Cost"
info(
  version: "2.0",
  provider: "Flexera",
  service: "All",
  policy_set: "N/A"
)

###############################################################################
# Parameters
###############################################################################

parameter "param_email" do
  type "list"
  label "Email addresses"
end

parameter "param_period_start" do
  type "string"
  label "Period Start Date"
  description "Billing Period from Fastly Billing YYYY-MM"
  allowed_pattern /20[2-9][0-9]-[0-1][0-9]/
end

parameter "param_period_end" do
  type "string"
  label "Period End Date"
  description "Billing Period from Fastly Billing YYYY-MM"
  allowed_pattern /20[2-9][0-9]-[0-1][0-9]/
end

###############################################################################
# Authentication
###############################################################################

#authenticate with RightScale/Optima
credentials "auth_rs" do
  schemes "oauth2"
  label "Flexera_Automation"
  description "Select FlexeraOne OAuth2 credentials"
  tags "provider=flexera"
end

###############################################################################
# Datasources and Scripts
###############################################################################

#GET BILLING CENTERS FOR ORG
datasource "ds_billing_centers" do
  request do
    auth $auth_rs
    host rs_optima_host
    path join(["/analytics/orgs/",rs_org_id,"/billing_centers"])
    header "Api-Version", "1.0"
    header "User-Agent", "RS Policies"
    query "view", "allocation_table"
  end
  result do
    encoding "json"
    collect jmes_path(response,"[*]") do
      field "href", jmes_path(col_item,"href")
      field "id", jmes_path(col_item,"id")
      field "name", jmes_path(col_item,"name")
      field "parent_id", jmes_path(col_item,"parent_id")
      field "ancestor_ids", jmes_path(col_item,"ancestor_ids")
      field "allocation_table", jmes_path(col_item,"allocation_table")
    end
  end  
end

#GET TOP-LEVEL BILLING CENTERS
datasource "ds_top_level_bcs" do
  run_script $js_get_top_level_bc, $ds_billing_centers
end

script "js_get_top_level_bc", type: "javascript" do
  parameters "billing_centers"
  result "filtered_billing_centers"
  code <<-EOS
  var filtered_billing_centers = 
  _.filter(billing_centers, function(bc){ return bc.parent_id == null })
  EOS
end

#GET RESERVED INSTANCE COSTS
datasource "ds_ri_aggregated_costs" do
  request do
    run_script $js_get_ri_aggregated_costs, $ds_top_level_bcs, $param_period_start, $param_period_end, rs_org_id, rs_optima_host
  end
  result do
    encoding "json"
    collect jmes_path(response, "rows") do
      field "instance_type", jmes_path(col_item, "dimensions.instance_type")
      field "region", jmes_path(col_item, "dimensions.region")
      field "operating_system", jmes_path(col_item, "dimensions.x_operating_system")
      field "usage_unit", jmes_path(col_item, "dimensions.usage_unit")
      field "usage_amount", jmes_path(col_item, "metrics.usage_amount")
      field "cost", jmes_path(col_item, "metrics.cost_amortized_unblended_adj")
      field "month", jmes_path(col_item, "timestamp")
    end
  end
end

script "js_get_ri_aggregated_costs", type: "javascript" do
  parameters "billing_centers", "start_date", "end_date", "org_id", "optima_host"
  result "request"
  code <<-EOS
  var billing_center_ids = []
  _.each(billing_centers, function(bc){
    billing_center_ids.push(bc.id)
  })

  var payload = {
    "billing_center_ids": billing_center_ids,
    "filter": {
      "type": "and",
      "expressions": [
        { "dimension": "vendor", "type": "equal", "value": "Azure" },
        { "dimension": "service", "type": "equal", "value": "Microsoft.Compute" },
        { "dimension": "resource_type", "type": "equal", "value": "Virtual Machines-Reservation-Base VM" },
        {
          "type": "not",
          "expression": { "dimension": "instance_type", "type": "equal", "value": "None" }
        }
      ]
    },
    "dimensions": [
      "instance_type",
      "region",
      "x_operating_system",
      "usage_unit"
    ],
    "granularity": "month",
    "metrics": [
      "cost_amortized_unblended_adj",
      "usage_amount"
    ]
    "end_at": end_date,
    "start_at": start_date
  }

  var request = {
    auth: "auth_rs",
    host: optima_host,
    path: "/bill-analysis/orgs/" + org_id + "/costs/aggregated",
    verb: "POST",
    body_fields: payload,
    headers: {
      "User-Agent": "RS Policies"
    }
  }
  EOS
end 

#GET BASE COSTS
datasource "ds_base_aggregated_costs" do
  request do
    run_script $js_get_base_aggregated_costs, $ds_top_level_bcs, $param_period_start, $param_period_end, rs_org_id, rs_optima_host
  end
  result do
    encoding "json"
    collect jmes_path(response, "rows") do
      field "instance_type", jmes_path(col_item, "dimensions.instance_type")
      field "region", jmes_path(col_item, "dimensions.region")
      field "operating_system", jmes_path(col_item, "dimensions.x_operating_system")
      field "usage_unit", jmes_path(col_item, "dimensions.usage_unit")
      field "usage_amount", jmes_path(col_item, "metrics.usage_amount")
      field "cost", jmes_path(col_item, "metrics.cost_amortized_unblended_adj")
      field "month", jmes_path(col_item, "timestamp")
    end
  end
end

script "js_get_base_aggregated_costs", type: "javascript" do
  parameters "billing_centers", "start_date", "end_date", "org_id", "optima_host"
  result "request"
  code <<-EOS
  var billing_center_ids = []
  _.each(billing_centers, function(bc){
    billing_center_ids.push(bc.id)
  })

  var payload = {
    "billing_center_ids": billing_center_ids,
    "filter": {
      "type": "and",
      "expressions": [
        { "dimension": "vendor", "type": "equal", "value": "Azure" },
        { "dimension": "service", "type": "equal", "value": "Microsoft.Compute" },
        {
          "type": "not",
          "expression": { "dimension": "instance_type", "type": "equal", "value": "None" }
        },
        {
          "type": "not",
          "expression": { "dimension": "resource_type", "type": "equal", "value": "Virtual Machines-Reservation-Base VM" }
        } 
      ]
    },
    "dimensions": [
      "instance_type",
      "region",
      "x_operating_system",
      "usage_unit"
    ],
    "granularity": "month",
    "metrics": [
      "cost_amortized_unblended_adj",
      "usage_amount"
    ]
    "end_at": end_date,
    "start_at": start_date
  }

  var request = {
    auth: "auth_rs",
    host: optima_host,
    path: "/bill-analysis/orgs/" + org_id + "/costs/aggregated",
    verb: "POST",
    body_fields: payload,
    headers: {
      "User-Agent": "RS Policies"
    }
  }
  EOS
end

#GET CSV WITH NFU
datasource "ds_isf_ratio_csv" do
  request do
    host "isfratio.blob.core.windows.net"
    path "/isfratio/ISFRatio.csv"
  end
  result do
    encoding "text"
  end
end

#CALCULATE SAVINGS REALIZED (BASE COST - RI COST) FOR EACH INSTANCE TYPE, FOR EACH REGION
datasource "ds_savings_realized" do
  run_script $js_get_savings_realized, $ds_ri_aggregated_costs, $ds_base_aggregated_costs, $ds_isf_ratio_csv
end

script "js_get_savings_realized", type: "javascript" do
  parameters "ri_costs", "base_costs", "isf_ratio_csv"
  result "savings_realized_data"
  code <<-'EOS'
  var temp_result = []
  var savings_realized_data = []

  //convert normalization factor csv to json
  var isf_ratio_array = isf_ratio_csv.toString().split("\r\n")
  var isf_ratio_json = []
  _.each(isf_ratio_array, function(ratio){
    isf_ratio_json.push({
      "instance_family": ratio.split(",")[0],
      "arm_sku_name": ratio.split(",")[1],
      "ratio": ratio.split(",")[2]
    })
  })

  //calculate base cost of instance per hour across all months for each instance type/region/operating system combination
  inst_type = _.pluck( _.uniq(ri_costs, function(ri){ return ri.instance_type }), "instance_type" )
  region = _.pluck( _.uniq(ri_costs, function(ri){ return ri.region }), "region" )
  op_system = _.pluck( _.uniq(ri_costs, function(ri){ return ri.operating_system }), "operating_system" )
  month = _.union(
    _.pluck( _.uniq(ri_costs, function(ri){ return ri.month }), "month" ),
    _.pluck( _.uniq(base_costs, function(base){ return base.month }), "month" )
  )

  unique_cost_inst_hrs = []
  _.each(inst_type, function(inst){
    _.each(region, function(rg){
      _.each(op_system, function(os){
        base_cost_inst_hr_tot = 0, count = 0
        _.each(base_costs, function(base){
          if(base.instance_type == inst && base.region == rg && base.operating_system == os){
            base_cost_inst_hr_tot += (base.cost / base.usage_amount)
            count ++
          }
        })
        avg_base_cost_inst_hr = 0 
        if(count > 0){ avg_base_cost_inst_hr = base_cost_inst_hr_tot / count }
        console.log(avg_base_cost_inst_hr)

        unique_cost_inst_hrs.push({
          "instance_type": inst,
          "region": rg,
          "operating_system": os,
          "avg_base_cost_inst_hr": avg_base_cost_inst_hr
        })
      })
    })
  })
  console.log("Cost instance hours", unique_cost_inst_hrs)

  //apply cost_inst_hr to calculate savings realized
  _.each(ri_costs, function(ri){
    _.each(unique_cost_inst_hrs, function(inst_hr){
      if (ri.instance_type == inst_hr.instance_type && ri.region == inst_hr.region && ri.operating_system == inst_hr.operating_system){
        savings_realized_per_inst_hr = inst_hr.avg_base_cost_inst_hr - (ri.cost / ri.usage_amount)
        savings_realized = 0
        if(ri.cost > 0 ){
          savings_realized = savings_realized_per_inst_hr * ri.usage_amount
        }
        temp_result.push(
          { 
            "month": ri.month, 
            "region": ri.region, 
            "instance_type": ri.instance_type,
            "operating_system": ri.operating_system,
            "savings_realized": savings_realized
          }
        )
      }
    })
  })
  console.log(temp_result)

  //reduce list - aggregate costs for same month
  _.each(month, function(mo){
    savings_realized = 0
    _.each(temp_result, function(res){
      if(mo == res.month){
        savings_realized += res.savings_realized
      }
    })
    savings_realized_data.push({ "month": mo, "savings_realized": savings_realized })
  })
  EOS
end

#CHART CREATION
datasource "ds_chart_data" do
  run_script $js_create_chart_data, $ds_savings_realized
end

script "js_create_chart_data", type: "javascript" do
  parameters "savings_realized_data"
  result "report"
  code <<-EOS
  var report = savings_realized_data

  //create chart axis labels
  chart_axis_labels = 
  ("chxl=1:," + 
    _.uniq(savings_realized_data, function(sr) { return sr.month })
    .map(function(sr){ return sr.month.substring(0,7) })
  ).split(",").join("|")

  //calculate scale
  //chart_range = ("chxr=0," +
  max = (Math.max.apply(Math, savings_realized_data.map(function(sr){ return sr.savings_realized }))*1.1).toFixed(2)
  min = (Math.min.apply(Math, savings_realized_data.map(function(sr){ return sr.savings_realized }))*0.9).toFixed(2)
  chart_range = "chxr=0," + min + "," + max

  //create legend
  chart_legend = "chdl=Savings%20Realized%20For%20Organization"

  //create chart dataset
  chart_data = "chd=t:" + savings_realized_data.map(function(sr) { return sr.savings_realized; }).toString()

  chart = {
    chart_type: "cht=lc",
    chart_size: "chs=900x500",
    chart_data: chart_data,
    chart_title: "chtt=Savings%20Realized%20For%20Organization",
    chart_image: "chof=.png",  
    chart_label_position: "chdlp=b",
    chart_y_axis: "chxt=y,x",
    chart_y_axis_label: chart_axis_labels,
    chart_line_style: "chls=3|3|3|3|3|3|3|3|3|3|3",
    chart_line_color: "chco=6929c4,9f1853,198038,b28600,1192e8,009d9a,005d5d,007d79",
    chart_data_scale: "chds=a",
    chart_legend: chart_legend,
    chart_legend_size: "chdls=000000,5"
  }

  report[0]["chart_dimensions"] = chart
  EOS
end

###############################################################################
# Escalations
###############################################################################

escalation "esc_savings_realized_report" do
  automatic true
  label "Send Email"
  description "Send incident email"
  email $param_email
end

###############################################################################
# Policy
###############################################################################

policy "policy_purchase_option_by_inst_type_and_region" do
  validate_each $ds_chart_data do
    summary_template "Savings Realized"
    detail_template <<-EOS
    # Savings Realized Per Instance Type Report
    ![Savings Realized Per Instance Type Chart](https://image-charts.com/chart?{{ with index data 0 }}{{ .chart_dimensions.chart_data }}{{ end }}&{{ with index data 0 }}{{ .chart_dimensions.chart_size }}{{ end }}&{{ with index data 0 }}{{ .chart_dimensions.chart_type }}{{ end }}&{{ with index data 0 }}{{ .chart_dimensions.chart_image }}{{ end }}&{{ with index data 0 }}{{ .chart_dimensions.chart_title }}{{ end }}&{{ with index data 0 }}{{ .chart_dimensions.chart_label_position }}{{ end }}&{{ with index data 0 }}{{ .chart_dimensions.chart_y_axis }}{{ end }}&{{ with index data 0 }}{{ .chart_dimensions.chart_y_axis_label }}{{ end }}&{{ with index data 0 }}{{ .chart_dimensions.chart_line_style }}{{ end }}&{{ with index data 0 }}{{ .chart_dimensions.chart_line_color }}{{ end }}&{{ with index data 0 }}{{ .chart_dimensions.chart_data_scale }}{{ end }}&{{ with index data 0 }}{{ .chart_dimensions.chart_legend_size }}{{ end }}&{{ with index data 0 }}{{ .chart_dimensions.chart_legend }}{{ end }}
    )
    EOS
    escalate $esc_savings_realized_report
    check eq(0,1)
    export do
      # no actions so resource_level can be false
      resource_level false
      field "month" do
        label "Month"
      end
      #field "instance_type" do
      #  label "Instance Type"
      #end
      field "savings_realized" do
        label "Savings Realized per Month"
      end
      #field "region" do
      #  label "Region"
      #end
    end
  end
end

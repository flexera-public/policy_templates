name "Azure Old Snapshots"
rs_pt_ver 20180301
type "policy"
short_description "Checks for snapshots older than specified number of days and, optionally, deletes them. See the [README](https://github.com/flexera/policy_templates/tree/master/cost/azure/old_snapshots) and [docs.rightscale.com/policies](https://docs.rightscale.com/policies/) to learn more."
severity "low"
category "Cost"
info(
  version: "2.1",
  provider: "Azure",
  service: "Storage",
  policy_set: "Old Snapshots"
  )

##################
# User inputs    #
##################

parameter "param_email" do
  type "list"
  label "Email Address"
  description "Email addresses of the recipients you wish to notify"
end

parameter "param_snapshot_age" do
  type "number"
  label "Snapshot Age"
  description "The number of days since the snapshot was created"
end

parameter "param_exclusion_tag_key" do
  category "User Inputs"
  label "Exclusion Tag Key"
  description "Cloud native tag key to ignore instances. Example: exclude_utilization"
  type "list"
end

###############################################################################
# Authentication
###############################################################################

#authenticate with Azure
credentials "azure_auth" do
  schemes "oauth2"
  label "Azure"
  description "Select the Azure Resource Manager Credential from the list."
  tags "provider=azure_rm"
end

###############################################################################
# Pagination
###############################################################################

#pagination support
pagination "azure_pagination" do
  get_page_marker do
    body_path "nextLink"
  end
  set_page_marker do
    uri true
  end
end

###############################################################################
# Datasources
###############################################################################

#get all subscription details.
datasource "ds_subscriptions" do
  request do
    auth $azure_auth
    pagination $azure_pagination
    host "management.azure.com"
    path "/subscriptions/"
    query "api-version","2019-06-01"
    header "User-Agent", "RS Policies"
  end
  result do
    encoding "json"
    collect jmes_path(response, "value[*]") do
      field "subscriptionId", jmes_path(col_item,"subscriptionId")
      field "displayName", jmes_path(col_item,"displayName")
      field "state", jmes_path(col_item,"state")
    end
  end
end

#get all snapshots
datasource "ds_azure_get_snapshots" do
  iterate $ds_subscriptions
  request do
    auth $azure_auth
    pagination $azure_pagination
    host "management.azure.com"
    path join(["/subscriptions/", val(iter_item,"subscriptionId"), "/providers/Microsoft.Compute/snapshots"])
    query "api-version","2019-07-01"
  end
  result do
    encoding "json"
    collect jmes_path(response, "value[*]") do
      field "id", jmes_path(col_item,"id")
      field "name", jmes_path(col_item,"name")
      field "location", jmes_path(col_item, "location")
      field "tags", jmes_path(col_item,"tags")
      field "timeCreated", jmes_path(col_item,"properties.timeCreated")
      field "subscriptionId",val(iter_item,"subscriptionId")
      field "subscriptionName",val(iter_item,"displayName")
    end
  end
end

datasource "ds_filter_snapshots" do
  run_script $js_filter_snapshots, $param_exclusion_tag_key, $param_snapshot_age, $ds_azure_get_snapshots
end

###############################################################################
# Scripts
###############################################################################

script "js_filter_snapshots", type: "javascript" do
  parameters "param_exclusion_tag_key", "param_snapshot_age", "ds_azure_get_snapshots"
  result "res"
  code <<-EOS
    var res = [];
    _.each(ds_azure_get_snapshots, function(snapshot){
      var tags='';
      var expectedDate=new Date();
      var is_tag_matched=false;
      var date1 = new Date(snapshot['timeCreated']);
      var date2 = new Date();
      var Difference_In_Time = date2.getTime() - date1.getTime();
      var diffDays = Difference_In_Time / (1000 * 3600 * 24);
      var age=Math.round(diffDays);
      if(age<diffDays){
        age++;
      }
      var createdTime=new Date(snapshot['timeCreated']);
      expectedDate.setDate(expectedDate.getDate()- parseInt(param_snapshot_age));
      for(var k=0;k<param_exclusion_tag_key.length;k++){
        if(_.has(snapshot.tags, param_exclusion_tag_key[k])){
          is_tag_matched=true
        }
      }
      if (!is_tag_matched) {
        if(createdTime.getTime()<expectedDate.getTime()){
          res.push({
            snapshot_id:snapshot['id'],
            name:snapshot['name'],
            location:snapshot['location'],
            timeCreated:snapshot['timeCreated'],
            subscriptionId:snapshot['subscriptionId'],
            subscriptionName:snapshot['subscriptionName'],
            age:age
          })
        }
      }
   })
   res = _.sortBy(res, 'subscriptionName');
   res = _.sortBy(res, 'location');
   res = _.sortBy(res, 'age');
  EOS
end

policy "pol_azure_delete_old_snapshots" do
  validate $ds_filter_snapshots do
    summary_template "{{ rs_project_name }} (Account ID: {{ rs_project_id }}): {{ len data }} Old Snapshots Found"
    detail_template <<-EOS
The following {{ len data }} snapshots, for Account: {{ rs_project_name }} (ID: {{ rs_project_id }}), have exceeded the specified age of: {{ parameters.param_snapshot_age }} days old\n
| Subscription Name | Location | Age | Name | Snapshot ID |
| ----------------- | -------- | --- | ---- | ----------- |
{{ range data -}}
| {{ .subscriptionName }} | {{ .location }} | {{ .age }} | {{ .name }} | {{ .snapshot_id }} |
{{ end -}}
EOS
   # Send email report
   escalate $send_email_report
   # Delete snapshot if user approves
   escalate $process_snapshots
   check eq(size(data), 0)
  end
end

escalation "send_email_report" do
  email $param_email
end

escalation "process_snapshots" do
  request_approval  do
    label "Escalation approval"
    description "Approve delete snapshot action"
    parameter "approval_reason" do
      type "string"
      label "Reason for approval"
      description "Explain why you are approving the action"
    end
  end
  run "delete_old_snapshots", data
end

###############################################################################
# Cloud Workflow
###############################################################################

define delete_old_snapshots($data) return $all_responses do
  $$debug = false
  $status_code=''
  $all_responses = []
  foreach $item in $data do
    sub on_error: skip do
        call azure_delete_old_snapshots($item['snapshot_id'])
    end
  end
end

define azure_delete_old_snapshots($snapshot_id) do
  $response={}
  $syslog_subject = "Azure delete old snapshots API response: "
  $response = http_request(
          auth: $$azure_auth,
          verb: "delete",
          host: "management.azure.com",
          https: true,
          href: $snapshot_id,
          query_strings: {
            "api-version": "2019-07-01"
          }
        )
    if $delete_status != 202
       call sys_log($syslog_subject,to_s($response))
    end
end

define sys_log($subject, $detail) do
  rs_cm.audit_entries.create(
    notify: "None",
    audit_entry: {
      auditee_href: @@account,
      summary: join(["Old Snapshot Policy - ", $subject]),
      detail: $detail
    }
  )
end
name "Azure Old Snapshots"
rs_pt_ver 20180301
type "policy"
short_description "Checks for snapshots older than specified number of days and, optionally, deletes them. See the [README](https://github.com/flexera-public/policy_templates/tree/master/cost/azure/old_snapshots) and [docs.flexera.com/flexera/EN/Automation](https://docs.flexera.com/flexera/EN/Automation/AutomationGS.htm) to learn more."
severity "low"
category "Cost"
default_frequency "weekly"
info(
  version: "6.0",
  provider: "Azure",
  service: "Storage",
  policy_set: "Old Snapshots",
  recommendation_type: "Usage Reduction"
)

##############################################################################
# Parameters
##############################################################################

parameter "param_email" do
  type "list"
  category "Policy Settings"
  label "Email Addresses"
  description "A list of email addresses to notify."
  default []
end

parameter "param_azure_endpoint" do
  type "string"
  category "Policy Settings"
  label "Azure Endpoint"
  description "Select the API endpoint to use for Azure. Use default value of management.azure.com unless using Azure China."
  allowed_values "management.azure.com", "management.chinacloudapi.cn"
  default "management.azure.com"
end

parameter "param_min_savings" do
  type "number"
  category "Policy Settings"
  label "Minimum Savings Threshold"
  description "Minimum potential savings required to generate a recommendation."
  min_value 0
  default 0
end

parameter "param_snapshot_age" do
  type "number"
  category "Policy Settings"
  label "Snapshot Age Threshold"
  description "The number of days since the snapshot was created to consider a snapshot old."
  min_value 1
  default 30
end

parameter "param_subscriptions_allow_or_deny" do
  type "string"
  category "Filters"
  label "Allow/Deny Subscriptions"
  description "Allow or Deny entered Subscriptions."
  allowed_values "Allow", "Deny"
  default "Allow"
end

parameter "param_subscriptions_list" do
  type "list"
  category "Filters"
  label "Allow/Deny Subscriptions List"
  description "A list of allowed or denied Subscription IDs/names. Leave blank to check all Subscriptions."
  default []
end

parameter "param_regions_allow_or_deny" do
  type "string"
  category "Filters"
  label "Allow/Deny Regions"
  description "Allow or Deny entered regions."
  allowed_values "Allow", "Deny"
  default "Allow"
end

parameter "param_regions_list" do
  type "list"
  category "Filters"
  label "Allow/Deny Regions List"
  description "A list of allowed or denied regions. Leave blank to check all regions."
  default []
end

parameter "param_exclusion_tags" do
  type "list"
  category "Filters"
  label "Exclusion Tags (Key:Value)"
  description "Cloud native tags to ignore resources that you don't want to produce recommendations for. Use Key:Value format for specific tag key/value pairs, and Key:* format to match any resource with a particular key, regardless of value. Examples: env:production, DO_NOT_DELETE:*"
  allowed_pattern /(^$)|[\w]*\:.*/
  default []
end

parameter "param_automatic_action" do
  type "list"
  category "Actions"
  label "Automatic Actions"
  description "When this value is set, this policy will automatically take the selected action."
  allowed_values ["Delete Snapshots"]
end

###############################################################################
# Authentication
###############################################################################

credentials "auth_azure" do
  schemes "oauth2"
  label "Azure"
  description "Select the Azure Resource Manager Credential from the list."
  tags "provider=azure_rm"
end

credentials "auth_flexera" do
  schemes "oauth2"
  label "Flexera"
  description "Select Flexera One OAuth2 credentials"
  tags "provider=flexera"
end

###############################################################################
# Pagination
###############################################################################

pagination "pagination_azure" do
  get_page_marker do
    body_path "nextLink"
  end
  set_page_marker do
    uri true
  end
end

###############################################################################
# Datasources & Scripts
###############################################################################

# Get applied policy metadata for use later
datasource "ds_applied_policy" do
  request do
    auth $auth_flexera
    host rs_governance_host
    path join(["/api/governance/projects/", rs_project_id, "/applied_policies/", policy_id])
    header "Api-Version", "1.0"
  end
end

datasource "ds_billing_centers" do
  request do
    auth $auth_flexera
    host rs_optima_host
    path join(["/analytics/orgs/", rs_org_id, "/billing_centers"])
    header "Api-Version", "1.0"
    header "User-Agent", "RS Policies"
    query "view", "allocation_table"
    ignore_status [403]
  end
  result do
    encoding "json"
    collect jmes_path(response, "[*]") do
      field "href", jmes_path(col_item, "href")
      field "id", jmes_path(col_item, "id")
      field "name", jmes_path(col_item, "name")
      field "parent_id", jmes_path(col_item, "parent_id")
    end
  end
end

# Gather top level billing center IDs for when we pull cost data
datasource "ds_top_level_bcs" do
  run_script $js_top_level_bcs, $ds_billing_centers
end

script "js_top_level_bcs", type: "javascript" do
  parameters "ds_billing_centers"
  result "result"
  code <<-EOS
  filtered_bcs = _.filter(ds_billing_centers, function(bc) {
    return bc['parent_id'] == null || bc['parent_id'] == undefined
  })

  result = _.compact(_.pluck(filtered_bcs, 'id'))
EOS
end

datasource "ds_currency_reference" do
  request do
    host "raw.githubusercontent.com"
    path "/rightscale/policy_templates/master/cost/scheduled_reports/currency_reference.json"
    header "User-Agent", "RS Policies"
  end
end

datasource "ds_currency_code" do
  request do
    auth $auth_flexera
    host rs_optima_host
    path join(["/bill-analysis/orgs/", rs_org_id, "/settings/currency_code"])
    header "Api-Version", "0.1"
    header "User-Agent", "RS Policies"
    ignore_status [403]
  end
  result do
    encoding "json"
    field "id", jmes_path(response, "id")
    field "value", jmes_path(response, "value")
  end
end

datasource "ds_currency" do
  run_script $js_currency, $ds_currency_reference, $ds_currency_code
end

script "js_currency", type:"javascript" do
  parameters "ds_currency_reference", "ds_currency_code"
  result "result"
  code <<-EOS
  symbol = "$"
  separator = ","

  if (ds_currency_code['value'] != undefined) {
    if (ds_currency_reference[ds_currency_code['value']] != undefined) {
      symbol = ds_currency_reference[ds_currency_code['value']]['symbol']

      if (ds_currency_reference[ds_currency_code['value']]['t_separator'] != undefined) {
        separator = ds_currency_reference[ds_currency_code['value']]['t_separator']
      } else {
        separator = ""
      }
    }
  }

  result = {
    symbol: symbol,
    separator: separator
  }
EOS
end

datasource "ds_azure_subscriptions" do
  request do
    auth $auth_azure
    pagination $pagination_azure
    host $param_azure_endpoint
    path "/subscriptions/"
    query "api-version","2020-01-01"
    header "User-Agent", "RS Policies"
    # Header X-Meta-Flexera has no affect on datasource query, but is required for Meta Policies
    # Forces `ds_is_deleted` datasource to run first during policy execution
    header "Meta-Flexera", val($ds_is_deleted, "path")
  end
  result do
    encoding "json"
    collect jmes_path(response, "value[*]") do
      field "id", jmes_path(col_item, "subscriptionId")
      field "name", jmes_path(col_item, "displayName")
      field "state", jmes_path(col_item, "state")
    end
  end
end

datasource "ds_azure_subscriptions_filtered" do
  run_script $js_azure_subscriptions_filtered, $ds_azure_subscriptions, $param_subscriptions_allow_or_deny, $param_subscriptions_list
end

script "js_azure_subscriptions_filtered", type: "javascript" do
  parameters "ds_azure_subscriptions", "param_subscriptions_allow_or_deny", "param_subscriptions_list"
  result "result"
  code <<-EOS
  if (param_subscriptions_list.length > 0) {
    result = _.filter(ds_azure_subscriptions, function(subscription) {
      include_subscription = _.contains(param_subscriptions_list, subscription['id']) || _.contains(param_subscriptions_list, subscription['name'])

      if (param_subscriptions_allow_or_deny == "Deny") {
        include_subscription = !include_subscription
      }

      return include_subscription
    })
  } else {
    result = ds_azure_subscriptions
  }
EOS
end

datasource "ds_azure_snapshots" do
  iterate $ds_azure_subscriptions_filtered
  request do
    auth $auth_azure
    pagination $pagination_azure
    host $param_azure_endpoint
    path join(["/subscriptions/", val(iter_item, "id"), "/providers/Microsoft.Compute/snapshots"])
    query "api-version", "2019-07-01"
    # Ignore status 400, 403, and 404 which can be returned in certain (legacy) types of Azure Subscriptions
    ignore_status [400, 403, 404]
  end
  result do
    encoding "json"
    collect jmes_path(response, "value[*]") do
      field "resourceID", jmes_path(col_item, "id")
      field "resourceName", jmes_path(col_item, "name")
      field "resourceGroup", get(4, split(jmes_path(col_item, "id"), '/'))
      field "resourceType", jmes_path(col_item, "type")
      field "region", jmes_path(col_item, "location")
      field "tags", jmes_path(col_item, "tags")
      field "timeCreated", jmes_path(col_item, "properties.timeCreated")
      field "size", jmes_path(col_item, "properties.diskSizeGB")
      field "subscriptionID", val(iter_item, "id")
      field "subscriptionName", val(iter_item, "name")
    end
  end
end

datasource "ds_azure_snapshots_tag_filtered" do
  run_script $js_azure_snapshots_tag_filtered, $ds_azure_snapshots, $param_exclusion_tags
end

script "js_azure_snapshots_tag_filtered", type: "javascript" do
  parameters "ds_azure_snapshots", "param_exclusion_tags"
  result "result"
  code <<-EOS
  if (param_exclusion_tags.length > 0) {
    result = _.reject(ds_azure_snapshots, function(snapshot) {
      snapshot_tags = []

      if (typeof(snapshot['tags']) == 'object') {
        _.each(Object.keys(snapshot['tags']), function(key) {
          snapshot_tags.push([key, ":", snapshot['tags'][key]].join(''))
          snapshot_tags.push([key, ":*"].join(''))
        })
      }

      exclude_snapshot = false

      _.each(param_exclusion_tags, function(exclusion_tag) {
        if (_.contains(snapshot_tags, exclusion_tag)) {
          exclude_snapshot = true
        }
      })

      return exclude_snapshot
    })
  } else {
    result = ds_azure_snapshots
  }
EOS
end

datasource "ds_azure_snapshots_region_filtered" do
  run_script $js_azure_snapshots_region_filtered, $ds_azure_snapshots_tag_filtered, $param_regions_allow_or_deny, $param_regions_list
end

script "js_azure_snapshots_region_filtered", type: "javascript" do
  parameters "ds_azure_snapshots_tag_filtered", "param_regions_allow_or_deny", "param_regions_list"
  result "result"
  code <<-EOS
  if (param_regions_list.length > 0) {
    result = _.filter(ds_azure_snapshots_tag_filtered, function(snapshot) {
      include_snapshot = _.contains(param_regions_list, snapshot['region'])

      if (param_regions_allow_or_deny == "Deny") {
        include_snapshot = !include_snapshot
      }

      return include_snapshot
    })
  } else {
    result = ds_azure_snapshots_tag_filtered
  }
EOS
end

datasource "ds_azure_old_snapshots" do
  run_script $js_azure_old_snapshots, $ds_azure_snapshots_region_filtered, $param_snapshot_age
end

script "js_azure_old_snapshots", type: "javascript" do
  parameters "ds_azure_snapshots_region_filtered", "param_snapshot_age"
  result "result"
  code <<-EOS
  result = []

  _.each(ds_azure_snapshots_region_filtered, function(snapshot) {
    tags = []

    if (typeof(snapshot['tags']) == 'object') {
      _.each(Object.keys(snapshot['tags']), function(key) {
        tags.push([key, "=", snapshot['tags'][key]].join(''))
      })
    }

    snapshotTime = Date.parse(snapshot['timeCreated'])
    age = Math.round((new Date().getTime() - new Date(snapshotTime).getTime()) / (1000 * 3600 * 24))

    service = snapshot['resourceType'].split("/")[0]

    if (age > param_snapshot_age) {
      result.push({
        resourceID: snapshot['resourceID'],
        resourceType: snapshot['resourceType'],
        resourceName: snapshot['resourceName'],
        region: snapshot['region'],
        resourceGroup: snapshot['resourceGroup'],
        timeCreated: snapshot['timeCreated'],
        size: snapshot['size'],
        subscriptionID: snapshot['subscriptionID'],
        subscriptionName: snapshot['subscriptionName'],
        tags: tags.join(', '),
        service: service,
        age: age,
        savings: 0.0
      })
    }
  })
EOS
end

datasource "ds_azure_old_snapshots_subscriptions" do
  run_script $js_azure_old_snapshots_subscriptions, $ds_azure_old_snapshots
end

script "js_azure_old_snapshots_subscriptions", type: "javascript" do
  parameters "ds_azure_old_snapshots"
  result "result"
  code <<-EOS
  result = _.compact(_.uniq(_.pluck(ds_azure_old_snapshots, 'subscriptionID')))
EOS
end

datasource "ds_azure_snapshot_costs" do
  iterate $ds_azure_old_snapshots_subscriptions
  request do
    run_script $js_azure_snapshot_costs, iter_item, $ds_top_level_bcs, rs_org_id, rs_optima_host
  end
  result do
    encoding "json"
    collect jmes_path(response, "rows[*]") do
      field "resourceID", jmes_path(col_item, "dimensions.resource_id")
      field "cost", jmes_path(col_item, "metrics.cost_amortized_unblended_adj")
    end
  end
end

script "js_azure_snapshot_costs", type:"javascript" do
  parameters "subscription_id", "ds_top_level_bcs", "rs_org_id", "rs_optima_host"
  result "request"
  code <<-EOS
  //Get Start and End dates
  start_date = new Date()
  start_date.setDate(start_date.getDate() - 3)
  start_date = start_date.toISOString().split("T")[0]

  end_date = new Date()
  end_date.setDate(end_date.getDate() - 2)
  end_date = end_date.toISOString().split("T")[0]

  var request = {
    auth: "auth_flexera",
    host: rs_optima_host,
    verb: "POST",
    path: "/bill-analysis/orgs/" + rs_org_id + "/costs/select",
    body_fields: {
      "dimensions": ["resource_id"],
      "granularity": "day",
      "start_at": start_date,
      "end_at": end_date,
      "metrics": ["cost_amortized_unblended_adj"],
      "billing_center_ids": ds_top_level_bcs,
      "limit": 100000,
      "filter": {
        "type": "and",
        "expressions": [
          {
            "type": "or",
            "expressions": [
              {
                "dimension": "service",
                "type": "equal",
                "value": "Microsoft.Compute"
              },
              {
                "dimension": "service",
                "type": "equal",
                "value": "microsoft.compute"
              }
            ]
          },
          {
            "dimension": "vendor_account",
            "type": "equal",
            "value": account_id
          }
        ]
      }
    },
    headers: {
      "User-Agent": "RS Policies",
      "Api-Version": "1.0"
    },
    ignore_status: [400]
  }
EOS
end

datasource "ds_azure_snapshot_costs_grouped" do
  run_script $js_azure_snapshot_costs_grouped, $ds_azure_snapshot_costs
end

script "js_azure_snapshot_costs_grouped", type: "javascript" do
  parameters "ds_azure_snapshot_costs"
  result "result"
  code <<-EOS
  // Multiple a single day's cost by the average number of days in a month.
  // The 0.25 is to account for leap years for extra precision.
  cost_multiplier = 365.25 / 12

  // Group cost data by resourceId for later use
  result = {}

  _.each(ds_azure_snapshot_costs, function(item) {
    id = item['resourceID'].toLowerCase()

    if (result[id] == undefined) { result[id] = 0.0 }
    result[id] += item['cost'] * cost_multiplier
  })
EOS
end

datasource "ds_azure_snapshots_incident" do
  run_script $js_azure_snapshots_incident, $ds_azure_old_snapshots, $ds_azure_snapshots_region_filtered, $ds_azure_snapshot_costs_grouped, $ds_applied_policy, $ds_currency, $param_min_savings, $param_snapshot_age
end

script "js_azure_snapshots_incident", type:"javascript" do
  parameters "ds_azure_old_snapshots", "ds_azure_snapshots_region_filtered", "ds_azure_snapshot_costs_grouped", "ds_applied_policy", "ds_currency", "param_min_savings", "param_snapshot_age"
  result "result"
  code <<-'EOS'
  // Function for formatting currency numbers later
  function formatNumber(number, separator) {
    var numString = number.toString()
    var values = numString.split(".")
    var formatted_number = ''

    while (values[0].length > 3) {
      var chunk = values[0].substr(-3)
      values[0] = values[0].substr(0, values[0].length - 3)
      formatted_number = separator + chunk + formatted_number
    }

    if (values[0].length > 0) { formatted_number = values[0] + formatted_number }

    if (values[1] == undefined) { return formatted_number }

    return formatted_number + "." + values[1]
  }

  result = []

  total_savings = 0.0

  _.each(ds_azure_old_snapshots, function(snapshot) {
    savings = ds_azure_snapshot_costs_grouped[snapshot['resourceID'].toLowerCase()]

    if (savings == null || savings == undefined) {
      savings = 0.0
    }

    if (savings >= param_min_savings) {
      total_savings += savings

      recommendationDetails = [
        "Delete ", snapshot['service'], " snapshot ", snapshot["resourceID"], " ",
        "in Azure Subscription ", snapshot["subscriptionName"],
        " (", snapshot["subscriptionID"], ")"
      ].join('')

      result.push({
        accountID: snapshot["subscriptionID"],
        accountName: snapshot["subscriptionName"],
        resourceID: snapshot['resourceID'],
        resourceName: snapshot['resourceName'],
        resourceGroup: snapshot['resourceGroup'],
        resourceType: snapshot['resourceType'],
        region: snapshot['region'],
        age: snapshot['age'],
        tags: snapshot['tags'],
        service: snapshot['service'],
        size: snapshot['size'],
        savings: parseFloat(savings.toFixed(3)),
        savingsCurrency: ds_currency['symbol'],
        recommendationDetails: recommendationDetails,
        lookbackPeriod: param_snapshot_age,
        // These are to avoid errors when we hash_exclude these fields
        total_savings: '',
        message: '',
        policy_name: ''
      })
    }
  })

  // Message for incident output
  total_snapshots = ds_azure_snapshots_region_filtered.length.toString()
  total_old_snapshots = result.length.toString()
  old_snapshots_percentage = (total_old_snapshots / total_snapshots * 100).toFixed(2).toString() + '%'

  days_noun = "days"
  if (param_snapshot_age == 1) { days_noun = "day" }

  findings = [
    "Out of ", total_snapshots, " snapshots analyzed, ",
    total_old_snapshots, " (", old_snapshots_percentage,
    ") are older than ", param_snapshot_age, " ", days_noun, " ",
    "and are recommended for deletion.\n\n"
  ].join('')

  disclaimer = "The above settings can be modified by editing the applied policy and changing the appropriate parameters.\n\n"

  savings_message = [
    ds_currency['symbol'], ' ',
    formatNumber(parseFloat(total_savings).toFixed(2), ds_currency['separator'])
  ].join('')

  // Sort by descending order of savings value
  result = _.sortBy(result, function(item) { return item['savings'] * -1 })

  // Dummy item to ensure that the check statement in the policy executes at least once
  result.push({
    resourceID: "",
    total_savings: "",
    message: "",
    tags: "",
    age: "",
    savings: "",
    savingsCurrency: ""
  })

  result[0]['total_savings'] = savings_message
  result[0]['message'] = findings + disclaimer
  result[0]['policy_name'] = ds_applied_policy['name']
EOS
end

###############################################################################
# Policy
###############################################################################

policy "pol_azure_old_snapshots" do
  validate_each $ds_azure_snapshots_incident do
    summary_template "{{ with index data 0 }}{{ .policy_name }}{{ end }}: {{ len data }} Azure Old Snapshots Found"
    detail_template <<-'EOS'
    **Potential Monthly Savings:** {{ with index data 0 }}{{ .total_savings }}{{ end }}

    {{ with index data 0 }}{{ .message }}{{ end }}
    EOS
    check logic_or($ds_parent_policy_terminated, eq(val(item, "resourceID"), ""))
    escalate $esc_email
    escalate $esc_delete_snapshot
    hash_exclude "total_savings", "message", "tags", "age", "savings", "savingsCurrency"
    export do
      resource_level true
      field "accountID" do
        label "Subscription ID"
      end
      field "accountName" do
        label "Subscription Name"
      end
      field "resourceGroup" do
        label "Resource Group"
      end
      field "resourceName" do
        label "Resource Name"
      end
      field "tags" do
        label "Resource Tags"
      end
      field "age" do
        label "Age In Days"
      end
      field "size" do
        label "Size (GB)"
      end
      field "service" do
        label "Service"
      end
      field "region" do
        label "Region"
      end
      field "recommendationDetails" do
        label "Recommendation"
      end
      field "savings" do
        label "Estimated Monthly Savings"
      end
      field "savingsCurrency" do
        label "Savings Currency"
      end
      field "resourceType" do
        label "Resource Type"
      end
      field "lookbackPeriod" do
        label "Snapshot Age Threshold (Days)"
      end
      field "resourceID" do
        label "Resource ID"
      end
      field "id" do
        label "ID"
        path "resourceID"
      end
    end
  end
end

###############################################################################
# Escalations
###############################################################################

escalation "esc_email" do
  automatic true
  label "Send Email"
  description "Send incident email"
  email $param_email
end

escalation "esc_delete_snapshot" do
  automatic contains($param_automatic_action, "Delete Snapshots")
  label "Delete Snapshots"
  description "Approval to delete all selected snapshots"
  run "delete_snapshots", data, $param_azure_endpoint, rs_optima_host
end

###############################################################################
# Cloud Workflow
###############################################################################

define delete_snapshots($data, $$param_azure_endpoint, $$rs_optima_host) return $all_responses do
  # Change "No" to "Yes" to enable CWF debug logging
  $log_to_cm_audit_entries = "No"

  $$debug = $log_to_cm_audit_entries == "Yes"
  $$errors = []
  $status_code = ''
  $all_responses = []

  foreach $item in $data do
    sub on_error: skip do
      call delete_snapshot($item['resourceID'])
    end
  end
end

define delete_snapshot($resourceID) do
  $syslog_subject = "Azure delete old snapshots API response: "

  $response = http_request(
    auth: $$auth_azure,
    verb: "DELETE",
    host: $$param_azure_endpoint,
    https: true,
    href: $resourceID,
    query_strings: {
      "api-version": "2019-07-01"
    }
  )

  if $delete_status != 202
    call sys_log($syslog_subject, to_s($response))
  end
end

define sys_log($subject, $detail) do
  # Create empty errors array if doesn't already exist
  if !$$errors
    $$errors = []
  end
  # Check if debug is enabled
  if $$debug
    # Append to global $$errors
    # This is the suggested way to capture errors
    $$errors << "Unexpected error for " + $subject + "\n  " + to_s($detail)
    # If Flexera NAM Zone, create audit_entries [to be deprecated]
    # This is the legacy method for capturing errors and only supported on Flexera NAM
    if $$rs_optima_host == "api.optima.flexeraeng.com"
      # skip_error_and_append is used to catch error if rs_cm.audit_entries.create fails unexpectedly
      $task_label = "Creating audit entry for " + $subject
      sub task_label: $task, on_error: skip_error_and_append($task) do
        rs_cm.audit_entries.create(
          notify: "None",
          audit_entry: {
            auditee_href: @@account,
            summary: $subject,
            detail: $detail
          }
        )
      end # End sub on_error
    end # End if rs_optima_host
  end # End if debug is enabled
end

define skip_error_and_append($subject) do
  $$errors << "Unexpected error for " + $subject + "\n  " + to_s($_error)
  $_error_behavior = "skip"
end

###############################################################################
# Meta Policy [alpha]
# Not intended to be modified or used by policy developers
###############################################################################

# If the meta_parent_policy_id is not set it will evaluate to an empty string and we will look for the policy itself,
# if it is set we will look for the parent policy.
datasource "ds_get_policy" do
  request do
    auth $auth_flexera
    host rs_governance_host
    ignore_status [404]
    path join(["/api/governance/projects/", rs_project_id, "/applied_policies/", switch(ne(meta_parent_policy_id,""), meta_parent_policy_id, policy_id) ])
    header "Api-Version", "1.0"
  end
  result do
    encoding "json"
    field "id", jmes_path(response, "id")
  end
end


datasource "ds_parent_policy_terminated" do
  run_script $js_decide_if_self_terminate, $ds_get_policy, policy_id, meta_parent_policy_id
end

# If the policy was applied by a meta_parent_policy we confirm it exists if it doesn't we confirm we are deleting
# This information is used in two places:
# - determining whether or not we make a delete call
# - determining if we should create an incident (we don't want to create an incident on the run where we terminate)
script "js_decide_if_self_terminate", type: "javascript" do
  parameters "found", "self_policy_id", "meta_parent_policy_id"
  result "result"
  code <<-EOS
  var result
  if (meta_parent_policy_id != "" && found.id == undefined) {
    result = true
  } else {
    result = false
  }
  EOS
end

# Two potentials ways to set this up:
# - this way and make a unneeded 'get' request when not deleting
# - make the delete request an interate and have it iterate over an empty array when not deleting and an array with one item when deleting
script "js_make_terminate_request", type: "javascript" do
  parameters "should_delete", "policy_id", "rs_project_id", "rs_governance_host"
  result "request"
  code <<-EOS

  var request = {
    auth:  'auth_flexera',
    host: rs_governance_host,
    path: "/api/governance/projects/" + rs_project_id + "/applied_policies/" + policy_id,
    headers: {
      "API-Version": "1.0",
      "Content-Type":"application/json"
    },
  }

  if (should_delete) {
    request.verb = 'DELETE'
  }
  EOS
end

datasource "ds_terminate_self" do
  request do
    run_script $js_make_terminate_request, $ds_parent_policy_terminated, policy_id, rs_project_id, rs_governance_host
  end
end

datasource "ds_is_deleted" do
  run_script $js_check_deleted, $ds_terminate_self
end

# This is just a way to have the check delete request connect to the farthest leaf from policy.
# We want the delete check to the first thing the policy does to avoid the policy erroring before it can decide whether or not it needs to self terminate
# Example a customer deletes a credential and then terminates the parent policy. We still want the children to self terminate
# The only way I could see this not happening is if the user who applied the parent_meta_policy was offboarded or lost policy access, the policies who are impersonating the user
# would not have access to self-terminate
# It may be useful for the backend to enable a mass terminate at some point for all meta_child_policies associated with an id.
script "js_check_deleted", type: "javascript" do
  parameters "response"
  result "result"
  code <<-EOS
  result = {"path":"/"}
  EOS
end

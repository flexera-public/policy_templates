name "Azure Old Snapshots"
rs_pt_ver 20180301
type "policy"
short_description "Checks for snapshots older than specified number of days and, optionally, deletes them. See the [README](https://github.com/flexera/policy_templates/tree/master/cost/azure/old_snapshots) and [docs.rightscale.com/policies](https://docs.rightscale.com/policies/) to learn more."
severity "low"
category "Cost"
default_frequency "daily"
info(
  version: "2.6",
  provider: "Azure",
  service: "Storage",
  policy_set: "Old Snapshots"
)

##################
# User inputs    #
##################

parameter "param_email" do
  type "list"
  label "Email Address"
  description "Email addresses of the recipients you wish to notify"
end

parameter "param_snapshot_age" do
  type "number"
  label "Snapshot Age"
  description "The number of days since the snapshot was created"
end

parameter "param_exclusion_tag_key" do
  category "User Inputs"
  label "Exclusion Tag Key"
  description "Cloud native tag key to ignore instances. Example: exclude_utilization"
  type "list"
end

parameter "param_automatic_action" do
  type "list"
  label "Automatic Actions"
  description "When this value is set, this policy will automatically take the selected action(s)"
  allowed_values ["Delete Snapshots"]
end

parameter "param_log_to_cm_audit_entries" do
  type "string"
  label "Log to CM Audit Entries"
  description "Boolean for whether or not to log any debugging information from actions to CM Audit Entries, this should be left set to No on Flexera EU"
  default "No"
  allowed_values "Yes", "No"
end

###############################################################################
# Authentication
###############################################################################

#authenticate with Azure
credentials "azure_auth" do
  schemes "oauth2"
  label "Azure"
  description "Select the Azure Resource Manager Credential from the list."
  tags "provider=azure_rm"
end

credentials "auth_rs" do
  schemes "oauth2"
  label "flexera"
  description "Select FlexeraOne OAuth2 credentials"
  tags "provider=flexera"
end

###############################################################################
# Pagination
###############################################################################

#pagination support
pagination "azure_pagination" do
  get_page_marker do
    body_path "nextLink"
  end
  set_page_marker do
    uri true
  end
end

###############################################################################
# Datasources
###############################################################################

#get all subscription details.
datasource "ds_subscriptions" do
  request do
    auth $azure_auth
    pagination $azure_pagination
    host "management.azure.com"
    path "/subscriptions/"
    query "api-version","2019-06-01"
    header "User-Agent", "RS Policies"
  end
  result do
    encoding "json"
    collect jmes_path(response, "value[*]") do
      field "subscriptionId", jmes_path(col_item,"subscriptionId")
      field "displayName", jmes_path(col_item,"displayName")
      field "state", jmes_path(col_item,"state")
    end
  end
end

#get all snapshots
datasource "ds_azure_get_snapshots" do
  iterate $ds_subscriptions
  request do
    auth $azure_auth
    pagination $azure_pagination
    host "management.azure.com"
    path join(["/subscriptions/", val(iter_item,"subscriptionId"), "/providers/Microsoft.Compute/snapshots"])
    query "api-version","2019-07-01"
  end
  result do
    encoding "json"
    collect jmes_path(response, "value[*]") do
      field "id", jmes_path(col_item,"id")
      field "name", jmes_path(col_item,"name")
      field "location", jmes_path(col_item, "location")
      field "tags", jmes_path(col_item,"tags")
      field "timeCreated", jmes_path(col_item,"properties.timeCreated")
      field "subscriptionId",val(iter_item,"subscriptionId")
      field "subscriptionName",val(iter_item,"displayName")
    end
  end
end

datasource "ds_currency_reference" do
  request do
    host "raw.githubusercontent.com"
    path "/rightscale/policy_templates/master/cost/scheduled_reports/currency_reference.json"
    header "User-Agent", "RS Policies"
  end
end

datasource "ds_currency_code" do
  request do
    auth $auth_rs
    host rs_optima_host
    path join(["/bill-analysis/orgs/",rs_org_id,"/settings/currency_code"])
    header "Api-Version", "0.1"
    header "User-Agent", "RS Policies"
    ignore_status [403]
  end
  result do
    encoding "json"
    field "id", jmes_path(response,"id")
    field "value", jmes_path(response,"value")
  end
end

datasource "ds_billing_centers" do
  request do
    auth $auth_rs
    host rs_optima_host
    path join(["/analytics/orgs/",rs_org_id,"/billing_centers"])
    header "Api-Version", "1.0"
    header "User-Agent", "RS Policies"
    query "view", "allocation_table"
    ignore_status [403]
  end
  result do
    encoding "json"
    collect jmes_path(response,"[*]") do
      field "href", jmes_path(col_item,"href")
      field "id", jmes_path(col_item,"id")
      field "name", jmes_path(col_item,"name")
      field "parent_id", jmes_path(col_item,"parent_id")
    end
  end
end

datasource "ds_top_level_billing_centers" do
  run_script $js_top_level_bc, $ds_billing_centers
end

datasource "ds_snapshot_costs" do
  iterate $ds_subscriptions
  request do
    run_script $js_get_costs, val(iter_item,"subscriptionId"), $ds_top_level_billing_centers, rs_org_id, rs_optima_host
  end
  result do
    encoding "json"
    collect jmes_path(response,"rows[*]") do
      field "resource_id", jmes_path(col_item,"dimensions.resource_id")
      field "cost_nonamortized_unblended_adj", jmes_path(col_item,"metrics.cost_nonamortized_unblended_adj")
    end
  end
end

datasource "ds_filter_snapshots" do
  run_script $js_filter_snapshots, $param_exclusion_tag_key, $param_snapshot_age, $ds_azure_get_snapshots
end


datasource "ds_snapshot_cost_mapping" do
  run_script $js_snapshot_cost_mapping, $ds_filter_snapshots, $ds_snapshot_costs, $ds_currency_code, $ds_currency_reference, $ds_billing_centers
end

###############################################################################
# Scripts
###############################################################################

script "js_top_level_bc", type: "javascript" do
  parameters "billing_centers"
  result "filtered_billing_centers"
  code <<-EOS
    var filtered_billing_centers =
    _.reject(billing_centers, function(bc){ return bc.parent_id != null });
  EOS
end

script "js_get_costs", type:"javascript" do
  parameters  "account_id","billing_centers","org","optima_host"
  result "request"
  code <<-EOS
    // returns date formatted as string: YYYY-mm-dd
    function getFormattedDailyDate(date) {
      var year = date.getFullYear();
      var month = (1 + date.getMonth()).toString();
      month = month.length > 1 ? month : '0' + month;
      var day = date.getDate().toString();
      day = day.length > 1 ? day : '0' + day;
      return year + '-' + month + '-' + day;
    }
    var start_date = getFormattedDailyDate(new Date(new Date().setDate(new Date().getDate() - 3)));
    var end_date = getFormattedDailyDate(new Date(new Date().setDate(new Date().getDate() - 2)));
    var request = {
      auth: "auth_rs",
      host: optima_host,
      verb: "POST",
      path: "/bill-analysis/orgs/" + org + "/costs/select",
      body_fields: {
        "dimensions": ["resource_id"],
        "granularity": "day",
        "start_at": start_date,
        "end_at": end_date,
        "metrics": ["cost_nonamortized_unblended_adj"],
        "billing_center_ids": _.compact(_.map(billing_centers, function(value){ return value.id})),
        "limit": 10000,
        "filter": {
          "expressions": [
            {
              "dimension": "service",
              "type": "equal",
              "value": "Microsoft.Compute"
            },
            {
              "dimension": "vendor_account",
              "type": "equal",
              "value": account_id
            }
          ],
          "type": "and"
        }
      },
      headers: {
        "User-Agent": "RS Policies",
        "Api-Version": "1.0"
      },
	  ignore_status: [400]
    }
  EOS
end

script "js_filter_snapshots", type: "javascript" do
  parameters "param_exclusion_tag_key", "param_snapshot_age", "ds_azure_get_snapshots"
  result "res"
  code <<-EOS
    var res = [];
    _.each(ds_azure_get_snapshots, function(snapshot){
      var tags='';
      var expectedDate=new Date();
      var is_tag_matched=false;
      var date1 = new Date(snapshot['timeCreated']);
      var date2 = new Date();
      var Difference_In_Time = date2.getTime() - date1.getTime();
      var diffDays = Difference_In_Time / (1000 * 3600 * 24);
      var age=Math.round(diffDays);
      if(age<diffDays){
        age++;
      }
      var createdTime=new Date(snapshot['timeCreated']);
      expectedDate.setDate(expectedDate.getDate()- parseInt(param_snapshot_age));
      for(var k=0;k<param_exclusion_tag_key.length;k++){
        if(_.has(snapshot.tags, param_exclusion_tag_key[k])){
          is_tag_matched=true
        }
      }
      if (!is_tag_matched) {
        if(createdTime.getTime()<expectedDate.getTime()){
          res.push({
            snapshot_id:snapshot['id'],
            name:snapshot['name'],
            location:snapshot['location'],
            timeCreated:snapshot['timeCreated'],
            subscriptionId:snapshot['subscriptionId'],
            subscriptionName:snapshot['subscriptionName'],
            age:age,
            savings:"N/A"
          })
        }
      }
    })
  EOS
end

script "js_snapshot_cost_mapping", type:"javascript" do
  parameters  "snapshots","snapshots_costs","ds_currency_code","ds_currency_reference", "ds_billing_centers"
  result "result"
  code <<-EOS
    var instances = [];
    var result={};
    var message=''
    var count=0;
    function formatNumber(number, separator){
      var numString =number.toString();
      var values=numString.split(".");
      var result = ''
      while (values[0].length > 3){
        var chunk = values[0].substr(-3)
        values[0] = values[0].substr(0, values[0].length - 3)
        result = separator + chunk + result
      }
      if (values[0].length > 0){
        result = values[0] + result
      }
      if(values[1]==undefined){
        return result;
      }
      return result+"."+values[1];
    }
    // Format costs with currency symbol and thousands separator
    if(ds_billing_centers.length!=0){
      if( ds_currency_code['value'] !== undefined ) {
        if (ds_currency_reference[ds_currency_code['value']] !== undefined ) {
          var cur = ds_currency_reference[ds_currency_code['value']]['symbol']
          if( ds_currency_reference[ds_currency_code['value']]['t_separator'] !== undefined ) {
            var separator = ds_currency_reference[ds_currency_code['value']]['t_separator']
          } else {
            var separator = ""
          }
        } else {
          var cur = ""
          var separator = ""
        }
      } else {
        var cur = "$"
        var separator = ","
      }
      var total=0;
      _.each(snapshots, function(snapshot){
        var cost_objects = _.where(snapshots_costs, {resource_id: snapshot["snapshot_id"]});
        if (_.size(cost_objects) > 0){
          count++;
          var sum = _.reduce(_.compact(_.map(cost_objects, function(value){ return value.cost_nonamortized_unblended_adj})), function(memo, num){ return memo + num; }, 0);
          var monthly_savings = sum*30;
          total=total+monthly_savings;
          snapshot['savings']= cur + ' '+formatNumber((Math.round(monthly_savings * 100) / 100), separator)
          instances.push(snapshot)
        } else {
          snapshot['savings']= "N/A";
          instances.push(snapshot)
        }
      })
      if(count){
        total=cur + ' '+formatNumber((Math.round(total * 100) / 100), separator);
        message="The total estimated monthly savings are " +total;
      } else {
        message="The Flexera Optima system does not have any data to calculate savings for these resources";
      }
    }else{
      message="You do not have the minimum required role of billing_center_viewer to view the savings";
      instances=snapshots;
    }
    result={
      "instances": instances,
      "message": message
    };
    result.instances = _.sortBy(result.instances,"location");
    result.instances = _.sortBy(result.instances,"subscriptionName");
  EOS
end

policy "pol_azure_delete_old_snapshots" do
  validate $ds_snapshot_cost_mapping do
    summary_template "{{ rs_project_name }} (Account ID: {{ rs_project_id }}): {{ len data.instances }} Old Snapshots Found"
    detail_template <<-EOS
      {{data.message}}.
    EOS
    export "instances" do
      resource_level true
      field "subscriptionName" do
        label "Subscription Name"
      end
      field "location" do
        label "Location"
      end
      field "age" do
        label "Age In Days"
      end
      field "name" do
        label "Name"
      end
      field "savings" do
        label "Estimated Monthly Savings"
      end
      field "id" do
        label "Snapshot Id"
        path "snapshot_id"
      end
    end
    hash_include "instances"
    # Send email report
    escalate $send_email_report
    # Delete snapshot if user approves
    escalate $process_snapshots
    check eq(size(val(data, "instances")), 0)
  end
end

escalation "send_email_report" do
  automatic true
  label "Send Email"
  description "Send incident email"
  email $param_email
end

escalation "process_snapshots" do
  automatic contains($param_automatic_action, "Delete Snapshots")
  label "Delete Snapshots"
  description "Delete all selected snapshots"
  run "delete_old_snapshots", data, $param_log_to_cm_audit_entries
end

###############################################################################
# Cloud Workflow
###############################################################################

define delete_old_snapshots($data, $param_log_to_cm_audit_entries) return $all_responses do
  $$debug = $param_log_to_cm_audit_entries == "Yes"
  $status_code=''
  $all_responses = []
  foreach $item in $data do
    sub on_error: skip do
      call azure_delete_old_snapshots($item['id'])
    end
  end
end

define azure_delete_old_snapshots($snapshot_id) do
  $response={}
  $syslog_subject = "Azure delete old snapshots API response: "
  $response = http_request(
          auth: $$azure_auth,
          verb: "delete",
          host: "management.azure.com",
          https: true,
          href: $snapshot_id,
          query_strings: {
            "api-version": "2019-07-01"
          }
        )
  if $delete_status != 202
    call sys_log($syslog_subject,to_s($response))
  end
end

define sys_log($subject, $detail) do
  if $$debug
    rs_cm.audit_entries.create(
      notify: "None",
      audit_entry: {
        auditee_href: @@account,
        summary: join(["Old Snapshot Policy - ", $subject]),
        detail: $detail
      }
    )
  end
end

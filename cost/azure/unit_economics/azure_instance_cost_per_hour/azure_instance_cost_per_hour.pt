name "Azure Cost Report - Instance Cost Per Hour"
rs_pt_ver 20180301
type "policy"
short_description "This policy creates a Unit Economics report showing Azure Compute instance cost per hour. See the [README](https://github.com/flexera-public/policy_templates/tree/master/cost/aws/unit_economics/azure_instance_cost_per_hour) and [docs.flexera.com/flexera/EN/Automation](https://docs.flexera.com/flexera/EN/Automation/AutomationGS.htm) to learn more."
long_description ""
severity "low"
category "Cost"
default_frequency "monthly"
info(
  version: "0.1",
  provider: "Flexera Optima",
  service: "All",
  policy_set: "N/A"
)

###############################################################################
# Parameters
###############################################################################

parameter "param_email" do
  type "list"
  category "Policy Settings"
  label "Email addresses to notify"
  description "Email addresses of the recipients you wish to notify when new incidents are created"
  default []
end

parameter "param_billing_centers" do
  type "list"
  category "Filters"
  label "Billing Center Name"
  description "List of Billing Center names you want to report on.  Leave blank to select all top level Billing Centers."
  default []
end

parameter "param_start" do
  type "string"
  category "Statistics"
  label "Enter YYYY-MM to start from"
  description "Enter Starting Year & Month for the report in the format YYYY-MM"
  default ""
end
  
parameter "param_end" do
  type "string"
  category "Statistics"
  label "Enter YYYY-MM to end at"
  description "Enter End Year & Month for the report in the format YYYY-MM"
  default ""
end

parameter "param_group_by" do
  type "string"
  category "Statistics"
  label "Aggregate KPI or per Billing Center"
  allowed_values [
      "Aggregate",
      "Per Billing Center"
  ]
  description "List of Billing Center names you want to report on.  Leave blank to select all top level Billing Centers."
  default "Per Billing Center"
end

###############################################################################
# Authentication
###############################################################################

#AUTHENTICATE WITH FLEXERA/OPTIMA
credentials "auth_flexera" do
  schemes "oauth2"
  label "Flexera"
  description "Select Flexera One OAuth2 credentials"
  tags "provider=flexera"
end

###############################################################################
# Datasources & Scripts
###############################################################################

#GET BILLING CENTERS FOR ORG
datasource "ds_billing_centers" do
  request do
    auth $auth_flexera
    host rs_optima_host
    path join(["/analytics/orgs/",rs_org_id,"/billing_centers"])
    header "Api-Version", "1.0"
    header "User-Agent", "RS Policies"
    query "view", "allocation_table"
  end
  result do
    encoding "json"
    collect jmes_path(response,"[*]") do
      field "href", jmes_path(col_item,"href")
      field "id", jmes_path(col_item,"id")
      field "name", jmes_path(col_item,"name")
      field "parent_id", jmes_path(col_item,"parent_id")
      field "ancestor_ids", jmes_path(col_item,"ancestor_ids")
      field "allocation_table", jmes_path(col_item,"allocation_table")
    end
  end  
end
  
#GET TOP-LEVEL BILLING CENTERS
datasource "ds_top_level_billing_centers" do
  run_script $js_top_level_billing_centers, $ds_billing_centers
end
  
script "js_top_level_billing_centers", type: "javascript" do
  parameters "billing_centers"
  result "filtered_billing_centers"
  code <<-EOS
  var filtered_billing_centers =
    _.reject(billing_centers, function(bc){ return bc.parent_id != null })
  EOS
end

#GET USAGE DATA FOR INSTANCE TYPES
datasource "ds_instance_types" do
  request do
    run_script $js_instance_types, $ds_top_level_billing_centers, $param_billing_centers, $param_start, $param_end, rs_org_id, rs_optima_host
  end
  result do
    encoding "json"
    collect jmes_path(response, "rows") do
      field "billing_center_id", jmes_path(col_item,"dimensions.billing_center_id")
      field "instance_type", jmes_path(col_item,"dimensions.instance_type")
      field "usage_unit", jmes_path(col_item,"dimensions.usage_unit")
      field "cost", jmes_path(col_item,"metrics.cost_amortized_unblended_adj")
      field "usage_amount", jmes_path(col_item,"metrics.usage_amount")
      field "date", jmes_path(col_item,"timestamp") #note to change 'year_month' to 'date'
    end
  end
end

script "js_instance_types", type: "javascript" do
  parameters "ds_billing_centers", "param_billing_centers", "param_start", "param_end", "org_id", "optima_host"
  result "request"
  code <<-EOS 
    var billing_center_ids = []
    if (param_billing_centers.length === 0){
      var top_billing_centers = _.reject(ds_billing_centers, function(bc){ return bc.parent_id != null });
      billing_center_ids = _.map(top_billing_centers, function(value, key){ return value.id });
    } else {
      // get array of billing center id's that match the names in param_billing_centers.
      billing_center_names = _.map(param_billing_centers, function(name){ return name.toLowerCase(); });
      billing_center_ids = _.compact(_.map(ds_billing_centers, function(value){ if(_.contains(billing_center_names, value.name.toLowerCase())){return value.id} }));
    }

    var dimensions = [ "vendor", "billing_center_id", "usage_unit", "instance_type" ]
    var expression = [
      { "dimension":"category", "type":"equal", "value":"Compute" },
      { "dimension": "resource_type", "type":"substring", "substring":"Virtual Machines-" },
      { "dimension":"vendor", "type":"equal", "value":"Azure" }
    ]

    var request = {
      auth: "auth_flexera",
      host: optima_host,
      verb: "POST",
      path: "/bill-analysis/orgs/" + org_id + "/costs/aggregated",
      body_fields: {
        "billing_center_ids": billing_center_ids,
        "dimensions": dimensions,
        "metrics": [ "usage_amount", "cost_amortized_unblended_adj" ],
        "granularity": "month",
        "start_at": param_start,
        "end_at": param_end,
        "filter": {
          "type": "and",
          "expressions": expression
        }
      },
      headers: {
        "Api-Version": "1.0",
        "User-Agent": "RS Policies",
      }
    }
  EOS
end

#GET DATA WITH NORMALIZATION FACTOR UNITS FOR INSTANCE TYPES (AZURE CSV WITH NFU)
datasource "ds_isf_ratio_csv" do
  request do
    host "isfratio.blob.core.windows.net"
    path "/isfratio/ISFRatio.csv"
  end
  result do
    encoding "text"
  end
end

#CALCULATE NORMALIZED INSTANCES COST PER HOUR
datasource "ds_normalized_cost_instance_hour_data" do
  run_script $js_normalized_cost_instance_hour_data, $ds_instance_types, $ds_isf_ratio_csv, $ds_top_level_billing_centers, $param_group_by
end

script "js_normalized_cost_instance_hour_data", type: "javascript" do
  parameters "cost_usage_data", "azure_instance_data", "ds_top_level_billing_centers", "param_group_by"
  result "result"
  code <<-'EOS'
  var result = []
  var grouped_costs = []
  var aggregated_costs = []

  //Get Normalization Factor units from Instance Data json
  var isf_ratio_array = azure_instance_data.toString().split("\r\n")
  var isf_ratios = []
  _.each(isf_ratio_array, function(ratio){
    //var instance_size_flexibility_group = ratio.split(",")[0]
    var arm_sku_name = ratio.split(",")[1]
    var ratio = ratio.split(",")[2]

    isf_ratios.push({
      "instance_size_name": arm_sku_name,
      "nfu": ratio
    })
  })

  //Apply normalization factor to costs based on instance size and calculate nfu total
  _.each(cost_usage_data, function(data){
    var billing_center_name = _.find(ds_top_level_billing_centers, function(name) { return name.id == data.billing_center_id })
      
    _.each(isf_ratios, function(ratio){
      if(data.instance_type == ratio.instance_size_name ){
        var normalized_usage_amount = data.usage_amount * Number(ratio.nfu)
        if( ratio.nfu == null ){
          normalized_usage_amount = data.usage_amount
        }
        
        data["normalization_factor"] = Number(ratio.nfu)
        data["normalized_usage_amount"] = normalized_usage_amount
        data["billing_center_name"] = billing_center_name.name
      }
    })
  })
  //Explore using a _.find for nfu_ratios in the above

  months = _.pluck( _.uniq(cost_usage_data, function(data){ return data.date}), "date" )
  bc_names = _.reject( _.pluck( _.uniq(cost_usage_data, function(data){ return data.billing_center_name}), "billing_center_name"), function(bc){ 
    return bc == null
  })

  if(param_group_by === "Aggregate"){

    //Group by Date only (All BCs Aggregated for each month)
    _.each(months, function(mo){ 
      var cost_total = 0
      var normalized_usage_amount_total = 0                              
      _.each(cost_usage_data, function(data){
        if(mo == data.date){
          cost_total += data.cost
          if(data.normalized_usage_amount != null){
            normalized_usage_amount_total += data.normalized_usage_amount
          } else {
            console.log("Usage amount: " + data.normalized_usage_amount)
          }
        }
      })

      console.log("Month: " + mo, "Cost: " + cost_total, "Normalized Usage Amount: " + normalized_usage_amount_total )
      var normalized_cost_instance_hr = cost_total / normalized_usage_amount_total

      aggregated_costs.push({
        "billing_center": "Aggregated",
        "vendor": "Azure",
        "avg_normalized_cost_instance_hr": parseFloat(normalized_cost_instance_hr).toFixed(4),
        "date": mo
      })
    })
    result = aggregated_costs

  } else {

    //Group by Date and Billing Center (Each BC separate for each month)
    _.each(months, function(mo){ 
      _.each(bc_names, function(bc){
        var cost_total = 0
        var normalized_usage_amount_total = 0   
        _.each(cost_usage_data, function(data){
          if(mo == data.date && bc == data.billing_center_name){
            cost_total += data.cost
            if(data.normalized_usage_amount != null){
              normalized_usage_amount_total += data.normalized_usage_amount
            } else {
              console.log("Usage amount: " + data.normalized_usage_amount)
            }
          }
        })

        console.log("Month: " + mo, "Cost: " + cost_total, "Normalized Usage Amount: " + normalized_usage_amount_total )
        var normalized_cost_instance_hr = 0
        if( normalized_usage_amount_total > 0){ 
          normalized_cost_instance_hr = cost_total / normalized_usage_amount_total
        }

        grouped_costs.push({
          "billing_center": bc,
          "vendor": "Azure",
          "avg_normalized_cost_instance_hr": parseFloat(normalized_cost_instance_hr).toFixed(4),
          "date": mo
        })
      })
    })
    result = grouped_costs

  }
  EOS
end

#CHART CREATION
datasource "ds_chart_creation" do
  run_script $js_chart_creation, $ds_normalized_cost_instance_hour_data
end

script "js_chart_creation", type: "javascript" do
  parameters "cost_inst_hrs_data"
  result "report"
  code <<-EOS

  //Group data by Billing Center (will just show BC as "Aggregate" if param_group_by="Aggregate")
  group_by_bc = _.groupBy(cost_inst_hrs_data, function(data) { return data.billing_center })
  report = cost_inst_hrs_data

  //Create chart axis labels
  chart_axis_labels = 
  ("chxl=1:," + 
    _.uniq(cost_inst_hrs_data, function(data){ return data.date })
    .map( function(data){ return data.date.substring(0,7) })
  ).split(",").join("|")

  //Create legend - produce list of BC names
  var chart_legend = "chdl="
  var i = 0
  for (var key in group_by_bc) {
      chart_legend += key
      i++
      if (i < _.size(group_by_bc)) { chart_legend += "|" }
  }

  //Create chart dataset - produce list of BC values
  var j = 0
  var chart_data = "chd=t:"
  _.each(group_by_bc, function(o){
      var k = 0
      _.each(o, function(p) {
        chart_data = chart_data + p.avg_normalized_cost_instance_hr
        k++
        if (k < _.size(o)){ chart_data = chart_data + "," }
      })
      j++
      if (j < _.size(group_by_bc)){ chart_data = chart_data + "|" }
  })

  //Create chart scale
  max = (Math.max.apply(Math, cost_inst_hrs_data.map(function(data) { return data.avg_normalized_cost_instance_hr; }))*1.1).toFixed(3)
  min = (Math.min.apply(Math, cost_inst_hrs_data.map(function(data) { return data.avg_normalized_cost_instance_hr; }))*0.9).toFixed(3)
  chart_range = "chxr=0," + min +"," + max

  //Whole Chart Object/Report
  chart = {
    chartType: encodeURI("cht=lc"),
    chartSize: encodeURI("chs=999x450"),
    chartData: encodeURI(chart_data),
    chartTitle: encodeURI("chtt=Azure Cost Report - Instance Cost Per Hour"),
    chartImage: encodeURI("chof=.png"),
    chartLegend: encodeURI(chart_legend),        // populate from Billing Centers - comma separated
    chartLegendPosition: encodeURI("chdlp=r"),
    chartAxis: encodeURI("chxt=y,x"),
    chartAxisFormat: encodeURI("chxs=0N*cUSD2z*|1,min40"),
    chartAxisLabel: encodeURI(chart_axis_labels),
    chartScale: encodeURI(chart_range),
    chartLineStyle: encodeURI("chls=2|2|2|2|2|2|2|2|2|2|2|2|2|2|2|2"),
    chartLineColour: encodeURI("chco=6929c4,9f1853,198038,b28600,1192e8,009d9a,005d5d,007d79")
  }

  report[0]["chart_dimensions"] = chart
  EOS
end

###############################################################################
# Policy
###############################################################################

policy "pol_instance_cost_hour" do
  validate_each $ds_chart_creation do
    summary_template "Azure Cost Report - Instance Cost Per Hour"
    detail_template <<-EOS
    # Azure Cost Report for {{ rs_org_name }} - Instance Cost Per Hour
    ![Azure Cost Report - Instance Cost Per Hour](https://api.image-charts-auth.flexeraeng.com/ic-function?rs_org_id={{ rs_org_id }}&rs_project_id={{ rs_project_id }}&{{with index data 0}}{{ .chart_dimensions.chartData }}{{end}}&{{with index data 0}}{{ .chart_dimensions.chartSize }}{{end}}&{{with index data 0}}{{ .chart_dimensions.chartType }}{{end}}&{{with index data 0}}{{ .chart_dimensions.chartLegend }}{{end}}&{{with index data 0}}{{ .chart_dimensions.chartScale}}{{end}}&{{with index data 0}}{{ .chart_dimensions.chartAxis }}{{end}}&{{with index data 0}}{{ .chart_dimensions.chartAxisLabel }}{{end}}&{{with index data 0}}{{ .chart_dimensions.chartLineStyle }}{{end}}&{{with index data 0}}{{ .chart_dimensions.chartLineColour }}{{end}}&{{with index data 0}}{{ .chart_dimensions.chartTitle }}{{end}}&{{with index data 0}}{{ .chart_dimensions.chartLegendPosition }}{{end}}&{{with index data 0}}{{ .chart_dimensions.chartAxisFormat }}{{end}}&{{with index data 0}}{{ .chart_dimensions.chartImage }}{{end}})
    ___
    ###### Policy Applied in Account: {{ rs_project_name }} (Account ID: {{ rs_project_id }}) within Org: {{ rs_org_name }} (Org ID: {{ rs_org_id }})
    EOS
    escalate $esc_email
    check eq(0,1)
    export do
      resource_level false
      field "date" do
        label "Month"
      end
      field "vendor" do
        label "Cloud Vendor"
      end
      field "billing_center" do
        label "Billing Center"
      end
      #field "cost" do
      #  label "Cost"
      #end
      #field "normalized_amount" do
      #  label "Usage Amount with Normalization Factor applied"
      #end
      field "avg_normalized_cost_instance_hr" do
        label "Average Normalized Cost of Instance per Hour"
      end
    end
  end
end

###############################################################################
# Escalations
###############################################################################

escalation "esc_email" do
  automatic true
  label "Send Email"
  description "Send incident email"
  email $param_email
end

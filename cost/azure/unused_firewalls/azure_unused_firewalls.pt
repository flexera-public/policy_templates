name "Azure Unused Firewalls"
rs_pt_ver 20180301
type "policy"
short_description "Checks for Azure Firewalls that have received no traffic for a user-specified number of days and, optionally, deletes them. See the [README](https://github.com/flexera-public/policy_templates/tree/master/cost/azure/unused_firewalls/) and [docs.flexera.com/flexera/EN/Automation](https://docs.flexera.com/flexera/EN/Automation/AutomationGS.htm) to learn more."
long_description ""
doc_link "https://github.com/flexera-public/policy_templates/tree/master/cost/azure/unused_firewalls/"
category "Cost"
severity "low"
default_frequency "weekly"
info(
  version: "0.2.6",
  provider: "Azure",
  service: "Network",
  policy_set: "Unused Firewalls",
  recommendation_type: "Usage Reduction",
  hide_skip_approvals: "true"
)

###############################################################################
# Parameters
###############################################################################

parameter "param_email" do
  type "list"
  category "Policy Settings"
  label "Email Addresses"
  description "A list of email addresses to notify."
  default []
end

parameter "param_azure_endpoint" do
  type "string"
  category "Policy Settings"
  label "Azure Endpoint"
  description "Select the API endpoint to use for Azure. Use default value of management.azure.com unless using Azure China."
  allowed_values "management.azure.com", "management.chinacloudapi.cn"
  default "management.azure.com"
end

parameter "param_stats_lookback" do
  type "number"
  category "Statistics"
  label "Lookback Period"
  description "How many days back to check Azure Firewalls for incoming network activity. This value cannot be set higher than 90 because Azure does not retain metrics for longer than 90 days."
  min_value 1
  max_value 90
  default 30
end

parameter "param_min_savings" do
  type "number"
  category "Policy Settings"
  label "Minimum Savings Threshold"
  description "Minimum potential savings required to generate a recommendation"
  min_value 0
  default 0
end

parameter "param_subscriptions_allow_or_deny" do
  type "string"
  category "Filters"
  label "Allow/Deny Subscriptions"
  description "Allow or Deny entered Subscriptions. See the README for more details."
  allowed_values "Allow", "Deny"
  default "Allow"
end

parameter "param_subscriptions_list" do
  type "list"
  category "Filters"
  label "Allow/Deny Subscriptions List"
  description "A list of allowed or denied Subscription IDs/names. See the README for more details."
  default []
end

parameter "param_regions_allow_or_deny" do
  type "string"
  category "Filters"
  label "Allow/Deny Regions"
  description "Allow or Deny entered regions. See the README for more details."
  allowed_values "Allow", "Deny"
  default "Allow"
end

parameter "param_regions_list" do
  type "list"
  category "Filters"
  label "Allow/Deny Regions List"
  description "A list of allowed or denied regions. See the README for more details."
  default []
end

parameter "param_exclusion_tags" do
  type "list"
  category "Filters"
  label "Exclusion Tags"
  description "Cloud native tags to ignore resources that you don't want to produce recommendations for. Enter the Key name to filter resources with a specific Key, regardless of Value, and enter Key==Value to filter resources with a specific Key:Value pair. Other operators and regex are supported; please see the README for more details."
  default []
end

parameter "param_exclusion_tags_boolean" do
  type "string"
  category "Filters"
  label "Exclusion Tags: Any / All"
  description "Whether to filter instances containing any of the specified tags or only those that contain all of them. Only applicable if more than one value is entered in the 'Exclusion Tags' field."
  allowed_values "Any", "All"
  default "Any"
end

parameter "param_automatic_action" do
  type "list"
  category "Actions"
  label "Automatic Actions"
  description "When this value is set, this policy will automatically take the selected action."
  allowed_values ["Delete Unused Firewalls"]
  default []
end

###############################################################################
# Authentication
###############################################################################

credentials "auth_azure" do
  schemes "oauth2"
  label "Azure"
  description "Select the Azure Resource Manager Credential from the list."
  tags "provider=azure_rm"
end

credentials "auth_flexera" do
  schemes "oauth2"
  label "Flexera"
  description "Select Flexera One OAuth2 credentials"
  tags "provider=flexera"
end

###############################################################################
# Pagination
###############################################################################

pagination "pagination_azure" do
  get_page_marker do
    body_path "nextLink"
  end
  set_page_marker do
    uri true
  end
end

###############################################################################
# Datasources & Scripts
###############################################################################

# Get region-specific Flexera API endpoints
datasource "ds_flexera_api_hosts" do
  run_script $js_flexera_api_hosts, rs_optima_host
end

script "js_flexera_api_hosts", type: "javascript" do
  parameters "rs_optima_host"
  result "result"
  code <<-EOS
  host_table = {
    "api.optima.flexeraeng.com": {
	    api: "api.flexera.com",
      flexera: "api.flexera.com",
      fsm: "api.fsm.flexeraeng.com",
      grs: "grs-front.iam-us-east-1.flexeraeng.com",
      ui: "app.flexera.com",
      tld: "flexera.com"
    },
    "api.optima-eu.flexeraeng.com": {
	    api: "api.flexera.eu",
      flexera: "api.flexera.eu",
      fsm: "api.fsm-eu.flexeraeng.com",
      grs: "grs-front.eu-central-1.iam-eu.flexeraeng.com",
      ui: "app.flexera.eu",
      tld: "flexera.eu"
    },
    "api.optima-apac.flexeraeng.com": {
	    api: "api.flexera.au",
      flexera: "api.flexera.au",
      fsm: "api.fsm-apac.flexeraeng.com",
      grs: "grs-front.ap-southeast-2.iam-apac.flexeraeng.com",
      ui: "app.flexera.au",
      tld: "flexera.au"
    }
  }

  result = host_table[rs_optima_host]
EOS
end

# Get applied policy metadata for use later
datasource "ds_applied_policy" do
  request do
    auth $auth_flexera
    host val($ds_flexera_api_hosts, "flexera")
    path join(["/policy/v1/orgs/", rs_org_id, "/projects/", rs_project_id, "/applied-policies", switch(policy_id, join(["/", policy_id]), "")])
  end
end

datasource "ds_billing_centers" do
  request do
    auth $auth_flexera
    host rs_optima_host
    path join(["/analytics/orgs/", rs_org_id, "/billing_centers"])
    header "Api-Version", "1.0"
    header "User-Agent", "RS Policies"
    ignore_status [403]
  end
  result do
    encoding "json"
    collect jmes_path(response, "[*]") do
      field "href", jmes_path(col_item, "href")
      field "id", jmes_path(col_item, "id")
      field "name", jmes_path(col_item, "name")
      field "parent_id", jmes_path(col_item, "parent_id")
    end
  end
end

# Gather top level billing center IDs for when we pull cost data
datasource "ds_top_level_bcs" do
  run_script $js_top_level_bcs, $ds_billing_centers
end

script "js_top_level_bcs", type: "javascript" do
  parameters "ds_billing_centers"
  result "result"
  code <<-EOS
  filtered_bcs = _.filter(ds_billing_centers, function(bc) {
    return bc['parent_id'] == null || bc['parent_id'] == undefined
  })

  result = _.compact(_.pluck(filtered_bcs, 'id'))
EOS
end

datasource "ds_currency_reference" do
  request do
    host "raw.githubusercontent.com"
    path "/flexera-public/policy_templates/master/data/currency/currency_reference.json"
    header "User-Agent", "RS Policies"
  end
end

datasource "ds_currency_code" do
  request do
    auth $auth_flexera
    host rs_optima_host
    path join(["/bill-analysis/orgs/", rs_org_id, "/settings/currency_code"])
    header "Api-Version", "0.1"
    header "User-Agent", "RS Policies"
    ignore_status [403]
  end
  result do
    encoding "json"
    field "id", jmes_path(response, "id")
    field "value", jmes_path(response, "value")
  end
end

datasource "ds_currency" do
  run_script $js_currency, $ds_currency_reference, $ds_currency_code
end

script "js_currency", type:"javascript" do
  parameters "ds_currency_reference", "ds_currency_code"
  result "result"
  code <<-EOS
  symbol = "$"
  separator = ","

  if (ds_currency_code['value'] != undefined) {
    if (ds_currency_reference[ds_currency_code['value']] != undefined) {
      symbol = ds_currency_reference[ds_currency_code['value']]['symbol']

      if (ds_currency_reference[ds_currency_code['value']]['t_separator'] != undefined) {
        separator = ds_currency_reference[ds_currency_code['value']]['t_separator']
      } else {
        separator = ""
      }
    }
  }

  result = {
    symbol: symbol,
    separator: separator
  }
EOS
end

datasource "ds_azure_subscriptions" do
  request do
    auth $auth_azure
    pagination $pagination_azure
    host $param_azure_endpoint
    path "/subscriptions/"
    query "api-version", "2020-01-01"
    header "User-Agent", "RS Policies"
    # Header X-Meta-Flexera has no affect on datasource query, but is required for Meta Policies
    # Forces `ds_is_deleted` datasource to run first during policy execution
    header "Meta-Flexera", val($ds_is_deleted, "path")
    # Ignore status 400, 403, and 404 which can be returned in certain (legacy) types of Azure Subscriptions
    ignore_status [400, 403, 404]
  end
  result do
    encoding "json"
    collect jmes_path(response, "value[*]") do
      field "id", jmes_path(col_item, "subscriptionId")
      field "name", jmes_path(col_item, "displayName")
      field "state", jmes_path(col_item, "state")
    end
  end
end

datasource "ds_azure_subscriptions_filtered" do
  run_script $js_azure_subscriptions_filtered, $ds_azure_subscriptions, $param_subscriptions_allow_or_deny, $param_subscriptions_list
end

script "js_azure_subscriptions_filtered", type: "javascript" do
  parameters "ds_azure_subscriptions", "param_subscriptions_allow_or_deny", "param_subscriptions_list"
  result "result"
  code <<-EOS
  if (param_subscriptions_list.length > 0) {
    result = _.filter(ds_azure_subscriptions, function(subscription) {
      include_subscription = _.contains(param_subscriptions_list, subscription['id']) || _.contains(param_subscriptions_list, subscription['name'])

      if (param_subscriptions_allow_or_deny == "Deny") {
        include_subscription = !include_subscription
      }

      return include_subscription
    })
  } else {
    result = ds_azure_subscriptions
  }
EOS
end

datasource "ds_azure_firewalls" do
  iterate $ds_azure_subscriptions_filtered
  request do
    auth $auth_azure
    pagination $pagination_azure
    host $param_azure_endpoint
    path join(["/subscriptions/", val(iter_item, "id"), "/providers/Microsoft.Network/azureFirewalls"])
    query "api-version", "2023-09-01"
    header "User-Agent", "RS Policies"
    # Ignore status 400, 403, and 404 which can be returned in certain (legacy) types of Azure Subscriptions
    ignore_status [400, 403, 404]
  end
  result do
    encoding "json"
    collect jmes_path(response, "value") do
      field "id", jmes_path(col_item, "id")
      field "name", jmes_path(col_item, "name")
      field "type", jmes_path(col_item, "type")
      field "region", jmes_path(col_item, "location")
      field "tags", jmes_path(col_item, "tags")
      field "ipConfigurations", jmes_path(col_item, "properties.ipConfigurations")
      field "managementIpConfiguration", jmes_path(col_item, "properties.managementIpConfiguration")
      field "resourceGroup", get(4, split(jmes_path(col_item, "id"), "/"))
      field "subscriptionId", val(iter_item, "id")
      field "subscriptionName", val(iter_item, "name")
    end
  end
end

datasource "ds_azure_firewalls_tag_filtered" do
  run_script $js_azure_firewalls_tag_filtered, $ds_azure_firewalls, $param_exclusion_tags, $param_exclusion_tags_boolean
end

script "js_azure_firewalls_tag_filtered", type: "javascript" do
  parameters "ds_azure_firewalls", "param_exclusion_tags", "param_exclusion_tags_boolean"
  result "result"
  code <<-EOS
  comparators = _.map(param_exclusion_tags, function(item) {
    if (item.indexOf('==') != -1) {
      return { comparison: '==', key: item.split('==')[0], value: item.split('==')[1], string: item }
    }

    if (item.indexOf('!=') != -1) {
      return { comparison: '!=', key: item.split('!=')[0], value: item.split('!=')[1], string: item }
    }

    if (item.indexOf('=~') != -1) {
      value = item.split('=~')[1]
      regex = new RegExp(value.slice(1, value.length - 1))
      return { comparison: '=~', key: item.split('=~')[0], value: regex, string: item }
    }

    if (item.indexOf('!~') != -1) {
      value = item.split('!~')[1]
      regex = new RegExp(value.slice(1, value.length - 1))
      return { comparison: '!~', key: item.split('!~')[0], value: regex, string: item }
    }

    // If = is present but none of the above are, assume user error and that the user intended ==
    if (item.indexOf('=') != -1) {
      return { comparison: '==', key: item.split('=')[0], value: item.split('=')[1], string: item }
    }

    // Assume we're just testing for a key if none of the comparators are found
    return { comparison: 'key', key: item, value: null, string: item }
  })

  if (param_exclusion_tags.length > 0) {
    result = _.reject(ds_azure_firewalls, function(resource) {
      resource_tags = {}
      if (typeof(resource['tags']) == 'object') { resource_tags = resource['tags'] }

      // Store a list of found tags
      found_tags = []

      _.each(comparators, function(comparator) {
        comparison = comparator['comparison']
        value = comparator['value']
        string = comparator['string']
        resource_tag = resource_tags[comparator['key']]

        if (comparison == 'key' && resource_tag != undefined) { found_tags.push(string) }
        if (comparison == '==' && resource_tag == value) { found_tags.push(string) }
        if (comparison == '!=' && resource_tag != value) { found_tags.push(string) }

        if (comparison == '=~') {
          if (resource_tag != undefined && value.test(resource_tag)) { found_tags.push(string) }
        }

        if (comparison == '!~') {
          if (resource_tag == undefined) { found_tags.push(string) }
          if (resource_tag != undefined && value.test(resource_tag)) { found_tags.push(string) }
        }
      })

      all_tags_found = found_tags.length == comparators.length
      any_tags_found = found_tags.length > 0 && param_exclusion_tags_boolean == 'Any'

      return all_tags_found || any_tags_found
    })
  } else {
    result = ds_azure_firewalls
  }
EOS
end

datasource "ds_azure_firewalls_region_filtered" do
  run_script $js_azure_firewalls_region_filtered, $ds_azure_firewalls_tag_filtered, $param_regions_allow_or_deny, $param_regions_list
end

script "js_azure_firewalls_region_filtered", type: "javascript" do
  parameters "ds_azure_firewalls_tag_filtered", "param_regions_allow_or_deny", "param_regions_list"
  result "result"
  code <<-EOS
  if (param_regions_list.length > 0) {
    result = _.filter(ds_azure_firewalls_tag_filtered, function(resource) {
      include_resource = _.contains(param_regions_list, resource['region'])
      if (param_regions_allow_or_deny == "Deny") { include_resource = !include_resource }
      return include_resource
    })
  } else {
    result = ds_azure_firewalls_tag_filtered
  }
EOS
end

datasource "ds_azure_firewalls_metrics" do
  iterate $ds_azure_firewalls_region_filtered
  request do
    run_script $js_azure_firewalls_metrics, val(iter_item, "id"), $param_azure_endpoint, $param_stats_lookback
  end
  result do
    encoding "json"
    field "statistics", val(response, "value")
    field "id", val(iter_item, "id")
    field "name", val(iter_item, "name")
    field "type", val(iter_item, "type")
    field "region", val(iter_item, "region")
    field "tags", val(iter_item, "tags")
    field "ipConfigurations", val(iter_item, "ipConfigurations")
    field "managementIpConfiguration", val(iter_item, "managementIpConfiguration")
    field "resourceGroup", val(iter_item, "resourceGroup")
    field "subscriptionId", val(iter_item, "subscriptionId")
    field "subscriptionName", val(iter_item, "subscriptionName")
  end
end

script "js_azure_firewalls_metrics", type: "javascript" do
  parameters "resourceID", "param_azure_endpoint", "param_stats_lookback"
  result "request"
  code <<-EOS
  end_date = new Date()
  end_date.setMilliseconds(999)
  end_date.setSeconds(59)
  end_date.setMinutes(59)
  end_date.setHours(23)

  start_date = new Date()
  start_date.setDate(start_date.getDate() - param_stats_lookback)
  start_date.setMilliseconds(0)
  start_date.setSeconds(0)
  start_date.setMinutes(0)

  timespan = start_date.toISOString() + "/" + end_date.toISOString()

  var request = {
    auth: "auth_azure",
    pagination: "pagination_azure",
    host: param_azure_endpoint,
    path: resourceID + "/providers/microsoft.insights/metrics",
    query_params: {
      "api-version": "2023-10-01",
      "timespan": timespan,
      "interval": "P1D",
      "metricnames": "NetworkRuleHit",
      "aggregation": "total"
    },
    headers: {
      "User-Agent": "RS Policies"
    },
    // Ignore status 400, 403, and 404 which can be returned in certain (legacy) types of Azure Subscriptions
    ignore_status: [400, 403, 404]
  }
EOS
end

datasource "ds_azure_firewalls_metrics_organized" do
  run_script $js_azure_firewalls_metrics_organized, $ds_azure_firewalls_metrics
end

script "js_azure_firewalls_metrics_organized", type: "javascript" do
  parameters "ds_azure_firewalls_metrics"
  result "result"
  code <<-EOS
  result = _.map(ds_azure_firewalls_metrics, function(firewall) {
    connections = 0

    _.each(firewall['statistics'], function(stat) {
      if (stat["timeseries"][0] != undefined) {
        _.each(stat["timeseries"][0]["data"], function(entry) {
          if (entry["total"] != undefined && entry["total"] != null) {
            connections += entry["total"]
          }
        })
      }
    })

    return {
      id: firewall['id'],
      name: firewall['name'],
      type: firewall['type'],
      region: firewall['region'],
      tags: firewall['tags'],
      ipConfigurations: firewall['ipConfigurations'],
      managementIpConfiguration: firewall['managementIpConfiguration'],
      resourceGroup: firewall['resourceGroup'],
      subscriptionId: firewall['subscriptionId'],
      subscriptionName: firewall['subscriptionName'],
      connections: connections
    }
  })
EOS
end

datasource "ds_azure_unused_firewalls" do
  run_script $js_azure_unused_firewalls, $ds_azure_firewalls_metrics_organized
end

script "js_azure_unused_firewalls", type: "javascript" do
  parameters "ds_azure_firewalls_metrics_organized"
  result "result"
  code <<-EOS
  result = _.filter(ds_azure_firewalls_metrics_organized, function(firewall) {
    return firewall["connections"] == 0
  })
EOS
end

datasource "ds_azure_unused_firewall_subscriptions" do
  run_script $js_azure_unused_firewall_subscriptions, $ds_azure_unused_firewalls
end

script "js_azure_unused_firewall_subscriptions", type: "javascript" do
  parameters "ds_azure_unused_firewalls"
  result "result"
  code <<-EOS
  subscriptions = _.uniq(_.pluck(ds_azure_unused_firewalls, 'subscriptionId'))
  result = _.map(subscriptions, function(sub) { return { id: sub } })
EOS
end

datasource "ds_azure_firewall_costs" do
  iterate $ds_azure_unused_firewall_subscriptions
  request do
    run_script $js_azure_firewall_costs, val(iter_item, 'id'), $ds_top_level_bcs, rs_org_id, rs_optima_host
  end
  result do
    encoding "json"
    collect jmes_path(response, "rows[*]") do
      field "resourceID", jmes_path(col_item, "dimensions.resource_id")
      field "cost", jmes_path(col_item, "metrics.cost_amortized_unblended_adj")
    end
  end
end

script "js_azure_firewall_costs", type: "javascript" do
  parameters "subscription_id", "ds_top_level_bcs", "rs_org_id", "rs_optima_host"
  result "request"
  code <<-EOS
  end_date = new Date()
  end_date.setDate(end_date.getDate() - 2)
  end_date = end_date.toISOString().split('T')[0]

  start_date = new Date()
  start_date.setDate(start_date.getDate() - 3)
  start_date = start_date.toISOString().split('T')[0]

  var request = {
    auth: "auth_flexera",
    host: rs_optima_host,
    verb: "POST",
    path: "/bill-analysis/orgs/" + rs_org_id + "/costs/select",
    body_fields: {
      dimensions: ["resource_id"],
      granularity: "day",
      start_at: start_date,
      end_at: end_date,
      metrics: ["cost_amortized_unblended_adj"],
      billing_center_ids: ds_top_level_bcs,
      limit: 100000,
      filter: {
        "type": "and",
        "expressions": [
          {
            "type": "or",
            "expressions": [
              {
                "dimension": "service",
                "type": "equal",
                "value": "Microsoft.Network"
              },
              {
                "dimension": "service",
                "type": "equal",
                "value": "microsoft.network"
              }
            ]
          },
          {
            "type": "or",
            "expressions": [
              {
                "dimension": "resource_type",
                "type": "equal",
                "value": "Azure Firewall"
              },
              {
                "dimension": "resource_type",
                "type": "equal",
                "value": "azure firewall"
              }
            ]
          },
          {
            "dimension": "vendor_account",
            "type": "equal",
            "value": subscription_id
          },
          {
            "type": "not",
            "expression": {
              "dimension": "adjustment_name",
              "type": "substring",
              "substring": "Shared"
            }
          }
        ]
      }
    },
    headers: {
      'User-Agent': "RS Policies",
      'Api-Version': "1.0"
    },
    ignore_status: [400]
  }
EOS
end

datasource "ds_azure_firewall_costs_grouped" do
  run_script $js_azure_firewall_costs_grouped, $ds_azure_firewall_costs
end

script "js_azure_firewall_costs_grouped", type: "javascript" do
  parameters "ds_azure_firewall_costs"
  result "result"
  code <<-EOS
  // Multiple a single day's cost by the average number of days in a month.
  // The 0.25 is to account for leap years for extra precision.
  cost_multiplier = 365.25 / 12

  // Group cost data by resourceId for later use
  result = {}

  _.each(ds_azure_firewall_costs, function(item) {
    id = item['resourceID'].toLowerCase()

    if (result[id] == undefined) { result[id] = 0.0 }
    result[id] += item['cost'] * cost_multiplier
  })
EOS
end

datasource "ds_azure_unused_firewalls_incident" do
  run_script $js_azure_unused_firewalls_incident, $ds_azure_firewalls_region_filtered, $ds_azure_unused_firewalls, $ds_azure_firewall_costs_grouped, $ds_applied_policy, $ds_currency, $param_min_savings, $param_stats_lookback
end

script "js_azure_unused_firewalls_incident", type: "javascript" do
  parameters "ds_azure_firewalls_region_filtered", "ds_azure_unused_firewalls", "ds_azure_firewall_costs_grouped", "ds_applied_policy", "ds_currency", "param_min_savings", "param_stats_lookback"
  result "result"
  code <<-'EOS'
  // Function for formatting currency numbers later
  function formatNumber(number, separator) {
    formatted_number = "0"

    if (number) {
      formatted_number = (Math.round(number * 100) / 100).toString().split(".")[0]

      if (separator) {
        withSeparator = ""

        for (var i = 0; i < formatted_number.length; i++) {
          if (i > 0 && (formatted_number.length - i) % 3 == 0) { withSeparator += separator }
          withSeparator += formatted_number[i]
        }

        formatted_number = withSeparator
      }

      decimal = (Math.round(number * 100) / 100).toString().split(".")[1]
      if (decimal) { formatted_number += "." + decimal }
    }

    return formatted_number
  }

  result = []
  total_savings = 0.0

  _.each(ds_azure_unused_firewalls, function(firewall) {
    savings = ds_azure_firewall_costs_grouped[firewall['id'].toLowerCase()]
    if (savings == null || savings == undefined) { savings = 0.0 }

    if (savings >= param_min_savings) {
      total_savings += savings

      tags = []

      if (typeof(firewall['tags']) == 'object') {
        _.each(Object.keys(firewall['tags']), function(key) {
          tags.push([key, "=", firewall['tags'][key]].join(''))
        })
      }

      recommendationDetails = [
        "Delete Azure Firewall ", firewall["name"], " ",
        "in Azure Subscription ", firewall["subscriptionName"],
        " (", firewall["subscriptionID"], ")"
      ].join('')

      result.push({
        accountID: firewall['subscriptionId'],
        accountName: firewall['subscriptionName'],
        resourceGroup: firewall['resourceGroup'],
        resourceID: firewall['id'],
        resourceName: firewall['name'],
        type: firewall['type'],
        region: firewall['region'],
        tags: tags.join(', '),
        service: "Microsoft.Network",
        recommendationDetails: recommendationDetails,
        lookbackPeriod: param_stats_lookback,
        savings: parseFloat(savings.toFixed(3)),
        savingsCurrency: ds_currency['symbol'],
        policy_name: ds_applied_policy['name'],
        total_savings: "",
        message: ""
      })
    }
  })

  // Message for incident output
  total_firewalls = ds_azure_firewalls_region_filtered.length.toString()
  total_unused_firewalls = result.length.toString()
  unused_firewalls_percentage = (total_unused_firewalls / total_firewalls * 100).toFixed(2).toString() + '%'

  days_noun = "days"
  if (param_stats_lookback == 1) { days_noun = "day" }

  findings = [
    "Out of ", total_firewalls, " Azure Firewalls analyzed, ",
    total_unused_firewalls, " (", unused_firewalls_percentage,
    ") have had no incoming connections for at least ",
    param_stats_lookback, " ", days_noun, " ",
    "and are recommended for deletion.\n\n"
  ].join('')

  disclaimer = "The above settings can be modified by editing the applied policy and changing the appropriate parameters.\n\n"

  savings_message = [
    ds_currency['symbol'], ' ',
    formatNumber(parseFloat(total_savings).toFixed(2), ds_currency['separator'])
  ].join('')

  // Sort by descending order of savings value
  result = _.sortBy(result, function(item) { return item['savings'] * -1 })

  // Dummy item to ensure that the check statement in the policy executes at least once
  result.push({
    accountID: "",
    accountName: "",
    resourceGroup: "",
    resourceID: "",
    resourceName: "",
    type: "",
    region: "",
    tags: "",
    service: "",
    recommendationDetails: "",
    lookbackPeriod: "",
    savings: "",
    savingsCurrency: "",
    policy_name: "",
    total_savings: "",
    message: ""
  })

  result[0]['total_savings'] = savings_message
  result[0]['message'] = findings + disclaimer
EOS
end

###############################################################################
# Policy
###############################################################################

policy "pol_azure_unused_firewalls" do
  validate_each $ds_azure_unused_firewalls_incident do
    summary_template "{{ with index data 0 }}{{ .policy_name }}{{ end }}: {{ len data }} Azure Unused Firewalls Found"
    detail_template <<-'EOS'
    **Potential Monthly Savings:** {{ with index data 0 }}{{ .total_savings }}{{ end }}

    {{ with index data 0 }}{{ .message }}{{ end }}
    EOS
    check logic_or($ds_parent_policy_terminated, eq(val(item, "resourceID"), ""))
    escalate $esc_email
    escalate $esc_delete_firewall
    hash_exclude "total_savings", "message", "tags", "savings", "savingsCurrency"
    export do
      resource_level true
      field "accountID" do
        label "Subscription ID"
      end
      field "accountName" do
        label "Subscription Name"
      end
      field "resourceGroup" do
        label "Resource Group"
      end
      field "resourceName" do
        label "Resource Name"
      end
      field "tags" do
        label "Resource Tags"
      end
      field "region" do
        label "Region"
      end
      field "recommendationDetails" do
        label "Recommendation"
      end
      field "savings" do
        label "Estimated Monthly Savings"
      end
      field "savingsCurrency" do
        label "Savings Currency"
      end
      field "type" do
        label "Type"
      end
      field "lookbackPeriod" do
        label "Look Back Period"
      end
      field "service" do
        label "Service"
      end
      field "resourceID" do
        label "Resource ID"
      end
      field "id" do
        label "ID"
        path "resourceID"
      end
    end
  end
end

###############################################################################
# Escalations
###############################################################################

escalation "esc_email" do
  automatic true
  label "Send Email"
  description "Send incident email"
  email $param_email
end

escalation "esc_delete_firewall" do
  automatic contains($param_automatic_action, "Delete Unused Firewalls")
  label "Delete Unused Firewalls"
  description "Approval to delete all selected Azure Firewalls"
  run "delete_firewalls", data, $param_azure_endpoint
end

###############################################################################
# Cloud Workflow
###############################################################################

define delete_firewalls($data, $param_azure_endpoint) return $all_responses do
  $$all_responses = []

  foreach $instance in $data do
    sub on_error: handle_error() do
      call delete_firewall($instance, $param_azure_endpoint) retrieve $delete_response
    end
  end

  if inspect($$errors) != "null"
    raise join($$errors, "\n")
  end
end

define delete_firewall($instance, $param_azure_endpoint) return $response do
  $host = $param_azure_endpoint
  $href = $instance["id"]
  $params = "?api-version=2023-09-01"
  $url = $host + $href + $params
  task_label("DELETE " + $url)

  $response = http_request(
    auth: $$auth_azure,
    https: true,
    verb: "delete",
    host: $host,
    href: $href,
    query_strings: { "api-version": "2023-09-01" }
  )

  task_label("Delete Azure Firewall response: " + $instance["id"] + " " + to_json($response))
  $$all_responses << to_json({"req": "DELETE " + $url, "resp": $response})

  if $response["code"] != 204 && $response["code"] != 202 && $response["code"] != 200
    raise "Unexpected response deleting Azure Firewall: "+ $instance["id"] + " " + to_json($response)
  else
    task_label("Delete Azure Firewall successful: " + $instance["id"])
  end
end

define handle_error() do
  if !$$errors
    $$errors = []
  end
  $$errors << $_error["type"] + ": " + $_error["message"]
  # We check for errors at the end, and raise them all together
  # Skip errors handled by this definition
  $_error_behavior = "skip"
end

###############################################################################
# Meta Policy [alpha]
# Not intended to be modified or used by policy developers
###############################################################################

# If the meta_parent_policy_id is not set it will evaluate to an empty string and we will look for the policy itself,
# if it is set we will look for the parent policy.
datasource "ds_get_parent_policy" do
  request do
    auth $auth_flexera
    host val($ds_flexera_api_hosts, "flexera")
    path join(["/policy/v1/orgs/", rs_org_id, "/projects/", rs_project_id, "/applied-policies/", switch(ne(meta_parent_policy_id, ""), meta_parent_policy_id, policy_id) ])
	  ignore_status [404]
  end
  result do
    encoding "json"
    field "id", jmes_path(response, "id")
  end
end

# If the policy was applied by a meta_parent_policy we confirm it exists if it doesn't we confirm we are deleting
# This information is used in two places:
# - determining whether or not we make a delete call
# - determining if we should create an incident (we don't want to create an incident on the run where we terminate)
datasource "ds_parent_policy_terminated" do
  run_script $js_parent_policy_terminated, $ds_get_parent_policy, meta_parent_policy_id
end

script "js_parent_policy_terminated", type: "javascript" do
  parameters "ds_get_parent_policy", "meta_parent_policy_id"
  result "result"
  code <<-'EOS'
  result = meta_parent_policy_id != "" && ds_get_parent_policy["id"] == undefined
EOS
end

# Two potentials ways to set this up:
# - this way and make a unneeded 'get' request when not deleting
# - make the delete request an interate and have it iterate over an empty array when not deleting and an array with one item when deleting
datasource "ds_terminate_self" do
  request do
    run_script $js_make_terminate_request, $ds_parent_policy_terminated, $ds_flexera_api_hosts, policy_id, rs_org_id, rs_project_id
  end
end

script "js_make_terminate_request", type: "javascript" do
  parameters "ds_parent_policy_terminated", "ds_flexera_api_hosts", "policy_id", "rs_org_id", "rs_project_id"
  result "request"
  code <<-EOS
  var request = {
    auth: "auth_flexera",
    host: ds_flexera_api_hosts["flexera"],
    path: [ "/policy/v1/orgs/", rs_org_id, "/projects/", rs_project_id, "/applied-policies", policy_id ? "/"+policy_id : "" ].join(''),
    verb: ds_parent_policy_terminated ? "DELETE" : "GET"
  }
EOS
end

# This is just a way to have the check delete request connect to the farthest leaf from policy.
# We want the delete check to the first thing the policy does to avoid the policy erroring before it can decide whether or not it needs to self terminate
# Example a customer deletes a credential and then terminates the parent policy. We still want the children to self terminate
# The only way I could see this not happening is if the user who applied the parent_meta_policy was offboarded or lost policy access, the policies who are impersonating the user
# would not have access to self-terminate
# It may be useful for the backend to enable a mass terminate at some point for all meta_child_policies associated with an id.
datasource "ds_is_deleted" do
  run_script $js_is_deleted, $ds_terminate_self
end

script "js_is_deleted", type: "javascript" do
  parameters "ds_terminate_self"
  result "result"
  code 'result = { path: "/"}'
end

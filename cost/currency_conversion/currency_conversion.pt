name "Currency Conversion"
rs_pt_ver 20180301
type "policy"
short_description "A policy that creates an adjustment rule that converts the currency of the cost of the Cloud Vendor of choice. It utilizes xe.com to retrieve the latest exchange rates. See the [README](https://github.com/flexera-public/policy_templates/tree/master/cost/currency_conversion/) and [docs.flexera.com/flexera/EN/Automation](https://docs.flexera.com/flexera/EN/Automation/AutomationGS.htm) to learn more."
long_description ""
severity "low"
default_frequency "monthly"
category "Cost"
info(
  version: "1.0",
  provider: "",
  service: "",
  policy_set: ""
)

###############################################################################
# Parameters
###############################################################################

parameter "param_email" do
  type "list"
  label "A list of email addresses to notify"
end

parameter "param_cloud_provider" do
  type "string"
  label "Cloud Provider"
  description "Cloud provider costs that you want to apply currency conversion to"
  allowed_values ["AWS", "Azure", "Google Cloud"]
end

parameter "param_currency_from" do
  type "string"
  label "Currency From"
  description "Currency you want to convert from (based on ISO 4217 codes - e.g., 'USD' for US Dollar)"
end

parameter "param_currency_to" do
  type "string"
  label "Currency To"
  description "Currency you want to convert to (based on ISO 4217 codes - e.g., 'EUR' for Euro)"
end

###############################################################################
# Authentication
###############################################################################

#AUTHENTICATION WITH XE.COM
credentials "xe_auth" do
  schemes "basic"
  label "XE_API"
  description "Select the xe_auth credential from the list."
  tags "provider=xe"
end

#AUTHENTICATION WITH FLEXERA/OPTIMA
credentials "auth_flexera" do
  schemes "oauth2"
  label "flexera"
  description "Select Flexera One OAuth2 credentials"
  tags "provider=flexera"
end

###############################################################################
# Datasources & Scripts
###############################################################################

#GET CURRENT AND PREVIOUS MONTH
datasource "ds_date" do
  run_script $js_get_date
end

script "js_get_date", type: "javascript" do
  result "result"
  code <<-EOS
    var date = new Date()
    var current_date = date.toISOString().split("T")
    var current_month = current_date[0].split("-")[0] + "-" + current_date[0].split("-")[1]
    date.setMonth(date.getMonth() - 1)
    var previous_date = date.toISOString().split("T")
    var previous_month = previous_date[0].split("-")[0] + "-" + previous_date[0].split("-")[1]
    var result = { 
      "previousMonth": previous_month,
      "currentMonth": current_month 
    }
  EOS
end

#GET XE.COM DAILY RATE
datasource "ds_xe_monthly_average" do
  request do
    auth $xe_auth
    host "xecdapi.xe.com"
    path "/v1/monthly_average"
    query "from", $param_currency_from
    query "to", $param_currency_to
    query "amount", "1"
    query "year", first(split(val($ds_date,"previousMonth"),"-"))
    query "month", last(split(val($ds_date,"previousMonth"),"-"))
  end
end

#GET CURRENT ADJUSTMENTS
datasource "ds_current_adjustments" do
  request do
    auth $auth_flexera
    host rs_optima_host
    path join(["/bill-analysis/orgs/", rs_org_id, "/adjustments/"])
    header "User-Agent", "RS Policies"
  end
end


#CREATE UPDATED ADJUSTMENTS
datasource "ds_updated_adjustments" do
  run_script $js_update_adjustments, $ds_xe_monthly_average, $ds_current_adjustments, $ds_date, $param_cloud_provider, $param_currency_from, $param_currency_to
end

script "js_update_adjustments", type: "javascript" do
  parameters "xe_monthly_average", "ds_adjustments", "ds_date", "param_cloud_provider", "param_currency_from", "param_currency_to"
  result "result"
  code <<-EOS
    //Get conversion rate (monthly average)
    var conversion_rate = xe_monthly_average.to[param_currency_to][0].monthlyAverage

    //Cloud provider
    if( param_cloud_provider == "Google Cloud" ){ param_cloud_provider = "GCP" }
    
    //Create currency coversion adjustment rule
    new_adj_name = "Currency Conversion - " + param_cloud_provider

    currency_conversion_rule = {
      "name": new_adj_name,
      "rules": [
        {
          "condition": {
            "type": "or",
            "expressions": [
              {
                "type": "dimension_equals",
                "dimension": "vendor",
                "value": param_cloud_provider
              }
            ]
          },
          "cost_multiplier": conversion_rate - 1,
          "label": param_currency_from + " to " + param_currency_to
        }
      ]
    }
    
    //Get adjustment list for current month (as this is the one that needs to be modified) if it exists
    var current_effective_at_month = ds_date.currentMonth
    var dated_adjustment_lists = ds_adjustments.dated_adjustment_lists
    
    var current_adjustment_list = _.find(dated_adjustment_lists, function(adj_list){
      return adj_list.effective_at == current_effective_at_month
    })

    var new_adjustment_list = {}

    //If adjustment list does not exist for current month, create a new adjustment object
    if( current_adjustment_list == undefined ){
      new_adjustment_list = {
        "adjustment_list": [ currency_conversion_rule ],
        "effective_at": current_effective_at_month
      }
    }
    //If adjustment list already exists for current month, edit the existing adjustment object
    else {

      //Check if a Currency Conversion adjustment rule already exists for current month
      adj_name = _.find(current_adjustment_list.adjustment_list, function(list){ return list.name == new_adj_name })
      console.log(adj_name)
      
      //If Currency Conversion rule does not exist for current month, add CC rule to existing adjustment object
      if( adj_name == undefined ){
        var adjustment_list = [] 
        _.each(current_adjustment_list.adjustment_list, function(list){
          adjustment_list.push( list )
        })
        adjustment_list.push( currency_conversion_rule )
        new_adjustment_list = { 
          "adjustment_list": adjustment_list,
          "effective_at": current_adjustment_list.effective_at,
          "updated_at": current_adjustment_list.updated_at
        }
      } 
      //If Currency Conversion rule does already exist for current month, remove current CC adjustment rule, and add new CC rule
      else {
        var adjustment_list = [] 
        _.each(current_adjustment_list.adjustment_list, function(list){
          if( list.name != new_adj_name ){
            adjustment_list.push( list )
          }
        })
        //
        adjustment_list.push( currency_conversion_rule )
        new_adjustment_list = { 
          "adjustment_list": adjustment_list,
          "effective_at": current_adjustment_list.effective_at,
          "updated_at": current_adjustment_list.updated_at
        }
      }
    }

    //Reject adjustments for current month (if exists) from existing adjustment lists object
    var new_dated_adjustment_list = { "dated_adjustment_lists": [] }
    new_dated_adjustment_list.dated_adjustment_lists = _.reject(ds_adjustments.dated_adjustment_lists, function(adj_list){ return adj_list.effective_at == current_effective_at_month })
    
    //And replace with new adjustments for current month
    new_dated_adjustment_list.dated_adjustment_lists.push( new_adjustment_list )
    
    result = { "new_adjustment_list": JSON.stringify(new_dated_adjustment_list) }  
  EOS
end

#UPDATE CURRENT ADJUSTMENT RULES WITH NEW ADJUSTMENT RULES
datasource "ds_new_adjustments" do
  request do
    auth $auth_flexera
    host rs_optima_host
    verb "PUT"
    path join(["/bill-analysis/orgs/", rs_org_id, "/adjustments/"])
    header "content-type", "application/json"
    header "User-Agent", "RS Policies"
    body val($ds_updated_adjustments, "new_adjustment_list")
  end
end

###############################################################################
# Policy
###############################################################################

policy "policy_currency_conversion_daily_rates" do
  validate $ds_new_adjustments do
    summary_template "Currency Conversion - {{ parameters.param_cloud_provider }} - {{ parameters.param_currency_from }} to {{ parameters.param_currency_to }}"
    detail_template "Adjustments Uploaded"
    check eq(0,1)
  end
end

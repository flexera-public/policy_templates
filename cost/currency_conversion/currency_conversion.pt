name "Currency Conversion"
rs_pt_ver 20180301
type "policy"
short_description "A policy that creates an adjustment rule that converts the currency of the cost of the Cloud Vendor of choice. It utilizes xe.com to retrieve the latest exchange rates. See the [README](https://github.com/flexera-public/policy_templates/tree/master/cost/currency_conversion/) and [docs.flexera.com/flexera/EN/Automation](https://docs.flexera.com/flexera/EN/Automation/AutomationGS.htm) to learn more."
long_description ""
severity "low"
default_frequency "monthly"
category "Cost"
info(
  version: "2.0",
  provider: "",
  service: "",
  policy_set: ""
)

###############################################################################
# Parameters
###############################################################################

parameter "param_email" do
  type "list"
  category "Policy Settings"
  label "Email Addresses"
  description "Email addresses of the recipients you wish to notify when currency conversion adjustment rules are updated."
  default []
end

parameter "param_cloud_provider" do
  type "string"
  category "Policy Settings"
  label "Cloud Provider"
  description "Cloud provider costs that you want to apply currency conversion to. Select 'Other' to specify the name of a cloud provider manually."
  allowed_values "AWS", "Azure", "Google Cloud", "Oracle Cloud", "Other"
  default "AWS"
end

parameter "param_cloud_provider_name" do
  type "string"
  category "Policy Settings"
  label "Cloud Provider Name"
  description "Name of the cloud provider to apply currency conversion to. Only applicable if 'Other' is selected for Cloud Provider."
  default ""
end

parameter "param_currency_from" do
  type "string"
  category "Currency"
  label "Currency From"
  description "Currency you want to convert from (based on ISO 4217 codes - e.g. 'USD' for US Dollar)"
  default "USD"
end

parameter "param_currency_to" do
  type "string"
  category "Currency"
  label "Currency To"
  description "Currency you want to convert to (based on ISO 4217 codes - e.g. 'EUR' for Euro)"
  default "USD"
end

###############################################################################
# Authentication
###############################################################################

credentials "auth_flexera" do
  schemes "oauth2"
  label "Flexera"
  description "Select Flexera One OAuth2 credentials"
  tags "provider=flexera"
end

###############################################################################
# Datasources & Scripts
###############################################################################

datasource "ds_date" do
  run_script $js_date
end

script "js_date", type: "javascript" do
  result "result"
  code <<-EOS
  date = new Date()
  current_date = date.toISOString().split("T")
  current_month = current_date[0].split("-")[0] + "-" + current_date[0].split("-")[1]

  date.setMonth(date.getMonth() - 1)
  previous_date = date.toISOString().split("T")
  previous_month = previous_date[0].split("-")[0] + "-" + previous_date[0].split("-")[1]

  result = {
    previousMonth: previous_month,
    currentMonth: current_month
  }
EOS
end

datasource "ds_xe_monthly_average" do
  request do
    host "api.xe-auth.flexeraeng.com"
    path "/prod/{proxy+}"
    query "from", $param_currency_from
    query "to", $param_currency_to
    query "amount", "1"
    query "year", first(split(val($ds_date, "previousMonth"), "-"))
    query "month", last(split(val($ds_date, "previousMonth"), "-"))
  end
end

datasource "ds_current_adjustments" do
  request do
    auth $auth_flexera
    host rs_optima_host
    path join(["/bill-analysis/orgs/", rs_org_id, "/adjustments/"])
    header "User-Agent", "RS Policies"
  end
end

datasource "ds_updated_adjustments" do
  run_script $js_update_adjustments, $ds_xe_monthly_average, $ds_current_adjustments, $ds_date, $param_cloud_provider, $param_cloud_provider_name, $param_currency_from, $param_currency_to
end

script "js_update_adjustments", type: "javascript" do
  parameters "ds_xe_monthly_average", "ds_adjustments", "ds_date", "param_cloud_provider", "param_cloud_provider_name", "param_currency_from", "param_currency_to"
  result "result"
  code <<-EOS
  // Get conversion rate (monthly average)
  conversion_rate = ds_xe_monthly_average.to[param_currency_to][0].monthlyAverage

  // Cloud provider
  cloud_provider = param_cloud_provider
  if (param_cloud_provider == "Google Cloud") { cloud_provider = "GCP" }
  if (param_cloud_provider == "Other") { cloud_provider = param_cloud_provider_name }

  // Create currency coversion adjustment rule
  new_adj_name = "Currency Conversion - " + cloud_provider

  currency_conversion_rule = {
    name: new_adj_name,
    rules: [
      {
        condition: {
          type: "dimension_equals",
          dimension: "vendor",
          value: cloud_provider
        },
        cost_multiplier: conversion_rate - 1,
        label: param_currency_from + " to " + param_currency_to
      }
    ]
  }

  // Get adjustment list for current month (as this is the one that needs to be modified) if it exists
  current_effective_at_month = ds_date['currentMonth']
  dated_adjustment_lists = ds_adjustments['dated_adjustment_lists']

  current_adjustment_list = _.find(dated_adjustment_lists, function(adj_list) {
    return adj_list['effective_at'] == current_effective_at_month
  })

  // Set new adjustment list to our currency conversion rule generated above
  adjustment_list = [ currency_conversion_rule ]

  // If adjustments exist for current month, add our rule to them
  if (current_adjustment_list != undefined) {
    // Check if a Currency Conversion adjustment rule already exists for current month
    adj_name = _.find(current_adjustment_list['adjustment_list'], function(list) {
      return list['name'] == new_adj_name
    })

    // Add CC rule to existing rules while filtering for existing CC rules
    adjustment_list = _.filter(current_adjustment_list['adjustment_list'], function(list) {
      // Return 'true' for all items if we did not find an existing CC rule
      return list['name'] != new_adj_name || adj_name == undefined
    })

    adjustment_list.push(currency_conversion_rule)
  }

  new_adjustment_list = {
    adjustment_list: adjustment_list,
    effective_at: current_effective_at_month
  }

  // Reject adjustments for current month (if exists) from existing adjustment lists object
  new_adjustments = _.reject(ds_adjustments['dated_adjustment_lists'], function(list) {
    return list['effective_at'] == current_effective_at_month
  })

  new_adjustments.push(new_adjustment_list)

  result = { new_adjustment_list: JSON.stringify({ dated_adjustment_lists: new_adjustments }) }
EOS
end

#UPDATE CURRENT ADJUSTMENT RULES WITH NEW ADJUSTMENT RULES
datasource "ds_new_adjustments" do
  request do
    auth $auth_flexera
    host rs_optima_host
    verb "PUT"
    path join(["/bill-analysis/orgs/", rs_org_id, "/adjustments/"])
    header "content-type", "application/json"
    header "User-Agent", "RS Policies"
    body val($ds_updated_adjustments, "new_adjustment_list")
  end
end

###############################################################################
# Policy
###############################################################################

policy "pol_currency_conversion_daily_rates" do
  validate $ds_new_adjustments do
    summary_template "Currency Conversion - {{ parameters.param_cloud_provider }} - {{ parameters.param_currency_from }} to {{ parameters.param_currency_to }}"
    detail_template "Adjustments Uploaded"
    check eq(0, 1)
  end
end

name "Billing Center Cost Anomalies"
rs_pt_ver 20180301
type "policy"
short_description "Analyze all Billing Centers for a specified number of days and raise an incident if the percentage of spend (compared to the previous period of the same number of days) has surpassed the defined threshold. See the [README](https://github.com/rightscale/policy_templates/tree/master/cost/billing_center_cost_anomaly/) and [docs.flexera.com/flexera/EN/Automation](https://docs.flexera.com/flexera/EN/Automation/AutomationGS.htm) to learn more."
long_description ""
severity "high"
category "Cost"
tenancy "single"
default_frequency "daily"
info(
  version: "1.11",
  provider: "Flexera Optima",
  service: "",
  policy_set:""
)

###############################################################################
# Permissions
###############################################################################

###############################################################################
# Parameters
###############################################################################

parameter "param_days" do
  label "Time Period"
  description "Number of days to analyze"
  type "number"
  default 6
  min_value 1
  max_value 31
end

parameter "param_threshold" do
  label "Anomaly Threshold"
  description "Percentage change in spend that will trigger incidents"
  type "number"
  default 80
end

parameter "param_min_spend" do
  label "Minimum Period Spend"
  description "Minimum spend for the specified period required to trigger incidents"
  type "number"
  default 1000
  min_value 0
end

parameter "param_cost_metric" do
  type "string"
  label "Cost Metric"
  allowed_values "Unamortized Unblended","Amortized Unblended","Unamortized Blended","Amortized Blended"
  default "Unamortized Unblended"
  description "Select the cost metric for your report.  See the README file for more details"
end

parameter "param_billing_centers" do
  type "list"
  label "Billing Center List"
  description "List of Billing Center names you want to report on.  Leave blank to select all Billing Centers."
end

parameter "param_email" do
  label "Email addresses of the recipients you wish to notify"
  type "list"
end

###############################################################################
# Authentication
###############################################################################

auth "auth_rs", type: "rightscale"

###############################################################################
# Resources
###############################################################################

###############################################################################
# Datasources
###############################################################################

datasource "ds_currency_reference" do
  request do
    host "raw.githubusercontent.com"
    path "/rightscale/policy_templates/master/cost/scheduled_reports/currency_reference.json"
    header "User-Agent", "RS Policies"
  end
end

datasource "ds_currency_code" do
  request do
    auth $auth_rs
    host rs_optima_host
    path join(["/bill-analysis/orgs/",rs_org_id,"/settings/currency_code"])
    header "Api-Version", "0.1"
    header "User-Agent", "RS Policies"
  end
  result do
    encoding "json"
    field "id", jmes_path(response,"id")
    field "value", jmes_path(response,"value")
  end
end

datasource "billing_centers" do
  request do
    auth $auth_rs
    host rs_optima_host
    path join(["/analytics/orgs/",rs_org_id,"/billing_centers"])
    header "Api-Version", "1.0"
    header "User-Agent", "RS Policies"
    query "view", "allocation_table"
  end
  result do
    encoding "json"
    collect jmes_path(response,"[*]") do
      field "href", jmes_path(col_item,"href")
      field "id", jmes_path(col_item,"id")
      field "name", jmes_path(col_item,"name")
      field "parent_id", jmes_path(col_item,"parent_id")
      field "ancestor_ids", jmes_path(col_item,"ancestor_ids")
      field "allocation_table", jmes_path(col_item,"allocation_table")
    end
  end
end

datasource "ds_listed_billing_centers" do
  run_script $js_listed_billing_centers, $param_billing_centers, $billing_centers
end

datasource "new_bc_costs" do
  request do
    run_script $new_costs_request,rs_optima_host,rs_org_id,$ds_listed_billing_centers,$param_cost_metric,$param_days
  end
  result do
    encoding "json"
    collect jmes_path(response,"rows[*]") do
      field "name", val(iter_item, "name")
      field "cost_amortized_unblended_adj", jmes_path(col_item,"metrics.cost_amortized_unblended_adj")
      field "cost_amortized_blended_adj", jmes_path(col_item,"metrics.cost_amortized_blended_adj")
      field "cost_nonamortized_unblended_adj", jmes_path(col_item,"metrics.cost_nonamortized_unblended_adj")
      field "cost_nonamortized_blended_adj", jmes_path(col_item,"metrics.cost_nonamortized_blended_adj")
      field "id", jmes_path(col_item,"dimensions.billing_center_id")
      field "timestamp", jmes_path(col_item,"timestamp")
    end
  end
end

###############################################################################
# Scripts
###############################################################################

script "js_listed_billing_centers", type: "javascript" do
  parameters "param_billing_centers","billing_centers"
  result "billing_center_list"
  code <<-EOS
    var billing_center_list = [];

    function GetSortOrder(prop) {
      return function(a, b) {
        if (a[prop] > b[prop]) {
          return 1;
        } else if (a[prop] < b[prop]) {
          return -1;
        }
        return 0;
      }
    }

    if (param_billing_centers.length === 0){
      _.map(billing_centers, function(value, key){
        billing_center_list.push(value);
      });
    } else {
      billing_center_names = _.map(param_billing_centers, function(name){ return name.toLowerCase(); });
      _.compact(_.map(billing_centers, function(value){
        if(_.contains(billing_center_names, value.name.toLowerCase())){
          billing_center_list.push(value);
        }
      }));
    }

    billing_center_list.sort(GetSortOrder("name"));
  EOS
end

script "new_costs_request", type: "javascript" do
  parameters "rs_optima_host", "org_id","bc_ids","param_cost_metric","param_days"
  result "request"
  code <<-EOS
    var start_at = "";
    var end_at = "";
    var cost_metric = {
      "Unamortized Unblended":"cost_nonamortized_unblended_adj",
      "Amortized Unblended":"cost_amortized_unblended_adj",
      "Unamortized Blended": "cost_nonamortized_blended_adj",
      "Amortized Blended":"cost_amortized_blended_adj"
    }

    // format the date for the `daily` API
    // returns date formatted as string: YYYY-mm-dd
    function getFormattedDailyDate(date) {
      var year = date.getFullYear();
      var month = (1 + date.getMonth()).toString();
      month = month.length > 1 ? month : '0' + month;
      var day = date.getDate().toString();
      day = day.length > 1 ? day : '0' + day;
      return year + '-' + month + '-' + day;
    }

    function getStartDate( date ) {
      var days = 2 + param_days ;
      date.setHours(-24 * days);
      return date;
    }

    function getEndDate( date ) {
      date.setHours(-48);
      return date;
    }

    billingIDs = []
    _.each(bc_ids, function(bCenter){
      billingIDs.push(bCenter.id)
    })

    start_at = getFormattedDailyDate(getStartDate(new Date()))
    end_at = getFormattedDailyDate(getEndDate(new Date()))

    var request = {
      auth: "auth_rs",
      verb: "POST",
      host: rs_optima_host,
      path: "/bill-analysis/orgs/" + org_id + "/anomalies/report",
      body_fields: {
        "dimensions": ["billing_center_id"],
        "granularity": "day",
        "metrics": cost_metric[param_cost_metric],
        "billingCenterIds": billingIDs,
        "start_at": start_at,
        "end_at": end_at
      },
      headers: {
        "Api-Version": "1.0",
        "User-Agent": "RS Policies",
      }
    }
  EOS
end

###############################################################################
# Escalations
###############################################################################

escalation "esc_budget_alert" do
  automatic true
  label "Send Email"
  description "Send incident email"
  email $param_email
end

###############################################################################
# Policy
###############################################################################

policy "budget_alert" do
  validate_each $new_bc_costs do
    summary_template "Cost Anomaly Detected"
    detail_template <<-EOS
      ## Billing Centers:
    EOS
    escalate $esc_budget_alert
    check eq(1,0)
    export do
      resource_level true
      field "name" do
        label "Billing Center Name"
        path "name"
      end
      field "new_sum" do
        label "Latest Period"
        path "new_sum"
      end
      field "old_sum" do
        label "Previous Period"
        path "old_sum"
      end
      field "per_change" do
        label "Percent Change"
        path "per_change"
      end
      field "id" do
        label "Billing Center ID"
        path "id"
      end
    end
  end
end

###############################################################################
# Cloud Workflow
###############################################################################

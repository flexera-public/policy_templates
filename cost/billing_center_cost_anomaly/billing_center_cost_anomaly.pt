name "Billing Center Cost Anomalies"
rs_pt_ver 20180301
type "policy"
short_description "Analyze all Billing Centers for a specified number of days and raise an incident if the percentage of spend (compared to the previous period of the same number of days) has surpassed the defined threshold. See the [README](https://github.com/rightscale/policy_templates/tree/master/cost/billing_center_cost_anomaly/) and [docs.rightscale.com/policies](http://docs.rightscale.com/policies/) to learn more."
long_description "Version: 1.1"
severity "high"
category "Cost"
tenancy "single"

parameter "param_days" do 
  label "Time Period"
  description "Number of days to analyze"
  type "number"
  default 6
  min_value 1
  max_value 31
end 

parameter "param_threshold" do 
  label "Anomaly Threshold"
  description "Percentage change in spend that will trigger incidents"
  type "number"
  default 80
end 

parameter "param_cost_metric" do
  type "string"
  label "Cost Metric"
  allowed_values "Unamortized Unblended","Amortized Unblended","Unamortized Blended","Amortized Blended"
  default "Unamortized Unblended"
  description "Select the cost metric for your report.  See the README file for more details"
end


parameter "param_email" do
  label "Email addresses of the recipients you wish to notify"
  type "list"
end

auth "auth_rs", type: "rightscale"

datasource "billing_centers" do
  request do
    auth $auth_rs
    host rs_optima_host
    path join(["/analytics/orgs/",rs_org_id,"/billing_centers"])
    header "Api-Version", "1.0"
    header "User-Agent", "RS Policies"
    query "view", "allocation_table"
  end
  result do
    encoding "json"
    collect jmes_path(response,"[*]") do
      field "href", jmes_path(col_item,"href")
      field "id", jmes_path(col_item,"id")
      field "name", jmes_path(col_item,"name")
      field "parent_id", jmes_path(col_item,"parent_id")
      field "ancestor_ids", jmes_path(col_item,"ancestor_ids")
      field "allocation_table", jmes_path(col_item,"allocation_table")
    end
  end
end

datasource "new_bc_costs" do
  iterate $billing_centers
  request do
    run_script $new_costs_request,rs_org_id,val(iter_item,"id"),$param_cost_metric,$param_days
  end 
  result do
    encoding "json"
    collect jmes_path(response,"rows[*]") do
      field "name", val(iter_item, "name")
      field "cost_amortized_unblended_adj", jmes_path(col_item,"metrics.cost_amortized_unblended_adj")
      field "cost_amortized_blended_adj", jmes_path(col_item,"metrics.cost_amortized_blended_adj")
      field "cost_nonamortized_unblended_adj", jmes_path(col_item,"metrics.cost_nonamortized_unblended_adj")
      field "cost_nonamortized_blended_adj", jmes_path(col_item,"metrics.cost_nonamortized_blended_adj")
      field "id", jmes_path(col_item,"dimensions.billing_center_id")
      field "timestamp", jmes_path(col_item,"timestamp")
    end
  end
end

script "new_costs_request", type: "javascript" do
  parameters "org_id","bc_id","param_cost_metric","param_days"
  result "request"
  code <<-EOS
    var start_at = "";
    var end_at = "";
    var cost_metric = {
      "Unamortized Unblended":"cost_nonamortized_unblended_adj",
      "Amortized Unblended":"cost_amortized_unblended_adj",
      "Unamortized Blended": "cost_nonamortized_blended_adj",
      "Amortized Blended":"cost_amortized_blended_adj"
    }

    // format the date for the `daily` API
    // returns date formatted as string: YYYY-mm-dd
    function getFormattedDailyDate(date) {
      var year = date.getFullYear();
      var month = (1 + date.getMonth()).toString();
      month = month.length > 1 ? month : '0' + month;
      var day = date.getDate().toString();
      day = day.length > 1 ? day : '0' + day;
      return year + '-' + month + '-' + day;
    }

    function getStartDate( date ) {
      var days = 2 + param_days ;
      date.setHours(-24 * days);
      return date;
    }

    function getEndDate( date ) {
      date.setHours(-48);
      return date;
    }

    start_at = getFormattedDailyDate(getStartDate(new Date())) 
    end_at = getFormattedDailyDate(getEndDate(new Date())) 

    var request = {
      auth: "auth_rs",
      verb: "POST",
      host: "optima.rightscale.com",
      path: "/bill-analysis/orgs/" + org_id + "/costs/aggregated",
      body_fields: {
        "dimensions": ["billing_center_id"],
        "granularity": "day",
        "metrics": [cost_metric[param_cost_metric]],
        "billing_center_ids": [bc_id],
        "start_at": start_at,
        "end_at": end_at
      },
      headers: {
        "Api-Version": "1.0",
        "User-Agent": "RS Policies",
      }
    } 
  EOS
end

datasource "old_bc_costs" do
  iterate $billing_centers
  request do
    run_script $old_costs_request,rs_org_id,val(iter_item,"id"),$param_cost_metric,$param_days
  end 
  result do
    encoding "json"
    collect jmes_path(response,"rows[*]") do
      field "name", val(iter_item, "name")
      field "cost_amortized_unblended_adj", jmes_path(col_item,"metrics.cost_amortized_unblended_adj")
      field "cost_amortized_blended_adj", jmes_path(col_item,"metrics.cost_amortized_blended_adj")
      field "cost_nonamortized_unblended_adj", jmes_path(col_item,"metrics.cost_nonamortized_unblended_adj")
      field "cost_nonamortized_blended_adj", jmes_path(col_item,"metrics.cost_nonamortized_blended_adj")
      field "id", jmes_path(col_item,"dimensions.billing_center_id")
      field "timestamp", jmes_path(col_item,"timestamp")
    end
  end
end

script "old_costs_request", type: "javascript" do
  parameters "org_id","bc_id","param_cost_metric","param_days"
  result "request"
  code <<-EOS
    var start_at = "";
    var end_at = "";
    var cost_metric = {
      "Unamortized Unblended":"cost_nonamortized_unblended_adj",
      "Amortized Unblended":"cost_amortized_unblended_adj",
      "Unamortized Blended": "cost_nonamortized_blended_adj",
      "Amortized Blended":"cost_amortized_blended_adj"
    }

    // format the date for the `daily` API
    // returns date formatted as string: YYYY-mm-dd
    function getFormattedDailyDate(date) {
      var year = date.getFullYear();
      var month = (1 + date.getMonth()).toString();
      month = month.length > 1 ? month : '0' + month;
      var day = date.getDate().toString();
      day = day.length > 1 ? day : '0' + day;
      return year + '-' + month + '-' + day;
    }

    function getStartDate( date ) {
      var days = 2 * param_days ;
      days = days + 2
      date.setHours(-24 * days);
      return date;
    }

    function getEndDate( date ) {
      var days = 2 + param_days ;
      date.setHours(-24 * days);
      return date;
    }

    start_at = getFormattedDailyDate(getStartDate(new Date())) 
    end_at = getFormattedDailyDate(getEndDate(new Date())) 

    var request = {
      auth: "auth_rs",
      verb: "POST",
      host: "optima.rightscale.com",
      path: "/bill-analysis/orgs/" + org_id + "/costs/aggregated",
      body_fields: {
        "dimensions": ["billing_center_id"],
        "granularity": "day",
        "metrics": [cost_metric[param_cost_metric]],
        "billing_center_ids": [bc_id],
        "start_at": start_at,
        "end_at": end_at
      },
      headers: {
        "Api-Version": "1.0",
        "User-Agent": "RS Policies",
      }
    } 
  EOS
end

datasource "format_costs" do
  run_script $js_format_costs, $old_bc_costs, $new_bc_costs, $param_cost_metric
end

script "js_format_costs", type: "javascript" do
  parameters "bc_costs","new_bc_costs","param_cost_metric"
  result "formatted_data"
  code <<-EOS
  var cost_metric = {
    "Unamortized Unblended":"cost_nonamortized_unblended_adj",
    "Amortized Unblended":"cost_amortized_unblended_adj",
    "Unamortized Blended": "cost_nonamortized_blended_adj",
    "Amortized Blended":"cost_amortized_blended_adj"
  }

  var type = cost_metric[param_cost_metric]; 
  console.log(type)

  var formatted_data = [];
  var bcs = [];
  
  _.each(bc_costs, function(bcc){bcs.push(bcc.id)})
  console.log(bcs)
  bcs = _.uniq(bcs) ;
  console.log(bcs)
  
  _.each(bcs, function(bc_id){
    var bc_cost_objs = _.reject(bc_costs, function(bc_cost){ return bc_cost.id != bc_id });
    console.log(bc_cost_objs)
    var costs = [];
    _.each(bc_cost_objs, function(cost){costs.push(cost[type])}) 
    var sum = _.reduce(costs, function(memo, num){ return memo + num; }, 0)

    var new_bc_cost_objs = _.reject(new_bc_costs, function(new_bc_cost){ return new_bc_cost.id != bc_id });
    console.log(new_bc_cost_objs)
    var new_costs = [];
    _.each(new_bc_cost_objs, function(cost){new_costs.push(cost[type])}) 
    var new_sum = _.reduce(new_costs, function(memo, num){ return memo + num; }, 0)

    var per_change = new_sum / sum ;
    per_change = per_change-1
    per_change = per_change * 100

    formatted_data.push({
      name: bc_cost_objs[0]["name"],
      id: bc_id,
      old_sum: (Math.round(sum * 100) / 100).toString(10),
      new_sum: (Math.round(new_sum * 100) / 100).toString(10),
      per_change: (Math.round(per_change * 100) / 100).toString(10) + "%",
      percent: per_change
    })
  })
EOS
end

escalation "esc_budget_alert" do
  email $param_email
end

policy "budget_alert" do
  validate_each $format_costs do
    summary_template "Cost Anomaly Detected"
    detail_template <<-EOS
# Cost Anomaly Detected

| Billing Center Name | Latest Period | Previous Period | Percent Change | Billing Center ID |
| ------------------- | ------------- | --------------- | -------------- | ----------------- |
{{ range data -}}
| {{.name}} | {{.new_sum}} | {{.old_sum}} | {{.per_change}} | {{.id}} 
{{ end -}}

EOS
    escalate $esc_budget_alert
    check lt(val(item,"percent"),$param_threshold)
  end 
end
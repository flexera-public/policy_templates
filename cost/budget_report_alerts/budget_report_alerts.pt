name "Budget Alerts"
rs_pt_ver 20180301
type "policy"
short_description "Create a Monthly Budget Alert for a selected Budget or for the entire Organization. See the [README](https://github.com/flexera-public/policy_templates/tree/master/cost/budget_report_alerts/) and [docs.flexera.com/flexera/EN/Automation](https://docs.flexera.com/flexera/EN/Automation/AutomationGS.htm) to learn more."
severity "medium"
category "Cost"
tenancy "single"
default_frequency "daily"

info(
  version: "1.0",
  provider: "Flexera Optima",
  service: "",
  policy_set: ""
)

parameter "param_budget_name_id" do
  label "Budget Name or ID"
  description "Provide the name or id of a Budget if the report scope is 'Budget'. Leave it blank for 'Organization' scope"
  type "string"
end

parameter "param_granularity" do
  label "Granularity"
  type "string"
  default "Monthly"
  allowed_values "Monthly", "Summarized"
  description "Report granularity"
end

parameter "param_start_date" do
  label "Start date (yyyy-mm). Leave it blank to check only the last month"
  description "Provide the year and month to start tracking"
  type "string"
end

parameter "param_threshold_percentage" do
  label "Threshold Percentage"
  type "number"
  description "Percentage of budget amount to alert on"
  default 90
end

parameter "param_dimensions" do
  type "list"
  label "Dimensions"
  allowed_values "vendor", "service"
  description "List of dimension groups for the policy"
end

parameter "param_email" do
  label "Email addresses"
  type "list"
  description "A list of email addresses to notify"
end

credentials "auth_flexera" do
  schemes "oauth2"
  label "flexera"
  description "Select Flexera One OAuth2 credentials"
  tags "provider=flexera"
end



datasource "ds_currency_reference" do
  request do
    host "raw.githubusercontent.com"
    path "/rightscale/policy_templates/master/cost/scheduled_reports/currency_reference.json"
    header "User-Agent", "RS Policies"
  end
end

datasource "ds_currency_code" do
  request do
    auth $auth_flexera
    host rs_optima_host
    path join(["/bill-analysis/orgs/",rs_org_id,"/settings/currency_code"])
    header "Api-Version", "0.1"
    header "User-Agent", "RS Policies"
  end
  result do
    encoding "json"
    field "id", jmes_path(response,"id")
    field "value", jmes_path(response,"value")
  end
end

datasource "ds_budgets" do
  request do
    auth $auth_flexera
    host rs_optima_host
    path join(["/bill-analysis/v0/orgs/",rs_org_id,"/budgets"])
    header "Api-Version", "1.0"
    header "User-Agent", "RS Policies"
  end
  result do
    encoding "json"
    collect jmes_path(response,"[*]") do
      field "id", jmes_path(col_item,"id")
      field "name", jmes_path(col_item,"name")
      field "metric", jmes_path(col_item,"metric")
      field "dimensions", jmes_path(col_item,"dimensions")
      field "budgetYearMonths", jmes_path(col_item,"budgetYearMonths")
    end
  end
end

datasource "ds_filtered_budgets" do
  run_script $js_filter_budgets, $ds_budgets, $param_budget_name_id
end

#
script "js_filter_budgets", type: "javascript" do
  parameters "budgets", "budget_name_id"
  result "results"
  code <<-EOS
  var currDate = new Date();
  var results =
    _.filter(budgets, function(b){
      b.start_date = Date.now();
      b.end_date = 0;
      var has_curr_month = _.some(b.budgetYearMonths, function (yearMonth) {
        var curr = currDate.getFullYear() + '-' + (currDate.getMonth()+1);
        b.start_date = Math.min(b.start_date, Date.parse(yearMonth))
        b.end_date = Math.max(b.end_date, Date.parse(yearMonth))
        return yearMonth == curr
      })
      return (!budget_name_id || b.name == budget_name_id || b.id == budget_name_id) && has_curr_month;
    });
EOS
end

datasource "ds_reports" do
  iterate $ds_filtered_budgets
  request do
    run_script $report_request, rs_optima_host, rs_org_id, $param_start_date, $param_granularity, $param_dimensions, iter_item
  end
  result do
    encoding "json"
    collect jmes_path(response,"[*]") do
      field "name", val(iter_item, "name")
      field "metric", val(iter_item, "metric")
      field "timestamp", jmes_path(col_item,"timestamp")
      field "dimensions", jmes_path(col_item,"dimensions")
      field "budgetAmount", jmes_path(col_item,"metrics.budgetAmount")
      field "spendAmount", jmes_path(col_item,"metrics.spendAmount")
    end
  end
end

script "report_request", type: "javascript" do
  parameters "rs_optima_host", "org","start_date","granularity", "dimensions", "budget"
  result "request"
  code <<-EOS
  var current = new Date();
  if (!start_date) {
    start_date = current.getFullYear() + '-' + ('0' + (current.getMonth()+1)).slice(-2);
  } else {
    var start = new Date(Math.max(Date.parse(start_date), budget.start_date))
    start_date = start.getFullYear() + '-' + ('0' + (start.getMonth()+1)).slice(-2);
  }
  current.setMonth(current.getMonth()+1);
  var end_date = current.getFullYear() + '-' + ('0' + (current.getMonth()+1)).slice(-2);

  var request = {
    auth: "auth_flexera",
    host: rs_optima_host,
    verb: "POST",
    path: "/bill-analysis/v0/orgs/" + org + "/budgets/" + budget.id + "/report",
    body_fields: {
      "dimensions": dimensions,
      "endAt": end_date,
      "startAt": start_date,
      "includeUnbudgeted": false,
      "summarized": granularity == 'Summarized',
    },
    headers: {
      "User-Agent": "RS Policies",
      "Api-Version": "1.0"
    }
  }
  EOS
end


datasource "ds_aggregated" do
  run_script $js_aggregated, $ds_reports, $ds_currency_code, $ds_currency_reference, $param_threshold_percentage
end


script "js_aggregated", type: "javascript" do
  parameters "reports", "currency_code", "currency_reference", "threshold_percent"
  result "results"
  code <<-EOS
  var results = {
    exceeded: [],
    forecasted: [],
  }
  var currency = currency_code.value || '';
  var ref = currency ? currency_reference[currency] : undefined;
  if (ref) {
    currency = ref.symbol || "";
  }

  function forecasted(curr) {
    var now = new Date();
    var day = now.getUTCDate();
    var days = new Date(now.getFullYear(), now.getMonth() + 1, 0).getDate()
    return curr / day * days
  }

  _.each(reports, function (item) {
    if (item.budgetAmount && item.spendAmount) {
      item.forecasted = "";
      item.forecastedAmount = item.spendAmount;
      var date = new Date(item.timestamp);
      item.date = date.toLocaleDateString();
      var now = new Date();
      if (date.getFullYear() == now.getFullYear() && date.getMonth() == now.getMonth()) {
        item.forecastedAmount = Math.round(forecasted(item.spendAmount) * 100) / 100;
        item.forecasted = item.forecastedAmount;
      }

      item.budgetAmount = Math.round(item.budgetAmount * 100) / 100;
      item.spendAmount = Math.round(item.spendAmount * 100) / 100;
      item.overBudgetAmount = Math.max(0, Math.round((item.spendAmount - item.budgetAmount) * 100) / 100);
      item.spentPercent = Math.round(item.spendAmount / item.budgetAmount * 100)
      item.overBudgetAmountForec = Math.max(0, Math.round((item.forecastedAmount - item.budgetAmount) * 100) / 100);
      item.spentPercentForec = Math.round(item.forecastedAmount / item.budgetAmount * 100)

      // values for export
      item.budget = item.budgetAmount;
      item.spend = item.spendAmount;
      item.overBudget = item.overBudgetAmount;
      item.overBudgetForec = item.overBudgetAmountForec;
      item.vendor = item.dimensions && item.dimensions.vendor || "All";
      item.service = item.dimensions && item.dimensions.service || "All";
      item.metric = (item.metric || '').replace("cost_", "").replace("_adj", "").replace("_", " ")


      if (item.budget > 0) {
        item.budget = currency + item.budget;
      }
      if (item.spend > 0) {
        item.spend = currency + item.spend;
      }
      if (item.overBudget > 0) {
        item.overBudget = currency + item.overBudget;
      }
      if (item.forecasted) {
        item.forecasted = currency + item.forecasted;
      }

      var budget_percent = item.spentPercent
      item.spentPercent += "%"
      item.spentPercentForec += "%"

      if (item.spendAmount > item.budgetAmount) {
        item.details = "Budget exceeded"
        results.exceeded.push(item);
      } else if (threshold_percent < budget_percent) {
        item.details = "Threshold exceeded"
        results.exceeded.push(item);
      } else if (item.forecastedAmount > item.budgetAmount) {
        item.details = "Forecasted Budget exceeded"
        results.forecasted.push(item);
      }
    }
  });
EOS
end

datasource "ds_only_forecasted" do
  run_script $js_only_forecasted, $ds_aggregated
end

script "js_only_forecasted", type: "javascript" do
  parameters "arg"
  result "results"
  code <<-EOS
    results = arg.forecasted
  EOS
end

datasource "ds_only_exceeded" do
  run_script $js_only_exceeded, $ds_aggregated
end

script "js_only_exceeded", type: "javascript" do
  parameters "arg"
  result "results"
  code <<-EOS
    results = arg.exceeded
  EOS
end

escalation "esc_budget_alert" do
  automatic true
  label "Send Email"
  description "Send incident email"
  email $param_email
end

policy "budget_alert" do
  validate $ds_only_exceeded do
    summary_template "{{ parameters.param_granularity }} Budget Exceeded {{parameters.param_threshold_percentage}} Percent Threshold"
    hash_exclude "budgetAmount", "overBudgetAmount", "spendAmount"
    escalate $esc_budget_alert
    check eq(size(data),0)
    export do
      field "name" do
        label "Budget Name"
      end
      field "date" do
        label "Date"
      end
      field "vendor" do
        label "Vendor"
      end
      field "service" do
        label "Service"
      end
      field "budget" do
        label "Budget"
      end
      field "spend" do
        label "Spend"
      end
      field "overBudget" do
        label "Over Budget Amount"
      end
      field "spentPercent" do
        label "Spent Percent"
      end
      field "details" do
        label "Details"
      end
      field "metric" do
        label "Metric"
      end
    end
  end

  validate $ds_only_forecasted do
    summary_template "{{ parameters.param_granularity }} Budget Projected (prorated) Spent Exceeded"
    hash_exclude "budgetAmount", "overBudgetAmount", "spendAmount"
    escalate $esc_budget_alert
    check eq(size(data),0)
    export do
      field "name" do
        label "Budget Name"
      end
      field "date" do
        label "Date"
      end
      field "vendor" do
        label "Vendor"
      end
      field "service" do
        label "Service"
      end
      field "budget" do
        label "Budget"
      end
      field "spend" do
        label "Spend"
      end
      field "overBudget" do
        label "Over Budget Amount"
      end
      field "spentPercent" do
        label "Spent Percent"
      end
      field "forecasted" do
        label "Projected (prorated) spend"
      end
      field "overBudgetForec" do
        label "Over Budget Projected Amount"
      end
      field "spentPercentForec" do
        label "Projected Spent Percent"
      end
      field "details" do
        label "Details"
      end
      field "metric" do
        label "Metric"
      end
    end
  end
end

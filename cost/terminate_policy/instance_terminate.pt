name "Terminate Instances with End Date"
rs_pt_ver 20180301
type "policy"
short_description "This Policy Template is used to terminate instances based on tag. \n See the [README](https://github.com/rightscale/policy_templates/tree/master/cost/terminate_policy/) and [docs.rightscale.com/policies](http://docs.rightscale.com/policies/) to learn more."
long_description ""
category "Cost"
severity "low"
default_frequency "daily"
info(
  version: "1.7",
  provider: "Flexera Cloud Management",
  service: "",
  policy_set: ""
)

###############################################################################
# Permissions
###############################################################################

permission "perm_instances" do
  label "Permissions for instances"
  actions "rs_cm.index", "rs_cm.show"
  resources "rs_cm.instances"
end

###############################################################################
# Parameters
###############################################################################

parameter "param_email" do
  type "list"
  label "Email addresses"
  description "Email addresses of the recipients you wish to notify"
end

parameter "param_terminate_tags" do
  type "list"
  label "Tag of instances to terminate"
  description "Tags of instances to terminate in timestamp format, instance:terminate=*"
end

parameter "param_exclude_tags" do
  type "list"
  label "Tags to ignore"
  description "List of tags that will exclude instances from being evaluated by this policy. Multiple tags are evaluated as an 'OR' condition. Tag must be of the format 'namespace:predicate=value'."
end

parameter "param_automatic_action" do
  type "list"
  label "Automatic Actions"
  description "When this value is set, this policy will automatically take the selected action(s)"
  allowed_values ["Terminate Instances"]
end

###############################################################################
# Authentication
###############################################################################

auth "auth_rs", type: "rightscale"

###############################################################################
# Resources
###############################################################################

resources "clouds", type: "rs_cm.clouds"

resources "datacenters", type: "rs_cm.datacenter" do
  iterate @clouds
  cloud_href href(iter_item)
end

resources "instances", type: "rs_cm.instances" do
  iterate @clouds
  cloud_href href(iter_item)
  tags all(any($param_terminate_tags),none($param_exclude_tags))
  view 'extended'
end

###############################################################################
# Datasources
###############################################################################
datasource "ds_clouds" do
  iterate @clouds
  field "href", href(iter_item)
  field "name", val(iter_item, "display_name")
end

datasource "ds_datacenters" do
  iterate @datacenters
  field "href", href(iter_item)
  field "name", val(iter_item, "name")
end

datasource "ds_instances" do
  iterate @instances
  field "resource_uid", val(iter_item,  "resource_uid")
  field "name", val(iter_item, "name")
  field "href", href(iter_item)
  field "cloud_href", jmes_path(iter_item, "links[?rel=='cloud'].href | [0]")
  field "datacenter_href", jmes_path(iter_item, "links[?rel=='datacenter'].href | [0]")
  field "instance_type_href", jmes_path(iter_item, "links[?rel=='instance_type'].href | [0]")
  field "locked", jmes_path(iter_item,"locked")
  field "state", jmes_path(iter_item,"state")
  field "tags", jmes_path(iter_item,"tags")
end

datasource "ds_instances_with_timestamp" do
  run_script $js_instances_with_timestamp, $ds_instances, $param_terminate_tags, $ds_clouds, $ds_datacenters
end

###############################################################################
# Scripts
###############################################################################

script "js_instances_with_timestamp", type: "javascript" do
  parameters "ds_instances", "param_terminate_tags", "ds_clouds", "ds_datacenters"
  result "results"
  code <<-EOF
    var results = []
    var date = new Date()
    var iso_date = date
    for ( i = 0; i < ds_instances.length; i++ ) {
      var instance = ds_instances[i]
      tags = instance.tags
      for (n = 0; n < tags.length; n++){
        tag = tags[n]
        tag_predicate = tag.split('=')[0];
        for (t = 0; t < param_terminate_tags.length; t++) {
          terminate_tag_predicate = param_terminate_tags[t].split('=')[0]
          if (tag_predicate == terminate_tag_predicate) {
            var instance_timestamp = tag.split('=')[1]
          }
        }
      }
      var instance_terminate_date = new Date(instance_timestamp);
      var instance_terminate_date_iso = instance_terminate_date
      var should_terminate = false
      if (  instance_terminate_date <= iso_date ) {
        var should_terminate = true
      }

      // create a map of clouds with href key to get name
      var cloud_map = {}
      for (var i = 0; i < ds_clouds.length; i++) {
          var cloud = ds_clouds[i]
          cloud_map[cloud['href']]={'name': cloud['name']}
      }

      // create a map of datacenters with href key to get name
      var datacenter_map = {}
      for (var i = 0; i < ds_datacenters.length; i++) {
          var datacenter = ds_datacenters[i]
          datacenter_map[datacenter['href']]={'name': datacenter['name']}
      }
      results.push({
        id: instance.resource_uid,
        name: instance.name,
        href: instance.href,
        cloud_name: cloud_map[instance.cloud_href]['name'],
        datacenter_name: datacenter_map[instance.datacenter_href]['name'],
        instance_type_href: instance.instance_type_href,
        locked: instance.locked,
        state: instance.state,
        tags: instance.tags,
        terminate_date: instance_timestamp,
        run_time: iso_date.toISOString(),
        terminate: should_terminate
      })
    }
    results = _.sortBy(results, 'cloud_name');

EOF
end

###############################################################################
# Escalations
###############################################################################
escalation "email" do
  automatic true
  label "Send Email"
  description "Send incident email"
  email $param_email
end

escalation "report_and_terminate_instances" do
  automatic contains($param_automatic_action, "Terminate Instances")
  label "Terminate Instances"
  description "Terminate Instances"
  run "terminate_instances", data
end

resolution "report_resolution" do
  email $param_email
end

###############################################################################
# Policy
###############################################################################

policy "pol_instances" do
  validate_each $ds_instances_with_timestamp do
    summary_template "{{ rs_project_name }} (Account ID: {{ rs_project_id }}): {{ len data }} Terminable Instances"
    escalate $email
    escalate $report_and_terminate_instances
    check logic_not(val(item,"terminate"))
    resolve $report_resolution
    export do
      resource_level true
      field "cloud_name" do
        label "Cloud Name"
      end
      field "datacenter_name" do
        label "Datacenter Name"
      end
      field "name" do
        label "Name"
      end
      field "terminate_date" do
        label "Terminate Date"
      end
      field "run_time" do
        label "Current Date"
      end
      field "locked" do
        label "Locked"
      end
      field "id" do
        label "Resource UID"
      end
      field "href" do
        label "Href"
      end
    end
  end
end

###############################################################################
# Cloud Workflow
###############################################################################

define terminate_instances($data) do
  foreach $item in $data do
    if !$item["locked"]
      @instance = rs_cm.get(href: $item["href"])
      task_label("terminating instance - "+$item["name"])
      @instance.terminate()
    end
  end
end

define sys_log($subject, $detail) do
  if $$debug
    rs_cm.audit_entries.create(
      notify: "None",
      audit_entry: {
        auditee_href: @@account,
        summary: join(["Terminate Policy - ", $subject]),
        detail: $detail
      }
    )
  end
end

name "Cloud Cost Anomaly Alerts"
rs_pt_ver 20180301
type "policy"
short_description "Uses the /anomalies/report for a specified number of days and dimensions. Will raise an incident if the algorythm catches anomalies. See the [README](https://github.com/rightscale/policy_templates/tree/master/cost/cloud_cost_anomaly_alerts/) and [docs.flexera.com/flexera/EN/Automation](https://docs.flexera.com/flexera/EN/Automation/AutomationGS.htm) to learn more."
long_description ""
severity "high"
category "Cost"
tenancy "single"
default_frequency "daily"
info(
  version: "2.2",
  provider: "Flexera Optima",
  service: "",
  policy_set:""
)

###############################################################################
# Parameters
###############################################################################

parameter "param_days" do
  label "Time Period"
  description "Number of days to analyze"
  type "number"
  default 30
  min_value 1
  max_value 31
end

parameter "param_min_spend" do
  label "Minimum Period Spend"
  description "Minimum spend for the specified period required to trigger incidents"
  type "number"
  default 1000
  min_value 0
end

parameter "param_cost_metric" do
  type "string"
  label "Cost Metric"
  allowed_values "Unamortized Unblended","Amortized Unblended","Unamortized Blended","Amortized Blended"
  default "Unamortized Unblended"
  description "Select the cost metric for your report.  See the README file for more details"
end

##
parameter "param_dimensions" do
  type "list"
  label "Cost Anomaly Dimensions"
  description "Dimensions to run anomaly report. Unable to take in custom tags as a dimension"
  allowed_values "Cloud Vendor","Cloud Vendor Account Name","Cloud Vendor Account","Manufacturer Name","Spend Type","Flexera Capability","Category","Instance Type","Region","Operation","Resource Type","Service","Billing Account ID","Usage Unit","Usage Type","Line Item Type","Purchase Option","Resource Group","Bill Entity","Bill Source","Invoice ID"
  default ["Cloud Vendor Account Name", "Cloud Vendor", "Service"]
end

parameter "param_window_size" do
  type "number"
  label "Window Size"
  description "	Window size to use for bollinger bands"
  default 10
  min_value 0
end

parameter "param_standard_deviations" do
  type "number"
  label "Standard Deviations"
  description "The standard deviation number for the bollinger band"
  default 2
  min_value 0
end

parameter "param_anomaly_limit" do
  type "number"
  label "Cost anomaly Limit"
  description "Number of anomaly rows to return in the response"
  default 10
end

parameter "param_email" do
  label "Email addresses of the recipients you wish to notify"
  type "list"
end

###############################################################################
# Authentication
###############################################################################

credentials "auth_flexera" do
  schemes "oauth2"
  label "flexera"
  description "Select Flexera One OAuth2 credentials"
  tags "provider=flexera"
end

###############################################################################
# Datasources
###############################################################################

datasource "ds_currency_reference" do
  request do
    host "raw.githubusercontent.com"
    path "/rightscale/policy_templates/master/cost/scheduled_reports/currency_reference.json"
    header "User-Agent", "RS Policies"
  end
end

datasource "ds_currency_code" do
  request do
    auth $auth_flexera
    host rs_optima_host
    path join(["/bill-analysis/orgs/",rs_org_id,"/settings/currency_code"])
    header "Api-Version", "0.1"
    header "User-Agent", "RS Policies"
  end
  result do
    encoding "json"
    field "id", jmes_path(response,"id")
    field "value", jmes_path(response,"value")
  end
end

datasource "billing_centers" do
  request do
    auth $auth_flexera
    host rs_optima_host
    path join(["/analytics/orgs/",rs_org_id,"/billing_centers"])
    header "Api-Version", "1.0"
    header "User-Agent", "RS Policies"
    query "view", "allocation_table"
  end
  result do
    encoding "json"
    collect jmes_path(response,"[*]") do
      field "href", jmes_path(col_item,"href")
      field "id", jmes_path(col_item,"id")
      field "name", jmes_path(col_item,"name")
      field "parent_id", jmes_path(col_item,"parent_id")
      field "ancestor_ids", jmes_path(col_item,"ancestor_ids")
      field "allocation_table", jmes_path(col_item,"allocation_table")
    end
  end
end

datasource "ds_top_level_billing_centers" do
  run_script $js_top_level_bc, $ds_listed_billing_centers
end

datasource "ds_listed_billing_centers" do
  run_script $js_listed_billing_centers, $billing_centers
end

datasource "ds_get_anomalies" do
  request do
    run_script $js_get_anomalies, rs_optima_host, rs_org_id, $ds_top_level_billing_centers, $param_cost_metric, $param_days, $param_dimensions, $param_window_size, $param_standard_deviations, $param_anomaly_limit
  end
  result do
    encoding "json"
    collect jmes_path(response,"values[*]") do
      field "timeSeries", jmes_path(col_item, "timeSeries")
    end
  end
end

datasource "ds_filter_anomalies" do
  run_script $js_filter_anomalies, $ds_get_anomalies, $param_min_spend, rs_org_id, $param_days, $param_dimensions, $param_cost_metric, $param_anomaly_limit
end

###############################################################################
# Scripts
###############################################################################

script "js_listed_billing_centers", type: "javascript" do
  parameters "billing_centers"
  result "billing_center_list"
  code <<-EOS
    var billing_center_list = [];

    function GetSortOrder(prop) {
      return function(a, b) {
        if (a[prop] > b[prop]) {
          return 1;
        } else if (a[prop] < b[prop]) {
          return -1;
        }
        return 0;
      }
    }

    _.map(billing_centers, function(value, key){
      billing_center_list.push(value);
    });

    billing_center_list.sort(GetSortOrder("name"));
  EOS
end

script "js_top_level_bc", type: "javascript" do
  parameters "billing_centers"
  result "filtered_billing_centers"
  code <<-EOS
    var filtered_billing_centers =_.reject(billing_centers, function(bc){ return bc.parent_id != null });
  EOS
end

script "js_get_anomalies", type: "javascript" do
  parameters "rs_optima_host", "org_id","bc_ids","param_cost_metric","param_days", "param_dimensions", "param_window_size", "param_standard_deviations", "param_anomaly_limit"
  result "request"
  code <<-EOS
    var start_at = "";
    var end_at = "";
    var cost_metric = {
      "Unamortized Unblended":"cost_nonamortized_unblended_adj",
      "Amortized Unblended":"cost_amortized_unblended_adj",
      "Unamortized Blended": "cost_nonamortized_blended_adj",
      "Amortized Blended":"cost_amortized_blended_adj"
    }

    var api_dimensions = {
      "Cloud Vendor":"vendor"
	    "Cloud Vendor Account":"vendor_account"
	    "Cloud Vendor Account Name":"vendor_account_name"
	    "Manufacturer Name":"manufacturer_name"
      "Spend Type":"spend_type"
	    "Flexera Capability":"capability"
	    "Category":"category"
	    "Instance Type":"instance_type"
	    "Region":"region"
	    "Operation":"operation"
	    "Resource Type":"resource_type"
	    "Service":"service"
	    "Billing Account ID":"billing_center_id"
	    "Usage Unit":"usage_unit"
	    "Usage Type":"usage_type"
	    "Line Item Type":"line_item_type"
	    "Purchase Option":"purchase_option"
	    "Resource Group":"resource_group"
	    "Bill Entity":"bill_entity"
	    "Bill Source":"bill_source"
	    "Invoice ID":"invoice_id"
    }

    // format the date for the `daily` API
    // returns date formatted as string: YYYY-mm-dd
    function getFormattedDailyDate(date) {
      var year = date.getFullYear();
      var month = (1 + date.getMonth()).toString();
      month = month.length > 1 ? month : '0' + month;
      var day = date.getDate().toString();
      day = day.length > 1 ? day : '0' + day;
      return year + '-' + month + '-' + day;
    }

    function getStartDate( date ) {
      var days = 2 + param_days ;
      date.setHours(-24 * days);
      return date;
    }

    function getEndDate( date ) {
      date.setHours(-48);
      return date;
    }

    billingIDs = []
    _.each(bc_ids, function(bCenter){
      billingSlice = []
      billingIDs.push(bCenter.id)
    })

    dimensions = []
    _.each(param_dimensions, function(dimension){
      dimensions.push(api_dimensions[dimension])
    })
    start_at = getFormattedDailyDate(getStartDate(new Date()))
    end_at = getFormattedDailyDate(getEndDate(new Date()))

    var request = {
      auth: "auth_flexera",
      verb: "POST",
      host: rs_optima_host,
      path: "/bill-analysis/orgs/" + org_id + "/anomalies/report",
      body_fields: {
        "dimensions": dimensions,
        "granularity": "day",
        "windowSize": param_window_size,
        "standardDeviations": param_standard_deviations,
        "limit": param_anomaly_limit,
        "metric": cost_metric[param_cost_metric],
        "billingCenterIds": billingIDs,
        "startAt": start_at,
        "endAt": end_at
      },
      headers: {
        "Api-Version": "1.0",
        "User-Agent": "RS Policies",
      }
    }
  EOS
end

script "js_filter_anomalies", type: "javascript" do
  parameters "ds_get_anomalies", "param_min_spend", "org_id", "param_days", "param_dimensions", "param_cost_metric", "param_anomaly_limit"
  result "result"
  code <<-EOS
    var start_at = "";
    var end_at = "";

    var cost_metric = {
      "Unamortized Unblended":"cost_nonamortized_unblended_adj",
      "Amortized Unblended":"cost_amortized_unblended_adj",
      "Unamortized Blended": "cost_nonamortized_blended_adj",
      "Amortized Blended":"cost_amortized_blended_adj"
    }

    var api_dimensions = {
      "Cloud Vendor":"vendor"
	    "Cloud Vendor Account":"vendor_account"
	    "Cloud Vendor Account Name":"vendor_account_name"
	    "Manufacturer Name":"manufacturer_name"
      "Spend Type":"spend_type"
	    "Flexera Capability":"capability"
	    "Category":"category"
	    "Instance Type":"instance_type"
	    "Region":"region"
	    "Operation":"operation"
      "Operating System":"operating_system"
	    "Resource Type":"resource_type"
	    "Service":"service"
	    "Billing Account ID":"billing_center_id"
	    "Usage Unit":"usage_unit"
	    "Usage Type":"usage_type"
	    "Line Item Type":"line_item_type"
	    "Purchase Option":"purchase_option"
	    "Resource Group":"resource_group"
	    "Bill Entity":"bill_entity"
	    "Bill Source":"bill_source"
	    "Invoice ID":"invoice_id"
    }

    // format the date for the `daily` API
    // returns date formatted as string: YYYY-mm-dd
    function getFormattedDailyDate(date) {
      var year = date.getFullYear();
      var month = (1 + date.getMonth()).toString();
      month = month.length > 1 ? month : '0' + month;
      var day = date.getDate().toString();
      day = day.length > 1 ? day : '0' + day;
      return year + '-' + month + '-' + day;
    }

    function getStartDate( date ) {
      var days = 2 + param_days ;
      date.setHours(-24 * days);
      return date;
    }

    function getEndDate( date ) {
      date.setHours(-48);
      return date;
    }

    dimensions = []
    dimensionAPIString = ""
    dimensionsReadable = ""
    _.each(param_dimensions, function(dimension){
      dimensions.push(api_dimensions[dimension])
      dimensionAPIString = dimensionAPIString + "&" + "groupBy=" + api_dimensions[dimension]
      dimensionsReadable =  dimensionsReadable + " " + dimension + ","
    })
    dimensionsReadable = dimensionsReadable.substring(0, dimensionsReadable.length - 1);
    start_at = getFormattedDailyDate(getStartDate(new Date()))
    end_at = getFormattedDailyDate(getEndDate(new Date()))

    anomalies = []
    _.each(ds_get_anomalies, function(timeSeriesEntry){
        anomalous = []
        _.each(timeSeriesEntry.timeSeries.data, function(data){
          if (data.anomalous != null) {
            if (data.anomalous == true && param_min_spend <= data.value) {
              anomalous.push(data)
            }
          }
        })
        if (anomalous.length > 0) {
          dimensionKey = ""
          Object.keys(timeSeriesEntry.timeSeries.dimensions).forEach(function(key) {
            dimensionKey = dimensionKey + timeSeriesEntry.timeSeries.dimensions[key] + "|"
          });
          dimensionKey = dimensionKey.substring(0, dimensionKey.length - 1);
          i = 0
          _.each(anomalous, function(data){
            anomalies.push({
              dimensions: dimensionKey,
              cost: (Math.round(data.value * 1000) / 1000),
              date: data.date,
              movingAverage: (Math.round(data.annotations.movingAverage * 100) / 100),
              upperLimit: (Math.round(data.annotations.upperLimit * 100) / 100),
              lowerLimit: (Math.round(data.annotations.lowerLimit * 100) / 100),
              costMetric: param_cost_metric
            })
            i++
          })
        }
    })
    message = "https://app.flexera.com/orgs/" + org_id +"/optima/anomalies?granularity=day&startDate=" + start_at + "&endDate=" + end_at + dimensionAPIString + "&costType=" + cost_metric[param_cost_metric]
    result={
      "anomalies":anomalies,
      "message":message,
      "dimensionsReadable":dimensionsReadable
    }
    result.anomalies=_.sortBy(result.anomalies, 'cost');
    result.anomalies = result.anomalies.reverse().slice(0, param_anomaly_limit);
  EOS
end
###############################################################################
# Escalations
###############################################################################

escalation "esc_budget_alert" do
  automatic true
  label "Send Email"
  description "Send incident email"
  email $param_email
end

###############################################################################
# Policy
###############################################################################

policy "budget_alert" do
  validate $ds_filter_anomalies do
    summary_template "Cloud Cost Anomalies: {{ len data.anomalies}} rows of detected anomalies for dimensions: {{ data.dimensionsReadable }}"
    detail_template <<-EOS
Cost anomalies reference link: {{data.message}}
EOS
    escalate $esc_budget_alert
    check eq(size(val(data, "anomalies")), 0)
    export "anomalies" do
      resource_level true
      field "id" do
        label "Grouping Dimensions"
        path "dimensions"
      end
      field "cost" do
        label "Cost"
      end
      field "date" do
        label "Date"
      end
      field "costMetric" do
        label "Cost Metric"
      end
      field "movingAverage" do
        label "Moving Average"
      end
      field "upperLimit" do
        label "Upper Limit"
      end
      field "lowerLimit" do
        label "Lower Limit"
      end
    end
  end
end

###############################################################################
# Cloud Workflow
###############################################################################

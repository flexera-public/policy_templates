name "Budget Alerts"
rs_pt_ver 20180301
type "policy"
short_description "Create a Monthly Budget Alert for a Billing Center or for the entire Organization. See the [README](https://github.com/rightscale/policy_templates/tree/master/cost/budget_alerts/) and [docs.rightscale.com/policies](http://docs.rightscale.com/policies/) to learn more."
long_description "Version: 1.6"
severity "medium"
category "Cost"
tenancy "single"

parameter "param_monthly_budget" do
  label "Monthly Budget"
  type "number"
end 

parameter "param_budget_scope" do 
  label "Budget Scope"
  type "string"
  allowed_values "Organization","Billing Center"
  default "Organization"
end

parameter "param_bc_name" do 
  label "Billing Center Name"
  description "(Optional) Provide the name of a Billing Center if the Budget Scope is 'Billing Center'"
  type "string"
end 

parameter "param_type" do 
  label "Budget Alert Type"
  type "string"
  allowed_values "Actual Spend","Forecasted Spend"
  description "Actual Spend alerts are based off incurred costs. Forecasted Spend alerts are based off monthly runrates."
  default "Actual Spend"
end 

parameter "param_cost_metric" do
  type "string"
  label "Cost Metric"
  allowed_values "Unamortized Unblended","Amortized Unblended","Unamortized Blended","Amortized Blended"
  default "Unamortized Unblended"
  description "Select the cost metric for your report.  See the README file for more details"
end

parameter "param_email" do
  label "Email addresses of the recipients you wish to notify"
  type "list"
end

auth "auth_rs", type: "rightscale"

datasource "ds_currency_reference" do
  request do
    host "raw.githubusercontent.com"
    path "/rightscale/policy_templates/master/cost/scheduled_reports/currency_reference.json"
    header "User-Agent", "RS Policies"
  end
end

datasource "ds_currency_code" do
  request do
    auth $auth_rs
    host rs_optima_host
    path join(["/bill-analysis/orgs/",rs_org_id,"/settings/currency_code"])
    header "Api-Version", "0.1"
    header "User-Agent", "RS Policies"
  end
  result do
    encoding "json"
    field "id", jmes_path(response,"id")
    field "value", jmes_path(response,"value")
  end
end

datasource "billing_centers" do
  request do
    auth $auth_rs
    host rs_optima_host
    path join(["/analytics/orgs/",rs_org_id,"/billing_centers"])
    header "Api-Version", "1.0"
    header "User-Agent", "RS Policies"
    query "view", "allocation_table"
  end
  result do
    encoding "json"
    collect jmes_path(response,"[*]") do
      field "href", jmes_path(col_item,"href")
      field "id", jmes_path(col_item,"id")
      field "name", jmes_path(col_item,"name")
      field "parent_id", jmes_path(col_item,"parent_id")
      field "ancestor_ids", jmes_path(col_item,"ancestor_ids")
      field "allocation_table", jmes_path(col_item,"allocation_table")
    end
  end
end

datasource "top_level_billing_centers" do
  run_script $js_top_level_bc, $billing_centers
end

script "js_top_level_bc", type: "javascript" do
  parameters "billing_centers"
  result "filtered_billing_centers"
  code <<-EOS
  var filtered_billing_centers =
    _.reject(billing_centers, function(bc){ return bc.parent_id != null });
EOS
end

script "costs_request", type: "javascript" do
  parameters "org","param_cost_metric","bc"
  result "request"
  code <<-EOS
    var cost_metric = {
      "Unamortized Unblended":"cost_nonamortized_unblended_adj",
      "Amortized Unblended":"cost_amortized_unblended_adj",
      "Unamortized Blended": "cost_nonamortized_blended_adj",
      "Amortized Blended":"cost_amortized_blended_adj"
    }
    var date = new Date();
    var year = date.getUTCFullYear();
    var month =  (date.getUTCMonth()==11)?1:2 + date.getUTCMonth();
    
    if (month == 1){ 
      var lmonth = 12;
      var lyear = year ;
	  year=year+1;
    } else {
      var lmonth = month-1;
      var lyear = year ;
    }
    
    mo = month.toString().length > 1 ? month : '0' + month;
    lmo = lmonth.toString().length > 1 ? lmonth : '0' + lmonth;


    var next_month = year + "-" + mo
    var current_month = lyear + "-" + lmo

    var request = {
      auth: "auth_rs",
      host: "optima.rightscale.com",
      verb: "POST",
      path: "/bill-analysis/orgs/" + org + "/costs/aggregated",
      body_fields: {
        "dimensions": ["billing_center_id"],
        "granularity": "month",
        "start_at": current_month,
        "end_at": next_month,
        "metrics": [cost_metric[param_cost_metric]],
        "billing_center_ids": [bc]
      },
      headers: {
        "User-Agent": "RS Policies",
        "Api-Version": "1.0"
      }
    } 
  EOS
end

datasource "top_bc_costs" do
  iterate $top_level_billing_centers
  request do
    run_script $costs_request, rs_org_id, $param_cost_metric, val(iter_item, "id")
  end
  result do
    encoding "json"
    collect jmes_path(response,"rows[*]") do
      field "name", val(iter_item, "name")
      field "id", jmes_path(col_item,"dimensions.billing_center_id")
      field "amortized_unblended_costs", jmes_path(col_item,"metrics.cost_amortized_unblended_adj")
      field "amortized_blended_costs", jmes_path(col_item,"metrics.cost_amortized_blended_adj")
      field "nonamortized_unblended_costs", jmes_path(col_item,"metrics.cost_nonamortized_unblended_adj")
      field "nonamortized_blended_costs", jmes_path(col_item,"metrics.cost_nonamortized_blended_adj")
    end
  end
end

datasource "top_bc_costs_formatted" do
  run_script $js_bc_costs, $top_bc_costs, $param_cost_metric, $param_bc_name
end

script "js_bc_costs", type: "javascript" do
  parameters "billing_centers", "param_cost_metric", "param_bc_name"
  result "costs"
  code <<-EOS
  var costs = [];
  var cost_type = {
      "Unamortized Unblended":"nonamortized_unblended_costs",
      "Amortized Unblended":"amortized_unblended_costs",
      "Unamortized Blended": "nonamortized_blended_costs",
      "Amortized Blended":"amortized_blended_costs"
  } 
  var totalCost=0;
  var bc_id="";
  var count=0;
   _.each(billing_centers, function(bc){
    var type = cost_type[param_cost_metric];
    var cost = bc[type];
	if(bc["name"]== param_bc_name){
      count++;
      totalCost=totalCost+cost;
     if(count==1){
       bc_id=bc["id"];
     }else{
       bc_id=param_bc_name;
     } 
    }
   })
    costs.push({
        name: param_bc_name,
        total: totalCost,
        id: bc_id       
    })
  
  _.each(billing_centers, function(bc){
    if(bc["name"]!== param_bc_name){
    var type = cost_type[param_cost_metric];
    var cost = bc[type];
    costs.push({
        name: bc["name"],
        total: cost,
        id: bc["id"]       
    })
    }
  })
EOS
end 

datasource "org_total" do 
  run_script $js_org_total, $top_bc_costs_formatted
end 

script "js_org_total", type: "javascript" do 
  parameters "billing_centers"
  result "org_total"
  code <<-EOS
  var totals = [] ; 
   
  _.each(billing_centers, function(bc_total){ totals.push(bc_total.total)})

  var sum = _.reduce(totals, function(memo, num){ return memo + num; }, 0)
  var org_total = {
    name: "Organization",
    total: sum,
    id: null
  } ;
EOS
end

datasource "all_bc_costs" do
  iterate $billing_centers
  request do
    run_script $costs_request, rs_org_id, $param_cost_metric, val(iter_item, "id")
  end
  result do
    encoding "json"
    collect jmes_path(response,"rows[*]") do
      field "name", val(iter_item, "name")
      field "id", jmes_path(col_item,"dimensions.billing_center_id")
      field "amortized_unblended_costs", jmes_path(col_item,"metrics.cost_amortized_unblended_adj")
      field "amortized_blended_costs", jmes_path(col_item,"metrics.cost_amortized_blended_adj")
      field "nonamortized_unblended_costs", jmes_path(col_item,"metrics.cost_nonamortized_unblended_adj")
      field "nonamortized_blended_costs", jmes_path(col_item,"metrics.cost_nonamortized_blended_adj")
    end
  end
end

datasource "all_bc_costs_formatted" do
  run_script $js_bc_costs, $all_bc_costs, $param_cost_metric, $param_bc_name
end

datasource "all_costs" do 
  run_script $js_combine_ds, $all_bc_costs_formatted, $org_total
end 

script "js_combine_ds", type: "javascript" do 
  parameters "billing_centers","org"
  result "result"
  code <<-EOS
  var result = [] ; 
   
  _.each(billing_centers, function(bc){ 
    result.push(bc)
  })

  result.push(org)
EOS
end

datasource "filtered_target" do 
  run_script $js_filter_target, $all_costs, $param_budget_scope, $param_bc_name, $param_monthly_budget, $param_type, $ds_currency_code, $ds_currency_reference
end 

script "js_filter_target", type: "javascript" do 
  parameters "all_costs", "param_scope", "param_bc_name", "param_monthly_budget", "param_type", "ds_currency_code", "ds_currency_reference"
  result "report"
  code <<-EOS
  var target = [] ;
  var report={};
  var date = new Date();
  var month = date.getUTCMonth()+1;
  var day = date.getUTCDate();
  var n = date.getMonth();
  var months=['January','February','March','April','May','June','July','August','September','October','November','December'];
  var month_year=months[n]+" "+date.getFullYear();

  if (month == 1){ var numdays = 31 ;}
  if (month == 2){ var numdays = 29 ;}
  if (month == 3){ var numdays = 31 ;}
  if (month == 4){ var numdays = 30 ;}
  if (month == 5){ var numdays = 31 ;}
  if (month == 6){ var numdays = 30 ;}
  if (month == 7){ var numdays = 31 ;}
  if (month == 8){ var numdays = 31 ;}
  if (month == 9){ var numdays = 30 ;}
  if (month == 10){ var numdays = 31 ;}
  if (month == 11){ var numdays = 30 ;}
  if (month == 12){ var numdays = 31 ;}

  var monthcomplete = day / numdays ;
  
 function formatNumber(number, separator){
       var numString =number.toString();
       var values=numString.split(".");
       var result = ''
      while (values[0].length > 3){
        var chunk = values[0].substr(-3)
        values[0] = values[0].substr(0, values[0].length - 3)
        result = separator + chunk + result
      }
      if (values[0].length > 0){
        result = values[0] + result
      }
      if(values[1]==undefined){
       return result;
      }
      return result+"."+values[1];
    }

    // Format costs with currency symbol and thousands separator
    if( ds_currency_code['value'] !== undefined ) {
      if (ds_currency_reference[ds_currency_code['value']] !== undefined ) {
        var cur = ds_currency_reference[ds_currency_code['value']]['symbol']
        if( ds_currency_reference[ds_currency_code['value']]['t_separator'] !== undefined ) {
          var separator = ds_currency_reference[ds_currency_code['value']]['t_separator']
        } else {
          var separator = ""
        }
      } else {
        var cur = ""
        var separator = ""
      }
    } else {
      var cur = "$"
      var separator = ","
    }
  var selected_bc=null;
  if (param_scope === "Organization"){
    _.each(all_costs, function(bc){
	  var runrate = bc["total"] / monthcomplete ;
      var overBudgetAmountCur="";
      if( (Math.round((runrate - param_monthly_budget) * 100) / 100) !== 0 ){
          overBudgetAmountCur=cur;
      }
	  
	  var forecastedSpend = cur+' '+formatNumber((Math.round(( runrate -bc["total"]) * 100) / 100), separator);
	  if (bc.name === "Organization"){
	   selected_bc=bc;
        if (param_type === "Forecasted Spend"){
        var overBudgetAmount= overBudgetAmountCur+' '+formatNumber((Math.round((runrate - param_monthly_budget) * 100) / 100), separator);
        var overBudgetPercent=Math.round((((Math.round(runrate * 100) / 100)-(Math.round(param_monthly_budget * 100) / 100))/param_monthly_budget)*100);
          target.push({
            name: bc["name"],
            actual: cur + ' '+formatNumber((Math.round(bc["total"] * 100) / 100), separator),
            type: "Forecasted Spend",
            runrate: cur + ' '+formatNumber((Math.round(runrate * 100) / 100),separator),
            id: bc["id"],
            budget: cur + ' '+formatNumber(param_monthly_budget,separator),
            total: runrate,
			overBudgetAmount: overBudgetAmount,
			overBudgetPercent: overBudgetPercent+"%",
            forecastedSpend: forecastedSpend
          })
        } else {
          var overBudgetAmount= overBudgetAmountCur+' '+formatNumber((Math.round((bc["total"] - param_monthly_budget) * 100) / 100), separator);
          var overBudgetPercent=Math.round((((Math.round(bc["total"] * 100) / 100)-(Math.round(param_monthly_budget * 100) / 100))/param_monthly_budget)*100);
          target.push({
            name: bc["name"],
            actual: cur + ' '+formatNumber((Math.round(bc["total"] * 100) / 100), separator),
            type: "Actual Spend",
            runrate: cur + ' '+formatNumber((Math.round(runrate * 100) / 100),separator),
            id: bc["id"],
            budget: cur + ' '+formatNumber(param_monthly_budget,separator),
            total: bc["total"],
            overBudgetAmount: overBudgetAmount,
            overBudgetPercent: overBudgetPercent+"%",
            forecastedSpend: forecastedSpend
          })
        }
      }
    })
  } else {
    _.each(all_costs, function(bc){
         var runrate = bc["total"] / monthcomplete ;
         var overBudgetAmountCur="";
         if( (Math.round((runrate - param_monthly_budget) * 100) / 100) !== 0 ){
           overBudgetAmountCur=cur;
         }	
         var forecastedSpend = cur+' '+formatNumber((Math.round(( runrate -bc["total"]) * 100) / 100), separator);
	  if (bc.name === param_bc_name){
	    selected_bc=bc;
        if (param_type === "Forecasted Spend"){
         var overBudgetAmount = overBudgetAmountCur+' '+formatNumber((Math.round((runrate - param_monthly_budget) * 100) / 100), separator);
         var overBudgetPercent = Math.round((((Math.round(runrate * 100) / 100)-(Math.round(param_monthly_budget * 100) / 100))/param_monthly_budget)*100);		
          target.push({
            name: bc["name"],
            actual: cur + ' '+formatNumber((Math.round(bc["total"] * 100) / 100), separator),
            type: "Forecasted Spend",
            runrate: cur + ' '+formatNumber((Math.round(runrate * 100) / 100),separator),
            id: bc["id"],
            budget: cur + ' '+formatNumber(param_monthly_budget,separator),
            total: runrate
            overBudgetAmount: overBudgetAmount,
            overBudgetPercent: overBudgetPercent+"%",
            forecastedSpend: forecastedSpend			
          })
        } else {
          var overBudgetAmount= overBudgetAmountCur+' '+formatNumber((Math.round((bc["total"] - param_monthly_budget) * 100) / 100), separator);
          var overBudgetPercent=Math.round((((Math.round(bc["total"] * 100) / 100)-(Math.round(param_monthly_budget * 100) / 100))/param_monthly_budget)*100);		
          target.push({
            name: bc["name"],
            actual: cur + ' '+formatNumber((Math.round(bc["total"] * 100) / 100), separator),
            type: "Actual Spend",
            runrate: cur + ' '+formatNumber((Math.round(runrate * 100) / 100),separator),
            id: bc["id"],
            budget: cur + ' '+formatNumber(param_monthly_budget,separator),
            total: bc["total"],
			overBudgetAmount: overBudgetAmount,
			overBudgetPercent: overBudgetPercent+"%",
            forecastedSpend: forecastedSpend			
          })
        }
      }
    })
  }
  if (param_type === "Forecasted Spend"){ 
  var runrate = selected_bc["total"] / monthcomplete ;
  }else{
  var runrate = selected_bc["total"]
  }
  var totalCur="";
  var budgetCur="";
  var forecastedSpend="";
  if((Math.round(selected_bc["total"] * 100) / 100) !==0){
    totalCur=cur + ' '+formatNumber((Math.round(selected_bc["total"] * 100) / 100), separator);
  }
  if((Math.round((target[0]["total"] - selected_bc["total"]) * 100) / 100)!==0){
    forecastedSpend=cur+' '+formatNumber((Math.round((target[0]["total"] - selected_bc["total"]) * 100) / 100), separator);
  }
  if(param_monthly_budget!==0){
   budgetCur=cur + ' '+formatNumber(param_monthly_budget,separator);
  }
  console.log((Math.round((target[0]["total"] - selected_bc["total"]) * 100) / 100));
  report= {
            actual: (Math.round(selected_bc["total"] * 100) / 100).toString(10),
            runrate: (Math.round(runrate * 100) / 100).toString(10),
            monthYear: month_year,
            total: target[0]["total"],
            chartType: "cht=bhs",
            chartSize: "chs=800x200",
            chartData: "chd=t:" + (Math.round(selected_bc["total"] * 100) / 100)+","+0 +"|" +(Math.round((target[0]["total"] - selected_bc["total"]) * 100) / 100)+","+0+ "|"+0+","+param_monthly_budget+"|"+0+","+((Math.round((runrate -param_monthly_budget) * 100) / 100)),
            chartTitle: "chtt= ",
            chartImage: "chof=.png",
            chartColor: "chco=65B178,CCF2D6,2F6DB7,E5A687",
            chartLebel: "chdl=Actual+Spend|Forecasted+Spend|Budget|Over+Budget",
            chartLebelPosition: "chdlp=b",
            chartYAxis: "chxt=y",
            chartYAxisLebel: "chxl=0:|+",
            chartDataAutoScale: "chds=a"
            chartDataValue: 'chl='+totalCur+'||'+ forecastedSpend+'|||'+budgetCur+'||'+target[0]["overBudgetAmount"],
            reportData: target			
  }
  
EOS
end 

escalation "esc_budget_alert" do
  email $param_email
end

policy "budget_alert" do
  validate $filtered_target do
    summary_template "{{ parameters.param_type }} Budget Exceeded"
    # ignore changes to the monthly spend and runrate, since those will change constantly
    hash_exclude "actual", "runrate", "total"
    detail_template <<-EOS
# Budget Exceeded

### Cost Metric: {{ parameters.param_cost_metric }}
### Budget Alert Type: {{ parameters.param_type }}
### Monthly Spend for {{ data.monthYear }}

![Spending Overview Chart](https://image-charts.com/chart?{{ data.chartType }}&{{ data.chartData }}&{{ data.chartSize }}&{{ data.chartTitle }}&{{ data.chartImage }}&{{ data.chartColor }}&{{ data.chartLebel }}&{{ data.chartYAxisLebel }}&{{ data.chartYAxis }}&{{ data.chartLebelPosition }}&{{data.chartDataAutoScale}}&{{data.chartDataValue}} "Actual v. Monthly Cost Report")

| Billing Center Name | Budget | Month to Date Spend | Additional Forecasted Spend | Forecasted Full Month Spend | Over Budget Amount | Over Budget Percent | Billing Center ID | 
{{ range data.reportData -}}
| :-----------------: | -----: | ------------------: | --------------------------: | --------------------------: | -----------------: | :-----------------: | :---------------: |
| {{ .name }} | {{.budget}} | {{.actual}}  | {{.forecastedSpend}} | {{.runrate}} | {{.overBudgetAmount}} | {{.overBudgetPercent}} | {{.id}} | 
{{ end -}}

EOS
    escalate $esc_budget_alert
    check lt(val(data,"total"),$param_monthly_budget)
  end
end
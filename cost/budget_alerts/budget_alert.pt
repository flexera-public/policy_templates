name "Budget Alerts"
rs_pt_ver 20180301
type "policy"
short_description "Create a Monthly Budget Alert for a Billing Center or for the entire Organization. See the [README](https://github.com/rightscale/policy_templates/tree/master/cost/budget_alerts/) and [docs.rightscale.com/policies](http://docs.rightscale.com/policies/) to learn more."
long_description "Version: 1.2"
severity "medium"
category "Cost"

parameter "param_monthly_budget" do
  label "Monthly Budget"
  type "number"
end 

parameter "param_budget_scope" do 
  label "Budget Scope"
  type "string"
  allowed_values "Organization","Billing Center"
  default "Organization"
end

parameter "param_bc_name" do 
  label "Billing Center Name"
  description "(Optional) Provide a value if the Budget Scope is 'Billing Center'"
  type "string"
  default "supply_a_value_for_billing_center_scoped_budgets"
end 

parameter "param_type" do 
  label "Budget Alert Type"
  type "string"
  allowed_values "Actual Spend","Forecasted Spend"
  default "Actual Spend"
end 

parameter "param_cost_amortization_blending" do
  label "Amoritzation & Blending Option"
  type "string"
  allowed_values "amortized_unblended","amortized_blended","nonamortized_unblended","nonamortized_blended"
  default "amortized_unblended"
end

parameter "param_email" do
  label "Email addresses of the recipients you wish to notify"
  type "list"
end

auth "auth_rs", type: "rightscale"

datasource "billing_centers" do
  request do
    auth $auth_rs
    host rs_optima_host
    path join(["/analytics/orgs/",rs_org_id,"/billing_centers"])
    header "Api-Version", "1.0"
    header "User-Agent", "RS Policies"
    query "view", "allocation_table"
  end
  result do
    encoding "json"
    collect jmes_path(response,"[*]") do
      field "href", jmes_path(col_item,"href")
      field "id", jmes_path(col_item,"id")
      field "name", jmes_path(col_item,"name")
      field "parent_id", jmes_path(col_item,"parent_id")
      field "ancestor_ids", jmes_path(col_item,"ancestor_ids")
      field "allocation_table", jmes_path(col_item,"allocation_table")
    end
  end
end

datasource "top_level_billing_centers" do
  run_script $js_top_level_bc, $billing_centers
end

script "js_top_level_bc", type: "javascript" do
  parameters "billing_centers"
  result "filtered_billing_centers"
  code <<-EOS
  var filtered_billing_centers =
    _.reject(billing_centers, function(bc){ return bc.parent_id != null });
EOS
end

script "costs_request", type: "javascript" do
  parameters "org","metric","bc"
  result "request"
  code <<-EOS
    var date = new Date();
    var month = date.getUTCMonth()+2;
    var year = date.getUTCFullYear();

    if (month == 1){ var mo = "01" ;}
    if (month == 2){ var mo = "02" ;}
    if (month == 3){ var mo = "03" ;}
    if (month == 4){ var mo = "04" ;}
    if (month == 5){ var mo = "05" ;}
    if (month == 6){ var mo = "06" ;}
    if (month == 7){ var mo = "07" ;}
    if (month == 8){ var mo = "08" ;}
    if (month == 9){ var mo = "09" ;}
    if (month == 10){ var mo = "10" ;}
    if (month == 11){ var mo = "11" ;}
    if (month == 12){ var mo = "12" ;}
    
    if (month == 1){ 
      var lmonth = 12;
      var lyear = year-1 ;
    } else {
      var lmonth = month-1;
      var lyear = year ;
    }

    if (lmonth == 1){ var lmo = "01" ;}
    if (lmonth == 2){ var lmo = "02" ;}
    if (lmonth == 3){ var lmo = "03" ;}
    if (lmonth == 4){ var lmo = "04" ;}
    if (lmonth == 5){ var lmo = "05" ;}
    if (lmonth == 6){ var lmo = "06" ;}
    if (lmonth == 7){ var lmo = "07" ;}
    if (lmonth == 8){ var lmo = "08" ;}
    if (lmonth == 9){ var lmo = "09" ;}
    if (lmonth == 10){ var lmo = "10" ;}
    if (lmonth == 11){ var lmo = "11" ;}
    if (lmonth == 12){ var lmo = "12" ;}

    var next_month = year + "-" + mo
    var current_month = lyear + "-" + lmo

    var request = {
      auth: "auth_rs",
      host: "optima.rightscale.com",
      verb: "POST",
      path: "/bill-analysis/orgs/" + org + "/costs/aggregated",
      body_fields: {
        "dimensions": ["billing_center_id"],
        "granularity": "month",
        "start_at": current_month,
        "end_at": next_month,
        "metrics": ["cost_" + metric + "_adj"],
        "billing_center_ids": [bc]
      },
      headers: {
        "User-Agent": "RS Policies",
        "Api-Version": "1.0"
      }
    } 
  EOS
end

datasource "top_bc_costs" do
  iterate $top_level_billing_centers
  request do
    run_script $costs_request, rs_org_id, $param_cost_amortization_blending, val(iter_item, "id")
  end
  result do
    encoding "json"
    collect jmes_path(response,"rows[*]") do
      field "name", val(iter_item, "name")
      field "id", jmes_path(col_item,"dimensions.billing_center_id")
      field "amortized_unblended_costs", jmes_path(col_item,"metrics.cost_amortized_unblended_adj")
      field "amortized_blended_costs", jmes_path(col_item,"metrics.cost_amortized_blended_adj")
      field "nonamortized_unblended_costs", jmes_path(col_item,"metrics.cost_nonamortized_unblended_adj")
      field "nonamortized_blended_costs", jmes_path(col_item,"metrics.cost_nonamortized_blended_adj")
    end
  end
end

datasource "top_bc_costs_formatted" do
  run_script $js_bc_costs, $top_bc_costs, $param_cost_amortization_blending
end

script "js_bc_costs", type: "javascript" do
  parameters "billing_centers", "param_cost_amortization_blending"
  result "costs"
  code <<-EOS
  var costs = [];
  
  _.each(billing_centers, function(bc){
    console.log(bc)

    if (param_cost_amortization_blending == "amortized_unblended"){ 
      var cost = bc.amortized_unblended_costs ; 
    } 
    if (param_cost_amortization_blending == "amortized_blended"){
      var cost = bc.amortized_blended_costs ;
    } 
    if (param_cost_amortization_blending == "nonamortized_unblended"){
      var cost = bc.nonamortized_unblended_costs ;
    } 
    if (param_cost_amortization_blending == "nonamortized_blended"){
      var cost = bc.nonamortized_blended_costs ;
    }

    costs.push({
        name: bc["name"],
        total: cost,
        id: bc["id"]       
    })
  })
  console.log(costs)
EOS
end 

datasource "org_total" do 
  run_script $js_org_total, $top_bc_costs_formatted
end 

script "js_org_total", type: "javascript" do 
  parameters "billing_centers"
  result "org_total"
  code <<-EOS
  var totals = [] ; 
   
  _.each(billing_centers, function(bc_total){ totals.push(bc_total.total)})

  var sum = _.reduce(totals, function(memo, num){ return memo + num; }, 0)
  console.log(totals)
  console.log(sum)

  var org_total = {
    name: "Organization",
    total: sum,
    id: null
  } ;
EOS
end

datasource "all_bc_costs" do
  iterate $billing_centers
  request do
#    auth $auth_rs
#    host "front-service-b.indigo.rightscale.com"
#    verb "POST"
#    path join(["/bill-analysis/orgs/",rs_org_id,"/costs/billing_centers"])
#    header "Api-Version", "0.1"
#    header "User-Agent", "RS Policies"
#    body_field "dimensions", ["vendor"]
#    body_field "granularity", "month"
#    body_field "start_at", "2019-01-01T00:00:00Z"
#    body_field "end_at", "2022-01-01T00:00:00Z"
#    body_field "cost_types", [$param_cost_amortization_blending]
#    body_field "ids", [val(iter_item, "id")]
    run_script $costs_request, rs_org_id, $param_cost_amortization_blending, val(iter_item, "id")
  end
  result do
    encoding "json"
    collect jmes_path(response,"rows[*]") do
      field "name", val(iter_item, "name")
      field "id", jmes_path(col_item,"dimensions.billing_center_id")
      field "amortized_unblended_costs", jmes_path(col_item,"metrics.cost_amortized_unblended_adj")
      field "amortized_blended_costs", jmes_path(col_item,"metrics.cost_amortized_blended_adj")
      field "nonamortized_unblended_costs", jmes_path(col_item,"metrics.cost_nonamortized_unblended_adj")
      field "nonamortized_blended_costs", jmes_path(col_item,"metrics.cost_nonamortized_blended_adj")
    end
  end
end

datasource "all_bc_costs_formatted" do
  run_script $js_bc_costs, $all_bc_costs, $param_cost_amortization_blending
end

datasource "all_costs" do 
  run_script $js_combine_ds, $all_bc_costs_formatted, $org_total
end 

script "js_combine_ds", type: "javascript" do 
  parameters "billing_centers","org"
  result "result"
  code <<-EOS
  var result = [] ; 
   
  _.each(billing_centers, function(bc){ 
    result.push(bc)
  })

  result.push(org)
EOS
end

datasource "filtered_target" do 
  run_script $js_filter_target, $all_costs, $param_budget_scope, $param_bc_name, $param_monthly_budget, $param_type
end 

script "js_filter_target", type: "javascript" do 
  parameters "all_costs", "param_scope", "param_bc_name", "param_monthly_budget", "param_type"
  result "target"
  code <<-EOS
  var target = [] ;
  var date = new Date();
  var month = date.getUTCMonth()+1;
  var day = date.getUTCDate();

  console.log(date)
  console.log(month)
  console.log(day)

  if (month == 1){ var numdays = 31 ;}
  if (month == 2){ var numdays = 31 ;}
  if (month == 3){ var numdays = 31 ;}
  if (month == 4){ var numdays = 30 ;}
  if (month == 5){ var numdays = 31 ;}
  if (month == 6){ var numdays = 30 ;}
  if (month == 7){ var numdays = 31 ;}
  if (month == 8){ var numdays = 31 ;}
  if (month == 9){ var numdays = 30 ;}
  if (month == 10){ var numdays = 31 ;}
  if (month == 11){ var numdays = 30 ;}
  if (month == 12){ var numdays = 31 ;}

  var monthcomplete = day / numdays ;

  console.log(monthcomplete)
  
  if (param_scope === "Organization"){
    _.each(all_costs, function(bc){
      if (bc.name === "Organization"){
        var runrate = bc["total"] / monthcomplete ;
        if (param_type === "Forecasted Spend"){
          target.push({
            name: bc["name"],
            actual: (Math.round(bc["total"] * 100) / 100).toString(10),
            type: "Forecasted Spend",
            runrate: (Math.round(runrate * 100) / 100).toString(10),
            id: bc["id"],
            budget: param_monthly_budget,
            total: runrate
          })
        } else {
          target.push({
            name: bc["name"],
            actual: (Math.round(bc["total"] * 100) / 100).toString(10),
            type: "Actual Spend",
            runrate: (Math.round(runrate * 100) / 100).toString(10),
            id: bc["id"],
            budget: param_monthly_budget,
            total: bc["total"]
          })
        }
      }
    })
  } else {
    _.each(all_costs, function(bc){
      if (bc.name === param_bc_name){
        var runrate = bc["total"] / monthcomplete ;
        if (param_type === "Forecasted Spend"){
          target.push({
            name: bc["name"],
            actual: (Math.round(bc["total"] * 100) / 100).toString(10),
            type: "Forecasted Spend",
            runrate: (Math.round(runrate * 100) / 100).toString(10),
            id: bc["id"],
            budget: param_monthly_budget,
            total: runrate
          })
        } else {
          target.push({
            name: bc["name"],
            actual: (Math.round(bc["total"] * 100) / 100).toString(10),
            type: "Actual Spend",
            runrate: (Math.round(runrate * 100) / 100).toString(10),
            id: bc["id"],
            budget: param_monthly_budget,
            total: bc["total"]
          })
        }
      }
    })
  }
  
EOS
end 

escalation "esc_budget_alert" do
  email $param_email
end

policy "budget_alert" do
  validate_each $filtered_target do
    summary_template "Budget Exceeded"
    detail_template <<-EOS
# Budget Exceeded

| Billing Center Name | Budget Alert Type | Budget | Current Monthly Spend | Monthly Runrate | Billing Center ID |
| ------------------- | ----------------- | ------ | --------------------- | --------------- | ----------------- |
{{ range data -}}
| {{ .name }} | {{.type}} | {{.budget}} | {{.actual}} | {{.runrate}} | {{.id}} | 
{{ end -}}

EOS
    escalate $esc_budget_alert
    check lt(val(item,"total"),$param_monthly_budget)
  end
end
name "Low Account Usage"
rs_pt_ver 20180301
type "policy"
short_description "Analyze all account usage and determines recommend consolidation or deletion. See the [README](https://github.com/flexera-public/policy_templates/tree/master/cost/low_account_usage/) and [docs.flexera.com/flexera/EN/Automation](https://docs.flexera.com/flexera/EN/Automation/AutomationGS.htm) to learn more."
long_description ""
severity "low"
category "Cost"
default_frequency "weekly"
info(
  version: "3.0",
  provider: "Flexera Optima",
  service: "",
  policy_set: ""
)

###############################################################################
# Parameters
###############################################################################

parameter "param_email" do
  type "list"
  category "Policy Settings"
  label "Email Addresses"
  description "Email addresses of the recipients you wish to notify when new incidents are created."
  default []
end

parameter "param_threshold" do
  type "number"
  category "Policy Settings"
  label "Low Account Spend Threshold"
  description "Estimated run-rate below which an account should be closed or consolidated. Example: 1000.00"
  min_value 1
  default 1000
end

parameter "param_billing_centers" do
  type "list"
  category "Policy Settings"
  label "Billing Centers"
  description "List of Billing Center Names/IDs to check. Leave blank to run policy against all Billing Centers."
  default []
end

parameter "param_min_savings" do
  type "number"
  category "Policy Settings"
  label "Minimum Savings Threshold"
  description "Minimum potential savings required to generate a recommendation."
  min_value 0
  default 0
end

parameter "param_stats_lookback" do
  type "number"
  category "Policy Settings"
  label "Look Back Period"
  description "How many days back to look at billing data to determine account usage."
  default 30
  min_value 3
end

###############################################################################
# Authentication
###############################################################################

credentials "auth_flexera" do
  schemes "oauth2"
  label "Flexera"
  description "Select Flexera One OAuth2 credentials"
  tags "provider=flexera"
end

###############################################################################
# Datasources & Scripts
###############################################################################

# Get applied policy metadata for use later
datasource "ds_applied_policy" do
  request do
    auth $auth_flexera
    host rs_governance_host
    path join(["/api/governance/projects/", rs_project_id, "/applied_policies/", policy_id])
    header "Api-Version", "1.0"
  end
end

datasource "ds_currency_reference" do
  request do
    host "raw.githubusercontent.com"
    path "/rightscale/policy_templates/master/cost/scheduled_reports/currency_reference.json"
    header "User-Agent", "RS Policies"
  end
end

datasource "ds_currency_code" do
  request do
    auth $auth_flexera
    host rs_optima_host
    path join(["/bill-analysis/orgs/", rs_org_id, "/settings/currency_code"])
    header "Api-Version", "0.1"
    header "User-Agent", "RS Policies"
    ignore_status [403]
  end
  result do
    encoding "json"
    field "id", jmes_path(response, "id")
    field "value", jmes_path(response, "value")
  end
end

datasource "ds_currency" do
  run_script $js_currency, $ds_currency_reference, $ds_currency_code
end

script "js_currency", type:"javascript" do
  parameters "ds_currency_reference", "ds_currency_code"
  result "result"
  code <<-EOS
  symbol = "$"
  separator = ","

  if (ds_currency_code['value'] != undefined) {
    if (ds_currency_reference[ds_currency_code['value']] != undefined) {
      symbol = ds_currency_reference[ds_currency_code['value']]['symbol']

      if (ds_currency_reference[ds_currency_code['value']]['t_separator'] != undefined) {
        separator = ds_currency_reference[ds_currency_code['value']]['t_separator']
      } else {
        separator = ""
      }
    }
  }

  result = {
    symbol: symbol,
    separator: separator
  }
EOS
end

datasource "ds_billing_centers" do
  request do
    auth $auth_flexera
    host rs_optima_host
    path join(["/analytics/orgs/", rs_org_id, "/billing_centers"])
    header "Api-Version", "1.0"
    header "User-Agent", "RS Policies"
    query "view", "allocation_table"
  end
  result do
    encoding "json"
    collect jmes_path(response,"[*]") do
      field "id", jmes_path(col_item, "id")
      field "name", jmes_path(col_item, "name")
      field "parent_id", jmes_path(col_item, "parent_id")
    end
  end
end

datasource "ds_filtered_billing_centers" do
  run_script $js_filtered_billing_centers, $ds_billing_centers, $param_billing_centers
end

script "js_filtered_billing_centers", type: "javascript" do
  parameters "ds_billing_centers", "param_billing_centers"
  result "result"
  code <<-EOS
  if (param_billing_centers.length > 0) {
    result = _.filter(ds_billing_centers, function(bc) {
      return _.contains(param_billing_centers, bc['id']) || _.contains(param_billing_centers, bc['name']) || _.contains(param_billing_centers, bc['name'].toLowerCase())
    })
  } else {
    result = ds_billing_centers
  }
EOS
end

datasource "ds_new_bc_costs" do
  request do
    run_script $js_new_bc_costs, $ds_billing_centers, $param_stats_lookback, rs_org_id, rs_optima_host
  end
  result do
    encoding "json"
    collect jmes_path(response,"rows[*]") do
      field "vendor", jmes_path(col_item, "dimensions.vendor")
      field "vendor_account", jmes_path(col_item, "dimensions.vendor_account")
      field "vendor_account_name", jmes_path(col_item, "dimensions.vendor_account_name")
      field "billing_center_id", jmes_path(col_item, "dimensions.billing_center_id")
      field "cost", jmes_path(col_item, "metrics.cost_amortized_blended_adj")
    end
  end
end

script "js_new_bc_costs", type: "javascript" do
  parameters "ds_billing_centers", "param_stats_lookback", "rs_org_id", "rs_optima_host"
  result "request"
  code <<-EOS
  start_date = new Date()
  start_date.setDate(start_date.getDate() - param_stats_lookback)
  start_date = start_date.toISOString().split('T')[0]

  end_date = new Date()
  end_date.setDate(end_date.getDate() - 1)
  end_date = end_date.toISOString().split('T')[0]

  parent_bcs = _.reject(ds_billing_centers, function(bc) {
    return typeof(bc['parent_id']) == 'string' && bc['parent_id'] != ''
  })

  var request = {
    auth: "auth_flexera",
    verb: "POST",
    host: rs_optima_host,
    path: "/bill-analysis/orgs/" + rs_org_id + "/costs/aggregated",
    body_fields: {
      "dimensions": [ "billing_center_id", "vendor", "vendor_account_name", "vendor_account" ],
      "granularity": "day",
      "metrics": [ "cost_amortized_blended_adj" ],
      "billing_center_ids": _.pluck(parent_bcs, 'id'),
      "start_at": start_date,
      "end_at": end_date,
      "filter": {
        "type": "not",
        "expression": {
          "dimension": "service",
          "type": "equal",
          "value": "APNFee"
        }
      }
    },
    headers: {
      "Api-Version": "1.0",
      "User-Agent": "RS Policies",
    }
  }
EOS
end

datasource "ds_format_costs" do
  run_script $js_format_costs, $ds_new_bc_costs, $ds_billing_centers, $ds_filtered_billing_centers, $ds_applied_policy, $ds_currency, $param_threshold, $param_min_savings, $param_stats_lookback
end

script "js_format_costs", type: "javascript" do
  parameters "ds_new_bc_costs", "ds_billing_centers", "ds_filtered_billing_centers", "ds_applied_policy", "ds_currency", "param_threshold", "param_min_savings", "param_stats_lookback"
  result "result"
  code <<-EOS
  // Used for formatting numbers to look pretty
  function formatNumber(number, separator){
    numString = number.toString()
    values = numString.split(".")
    formatted_number = ''

    while (values[0].length > 3) {
      var chunk = values[0].substr(-3)
      values[0] = values[0].substr(0, values[0].length - 3)
      formatted_number = separator + chunk + formatted_number
    }

    if (values[0].length > 0) { formatted_number = values[0] + formatted_number }
    if (values[1] == undefined) { return formatted_number }

    return formatted_number + "." + values[1]
  }

  billing_center_names = {}

  _.each(ds_billing_centers, function(bc) {
    billing_center_names[bc['id']] = bc['name']
  })

  new_bc_costs = _.map(ds_new_bc_costs, function(cost) {
    return {
      vendor: cost['vendor'],
      vendor_account: cost['vendor_account'],
      vendor_account_name: cost['vendor_account_name'],
      billing_center_id: cost['billing_center_id'],
      billing_center_name: billing_center_names[cost['billing_center_id']],
      cost: cost['cost']
    }
  })

  grouped_costs = {}

  _.each(new_bc_costs, function(cost) {
    vendor_account = cost['vendor_account']

    if (grouped_costs[vendor_account] == undefined) {
      grouped_costs[vendor_account] = []
    }

    grouped_costs[vendor_account].push(cost)
  })

  filtered_bc_names = _.pluck(ds_filtered_billing_centers, 'name')

  result = []
  total_savings = 0.0

  _.each(_.keys(grouped_costs), function(vendor_account) {
    vendor = grouped_costs[vendor_account][0]['vendor']
    vendor_account_name = grouped_costs[vendor_account][0]['vendor_account_name']

    billing_centers = _.uniq(_.pluck(grouped_costs[vendor_account], 'billing_center_name'))

    cost = _.reduce(_.pluck(grouped_costs[vendor_account], 'cost'), function(memo, num) { return memo + num }, 0)
    daily_cost = cost / (param_stats_lookback - 1)
    monthly_cost = daily_cost * 365.25 / 12

    include_bc = false

    _.each(billing_centers, function(bc) {
      if (_.contains(filtered_bc_names, bc['name'])) { include_bc = true }
    })

    if (include_bc && cost <= param_threshold && cost >= param_min_savings) {
      total_savings += monthly_cost

      result.push({
        vendor: vendor,
        vendor_account: vendor_account,
        vendor_account_name: vendor_account_name,
        billing_centers: billing_centers.join(', '),
        savings: monthly_cost
      })
    }
  })

  savings_message = ds_currency['symbol'] + ' ' + formatNumber(parseFloat(total_savings).toFixed(2), ds_currency['separator'])

  if (result.length > 0) {
    result[0]['policy_name'] = ds_applied_policy['name']
    result[0]['total_savings'] = savings_message
  }
EOS
end

###############################################################################
# Policy
###############################################################################

policy "policy_budget_alert" do
  validate_each $ds_format_costs do
    summary_template "{{ with index data 0 }}{{ .policy_name }}{{ end }}: Low Account Usage Detected Below {{parameters.param_threshold}}"
    detail_template "Total Savings: {{ with index data 0 }}{{ .total_savings }}{{ end }}"
    check eq(val(item, "vendor_account"), "")
    escalate $esc_email
    export do
      resource_level false
      field "vendor" do
        label "Cloud Vendor"
      end
      field "vendor_account" do
        label "Account ID"
      end
      field "vendor_account_name" do
        label "Account Name"
      end
      field "savings" do
        label "Estimated Monthly Savings"
      end
      field "billing_centers" do
        label "Associated Billing Centers"
      end
    end
  end
end

###############################################################################
# Escalations
###############################################################################

escalation "esc_email" do
  automatic true
  label "Send Email"
  description "Send incident email"
  email $param_email
end

name "Low Account Usage"
rs_pt_ver 20180301
type "policy"
short_description "Analyze all account usage and determines recommend consolidation or deletion. See the [README](https://github.com/flexera-public/policy_templates/tree/master/cost/low_account_usage/) and [docs.flexera.com/flexera/EN/Automation](https://docs.flexera.com/flexera/EN/Automation/AutomationGS.htm) to learn more."
long_description ""
severity "low"
category "Cost"
default_frequency "weekly"
info(
  version: "3.0",
  provider: "Flexera Optima",
  service: "",
  policy_set: ""
)

###############################################################################
# Parameters
###############################################################################

parameter "param_email" do
  type "list"
  category "Policy Settings"
  label "Email Addresses"
  description "Email addresses of the recipients you wish to notify when new incidents are created."
  default []
end

parameter "param_threshold" do
  type "number"
  category "Policy Settings"
  label "Low Account Spend Threshold"
  description "Estimated run-rate below which an account should be closed or consolidated. Example: 1000.00"
  min_value 1
  default 1000
end

parameter "param_billing_centers" do
  type "list"
  category "Policy Settings"
  label "Billing Centers"
  description "List of Billing Center Names/IDs to check. Leave blank to run policy against all Billing Centers."
  default []
end

parameter "param_min_savings" do
  type "number"
  category "Policy Settings"
  label "Minimum Savings Threshold"
  description "Minimum potential savings required to generate a recommendation."
  min_value 0
  default 0
end

parameter "param_stats_lookback" do
  type "number"
  category "Policy Settings"
  label "Look Back Period"
  description "How many days back to look at billing data to determine account usage."
  default 30
  min_value 3
end

###############################################################################
# Authentication
###############################################################################

credentials "auth_flexera" do
  schemes "oauth2"
  label "Flexera"
  description "Select Flexera One OAuth2 credentials"
  tags "provider=flexera"
end

###############################################################################
# Datasources & Scripts
###############################################################################

# Get applied policy metadata for use later
datasource "ds_applied_policy" do
  request do
    auth $auth_flexera
    host rs_governance_host
    path join(["/api/governance/projects/", rs_project_id, "/applied_policies/", policy_id])
    header "Api-Version", "1.0"
  end
end

datasource "ds_billing_centers" do
  request do
    auth $auth_flexera
    host rs_optima_host
    path join(["/analytics/orgs/", rs_org_id, "/billing_centers"])
    header "Api-Version", "1.0"
    header "User-Agent", "RS Policies"
    query "view", "allocation_table"
  end
  result do
    encoding "json"
    collect jmes_path(response,"[*]") do
      field "id", jmes_path(col_item, "id")
      field "name", jmes_path(col_item, "name")
      field "parent_id", jmes_path(col_item, "parent_id")
    end
  end
end

datasource "ds_filtered_billing_centers" do
  run_script $js_filtered_billing_centers, $ds_billing_centers, $param_billing_centers
end

script "js_filtered_billing_centers", type: "javascript" do
  parameters "ds_billing_centers", "param_billing_centers"
  result "result"
  code <<-EOS
  if (param_billing_centers.length > 0) {
    result = _.filter(ds_billing_centers, function(bc) {
      return _.contains(param_billing_centers, bc['id']) || _.contains(param_billing_centers, bc['name']) || _.contains(param_billing_centers, bc['name'].toLowerCase())
    })
  } else {
    result = _.filter(ds_billing_centers, function(bc) {
      return bc['parent_id'] == null || bc['parent_id'] == undefined
    })
  }
EOS
end

datasource "ds_new_bc_costs" do
  request do
    run_script $js_new_bc_costs, $ds_filtered_billing_centers, $param_stats_lookback, rs_org_id, rs_optima_host
  end
  result do
    encoding "json"
    collect jmes_path(response,"rows[*]") do
      field "vendor", jmes_path(col_item, "dimensions.vendor")
      field "vendor_account", jmes_path(col_item, "dimensions.vendor_account")
      field "vendor_account_name", jmes_path(col_item, "dimensions.vendor_account_name")
      field "billing_center_id", jmes_path(col_item, "dimensions.billing_center_id")
      field "cost", jmes_path(col_item, "metrics.cost_amortized_blended_adj")
    end
  end
end

script "js_new_bc_costs", type: "javascript" do
  parameters "ds_filtered_billing_centers", "param_stats_lookback", "rs_org_id", "rs_optima_host"
  result "request"
  code <<-EOS
  start_date = new Date()
  start_date.setDate(start_date.getDate() - param_stats_lookback)
  start_date = start_date.toISOString().split('T')[0]

  end_date = new Date()
  end_date.setDate(end_date.getDate() - 1)
  end_date = end_date.toISOString().split('T')[0]

  var request = {
    auth: "auth_flexera",
    verb: "POST",
    host: rs_optima_host,
    path: "/bill-analysis/orgs/" + rs_org_id + "/costs/aggregated",
    body_fields: {
      "dimensions": [ "billing_center_id", "vendor", "vendor_account_name", "vendor_account" ],
      "granularity": "day",
      "metrics": [ "cost_amortized_blended_adj" ],
      "billing_center_ids": _.pluck(ds_filtered_billing_centers, 'id'),
      "start_at": start_date,
      "end_at": end_date,
      "filter": {
        "type": "not",
        "expression": {
          "dimension": "service",
          "type": "equal",
          "value": "APNFee"
        }
      }
    },
    headers: {
      "Api-Version": "1.0",
      "User-Agent": "RS Policies",
    }
  }
EOS
end

datasource "ds_format_costs" do
  run_script $js_format_costs, $ds_new_bc_costs, $ds_billing_centers, $ds_applied_policy, $param_threshold, $param_min_savings, $param_stats_lookback
end

script "js_format_costs", type: "javascript" do
  parameters "ds_new_bc_costs", "ds_billing_centers", "ds_applied_policy", "param_threshold", "param_min_savings", "param_stats_lookback"
  result "formatted_data"
  code <<-EOS
  var getDaysInMonth = function(month,year) {
    // Here January is 1 based
    //Day 0 is the last day in the previous month
    return new Date(year, month, 0).getDate();
  // Here January is 0 based
  // return new Date(year, month+1, 0).getDate();
  };
  var date = new Date()
  var numdays = getDaysInMonth(date.getUTCMonth(),date.getUTCFullYear())
  var yesterday = new Date(new Date().setDate(new Date().getDate()-1)).getDate()

  var formatted_data = [];
  var unsorted_results = [];
  var arr_results = [];
  var bcs = [];

  billing_center_names = {}

  _.each(ds_billing_centers, function(bc) {
    billing_center_names[bc['id']] = bc['name']
  })

  new_bc_costs = _.map(ds_new_bc_costs, function(cost) {
    return {
      vendor: cost['vendor'],
      vendor_account: cost['vendor_account'],
      vendor_account_name: cost['vendor_account_name'],
      billing_center_id: cost['billing_center_id'],
      billing_center_name: billing_center_names[cost['billing_center_id']],
      cost: cost['cost']
    }
  })

  var groups = _.groupBy(arr_results, function(value){
    return value.bc_id + '#' + value.vendor + '#' + value.vendor_account_name;
  });

  var unsorted_results = _.map(groups, function(group){
    var arr_new_sum = _.pluck(group, 'new_sum')
    var summed = _.reduce(arr_new_sum, function(memo, num){ return memo + num; }, 0)
    var monthcomplete = yesterday / numdays
    var runrate = summed / monthcomplete
    return {
        name: group[0].name,
        id: group[0].id,
        vendor: group[0].vendor,
        vendor_account_name: group[0].vendor_account_name,
        run_rate: parseFloat(runrate).toFixed(2)
        accountID: group[0].accountID
    }
  });

  var checked_results = _.filter(unsorted_results, function(result){
    if (parseFloat(result.run_rate) <= param_threshold && parseFloat(result.run_rate) >= param_min_savings) {
      return result;
    }
  })

  var formatted_data = _(checked_results).chain().sortBy(function(result) {
    return result.vendor_account_name;
  }).sortBy(function(result) {
    return result.vendor;
  }).value();

  var total_sum = _.chain(formatted_data)
  .pluck('run_rate')
  .reduce(function(memo, num){ return memo + parseFloat(num); }, 0).value();
  _.each(formatted_data, function(data){ return data["total_sum"] = total_sum.toFixed(2) })

  if (formatted_data.length > 0) {
    formatted_data[0]['policy_name'] = ds_applied_policy['name']
  }
EOS
end

###############################################################################
# Policy
###############################################################################

policy "policy_budget_alert" do
  validate $ds_format_costs do
    summary_template "{{ rs_org_name }} (Org ID: {{ rs_org_id }}): Low Account Usage Detected Below {{parameters.param_threshold}} - Total Savings: {{with(index data 0)}}{{.total_sum}}{{end}}"
    check eq(size(data), 0)
    escalate $esc_email
    export do
      resource_level false
      field "name" do
        label "Billing Center Name"
      end
      field "vendor" do
        label "Vendor"
      end
      field "vendor_account" do
        label "Account ID"
      end
      field "vendor_account_name" do
        label "Account Name"
      end
      field "run_rate" do
        label "Savings"
      end
    end
  end
end

###############################################################################
# Escalations
###############################################################################

escalation "esc_email" do
  automatic true
  label "Send Email"
  description "Send incident email"
  email $param_email
end

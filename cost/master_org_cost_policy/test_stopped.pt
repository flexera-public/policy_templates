name "Stranded Servers"
rs_pt_ver 20180301
type "policy"
short_description "Report and remediate any Servers that are stranded in booting. \n See the [README](https://github.com/rightscale/policy_templates/tree/master/operational/stranded_servers) and [docs.rightscale.com/policies](http://docs.rightscale.com/policies/) to learn more."
long_description "Version: 1.0"
category "Operational"
severity "low"

###############################################################################
# Permissions
###############################################################################

permission "perm_read_creds" do
  actions   "rs_cm.show_sensitive","rs_cm.index_sensitive"
  resources "rs_cm.credentials"
end

###############################################################################
# User inputs
###############################################################################

parameter "param_email" do
  type "list"
  label "Email addresses to notify"
  description "Email addresses of the recipients you wish to notify when new incidents are created"
end

parameter "param_exclude_tags" do
  type "list"
  label "Tags to ignore"
  description "List of tags that will exclude Servers from being evaluated by this policy. Multiple tags are evaluated as an 'OR' condition. Tag must be of the format 'namespace:predicate=value'. Example: 'rs_agent:type=right_link_lite,rs_monitoring:state=auth'"
end

###############################################################################
# Authentication
###############################################################################

auth "auth_rs", type: "rightscale"

###############################################################################
# Datasources
###############################################################################

datasource "ds_list_stranded_instances" do
  request do
    run_script $js_list_stranded_instances, rs_cm_host, rs_project_id, $param_exclude_tags
  end
#  result do
#    encoding "json"
#    collect jmes_path(response, "[*]") do
#      field "cloud_name", jmes_path(col_item, "links.cloud.name")
#      field "cloud_type", jmes_path(col_item, "links.cloud.cloud_type")
#      field "name", jmes_path(col_item, "name")
#      field "resource_uid", jmes_path(col_item, "resource_uid")
#      field "updated_at", jmes_path(col_item, "links.deployment.timestamps.updated_at")
#      field "locked", jmes_path(col_item, "locked")
#      field "href", jmes_path(col_item, "href")
#      field "tags", jmes_path(col_item, "tags")
#      field "state", jmes_path(col_item, "state")
#    end
#  end
end

###############################################################################
# Script
###############################################################################

script "js_list_stranded_instances", type: "javascript" do
  result "request"
  parameters "rs_cm_host","rs_project_id","param_exclude_tags"
  code <<-EOS
    var filtered_tags = ""
    if ( param_exclude_tags.length > 0 ){
      var filtered_tags = "&tag!=" + param_exclude_tags.join(",");
    }

    request = {
      "auth": "auth_rs",
      "verb": "GET",
      "host": rs_cm_host,
      "path": "/api/instances",
      "headers": {
        "X-Api-Version": "1.6",
        "X-Account": \""+rs_project_id+\""
      },
      "query_params": {
        "view": "full",
        "filter": "state=stopped,provisioned"
      }
    }

  EOS
end

###############################################################################
# Policy
###############################################################################

policy "pol_stranded_instances" do
  validate $ds_list_stranded_instances do
    summary_template "{{ rs_project_name }} (Account ID: {{ rs_project_id }}): {{ len data }} Stranded Instance Details"
    detail_template <<-EOS
# Stranded Instance Details
| Cloud Name | Cloud Type | Instance Name | Resource UID | Updated On | Is Instance Locked | Href | Tags |
| ---------- | ---------- | ------------- | ------------ | ---------- | ------------------ | ---- | ---- |
{{ range data -}}
| {{.cloud_name}} | {{.cloud_type}} | {{.name}} | {{.resource_uid}} | {{.updated_at}} | {{.locked}} | {{.href}} | {{.tags}} |
{{ end -}}
    EOS
    escalate $report_stranded_instances
    escalate $approve_terminate_instances
    check eq(size(data),0)
  end
end

###############################################################################
# Escalations
###############################################################################

escalation "report_stranded_instances" do
  email $param_email
end

escalation "approve_terminate_instances" do
  request_approval  do
  label "Approve Instance Termination"
    description "Approve escalation to run RightScale Cloud Workflow to delete Stranded Instnace"
    parameter "approval_reason" do
      type "string"
      label "Reason for Approval"
      description "[Note]: Locked instances cannot be terminated."
    end
  end
  run "terminate_instance", data
end

###############################################################################
# Cloud Workflow
###############################################################################

define terminate_instance($data) do
  foreach $item in $data do
    sub on_error: skip do
      @instance=rs_cm.get(href:$item["href"])
      @instance.terminate()
    end
  end
end
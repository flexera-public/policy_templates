name "Turbonomic Rightsize Databases Recommendations AWS"
rs_pt_ver 20180301
type "policy"
short_description "Turbonomic policy that gives recommendations to rightsize Databases/DatabaseServers [README](https://github.com/flexera-public/policy_templates/tree/master/cost/turbonomics/rightsize_databases_recommendations/aws) and [docs.flexera.com/flexera/EN/Automation](https://docs.flexera.com/flexera/EN/Automation/AutomationGS.htm) to learn more."
severity "low"
category "Cost"
default_frequency "daily"
info(
  version: "0.3",
  source: "Turbonomic",
  service: "Usage Discount",
  provider: "AWS",
  policy_set: "Rightsize Database Instances",
  recommendation_type: "Usage Reduction"
)

##################
# Parameters   #
##################

parameter "param_turbonomic_endpoint" do
  type "string"
  label "Turbonomic endpoint"
end

parameter "param_provider" do
  type "string"
  label "Provider"
  description "Specifies provider where you want to get recommendations"
  # Once we can add multiple providers, allow: "All", "AWS", "Azure Subscription", "GCP Project"
  allowed_values "AWS"
  # Once we can add multiple providers change this default value
  default "AWS"
end

parameter "param_auth_cookie" do
  type "string"
  label "Authorization Cookie"
  no_echo true
  description "Valid authorization cookie."
end

parameter "param_email" do
  type "list"
  label "Email addresses to notify"
  description "Email addresses of the recipients you wish to notify when new incidents are created"
end

###############################################################################
# Pagination
###############################################################################

pagination "turbonomic_databases_pagination_header" do
  get_page_marker do
    header "x-next-cursor"
  end
  set_page_marker do
    query "cursor"
  end
end

###############################################################################
# Datasources & Scripts
###############################################################################

datasource "ds_get_turbonomic_recommendations" do
  request do
    run_script $js_get_turbonomic_recommendations, $param_turbonomic_endpoint, $param_auth_cookie
  end
  result do
    encoding "json"
    collect jmes_path(response, "[*]") do
      field "businessUUID", jmes_path(col_item, "target.aspects.cloudAspect.businessAccount.uuid")
      field "resourceID", jmes_path(col_item, "target.vendorIds")
      field "resourceName", jmes_path(col_item, "target.displayName")
      field "region", jmes_path(col_item, "currentLocation.displayName")
      field "currentResourceType", jmes_path(col_item, "currentEntity.displayName")
      field "newResourceType", jmes_path(col_item, "newEntity.displayName")
      field "provider", jmes_path(col_item, "target.discoveredBy.type")
      field "details", jmes_path(col_item, "details")
      field "tags", jmes_path(col_item, "target.tags")
      field "createdTime", jmes_path(col_item, "createTime")
      field "savings", jmes_path(col_item, "stats[0].value")
      field "savingsCurrency", jmes_path(col_item, "stats[0].units")
      field "pricingModel", jmes_path(col_item, "risk.reasonCommodities[0]")
      field "uuid", jmes_path(col_item, "target.uuid")
    end
  end
end

script "js_get_turbonomic_recommendations", type: "javascript" do
  result "request"
  parameters "turbonomic_endpoint", "auth_cookie"
  code <<-EOS
    request = {
      verb: "POST",
      host: turbonomic_endpoint,
      pagination: "turbonomic_databases_pagination_header",
      path: "/api/v3/markets/Market/actions"
      body_fields: {
        "actionStateList": ["READY", "ACCEPTED", "QUEUED", "IN_PROGRESS"],
        "actionTypeList":["SCALE"],
        "relatedEntityTypes":["DatabaseServer", "Database"],
        "environmentType":"CLOUD",
        "detailLevel":"EXECUTION",
        "costType":"SAVING"
      },
      query_params: {
        "limit": '100'
      },
      headers: {
        "Content-Type": "application/json"
        "Cookie": auth_cookie
      }
    }
  EOS
end

datasource "ds_get_business_units" do
  request do
    run_script $js_get_business_units, $param_turbonomic_endpoint, $param_auth_cookie, $param_provider
  end
  result do
    encoding "json"
    collect jmes_path(response, "[*]") do
      field "uuid", jmes_path(col_item, "uuid")
      field "accountID", jmes_path(col_item, "accountId")
      field "displayName", jmes_path(col_item, "displayName")
    end
  end
end

script "js_get_business_units", type: "javascript" do
  result "request"
  parameters "turbonomic_endpoint", "auth_cookie", "provider"
  code <<-EOS
    query_params = {"type": "DISCOVERED"}

    // Since /api/v3/businessunits only support "AWS", "Azure Subscription" and "GCP Project", in case
    // user selects "All", we shouldn't add "cloud_type" param in order to get all records.
    if (provider !== "All") {
      providers = {
        "AWS":"AWS",
        "Azure Subscription":"AZURE",
        "GCP Project": "GCP",
      }

      query_params["cloud_type"] = providers[provider]
    }

    request = {
      verb: "GET",
      host: turbonomic_endpoint,
      path: "/api/v3/businessunits",
      query_params: query_params,
      headers: {
        "Content-Type": "application/json"
        "Cookie": auth_cookie
      }
    }
  EOS
end

datasource "ds_filtered_turbonomic_recommendations" do
  run_script $js_filtered_turbonomic_recommendations, $ds_get_turbonomic_recommendations, $ds_get_business_units, $param_provider
end

script "js_filtered_turbonomic_recommendations", type: "javascript" do
  result "result"
  parameters "ds_get_turbonomic_recommendations", "ds_get_business_units", "param_provider"
  code <<-EOS
    instances = []
    monthlySavings = 0.0
    oneDay = 1000 * 60 * 60 * 24
    nowDay = new Date(Date.now())

    function formatNumber(number, separator) {
        numString = number.toString()
        values = numString.split(".")
        result = ''
        while (values[0].length > 3) {
            chunk = values[0].substr(-3)
            values[0] = values[0].substr(0, values[0].length - 3)
            result = separator + chunk + result
        }
        if (values[0].length > 0) {
            result = values[0] + result
        }
        if (values[1] == undefined) {
            return result
        }
        return result + "." + values[1]
    }

    _.each(ds_get_business_units, function (businessUnit) {
        _.each(ds_get_turbonomic_recommendations, function (db, index) {
            if (db.businessUUID === businessUnit.uuid) {
                ds_get_turbonomic_recommendations[index].accountID = businessUnit.accountID
                ds_get_turbonomic_recommendations[index].accountName = businessUnit.displayName
            }
        })
    })

    provider_service = {
        "AWS": "RDS",
        "Azure Subscription": "Azure SQL Database",
        "GCP Project": "Cloud SQL"
    }

    _.each(ds_get_turbonomic_recommendations, function (db) {
        if (db.provider === param_provider || param_provider === "All") {
            if (typeof db.savingsCurrency != "undefined" && db.savingsCurrency != null) {
                if (db.savingsCurrency.indexOf("$") != -1) {
                    db.savingsCurrency = "$"
                }
            } else {
                db.savingsCurrency = "$"
            }

            tags = []
            if (typeof db.tags === "undefined" || db.tags === null) {
                db.tags = tags
            } else {
                Object.keys(db['tags']).forEach(function (key) {
                    tags.push(key + '=' + db['tags'][key][0])
                });
            }
            db.tags = tags
            Object.keys(db.resourceID).forEach(function (key) {
                db.resourceID = db.resourceID[key]
                return
            });
            db.service = provider_service[db.provider]
            savingsString = ""
            if (typeof db.savings === "undefined" || db.savings === null || db.savings === "" || isNaN(db.savings)) {
                db.savings = 0.0
            }

            db.savings = (Math.round(db.savings * 730 * 1000) / 1000)
            monthlySavings = monthlySavings + db.savings
            instanceCreatedDate = new Date(db.createdTime)
            db.vmAge = (Math.round(nowDay.getTime() - instanceCreatedDate.getTime()) / (oneDay)).toFixed(0) + " Day(s)"
            db.url = "https://"
            instances.push(db)
        }
    })

    message = ""

    if (instances.length != 0) {
        pretty_savings = instances[0].savingsCurrency + ' ' + formatNumber(monthlySavings.toFixed(2), ",")
        message = "The total estimated monthly savings are " + pretty_savings + '.'
    }
    result = {
        'instances': instances,
        'message': message
    }
  EOS
end

datasource "ds_filtered_recommendations" do
  run_script $js_only_recommendations, $ds_filtered_turbonomic_recommendations
end

script "js_only_recommendations", type: "javascript" do
  parameters "arg"
  result "results"
  code <<-EOS
    results = arg.instances
  EOS
end

datasource "ds_get_projected_statistics" do
  iterate $ds_filtered_recommendations
  request do
    run_script $js_get_projected_statistics, iter_item, $param_turbonomic_endpoint, $param_auth_cookie
  end
  result do
    encoding "json"
    collect jmes_path(response,"[-1]") do
      field "uuid", val(iter_item, "uuid")
      field "size", jmes_path(col_item, "statistics[?name == 'StorageAmount'].[ capacity.total, value][0]")
      field "iops", jmes_path(col_item, "statistics[?name == 'StorageAccess'].[ capacity.total, value][0]")
      field "vmem", jmes_path(col_item, "statistics[?name == 'VMem'].[ capacity.total, value][0]")
      field "vcpu", jmes_path(col_item, "statistics[?name == 'VCPU'].[ capacity.total, value][0]")
      field "iOThroughput", jmes_path(col_item, "statistics[?name == 'IOThroughput'].[ capacity.total, value][0]")
      field "dtu", jmes_path(col_item, "statistics[?name == 'DTU'].[ capacity.total, value][0]")
    end
  end
end

datasource "ds_get_current_statistics" do
  iterate $ds_filtered_recommendations
  request do
    run_script $js_get_projected_statistics, iter_item, $param_turbonomic_endpoint, $param_auth_cookie
  end
  result do
    encoding "json"
    collect jmes_path(response,"[-2]") do
      field "uuid", val(iter_item, "uuid")
      field "size", jmes_path(col_item, "statistics[?name == 'StorageAmount'].[ capacity.total, value][-1]")
      field "iops", jmes_path(col_item, "statistics[?name == 'StorageAccess'].[ capacity.total, value][-1]")
      field "vmem", jmes_path(col_item, "statistics[?name == 'VMem'].[ capacity.total, value][-1]")
      field "vcpu", jmes_path(col_item, "statistics[?name == 'VCPU'].[ capacity.total, value][-1]")
      field "iOThroughput", jmes_path(col_item, "statistics[?name == 'IOThroughput'].[ capacity.total, value][-1]")
      field "dtu", jmes_path(col_item, "statistics[?name == 'DTU'].[ capacity.total, value][-1]")
    end
  end
end

script "js_get_projected_statistics", type: "javascript" do
  parameters "instance", "turbonomic_endpoint", "auth_cookie"
  result "request"
  code <<-EOS
    nineHours = 1000 * 60 * 60 * 9
    nowDay = new Date(Date.now())
    pastDay = new Date(Date.now() + nineHours)
    body_fields = {}

    if (instance.pricingModel == "DTU"){
      body_fields = {"statistics":[{"name":"DTU","groupBy":["key","percentile"]},{"name":"StorageAmount","groupBy":["key"]}],"startDate":nowDay.getTime(),"endDate":pastDay.getTime()}
    }

    if (instance.pricingModel == "StorageAmount"){
      body_fields = {"statistics":[{"name":"VCPU","groupBy":["key","percentile"]},{"name":"VMem","groupBy":["key","percentile"]},{"name":"StorageAccess","groupBy":["key","percentile"]},{"name":"IOThroughput","groupBy":["key","percentile"]},{"name":"StorageAmount","groupBy":["key"]}],"startDate":nowDay.getTime(),"endDate":pastDay.getTime()}
    }

    request = {
      verb: "POST",
      host: turbonomic_endpoint,
      path: "/api/v3/stats/" + instance.uuid,
      body_fields: body_fields
      headers: {
        "Content-Type": "application/json"
        "Cookie": auth_cookie
      }
    }
  EOS
end

datasource "ds_combined_data" do
  run_script $js_combined_data, $ds_filtered_turbonomic_recommendations, $ds_get_projected_statistics, $ds_get_current_statistics
end

script "js_combined_data", type: "javascript" do
  result "result"
  parameters "ds_get_turbonomic_recommendations", "ds_get_projected_statistics", "ds_get_current_statistics"
  code <<-EOS
    _.each(ds_get_projected_statistics, function (projectedStatistic) {
      _.each(ds_get_turbonomic_recommendations.instances, function (db, index) {
          if (db.uuid === projectedStatistic.uuid) {
            db.size = (projectedStatistic.size[0]/1024) + " GB"
            db.diskUtilization = ((projectedStatistic.size[1]*100)/projectedStatistic.size[0]).toFixed(2) + " %"
            db.sizenow = (ds_get_current_statistics[index].size[0]/1024) + " GB"
            db.sizeutil = ((ds_get_current_statistics[index].size[1]*100)/ds_get_current_statistics[index].size[0]).toFixed(2) + " %"
            if (db.pricingModel == "DTU"){
              db.dtu = projectedStatistic.dtu[0]
              db.dtuafter = ((projectedStatistic.dtu[1]*100)/projectedStatistic.dtu[0]).toFixed(2) + " %"
              db.dtunow = ds_get_current_statistics[index].dtu[0]
              db.dtuutilnow = ((ds_get_current_statistics[index].dtu[1]*100)/ds_get_current_statistics[index].dtu[0]).toFixed(2) + " %"
            }
            if (db.pricingModel == "StorageAmount"){
              db.iops = projectedStatistic.iops[0] + " IOPS"
              db.iopsutil = ((projectedStatistic.iops[1]*100)/projectedStatistic.iops[0]).toFixed(2) + " %"
              db.vmem = (projectedStatistic.vmem[0]/1048576).toFixed(2) + " GB"
              db.vmemutil = ((projectedStatistic.vmem[1]*100)/projectedStatistic.vmem[0]).toFixed(2) + " %"
              db.vcpu = (projectedStatistic.vcpu[0]/1000).toFixed(2) + " GHz"
              db.vcpuutil = ((projectedStatistic.vcpu[1]*100)/projectedStatistic.vcpu[0]).toFixed(2) + " %"
              db.iOThroughput = (projectedStatistic.iOThroughput[0]*0.000125).toFixed(2) + " MB/s"
              db.iOThroughpututil = ((projectedStatistic.iOThroughput[1]*100)/projectedStatistic.iOThroughput[0]).toFixed(2) + " %"

              db.iopsnow = ds_get_current_statistics[index].iops[0] + " IOPS"
              db.iopsutilnow = ((ds_get_current_statistics[index].iops[1]*100)/ds_get_current_statistics[index].iops[0]).toFixed(2) + " %"
              db.vmemnow = (ds_get_current_statistics[index].vmem[0]/1048576).toFixed(2) + " GB"
              db.vmemutilnow = ((ds_get_current_statistics[index].vmem[1]*100)/ds_get_current_statistics[index].vmem[0]).toFixed(2) + " %"
              db.vcpunow = (ds_get_current_statistics[index].vcpu[0]/1000).toFixed(2) + " GHz"
              db.vcpuutilnow = ((ds_get_current_statistics[index].vcpu[1]*100)/ds_get_current_statistics[index].vcpu[0]).toFixed(2) + " %"
              db.iOThroughputnow = (ds_get_current_statistics[index].iOThroughput[0]*0.000125).toFixed(2) + " MB/s"
              db.iOThroughpututilnow = ((ds_get_current_statistics[index].iOThroughput[1]*100)/ds_get_current_statistics[index].iOThroughput[0]).toFixed(2) + " %"
            }
          }
      })
    })

    result = {
      'instances': ds_get_turbonomic_recommendations.instances,
      'message': ds_get_turbonomic_recommendations.message
    }

  EOS
end

###############################################################################
# Policy
###############################################################################

policy "pol_turbonomic_rightsize_databases" do
  validate $ds_combined_data do
    summary_template "{{ rs_project_name }} (Account ID: {{ rs_project_id }}): {{ len data.instances }} Turbonomic Databases to Rightsize found"
    detail_template <<-EOS
      ## Turbonomic Rightsize Databases Recommendations
      {{data.message}}
    EOS
    check eq(size(val(data, "instances")), 0)
    export "instances" do
      field "accountID" do
        label "Account ID"
      end
      field "accountName" do
        label "Account Name"
      end
      field "resourceID" do
        label "Resource ID"
      end
      field "resourceName" do
        label "Resource Name"
      end
      field "savingsCurrency" do
        label "Savings Currency"
      end
      field "savings" do
        label "Savings Amount"
      end
      field "details" do
        label "Recommendation Details"
      end
      field "resourceType" do
        label "Current Instance Type"
        path "currentResourceType"
      end
      field "newResourceType" do
        label "Recommended Instance Type"
      end
      field "region" do
        label "Region"
      end
      field "service" do
        label "Service"
      end
      field "tags" do
        label "Tags"
      end
      field "provider" do
        label "Cloud Provider"
      end
      field "createdTime" do
        label "Created Time"
      end
      field "vmAge" do
        label "VM Age"
      end
      field "pricingModel" do
        label "Pricing Model"
      end
      field "url" do
        label "URL"
      end
      field "sizenow" do
        label "Actual Storage Amount"
      end
      field "sizeutil" do
        label "Actual Storage Amount % Utilization"
      end
      field "size" do
        label "New Storage Amount"
      end
      field "diskUtilization" do
        label "New Storage Amount % Utilization"
      end
      field "dtunow" do
        label "Actual DTU"
      end
      field "dtuutilnow" do
        label "Actual DTU % Utilization"
      end
      field "dtu" do
        label "New DTU"
      end
      field "dtuafter" do
        label "New DTU % Utilization"
      end
      field "iopsnow" do
        label "Actual IOPs"
      end
      field "iopsutilnow" do
        label "Actual IOPs % Utilization"
      end
      field "iops" do
        label "New IOPs"
      end
      field "iopsutil" do
        label "New IOPs % Utilization"
      end
      field "vmemnow" do
        label "Actual Virtual Memory"
      end
      field "vmemutilnow" do
        label "Actual Virtual Memory % Utilization"
      end
      field "vmem" do
        label "New Virtual Memory"
      end
      field "vmemutil" do
        label "New Virtual Memory % Utilization"
      end
      field "vcpunow" do
        label "Actual Virtual CPU"
      end
      field "vcpuutilnow" do
        label "Actual Virtual CPU % Utilization"
      end
      field "vcpu" do
        label "New Virtual CPU"
      end
      field "vcpuutil" do
        label "New Virtual CPU % Utilization"
      end
      field "iOThroughputnow" do
        label "Actual IOThroughput"
      end
      field "iOThroughpututilnow" do
        label "Actual IOThroughput  % Utilization"
      end
      field "iOThroughput" do
        label "New IOThroughput"
      end
      field "iOThroughpututil" do
        label "New IOThroughput  % Utilization"
      end
    end
    escalate $esc_email
  end
end

###############################################################################
# Escalations
###############################################################################

escalation "esc_email" do
  automatic true
  label "Send Email"
  description "Send incident email"
  email $param_email
end

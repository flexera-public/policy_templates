name "Actual v. Budgeted Spend Report"
rs_pt_ver 20180301
type "policy"
short_description "This policy allows you to set up scheduled reports that will provide actual v. budgted cloud cost across all resources in the billing centers you specify, delivered to any email addresses you specify."
long_description "Version: 1.0"
severity "low"
category "Cost"

parameter "param_email" do
  type "list"
  label "Email List"
  description "Email addresses of the recipients you wish to notify"
end

parameter "param_billing_centers" do
  type "list"
  label "Billing Center List"
  description "List of Billing Center names you want to report on.  Leave blank to select all top level Billing Centers."
end

parameter "param_cost_metric" do
  type "string"
  label "Cost Metric"
  allowed_values "Unamortized Unblended", "Amortized Unblended", "Unamortized Blended", "Amortized Blended"
  default "Unamortized Unblended"
  description "Select the cost metric for your report.  See the README file for more details"
end

parameter "param_graph_dimension" do
  type "string"
  label "Graph Dimension"
  allowed_values "Category", "Instance Type", "Region", "Resource Group", "Resource Type", "Service", "Usage Type", "Usage Unit", "Cloud Vendor", "Cloud Vendor Account", "Cloud Vendor Account Name"
  default "Category"
  description "Select which dimension you'd like to be broken out on the graph in the report."
end

parameter "param_monthly_budgeted" do
  type "number"
  label "Monthly Budgeted Cost"
  description "Enter monthly budgeted cost."
end

auth "auth_rs", type: "rightscale"

datasource "ds_currency_reference" do
  request do
    host "raw.githubusercontent.com"
    path "/rightscale/policy_templates/master/cost/scheduled_reports/currency_reference.json"
    header "User-Agent", "RS Policies"
  end
end

datasource "ds_currency_code" do
  request do
    auth $auth_rs
    host rs_optima_host
    path join(["/bill-analysis/orgs/", rs_org_id, "/settings/currency_code"])
    header "Api-Version", "0.1"
    header "User-Agent", "RS Policies"
  end
  result do
    encoding "json"
    field "id", jmes_path(response, "id")
    field "value", jmes_path(response, "value")
  end
end

datasource "ds_billing_centers" do
  request do
    auth $auth_rs
    host rs_optima_host
    path join(["/analytics/orgs/", rs_org_id, "/billing_centers"])
    header "Api-Version", "1.0"
    header "User-Agent", "RS Policies"
    query "view", "allocation_table"
  end
  result do
    encoding "json"
    collect jmes_path(response, "[*]") do
      field "href", jmes_path(col_item, "href")
      field "id", jmes_path(col_item, "id")
      field "name", jmes_path(col_item, "name")
      field "parent_id", jmes_path(col_item, "parent_id")
      field "ancestor_ids", jmes_path(col_item, "ancestor_ids")
      field "allocation_table", jmes_path(col_item, "allocation_table")
    end
  end
end

datasource "ds_current_month_costs" do
  request do
    run_script $js_current_month_cost_request, $param_billing_centers, $param_cost_metric, rs_org_id, rs_optima_host, $ds_billing_centers
  end
end

script "js_current_month_cost_request", type: "javascript" do
  parameters "param_billing_centers", "param_cost_metric", "rs_org_id", "rs_optima_host", "ds_billing_centers"
  result "request"
  code <<-EOS
    var range = "monthly";
    var scale = "current";
    // format the date for the `daily` API
    // returns date formatted as string: YYYY-mm-dd
    function getFormattedDailyDate(date) {
      var year = date.getFullYear();

      var month = (1 + date.getMonth()).toString();
      month = month.length > 1 ? month : '0' + month;

      var day = date.getDate().toString();
      day = day.length > 1 ? day : '0' + day;
      return year + '-' + month + '-' + day;
    }

    // finds first day of week
    function getMonday( date ) {
      var day = date.getDay() || 7;
      if( day !== 1 )
        date.setHours(-24 * (day - 1));
      return date;
    }

    // adds day(s) to the current day
    function addDays(date, days) {
      var result = new Date(date);
      result.setDate(result.getDate() + days);
      return result;
    }

    // create a map to use in the request metric field.
    var cost_metric = {
      "Unamortized Unblended":"cost_nonamortized_unblended_adj",
      "Amortized Unblended":"cost_amortized_unblended_adj",
      "Unamortized Blended": "cost_nonamortized_blended_adj",
      "Amortized Blended":"cost_amortized_blended_adj"
    }

    var start_at = "";
    var end_at = "";
    var now = new Date();
    // start_at from beginning of this month
    start_at = getFormattedDailyDate(new Date(now.getFullYear(), now.getMonth(), 1))
    // end_at to end of this month
    end_at = getFormattedDailyDate(addDays(new Date(now.getFullYear(), now.getMonth() + 1, 0),1))
    
    var billing_center_ids = []
    if (param_billing_centers.length === 0){
      var top_billing_centers = _.reject(ds_billing_centers, function(bc){ return bc.parent_id != null });
      billing_center_ids = _.map(top_billing_centers, function(value, key){ return value.id });
    } else {
      // get array of billing center id's that match the names in param_billing_centers.
      billing_center_names = _.map(param_billing_centers, function(name){ return name.toLowerCase(); });
      billing_center_ids = _.compact(_.map(ds_billing_centers, function(value){ if(_.contains(billing_center_names, value.name.toLowerCase())){return value.id} }));
    }

    var body = {
      "dimensions":[]
      "granularity":"day",
      "start_at": start_at ,
      "end_at": end_at
      "metrics":[cost_metric[param_cost_metric]],
      "billing_center_ids": billing_center_ids
    }

    var request = {
      auth:  'auth_rs',
      host:  rs_optima_host,
      scheme: 'https',
      verb: 'POST',
      path:  "/bill-analysis/orgs/"+ rs_org_id + "/costs/aggregated",
      headers: {
        "API-Version": "1.0",
        "Content-Type":"application/json"
      },
      body: JSON.stringify(body)
    }
  EOS
end

datasource "ds_report" do
  run_script $js_report, $ds_current_month_costs, $param_cost_metric, $ds_currency_code, $ds_currency_reference, $param_monthly_budgeted
end

script "js_report", type: "javascript" do
  parameters "ds_current_month_costs", "param_cost_metric", "ds_currency_code", "ds_currency_reference", "param_monthly_budgeted"
  result "report"
  code <<-EOS
    // create a map to use in the request metric field.
    var cost_metric = {
      "Unamortized Unblended":"cost_nonamortized_unblended_adj",
      "Amortized Unblended":"cost_amortized_unblended_adj",
      "Unamortized Blended": "cost_nonamortized_blended_adj",
      "Amortized Blended":"cost_amortized_blended_adj"
    }

    var metric = cost_metric[param_cost_metric]
    
    var current_month_total = 0.00
    for (var i = 0; i < ds_current_month_costs['rows'].length; i++) {
      var row = ds_current_month_costs['rows'][i]
      current_month_total += row['metrics'][metric]
    }

    function formatNumber(number, separator)
    {
      var numString = number.toString()
      var result = ''

      while (numString.length > 3)
      {
        var chunk = numString.substr(-3)
        numString = numString.substr(0, numString.length - 3)
        result = separator + chunk + result
      }

      if (numString.length > 0)
      {
        result = numString + result
      }

      return result
    }

    // Format costs with currency symbol and thousands separator
    if( ds_currency_code['value'] !== undefined ) {
      if (ds_currency_reference[ds_currency_code['value']] !== undefined ) {
        var cur = ds_currency_reference[ds_currency_code['value']]['symbol']
        if( ds_currency_reference[ds_currency_code['value']]['t_separator'] !== undefined ) {
          var sep = ds_currency_reference[ds_currency_code['value']]['t_separator']
        } else {
          var sep = ""
        }
      } else {
        var cur = ""
        var sep = ""
      }
    } else {
      var cur = "$"
      var sep = ","
    }

    var cm_total = cur + ' ' + formatNumber(Math.round(current_month_total), sep);
    
    //BEGIN MONTHLY BUDGET CHECK
    console.log("current month total is " + current_month_total);
    console.log("monthly budgeted amount is " + param_monthly_budgeted)
    if (current_month_total > param_monthly_budgeted){
      var cm_overbudget = cur + ' ' + formatNumber(Math.round(current_month_total - param_monthly_budgeted), sep);
      console.log("current monthly budget exceeded by " + cm_overbudget);
    } else {
      var cm_overbudget = "Not Applicable";
      console.log("current weekly budget exceeded by " + cm_overbudget);
    }
    param_monthly_budgeted = cur + ' ' + formatNumber(Math.round(param_monthly_budgeted), sep);
    //END MONTHLY BUDGET CHECK

    var report = [
      {
        range: 'Monthly',
        current: cm_total,
        budget: param_monthly_budgeted,
        overbudget: cm_overbudget
      }
    ]
  EOS
end

datasource "ds_previous_six_month_costs" do
  request do
    run_script $js_six_month_cost_request, $param_billing_centers, $param_cost_metric, rs_org_id, rs_optima_host, $ds_billing_centers, $param_graph_dimension
  end
end

script "js_six_month_cost_request", type: "javascript" do
  parameters "param_billing_centers", "param_cost_metric", "rs_org_id", "rs_optima_host", "ds_billing_centers", "param_graph_dimension"
  result "request"
  code <<-EOS
    // format the date for the `monthly` API
    // returns date formatted as string: YYYY-mm
    function getFormattedMonthlyDate(date) {
      var year = date.getFullYear();

      var month = (1 + date.getMonth()).toString();
      month = month.length > 1 ? month : '0' + month;

      var day = date.getDate().toString();
      day = day.length > 1 ? day : '0' + day;

      return year + '-' + month ;
    }

    // add months to date
    // returns date object
    function addMonths(date, months) {
      date.setMonth(date.getMonth() + months);
      return date;
    }

    // create a map to use in the request metric field.
    var cost_metric = {
      "Unamortized Unblended":"cost_nonamortized_unblended_adj",
      "Amortized Unblended":"cost_amortized_unblended_adj",
      "Unamortized Blended": "cost_nonamortized_blended_adj",
      "Amortized Blended":"cost_amortized_blended_adj"
    }

    var graph_dimension = {
      "Category": "category",
      "Instance Type": "instance_type",
      "Region": "region",
      "Resource Group": "resource_group",
      "Resource Type": "resource_type",
      "Service": "service", 
      "Usage Type": "usage_type",
      "Usage Unit": "usage_unit",     
      "Cloud Vendor": "vendor", 
      "Cloud Vendor Account": "vendor_account",
      "Cloud Vendor Account Name": "vendor_account_name"
    }

    var now = new Date();
    var end_at = getFormattedMonthlyDate(addMonths(now, +1));
    var start_at = getFormattedMonthlyDate(addMonths(now, -6));
    var billing_center_ids = []
    
    if (param_billing_centers.length === 0){
      var top_billing_centers = _.reject(ds_billing_centers, function(bc){ return bc.parent_id != null });
      billing_center_ids = _.map(top_billing_centers, function(value, key){ return value.id });
    } else {
      // get array of billing center id's that match the names in param_billing_centers.
      billing_center_names = _.map(param_billing_centers, function(name){ return name.toLowerCase(); });
      billing_center_ids = _.compact(_.map(ds_billing_centers, function(value){ if(_.contains(billing_center_names, value.name.toLowerCase())){return value.id} }));
    }

    var body = {
      "dimensions":[graph_dimension[param_graph_dimension]]
      "granularity":"month",
      "start_at": start_at ,
      "end_at": end_at
      "metrics":[cost_metric[param_cost_metric]],
      "billing_center_ids": billing_center_ids
    }

    var request = {
      auth:  'auth_rs',
      host:  rs_optima_host,
      scheme: 'https',
      verb: 'POST',
      path:  "/bill-analysis/orgs/"+ rs_org_id + "/costs/aggregated",
      headers: {
        "API-Version": "1.0",
        "Content-Type":"application/json"
      },
      body: JSON.stringify(body)
    }
  EOS
end

datasource "ds_generated_report" do
  run_script $js_generate_report, $ds_previous_six_month_costs, $param_cost_metric, $param_billing_centers, $ds_report, $param_graph_dimension, $ds_currency_code, $ds_currency_reference, $param_monthly_budgeted
end

script "js_generate_report", type: "javascript" do
  parameters "ds_previous_six_month_costs", "param_cost_metric", "param_billing_centers", "ds_report", "param_graph_dimension", "ds_currency_code", "ds_currency_reference", "param_monthly_budgeted"
  result "report"
  code <<-EOS
    // format the date for the `monthly` API
    // returns date formatted as string: YYYY-mm
    function getFormattedMonthlyDate(date) {
      var year = date.getFullYear();

      var month = (1 + date.getMonth()).toString();
      month = month.length > 1 ? month : '0' + month;

      var day = date.getDate().toString();
      day = day.length > 1 ? day : '0' + day;

      return year + '-' + month ;
    }

    // create a map to use in the request metric field.
    var cost_metric = {
      "Unamortized Unblended":"cost_nonamortized_unblended_adj",
      "Amortized Unblended":"cost_amortized_unblended_adj",
      "Unamortized Blended": "cost_nonamortized_blended_adj",
      "Amortized Blended":"cost_amortized_blended_adj"
    };

    var graph_dimension = {
      "Category": "category",
      "Instance Type": "instance_type",
      "Region": "region",
      "Resource Group": "resource_group",
      "Resource Type": "resource_type",
      "Service": "service", 
      "Usage Type": "usage_type",
      "Usage Unit": "usage_unit",     
      "Cloud Vendor": "vendor", 
      "Cloud Vendor Account": "vendor_account",
      "Cloud Vendor Account Name": "vendor_account_name"
    }

    var now = new Date();
    var report = {};
    var collated_data = [];
    var current_month_totals = [];
    var metric = cost_metric[param_cost_metric];
    var dimension = graph_dimension[param_graph_dimension];

    var colorArray = ['D05A5A','F78741','FCC419','007D76','37AA77','92DA71','0F77B3','7BACD1','BCC7E1','B80C83','E06C96','FBB3BB','5F3DC4','00A2F3','99E9F2','5C940D','8EBF45','C0EB75'];
    var longMonthNames = ["None","January","February","March","April","May","June","July","August","September","October","November","December"];
    var shortMonthNames = ["None","Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"];
    var currentMonth = getFormattedMonthlyDate(now);
    var currentMonthName = longMonthNames[parseInt(currentMonth.split('-')[1])];

    _.each(ds_previous_six_month_costs["rows"], function(row){
      var yearMonth = row['timestamp'].split('-')[0] + '-' + row['timestamp'].split('-')[1]
      var numberMonth = row['timestamp'].split('-')[1]
      var stringMonth = shortMonthNames[parseInt(numberMonth)]

      collated_data.push({
        stringMonth: stringMonth,
        yearMonth: yearMonth,
        category: row['dimensions'][dimension],
        cost: row['metrics'][metric]
      })
    })

    // get unique top 10 categories
    var topValues = _.last(_.sortBy(_.filter(collated_data, function(x){ return x.yearMonth==currentMonth}),'cost'),10);
    var categories = _.map(topValues, function(line) {return line.category});

    // Get all of the data that is not in the top categories and sum it up by month
    nonTopData = _.groupBy(_.reject(collated_data, function(d){ return _.contains(categories, d.category)}), function(d) { return d.yearMonth });
    var otherData=[];
    _.each(nonTopData, function(d, k){
      total = _.reduce(d, function(total, el) {
        return total + el.cost;
      },0);
      otherData.push({yearMonth:k,cost:total});
    })

    // get unique dates
    var previousMonths = _.unique(_.chain(collated_data).map(function(line) {return line.yearMonth}).value());
    var stringMonths = _.unique(_.chain(collated_data).map(function(line) {return line.stringMonth}).value());

    // get current month data
    var current_month_costs = (_.where(collated_data, {yearMonth: currentMonth}));
    
    _.each(current_month_costs, function(line){ current_month_totals.push(line.cost)})
    
    var current_month_total = _.reduce(current_month_totals, function(memo, num){ return memo + num; }, 0);

    // build out the chart data for the top categories
    var chartDataArray = [];
    _.each(categories, function(category){
      var seriesData = [];
      _.each(previousMonths, function(month){
        var tempTotal = _.where(collated_data, {yearMonth: month, category: category});
        if ( tempTotal.length === 0 ) {
          seriesData.push("_")
        } else {
          seriesData.push(Math.round(tempTotal[0].cost))
        }
      })
      chartDataArray.push(seriesData.join())
    })

    // Add the "Other" category and associated data
    if ( otherData.length > 0 ) {
      categories.push("Other");
      var seriesData = [];
      _.each(previousMonths, function(month){
        var tempTotal = _.where(otherData, {yearMonth: month});
        if ( tempTotal.length === 0 ) {
          seriesData.push("_")
        } else {
          seriesData.push(Math.round(tempTotal[0].cost))
        }
      })
      chartDataArray.push(seriesData.join())
    }

    var chartData = "chd=a:" + chartDataArray.join('|')
    var encodedCategories = encodeURIComponent(categories.join('|')).replace(/[(]/gi,'%28').replace(/[)]/gi,'%29');
    if ( encodedCategories.length < 1) {
      var chartCategories = "chdl=Unknown"
    } else {
      var chartCategories = "chdl=" + encodedCategories
    }
    var chartColors = "chco=" + colorArray.slice(0,categories.length).join();
    var chartXAxis = "chxl=0:|" + stringMonths.join('|')
    
    if (param_billing_centers.length === 0){
      var billingCenters = "All";
    } else {
      var billingCenters = param_billing_centers.join()
    }

    // Format costs with currency symbol and thousands separator
    if( ds_currency_code['value'] !== undefined ) {
      var cur = ds_currency_code['value']
    } else {
      var cur = "USD"
    }

    report = {
      currentMonthName: currentMonthName,
      billingCenters: billingCenters,
      chartType: "cht=bhg",
      chartSize: "chs=700x190",
      chartData: "chd=a:" + Math.round(current_month_total) + "|" + Math.round(param_monthly_budgeted),
      chartLabels: "chl=Actual|Budgeted",
      chartTitle: "chtt=Spending+Overview",
      chartAxis: "chxt=x",
      chartAxisFormat: "chxs=0N*c" + cur + "s*",
      reportData: ds_report
    }
    //console.log(report)
  EOS
end

escalation "escalation_send_email" do
  email $param_email
end

policy "policy_scheduled_report" do
  validate $ds_generated_report do
    summary_template "{{ rs_org_name }} (Org ID: {{ rs_org_id }}): Actual v. Monthly Cost Report"
    detail_template <<-EOS
# Actual v. Monthly Cost Report for {{ rs_org_name }} - {{ data.currentMonthName }}

![Actual v. Monthly Cost Report](https://image-charts.com/chart?{{ data.chartType }}&{{ data.chartData }}&{{ data.chartSize }}&{{ data.chartLabels }}&{{ data.chartAxis }}&{{ data.chartAxisFormat }} "Actual v. Monthly Cost Report")

|Range|Current|Budget|Overbudget|
|:---:|------:|-----:|---------:|
{{ range data.reportData -}}
  | {{ .range }} | {{ .current }} | {{ .budget }} | {{ .overbudget }} |
{{ end -}}  
  
### For more detailed cost information, visit [Optima](https://analytics.rightscale.com/orgs/{{ rs_org_id }}/dashboard).
  
For more information on this report, please view the [README](https://github.com/rightscale/policy_templates/tree/master/cost/scheduled_reports).
___
###### Policy Applied in Account: {{ rs_project_name }} (Account ID: {{ rs_project_id }}) within Org: {{ rs_org_name }} (Org ID: {{ rs_org_id }})
EOS
    escalate $escalation_send_email
    check eq(0, 1)
  end
end

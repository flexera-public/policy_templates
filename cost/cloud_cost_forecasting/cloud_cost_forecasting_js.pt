name "Cloud Cost Forecasting"
rs_pt_ver 20180301
type "policy"
short_description "Analyze all Billing Centers for a specified number of days and raise an incident if the percentage of spend (compared to the previous period of the same number of days) has surpassed the defined threshold. See the [README](https://github.com/rightscale/policy_templates/tree/master/cost/billing_center_cost_anomaly/) and [docs.flexera.com/flexera/EN/Automation](https://docs.flexera.com/flexera/EN/Automation/AutomationGS.htm) to learn more."
long_description ""
severity "high"
category "Cost"
tenancy "single"
default_frequency "daily"
info(
  version: "2.0",
  provider: "Flexera Optima",
  service: "",
  policy_set:""
)

###############################################################################
# Permissions
###############################################################################

###############################################################################
# Parameters
###############################################################################

parameter "param_billing_centers" do
  label "Billing Center Name"
  description "List of Billing Center Names to check"
  type "list"
  default []
end

parameter "param_forecasted_months" do
  label "Months to forecast"
  type "number"
  default 6
end

parameter "param_cost_metric" do
  type "string"
  label "Cost Metric"
  allowed_values "Unamortized Unblended","Amortized Unblended","Unamortized Blended","Amortized Blended"
  default "Unamortized Unblended"
  description "Select the cost metric for your report.  See the README file for more details"
end

parameter "param_email" do
  label "Email addresses of the recipients you wish to notify"
  type "list"
end

###############################################################################
# Authentication
###############################################################################

auth "auth_rs", type: "rightscale"

###############################################################################
# Resources
###############################################################################

###############################################################################
# Datasources
###############################################################################

datasource "ds_currency_reference" do
  request do
    host "raw.githubusercontent.com"
    path "/rightscale/policy_templates/master/cost/scheduled_reports/currency_reference.json"
    header "User-Agent", "RS Policies"
  end
end

datasource "ds_currency_code" do
  request do
    auth $auth_rs
    host rs_optima_host
    path join(["/bill-analysis/orgs/",rs_org_id,"/settings/currency_code"])
    header "Api-Version", "0.1"
    header "User-Agent", "RS Policies"
  end
  result do
    encoding "json"
    field "id", jmes_path(response,"id")
    field "value", jmes_path(response,"value")
  end
end

datasource "ds_billing_centers" do
  request do
    auth $auth_rs
    host rs_optima_host
    path join(["/analytics/orgs/",rs_org_id,"/billing_centers"])
    header "Api-Version", "1.0"
    header "User-Agent", "RS Policies"
    query "view", "allocation_table"
  end
  result do
    encoding "json"
    collect jmes_path(response,"[*]") do
      field "href", jmes_path(col_item,"href")
      field "id", jmes_path(col_item,"id")
      field "name", jmes_path(col_item,"name")
      field "parent_id", jmes_path(col_item,"parent_id")
      field "ancestor_ids", jmes_path(col_item,"ancestor_ids")
      field "allocation_table", jmes_path(col_item,"allocation_table")
    end
  end
end

datasource "ds_past_month_list" do
  run_script $js_generate_past_month_list
end

datasource "ds_costs" do
  iterate $ds_past_month_list
  request do
    run_script $new_costs_request, rs_org_id, $ds_billing_centers, $param_cost_metric, $param_billing_centers, val(iter_item, 'start_date'), val(iter_item, 'end_date')
  end
  result do
    encoding "json"
    collect jmes_path(response,"rows[*]") do
      field "start_date", val(iter_item,"start_date")
      field "cost_amortized_unblended_adj", jmes_path(col_item,"metrics.cost_amortized_unblended_adj")
      field "cost_amortized_blended_adj", jmes_path(col_item,"metrics.cost_amortized_blended_adj")
      field "cost_nonamortized_unblended_adj", jmes_path(col_item,"metrics.cost_nonamortized_unblended_adj")
      field "cost_nonamortized_blended_adj", jmes_path(col_item,"metrics.cost_nonamortized_blended_adj")
      field "id", jmes_path(col_item,"dimensions.billing_center_id")
      field "timestamp", jmes_path(col_item,"timestamp")
    end
  end
end

datasource "ds_make_data_package" do
  run_script $js_make_data_package, $param_cost_metric, $param_forecasted_months, $ds_costs
end

datasource "ds_forecast" do
  run_script $js_forecast, $ds_make_data_package
end

###############################################################################
# Scripts
###############################################################################
script "js_generate_past_month_list", type: "javascript" do
  result "month_list"
  code <<-EOS
  var month_list = [];
  // format the date for the `daily` API
  // returns date formatted as string: YYYY-mm-dd
  function getFormattedDailyDate(date) {
    var year = date.getFullYear();
    var month = (1 + date.getMonth()).toString();
    month = month.length > 1 ? month : '0' + month;
    return year + '-' + month;
  }

  function getStartDate( date, month_counter ) {
    date.setMonth(date.getMonth() - month_counter);
    return date;
  }

  function getEndDate( date, month_counter ) {
    date.setMonth(date.getMonth() - (month_counter - 1));
    return date;
  }

  _.each([1,2,3,4,5,6,7,8,9,10], function (month_counter) {
    var start_date = getFormattedDailyDate(getStartDate(new Date(), month_counter));
    var end_date = getFormattedDailyDate(getEndDate(new Date(), month_counter));
    month_list.push({
      'start_date': start_date,
      'end_date': end_date,
    });
  });
EOS
end

script "new_costs_request", type: "javascript" do
  parameters "org_id", "ds_billing_centers", "param_cost_metric", "param_billing_centers", "start_at", "end_at"
  result "request"
  code <<-EOS
    var cost_metric = {
      "Unamortized Unblended":"cost_nonamortized_unblended_adj",
      "Amortized Unblended":"cost_amortized_unblended_adj",
      "Unamortized Blended": "cost_nonamortized_blended_adj",
      "Amortized Blended":"cost_amortized_blended_adj"
    }
    var billing_center_ids = []
    if (param_billing_centers.length === 0){
      var top_billing_centers = _.reject(ds_billing_centers, function(bc){ return bc.parent_id != null });
      billing_center_ids = _.map(top_billing_centers, function(value, key){ return value.id });
    } else {
      // get array of billing center id's that match the names in param_billing_centers.
      billing_center_names = _.map(param_billing_centers, function(name){ return name.toLowerCase(); });
      billing_center_ids = _.compact(_.map(ds_billing_centers, function(value){ if(_.contains(billing_center_names, value.name.toLowerCase())){return value.id} }));
    }

    var request = {
      auth: "auth_rs",
      verb: "POST",
      host: "optima.rightscale.com",
      path: "/bill-analysis/orgs/" + org_id + "/costs/aggregated",
      body_fields: {
        "dimensions": ["billing_center_id"],
        "granularity": "month",
        "metrics": [cost_metric[param_cost_metric]],
        "billing_center_ids": billing_center_ids,
        "start_at": start_at,
        "end_at": end_at
      },
      headers: {
        "Api-Version": "1.0",
        "User-Agent": "RS Policies",
      }
    }
  EOS
end

script "js_make_data_package", type: "javascript" do
  parameters "param_cost_metric", "param_forecasted_months", "ds_costs"
  result "results"
  code <<-EOS
  var results = [];

  var cost_metric = {
    "Unamortized Unblended":"cost_nonamortized_unblended_adj",
    "Amortized Unblended":"cost_amortized_unblended_adj",
    "Unamortized Blended": "cost_nonamortized_blended_adj",
    "Amortized Blended":"cost_amortized_blended_adj"
  }

  var mapped_costs = _.groupBy(ds_costs, function (value) {
    return value.start_date;
  });
  var unsorted_results = _.map(mapped_costs, function (group) {
    var counter = 0;
    for (var i = 0; i < group.length; i++) {
      var item = group[i];
      if (item[cost_metric[param_cost_metric]] == 0) {
        counter = counter + 1;
      } else {
        break;
      }
    }

    var arr_new_sum = _.pluck(group, cost_metric[param_cost_metric]);

    var summed = _.reduce(arr_new_sum, function (memo, num) { return memo + num; }, 0);
    return {
      start_date: group[0].start_date,
      cost: summed,
    };
  });
  var costs = [];
  _.each(unsorted_results, function (item) {
    costs.push({
      start_date: item.start_date,
      cost: item.cost,
    });
  });

  var sorted_costs = _.sortBy(costs, function (o) { var dt = new Date(o.start_date); return -dt; });
  console.log(sorted_costs);
  results.push({
    costs: sorted_costs,
    forecasted_months: param_forecasted_months,
  });
EOS
end

script "js_forecast", type: "javascript" do
  parameters "data"
  result "results"
  code <<-EOS
  var results = []
  var forecasted_months = data.forecasted_months;
  var cost_data = data.costs;
  var cost_object = {};
  _.each(cost_data, function ( item ) {
    cost_object[item[0]] = item[1];
  } );
  _.each(cost_data, function(item){
    //subtract last one from first one
    //divide retainer by last one, calculate difference
  })
EOS
end

###############################################################################
# Escalations
###############################################################################

escalation "esc_budget_alert" do
  automatic true
  label "Send Email"
  description "Send incident email"
  email $param_email
end

###############################################################################
# Policy
###############################################################################

policy "budget_alert" do
  validate_each $ds_forecast do
    summary_template "Forecasted Item"
    escalate $esc_budget_alert
    detail_template ""
    check eq(1,0)
  end
end

###############################################################################
# Cloud Workflow
###############################################################################

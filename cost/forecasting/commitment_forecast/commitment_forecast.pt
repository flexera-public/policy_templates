name "Vendor Commitment Forecast"
rs_pt_ver 20180301
type "policy"
short_description "This policy allows the user to specify a Commitment target value (based on the commitment amount agreed with your Cloud Service Provider/s), and track the current commitment spend to date, as well as projected commitment spend over a period. See the [README](https://github.com/flexera/policy_templates/tree/master/cost/forecasting/commitment_forecast/) and [docs.flexera.com/flexera/EN/Automation](https://docs.flexera.com/flexera/EN/Automation/AutomationGS.htm) to learn more."
long_description ""
severity "medium"
category "Cost"
tenancy "single"
default_frequency "monthly"
info(
  version: "2.1",
  provider: "Flexera Optima",
  service: "",
  policy_set:"Forecasting",
)

###############################################################################
# Parameters
###############################################################################

parameter "param_cloud_vendor" do
  label "Cloud Vendor"
  description "Provide the name of a Cloud Vendor if the Budget Scope is 'Cloud Vendor'. Example: 'AWS' or 'GCP'. Leave it blank for 'Organization' scope."
  type "string"
end

parameter "param_start_date" do
  type "string"
  label "Commitment Period Start Date"
  description "Start Date for Commitment Period YYYY-MM"
  allowed_pattern /20[2-9][0-9]-[0-1][0-9]/
  default "2020-06"
end

parameter "param_end_date" do
  type "string"
  label "Commitment Period End Date"
  description "End Date for Commitment Period YYYY-MM"
  allowed_pattern /20[2-9][0-9]-[0-1][0-9]/
  default "2022-06"
end

parameter "param_commitment_target" do
  label "Total Commitment Target"
  type "number"
  description "Specify total commitment target for the given Cloud Vendor and the specified time period.  Currency is irrelevant; the policy will default to whichever currency is used in Optima"
  default 100000
end
  
parameter "param_email" do
  label "Email addresses"
  type "list"
  description "A list of email addresses to notify"
end

parameter "param_cost_metric" do
  type "string"
  label "Cost Metric"
  allowed_values "Unamortized Unblended","Amortized Unblended","Unamortized Blended","Amortized Blended"
  default "Unamortized Unblended"
  description "Select the cost metric for your report.  See the README file for more details"
end

###############################################################################
# Authentication
###############################################################################

#AUTHENTICATE WITH RIGHTSCALE/OPTIMA
credentials "auth_rs" do
  schemes "oauth2"
  label "Flexera_Automation"
  description "Select FlexeraOne OAuth2 credentials"
  tags "provider=flexera"
end

###############################################################################
# Datasources and Scripts
###############################################################################

#GET CURRENCY REFERENCE
datasource "ds_currency_reference" do
  request do
    host "raw.githubusercontent.com"
    path "/rightscale/policy_templates/master/cost/scheduled_reports/currency_reference.json"
    header "User-Agent", "RS Policies"
  end
end

#GET CURRENCY CODE FOR ORG
datasource "ds_currency_code" do
  request do
    auth $auth_rs
    host rs_optima_host
    path join(["/bill-analysis/orgs/",rs_org_id,"/settings/currency_code"])
    header "Api-Version", "0.1"
    header "User-Agent", "RS Policies"
  end
  result do
    encoding "json"
    field "id", jmes_path(response,"id")
    field "value", jmes_path(response,"value")
  end
end

#GET ALL BILLING CENTERS FOR ORG
datasource "ds_billing_centers" do
  request do
    auth $auth_rs
    host rs_optima_host
    path join(["/analytics/orgs/",rs_org_id,"/billing_centers"])
    header "Api-Version", "1.0"
    header "User-Agent", "RS Policies"
    query "view", "allocation_table"
  end
  result do
    encoding "json"
    collect jmes_path(response,"[*]") do
      field "href", jmes_path(col_item,"href")
      field "id", jmes_path(col_item,"id")
      field "name", jmes_path(col_item,"name")
      field "parent_id", jmes_path(col_item,"parent_id")
      field "ancestor_ids", jmes_path(col_item,"ancestor_ids")
      field "allocation_table", jmes_path(col_item,"allocation_table")
    end
  end  
end

#FILTER FOR TOP-LEVEL BILLING CENTERS
datasource "ds_top_level_billing_centers" do
  run_script $js_top_level_bc, $ds_billing_centers
end

script "js_top_level_bc", type: "javascript" do
  parameters "billing_centers"
  result "filtered_billing_centers"
  code <<-EOS
  var filtered_billing_centers =
    _.reject(billing_centers, function(bc){ return bc.parent_id != null });
  EOS
end

#GET BILLING CENTER COSTS
datasource "ds_aggregated_costs" do
  request do
    run_script $js_agg_costs_request, $ds_top_level_billing_centers, $param_cloud_vendor, $param_start_date, $param_end_date, $param_cost_metric, rs_org_id, rs_optima_host
  end
  result do
    encoding "json"
    collect jmes_path(response,"rows") do
      field "vendor", jmes_path(col_item,"dimensions.vendor")
      field "amortized_unblended_costs", jmes_path(col_item,"metrics.cost_amortized_unblended_adj")
      field "amortized_blended_costs", jmes_path(col_item,"metrics.cost_amortized_blended_adj")
      field "unamortized_unblended_costs", jmes_path(col_item,"metrics.cost_nonamortized_unblended_adj")
      field "unamortized_blended_costs", jmes_path(col_item,"metrics.cost_nonamortized_blended_adj")
    end
  end
end

script "js_agg_costs_request", type: "javascript" do
  parameters "top_billing_centers", "cloud_vendor", "start_date", "end_date", "param_cost_metric", "org_id", "optima_host"
  result "request"
  code <<-EOS

  var bc_ids = []
  for(var i = 0; i < top_billing_centers.length; i++){
    bc_ids.push(top_billing_centers[i].id)
  }

  var cloud_vendor_types = {
    "aws": "AWS",
    "azure": "Azure",
    "gcp": "GCP"
  }

  var cost_metrics = {
    "Unamortized Unblended":"cost_nonamortized_unblended_adj",
    "Amortized Unblended":"cost_amortized_unblended_adj",
    "Unamortized Blended": "cost_nonamortized_blended_adj",
    "Amortized Blended":"cost_amortized_blended_adj"
  }

  if(cloud_vendor.length <= 0){
    var request = {
      auth: "auth_rs",
      host: optima_host,
      verb: "POST",
      path: "/bill-analysis/orgs/" + org_id + "/costs/aggregated",
      body_fields: {
        "dimensions": ["billing_center_id", "vendor"],
        "granularity": "month",
        "start_at": start_date,
        "end_at": end_date,
        "metrics": [ cost_metrics[param_cost_metric] ],
        "billing_center_ids": bc_ids
      },
      headers: {
        "User-Agent": "RS Policies",
        "Api-Version": "1.0"
      }
    }
  } else {
    var request = {
      auth: "auth_rs",
      host: optima_host,
      verb: "POST",
      path: "/bill-analysis/orgs/" + org_id + "/costs/aggregated",
      body_fields: {
        "dimensions": ["billing_center_id", "vendor"],
        "granularity": "month",
        "start_at": start_date,
        "end_at": end_date,
        "filter": { "dimension": "vendor", "type": "equal", "value": cloud_vendor_types[cloud_vendor.toLowerCase()] }
        "metrics": [ cost_metrics[param_cost_metric] ],
        "billing_center_ids": bc_ids
      },
      headers: {
        "User-Agent": "RS Policies",
        "Api-Version": "1.0"
      }
    }
  }
  EOS
end

#CALCULATE ACTUAL SPEND (SUM OF TOTAL BILLING CENTER COSTS)
datasource "ds_total_cost" do
  run_script $js_get_total_cost, $ds_aggregated_costs, $param_cloud_vendor, $param_cost_metric, rs_org_name
end

script "js_get_total_cost", type: "javascript" do
  parameters "aggregate_costs", "cloud_vendor", "cost_metric", "org_name"
  result "result"
  code <<-EOS
  var totals = []
  total_cost = 0
  _.each(aggregate_costs, function(agg){ 
    totals.push(agg[cost_metric.toLowerCase().replace(/ /g, "_") + "_costs"])
  })
  total_cost = _.reduce(totals, function(memo, num){ return memo + num; }, 0)

  if (cloud_vendor == ""){
    var result = [{
      name: org_name,
      total: total_cost,
      id: null,
      vendor: "Organization (All Vendors)"
    }]
  } else {
    var result = [{
      name: org_name,
      total: total_cost,
      id: null,
      vendor: aggregate_costs[0].vendor
    }]
  } 
  EOS
end

#CALCULATE FORECASTED SPEND (SUM OF TOTAL BC COSTS + EXPECTED COST OVER REMAINING PERIOD)
datasource "ds_actual_forecasted_spend" do
  run_script $js_get_forecasted_spend, $ds_total_cost, $param_start_date, $param_end_date, $param_commitment_target
end

script "js_get_forecasted_spend", type: "javascript" do
  parameters "total_cost", "start_date", "end_date", "commitment_target"
  result "result"
  code <<-EOS 
  var period_length = (new Date( end_date+"-01" ) - new Date( start_date+"-01" )) / (1000 * 3600 * 24)
  var period_completed_to_date = ((new Date() - new Date( start_date+"-01" )) / (1000 * 3600 * 24)) / (period_length )

  var result = []
  _.each(total_cost, function(tc){
    result.push({
      "commitment_period": period_length,
      "period_completed": period_completed_to_date,
      "actual_spend": tc.total,
      "forecasted_spend": (tc.total * (1/period_completed_to_date)) - tc.total, 
      "forecasted_total": tc.total * (1/period_completed_to_date) 
      "commitment_target": commitment_target 
      "name": tc.name,
      "vendor": tc.vendor
    }) 
  })
  EOS
end

#CREATE AND FORMAT CHART DATA
datasource "ds_chart_data" do
  run_script $js_get_chart_data, $ds_actual_forecasted_spend, $ds_currency_reference, $ds_currency_code, $param_commitment_target
end

script "js_get_chart_data", type: "javascript" do
  parameters "spend_data", "curr_ref", "curr_code", "commitment_target"
  result "report"
  code <<-EOS
  var spend_diff = spend_data[0].forecasted_total - commitment_target
  var curr = "$", separator = ",", target_name = "", over_commitment_data = "", over_commitment_label = "", over_commitment_amount_value = "", chart_data_values = ""
  
  if (curr_code.value !== undefined){
    curr = curr_ref[curr_code.value].symbol,
    separator = curr_ref[curr_code.value].t_separator
  }

  function formatNumber(number, separator){
    var values = number.toString().split(".");
    var result = ''

    while (values[0].length > 3){
      var chunk = values[0].substr(-3)
      values[0] = values[0].substr(0, values[0].length - 3)
      result = separator + chunk + result
    }
    if (values[0].length > 0){
      result = values[0] + result
    }
    if(values[1]==undefined){
      return result
    }
    return result + "." + values[1]
  }

  if(spend_diff < 0 ){
    target_name = "Not Met"
  } else {
    target_name = "Met"
  }

  if(target_name == "Met"){
    over_commitment_data = 0+","+(spend_diff.toFixed(2))
    over_commitment_label = "Forecasted+Amount+Over+Commitment+Target"
    over_commitment_amount_value = spend_diff.toFixed(2)
    over_commitment_color = "4CBA54"
    chart_data_values = (curr+formatNumber(spend_data[0].actual_spend.toFixed(2),separator)) +'||' + (curr+formatNumber(spend_data[0].forecasted_spend.toFixed(2),separator)) +'|||'+ (curr+formatNumber(commitment_target,separator)) +'||'+ (curr+formatNumber(over_commitment_amount_value,separator))
  } else {
    over_commitment_data = (spend_diff.toFixed(2)*-1)+","+0
    over_commitment_label = "Forecasted+Amount+Under+Commitment+Target"
    over_commitment_amount_value = spend_diff.toFixed(2)*(-1)
    over_commitment_color = "F04B46"
    chart_data_values = (curr+formatNumber(spend_data[0].actual_spend.toFixed(2),separator)) +'||' + (curr+formatNumber(spend_data[0].forecasted_spend.toFixed(2),separator)) +'|||'+ (curr+formatNumber(commitment_target,separator)) +'|'+ (curr+formatNumber(over_commitment_amount_value,separator) + '|')
  }

  report = {
    chart_type: encodeURI("cht=bhs"),
    chart_size: encodeURI("chs=800x200"),
    chart_data: encodeURI("chd=t:" + (spend_data[0].actual_spend.toFixed(2)) + "," + 0 + "|" + (spend_data[0].forecasted_spend.toFixed(2)) +"," + 0 + "|" + 0 + "," + commitment_target + "|" + over_commitment_data),
    chart_title: encodeURI("chtt=Actual+and+Forecasted+Spend+vs.+Vendor+Commitment+Spend+Target+Report"),
    chart_image: encodeURI("chof=.png"),
    chart_color: encodeURI("chco=4FA8E9,9EC9E9,63CED6," + over_commitment_color),
    chart_label: encodeURI("chdl=Actual+Spend+To+Date|Forecasted+Spend|Commitment+Target+Amount|" + over_commitment_label),
    chart_label_position: encodeURI("chdlp=b"),
    chart_y_axis: encodeURI("chxt=y"),
    chart_y_axis_label: encodeURI("chxl=0:|+1:|+"),
    chart_data_autoscale: encodeURI("chds=a"),
    chart_data_value: encodeURI('chl=' + chart_data_values),
    report_data: encodeURI(spend_data),
    target_adj: target_name,
    bc_org_name: spend_data[0].name,
    cloud_vendor: spend_data[0].vendor
  }
  EOS
end

###############################################################################
# Escalations
###############################################################################

escalation "esc_budget_alert" do
  automatic true
  label "Send Email"
  description "Send incident email"
  email $param_email
end

###############################################################################
# Policy
###############################################################################

policy "policy_commitment_tracker" do
  validate $ds_chart_data do
    summary_template "Vendor Commitment Forecast for {{ parameters.param_cloud_vendor }}"
    detail_template <<-EOS
    # Commitment Target {{ data.target_adj }}
    ### Cloud Vendor: {{ data.cloud_vendor }}
    ### Cost Metric: Unamortized Unblended
    ### Commitment Period: {{ parameters.param_start_date }} to {{ parameters.param_end_date }}
    ![Spending Overview Chart](https://api.image-charts-auth.flexeraeng.com/ic-function?rs_org_id={{ rs_org_id }}&rs_project_id={{ rs_project_id }}&{{ data.chart_type }}&{{ data.chart_data }}&{{ data.chart_size }}&{{ data.chart_image }}&{{ data.chart_color }}&{{ data.chart_label }}&{{ data.chart_y_axis_label }}&{{ data.chart_y_axis }}&{{ data.chart_label_position }}&{{data.chart_data_autoscale}}&{{data.chart_data_value}}&{{ data.chart_title }})
    ___
    ###### Policy Applied in Account: {{ rs_project_name }} (Account ID: {{ rs_project_id }}) within Org: {{ rs_org_name }} (Org ID: {{ rs_org_id }})
    EOS
    escalate $esc_budget_alert
    check eq(0,1)
    export "report_data" do
      field "name" do
        label "Billing Center Name"
      end
      field "vendor" do
        label "Cloud Vendor"
      end
      field "commitment_target" do
        label "Commitment Target Amount"
      end
      field "actual_spend" do
        label "Total Spend to Date"
      end
      field "forecasted_spend" do
        label "Additional Forecasted Spend"
      end
      field "forecasted_total" do
        label "Forecasted Full Period Spend"
      end
    end
  end
end

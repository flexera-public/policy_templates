name "Cloud Spend Forecast - Straight-Line (Linear Regression Model)"
rs_pt_ver 20180301
type "policy"
short_description "Pulls the cost data for lookback period then generates a Straight-Line Forecast for the specified months using a Linear Regression model. See the [README](https://github.com/flexera/policy_templates/tree/master/cost/forecasting/straight_line_forecast/) and [docs.flexera.com/flexera/EN/Automation](https://docs.flexera.com/flexera/EN/Automation/AutomationGS.htm) to learn more."
long_description ""
severity "high"
category "Cost"
tenancy "single"
default_frequency "monthly"
info(
  version: "2.1",
  provider: "Flexera Optima",
  service: "",
  policy_set: "Forecasting"
)

###############################################################################
# Permissions
###############################################################################

###############################################################################
# Parameters
###############################################################################

parameter "param_billing_centers" do
  label "Billing Center Name"
  description "List of Billing Center Names to check"
  type "list"
end

parameter "param_lookback_months" do
  label "Lookback Months"
  description "Number of months to lookback to generate forecast"
  type "number"
  default 10
end

parameter "param_forecasted_months" do
  label "Months to forecast"
  description "Number of months in the future to forecast"
  type "number"
  default 6
end

parameter "param_cost_metric" do
  type "string"
  label "Cost Metric"
  allowed_values "Amortized Unblended", "Amortized Blended"
  default "Amortized Unblended"
  description "Select the cost metric for your report.  See the README file for more details"
end

parameter "param_email" do
  label "Email Addresses"
  description "Email addresses of the recipients you wish to notify"
  type "list"
end

parameter "param_dimension" do
  label "Dimension"
  description "Select dimension, leave blank for no dimensions"
  type "string"
  allowed_values ["Category", "Region", "Service", "Vendor Account Name"]
  default "Category"
end

###############################################################################
# Authentication
###############################################################################

#AUTHENTICATE WITH RIGHTSCALE/OPTIMA
credentials "auth_rs" do
  schemes "oauth2"
  label "Flexera_Automation"
  description "Select FlexeraOne OAuth2 credentials"
  tags "provider=flexera"
end

###############################################################################
# Datasources and Scripts
###############################################################################

#GET CURRENCY REFERENCE
datasource "ds_currency_reference" do
  request do
    host "raw.githubusercontent.com"
    path "/rightscale/policy_templates/master/cost/scheduled_reports/currency_reference.json"
    header "User-Agent", "RS Policies"
  end
end

#GET CURRENCY CODE FOR ORG
datasource "ds_currency_code" do
  request do
    auth $auth_rs
    host rs_optima_host
    path join(["/bill-analysis/orgs/",rs_org_id,"/settings/currency_code"])
    header "Api-Version", "0.1"
    header "User-Agent", "RS Policies"
  end
  result do
    encoding "json"
    field "id", jmes_path(response,"id")
    field "value", jmes_path(response,"value")
  end
end

#GET ALL BILLING CENTERS FOR ORG
datasource "ds_billing_centers" do
  request do
    auth $auth_rs
    host rs_optima_host
    path join(["/analytics/orgs/",rs_org_id,"/billing_centers"])
    header "Api-Version", "1.0"
    header "User-Agent", "RS Policies"
    query "view", "allocation_table"
  end
  result do
    encoding "json"
    collect jmes_path(response,"[*]") do
      field "href", jmes_path(col_item,"href")
      field "id", jmes_path(col_item,"id")
      field "name", jmes_path(col_item,"name")
      field "parent_id", jmes_path(col_item,"parent_id")
      field "ancestor_ids", jmes_path(col_item,"ancestor_ids")
      field "allocation_table", jmes_path(col_item,"allocation_table")
    end
  end
end

#CREATE LIST OF PAST MONTHS
datasource "ds_past_month_list" do
  run_script $js_generate_past_month_list, $param_lookback_months
end

script "js_generate_past_month_list", type: "javascript" do
  parameters "param_lookback_months"
  result "month_list"
  code <<-EOS
  var month_list = [];
  // format the date for the `daily` API
  // returns date formatted as string: YYYY-mm-dd
  function getFormattedDailyDate(date) {
    var year = date.getFullYear();
    var month = (1 + date.getMonth()).toString();
    month = month.length > 1 ? month : '0' + month;
    return year + '-' + month;
  }

  function getStartDate( date, month_counter ) {
    date.setMonth(date.getMonth() - month_counter);
    return date;
  }

  function getEndDate( date, month_counter ) {
    date.setMonth(date.getMonth() - (month_counter - 1));
    return date;
  }

  _.each(_.range(1, param_lookback_months + 1), function (month_counter) {
    var start_date = getFormattedDailyDate(getStartDate(new Date(), month_counter));
    var end_date = getFormattedDailyDate(getEndDate(new Date(), month_counter));
    month_list.push({
      'start_date': start_date,
      'end_date': end_date,
    });
  });
  EOS
end

#GET COST DATA FOR BILLING CENTERS (AND DIMENSION IF APPLICABLE)
datasource "ds_costs" do
  iterate $ds_past_month_list
  request do
    run_script $js_new_costs_request, rs_optima_host, rs_org_id, $ds_billing_centers, $param_cost_metric, $param_billing_centers, $param_dimension, val(iter_item, 'start_date'), val(iter_item, 'end_date')
  end
  result do
    encoding "json"
    collect jmes_path(response,"rows[*]") do
      field "start_date", val(iter_item,"start_date")
      field "cost_amortized_unblended_adj", jmes_path(col_item,"metrics.cost_amortized_unblended_adj")
      field "cost_amortized_blended_adj", jmes_path(col_item,"metrics.cost_amortized_blended_adj")
      field "id", jmes_path(col_item,"dimensions.billing_center_id")
      field "category", jmes_path(col_item,"dimensions.category")
      field "region", jmes_path(col_item,"dimensions.region")
      field "service", jmes_path(col_item,"dimensions.service")
      field "vendor_account", jmes_path(col_item,"dimensions.vendor_account")
      field "timestamp", jmes_path(col_item,"timestamp")
    end
  end
end

script "js_new_costs_request", type: "javascript" do
  parameters "rs_optima_host", "org_id", "ds_billing_centers", "param_cost_metric", "param_billing_centers", "param_dimension", "start_at", "end_at"
  result "request"
  code <<-EOS

  //Get billing centers. If user specifies no billing centers, retrieve all top level billing centers. Else get array of billing centers that match the names stated in BC param
  var billing_center_ids = []
  if (param_billing_centers.length === 0){
    var top_billing_centers = _.reject(ds_billing_centers, function(bc){ return bc.parent_id != null });
    billing_center_ids = _.map(top_billing_centers, function(value, key){ return value.id });
  } else {
    billing_center_names = _.map(param_billing_centers, function(name){ return name.toLowerCase(); });
    billing_center_ids = _.compact(_.map(ds_billing_centers, function(value){ if(_.contains(billing_center_names, value.name.toLowerCase())){return value.id} }));
  }

  //Mapping for cost metrics
  var cost_metric = {
    "Amortized Unblended":"cost_amortized_unblended_adj",
    "Amortized Blended":"cost_amortized_blended_adj"
  }

  //Mapping for dimensions
  dimensions = [ "billing_center_id", "category" ]
  if(param_dimension != "" && param_dimension != "Category"){
    dimensions = [ "billing_center_id", "category", (param_dimension.toLowerCase().replace(/ /g,"_")) ]
  }

  //POST Request
  var request = {
    auth: "auth_rs",
    verb: "POST",
    host: rs_optima_host,
    path: "/bill-analysis/orgs/" + org_id + "/costs/aggregated",
    body_fields: {
      "dimensions": dimensions,
      "granularity": "month",
      "metrics": [cost_metric[param_cost_metric]],
      "billing_center_ids": billing_center_ids,
      "start_at": start_at,
      "end_at": end_at
    },
    headers: {
      "Api-Version": "1.0",
      "User-Agent": "RS Policies",
    }
  }
  EOS
end

#GROUP COSTS BY DIMENSION AND BY MONTH
datasource "ds_data_package" do
  run_script $js_make_data_package, $param_cost_metric, $param_forecasted_months, $param_dimension, $ds_costs
end

script "js_make_data_package", type: "javascript" do
  parameters "param_cost_metric", "param_forecasted_months", "param_dimension", "ds_costs"
  result "results"
  code <<-EOS
  var results = [];

  //Cost Metric Mapping
  var cost_metric = {
    "Amortized Unblended":"cost_amortized_unblended_adj",
    "Amortized Blended":"cost_amortized_blended_adj"
  }

  //Dimension Mapping
  var dimension_type = {
    "Category": "category",
    "Region": "region",
    "Service": "service",
    "Vendor Account": "vendor_account"
  }

  //Ignore costs where Category is "Commitments"
  ds_costs = _.reject(ds_costs, function(cost){ return cost.category == "Commitments" })

  //For each month, for each type in dimension, sum costs
  month = _.pluck(_.uniq(ds_costs, function(cost){ return cost.start_date }), "start_date" )
  dimension = _.pluck(_.uniq(ds_costs, function(cost){ return cost[dimension_type[param_dimension]] }), dimension_type[param_dimension] )

  sum_costs_by_dimension = []
  _.each(month, function(mo){
    _.each(dimension, function(dim){
      total_cost = 0
      timestamp = mo + "-01T00:00:00Z"
      _.each(ds_costs, function(cost){
        if(cost.start_date == mo && cost[dimension_type[param_dimension]] == dim ){
          if(cost[cost_metric[param_cost_metric]] == null){
            cost[cost_metric[param_cost_metric]] = 0
          }
          total_cost += cost[cost_metric[param_cost_metric]]
          timestamp = cost.timestamp
        }
      })
      sum_costs_by_dimension.push({
        "month": mo,
        "dimension": dim,
        "cost": total_cost,
        "timestamp": timestamp
      })
    })
  })

  //Get highest 8 Dimension values for Costs - Currently not used
  cost_totals_for_dims = []
  _.each(dimension, function (dim) {
    total_cost_12_months = 0
    _.each(sum_costs_by_dimension, function(data) {
      if (data.dimension == dim) {
        total_cost_12_months += data.cost
      }
    })
    cost_totals_for_dims.push({
      "total_cost_12_months": total_cost_12_months,
      "dimension": dim
    })
  })
  top_8_dimensions = _.last( _.pluck( _.sortBy(cost_totals_for_dims, "total_cost_12_months"), "dimension" ), [8] )

  //If Dimension value is not in 8 highest Hours used, then put into "Other" category
  result = []
  _.each(month, function (mo) {
    total_costs_other = 0
    timestamp = mo + "-01T00:00:00Z"
    _.each(sum_costs_by_dimension, function(data) {
      if (data.month == mo) {
        exists = _.find(top_8_dimensions, function (dim){ return dim == data.dimension })
        if (exists == null || data.dimension == "Other") {
          total_costs_other += data.cost
        } else {
          result.push({
            "start_date": data.month,
            "dimension": data.dimension,
            "cost": data.cost,
            "timestamp": data.timestamp
          })
        }
      }
    })
    result.push({
      "start_date": mo,
      "dimension": "Other",
      "cost": total_costs_other,
      "timestamp": timestamp
    })
  })

  results.push({
    costs: result,
    forecasted_months: param_forecasted_months,
  })
  EOS
end

#CALCULATE FORECAST DATA
datasource "ds_forecast_data" do
  run_script $js_get_forecast_data, $ds_data_package, $param_lookback_months
end

script "js_get_forecast_data", type: "javascript" do
  parameters "data_package", "lookback_months"
  result "report_data"
  code <<-EOS

  //Group data by Dimension (Category/Region/Vendor Account etc.)
  var group_by_dimension = _.groupBy(data_package[0].costs, function(data){ return data.dimension }) 

  //Calculate linear regression line/line of best fit across data
  var forecast_data = []
  var dimensions = _.keys(group_by_dimension)
  _.each(dimensions, function(dim_from_list){
    n = 0
    sum_x = 0, sum_x_squared = 0, x_mean = 0
    sum_y = 0, sum_x_y = 0, y_mean = 0

    _.each(group_by_dimension[dim_from_list], function(dim){
      //get the cost and the month (as an integer e.g. 2021-02 is x=1, 2021-03 is x=2, etc.)
      x = group_by_dimension[dim_from_list].length - n          //represents month on the x axis
      y = dim.cost                //represents cost on the y axis
      x_squared = x * x   
      x_y = x * y

      if(dim_from_list == "Database"){
        console.log(dim_from_list, "x y product = " + x_y, "x and y are", x, y)
      }

      sum_x += x, sum_x_squared += x_squared
      sum_y += y, sum_x_y += x_y
      n++
    })

    x_mean = sum_x / n    // n = number of months
    y_mean = sum_y / n

    //Calculate Sxx and Sxy to then calculate Beta
    s_xx = sum_x_squared - ((sum_x * sum_x) / n)
    s_xy = sum_x_y - ((sum_x * sum_y) / n)
    console.log(dim_from_list, "Sxx = " + s_xx, "Sxy = " + s_xy)
    beta = s_xy / s_xx

    //Calculate Alpha
    alpha = y_mean - (beta * x_mean)

    //Data required to calculate forecast costs
    forecast_data.push({
      "dimension": dim_from_list,
      "alpha": alpha,
      "beta": beta,
      "historical_months": n
    })
  })
  
  //Function to get formatted month
  function getFormattedDailyDate( date ){
    var year = date.getFullYear();
    var month = (1 + date.getMonth()).toString();
    month = month.length > 1 ? month : '0' + month;
    return year + '-' + month;
  }
  
  //Function to get future forecasted months
  function getFutureMonth( date, month_counter ){
    date.setMonth(date.getMonth() + month_counter);
    return date;
  }
  
  //Calculate forecasted costs for each future month (For each month use linear regression line to extrapolate costs for each dimension)
  report_data = []
  for(i = 0; i < data_package[0].forecasted_months; i++){
    var forecast_month = getFormattedDailyDate( getFutureMonth( new Date(), i ) )
    _.each(forecast_data, function(data){
      x_value = data.historical_months + (i + 1)        //'x' in y = bx + a (x represents forecasted month)
      y_value = (data.beta * x_value) + data.alpha      //'y' in y = bx + a (y represents forecasted cost)
      
      if(y_value < 0){ y_value = 0 }                    //To stop downward trends in cost from going below 0
      
      report_data.push({
        "month": forecast_month,
        "dimension": data.dimension,
        "forecasted_cost": parseFloat(y_value).toFixed(2)
      })
    })
  }
  EOS
end

#CREATE CHART
datasource "ds_chart_data" do
  run_script $js_create_chart_data, $ds_forecast_data, $param_dimension
end

script "js_create_chart_data", type: "javascript" do
  parameters "forecast_data", "param_dimension"
  result "report"
  code <<-EOS

  //Group data by Dimension
  group_by_dimension = 
  _.groupBy(forecast_data, function(data){ return data.dimension })
  report = forecast_data

  //Create chart axis labels
  chart_axis_labels = 
  ("chxl=0:," + 
    _.uniq(forecast_data, function(data){ return data.month })
    .map(function(data){ return data.month })
  ).split(",").join("|")

  //Create legend
  chart_legend = "chdl="
  var i = 0 
  for (var key in group_by_dimension) {
    chart_legend += key
    i++
    if (i < _.size(group_by_dimension)) { chart_legend += "|" }
  }

  //Create chart dataset
  chart_data = "chd=t:"
  var count_1 = 0
  _.each(group_by_dimension, function(o){
    var count_2 = 0
    _.each(o, function(p){
      chart_data = chart_data + p.forecasted_cost
      count_2++
      if (count_2 < _.size(o)){ chart_data = chart_data + "," } 
    })
    count_1++
    if (count_1 < _.size(group_by_dimension)){ chart_data = chart_data + "|" }
  })

  //Create Chart Title
  policy_title = "Forecasted Costs by " + param_dimension
  chart_title = "chtt=" + policy_title
  if( param_dimension == "" ){
    policy_title = "Forecasted Costs"
    chart_title = "chtt=" + policy_title
  }

  //get current month
  var month_names = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']
  var now = new Date();
  var current_month_name = month_names[now.getMonth()];
  //Whole Chart object
  chart = {
    chart_type: encodeURI("cht=bvs"),
    chart_size: encodeURI("chs=900x500"),
    chart_data: encodeURI(chart_data),
    chart_title: encodeURI(chart_title),
    chart_image: encodeURI("chof=.png"),  
    chart_label_position: encodeURI("chdlp=b"),
    chart_axis: encodeURI("chxt=x,y"),
    chart_axis_label: encodeURI(chart_axis_labels),
    chart_axis_format: encodeURI("chxs=1N*cUSD0sz*"),
    chart_line_style: encodeURI("chls=3|3|3|3|3|3|3|3|3|3|3"),
    chart_line_color: encodeURI("chco=6929c4,9f1853,198038,b28600,1192e8,009d9a,005d5d,007d79"),
    chart_data_scale: encodeURI("chds=a"),
    chart_legend: encodeURI(chart_legend),
    chart_legend_size: encodeURI("chdls=000000,5"),
    policy_title: policy_title,
    current_month_name: current_month_name
  }

  report[0]["chart_dimensions"] = chart
  EOS
end

###############################################################################
# Escalations
###############################################################################

escalation "esc_straight_line_forecast" do
  automatic true
  label "Send Email"
  description "Send incident email"
  email $param_email
end

###############################################################################
# Policy
###############################################################################

policy "policy_straight_line_forecast" do
  validate $ds_chart_data do
    summary_template "Forecasted Costs"
    detail_template <<-EOS
    # Full Cost Report for {{ rs_org_name }} - {{ with index data 0 }}{{ .chart_dimensions.current_month_name }}{{ end }}
    ![Forecast Chart](https://image-charts.com/chart?{{ with index data 0 }}{{ .chart_dimensions.chart_data }}{{ end }}&{{ with index data 0 }}{{ .chart_dimensions.chart_size }}{{ end }}&{{ with index data 0 }}{{ .chart_dimensions.chart_type }}{{ end }}&{{ with index data 0 }}{{ .chart_dimensions.chart_image }}{{ end }}&{{ with index data 0 }}{{ .chart_dimensions.chart_title }}{{ end }}&{{ with index data 0 }}{{ .chart_dimensions.chart_label_position }}{{ end }}&{{ with index data 0 }}{{ .chart_dimensions.chart_axis }}{{ end }}&{{ with index data 0 }}{{ .chart_dimensions.chart_axis_label }}{{ end }}&{{ with index data 0 }}{{ .chart_dimensions.chart_line_style }}{{ end }}&{{ with index data 0 }}{{ .chart_dimensions.chart_line_color }}{{ end }}&{{ with index data 0 }}{{ .chart_dimensions.chart_data_scale }}{{ end }}&{{ with index data 0 }}{{ .chart_dimensions.chart_legend_size }}{{ end }}&{{ with index data 0 }}{{ .chart_dimensions.chart_legend }}{{ end }}&{{ with index data 0 }}{{ .chart_dimensions.chart_axis_format }}{{ end }})
    ___
    ###### Policy Applied in Account: {{ rs_project_name }} (Account ID: {{ rs_project_id }}) within Org: {{ rs_org_name }} (Org ID: {{ rs_org_id }})
    EOS
    escalate $esc_straight_line_forecast
    check eq(1,0)
    export do
      field "month" do
        label "Month"
      end
      field "dimension" do
        label "Dimension Value"
      end
      field "forecasted_cost" do
        label "Forecasted Costs"
      end
    end
  end
end

name "Straight-Line Forecast"
rs_pt_ver 20180301
type "policy"
short_description "Pulls the cost data for lookback period then generates a Straight-Line Forecast for the specified months. See the [README](https://github.com/rightscale/policy_templates/tree/master/cost/forecasting/straight_line_forecast/) and [docs.flexera.com/flexera/EN/Automation](https://docs.flexera.com/flexera/EN/Automation/AutomationGS.htm) to learn more."
long_description ""
severity "high"
category "Cost"
tenancy "single"
default_frequency "daily"
info(
  version: "2.2",
  provider: "Flexera Optima",
  service: "",
  policy_set: "Forecasting"
)

###############################################################################
# Permissions
###############################################################################

###############################################################################
# Parameters
###############################################################################

parameter "param_billing_centers" do
  label "Billing Center Name"
  description "List of Billing Center Names to check"
  type "list"
end

parameter "param_lookback_months" do
  label "Lookback Months"
  description "Number of months to lookback to generate forecast"
  type "number"
  default 10
end

parameter "param_forecasted_months" do
  label "Months to forecast"
  description "Number of months in the future to forecast"
  type "number"
  default 6
end

parameter "param_cost_metric" do
  type "string"
  label "Cost Metric"
  allowed_values "Unamortized Unblended","Amortized Unblended","Unamortized Blended","Amortized Blended"
  default "Unamortized Unblended"
  description "Select the cost metric for your report.  See the README file for more details"
end

parameter "param_email" do
  label "Email Addresses"
  description "Email addresses of the recipients you wish to notify"
  type "list"
end

###############################################################################
# Authentication
###############################################################################

credentials "auth_rs" do
  schemes "oauth2"
  label "flexera"
  description "Select FlexeraOne OAuth2 credentials"
  tags "provider=flexera"
end

###############################################################################
# Resources
###############################################################################

###############################################################################
# Datasources
###############################################################################

datasource "ds_currency_reference" do
  request do
    host "raw.githubusercontent.com"
    path "/rightscale/policy_templates/master/cost/scheduled_reports/currency_reference.json"
    header "User-Agent", "RS Policies"
  end
end

datasource "ds_currency_code" do
  request do
    auth $auth_rs
    host rs_optima_host
    path join(["/bill-analysis/orgs/",rs_org_id,"/settings/currency_code"])
    header "Api-Version", "0.1"
    header "User-Agent", "RS Policies"
  end
  result do
    encoding "json"
    field "id", jmes_path(response,"id")
    field "value", jmes_path(response,"value")
  end
end

datasource "ds_billing_centers" do
  request do
    auth $auth_rs
    host rs_optima_host
    path join(["/analytics/orgs/",rs_org_id,"/billing_centers"])
    header "Api-Version", "1.0"
    header "User-Agent", "RS Policies"
    query "view", "allocation_table"
  end
  result do
    encoding "json"
    collect jmes_path(response,"[*]") do
      field "href", jmes_path(col_item,"href")
      field "id", jmes_path(col_item,"id")
      field "name", jmes_path(col_item,"name")
      field "parent_id", jmes_path(col_item,"parent_id")
      field "ancestor_ids", jmes_path(col_item,"ancestor_ids")
      field "allocation_table", jmes_path(col_item,"allocation_table")
    end
  end
end

datasource "ds_past_month_list" do
  run_script $js_generate_past_month_list, $param_lookback_months
end

datasource "ds_costs" do
  iterate $ds_past_month_list
  request do
    run_script $js_new_costs_request, rs_optima_host, rs_org_id, $ds_billing_centers, $param_cost_metric, $param_billing_centers, val(iter_item, 'start_date'), val(iter_item, 'end_date')
  end
  result do
    encoding "json"
    collect jmes_path(response,"rows[*]") do
      field "start_date", val(iter_item,"start_date")
      field "cost_amortized_unblended_adj", jmes_path(col_item,"metrics.cost_amortized_unblended_adj")
      field "cost_amortized_blended_adj", jmes_path(col_item,"metrics.cost_amortized_blended_adj")
      field "cost_nonamortized_unblended_adj", jmes_path(col_item,"metrics.cost_nonamortized_unblended_adj")
      field "cost_nonamortized_blended_adj", jmes_path(col_item,"metrics.cost_nonamortized_blended_adj")
      field "id", jmes_path(col_item,"dimensions.billing_center_id")
      field "timestamp", jmes_path(col_item,"timestamp")
    end
  end
end

datasource "ds_make_data_package" do
  run_script $js_make_data_package, $param_cost_metric, $param_forecasted_months, $ds_costs
end

datasource "ds_forecast" do
  run_script $js_forecast, $ds_make_data_package
end

###############################################################################
# Scripts
###############################################################################
script "js_generate_past_month_list", type: "javascript" do
  parameters "param_lookback_months"
  result "month_list"
  code <<-EOS
  var month_list = [];
  // format the date for the `daily` API
  // returns date formatted as string: YYYY-mm-dd
  function getFormattedDailyDate(date) {
    var year = date.getFullYear();
    var month = (1 + date.getMonth()).toString();
    month = month.length > 1 ? month : '0' + month;
    return year + '-' + month;
  }

  function getStartDate( date, month_counter ) {
    date.setMonth(date.getMonth() - month_counter);
    return date;
  }

  function getEndDate( date, month_counter ) {
    date.setMonth(date.getMonth() - (month_counter - 1));
    return date;
  }

  _.each(_.range(1, param_lookback_months + 1), function (month_counter) {
    var start_date = getFormattedDailyDate(getStartDate(new Date(), month_counter));
    var end_date = getFormattedDailyDate(getEndDate(new Date(), month_counter));
    month_list.push({
      'start_date': start_date,
      'end_date': end_date,
    });
  });
EOS
end

script "js_new_costs_request", type: "javascript" do
  parameters "rs_optima_host", "org_id", "ds_billing_centers", "param_cost_metric", "param_billing_centers", "start_at", "end_at"
  result "request"
  code <<-EOS
    var cost_metric = {
      "Unamortized Unblended":"cost_nonamortized_unblended_adj",
      "Amortized Unblended":"cost_amortized_unblended_adj",
      "Unamortized Blended": "cost_nonamortized_blended_adj",
      "Amortized Blended":"cost_amortized_blended_adj"
    }
    var billing_center_ids = []
    if (param_billing_centers.length === 0){
      var top_billing_centers = _.reject(ds_billing_centers, function(bc){ return bc.parent_id != null });
      billing_center_ids = _.map(top_billing_centers, function(value, key){ return value.id });
    } else {
      // get array of billing center id's that match the names in param_billing_centers.
      billing_center_names = _.map(param_billing_centers, function(name){ return name.toLowerCase(); });
      billing_center_ids = _.compact(_.map(ds_billing_centers, function(value){ if(_.contains(billing_center_names, value.name.toLowerCase())){return value.id} }));
    }

    var request = {
      auth: "auth_rs",
      verb: "POST",
      host: rs_optima_host,
      path: "/bill-analysis/orgs/" + org_id + "/costs/aggregated",
      body_fields: {
        "dimensions": ["billing_center_id"],
        "granularity": "month",
        "metrics": [cost_metric[param_cost_metric]],
        "billing_center_ids": billing_center_ids,
        "start_at": start_at,
        "end_at": end_at
      },
      headers: {
        "Api-Version": "1.0",
        "User-Agent": "RS Policies",
      }
    }
  EOS
end

script "js_make_data_package", type: "javascript" do
  parameters "param_cost_metric", "param_forecasted_months", "ds_costs"
  result "results"
  code <<-EOS
  var results = [];

  var cost_metric = {
    "Unamortized Unblended":"cost_nonamortized_unblended_adj",
    "Amortized Unblended":"cost_amortized_unblended_adj",
    "Unamortized Blended": "cost_nonamortized_blended_adj",
    "Amortized Blended":"cost_amortized_blended_adj"
  }

  var mapped_costs = _.groupBy(ds_costs, function (value) {
    return value.start_date;
  });
  var unsorted_results = _.map(mapped_costs, function (group) {
    var counter = 0;
    for (var i = 0; i < group.length; i++) {
      var item = group[i];
      if (item[cost_metric[param_cost_metric]] == 0) {
        counter = counter + 1;
      } else {
        break;
      }
    }

    var arr_new_sum = _.pluck(group, cost_metric[param_cost_metric]);

    var summed = _.reduce(arr_new_sum, function (memo, num) { return memo + num; }, 0);
    return {
      start_date: group[0].start_date,
      cost: summed,
    };
  });
  var costs = [];
  _.each(unsorted_results, function (item) {
    costs.push({
      start_date: item.start_date,
      cost: item.cost,
    });
  });

  var sorted_costs = _.sortBy(costs, function (o) { var dt = new Date(o.start_date); return -dt; });
  console.log(sorted_costs);
  results.push({
    costs: sorted_costs,
    forecasted_months: param_forecasted_months,
  });
EOS
end

script "js_forecast", type: "javascript" do
  parameters "ds_make_data_package"
  result "report"
  code <<-EOS
  var forecasted_costs = [];
  function getFormattedDailyDate(date) {
    var year = date.getFullYear();
    var month = (1 + date.getMonth()).toString();
    month = month.length > 1 ? month : '0' + month;
    return year + '-' + month;
  }
  function getFutureMonth( date, month_counter ) {
    date.setMonth(date.getMonth() + month_counter);
    return date;
  }

  var costs = ds_make_data_package[0].costs;
  var forecasted_months = ds_make_data_package[0].forecasted_months;
  var end_cost = costs[0].cost;
  var start_cost = costs[costs.length - 1].cost;
  var percent_difference = ((end_cost / start_cost) - 1);
  var monthly_percent_difference = (percent_difference / costs.length);
  var forecasted_cost = costs[0].cost;
  var chartDataArray = [];
  var XAxisArray = [];
  var monthNames = ['January', 'February', 'March', 'April', 'May', 'June',
    'July', 'August', 'September', 'October', 'November', 'December',
  ];
  _.each(_.range(1, forecasted_months + 1), function (month) {
    forecasted_cost = forecasted_cost + (forecasted_cost * monthly_percent_difference);
    var future_month = getFormattedDailyDate( getFutureMonth(new Date(), month));
    chartDataArray.push(parseInt(forecasted_cost));
    XAxisArray.push(monthNames[parseInt(future_month.split('-')[1]) - 1]);
    forecasted_costs.push( {
      month: future_month,
      forecasted_cost: parseInt(forecasted_cost),
    } );
  } );


  var now = new Date();
  var currentMonthName = monthNames[now.getMonth()];
  var chartData = 'chd=a:|' + chartDataArray.join(',');
  var chartXAxis = 'chxl=0:|' + XAxisArray.join('|');
  var report = {
    chartType: encodeURI('cht=bvo'),
    chartSize: encodeURI('chs=999x500'),
    chartTitle: encodeURI('chtt=Forecasted Costs'),
    chartAxis: encodeURI('chxt=x,y'),
    chartXAxis: encodeURI(chartXAxis),
    chartAxisFormat: encodeURI('chxs=1N*cUSD0sz*'),
    chartData: encodeURI(chartData),
    chartColors: encodeURI('chco=CFECF7,27c9c2'),
    chartExtension: encodeURI('chof=.png'),
    currentMonthName: currentMonthName,
    reportData: forecasted_costs,
  };
  console.log(report);
EOS
end

###############################################################################
# Escalations
###############################################################################

escalation "esc_straight_line_forecast" do
  automatic true
  label "Send Email"
  description "Send incident email"
  email $param_email
end

###############################################################################
# Policy
###############################################################################

policy "policy_straight_line_forecast" do
  validate $ds_forecast do
    summary_template "Forecasted Costs"
    detail_template <<-EOS
# Full Cost Report for {{ rs_org_name }} - {{ data.currentMonthName }}
![Forecast Chart](https://image-charts.com/chart?{{ data.chartType }}&{{ data.chartSize }}&{{ data.chartTitle }}&{{ data.chartAxis }}&{{ data.chartXAxis }}&{{ data.chartAxisFormat }}&{{ data.chartData }}&{{ data.chartColors }}&{{ data.chartExtension }} "Forecasting Spend Chart")
___
###### Policy Applied in Account: {{ rs_project_name }} (Account ID: {{ rs_project_id }}) within Org: {{ rs_org_name }} (Org ID: {{ rs_org_id }})
    EOS
    escalate $esc_straight_line_forecast
    check eq(1,0)
    export "reportData" do
      field "month" do
        label "Month"
      end
      field "forecasted_cost" do
        label "Forecasted Costs"
      end
    end
  end
end

###############################################################################
# Cloud Workflow
###############################################################################

name "Budget Alerts"
rs_pt_ver 20180301
type "policy"
short_description "Report if budget threshold has been exceeded for a selected Flexera budget. See the [README](https://github.com/flexera-public/policy_templates/tree/master/cost/flexera/cco/budget_report_alerts/) and [docs.flexera.com/flexera/EN/Automation](https://docs.flexera.com/flexera/EN/Automation/AutomationGS.htm) to learn more."
long_description ""
doc_link "https://github.com/flexera-public/policy_templates/tree/master/cost/flexera/cco/budget_report_alerts/"
severity "medium"
category "Cost"
default_frequency "daily"
info(
  version: "3.4.2",
  provider: "Flexera",
  service: "Cloud Cost Optimization",
  policy_set: "Cloud Cost Optimization",
  hide_skip_approvals: "true"
)

###############################################################################
# Parameters
###############################################################################

parameter "param_email" do
  type "list"
  category "Policy Settings"
  label "Email Addresses"
  description "A list of email addresses to notify"
  default []
end

parameter "param_budget_name_id" do
  type "string"
  category "Policy Settings"
  label "Budget Name or ID"
  description "Provide the name or id of a Budget"
  constraint_description "Budget Name or ID is a required field"
  min_length 1
  # No default value, user input required
end

parameter "param_threshold_percentage" do
  type "number"
  category "Policy Settings"
  label "Threshold Percentage"
  description "Percentage of budget amount to alert on"
  min_value 1
  default 90
end

parameter "param_type" do
  type "string"
  category "Policy Settings"
  label "Budget Alert Type"
  description "Actual Spend alerts are based off incurred costs. Forecasted Spend alerts are based off monthly runrates."
  allowed_values "Actual Spend", "Forecasted Spend"
  default "Actual Spend"
end

parameter "param_use_groups" do
  type "string"
  category "Policy Settings"
  label "Degree of Summarization"
  description "How to group the data. The 'Summarized' option does not support filtering; if selected, the 'Filter Group By Dimension(s)' parameter will have no effect."
  allowed_values "Summarized", "By dimensions"
  default "Summarized"
end

parameter "param_filter" do
  type "list"
  category "Policy Settings"
  label "Filter Group By Dimension(s)"
  description "Enable budget tracking for specific dimensions and values. Only supports dimensions provided in the group previously defined in the budget. Has no effect if the 'Summarized' option is selected for the 'Degree of Summarization' parameter."
  default []
end

parameter "param_unbudgeted" do
  type "string"
  category "Policy Settings"
  label "Unbudgeted Spend"
  description "Whether to include or exclude Unbudgeted Spend"
  allowed_values "Exclude Unbudgeted Spend", "Include Unbudgeted Spend"
  default "Exclude Unbudgeted Spend"
end

###############################################################################
# Authentication
###############################################################################

credentials "auth_flexera" do
  schemes "oauth2"
  label "flexera"
  description "Select Flexera One OAuth2 credentials"
  tags "provider=flexera"
end

###############################################################################
# Datasources & Scripts
###############################################################################

datasource "ds_currency_reference" do
  request do
    host "raw.githubusercontent.com"
    path "/flexera-public/policy_templates/master/data/currency/currency_reference.json"
    header "User-Agent", "RS Policies"
  end
end

datasource "ds_currency_code" do
  request do
    auth $auth_flexera
    host rs_optima_host
    path join(["/bill-analysis/orgs/", rs_org_id, "/settings/currency_code"])
    header "Api-Version", "0.1"
    header "User-Agent", "RS Policies"
    ignore_status [403]
  end
  result do
    encoding "json"
    field "id", jmes_path(response, "id")
    field "value", jmes_path(response, "value")
  end
end

datasource "ds_currency" do
  run_script $js_currency, $ds_currency_reference, $ds_currency_code
end

script "js_currency", type:"javascript" do
  parameters "ds_currency_reference", "ds_currency_code"
  result "result"
  code <<-EOS
  code = "USD"
  symbol = "$"
  separator = ","

  if (ds_currency_code['value'] != undefined) {
    if (ds_currency_reference[ds_currency_code['value']] != undefined) {
      code = ds_currency_reference[ds_currency_code['value']]['code']
      symbol = ds_currency_reference[ds_currency_code['value']]['symbol']

      if (ds_currency_reference[ds_currency_code['value']]['t_separator'] != undefined) {
        separator = ds_currency_reference[ds_currency_code['value']]['t_separator']
      } else {
        separator = ""
      }
    }
  }

  result = {
    code: code,
    symbol: symbol,
    separator: separator
  }
EOS
end

datasource "ds_get_dimensions" do
  request do
    auth $auth_flexera
    host rs_optima_host
    path join(["/bill-analysis/orgs/", rs_org_id, "/costs/dimensions"])
    header "Api-Version", "0.1"
    header "User-Agent", "RS Policies"
  end
  result do
    encoding "json"
    collect jmes_path(response, "dimensions[].{id: id, name: name, type:type}") do
      field "id", jmes_path(col_item, "id")
      field "name", jmes_path(col_item, "name")
      field "type", jmes_path(col_item, "type")
    end
  end
end

datasource "ds_dimensions" do
  run_script $js_dimensions, $ds_get_dimensions
end

script "js_dimensions", type: "javascript" do
  parameters "ds_get_dimensions"
  result "result"
  code <<-EOS
  result = {}
  _.each(ds_get_dimensions, function(dimension) { result[dimension['id']] = dimension['name'] })
EOS
end

datasource "ds_filters" do
  run_script $js_filters, $ds_dimensions, $param_filter
end

script "js_filters", type: "javascript" do
  parameters "ds_dimensions", "param_filter"
  result "result"
  code <<-EOS
  result = {}
  dimensions = _.invert(ds_dimensions)

  _.each(param_filter, function(filter) {
    key = filter.split('=')[0] ? filter.split('=')[0].trim() : null
    if (dimensions[key]) { key = dimensions[key] }

    value = filter.split('=')[1] ? filter.split('=')[1].trim() : null

    if (key && value) {
      values = _.map(value.split(","), function(item) { return item.trim() })
      result[key] = values
    }
  })
EOS
end

datasource "ds_budgets" do
  request do
    auth $auth_flexera
    host rs_optima_host
    path join(["/bill-analysis/orgs/", rs_org_id, "/budgets"])
    header "Api-Version", "1.0"
    header "User-Agent", "RS Policies"
  end
  result do
    encoding "json"
    collect jmes_path(response, "[*]") do
      field "id", jmes_path(col_item, "id")
      field "name", jmes_path(col_item, "name")
      field "metric", jmes_path(col_item, "metric")
      field "dimensions", jmes_path(col_item, "dimensions")
      field "yearMonths", jmes_path(col_item, "yearMonths")
    end
  end
end

datasource "ds_filtered_budgets" do
  run_script $js_filtered_budgets, $ds_budgets, $param_budget_name_id
end

script "js_filtered_budgets", type: "javascript" do
  parameters "ds_budgets", "param_budget_name_id"
  result "result"
  code <<-EOS
  current_month = new Date().toISOString().substring(0, 7)

  result = _.filter(ds_budgets, function(budget) {
    budget_found = budget['id'] == param_budget_name_id.trim() || budget['name'] == param_budget_name_id.trim()
    return budget_found && _.contains(budget['yearMonths'], current_month)
  })
EOS
end

datasource "ds_reports" do
  iterate $ds_filtered_budgets
  request do
    run_script $js_reports, iter_item, $param_use_groups, $param_unbudgeted, rs_optima_host, rs_org_id
  end
  result do
    encoding "json"
    collect jmes_path(response, "[*]") do
      field "b_id", val(iter_item, "id")
      field "name", val(iter_item, "name")
      field "dimensions_ids", val(iter_item, "dimensions")
      field "metric", val(iter_item, "metric")
      field "timestamp", jmes_path(col_item, "timestamp")
      field "dimensions", jmes_path(col_item, "dimensions")
      field "budgetAmount", jmes_path(col_item, "metrics.budgetAmount")
      field "spendAmount", jmes_path(col_item, "metrics.spendAmount")
    end
  end
end

script "js_reports", type: "javascript" do
  parameters "budget", "param_use_groups", "param_unbudgeted", "rs_optima_host", "rs_org_id"
  result "request"
  code <<-EOS
  current = new Date()
  start_date = current.getFullYear() + '-' + ('0' + (current.getMonth() + 1)).slice(-2)
  current.setMonth(current.getMonth() + 1)
  end_date = current.getFullYear() + '-' + ('0' + (current.getMonth() + 1)).slice(-2)

  var request = {
    auth: "auth_flexera",
    host: rs_optima_host,
    verb: "POST",
    path: "/bill-analysis/orgs/" + rs_org_id + "/budgets/" + budget.id + "/report",
    body_fields: {
      "dimensions": param_use_groups == "Summarized" ? [] : budget.dimensions,
      "endAt": end_date,
      "startAt": start_date,
      "includeUnbudgeted": param_unbudgeted == "Include Unbudgeted Spend",
    },
    headers: {
      "User-Agent": "RS Policies",
      "Api-Version": "1.0"
    }
  }
EOS
end

datasource "ds_filtered_reports" do
  run_script $js_filtered_reports, $ds_reports, $ds_filters, $param_use_groups
end

script "js_filtered_reports", type: "javascript" do
  parameters "ds_reports", "ds_filters", "param_use_groups"
  result "result"
  code <<-EOS
  if (param_use_groups == "Summarized" || _.isEmpty(ds_filters)) {
    result = ds_reports
  } else {
    result = _.filter(ds_reports, function(report) {
      matched_filters = _.filter(_.keys(ds_filters), function(key) {
        return report['dimensions'][key] && _.contains(ds_filters[key], report['dimensions'][key])
      })

      return matched_filters.length == _.keys(ds_filters).length
    })
  }
EOS
end

datasource "ds_aggregated" do
  run_script $js_aggregated, $ds_filtered_reports, $ds_currency, $ds_dimensions, $param_threshold_percentage, $param_type, $param_budget_name_id, $param_filter, f1_app_host
end

script "js_aggregated", type: "javascript" do
  parameters "ds_filtered_reports", "ds_currency", "ds_dimensions", "param_threshold_percentage", "param_type", "param_budget_name_id", "param_filter", "f1_app_host"
  result "result"
  code <<-EOS
  function forecasted(curr) {
    now = new Date()
    day = now.getUTCDate() - 1

    if (day < 1) { return 0 }

    days = new Date(now.getFullYear(), now.getMonth() + 1, 0).getDate()
    return curr / day * days
  }

  function get_group(dimensions, dimensions_ids) {
    vals = []

    _.each(dimensions_ids, function(k) {
      if (dimensions[k] && (k != "is_budgeted" || dimensions_ids.length == 1)) { vals.push(dimensions[k]) }
    })

    if (!vals.length && dimensions["is_budgeted"]) { return dimensions["is_budgeted"] }

    return vals.join("|")
  }

  function get_dimension_names(dimensions_ids) {
    vals = []
    _.each(dimensions_ids, function(k) { vals.push(ds_dimensions[k] || k) })
    return vals.join(", ")
  }

  result = {
    invalid: [],
    exceeded: [],
    forecasted: [],
  }

  if (!ds_filtered_reports || !ds_filtered_reports.length) { result['invalid'].push(param_budget_name_id) }

  current = new Date()
  monthYear = current.getFullYear() + '-' + ('0' + (current.getMonth() + 1)).slice(-2)

  cost_metric = {
    "cost_nonamortized_unblended_adj": "Unamortized",
    "cost_amortized_unblended_adj": "Amortized",
    "cost_nonamortized_blended_adj": "Unamortized",
    "cost_amortized_blended_adj": "Amortized"
  }

  _.each(ds_filtered_reports, function(item) {
    item['budgetAmount'] = item['budgetAmount'] || 0

    if (item['spendAmount']) {
      item['monthYear'] = monthYear
      item['forecasted'] = ""
      item['currency'] = ds_currency['code']
      item['forecastedAmount'] = item['spendAmount']
      date = new Date(item['timestamp'])
      item['date'] = date.toLocaleDateString()
      now = new Date()

      if (date.getFullYear() == now.getFullYear() && date.getMonth() == now.getMonth()) {
        item['forecastedAmount'] = Math.round(forecasted(item['spendAmount']) * 100) / 100
        item['forecasted'] = item['forecastedAmount']
      }

      item['budgetAmount'] = Math.round(item['budgetAmount'] * 100) / 100
      item['spendAmount'] = Math.round(item['spendAmount'] * 100) / 100
      item['overBudgetAmount'] = Math.max(0, Math.round((item['spendAmount'] - item['budgetAmount']) * 100) / 100)
      item['remaining'] = Math.round((item['budgetAmount'] - item['spendAmount']) * 100) / 100
      item['overBudgetAmountForec'] = Math.max(0, Math.round((item['forecastedAmount'] - item['budgetAmount']) * 100) / 100)

      if (item['budgetAmount']) {
        item['spentPercent'] = Math.round(item['spendAmount'] / item['budgetAmount'] * 10000) / 100
        item['spentPercentForec'] = Math.round(item['forecastedAmount'] / item['budgetAmount'] * 10000) / 100
      }

      // values for export
      item['budget'] = item['budgetAmount']
      item['spend'] = item['spendAmount']
      item['overBudget'] = item['overBudgetAmount']
      item['overBudgetForec'] = item['overBudgetAmountForec']
      item['group'] = ""
      item['is_budgeted'] = true

      if (item['dimensions']) {
        item['group'] = get_group(item['dimensions'], item['dimensions_ids'])
        item['is_budgeted'] = !item['dimensions']['is_budgeted'] || item['dimensions']['is_budgeted'] === "Budgeted"
      }

      item['metric'] = cost_metric[item['metric'] || ''] || item['metric']

      if (item['budget'] > 0) { item['budget'] = ds_currency['code'] + ' ' + item['budget'] }
      if (item['spend'] > 0) { item['spend'] = ds_currency['code'] + ' ' + item['spend'] }
      if (item['overBudget'] > 0) { item['overBudget'] = ds_currency['code'] + ' ' + item['overBudget'] }
      if (item['overBudgetForec'] > 0) { item['overBudgetForec'] = ds_currency['code'] + ' ' + item['overBudgetForec'] }
      if (item['forecasted']) { item['forecasted'] = ds_currency['code'] + ' ' + item['forecasted'] }

      if (item['spentPercent'] !== undefined) {
        budget_percent = item['spentPercent']
        budget_percent_forec = item['spentPercentForec']
        item['spentPercent'] += "%"
        item['spentPercentForec'] += "%"
      }

      item['host'] = f1_app_host
      item['dimm'] = get_dimension_names(item['dimensions_ids'])

      if ((!item['is_budgeted'] && item['spendAmount'] > 0) || item['budgetAmount']) {
        if (param_type == "Actual Spend") {
          if (!item['is_budgeted']) {
            item['details'] = "Spend is unbudgeted"
            result['exceeded'].push(item)
          } else if (item['spendAmount'] > item['budgetAmount']) {
            item['details'] = "Actual spend exceeded budget"
            result['exceeded'].push(item)
          } else if (param_threshold_percentage < budget_percent) {
            item['details'] = "Actual spend exceeded budget threshold"
            result['exceeded'].push(item)
          }
        } else {
          if (!item['is_budgeted']) {
            item['details'] = "Spend is unbudgeted"
            result['forecasted'].push(item)
          } else if  (item['forecastedAmount'] > item['budgetAmount']) {
            item['details'] = "Projected spend exceeded budget"
            result['forecasted'].push(item)
          } else if (param_threshold_percentage < budget_percent_forec) {
            item['details'] = "Projected spend exceeded budget threshold"
            result['forecasted'].push(item)
          }
        }
      }
    }
  })

  result['exceeded'] = _.sortBy(result['exceeded'], function (item) {return item['group'] })
  result['forecasted'] = _.sortBy(result['forecasted'], function (item) {return item['group'] })
EOS
end

datasource "ds_only_forecasted" do
  run_script $js_only, $ds_aggregated, "forecasted"
end

datasource "ds_only_exceeded" do
  run_script $js_only, $ds_aggregated, "exceeded"
end

script "js_only", type: "javascript" do
  parameters "ds_aggregated", "key"
  result "result"
  code "result = ds_aggregated[key]"
end

###############################################################################
# Policy
###############################################################################

policy "pol_budget_alert" do
  validate $ds_aggregated do
    summary_template "Budget Alerts: Invalid Budget Name or ID: {{parameters.param_budget_name_id}}"
    detail_template <<-EOS
  The following provided budget Name or ID is invalid or the budget refers to prior periods:
  \n
  - {{parameters.param_budget_name_id}}
  \n
EOS
    check eq(size(val(data, "invalid")), 0)
    escalate $esc_email
  end

  validate $ds_only_exceeded do
    summary_template "{{with index data 0}}{{ .name }}{{end}}: {{parameters.param_threshold_percentage}}% Budget Threshold Is Exceeded ({{ parameters.param_type }})"
    detail_template <<-EOS
# {{with index data 0}}{{ .name }}{{end}}: Budget Exceeded
Budget Alert Type: **{{ parameters.param_type }}**

Monthly Spend for **{{with index data 0}}{{ .monthYear }}{{end}}**

Currency: **{{with index data 0}}{{ .currency }}{{end}}**

Cost Metric: **{{with index data 0}}{{ .metric }}{{end}}**

Dimensions: **{{with index data 0}}{{ .dimm }}{{end}}**

{{ if parameters.param_filter }}
Target Groups: \n
{{ range parameters.param_filter }}
  * **{{ . }}**
{{ end }}
{{end}}

[Link to budget report in Flexera One](https://{{with index data 0}}{{ .host }}{{end}}/orgs/{{ rs_org_id }}/optima/budgets/{{with index data 0}}{{ .b_id }}{{end}})
EOS
    check eq(size(data), 0)
    escalate $esc_email
    export do
      field "group" do
        label "Group"
      end
      field "budgetAmount" do
        label "Budget"
      end
      field "spendAmount" do
        label "Actual Spend"
      end
      field "forecastedAmount" do
        label "Projected (prorated) Spend"
      end
      field "remaining" do
        label "Remaining Amount"
      end
      field "spentPercent" do
        label "% of Budget Spent"
      end
      field "details" do
        label "Details"
      end
    end
  end

  validate $ds_only_forecasted do
    summary_template "{{with index data 0}}{{ .name }}{{end}}: {{parameters.param_threshold_percentage}}% Budget Threshold Is Exceeded ({{ parameters.param_type }})"
    detail_template <<-EOS
# {{with index data 0}}{{ .name }}{{end}}: Budget Exceeded
Budget Alert Type: **{{ parameters.param_type }}**

Monthly Spend for **{{with index data 0}}{{ .monthYear }}{{end}}**

Currency: **{{with index data 0}}{{ .currency }}{{end}}**

Cost Metric: **{{with index data 0}}{{ .metric }}{{end}}**

Dimensions: **{{with index data 0}}{{ .dimm }}{{end}}**

{{ if parameters.param_filter }}
Target Groups: \n
{{ range parameters.param_filter }}
  * **{{ . }}**
{{ end }}
{{end}}

[Link to budget report in Flexera One](https://{{with index data 0}}{{ .host }}{{end}}/orgs/{{ rs_org_id }}/optima/budgets/{{with index data 0}}{{ .b_id }}{{end}})
EOS
    check eq(size(data), 0)
    escalate $esc_email
    export do
      field "group" do
        label "Group"
      end
      field "budgetAmount" do
        label "Budget"
      end
      field "spendAmount" do
        label "Actual Spend"
      end
      field "forecastedAmount" do
        label "Projected (prorated) Spend"
      end
      field "remaining" do
        label "Remaining Amount"
      end
      field "spentPercent" do
        label "% of Budget Spent"
      end
      field "details" do
        label "Details"
      end
    end
  end
end

###############################################################################
# Escalations
###############################################################################

escalation "esc_email" do
  automatic true
  label "Send Email"
  description "Send budget alert email"
  email $param_email
end

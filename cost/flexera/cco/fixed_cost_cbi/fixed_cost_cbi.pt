name "Fixed Cost Common Bill Ingestion"
rs_pt_ver 20180301
type "policy"
short_description "Sends a fixed cost into the Flexera Cloud Cost Optimization platform. See the [README](https://github.com/flexera-public/policy_templates/tree/master/cost/flexera/cco/fixed_cost_cbi/) and [docs.flexera.com/flexera/EN/Automation](https://docs.flexera.com/flexera/EN/Automation/AutomationGS.htm) to learn more."
long_description ""
doc_link "https://github.com/flexera-public/policy_templates/tree/master/cost/flexera/cco/fixed_cost_cbi/"
severity "low"
category "Cost"
default_frequency "daily"
info(
  version: "0.3.2",
  provider: "Flexera",
  service: "Common Bill Ingestion",
  policy_set: "Common Bill Ingestion",
  hide_skip_approvals: "true"
)

###############################################################################
# Parameters
###############################################################################

parameter "param_email" do
  type "list"
  category "Policy Settings"
  label "Email Addresses"
  description "Email addresses of the recipients you wish to notify when billing data is uploaded"
  default []
end

parameter "param_cost_amount" do
  type "number"
  category "Policy Settings"
  label "Cost Amount (Monthly)"
  description "The monthly amount of the fixed cost to inject in the currency that the Flexera organization is configured to use."
  # No default value, user input required
end

parameter "param_month_billing" do
  type "string"
  category "Policy Settings"
  label "Billing Month"
  description "Month to insert fixed cost into. Select 'Specific Month' to specify a month."
  allowed_values "Current Month", "Previous Month", "Specific Month"
  default "Current Month"
end

parameter "param_month_specific" do
  type "string"
  category "Policy Settings"
  label "Specific Month"
  description "Month to insert fixed cost into in YYYY-MM format. Only relevant if 'Specific Month' is selected for the Billing Month parameter."
  allowed_pattern /^(19|20)\d\d-(0[1-9]|1[0-2])$/
  default "2020-01"
end

parameter "param_amortization" do
  type "string"
  category "Policy Settings"
  label "Amortization"
  description "Whether or not to amortize the fixed cost across the month. See the README for more details."
  allowed_values "Amortize", "Do Not Amortize"
  default "Amortize"
end

parameter "param_cbi_endpoint" do
  type "string"
  category "Policy Settings"
  label "CBI (Common Bill Ingestion) Endpoint ID"
  description "The ID of CBI endpoint to create/use when injecting the fixed cost. Leave blank to have this generated and managed automatically. Ex: cbi-oi-optima-laborcosts"
  allowed_pattern /^(?:cbi-oi-optima-[a-z_-]+)?$/
  default ""
end

parameter "param_cbi_cloud_vendor" do
  type "string"
  category "Policy Settings"
  label "Cloud Vendor"
  description "The value the fixed cost should have for the 'Cloud Vendor' dimension in Flexera CBI. Only has an effect when the CBI endpoint is first created."
  min_length 1
  # No default value, user input required
end

parameter "param_metadata_cloud_vendor_account_id" do
  type "string"
  category "Cost Metadata"
  label "Cloud Vendor Account"
  description "The value the fixed cost should have for the 'Cloud Vendor Account' dimension in Flexera CBI. Leave blank to have no value for this dimension."
  default ""
end

parameter "param_metadata_cloud_vendor_account_name" do
  type "string"
  category "Cost Metadata"
  label "Cloud Vendor Account Name"
  description "The value the fixed cost should have for the 'Cloud Vendor Account Name' dimension in Flexera CBI. Leave blank to have no value for this dimension."
  default ""
end

parameter "param_metadata_category" do
  type "string"
  category "Cost Metadata"
  label "Category"
  description "The value the fixed cost should have for the 'Category' dimension in Flexera CBI. Leave blank to have no value for this dimension."
  default ""
end

parameter "param_metadata_service" do
  type "string"
  category "Cost Metadata"
  label "Service"
  description "The value the fixed cost should have for the 'Service' dimension in Flexera CBI. Leave blank to have no value for this dimension."
  default ""
end

parameter "param_metadata_region" do
  type "string"
  category "Cost Metadata"
  label "Region"
  description "The value the fixed cost should have for the 'Region' dimension in Flexera CBI. Leave blank to have no value for this dimension."
  default ""
end

parameter "param_metadata_resourcetype" do
  type "string"
  category "Cost Metadata"
  label "Resource Type"
  description "The value the fixed cost should have for the 'Resource Type' dimension in Flexera CBI. Leave blank to have no value for this dimension."
  default ""
end

parameter "param_metadata_instancetype" do
  type "string"
  category "Cost Metadata"
  label "Instance Type"
  description "The value the fixed cost should have for the 'Instance Type' dimension in Flexera CBI. Leave blank to have no value for this dimension."
  default ""
end

parameter "param_metadata_lineitemtype" do
  type "string"
  category "Cost Metadata"
  label "Line Item Type"
  description "The value the fixed cost should have for the 'Line Item Type' dimension in Flexera CBI. 'Usage' is recommended for most cases."
  allowed_values "Usage", "Tax", "Fee", "Credit"
  default "Usage"
end

parameter "param_metadata_tags" do
  type "list"
  category "Cost Metadata"
  label "Tags"
  description "Tag values to attach to the line items in the Flexera platform in Key=Value format. Leave blank to not include any tag values."
  default []
end

###############################################################################
# Authentication
###############################################################################

credentials "auth_flexera" do
  schemes "oauth2"
  label "Flexera"
  description "Select Flexera One OAuth2 credentials"
  tags "provider=flexera"
end

###############################################################################
# Datasources & Scripts
###############################################################################

# Get region-specific Flexera API endpoints
datasource "ds_flexera_api_hosts" do
  run_script $js_flexera_api_hosts, rs_optima_host
end

script "js_flexera_api_hosts", type: "javascript" do
  parameters "rs_optima_host"
  result "result"
  code <<-EOS
  host_table = {
    "api.optima.flexeraeng.com": {
	    api: "api.flexera.com",
      flexera: "api.flexera.com",
      fsm: "api.fsm.flexeraeng.com",
      grs: "grs-front.iam-us-east-1.flexeraeng.com",
      ui: "app.flexera.com",
      tld: "flexera.com"
    },
    "api.optima-eu.flexeraeng.com": {
	    api: "api.flexera.eu",
      flexera: "api.flexera.eu",
      fsm: "api.fsm-eu.flexeraeng.com",
      grs: "grs-front.eu-central-1.iam-eu.flexeraeng.com",
      ui: "app.flexera.eu",
      tld: "flexera.eu"
    },
    "api.optima-apac.flexeraeng.com": {
	    api: "api.flexera.au",
      flexera: "api.flexera.au",
      fsm: "api.fsm-apac.flexeraeng.com",
      grs: "grs-front.ap-southeast-2.iam-apac.flexeraeng.com",
      ui: "app.flexera.au",
      tld: "flexera.au"
    }
  }

  result = host_table[rs_optima_host]
EOS
end

# Get applied policy metadata for use later
datasource "ds_applied_policy" do
  request do
    auth $auth_flexera
    host val($ds_flexera_api_hosts, "flexera")
    path join(["/policy/v1/orgs/", rs_org_id, "/projects/", rs_project_id, "/applied-policies", switch(policy_id, join(["/", policy_id]), "")])
  end
end

datasource "ds_dates" do
  run_script $js_dates, $param_month_billing, $param_month_specific
end

script "js_dates", type: "javascript" do
  parameters "param_month_billing", "param_month_specific"
  result "result"
  code <<-EOS
  result = { period: param_month_specific }

  if (param_month_billing != 'Specific Month') {
    date = new Date()
    date.setDate(date.getDate() - 1)

    if (param_month_billing == 'Previous Month') {
      date.setMonth(date.getMonth() - 1)
    }

    year = date.toISOString().split('-')[0]
    month = date.toISOString().split('-')[1]

    result = { period: year + '-' + month }
  }
EOS
end

datasource "ds_currency_reference" do
  request do
    host "raw.githubusercontent.com"
    path "/flexera-public/policy_templates/master/data/currency/currency_reference.json"
    header "User-Agent", "RS Policies"
  end
end

datasource "ds_currency_code" do
  request do
    auth $auth_flexera
    host rs_optima_host
    path join(["/bill-analysis/orgs/", rs_org_id, "/settings/currency_code"])
    header "Api-Version", "0.1"
    header "User-Agent", "RS Policies"
    ignore_status [403]
  end
  result do
    encoding "json"
    field "id", jmes_path(response, "id")
    field "value", jmes_path(response, "value")
  end
end

datasource "ds_currency" do
  run_script $js_currency, $ds_currency_reference, $ds_currency_code
end

script "js_currency", type:"javascript" do
  parameters "ds_currency_reference", "ds_currency_code"
  result "result"
  code <<-EOS
  code = "USD"
  symbol = "$"
  separator = ","

  if (ds_currency_code['value'] != undefined) {
    if (ds_currency_reference[ds_currency_code['value']] != undefined) {
      code = ds_currency_reference[ds_currency_code['value']]['code']
      symbol = ds_currency_reference[ds_currency_code['value']]['symbol']

      if (ds_currency_reference[ds_currency_code['value']]['t_separator'] != undefined) {
        separator = ds_currency_reference[ds_currency_code['value']]['t_separator']
      } else {
        separator = ""
      }
    }
  }

  result = {
    code: code,
    symbol: symbol,
    separator: separator
  }
EOS
end

datasource "ds_cost_csv" do
  run_script $js_cost_csv, $ds_dates, $ds_currency, $param_cost_amount, $param_metadata_cloud_vendor_account_id, $param_metadata_cloud_vendor_account_name, $param_metadata_category, $param_metadata_service, $param_metadata_region, $param_metadata_resourcetype, $param_metadata_instancetype, $param_metadata_lineitemtype, $param_metadata_tags, $param_amortization
end

script "js_cost_csv", type: "javascript" do
  parameters "ds_dates", "ds_currency", "param_cost_amount", "param_metadata_cloud_vendor_account_id", "param_metadata_cloud_vendor_account_name", "param_metadata_category", "param_metadata_service", "param_metadata_region", "param_metadata_resourcetype", "param_metadata_instancetype", "param_metadata_lineitemtype", "param_metadata_tags", "param_amortization"
  result "result"
  code <<-'EOS'
  // Set static field values. These will be the same for every entry in the CSV file
  CloudVendorAccountID = param_metadata_cloud_vendor_account_id.trim().replace(/,/g, '_')
  CloudVendorAccountName = param_metadata_cloud_vendor_account_name.trim().replace(/,/g, '_')
  Category = param_metadata_category.trim().replace(/,/g, '_')
  Service = param_metadata_service.trim().replace(/,/g, '_')
  Region = param_metadata_region.trim().replace(/,/g, '_')
  ResourceType = param_metadata_resourcetype.trim().replace(/,/g, '_')
  InstanceType = param_metadata_instancetype.trim().replace(/,/g, '_')
  LineItemType = param_metadata_lineitemtype.trim().replace(/,/g, '_')

  UsageType = "None"
  UsageUnit = "Unit"
  UsageAmount = 0
  CurrencyCode = ds_currency['code']
  InvoiceYearMonth = ds_dates['period'].replace(/-/g, '')
  InvoiceID = ds_dates['period'].replace(/-/g, '_')

  // Generate the Tags value if user provided tags
  tag_strings = []

  _.each(param_metadata_tags, function(item) {
    if (item.split('=')[1] != undefined && item.split('=')[1] != "") {
      key = item.split('=')[0].trim().replace(/,/g, '_')
      value = item.split('=')[1].trim().replace(/,/g, '_')
      tag_strings.push("\"\"" + key + "\"\": \"\"" + value + "\"\"")
    }
  })

  Tags = ""
  if (tag_strings.length > 0) { Tags = '"{' + tag_strings.join(',') + '}"' }

  // Determine the number of days in the current month for cost splitting
  next_month_year = Number(ds_dates['period'].split('-')[0])
  next_month = Number(ds_dates['period'].split('-')[1]) + 1
  if (next_month == 13) { next_month = 1; next_month_year++ }
  if (next_month < 10) { next_month = '0' + next_month.toString() }
  future_date = new Date(next_month_year.toString() + '-' + next_month.toString())
  future_date.setDate(future_date.getDate() - 1)
  total_days_in_month = Number(future_date.toISOString().substring(8, 10))

  if (param_amortization == "Amortize") {
    // Calculate daily cost from monthly cost.
    // Round it to avoid causing problems with extremely small numbers in scientific notation.
    Cost = Math.round(param_cost_amount / total_days_in_month * 1000000) / 1000000

    // Determine the number of days we need to insert billing data for
    // Simply use the number of days in the entire month if not current month
    days_in_month = total_days_in_month

    // Otherwise, figure out how far into the current month we are and use that
    if (ds_dates['period'] == new Date().toISOString().substring(0, 7)) {
      days_in_month = Number(new Date().toISOString().substring(8, 10))
    }
  } else {
    // If we're not amortizing, just do the flat cost on the 1st of the month
    Cost = param_cost_amount
    days_in_month = 1
  }

  // Create header row
  rows = ["CloudVendorAccountID,CloudVendorAccountName,Category,Service,Region,ResourceType,InstanceType,LineItemType,UsageType,UsageAmount,UsageUnit,CurrencyCode,InvoiceYearMonth,InvoiceID,Tags,UsageStartTime,Cost"]

  // Create remaining rows
  for (var i = 1; i <= days_in_month; i++) {
    // Determine usage start time based on day
    if (i < 10) { day = '0' + i.toString() }
    if (i >= 10) { day = i.toString() }
    UsageStartTime = ds_dates['period'] + '-' + day + 'T00:00:00Z'

    // Add row for this day to row list
    rows.push([
      CloudVendorAccountID, CloudVendorAccountName, Category, Service, Region,
      ResourceType, InstanceType, LineItemType, UsageType, UsageAmount, UsageUnit,
      CurrencyCode, InvoiceYearMonth, InvoiceID, Tags, UsageStartTime, Cost
    ].join(','))
  }

  result = { csv: rows.join("\n") }
EOS
end

datasource "ds_cbi_endpoint_id" do
  run_script $js_cbi_endpoint_id, $param_cbi_endpoint, $param_cbi_cloud_vendor
end

script "js_cbi_endpoint_id", type: "javascript" do
  parameters "param_cbi_endpoint", "param_cbi_cloud_vendor"
  result "result"
  code <<-EOS
  result = param_cbi_endpoint

  if (param_cbi_endpoint == "") {
    // Make the Cloud Vendor lowercase, replace spaces with underscores,
    // remove any non-alphabetical characters, and remove any underscors are the start/end of the string
    result = "cbi-oi-optima-" + param_cbi_cloud_vendor.toLowerCase().replace(/ /g, '_').replace(/[^a-z_]/g, '').replace(/^_+|_+$/g, '')
  }
EOS
end

datasource "ds_existing_bill_connects" do
  request do
    auth $auth_flexera
    host val($ds_flexera_api_hosts, "flexera")
    path join(["/finops-onboarding/v1/orgs/", rs_org_id, "/bill-connects"])
    header "User-Agent", "RS Policies"
  end
  result do
    encoding "json"
    collect jmes_path(response, "values[*]") do
      field "id", jmes_path(col_item, "id")
      field "kind", jmes_path(col_item, "kind")
      field "created_at", jmes_path(col_item, "created_at")
      field "updated_at", jmes_path(col_item, "updated_at")
      field "billIdentifier", jmes_path(col_item, "cbi.billIdentifier")
      field "integrationId", jmes_path(col_item, "cbi.integrationId")
      field "name", jmes_path(col_item, "cbi.name")
      field "displayName", jmes_path(col_item, "cbi.params.displayName")
      field "vendorName", jmes_path(col_item, "cbi.params.vendorName")
    end
  end
end

# Branching logic: Create a new bill connect if it doesn't already exist
datasource "ds_to_create_bill_connect" do
  run_script $js_to_create_bill_connect, $ds_existing_bill_connects, $ds_cbi_endpoint_id, $param_cbi_cloud_vendor
end

script "js_to_create_bill_connect", type: "javascript" do
  parameters "ds_existing_bill_connects", "ds_cbi_endpoint_id", "param_cbi_cloud_vendor"
  result "result"
  code <<-EOS
  result = []

  existing_bill_connect = _.find(ds_existing_bill_connects, function(connect) {
    return connect["id"] == ds_cbi_endpoint_id
  })

  if (existing_bill_connect == undefined) {
    result = [{
      billIdentifier: ds_cbi_endpoint_id.split('cbi-oi-optima-')[1],
      integrationId: "cbi-oi-optima",
      name: param_cbi_cloud_vendor.toLowerCase().trim().replace(/ /g, '_'),
      params: {
        displayName: param_cbi_cloud_vendor,
        vendorName: param_cbi_cloud_vendor.trim().replace(/ /g, '_')
      }
    }]
  }
EOS
end

datasource "ds_create_bill_connect" do
  iterate $ds_to_create_bill_connect
  request do
    auth $auth_flexera
    verb "POST"
    host val($ds_flexera_api_hosts, "flexera")
    path join(["/finops-onboarding/v1/orgs/", rs_org_id, "/bill-connects/cbi"])
    header "User-Agent", "RS Policies"
    body_field "billIdentifier", val(iter_item, "billIdentifier")
    body_field "integrationId", val(iter_item, "integrationId")
    body_field "name", val(iter_item, "name")
    body_field "params", val(iter_item, "params")
  end
  result do
    encoding "json"
    field "id", jmes_path(response, "id")
    field "kind", jmes_path(response, "kind")
    field "created_at", jmes_path(response, "created_at")
    field "updated_at", jmes_path(response, "updated_at")
    field "billIdentifier", jmes_path(response, "cbi.billIdentifier")
    field "integrationId", jmes_path(response, "cbi.integrationId")
    field "name", jmes_path(response, "cbi.name")
    field "displayName", jmes_path(response, "cbi.params.displayName")
    field "vendorName", jmes_path(response, "cbi.params.vendorName")
  end
end

# Branching logic: Select newly created CBI endpoint if it exists. Otherwise, select existing one.
datasource "ds_cbi_endpoint" do
  run_script $js_cbi_endpoint, $ds_create_bill_connect, $ds_existing_bill_connects, $ds_cbi_endpoint_id
end

script "js_cbi_endpoint", type: "javascript" do
  parameters "ds_create_bill_connect", "ds_existing_bill_connects", "ds_cbi_endpoint_id"
  result "result"
  code <<-EOS
  result = _.find(ds_existing_bill_connects, function(connect) { return connect["id"] == ds_cbi_endpoint_id })
  if (ds_create_bill_connect.length > 0) { result = ds_create_bill_connect[0] }
EOS
end

datasource "ds_existing_bill_uploads" do
  request do
    auth $auth_flexera
    host rs_optima_host
    path join(["/optima/orgs/", rs_org_id, "/billUploads"])
    header "User-Agent", "RS Policies"
    body_field "billConnectId", val($ds_cbi_endpoint, "id")
    body_field "billingPeriod", val($ds_dates, "period")
  end
  result do
    encoding "json"
    collect jmes_path(response, "[*]") do
      field "id", jmes_path(col_item, "id")
      field "status", jmes_path(col_item, "status")
      field "billConnectId", jmes_path(col_item, "billConnectId")
      field "billingPeriod", jmes_path(col_item, "billingPeriod")
      field "createdAt", jmes_path(col_item, "createdAt")
      field "updatedAt", jmes_path(col_item, "updatedAt")
    end
  end
end

datasource "ds_pending_bill_uploads" do
  run_script $js_pending_bill_uploads, $ds_existing_bill_uploads
end

script "js_pending_bill_uploads", type: "javascript" do
  parameters "ds_existing_bill_uploads"
  result "result"
  code <<-EOS
  result = _.filter(ds_existing_bill_uploads, function(item) {
    return item["status"] != "complete" && item["status"] != "aborted"
  })
EOS
end

datasource "ds_abort_pending_bill_uploads" do
  iterate $ds_pending_bill_uploads
  request do
    auth $auth_flexera
    verb "POST"
    host rs_optima_host
    path join(["/optima/orgs/", rs_org_id, "/billUploads/", val(iter_item, "id"), "/operations"])
    header "User-Agent", "RS Policies"
    body_field "operation", "abort"
    ignore_status [400, 401, 402, 403, 404, 405, 429, 500, 502]
  end
  result do
    encoding "json"
    field "id", jmes_path(response, "id")
    field "status", jmes_path(response, "status")
    field "billConnectId", jmes_path(response, "billConnectId")
    field "billingPeriod", jmes_path(response, "billingPeriod")
    field "createdAt", jmes_path(response, "createdAt")
    field "updatedAt", jmes_path(response, "updatedAt")
  end
end

# Branching logic: This exists purely to be referenced later to ensure policy execution aborts
# any pending bill uploads before attempting to create a new one.
datasource "ds_aborted_pending_bill_uploads_done" do
  run_script $js_aborted_pending_bill_uploads_done, $ds_abort_pending_bill_uploads
end

script "js_aborted_pending_bill_uploads_done", type: "javascript" do
  parameters "ds_abort_pending_bill_uploads"
  result "result"
  code <<-EOS
  result = { abortedUploads: (ds_abort_pending_bill_uploads.length != 0).toString() }
EOS
end

datasource "ds_cbi_create_bill_upload" do
  request do
    auth $auth_flexera
    verb "POST"
    host rs_optima_host
    path join(["/optima/orgs/", rs_org_id, "/billUploads"])
    header "User-Agent", "RS Policies"
    # This is to ensure that any pending bill uploads were aborted prior to creating a new one
    header "AbortedUploads", val($ds_aborted_pending_bill_uploads_done, "abortedUploads")
    body_field "billConnectId", val($ds_cbi_endpoint, "id")
    body_field "billingPeriod", val($ds_dates, "period")
  end
  result do
    encoding "json"
    field "id", jmes_path(response, "id")
    field "status", jmes_path(response, "status")
    field "createdAt", jmes_path(response, "createdAt")
    field "updatedAt", jmes_path(response, "updatedAt")
    field "billConnectId", jmes_path(response, "billConnectId")
    field "billingPeriod", jmes_path(response, "billingPeriod")
  end
end

datasource "ds_cbi_upload_file" do
  request do
    auth $auth_flexera
    verb "POST"
    host rs_optima_host
    path join(["/optima/orgs/", rs_org_id, "/billUploads/", val($ds_cbi_create_bill_upload, "id"), "/files/cost-", val($ds_dates, "period"), ".csv"])
    header "User-Agent", "RS Policies"
    body val($ds_cost_csv, "csv")
  end
  result do
    encoding "json"
    field "id", jmes_path(response, "id")
    field "length", jmes_path(response, "length")
    field "md5", jmes_path(response, "md5")
    field "status", jmes_path(response, "status")
    field "createdAt", jmes_path(response, "createdAt")
    field "updatedAt", jmes_path(response, "updatedAt")
    field "billUploadId", jmes_path(response, "billUploadId")
  end
end

datasource "ds_cbi_commit_bill_upload" do
  request do
    run_script $js_cbi_commit_bill_upload, $ds_cbi_upload_file, $ds_cbi_create_bill_upload, rs_org_id, rs_optima_host
  end
  result do
    encoding "json"
    field "id", jmes_path(response, "id")
    field "status", jmes_path(response, "status")
    field "createdAt", jmes_path(response, "createdAt")
    field "updatedAt", jmes_path(response, "updatedAt")
    field "billConnectId", jmes_path(response, "billConnectId")
    field "billingPeriod", jmes_path(response, "billingPeriod")
  end
end

script "js_cbi_commit_bill_upload", type: "javascript" do
  parameters "ds_cbi_upload_file", "ds_cbi_create_bill_upload", "rs_org_id", "rs_optima_host"
  result "request"
  code <<-EOS
  var request = {
    auth: "auth_flexera",
    verb: "POST",
    host: rs_optima_host,
    path: ["/optima/orgs/", rs_org_id, "/billUploads/", ds_cbi_create_bill_upload["id"], '/operations'].join(''),
    headers: { "User-Agent": "RS Policies" },
    body_fields: {"operation": "commit" }
  }
EOS
end

datasource "ds_incident" do
  run_script $js_incident, $ds_cbi_commit_bill_upload, $ds_applied_policy, $ds_cost_csv, $param_cost_amount, $param_cbi_cloud_vendor
end

script "js_incident", type: "javascript" do
  parameters "ds_cbi_commit_bill_upload", "ds_applied_policy", "ds_cost_csv", "param_cost_amount", "param_cbi_cloud_vendor"
  result "result"
  code <<-EOS
  result = [{
    policy_name: ds_applied_policy['name'],
    id: ds_cbi_commit_bill_upload['id'],
    status: ds_cbi_commit_bill_upload['status'],
    createdAt: ds_cbi_commit_bill_upload['createdAt'],
    updatedAt: ds_cbi_commit_bill_upload['updatedAt'],
    billConnectId: ds_cbi_commit_bill_upload['billConnectId'],
    billingPeriod: ds_cbi_commit_bill_upload['billingPeriod'],
    csv: ds_cost_csv['csv'],
    cost_amount: param_cost_amount,
    cloud_vendor: param_cbi_cloud_vendor
  }]
EOS
end

###############################################################################
# Policy
###############################################################################

policy "pol_fixed_cost" do
  validate_each $ds_incident do
    summary_template "{{ with index data 0 }}{{ .policy_name }}{{ end }}: {{ with index data 0 }}{{ .billingPeriod }}{{ end }}"
    detail_template <<-EOS
## Common Bill Ingestion CSV
{{ with index data 0 }}{{ .csv }}{{ end }}
EOS
    check eq(0, 1)
    escalate $esc_email
    export do
      resource_level true
      field "billingPeriod" do
        label "Billing Period"
      end
      field "cloud_vendor" do
        label "Cloud Vendor"
      end
      field "cost_amount" do
        label "Monthly Cost"
      end
      field "id" do
        label "Bill Upload ID"
      end
      field "createdAt" do
        label "Bill Upload Date"
      end
      field "status" do
        label "Bill Upload Status"
      end
    end
  end
end

###############################################################################
# Escalations
###############################################################################

escalation "esc_email" do
  automatic true
  label "Send Email"
  description "Send incident email"
  email $param_email
end

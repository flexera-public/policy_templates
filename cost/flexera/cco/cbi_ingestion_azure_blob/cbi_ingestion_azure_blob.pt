name "Common Bill Ingestion from Azure Blob Storage"
rs_pt_ver 20180301
type "policy"
short_description "Downloads cost reports stored in the Flexera Common Bill Ingestion format from Azure Blob Storage and then uploads them to a Flexera CBI endpoint. See the [README](https://github.com/flexera-public/policy_templates/tree/master/cost/flexera/cco/cbi_ingestion_azure_blob) and [docs.flexera.com/flexera/EN/Automation](https://docs.flexera.com/flexera/EN/Automation/AutomationGS.htm) to learn more."
long_description ""
category "Cost"
severity "low"
default_frequency "daily"
info(
  version: "0.1.0",
  provider: "Flexera",
  service: "Common Bill Ingestion",
  policy_set: "Common Bill Ingestion",
  hide_skip_approvals: "true"
)

###############################################################################
# Parameters
###############################################################################

parameter "param_email" do
  type "list"
  category "Policy Settings"
  label "Email Addresses"
  description "Email addresses of the recipients you wish to notify when billing data is uploaded"
  default []
end

parameter "param_month_billing" do
  type "string"
  category "Policy Settings"
  label "Billing Month"
  description "Month to upload costs for. Select 'Specific Month' to specify a month."
  allowed_values "Current Month", "Previous Month", "Specific Month"
  default "Current Month"
end

parameter "param_month_specific" do
  type "string"
  category "Policy Settings"
  label "Specific Month"
  description "Month to upload costs for in YYYY-MM format. Only relevant if 'Specific Month' is selected for the Billing Month parameter."
  allowed_pattern /^(19|20)\d\d-(0[1-9]|1[0-2])$/
  default "2020-01"
end

parameter "param_cbi_type" do
  type "string"
  category "Policy Settings"
  label "CBI (Common Bill Ingestion) Endpoint Type"
  description "Whether costs are being sent to an endpoint for Common Bill Ingestion Format or FOCUS Format"
  allowed_values "Common Bill Ingestion", "FOCUS"
  default "Common Bill Ingestion"
end

parameter "param_cbi_endpoint" do
  type "string"
  category "Policy Settings"
  label "CBI (Common Bill Ingestion) Endpoint ID"
  description "The ID of CBI endpoint to create/use for ingested costs. Ex: cbi-oi-optima-laborcosts"
  allowed_pattern /^(cbi-oi-optima-[a-z]+|cbi-oi-focus-[a-z]+|)$/
  default ""
end

parameter "param_cbi_cloud_vendor" do
  type "string"
  category "Policy Settings"
  label "Cloud Vendor"
  description "The value the ingested costs should have for the 'Cloud Vendor' dimension in Flexera CBI. Only has an effect when the CBI endpoint is first created."
  min_length 1
  # No default value, user input required
end

parameter "param_blob_hostname" do
  type "string"
  category "Policy Settings"
  label "Azure Blob Storage Hostname"
  description "The hostname for the Azure Blob Storage container that stores the costs. Ex: billing-files.blob.core.windows.net"
  # No default value, user input required
end

parameter "param_blob_prefix" do
  type "string"
  category "Policy Settings"
  label "Azure Blob Storage Path/Prefix"
  description "The path and prefix for the name of the object in the Azure Blob Storage container. See README for more information on how file names should be structured. Ex: bills/labor-costs-"
  # No default value, user input required
end

###############################################################################
# Authentication
###############################################################################

credentials "auth_flexera" do
  schemes "oauth2"
  label "Flexera"
  description "Select FlexeraOne OAuth2 credentials"
  tags "provider=flexera"
end

credentials "auth_azure_storage" do
  schemes "oauth2"
  label "Azure"
  description "Select the Azure Storage Credential from the list."
  tags "provider=azure_storage"
end

###############################################################################
# Datasources & Scripts
###############################################################################

# Get applied policy metadata for use later
datasource "ds_applied_policy" do
  request do
    auth $auth_flexera
    host rs_governance_host
    path join(["/api/governance/projects/", rs_project_id, "/applied_policies/", policy_id])
    header "Api-Version", "1.0"
  end
end

# Get region-specific Flexera API endpoints
datasource "ds_flexera_api_hosts" do
  run_script $js_flexera_api_hosts, rs_optima_host
end

script "js_flexera_api_hosts", type: "javascript" do
  parameters "rs_optima_host"
  result "result"
  code <<-EOS
  host_table = {
    "api.optima.flexeraeng.com": {
      flexera: "api.flexera.com",
      fsm: "api.fsm.flexeraeng.com"
    },
    "api.optima-eu.flexeraeng.com": {
      flexera: "api.flexera.eu",
      fsm: "api.fsm-eu.flexeraeng.com"
    },
    "api.optima-apac.flexeraeng.com": {
      flexera: "api.flexera.au",
      fsm: "api.fsm-apac.flexeraeng.com"
    }
  }

  result = host_table[rs_optima_host]
EOS
end

datasource "ds_dates" do
  run_script $js_dates, $param_month_billing, $param_month_specific
end

script "js_dates", type: "javascript" do
  parameters "param_month_billing", "param_month_specific"
  result "result"
  code <<-EOS
  result = { period: param_month_specific }

  if (param_month_billing != 'Specific Month') {
    date = new Date()
    date.setDate(date.getDate() - 1)

    if (param_month_billing == 'Previous Month') {
      date.setMonth(date.getMonth() - 1)
    }

    year = date.toISOString().split('-')[0]
    month = date.toISOString().split('-')[1]

    result = {
      period: year + '-' + month
    }
  }
EOS
end

datasource "ds_cbi_endpoint_id" do
  run_script $js_cbi_endpoint_id, $param_cbi_endpoint, $param_cbi_cloud_vendor, $param_cbi_type
end

script "js_cbi_endpoint_id", type: "javascript" do
  parameters "param_cbi_endpoint", "param_cbi_cloud_vendor", "param_cbi_type"
  result "result"
  code <<-EOS
  result = param_cbi_endpoint

  if (param_cbi_endpoint == "") {
    prefix = "cbi-oi-optima-"
    if (param_cbi_type == "FOCUS") { prefix = "cbi-oi-focus-" }

    // Make the Cloud Vendor lowercase, replace spaces with underscores,
    // remove any non-alphabetical characters, and remove any underscores are the start/end of the string
    result = prefix + param_cbi_cloud_vendor.toLowerCase().replace(/ /g, '_').replace(/[^a-z_]/g, '').replace(/^_+|_+$/g, '')
  }
EOS
end

datasource "ds_existing_bill_connects" do
  request do
    auth $auth_flexera
    host val($ds_flexera_api_hosts, "flexera")
    path join(["/finops-onboarding/v1/orgs/", rs_org_id, "/bill-connects"])
    header "User-Agent", "RS Policies"
  end
  result do
    encoding "json"
    collect jmes_path(response, "values[*]") do
      field "id", jmes_path(col_item, "id")
      field "kind", jmes_path(col_item, "kind")
      field "created_at", jmes_path(col_item, "created_at")
      field "updated_at", jmes_path(col_item, "updated_at")
      field "billIdentifier", jmes_path(col_item, "cbi.billIdentifier")
      field "integrationId", jmes_path(col_item, "cbi.integrationId")
      field "name", jmes_path(col_item, "cbi.name")
      field "displayName", jmes_path(col_item, "cbi.params.displayName")
      field "vendorName", jmes_path(col_item, "cbi.params.vendorName")
    end
  end
end

# Branching logic: Create a new bill connect if it doesn't already exist
datasource "ds_to_create_bill_connect" do
  run_script $js_to_create_bill_connect, $ds_existing_bill_connects, $ds_cbi_endpoint_id, $param_cbi_cloud_vendor, $param_cbi_type
end

script "js_to_create_bill_connect", type: "javascript" do
  parameters "ds_existing_bill_connects", "ds_cbi_endpoint_id", "param_cbi_cloud_vendor", "param_cbi_type"
  result "result"
  code <<-EOS
  result = []

  existing_bill_connect = _.find(ds_existing_bill_connects, function(connect) {
    return connect["id"] == ds_cbi_endpoint_id
  })

  if (existing_bill_connect == undefined) {
    prefix = "cbi-oi-optima"
    if (param_cbi_type == "FOCUS") { prefix = "cbi-oi-focus" }

    result = [{
      billIdentifier: ds_cbi_endpoint_id.split(prefix + "-")[1],
      integrationId: prefix,
      name: param_cbi_cloud_vendor.toLowerCase().trim().replace(/ /g, '_'),
      params: {
        displayName: param_cbi_cloud_vendor,
        vendorName: param_cbi_cloud_vendor.trim().replace(/ /g, '_')
      }
    }]
  }
EOS
end

datasource "ds_create_bill_connect" do
  iterate $ds_to_create_bill_connect
  request do
    auth $auth_flexera
    verb "POST"
    host val($ds_flexera_api_hosts, "flexera")
    path join(["/finops-onboarding/v1/orgs/", rs_org_id, "/bill-connects/cbi"])
    header "User-Agent", "RS Policies"
    body_field "billIdentifier", val(iter_item, "billIdentifier")
    body_field "integrationId", val(iter_item, "integrationId")
    body_field "name", val(iter_item, "name")
    body_field "params", val(iter_item, "params")
  end
  result do
    encoding "json"
    field "id", jmes_path(response, "id")
    field "kind", jmes_path(response, "kind")
    field "created_at", jmes_path(response, "created_at")
    field "updated_at", jmes_path(response, "updated_at")
    field "billIdentifier", jmes_path(response, "cbi.billIdentifier")
    field "integrationId", jmes_path(response, "cbi.integrationId")
    field "name", jmes_path(response, "cbi.name")
    field "displayName", jmes_path(response, "cbi.params.displayName")
    field "vendorName", jmes_path(response, "cbi.params.vendorName")
  end
end

# Branching logic: Select newly created CBI endpoint if it exists. Otherwise, select existing one.
datasource "ds_cbi_endpoint" do
  run_script $js_cbi_endpoint, $ds_create_bill_connect, $ds_existing_bill_connects, $ds_cbi_endpoint_id
end

script "js_cbi_endpoint", type: "javascript" do
  parameters "ds_create_bill_connect", "ds_existing_bill_connects", "ds_cbi_endpoint_id"
  result "result"
  code <<-EOS
  result = _.find(ds_existing_bill_connects, function(connect) { return connect["id"] == ds_cbi_endpoint_id })
  if (ds_create_bill_connect.length > 0) { result = ds_create_bill_connect[0] }
EOS
end

datasource "ds_existing_bill_uploads" do
  request do
    auth $auth_flexera
    host rs_optima_host
    path join(["/optima/orgs/", rs_org_id, "/billUploads"])
    header "User-Agent", "RS Policies"
    body_field "billConnectId", val($ds_cbi_endpoint, "id")
    body_field "billingPeriod", val($ds_dates, "period")
  end
  result do
    encoding "json"
    collect jmes_path(response, "[*]") do
      field "id", jmes_path(col_item, "id")
      field "status", jmes_path(col_item, "status")
      field "billConnectId", jmes_path(col_item, "billConnectId")
      field "billingPeriod", jmes_path(col_item, "billingPeriod")
      field "createdAt", jmes_path(col_item, "createdAt")
      field "updatedAt", jmes_path(col_item, "updatedAt")
    end
  end
end

datasource "ds_pending_bill_uploads" do
  run_script $js_pending_bill_uploads, $ds_existing_bill_uploads
end

script "js_pending_bill_uploads", type: "javascript" do
  parameters "ds_existing_bill_uploads"
  result "result"
  code <<-EOS
  result = _.filter(ds_existing_bill_uploads, function(item) {
    return item["status"] != "complete" && item["status"] != "aborted"
  })
EOS
end

datasource "ds_abort_pending_bill_uploads" do
  iterate $ds_pending_bill_uploads
  request do
    auth $auth_flexera
    verb "POST"
    host rs_optima_host
    path join(["/optima/orgs/", rs_org_id, "/billUploads/", val(iter_item, "id"), "/operations"])
    header "User-Agent", "RS Policies"
    body_field "operation", "abort"
    ignore_status [400, 401, 402, 403, 404, 405, 429, 500, 502]
  end
  result do
    encoding "json"
    field "id", jmes_path(response, "id")
    field "status", jmes_path(response, "status")
    field "billConnectId", jmes_path(response, "billConnectId")
    field "billingPeriod", jmes_path(response, "billingPeriod")
    field "createdAt", jmes_path(response, "createdAt")
    field "updatedAt", jmes_path(response, "updatedAt")
  end
end

# Branching logic: This exists purely to be referenced later to ensure policy execution aborts
# any pending bill uploads before attempting to create a new one.
datasource "ds_aborted_pending_bill_uploads_done" do
  run_script $js_aborted_pending_bill_uploads_done, $ds_abort_pending_bill_uploads
end

script "js_aborted_pending_bill_uploads_done", type: "javascript" do
  parameters "ds_abort_pending_bill_uploads"
  result "result"
  code <<-EOS
  result = { abortedUploads: (ds_abort_pending_bill_uploads.length != 0).toString() }
EOS
end

datasource "ds_cbi_create_bill_upload" do
  request do
    auth $auth_flexera
    verb "POST"
    host rs_optima_host
    path join(["/optima/orgs/", rs_org_id, "/billUploads"])
    header "User-Agent", "RS Policies"
    # This is to ensure that any pending bill uploads were aborted prior to creating a new one
    header "AbortedUploads", val($ds_aborted_pending_bill_uploads_done, "abortedUploads")
    body_field "billConnectId", val($ds_cbi_endpoint, "id")
    body_field "billingPeriod", val($ds_dates, "period")
  end
  result do
    encoding "json"
    field "id", jmes_path(response, "id")
    field "status", jmes_path(response, "status")
    field "createdAt", jmes_path(response, "createdAt")
    field "updatedAt", jmes_path(response, "updatedAt")
    field "billConnectId", jmes_path(response, "billConnectId")
    field "billingPeriod", jmes_path(response, "billingPeriod")
  end
end

datasource "ds_cost_file" do
  request do
    auth $auth_azure_storage
    host $param_blob_hostname
    path join([$param_blob_prefix, val($ds_dates, "period"), ".csv"])
    header "User-Agent", "RS Policies"
  end
  result do
    encoding "text"
  end
end

datasource "ds_cost_file_data" do
  run_script $js_cost_file_data, $ds_cost_file
end

script "js_cost_file_data", type: "javascript" do
  parameters "ds_cost_file"
  result "result"
  code <<-EOS
  if (typeof(ds_cost_file) == 'string') {
    result = { data: ds_cost_file }
  } else {
    result = { data: ds_cost_file[0] }
  }
EOS
end

datasource "ds_cbi_upload_file" do
  request do
    auth $auth_flexera
    verb "POST"
    host rs_optima_host
    path join(["/optima/orgs/", rs_org_id, "/billUploads/", val($ds_cbi_create_bill_upload, "id"), "/files/cost-", val($ds_dates, "period"), ".csv"])
    header "User-Agent", "RS Policies"
    body val($ds_cost_file_data, "data")
  end
  result do
    encoding "json"
    field "id", jmes_path(response, "id")
    field "length", jmes_path(response, "length")
    field "md5", jmes_path(response, "md5")
    field "status", jmes_path(response, "status")
    field "createdAt", jmes_path(response, "createdAt")
    field "updatedAt", jmes_path(response, "updatedAt")
    field "billUploadId", jmes_path(response, "billUploadId")
  end
end

datasource "ds_cbi_commit_bill_upload" do
  request do
    run_script $js_cbi_commit_bill_upload, $ds_cbi_upload_file, $ds_cbi_create_bill_upload, rs_org_id, rs_optima_host
  end
  result do
    encoding "json"
    field "id", jmes_path(response, "id")
    field "status", jmes_path(response, "status")
    field "createdAt", jmes_path(response, "createdAt")
    field "updatedAt", jmes_path(response, "updatedAt")
    field "billConnectId", jmes_path(response, "billConnectId")
    field "billingPeriod", jmes_path(response, "billingPeriod")
  end
end

script "js_cbi_commit_bill_upload", type: "javascript" do
  parameters "ds_cbi_upload_file", "ds_cbi_create_bill_upload", "rs_org_id", "rs_optima_host"
  result "request"
  code <<-EOS
  var request = {
    auth: "auth_flexera",
    verb: "POST",
    host: rs_optima_host,
    path: ["/optima/orgs/", rs_org_id, "/billUploads/", ds_cbi_create_bill_upload["id"], "/operations"].join(''),
    headers: { "User-Agent": "RS Policies" },
    body_fields: {"operation": "commit" }
  }
EOS
end

datasource "ds_incident" do
  run_script $js_incident, $ds_cbi_commit_bill_upload, $ds_applied_policy, $ds_dates, $param_blob_hostname, $param_blob_prefix
end

script "js_incident", type: "javascript" do
  parameters "ds_cbi_commit_bill_upload", "ds_applied_policy", "ds_dates", "param_blob_hostname", "param_blob_prefix"
  result "result"
  code <<-EOS
  result = [{
    policy_name: ds_applied_policy['name'],
    id: ds_cbi_commit_bill_upload['id'],
    status: ds_cbi_commit_bill_upload['status'],
    createdAt: ds_cbi_commit_bill_upload['createdAt'],
    updatedAt: ds_cbi_commit_bill_upload['updatedAt'],
    billConnectId: ds_cbi_commit_bill_upload['billConnectId'],
    billingPeriod: ds_cbi_commit_bill_upload['billingPeriod'],
    blob_hostname: param_blob_hostname,
    filename: param_blob_prefix + ds_dates["period"] + ".csv"
  }]
EOS
end

###############################################################################
# Policy
###############################################################################

policy "pol_fixed_cost" do
  validate_each $ds_incident do
    summary_template "{{ with index data 0 }}{{ .policy_name }}{{ end }}: {{ with index data 0 }}{{ .billingPeriod }}{{ end }}"
    check eq(0, 1)
    escalate $esc_email
    export do
      resource_level true
      field "billingPeriod" do
        label "Billing Period"
      end
      field "blob_hostname" do
        label "Azure Blob Storage Hostname"
      end
      field "filename" do
        label "Azure Blob Storage Object"
      end
      field "id" do
        label "Bill Upload ID"
      end
      field "createdAt" do
        label "Bill Upload Date"
      end
      field "status" do
        label "Bill Upload Status"
      end
    end
  end
end

###############################################################################
# Escalations
###############################################################################

escalation "esc_email" do
  automatic true
  label "Send Email"
  description "Send incident email"
  email $param_email
end

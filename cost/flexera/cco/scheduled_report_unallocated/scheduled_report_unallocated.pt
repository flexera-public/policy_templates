name "Scheduled Report for Unallocated Costs"
rs_pt_ver 20180301
type "policy"
short_description "This policy allows you to set up scheduled reports that will provide summaries of cloud cost that are unallocated for the dimensions you specify, delivered to any email addresses you specify.  See [README](https://github.com/flexera-public/policy_templates/tree/master/cost/flexera/cco/scheduled_report_unallocated/) for more details"
long_description ""
severity "low"
category "Cost"
default_frequency "monthly"
info(
  version: "0.3.0",
  provider: "Flexera",
  service: "Cloud Cost Optimization",
  policy_set: "Cloud Cost Optimization",
  hide_skip_approvals: "true"
)

###############################################################################
# Parameters
###############################################################################

parameter "param_email" do
  type "list"
  category "Policy Settings"
  label "Email List"
  description "Email addresses of the recipients you wish to notify"
  default []
end

parameter "param_cost_dimensions" do
  type "list"
  category "Policy Settings"
  label "Dimensions List"
  description "List of Dimension names/IDs you want to report on. Must provide at least one dimension. Examples: Billing Centers, Services, vendor_account"
  default ["Billing Centers"]
end

parameter "param_cost_filters" do
  type "string"
  category "Policy Settings"
  label "Cost Filters"
  description "JSON object of filters to apply to the report. Example: `{\"dimension\": \"vendor\", \"type\": \"equal\", \"value\": \"aws\"}`"
  default ""
end

parameter "param_cost_metric" do
  type "string"
  category "Policy Settings"
  label "Cost Metric"
  description "Select the cost metric for your report.  See the README file for more details"
  allowed_values "Unamortized Unblended", "Amortized Unblended", "Unamortized Blended", "Amortized Blended"
  default "Unamortized Unblended"
end

parameter "param_cost_time_period" do
  type "string"
  category "Policy Settings"
  label "Date Range"
  description "Select the date range for your report"
  allowed_values "Last 7 Days", "Last 30 Days", "Last 45 Days", "Last 90 Days", "Previous Month", "Previous 3 Months"
  default "Last 30 Days"
end

parameter "param_report_filter_percent_threshold" do
  type "number"
  category "Policy Settings"
  label "Filter Report Percent Threshold"
  description "Filter out rows where the cost metric is less than this percentage of the total spend in the report.  Enter 0 to show all rows."
  min_value 0
  max_value 99
  default 0
end

###############################################################################
# Authentication
###############################################################################

credentials "auth_flexera" do
  schemes "oauth2"
  label "flexera"
  description "Select Flexera One OAuth2 credentials"
  tags "provider=flexera"
end

###############################################################################
# Datasources & Scripts
###############################################################################

datasource "ds_get_dimensions" do
  request do
    auth $auth_flexera
    host rs_optima_host
    path join(["/bill-analysis/orgs/", rs_org_id, "/costs/dimensions"])
    header "Api-Version", "0.1"
    header "User-Agent", "RS Policies"
  end
  result do
    encoding "json"
    collect jmes_path(response, "dimensions[].{id: id, name: name, type:type}") do
      field "id", jmes_path(col_item, "id")
      field "name", jmes_path(col_item, "name")
      field "type", jmes_path(col_item, "type")
    end
  end
end

datasource "ds_cost_dimensions" do
  run_script $js_cost_dimensions, $ds_get_dimensions, $param_cost_dimensions
end

script "js_cost_dimensions", type:"javascript" do
  parameters "ds_get_dimensions", "param_cost_dimensions"
  result "result"
  code <<-EOS
  dimension_ids = _.pluck(ds_get_dimensions, 'id')
  dimension_names = _.pluck(ds_get_dimensions, 'name')

  dimensions = _.map(param_cost_dimensions, function(item) {
    if (item.toLowerCase().trim() == "billing centers" || item.toLowerCase().trim() == "billing_center_id") {
      return { id: "billing_center_id", name: "Billing Centers" }
    } else if (_.contains(dimension_ids, item)) {
      return _.find(ds_get_dimensions, function(dimension) { return dimension['id'] == item })
    } else if (_.contains(dimension_names, item)) {
      return _.find(ds_get_dimensions, function(dimension) { return dimension['name'] == item })
    } else {
      return null
    }
  })

  result = _.compact(dimensions)
EOS
end

datasource "ds_currency_reference" do
  request do
    host "raw.githubusercontent.com"
    path "/flexera-public/policy_templates/master/cost/scheduled_reports/currency_reference.json"
    header "User-Agent", "RS Policies"
  end
end

datasource "ds_currency_code" do
  request do
    auth $auth_flexera
    host rs_optima_host
    path join(["/bill-analysis/orgs/", rs_org_id, "/settings/currency_code"])
    header "Api-Version", "0.1"
    header "User-Agent", "RS Policies"
  end
  result do
    encoding "json"
    field "id", jmes_path(response, "id")
    field "value", jmes_path(response, "value")
  end
end

datasource "ds_currency" do
  run_script $js_currency, $ds_currency_reference, $ds_currency_code
end

script "js_currency", type:"javascript" do
  parameters "ds_currency_reference", "ds_currency_code"
  result "result"
  code <<-EOS
  symbol = "$"
  separator = ","

  if (ds_currency_code['value'] != undefined) {
    if (ds_currency_reference[ds_currency_code['value']] != undefined) {
      symbol = ds_currency_reference[ds_currency_code['value']]['symbol']

      if (ds_currency_reference[ds_currency_code['value']]['t_separator'] != undefined) {
        separator = ds_currency_reference[ds_currency_code['value']]['t_separator']
      } else {
        separator = ""
      }
    }
  }

  result = {
    symbol: symbol,
    separator: separator
  }
EOS
end

datasource "ds_billing_centers" do
  request do
    auth $auth_flexera
    host rs_optima_host
    path join(["/analytics/orgs/", rs_org_id, "/billing_centers"])
    query "view", "allocation_table"
    header "Api-Version", "1.0"
    header "User-Agent", "RS Policies"
    ignore_status [403]
  end
  result do
    encoding "json"
    collect jmes_path(response, "[*]") do
      field "href", jmes_path(col_item, "href")
      field "id", jmes_path(col_item, "id")
      field "name", jmes_path(col_item, "name")
      field "parent_id", jmes_path(col_item, "parent_id")
    end
  end
end

# Gather top level billing center IDs for when we pull cost data
datasource "ds_top_level_bcs" do
  run_script $js_top_level_bcs, $ds_billing_centers
end

script "js_top_level_bcs", type: "javascript" do
  parameters "ds_billing_centers"
  result "result"
  code <<-EOS
  result = _.filter(ds_billing_centers, function(bc) {
    return bc['parent_id'] == null || bc['parent_id'] == undefined
  })
EOS
end

datasource "ds_cost_request_params" do
  run_script $js_cost_request_params, $param_cost_time_period, $param_cost_filters
end

script "js_cost_request_params", type:"javascript" do
  parameters "param_cost_time_period", "param_cost_filters"
  result "result"
  code <<-EOS
  now = new Date()
  result = { filter: null }
  if (param_cost_filters.length > 0) { result['filter'] = JSON.parse(param_cost_filters) }

  switch(param_cost_time_period) {
    case "Last 7 Days":
      result['start_at'] = new Date(now.getFullYear(), now.getMonth(), now.getDate() - 7).toISOString().substring(0, 10)
      result['end_at'] = now.toISOString().substring(0, 10)
      result['granularity'] = "day"
      break
    case "Last 30 Days":
      result['start_at'] = new Date(now.getFullYear(), now.getMonth(), now.getDate() - 30).toISOString().substring(0, 7)
      result['end_at'] = now.toISOString().substring(0, 7)
      result['granularity'] = "day"
      break
    case "Last 45 Days":
      result['start_at'] = new Date(now.getFullYear(), now.getMonth(), now.getDate() - 45).toISOString().substring(0, 7)
      result['end_at'] = now.toISOString().substring(0, 7)
      result['granularity'] = "month"
      break
    case "Last 90 Days":
      result['start_at'] = new Date(now.getFullYear(), now.getMonth(), now.getDate() - 90).toISOString().substring(0, 7)
      result['end_at'] = now.toISOString().substring(0, 7)
      result['granularity'] = "month"
      break
    case "Previous Month":
      result['start_at'] = new Date(now.getFullYear(), now.getMonth() - 1, 1).toISOString().substring(0, 7)
      result['end_at'] = new Date(now.getFullYear(), now.getMonth(), 0).toISOString().substring(0, 7)
      result['granularity'] = "month"
      break
    case "Previous 3 Months":
      result['start_at'] = new Date(now.getFullYear(), now.getMonth() - 3, 1).toISOString().substring(0, 7)
      result['end_at'] = new Date(now.getFullYear(), now.getMonth(), 0).toISOString().substring(0, 7)
      result['granularity'] = "month"
      break
  }
EOS
end

datasource "ds_costs_aggregated" do
  iterate $ds_top_level_bcs
  request do
    run_script $js_costs_aggregated, val(iter_item, "id"), $ds_cost_request_params, $ds_cost_dimensions, $param_cost_metric, $param_cost_time_period, rs_optima_host, rs_org_id
  end
  result do
    encoding "json"
    collect jmes_path(response, "rows[*]") do
      field "bc_id", val(iter_item, "id")
      field "bc_name", val(iter_item, "name")
      field "dimensions", jmes_path(col_item, "dimensions")
      field "metrics", jmes_path(col_item, "metrics")
    end
  end
end

script "js_costs_aggregated", type: "javascript" do
  parameters "bc_id", "ds_cost_request_params", "ds_cost_dimensions", "param_cost_metric", "param_cost_time_period", "rs_optima_host", "rs_org_id"
  result "request"
  code <<-EOS
  cost_metric = {
    "Unamortized Unblended": "cost_nonamortized_unblended_adj",
    "Amortized Unblended": "cost_amortized_unblended_adj",
    "Unamortized Blended": "cost_nonamortized_blended_adj",
    "Amortized Blended": "cost_amortized_blended_adj"
  }

  var request = {
    auth: "auth_flexera",
    host: rs_optima_host,
    verb: "POST",
    path: "/bill-analysis/orgs/" + rs_org_id + "/costs/aggregated",
    body_fields: {
      "filter": ds_cost_request_params["filter"],
      "dimensions": _.pluck(ds_cost_dimensions, 'id'),
      "granularity": ds_cost_request_params["granularity"],
      "start_at": ds_cost_request_params["start_at"],
      "end_at": ds_cost_request_params["end_at"],
      "metrics": [cost_metric[param_cost_metric]],
      "billing_center_ids": [bc_id]
    },
    headers: {
      "User-Agent": "RS Policies",
      "Api-Version": "1.0"
    }
  }
EOS
end

datasource "ds_costs_flattened" do
  run_script $js_costs_flattened, $ds_currency, $ds_costs_aggregated, $ds_cost_request_params, $ds_cost_dimensions, $ds_billing_centers, $param_cost_metric
end

script "js_costs_flattened", type: "javascript" do
  parameters "ds_currency", "ds_costs_aggregated", "ds_cost_request_params", "ds_cost_dimensions", "ds_billing_centers", "param_cost_metric"
  result "result"
  code <<-EOS
  cost_metric = {
    "Unamortized Unblended": "cost_nonamortized_unblended_adj",
    "Amortized Unblended": "cost_amortized_unblended_adj",
    "Unamortized Blended": "cost_nonamortized_blended_adj",
    "Amortized Blended": "cost_amortized_blended_adj"
  }

  metric_name = param_cost_metric + " Spend"

  bc_names = {}
  _.each(ds_billing_centers, function(bc) { bc_names[bc['id']] = bc['name'] })

  dimensions_table = {}
  _.each(ds_cost_dimensions, function(dimension) { dimensions_table[dimension['id']] = dimension['name'] })

  total_spend = 0
  unallocated_spend = 0

  rows = _.map(ds_costs_aggregated, function(row) {
    flattened = { "Unallocated": false }
    unallocatedDetailsList = []

    flattened[metric_name] = row['metrics'][cost_metric[param_cost_metric]]
    total_spend += flattened[metric_name]

    _.each(row['dimensions'], function(value, key) {
      if (dimensions_table[key]) {
        flattened[dimensions_table[key]] = value
      } else {
        flattened[key] = value
      }

      // If billing_center_id dimension, add name dimension to results
      if (key == "billing_center_id") { flattened["Billing Centers"] = bc_names[value] }

      // Certain dimensions from bill dimensions we expect to be "None" or "" but that is a proper allocation
      // resource_group only exists on Azure, and certain usage types don't have a resource_group (Microsoft.Capacity, Support)
      // Check if the key is not one of these dimensions that have no value but are still considered properly allocated
      skip_dimensions = ["resource_group"]

      if (!_.contains(skip_dimensions, key)) {
        // For billing_center_id dimension, unallocated costs are in "unallocated" billing_center_id
        // For all other dimensions (tag, rbd), unallocated costs are in "None" or "" value for that dimension
        if ((key != "billing_center_id" && (value == "None" || value == "")) || (key == "billing_center_id" && value == "unallocated")) {
          flattened["Unallocated"] = true
          unallocatedDetailsList.push("`" + key + "=" + value + "`")
        }
      }
    })

    // If any of the values are unallocated, add the cost to the unallocated_spend
    if (flattened["Unallocated"]) { unallocated_spend += flattened[metric_name] }
    flattened["Unallocated Details"] = unallocatedDetailsList.join(" ")

    return flattened
  })

  // Group by the dimensions
  grouped_rows = _.groupBy(rows, function(row) {
    group_by = []

    _.each(row, function(value, key) {
      if (key != metric_name) { group_by.push(value) }
    })

    return group_by.join("|")
  })

  // Sum the cost_* metrics for each group
  rows = []

  _.each(grouped_rows, function(group) {
    row = {}

    _.each(group, function(item) {
      _.each(item, function(value, key) {
        if (key != metric_name) { row[key] = value }
      })
    })

    _.each(group, function(item) {
      _.each(item, function(value, key) {
        if (key == metric_name) {
          if (row[key] == undefined) { row[key] = 0.0 }
          row[key] += value
        }
      })
    })

    // Round any numeric values in the row
    rounded_row = {}

    _.each(_.keys(row), function(key) {
      rounded_row[key] = row[key]
      if (typeof(row[key]) == 'number') { rounded_row[key] = Math.round(row[key] * 1000) / 1000 }
    })

    rows.push(rounded_row)
  })

  // Free up memory
  grouped_rows = null

  // calculate the percent_of_total now that we have the total_spend
  rows_with_total = []

  _.each(rows, function(row) {
    row[param_cost_metric + " (% of Total)"] = +(((row[metric_name] / total_spend) * 100).toFixed(2))
    rows_with_total.push(row)
  })

  // sort the rows by cost_*_percent_of_total metric
  rows_with_total = _.sortBy(rows_with_total, param_cost_metric + " (% of Total)").reverse()

  // Get the column order from the first row
  // Put any cost_* columns at the end
  columns_unsorted = _.keys(rows[0]) // Reverse the order so that when we push/append them they are in their original order

  // Add the required dimension columns from user input first
  columns = _.pluck(ds_cost_dimensions, 'name').concat([ "Unallocated", "Unallocated Details", metric_name ])

  result = {
    "columns": columns,
    "percent_unallocated_column_name": param_cost_metric + " (% of Total)",
    "currency_code": ds_currency['symbol'],
    "total_spend": Math.round(total_spend * 1000) / 1000,
    "unallocated_spend": Math.round(unallocated_spend * 1000) / 1000,
    "percent_allocated": Math.round((1 - (unallocated_spend / total_spend)) * 100 * 100) / 100,
    "percent_unallocated": Math.round((unallocated_spend / total_spend) * 100 * 100) / 100,
    "rows": rows_with_total,
    "start_at": ds_cost_request_params["start_at"],
    "end_at": ds_cost_request_params["end_at"],
    "filter": ds_cost_request_params["filter"]
  }
EOS
end

###############################################################################
# Policy
###############################################################################

policy "pol_scheduled_report" do
  validate $ds_costs_flattened do
    summary_template "{{ rs_org_name }} (Org ID: {{ rs_org_id }}): Unallocated Costs Scheduled Report"
    detail_template <<-EOS
## Summary

| Total Spend | Unallocated Spend | Percent Unallocated | Percent Allocated |
| ----------- | ----------------- | ------------------- | ----------------- |
| {{ data.currency_code }}{{ data.total_spend }} | {{ data.currency_code }}{{ data.unallocated_spend }} | {{ data.percent_unallocated}}% | {{ data.percent_allocated }}% |

> **Note:** There may be slight discrepancies in the sum of detail amounts and total amounts above due to rounding values to 2 decimal in this report.

### Date Range

{{ data.start_at }} to {{ data.end_at }}

### Filters
{{ if data.filter }}
  {{ data.filter }}
{{- else }}
  No filters applied
{{- end }}

## Details

|{{ range $c := data.columns }} {{ $c }} |{{ end }}
|{{ range $c := data.columns }} --- |{{ end }}
{{ range $i, $r := data.rows -}}
{{- $percent_value := (index $r data.percent_unallocated_column_name) -}}
{{ if gt (printf "%f" $percent_value) (printf "%f" parameters.param_report_filter_percent_threshold) -}}
| {{ range $col := data.columns -}}
{{- $value := (index $r $col) -}}
{{- if and (eq (printf "%T" $value) "string") (not (eq $value "unallocated")) -}}
{{- if or (eq $value "None") (eq $value "unallocated") (eq $value "Unallocated") -}}
  **{{ end -}}
  {{- $value -}}
{{- if or (eq $value "None") (eq $value "unallocated") (eq $value "Unallocated") -}}**{{ end -}}
{{- else -}}
  {{- $value -}}
{{- end }} | {{ end }}
{{ end -}}
{{ end }}

{{ if gt (printf "%f" parameters.param_report_filter_percent_threshold) (printf "%f" 0)  -}}
> **Note:** Policy Setting `Filter Report Percent Threshold` is enabled. Rows with less than {{ (printf "%.2f" parameters.param_report_filter_percent_threshold) }}% of the total spend are not shown in this report.
{{- end }}

###### Policy Applied in Account: {{ rs_project_name }} (Account ID: {{ rs_project_id }}) within Org: {{ rs_org_name }} (Org ID: {{ rs_org_id }})
    EOS
    check eq(1, 0) # Always trigger
    escalate $esc_email
  end
end

###############################################################################
# Escalations
###############################################################################

escalation "esc_email" do
  automatic true
  label "Send Email"
  description "Send incident email"
  email $param_email
end

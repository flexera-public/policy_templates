name "Cloud Cost Anomaly Alerts"
rs_pt_ver 20180301
type "policy"
short_description "Report any cloud cost anomalies detected by Flexera CCO. See the [README](https://github.com/flexera-public/policy_templates/tree/master/cost/flexera/cco/cloud_cost_anomaly_alerts/) and [docs.flexera.com/flexera/EN/Automation](https://docs.flexera.com/flexera/EN/Automation/AutomationGS.htm) to learn more."
long_description ""
doc_link "https://github.com/flexera-public/policy_templates/tree/master/cost/flexera/cco/cloud_cost_anomaly_alerts/"
category "Cost"
severity "high"
default_frequency "daily"
info(
  version: "4.0.0",
  provider: "Flexera",
  service: "Cloud Cost Optimization",
  policy_set: "Cloud Cost Optimization",
  hide_skip_approvals: "true"
)

###############################################################################
# Parameters
###############################################################################

parameter "param_email" do
  type "list"
  category "Policy Settings"
  label "Email Addresses"
  description "A list of email addresses to notify."
  default []
end

parameter "param_days" do
  type "number"
  category "Policy Settings"
  label "Time Period"
  description "Number of days back to analyze for anomalies"
  min_value 1
  max_value 31
  default 30
end

parameter "param_min_spend" do
  type "number"
  category "Policy Settings"
  label "Minimum Period Spend"
  description "Minimum spend over the time period required to include anomaly in results"
  min_value 0
  default 1000
end

parameter "param_min_spend_variance" do
  type "number"
  category "Policy Settings"
  label "Minimum Period Spend Variance"
  description "Minimum spend variance over the time period required to include anomaly in results"
  min_value 0
  default 0
end

parameter "param_anomaly_types" do
  type "string"
  category "Policy Settings"
  label "Anomalies To Report"
  description "Whether to report on anomalies above the upper limit, below the lower limit, or both."
  allowed_values "All Anomalies", "Anomalies Above Upper Limit", "Anomalies Below Lower Limit"
  default "Anomalies Above Upper Limit"
end

parameter "param_cost_metric" do
  type "string"
  category "Policy Settings"
  label "Cost Metric"
  description "Cost metric to use when analyzing spend for anomalies"
  allowed_values "Unamortized Unblended", "Amortized Unblended", "Unamortized Blended", "Amortized Blended"
  default "Amortized Unblended"
end

parameter "param_dimensions" do
  type "list"
  category "Filters"
  label "Cost Anomaly Dimensions"
  description "Dimension names/IDs to report anomalies for. Use Dimension=Value to filter by a dimension. See the README for more details"
  default ["Cloud Vendor Account Name","Service"]
end

parameter "param_dimensions_excluded" do
  type "list"
  category "Filters"
  label "Excluded Cost Anomalies"
  description "Dimension values to not report cost anomalies for in Dimension=Value format. Example: Service=AmazonEC2"
  default []
end

parameter "param_anomaly_limit" do
  type "number"
  category "Policy Settings"
  label "Cost Anomaly Limit"
  description "Number of anomalies to include in the incident"
  min_value 1
  default 10
end

parameter "param_window_size" do
  type "number"
  category "Anomaly Settings"
  label "Window Size"
  description "Window size to use for Bollinger Bands"
  min_value 1
  default 1
end

parameter "param_standard_deviations" do
  type "number"
  category "Anomaly Settings"
  label "Standard Deviations"
  description "Number of standard deviations for the Bollinger Band"
  min_value 0
  default 2
end

parameter "param_anomaly_sort" do
  type "string"
  category "Policy Settings"
  label "Sort Anomalies By"
  description "Sort the anomalies by cost or variance before applying the limit."
  allowed_values "Cost", "Variance"
  default "Variance"
end

###############################################################################
# Authentication
###############################################################################

credentials "auth_flexera" do
  schemes "oauth2"
  label "Flexera"
  description "Select Flexera One OAuth2 credentials"
  tags "provider=flexera"
end

###############################################################################
# Datasources & Scripts
###############################################################################

# Get applied policy metadata for use later
datasource "ds_applied_policy" do
  request do
    auth $auth_flexera
    host rs_governance_host
    path join(["/api/governance/projects/", rs_project_id, "/applied_policies", switch(policy_id, join(["/", policy_id]), "")])
    header "Api-Version", "1.0"
  end
end

datasource "ds_currency_reference" do
  request do
    host "raw.githubusercontent.com"
    path "/flexera-public/policy_templates/master/data/currency/currency_reference.json"
    header "User-Agent", "RS Policies"
  end
end

datasource "ds_currency_code" do
  request do
    auth $auth_flexera
    host rs_optima_host
    path join(["/bill-analysis/orgs/", rs_org_id, "/settings/currency_code"])
    header "Api-Version", "0.1"
    header "User-Agent", "RS Policies"
    ignore_status [403]
  end
  result do
    encoding "json"
    field "id", jmes_path(response, "id")
    field "value", jmes_path(response, "value")
  end
end

datasource "ds_currency" do
  run_script $js_currency, $ds_currency_reference, $ds_currency_code
end

script "js_currency", type:"javascript" do
  parameters "ds_currency_reference", "ds_currency_code"
  result "result"
  code <<-EOS
  symbol = "$"
  separator = ","

  if (ds_currency_code['value'] != undefined) {
    if (ds_currency_reference[ds_currency_code['value']] != undefined) {
      symbol = ds_currency_reference[ds_currency_code['value']]['symbol']

      if (ds_currency_reference[ds_currency_code['value']]['t_separator'] != undefined) {
        separator = ds_currency_reference[ds_currency_code['value']]['t_separator']
      } else {
        separator = ""
      }
    }
  }

  result = {
    symbol: symbol,
    separator: separator
  }
EOS
end

datasource "ds_billing_centers" do
  request do
    auth $auth_flexera
    host rs_optima_host
    path join(["/analytics/orgs/", rs_org_id, "/billing_centers"])
    query "view", "allocation_table"
    header "Api-Version", "1.0"
    header "User-Agent", "RS Policies"
    ignore_status [403]
  end
  result do
    encoding "json"
    collect jmes_path(response, "[*]") do
      field "href", jmes_path(col_item, "href")
      field "id", jmes_path(col_item, "id")
      field "name", jmes_path(col_item, "name")
      field "parent_id", jmes_path(col_item, "parent_id")
    end
  end
end

# Gather top level billing center IDs for when we pull cost data
datasource "ds_top_level_bcs" do
  run_script $js_top_level_bcs, $ds_billing_centers
end

script "js_top_level_bcs", type: "javascript" do
  parameters "ds_billing_centers"
  result "result"
  code <<-EOS
  filtered_bcs = _.filter(ds_billing_centers, function(bc) {
    return bc['parent_id'] == null || bc['parent_id'] == undefined
  })

  result = _.compact(_.pluck(filtered_bcs, 'id'))
EOS
end

datasource "ds_dimensions_incomplete" do
  request do
    auth $auth_flexera
    host rs_optima_host
    path join(["/bill-analysis/orgs/", rs_org_id, "/costs/dimensions"])
    header "Api-Version", "0.1"
    header "User-Agent", "RS Policies"
  end
  result do
    encoding "json"
    collect jmes_path(response, "dimensions[].{id: id, name: name, type:type}") do
      field "id", jmes_path(col_item, "id")
      field "name", jmes_path(col_item, "name")
      field "type", jmes_path(col_item, "type")
    end
  end
end

datasource "ds_dimensions" do
  run_script $js_dimensions, $ds_dimensions_incomplete
end

script "js_dimensions", type: "javascript" do
  parameters "ds_dimensions_incomplete"
  result "result"
  code <<-EOS
  result = [{ id: "billing_center_id", name: "Billing Centers", type: "Billing Centers" }]
  result = result.concat(ds_dimensions_incomplete)
EOS
end

datasource "ds_filter_dimensions" do
  run_script $js_filter_dimensions, $ds_dimensions, $ds_billing_centers, $param_dimensions, $param_dimensions_excluded
end

script "js_filter_dimensions", type: "javascript" do
  parameters "ds_dimensions", "ds_billing_centers", "param_dimensions", "param_dimensions_excluded"
  result "result"
  code <<-EOS
  result = { ids: [], names: [], filters: [], bc_filters: [], invalid_ids: [] }

  _.each(param_dimensions, function(user_input_dimension, index) {
    filter_name = user_input_dimension.split('=')[0]
    filter_value = user_input_dimension.split('=')[1]

    dimensions = _.filter(ds_dimensions, function(dimension) {
      return filter_name == dimension['name'] || filter_name == dimension['id']
    })

    if (dimensions.length == 0) { result['invalid_ids'].push(user_input_dimension) }

    _.each(dimensions, function(dimension) {
      result['ids'].push(dimension['id'])
      result['names'].push(dimension['name'])

      if (filter_value != undefined) {
        filter = {
          id: dimension['id'],
          name: dimension['name'],
          type: "=",
          value: filter_value
        }

        if (dimension['id'] == "billing_center_id") {
          billing_center = _.find(ds_billing_centers, function(bc) {
            return bc['id'] == dimension_filter_value || bc['name'] == dimension_filter_value
          })

          if (billing_center != undefined) {
            filter['value'] = billing_center['id']
            filter['bc_name'] = billing_center['name']
            result['bc_filters'].push(filter)
          }
        } else {
          result['filters'].push(filter)
        }
      }
    })
  })

  _.each(param_dimensions_excluded, function(filter) {
    filter_name = filter.split('=')[0]
    filter_value = filter.split('=')[1]

    dimension = _.find(ds_dimensions, function(dimension) {
      return filter_name == dimension['name'] || filter_name == dimension['id']
    })

    if (dimension) {
      if (filter_value) {
        result['filters'].push({
          id: dimension['id'],
          name: dimension['name'],
          type: "!=",
          value: filter_value
        })
      }
    } else {
      result['invalid_ids'].push(filter_name)
    }
  })

  result['invalid_ids'] = _.compact(_.uniq(result['invalid_ids']))
EOS
end

datasource "ds_request_variables" do
  run_script $js_request_variables, $param_cost_metric, $param_days
end

script "js_request_variables", type: "javascript" do
  parameters "param_cost_metric", "param_days"
  result "result"
  code <<-EOS
  cost_metric = {
    "Unamortized Unblended": "cost_nonamortized_unblended_adj",
    "Amortized Unblended": "cost_amortized_unblended_adj",
    "Unamortized Blended": "cost_nonamortized_blended_adj",
    "Amortized Blended": "cost_amortized_blended_adj"
  }

  // End at should be at least 24 hours in past
  // This is the earliest we can have bill data for a period of time (even if not fully accurate)
  endAt = new Date()
  endAt.setHours(-24)
  endAt = endAt.toISOString().split('T')[0]

  // End at should be day that is number of days in param_days before endAt (which is 24hours in past)
  startAt = new Date()
  startAt.setHours(-24 * (1 + param_days))
  startAt = startAt.toISOString().split('T')[0]

  result = {
    cost_metric: cost_metric[param_cost_metric],
    endAt: endAt,
    startAt: startAt
  }
EOS
end

datasource "ds_get_anomalies" do
  request do
    run_script $js_get_anomalies, $ds_filter_dimensions, $ds_top_level_bcs, $ds_request_variables, $param_window_size, $param_standard_deviations, $param_anomaly_limit, rs_org_id, rs_optima_host
  end
  result do
    encoding "json"
    collect jmes_path(response, "values[*]") do
      field "timeSeries", jmes_path(col_item, "timeSeries")
    end
  end
end

script "js_get_anomalies", type: "javascript" do
  parameters "ds_filter_dimensions", "ds_top_level_bcs", "ds_request_variables", "param_window_size", "param_standard_deviations", "param_anomaly_limit", "rs_org_id", "rs_optima_host"
  result "request"
  code <<-EOS
  bc_filters = ds_filter_dimensions['bc_filters']

  billingCenterIds = ds_top_level_bcs
  if (bc_filters.length > 0) { billingCenterIds = _.pluck(bc_filters, 'value') }

  other_filters = _.map(ds_filter_dimensions['filters'], function(filter) {
    if (filter['type'] == "=") {
      return { type: "equal", dimension: filter['id'], value: filter['value'] }
    }

    if (filter['type'] == "!=") {
      return {
        type: "not",
        expression: { type: "equal", dimension: filter['id'], value: filter['value'] }
      }
    }

    return null
  })

  body_fields = {
    startAt: ds_request_variables['startAt'],
    endAt: ds_request_variables['endAt'],
    metric: ds_request_variables['cost_metric'],
    dimensions: ds_filter_dimensions['ids'],
    billingCenterIds: billingCenterIds,
    windowSize: param_window_size,
    standardDeviations: param_standard_deviations,
    // No limit, we need to filter post-response based on variance amount
    granularity: "day"
  }

  if (_.compact(other_filters).length == 1) {
    body_fields['filter'] = _.compact(other_filters)[0]
  }

  if (_.compact(other_filters).length > 1) {
    body_fields['filter'] = { type: "and", expressions: _.compact(other_filters) }
  }

  var request = {
    auth: "auth_flexera",
    verb: "POST",
    host: rs_optima_host,
    path: "/bill-analysis/orgs/" + rs_org_id + "/anomalies/report",
    headers: {
      "Api-Version": "1.0",
      "User-Agent": "RS Policies"
    },
    body_fields: body_fields
  }
EOS
end

datasource "ds_filter_anomalies" do
  run_script $js_filter_anomalies, $ds_get_anomalies, $ds_dimensions, $ds_filter_dimensions, $ds_request_variables, $ds_billing_centers, $ds_currency, $ds_applied_policy, $param_min_spend, $param_min_spend_variance, $param_anomaly_types, $param_days, $param_dimensions, $param_cost_metric, $param_anomaly_limit, $param_anomaly_sort, rs_org_id, rs_project_id, f1_app_host
end

script "js_filter_anomalies", type: "javascript" do
  parameters "ds_get_anomalies", "ds_dimensions", "ds_filter_dimensions", "ds_request_variables", "ds_billing_centers", "ds_currency", "ds_applied_policy", "param_min_spend", "param_min_spend_variance", "param_anomaly_types", "param_days", "param_dimensions", "param_cost_metric", "param_anomaly_limit", "param_anomaly_sort", "rs_org_id", "rs_project_id", "f1_app_host"
  result "result"
  code <<-EOS
  // Helper to generate a chart URL for the moving average timeseries only
  function generateChartUrl(timeseries) {
    if (!timeseries || !timeseries.moving_average) return '';
    var ma = timeseries.moving_average;
    if (!Array.isArray(ma) || ma.length === 0) return '';
    var labels = ma.map(function(point) { return point[0]; });
    var values = ma.map(function(point) { return point[1]; });
    var chartConfig = {
      type: 'line',
      data: {
        labels: labels,
        datasets: [{
          label: 'Moving Average',
          data: values,
          fill: false,
          borderColor: '#0072ce',
          borderWidth: 2,
          pointRadius: 0
        }]
      },
      options: {
        legend: { display: false },
        title: { display: false },
        scales: {
          xAxes: [{ display: false }],
          yAxes: [{ display: true, ticks: { beginAtZero: true } }]
        },
        elements: { line: { tension: 0.2 } },
        layout: { padding: 0 }
      }
    };
    var chartUrl = 'https://quickchart.io/chart?c=' + encodeURIComponent(JSON.stringify(chartConfig));
    return chartUrl;
  }

  dimensions = ds_filter_dimensions['ids']
  inclusion_filters = _.filter(ds_filter_dimensions['filters'], function(filter) { return filter['type'] == "=" })
  filters = inclusion_filters.concat(ds_filter_dimensions['bc_filters'])

  dimensions_groupby_string = _.map(dimensions, function(id) {
    value = "&groupBy=" + id
    while (value.split(' ')[1] != undefined) { value = value.replace(' ', '%20') }
    return value
  }).join('')

  dimensions_filterby_string = _.map(filters, function(filter) {
    value = "&filterBy=anomaly." + filter['id'] + "." + filter['value']
    while (value.split(' ')[1] != undefined) { value = value.replace(' ', '%20') }
    return value
  }).join('')

  link = [
    "https://", f1_app_host, "/orgs/", rs_org_id, "/optima/anomalies?granularity=day&startDate=",
    ds_request_variables['startAt'], "&endDate=", ds_request_variables['endAt'],
    "&costType=", ds_request_variables['cost_metric'],
    dimensions_groupby_string, dimensions_filterby_string
  ].join('')

  used_filters = _.map(ds_filter_dimensions['bc_filters'], function(filter) {
    return { id: filter['id'], name: filter['name'], type: filter['type'], value: filter['bc_name'] }
  })

  used_filters = used_filters.concat(ds_filter_dimensions['filters'])

  anomalies = []

  _.each(ds_get_anomalies, function(timeSeriesEntry) {
    timeSeries = timeSeriesEntry['timeSeries']

    anomalous = _.filter(timeSeries['data'], function(data) {
      include_anomaly = false

      if (data['anomalous']) {
        include_anomaly = true
        variance = data['value'] - data['annotations']['movingAverage']
        if (variance < 0) { variance = variance * -1 }

        if (data['value'] < param_min_spend) {
          include_anomaly = false
        } else if (variance < param_min_spend_variance) {
          include_anomaly = false
        } else if (param_anomaly_types == "Anomalies Above Upper Limit" && data['value'] < data['annotations']['lowerLimit']) {
          include_anomaly = false
        } else if (param_anomaly_types == "Anomalies Below Lower Limit" && data['value'] > data['annotations']['upperLimit']) {
          include_anomaly = false
        }
      }

      return include_anomaly
    })

    if (anomalous.length > 0) {
      var dimension_key = _.map(ds_filter_dimensions['ids'], function(id) {
        var dimensionValue = timeSeries['dimensions'][id];
        if (id == "billing_center_id") {
          var billing_center = _.find(ds_billing_centers, function(bc) {
            return bc['id'] == dimensionValue;
          });
          return billing_center['name'];
        } else {
          return dimensionValue;
        }
      }).join('; ');
      _.each(anomalous, function(data){
        variance = data['value'] - data['annotations']['movingAverage']
        if (variance < 0) { variance = variance * -1 }

        // https://app.flexera.com/orgs/41032/optima/anomalies?granularity=month&startDate=2025-01&endDate=2025-08&costType=cost_amortized_unblended_adj&groupBy=vendor_account_name&groupBy=service&filterBy=anomaly.vendor_account&filterBy=anomaly.service&filterBy=anomaly.vendor_account.210418826726&filterBy=anomaly.service.AmazonEC2
        var anomaly_link = link;
        var anomaly_link_label = [];
        for (var i = 0; i < ds_filter_dimensions['ids'].length; i++) {
          var filter = ds_filter_dimensions['ids'][i];
          var label = ds_filter_dimensions['names'][i];
          anomaly_link += "&filterBy=anomaly." + filter + "." + encodeURIComponent(timeSeries['dimensions'][filter]);
          anomaly_link_label.push(label + "=" + timeSeries['dimensions'][filter]);
        }
        anomaly_link_label_string = anomaly_link_label.join('; ');
        // Generate chart URL for this anomaly
        var chartUrl = generateChartUrl(timeSeries);
        var chartUrlField = chartUrl ? (anomaly_link_label_string + " Anomaly Chart||" + chartUrl + "&from_pt=true") : "";
        anomalies.push({
          id: dimension_key,
          cost: Math.round(data['value'] * 1000) / 1000,
          date: data['date'].split('T')[0],
          variance: Math.round((data['value'] - data['annotations']['movingAverage']) * 1000) / 1000,
          movingAverage: Math.round(data['annotations']['movingAverage'] * 100) / 100,
          upperLimit: Math.round(data['annotations']['upperLimit'] * 100) / 100,
          lowerLimit: Math.round(data['annotations']['lowerLimit'] * 100) / 100,
          metric: param_cost_metric,
          anomaly_types: param_anomaly_types,
          anomaly_link: anomaly_link,
          anomaly_link_field: anomaly_link_label.join('; ') + "||" + anomaly_link,
          currency: ds_currency['symbol'],
          chartUrl: chartUrl,
          chartUrlField: chartUrlField
        });
      });
    }
  })

  exclusion_disclaimer = ""

  if (param_anomaly_limit < 1) { param_anomaly_limit = 10 }
  var sortField = param_anomaly_sort === "Variance" ? "variance" : "cost";
  anomalies = _.sortBy(anomalies, sortField).reverse()
  // Limit the number of anomalies in the final report based on param_anomaly_limit
  if (anomalies.length > param_anomaly_limit) {
    anomalies = anomalies.slice(0, param_anomaly_limit);
  } else if (anomalies.length < param_anomaly_limit) {
    exclusion_disclaimer += "\\n\\nNote: Fewer than " + param_anomaly_limit + " anomalies detected matching thresholds and exclusions, so all anomalies included."
  }

  if (_.some(ds_filter_dimensions['filters'], function(filter) { return filter["type"] == "!=" })) {
    exclusion_disclaimer += "\\n\\nNote: Exclusion filters not included in above link."
  }

  result = {
    anomalies: anomalies,
    link: link,
    invalid_ids: ds_filter_dimensions['invalid_ids'],
    valid_dimensions: _.sortBy(ds_dimensions, 'name'),
    used_filters: used_filters,
    used_dimensions: ds_filter_dimensions['names'],
    currency: ds_currency['symbol'],
    policy_name: ds_applied_policy['name'] || "Cloud Cost Anomaly Alerts",
    exclusion_disclaimer: exclusion_disclaimer
  }
EOS
end

datasource "ds_filter_anomalies_result" do
  run_script $js_filter_anomalies_result, $ds_filter_anomalies, $ds_currency, $ds_applied_policy
end

script "js_filter_anomalies_result", type: "javascript" do
  parameters "ds_filter_anomalies", "ds_currency", "ds_applied_policy"
  result "result"
  code <<-EOS
  var result = ds_filter_anomalies['anomalies']
  // Append the result metadata to the first result item so we can access it later
  if (result.length > 0) {
    result[0]['metadata'] = {
      "policy_name": ds_filter_anomalies['policy_name']
      "used_dimensions": ds_filter_anomalies['used_dimensions'],
      "used_filters": ds_filter_anomalies['used_filters'],
      "exclusion_disclaimer": ds_filter_anomalies['exclusion_disclaimer']
    }
  }
EOS
end

###############################################################################
# Policy
###############################################################################

policy "pol_anomaly_alert" do
  validate $ds_filter_anomalies_result do
    summary_template "{{ with index data 0 }}{{ .metadata.policy_name }}{{ end }}: {{ len data }} Cloud Cost Anomalies Detected\n\n{{ if gt (len data) 0 }}Top Anomaly: {{ (index data 0).id }} ({{ (index data 0).cost }} {{ (index data 0).currency }}, Variance: {{ (index data 0).variance }}){{ end }}"
    detail_template <<-EOS
{{- with index data 0 }}
## Dimension(s)
{{- range .metadata.used_dimensions }}
- {{ . }}
{{- end }}
{{ if .metadata.used_filters }}
## Filter(s)
{{- range .metadata.used_filters }}
- {{ .name }} {{ .type }} {{ .value }}
{{- end }}
{{ end }}
{{ if .metadata.exclusion_disclaimer }}
## Exclusion Disclaimer
{{ .metadata.exclusion_disclaimer }}
{{ end }}
{{ end }}

{{ if gt (len data) 0 }}
## Recommendations
- Review the top anomaly above for potential root causes.
- Use the anomaly chart link to visualize the cost spike and compare to moving average and limits.
- Click the anomaly link to open the full anomaly dashboard in Flexera One for further investigation.
{{ end }}
EOS
    check eq(size(data), 0)
    escalate $esc_email
    hash_exclude "movingAverage", "variance", "cost", "upperLimit", "lowerLimit"
    export do
      resource_level true
      field "anomaly_link_field" do
        label "Anomaly Link"
        format "link-external"
      end
      field "chartUrlField" do
        label "Anomaly Chart"
        format "link-external"
      end
      field "date" do
        label "Date"
      end
      field "movingAverage" do
        label "Moving Average"
      end
      field "variance" do
        label "Variance From Average"
      end
      field "cost" do
        label "Cost"
      end
      field "upperLimit" do
        label "Upper Limit"
      end
      field "lowerLimit" do
        label "Lower Limit"
      end
      field "metric" do
        label "Cost Metric"
      end
      field "currency" do
        label "Currency"
      end
      field "id" do
        label "Grouping Dimensions"
      end
    end
  end
  validate $ds_filter_anomalies do
    summary_template "{{ data.policy_name }}: {{ len data.invalid_ids }} Invalid Dimension(s)"
    detail_template <<-EOS
The following provided dimensions are invalid. Please reapply the policy with valid dimensions.

#### Invalid dimension(s):
{{- range data.invalid_ids }}
- {{ . }}
{{- end }}

The below table includes a full list of valid dimensions. Dimensions can be referenced by ID or name in the *Cost Anomaly Dimensions* parameter.
    EOS
    check eq(size(val(data, "invalid_ids")), 0)
    escalate $esc_email
    export "valid_dimensions" do
      resource_level true
      field "id" do
        label "ID"
      end
      field "name" do
        label "Name"
      end
      field "type" do
        label "Type"
      end
    end
  end
end

###############################################################################
# Escalations
###############################################################################

escalation "esc_email" do
  automatic true
  label "Send Email"
  description "Send incident email"
  email $param_email
end

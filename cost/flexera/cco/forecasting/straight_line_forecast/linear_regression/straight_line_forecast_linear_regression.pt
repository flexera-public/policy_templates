name "Cloud Spend Forecast - Straight-Line (Linear Regression Model)"
rs_pt_ver 20180301
type "policy"
short_description "Pulls the cost data for lookback period then generates a Straight-Line Forecast for the specified months using a Linear Regression model. See the [README](https://github.com/flexera-public/policy_templates/tree/master/cost/flexera/cco/forecasting/straight_line_forecast/linear_regression/) and [docs.flexera.com/flexera/EN/Automation](https://docs.flexera.com/flexera/EN/Automation/AutomationGS.htm) to learn more."
long_description ""
severity "low"
category "Cost"
default_frequency "monthly"
info(
  version: "4.0.0",
  provider: "Flexera",
  service: "Cloud Cost Optimization",
  policy_set: "Forecasting"
)

###############################################################################
# Parameters
###############################################################################

parameter "param_email" do
  type "list"
  category "Policy Settings"
  label "Email Addresses"
  description "Email addresses of the recipients you wish to send the scheduled report to."
  default []
end

parameter "param_cost_metric" do
  type "string"
  category "Policy Settings"
  label "Cost Metric"
  description "The cost metric to use when calculating and reporting the moving average."
  allowed_values "Unamortized Unblended", "Amortized Unblended", "Unamortized Blended", "Amortized Blended"
  default "Unamortized Unblended"
end

parameter "param_bc_allow_or_deny" do
  type "string"
  category "Filters"
  label "Allow/Deny Billing Centers"
  description "Allow or Deny entered Billing Centers."
  allowed_values "Allow", "Deny"
  default "Allow"
end

parameter "param_bc_list" do
  type "list"
  category "Filters"
  label "Allow/Deny Billing Center List"
  description "A list of allowed or denied Billing Center names/IDs. Leave blank to produce forecast for entire Flexera organization."
  default []
end

parameter "param_lookback" do
  type "number"
  category "Policy Settings"
  label "Look Back Months (#)"
  description "Number of months into the past to use for generating forecast."
  min_value 1
  default 10
end

parameter "param_forecasted" do
  type "number"
  category "Policy Settings"
  label "Forecast Months (#)"
  description "Number of months in the future to forecast"
  min_value 1
  default 6
end

parameter "param_dimension" do
  type "string"
  category "Policy Settings"
  label "Dimension"
  description "Select dimension, leave blank for no dimensions"
  allowed_values "Category", "Region", "Service", "Vendor Account Name", "Billing Center"
  default "Category"
end

###############################################################################
# Authentication
###############################################################################

credentials "auth_flexera" do
  schemes "oauth2"
  label "flexera"
  description "Select Flexera One OAuth2 credentials"
  tags "provider=flexera"
end

###############################################################################
# Datasources & Scripts
###############################################################################

# Gather applied policy metadata for use later
datasource "ds_applied_policy" do
  request do
    auth $auth_flexera
    host rs_governance_host
    path join(["/api/governance/projects/", rs_project_id, "/applied_policies/", policy_id])
    header "Api-Version", "1.0"
  end
end

datasource "ds_currency_reference" do
  request do
    host "raw.githubusercontent.com"
    path "/flexera-public/policy_templates/master/data/currency/currency_reference.json"
    header "User-Agent", "RS Policies"
  end
end

datasource "ds_currency_code" do
  request do
    auth $auth_flexera
    host rs_optima_host
    path join(["/bill-analysis/orgs/", rs_org_id, "/settings/currency_code"])
    header "Api-Version", "0.1"
    header "User-Agent", "RS Policies"
    ignore_status [403]
  end
  result do
    encoding "json"
    field "id", jmes_path(response, "id")
    field "value", jmes_path(response, "value")
  end
end

datasource "ds_currency" do
  run_script $js_currency, $ds_currency_reference, $ds_currency_code
end

script "js_currency", type:"javascript" do
  parameters "ds_currency_reference", "ds_currency_code"
  result "result"
  code <<-'EOS'
  code = "USD"
  symbol = "$"
  separator = ","

  if (ds_currency_code['value'] != undefined) {
    if (ds_currency_reference[ds_currency_code['value']] != undefined) {
      code = ds_currency_reference[ds_currency_code['value']]['code']
      symbol = ds_currency_reference[ds_currency_code['value']]['symbol']

      if (ds_currency_reference[ds_currency_code['value']]['t_separator'] != undefined) {
        separator = ds_currency_reference[ds_currency_code['value']]['t_separator']
      } else {
        separator = ""
      }
    }
  }

  result = {
    code: code,
    symbol: symbol,
    separator: separator
  }
EOS
end

datasource "ds_billing_centers" do
  request do
    auth $auth_flexera
    host rs_optima_host
    path join(["/analytics/orgs/", rs_org_id, "/billing_centers"])
    header "Api-Version", "1.0"
    header "User-Agent", "RS Policies"
  end
  result do
    encoding "json"
    collect jmes_path(response, "[*]") do
      field "href", jmes_path(col_item, "href")
      field "id", jmes_path(col_item, "id")
      field "name", jmes_path(col_item, "name")
      field "parent_id", jmes_path(col_item, "parent_id")
    end
  end
end

datasource "ds_billing_centers_filtered" do
  run_script $js_billing_centers_filtered, $ds_billing_centers, $param_bc_allow_or_deny, $param_bc_list
end

script "js_billing_centers_filtered", type: "javascript" do
  parameters "ds_billing_centers", "param_bc_allow_or_deny", "param_bc_list"
  result "result"
  code <<-EOS
  allow_deny_test = { "Allow": true, "Deny": false }

  if (param_bc_list.length > 0) {
    billing_centers = _.filter(ds_billing_centers, function(item) {
      id_found = _.contains(param_bc_list, item['id']) == allow_deny_test[param_bc_allow_or_deny]
      name_found = _.contains(param_bc_list, item['name']) == allow_deny_test[param_bc_allow_or_deny]
      return id_found || name_found
    })

    // Check for conflicting parents/children and remove children if present
    bc_ids = _.compact(_.pluck(billing_centers, 'id'))
    bad_children = _.filter(ds_billing_centers, function(bc) { return _.contains(bc_ids, bc['parent_id']) })
    bad_children_ids = _.pluck(bad_children, 'id')

    // Create final result with the bad children removed
    result = _.reject(billing_centers, function(bc) { return _.contains(bad_children_ids, bc['id']) })
  } else {
    // If we're not filtering at all, just grab all of the top level billing centers
    result = _.filter(ds_billing_centers, function(bc) {
      return bc['parent_id'] == null || bc['parent_id'] == undefined
    })
  }
EOS
end

datasource "ds_past_month_list" do
  run_script $js_past_month_list, $param_lookback
end

script "js_past_month_list", type: "javascript" do
  parameters "param_lookback"
  result "result"
  code <<-EOS
  // Simple function to advance date in YYYY-MM format ahead or behind one month
  // Avoids issues caused by using setMonth() functionality
  function change_month(date, change) {
    year = Number(date.split('-')[0])
    month = Number(date.split('-')[1])

    month = month + change
    if (month == 0) { year -= 1; month = 12 }
    if (month == 13) { year += 1; month = 1 }

    if (month < 10) { month = "0" + month.toString() }
    return year.toString() + '-' + month.toString()
  }

  result = []

  iterating_month = new Date().toISOString().substring(0, 7)

  for (var i = 0; i < param_lookback; i++) {
    iterating_month = change_month(iterating_month, -1)
    result.push({ start_date: iterating_month, end_date: change_month(iterating_month, 1) })
  }
EOS
end

datasource "ds_costs" do
  iterate $ds_past_month_list
  request do
    run_script $js_costs, val(iter_item, "start_date"), val(iter_item, "end_date"), $ds_billing_centers_filtered, $param_cost_metric, $param_dimension, rs_optima_host, rs_org_id
  end
  result do
    encoding "json"
    collect jmes_path(response, "rows[*]") do
      field "cost_amortized_unblended_adj", jmes_path(col_item, "metrics.cost_amortized_unblended_adj")
      field "cost_amortized_blended_adj", jmes_path(col_item, "metrics.cost_amortized_blended_adj")
      field "cost_nonamortized_unblended_adj", jmes_path(col_item, "metrics.cost_nonamortized_unblended_adj")
      field "cost_nonamortized_blended_adj", jmes_path(col_item, "metrics.cost_nonamortized_blended_adj")
      field "billing_center_id", jmes_path(col_item, "dimensions.billing_center_id")
      field "category", jmes_path(col_item, "dimensions.category")
      field "region", jmes_path(col_item, "dimensions.region")
      field "service", jmes_path(col_item, "dimensions.service")
      field "vendor_account_name", jmes_path(col_item, "dimensions.vendor_account_name")
      field "start_date", val(iter_item, "start_date")
    end
  end
end

script "js_costs", type: "javascript" do
  parameters "start_date", "end_date", "ds_billing_centers_filtered", "param_cost_metric", "param_dimension", "rs_optima_host", "rs_org_id"
  result "request"
  code <<-EOS
  cost_metric_table = {
    "Unamortized Unblended": "cost_nonamortized_unblended_adj",
    "Amortized Unblended": "cost_amortized_unblended_adj",
    "Unamortized Blended": "cost_nonamortized_blended_adj",
    "Amortized Blended": "cost_amortized_blended_adj"
  }

  dimensions = []

  if (param_dimension == "Category" || param_dimension == "Billing Center") {
    dimensions = [ "billing_center_id", "category" ]
  } else if (param_dimension != "") {
    dimensions = [ "billing_center_id", "category", param_dimension.toLowerCase().replace(/ /g, "_") ]
  }

  var request = {
    auth: "auth_flexera",
    verb: "POST",
    host: rs_optima_host,
    path: "/bill-analysis/orgs/" + rs_org_id + "/costs/aggregated",
    headers: { "Api-Version": "1.0", "User-Agent": "RS Policies" },
    body_fields: {
      "dimensions": dimensions,
      "granularity": "month",
      "metrics": [ cost_metric_table[param_cost_metric] ],
      "billing_center_ids": _.pluck(ds_billing_centers_filtered, "id"),
      "start_at": start_date,
      "end_at": end_date
    }
  }
EOS
end

datasource "ds_past_costs" do
  run_script $js_past_costs, $ds_costs, $ds_billing_centers, $param_cost_metric, $param_forecasted, $param_dimension
end

script "js_past_costs", type: "javascript" do
  parameters "ds_costs", "ds_billing_centers", "param_cost_metric", "param_forecasted", "param_dimension"
  result "result"
  code <<-EOS
  cost_metric_table = {
    "Unamortized Unblended": "cost_nonamortized_unblended_adj",
    "Amortized Unblended": "cost_amortized_unblended_adj",
    "Unamortized Blended": "cost_nonamortized_blended_adj",
    "Amortized Blended": "cost_amortized_blended_adj"
  }

  dimension_table = {
    "Category": "category",
    "Region": "region",
    "Service": "service",
    "Vendor Account Name": "vendor_account_name",
    "Billing Center": "billing_center_name"
  }

  billing_center_table = {}
  _.each(ds_billing_centers, function(bc) { billing_center_table[bc['id']] = bc['name'] })

  filtered_costs = _.reject(ds_costs, function(cost) { return cost["category"] == "Commitments" })

  enriched_costs = _.map(filtered_costs, function(cost) {
    billing_center_name = undefined

    if (typeof(cost["billing_center_id"]) == 'string' && billing_center_table[cost["billing_center_id"]] != undefined]) {
      billing_center_name = billing_center_table[cost["billing_center_id"]]
    }

    return {
      billing_center_id: cost["billing_center_id"],
      category: cost["category"],
      region: cost["region"],
      service: cost["service"],
      vendor_account_name: cost["vendor_account_name"],
      month: cost["start_date"],
      cost: cost[cost_metric_table[param_cost_metric]],
      billing_center_name: billing_center_name
    }
  })

  months = _.uniq(_.pluck(enriched_costs, "month"))
  dimensions = _.uniq(_.pluck(enriched_costs, dimension_table[param_dimension]))

  costs_by_month_and_dimension = []
  sums_by_dimension = {}

  _.each(months, function(month) {
    _.each(dimensions, function(dimension) {
      sliced_costs = _.filter(enriched_costs, function(item) {
        return item["month"] == month && item[dimension_table[param_dimension]] == dimension
      })

      costs = _.pluck(sliced_costs, 'cost')
      total_cost = _.reduce(costs, function(memo, num) { return memo + num }, 0)
      costs_by_month_and_dimension.push({ month: month, dimension: dimension, cost: total_cost })

      if (sums_by_dimension[dimension] == undefined) { sums_by_dimension[dimension] = 0 }
      sums_by_dimension[dimension] += total_cost
    })
  })

  // Take the above, find the top 8 dimension values, and mark everything else as "Other"
  sums_by_dimension_list = []

  _.each(_.keys(sums_by_dimension), function(key) {
    sums_by_dimension_list.push({ dimension: key, cost: sums_by_dimension[key] })
  })

  top_eight_dimensions = _.pluck(_.sortBy(sums_by_dimension_list, 'cost').reverse().slice(0, 8), 'dimension')

  top_eight_result = _.filter(costs_by_month_and_dimension, function(item) {
    return _.contains(top_eight_dimensions, item['dimension'])
  })

  other_result = _.reject(costs_by_month_and_dimension, function(item) {
    return _.contains(top_eight_dimensions, item['dimension'])
  })

  other_result_monthly = _.groupBy(other_result, "month")

  other_result_summed = []

  _.each(_.keys(other_result_monthly), function(month) {
    other_result_summed.push({
      month: month,
      dimension: "Other",
      cost: _.reduce(_.pluck(other_result_monthly[month], "cost"), function(memo, num) { return memo + num }, 0)
    })
  })

  result = _.sortBy(top_eight_result.concat(other_result_summed), "month")
EOS
end

datasource "ds_forecasted_costs" do
  run_script $js_forecasted_costs, $ds_past_costs, $param_forecasted
end

script "js_forecasted_costs", type: "javascript" do
  parameters "ds_past_costs", "param_forecasted"
  result "result"
  code <<-EOS
  // Simple function to advance date in YYYY-MM format ahead or behind one month
  // Avoids issues caused by using setMonth() functionality
  function change_month(date, change) {
    year = Number(date.split('-')[0])
    month = Number(date.split('-')[1])

    month = month + change
    if (month == 0) { year -= 1; month = 12 }
    if (month == 13) { year += 1; month = 1 }

    if (month < 10) { month = "0" + month.toString() }
    return year.toString() + '-' + month.toString()
  }

  group_by_dimension = _.groupBy(ds_past_costs, "dimension")

  forecast_data = []

  _.each(_.keys(group_by_dimension), function(key) {
    n = 0
    sum_x = 0, sum_x_squared = 0, x_mean = 0
    sum_y = 0, sum_x_y = 0, y_mean = 0

    _.each(group_by_dimension[key], function(dimension) {
      // Get the cost and the month as an integer e.g. 2021-02 is x=1, 2021-03 is x=2, etc.
      x = group_by_dimension[key].length - n   // Represents month on the x axis
      y = dimension['cost']                    // Represents cost on the y axis

      sum_x += x, sum_x_squared += x * x
      sum_y += y, sum_x_y += x * y
      n++
    })

    x_mean = sum_x / n
    y_mean = sum_y / n

    // Calculate Sxx and Sxy to then calculate Beta
    s_xx = sum_x_squared - ((sum_x * sum_x) / n)
    s_xy = sum_x_y - ((sum_x * sum_y) / n)
    beta = s_xy / s_xx

    // Calculate Alpha
    alpha = y_mean - (beta * x_mean)

    forecast_data.push({
      dimension: dimension,
      alpha: alpha,
      beta: beta,
      historical_months: n
    })
  })

  result = []
  iterating_month = new Date().toISOString().substring(0, 7)

  for (i = 0; i < param_forecasted; i++) {
    _.each(forecast_data, function(data) {
      x_value = data['historical_months'] + (i + 1)       // 'x' in y = bx + a (x represents forecasted month)
      y_value = (data['beta'] * x_value) + data['alpha']  // 'y' in y = bx + a (y represents forecasted cost)
      if (y_value < 0) { y_value = 0 }                    // To stop downward trends in cost from going below 0

      result.push({
        month: iterating_month,
        dimension: data['dimension'],
        forecasted_cost: Math.round(parseFloat(y_value) * 100) / 100
      })
    }

    iterating_month = change_month(iterating_month, 1)
  }
EOS
end

datasource "ds_chart_data" do
  run_script $js_chart_data, $ds_forecasted_costs, $param_dimension
end

script "js_chart_data", type: "javascript" do
  parameters "ds_forecasted_costs", "param_dimension"
  result "result"
  code <<-EOS
EOS
end



#CREATE CHART
datasource "ds_chart_data" do
  run_script $js_create_chart_data, $ds_forecast_data, $param_dimension
end

script "js_create_chart_data", type: "javascript" do
  parameters "forecast_data", "param_dimension"
  result "report"
  code <<-EOS

  //Group data by Dimension
  group_by_dimension =
  _.groupBy(forecast_data, function(data){ return data.dimension })
  report = forecast_data

  //Create chart axis labels
  chart_axis_labels =
  ("chxl=0:," +
    _.uniq(forecast_data, function(data){ return data.month })
    .map(function(data){ return data.month })
  ).split(",").join("|")

  //Create legend
  chart_legend = "chdl="
  var i = 0
  for (var key in group_by_dimension) {
    chart_legend += key
    i++
    if (i < _.size(group_by_dimension)) { chart_legend += "|" }
  }

  //Create chart dataset
  chart_data = "chd=t:"
  var count_1 = 0
  _.each(group_by_dimension, function(o){
    var count_2 = 0
    _.each(o, function(p){
      chart_data = chart_data + p.forecasted_cost
      count_2++
      if (count_2 < _.size(o)){ chart_data = chart_data + "," }
    })
    count_1++
    if (count_1 < _.size(group_by_dimension)){ chart_data = chart_data + "|" }
  })

  //Create Chart Title
  policy_title = "Forecasted Costs by " + param_dimension
  chart_title = "chtt=" + policy_title
  if( param_dimension == "" ){
    policy_title = "Forecasted Costs"
    chart_title = "chtt=" + policy_title
  }

  //get current month
  var month_names = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']
  var now = new Date();
  var current_month_name = month_names[now.getMonth()];
  //Whole Chart object
  chart = {
    chart_type: encodeURI("cht=bvs"),
    chart_size: encodeURI("chs=900x500"),
    chart_data: encodeURI(chart_data),
    chart_title: encodeURI(chart_title),
    chart_image: encodeURI("chof=.png"),
    chart_label_position: encodeURI("chdlp=b"),
    chart_axis: encodeURI("chxt=x,y"),
    chart_axis_label: encodeURI(chart_axis_labels),
    chart_axis_format: encodeURI("chxs=1N*cUSD0sz*|0,min40"),
    chart_line_style: encodeURI("chls=3|3|3|3|3|3|3|3|3|3|3"),
    chart_line_color: encodeURI("chco=6929c4,9f1853,198038,b28600,1192e8,009d9a,005d5d,007d79"),
    chart_data_scale: encodeURI("chds=a"),
    chart_legend: encodeURI(chart_legend),
    chart_legend_size: encodeURI("chdls=000000,10"),
    policy_title: policy_title,
    current_month_name: current_month_name
  }

  report[0]["chart_dimensions"] = chart
  EOS
end

###############################################################################
# Policy
###############################################################################

policy "policy_straight_line_forecast" do
  validate $ds_chart_data do
    summary_template "Cloud Spend Forecast - Straight-Line (Linear Regression Model)"
    detail_template <<-EOS
# Full Cost Report for {{ rs_org_name }} - {{ with index data 0 }}{{ .chart_dimensions.current_month_name }}{{ end }}
![Forecast Chart](https://api.image-charts-auth.flexeraeng.com/ic-function?rs_org_id={{ rs_org_id }}&rs_project_id={{ rs_project_id }}&{{ with index data 0 }}{{ .chart_dimensions.chart_data }}{{ end }}&{{ with index data 0 }}{{ .chart_dimensions.chart_size }}{{ end }}&{{ with index data 0 }}{{ .chart_dimensions.chart_type }}{{ end }}&{{ with index data 0 }}{{ .chart_dimensions.chart_image }}{{ end }}&{{ with index data 0 }}{{ .chart_dimensions.chart_title }}{{ end }}&{{ with index data 0 }}{{ .chart_dimensions.chart_label_position }}{{ end }}&{{ with index data 0 }}{{ .chart_dimensions.chart_axis }}{{ end }}&{{ with index data 0 }}{{ .chart_dimensions.chart_axis_label }}{{ end }}&{{ with index data 0 }}{{ .chart_dimensions.chart_line_style }}{{ end }}&{{ with index data 0 }}{{ .chart_dimensions.chart_line_color }}{{ end }}&{{ with index data 0 }}{{ .chart_dimensions.chart_data_scale }}{{ end }}&{{ with index data 0 }}{{ .chart_dimensions.chart_legend_size }}{{ end }}&{{ with index data 0 }}{{ .chart_dimensions.chart_legend }}{{ end }}&{{ with index data 0 }}{{ .chart_dimensions.chart_axis_format }}{{ end }})
___
###### Policy Applied in Account: {{ rs_project_name }} (Account ID: {{ rs_project_id }}) within Org: {{ rs_org_name }} (Org ID: {{ rs_org_id }})
EOS
    check eq(1, 0)
    escalate $esc_email
    export do
      field "month" do
        label "Month"
      end
      field "dimension" do
        label "Dimension Value"
      end
      field "forecasted_cost" do
        label "Forecasted Costs"
      end
    end
  end
end

###############################################################################
# Escalations
###############################################################################

escalation "esc_email" do
  automatic true
  label "Send Email"
  description "Send incident email"
  email $param_email
end

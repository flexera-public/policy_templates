name "Vendor Spend Commitment Forecast"
rs_pt_ver 20180301
type "policy"
short_description "Reports whether spend for the specified cloud provider is projected to meet a spend commitment target for the specified time period. See the [README](https://github.com/flexera-public/policy_templates/tree/master/cost/flexera/cco/forecasting/commitment_forecast/) and [docs.flexera.com/flexera/EN/Automation](https://docs.flexera.com/flexera/EN/Automation/AutomationGS.htm) to learn more."
long_description ""
category "Cost"
severity "medium"
default_frequency "monthly"
info(
  version: "4.0.0",
  provider: "Flexera",
  service: "Cloud Cost Optimization",
  policy_set: "Forecasting"
)

###############################################################################
# Parameters
###############################################################################

parameter "param_email" do
  type "list"
  category "Policy Settings"
  label "Email Addresses"
  description "A list of email addresses to notify."
  default []
end

parameter "param_commitment_target" do
  type "number"
  category "Policy Settings"
  label "Total Commitment Target"
  description "The total commitment target for the specified time period. Value should be in the currency the Flexera One organization is configured to use."
  # No default value, user input required
end

parameter "param_cost_metric" do
  type "string"
  category "Policy Settings"
  label "Cost Metric"
  description "Cost metric to use for the report. 'Unamortized Unblended' is recommended for accuracy."
  allowed_values "Unamortized Unblended", "Amortized Unblended", "Unamortized Blended", "Amortized Blended"
  default "Unamortized Unblended"
end

parameter "param_start_date" do
  type "string"
  category "Policy Settings"
  label "Commitment Period Start Date"
  description "Start date for the Commitment Period in YYYY-MM format. Example: 2024-01"
  allowed_pattern /20[2-9][0-9]-[0-1][0-9]/
  # No default value, user input required
end

parameter "param_end_date" do
  type "string"
  category "Policy Settings"
  label "Commitment Period End Date"
  description "End date for the Commitment Period in YYYY-MM format. Example: 2025-01"
  allowed_pattern /20[2-9][0-9]-[0-1][0-9]/
  # No default value, user input required
end

parameter "param_cloud_vendor" do
  type "string"
  category "Filters"
  label "Cloud Vendor"
  description "Cloud Vendor to report on. Examples: AWS, Azure, GCP. Leave blank to report on all vendors."
  default ""
end

###############################################################################
# Authentication
###############################################################################

credentials "auth_flexera" do
  schemes "oauth2"
  label "Flexera"
  description "Select Flexera One OAuth2 credentials"
  tags "provider=flexera"
end

###############################################################################
# Datasources & Scripts
###############################################################################

# Get applied policy metadata for use later
datasource "ds_applied_policy" do
  request do
    auth $auth_flexera
    host rs_governance_host
    path join(["/api/governance/projects/", rs_project_id, "/applied_policies/", policy_id])
    header "Api-Version", "1.0"
  end
end

datasource "ds_cost_metric" do
  run_script $js_cost_metric, $param_cost_metric
end

script "js_cost_metric", type:"javascript" do
  parameters "param_cost_metric"
  result "result"
  code <<-EOS
  cost_metric_table = {
    "Unamortized Unblended": "cost_nonamortized_unblended_adj",
    "Amortized Unblended": "cost_amortized_unblended_adj",
    "Unamortized Blended": "cost_nonamortized_blended_adj",
    "Amortized Blended": "cost_amortized_blended_adj"
  }

  result = { id: cost_metric_table[param_cost_metric], name: param_cost_metric }
EOS
end

datasource "ds_cloud_vendor" do
  run_script $js_cloud_vendor, $param_cloud_vendor
end

script "js_cloud_vendor", type:"javascript" do
  parameters "param_cloud_vendor"
  result "result"
  code <<-EOS
  vendor_table = {
    "aws": "AWS",
    "amazon web services": "AWS",
    "azure": "Azure",
    "azuremca": "Azure",
    "azure mca": "Azure",
    "azuremca-enterprise": "Azure",
    "microsoft": "Azure",
    "microsoft azure": "Azure",
    "microsoft azure mca": "Azure",
    "gcp": "GCP",
    "google": "GCP",
    "google cloud": "GCP",
    "google cloud platform": "GCP"
  }

  result = param_cloud_vendor

  if (param_cloud_vendor.trim() != "" && vendor_table[param_cloud_vendor.toLowerCase()] != undefined) {
    result = vendor_table[param_cloud_vendor.toLowerCase()]
  }
EOS
end

datasource "ds_currency_reference" do
  request do
    host "raw.githubusercontent.com"
    path "/flexera-public/policy_templates/master/data/currency/currency_reference.json"
    header "User-Agent", "RS Policies"
  end
end

datasource "ds_currency_code" do
  request do
    auth $auth_flexera
    host rs_optima_host
    path join(["/bill-analysis/orgs/", rs_org_id, "/settings/currency_code"])
    header "Api-Version", "0.1"
    header "User-Agent", "RS Policies"
    ignore_status [403]
  end
  result do
    encoding "json"
    field "id", jmes_path(response, "id")
    field "value", jmes_path(response, "value")
  end
end

datasource "ds_currency" do
  run_script $js_currency, $ds_currency_reference, $ds_currency_code
end

script "js_currency", type:"javascript" do
  parameters "ds_currency_reference", "ds_currency_code"
  result "result"
  code <<-EOS
  code = "USD"
  symbol = "$"
  separator = ","

  if (ds_currency_code['value'] != undefined) {
    if (ds_currency_reference[ds_currency_code['value']] != undefined) {
      code = ds_currency_code['value']
      symbol = ds_currency_reference[ds_currency_code['value']]['symbol']
      separator = ""

      if (ds_currency_reference[ds_currency_code['value']]['t_separator'] != undefined) {
        separator = ds_currency_reference[ds_currency_code['value']]['t_separator']
      }
    }
  }

  result = { code: code, symbol: symbol, separator: separator }
EOS
end

datasource "ds_billing_centers" do
  request do
    auth $auth_flexera
    host rs_optima_host
    path join(["/analytics/orgs/", rs_org_id, "/billing_centers"])
    header "Api-Version", "1.0"
    header "User-Agent", "RS Policies"
  end
  result do
    encoding "json"
    collect jmes_path(response, "[*]") do
      field "href", jmes_path(col_item, "href")
      field "id", jmes_path(col_item, "id")
      field "name", jmes_path(col_item, "name")
      field "parent_id", jmes_path(col_item, "parent_id")
    end
  end
end

datasource "ds_top_level_bcs" do
  run_script $js_top_level_bcs, $ds_billing_centers
end

script "js_top_level_bcs", type: "javascript" do
  parameters "ds_billing_centers"
  result "result"
  code <<-EOS
  filtered_bcs = _.filter(ds_billing_centers, function(bc) {
    return bc['parent_id'] == null || bc['parent_id'] == undefined
  })

  result = _.compact(_.pluck(filtered_bcs, 'id'))
EOS
end

datasource "ds_aggregated_costs" do
  request do
    run_script $js_aggregated_costs, $ds_top_level_bcs, $ds_cloud_vendor, $ds_cost_metric, $param_start_date, $param_end_date, rs_org_id, rs_optima_host
  end
  result do
    encoding "json"
    collect jmes_path(response,"rows") do
      field "vendor", jmes_path(col_item, "dimensions.vendor")
      field "metrics", jmes_path(col_item, "metrics")
      field "timestamp", jmes_path(col_item, "timestamp")
    end
  end
end

script "js_aggregated_costs", type: "javascript" do
  parameters "ds_top_level_bcs", "ds_cloud_vendor", "ds_cost_metric", "param_start_date", "param_end_date", "rs_org_id", "rs_optima_host"
  result "request"
  code <<-EOS
  var request = {
    auth: "auth_flexera",
    host: rs_optima_host,
    verb: "POST",
    path: "/bill-analysis/orgs/" + rs_org_id + "/costs/aggregated",
    headers: { "User-Agent": "RS Policies", "Api-Version": "1.0" },
    body_fields: {
      billing_center_ids: ds_top_level_bcs,
      dimensions: [ "vendor" ],
      metrics: [ ds_cost_metric['id'] ],
      granularity: "month",
      start_at: param_start_date,
      end_at: param_end_date,
      filter: null
    }
  }

  if (ds_cloud_vendor != "") {
    request['body_fields']['filter'] = { dimension: "vendor", type: "substring", substring: ds_cloud_vendor }
  }
EOS
end

datasource "ds_forecasted_spend" do
  run_script $js_forecasted_spend, $ds_aggregated_costs, $ds_cost_metric, $ds_cloud_vendor, $ds_currency, $ds_applied_policy, $param_start_date, $param_end_date, $param_commitment_target
end

script "js_forecasted_spend", type: "javascript" do
  parameters "ds_aggregated_costs", "ds_cost_metric", "ds_cloud_vendor", "ds_currency", "ds_applied_policy", "param_start_date", "param_end_date", "param_commitment_target"
  result "result"
  code <<-EOS
  totals = []
  _.each(ds_aggregated_costs, function(entry) { totals.push(entry['metrics'][ds_cost_metric['id']]) })
  total_cost = _.reduce(totals, function(memo, num) { return memo + num }, 0)

  vendor = "Organization (All Vendors)"
  if (ds_cloud_vendor != "") { vendor = ds_cloud_vendor }

  now = new Date()
  start_date = new Date(param_start_date + "-01")
  end_date = new Date(param_end_date + "-01")

  period_length = (end_date - start_date) / (1000 * 3600 * 24)
  period_completed_to_date = ((now - start_date) / (1000 * 3600 * 24)) / period_length

  forecasted_spend = (total_cost * (1 / period_completed_to_date)) - total_cost
  forecasted_total = total_cost * (1 / period_completed_to_date)
  spend_difference = forecasted_total - param_commitment_target

  target_status = "Met"
  if (spend_difference < 0) { target_status = "Not Met" }

  result = {
    commitment_period: period_length,
    period_completed: Math.round(period_completed_to_date * 100) / 100,
    actual_spend: Math.round(total_cost * 1000) / 1000,
    forecasted_spend: Math.round(forecasted_spend * 1000) / 1000,
    forecasted_total: Math.round(forecasted_total * 1000) / 1000,
    spend_difference: Math.round(spend_difference * 1000) / 1000,
    target_status: target_status,
    commitment_target: param_commitment_target,
    vendor: vendor,
    currency: ds_currency['symbol'],
    currency_code: ds_currency['code'],
    currency_sep: ds_currency['separator'],
    policy_name: ds_applied_policy['name'],
    cost_metric: ds_cost_metric['name'],
    cost_metric_id: ds_cost_metric['id'],
    start_date: param_start_date,
    end_date: param_end_date
  }
EOS
end

datasource "ds_chart_data" do
  run_script $js_chart_data, $ds_forecasted_spend
end

script "js_chart_data", type: "javascript" do
  parameters "ds_forecasted_spend"
  result "result"
  code <<-'EOS'
  // Used for formatting numbers to look pretty
  function formatNumber(number, separator) {
    numString = number.toString()
    values = numString.split(".")
    formatted_number = ''

    while (values[0].length > 3) {
      var chunk = values[0].substr(-3)
      values[0] = values[0].substr(0, values[0].length - 3)
      formatted_number = separator + chunk + formatted_number
    }

    if (values[0].length > 0) { formatted_number = values[0] + formatted_number }
    if (values[1] == undefined) { return formatted_number }

    return formatted_number + "." + values[1]
  }

  fmt_actual_spend = ds_forecasted_spend['currency'] + formatNumber(ds_forecasted_spend['actual_spend'], ds_forecasted_spend['currency_sep'])
  fmt_forecasted_spend = ds_forecasted_spend['currency'] + formatNumber(ds_forecasted_spend['forecasted_spend'], ds_forecasted_spend['currency_sep'])
  fmt_commitment_target = ds_forecasted_spend['currency'] + formatNumber(ds_forecasted_spend['commitment_target'], ds_forecasted_spend['currency_sep'])

  if (ds_forecasted_spend['target_status'] == "Met") {
    over_commitment_amount_value = ds_forecasted_spend['spend_difference']
    over_commitment_data = "0," + over_commitment_amount_value.toString()
    over_commitment_label = "Forecasted+Amount+Over+Commitment+Target"
    over_commitment_color = "4CBA54"
    fmt_commitment_value = ds_forecasted_spend['currency'] + formatNumber(over_commitment_amount_value, ds_forecasted_spend['currency_sep'])
    data_values = fmt_actual_spend + '||' + fmt_forecasted_spend + '|||' + fmt_commitment_target + '||' + fmt_commitment_value
  } else {
    over_commitment_amount_value = ds_forecasted_spend['spend_difference'] * -1
    over_commitment_data = over_commitment_amount_value.toString() + ",0"
    over_commitment_label = "Forecasted+Amount+Under+Commitment+Target"
    over_commitment_color = "F04B46"
    fmt_commitment_value = ds_forecasted_spend['currency'] + formatNumber(over_commitment_amount_value, ds_forecasted_spend['currency_sep'])
    data_values = fmt_actual_spend +'||' + fmt_forecasted_spend + '|||' + fmt_commitment_target + '|' + fmt_commitment_value + '|'
  }

  chart_type = encodeURI("cht=bhs")
  chart_size = encodeURI("chs=800x200")
  chart_data = encodeURI("chd=t:" + ds_forecasted_spend['actual_spend'] + ",0|" + ds_forecasted_spend['forecasted_spend'] +",0|0," + ds_forecasted_spend['commitment_target'] + "|" + over_commitment_data)
  chart_title = encodeURI("chtt=Actual+and+Forecasted+Spend+vs.+Vendor+Commitment+Spend+Target+Report")
  chart_image = encodeURI("chof=.png")
  chart_color = encodeURI("chco=4FA8E9,9EC9E9,63CED6," + over_commitment_color)
  chart_label = encodeURI("chdl=Actual+Spend+To+Date|Forecasted+Spend|Commitment+Target+Amount|" + over_commitment_label)
  chart_label_position = encodeURI("chdlp=b")
  chart_y_axis = encodeURI("chxt=y")
  chart_y_axis_label = encodeURI("chxl=0:|+1:|+")
  chart_data_autoscale = encodeURI("chds=a")
  chart_data_value = encodeURI('chl=' + data_values)

  chart_options = [
    chart_type, chart_size, chart_data, chart_title, chart_image, chart_color, chart_label,
    chart_label_position, chart_y_axis, chart_y_axis_label, chart_data_autoscale, chart_data_value
  ].join('&').replace(/\(/g, "%28").replace(/\)/g, "%29")

  result = {
    chart_options: chart_options,
    report_data: [ ds_forecasted_spend ],
    target_status: ds_forecasted_spend['target_status'],
    cloud_vendor: ds_forecasted_spend['vendor'],
    policy_name: ds_forecasted_spend['policy_name'],
    cost_metric: ds_forecasted_spend['cost_metric'],
    start_date: ds_forecasted_spend['start_date'],
    end_date: ds_forecasted_spend['end_date']
  }
EOS
end

###############################################################################
# Policy
###############################################################################

policy "pol_commitment_forecast" do
  validate $ds_chart_data do
    summary_template "{{ data.policy_name }}"
    detail_template <<-EOS
# Spend Commitment Forecast Report for {{ rs_org_name }} - {{ data.cloud_vendor }}
## Commitment Target {{ data.target_status }}
### Cost Metric: {{ data.cost_metric }}
### Commitment Period: {{ parameters.param_start_date }} to {{ parameters.param_end_date }}
![Spending Overview Chart](https://api.image-charts-auth.flexeraeng.com/ic-function?rs_org_id={{ rs_org_id }}&rs_project_id={{ rs_project_id }}&{{ data.chart_options }})
EOS
    escalate $esc_email
    check eq(0, 1)
    export "report_data" do
      field "vendor" do
        label "Cloud Vendor"
      end
      field "commitment_target" do
        label "Commitment Target Amount"
      end
      field "actual_spend" do
        label "Total Spend to Date"
      end
      field "forecasted_spend" do
        label "Additional Forecasted Spend"
      end
      field "forecasted_total" do
        label "Forecasted Full Period Spend"
      end
      field "currency" do
        label "Currency"
      end
      field "target_status" do
        label "Commitment Target Status"
      end
      field "cost_metric" do
        label "Cost Metric"
      end
      field "start_date" do
        label "Period Start Date"
      end
      field "end_date" do
        label "Period End Date"
      end
    end
  end
end

###############################################################################
# Escalations
###############################################################################

escalation "esc_email" do
  automatic true
  label "Send Email"
  description "Send incident email"
  email $param_email
end

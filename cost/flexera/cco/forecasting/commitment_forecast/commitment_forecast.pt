name "Vendor Commitment Forecast"
rs_pt_ver 20180301
type "policy"
short_description "This policy allows the user to specify a Commitment target value (based on the commitment amount agreed with your Cloud Service Provider/s), and track the current commitment spend to date, as well as projected commitment spend over a period. See the [README](https://github.com/flexera-public/policy_templates/tree/master/cost/flexera/cco/forecasting/commitment_forecast/) and [docs.flexera.com/flexera/EN/Automation](https://docs.flexera.com/flexera/EN/Automation/AutomationGS.htm) to learn more."
long_description ""
category "Cost"
severity "medium"
default_frequency "monthly"
info(
  version: "4.0.0",
  provider: "Flexera",
  service: "Cloud Cost Optimization",
  policy_set: "Forecasting"
)

###############################################################################
# Parameters
###############################################################################

parameter "param_email" do
  type "list"
  category "Policy Settings"
  label "Email Addresses"
  description "A list of email addresses to notify."
  default []
end

parameter "param_start_date" do
  type "string"
  category "Policy Settings"
  label "Commitment Period Start Date"
  description "Start Date for Commitment Period in YYYY-MM format. For example: 2024-01"
  allowed_pattern /20[2-9][0-9]-[0-1][0-9]/
  # No default value, user input required
end

parameter "param_end_date" do
  type "string"
  category "Policy Settings"
  label "Commitment Period End Date"
  description "End Date for Commitment Period in YYYY-MM format. For example: 2024-06"
  allowed_pattern /20[2-9][0-9]-[0-1][0-9]/
  # No default value, user input required
end

parameter "param_commitment_target" do
  type "number"
  category "Policy Settings"
  label "Total Commitment Target"
  description "The total commitment target for the specified time period. Value should be in the currency the Flexera One organization is configured to use."
  default 100000
end

parameter "param_cost_metric" do
  type "string"
  category "Policy Settings"
  label "Cost Metric"
  description "Ccost metric to use for the report."
  allowed_values "Unamortized Unblended","Amortized Unblended","Unamortized Blended","Amortized Blended"
  default "Unamortized Unblended"
end

parameter "param_cloud_vendor" do
  type "string"
  category "Filters"
  label "Cloud Vendor"
  description "Cloud Vendor to report on. Example: 'AWS' or 'GCP'. Leave blank to report on all vendors."
  default ""
end

parameter "param_bc_allow_or_deny" do
  type "string"
  category "Filters"
  label "Allow/Deny Billing Centers"
  description "Allow or Deny entered Billing Centers."
  allowed_values "Allow", "Deny"
  default "Allow"
end

parameter "param_bc_list" do
  type "list"
  category "Filters"
  label "Allow/Deny Billing Center List"
  description "A list of allowed or denied Billing Center names/IDs. Leave blank to report on all Billing Centers."
  default []
end

###############################################################################
# Authentication
###############################################################################

credentials "auth_flexera" do
  schemes "oauth2"
  label "Flexera"
  description "Select Flexera One OAuth2 credentials"
  tags "provider=flexera"
end

###############################################################################
# Datasources & Scripts
###############################################################################

# Get applied policy metadata for use later
datasource "ds_applied_policy" do
  request do
    auth $auth_flexera
    host rs_governance_host
    path join(["/api/governance/projects/", rs_project_id, "/applied_policies/", policy_id])
    header "Api-Version", "1.0"
  end
end

datasource "ds_cost_metric" do
  run_script $js_cost_metric, $param_cost_metric
end

script "js_cost_metric", type:"javascript" do
  parameters "param_cost_metric"
  result "result"
  code <<-EOS
  cost_metric_table = {
    "Unamortized Unblended": "cost_nonamortized_unblended_adj",
    "Amortized Unblended": "cost_amortized_unblended_adj",
    "Unamortized Blended": "cost_nonamortized_blended_adj",
    "Amortized Blended": "cost_amortized_blended_adj"
  }

  result = { id: cost_metric_table[param_cost_metric], name: param_cost_metric }
EOS
end

datasource "ds_cloud_vendor" do
  run_script $js_cloud_vendor, $param_cloud_vendor
end

script "js_cloud_vendor", type:"javascript" do
  parameters "param_cloud_vendor"
  result "result"
  code <<-EOS
  vendor_table = {
    "aws": "AWS",
    "amazon web services": "AWS",
    "azure": "Azure",
    "azuremca": "Azure",
    "azure mca": "Azure",
    "azuremca-enterprise": "Azure",
    "microsoft": "Azure",
    "microsoft azure": "Azure",
    "microsoft azure mca": "Azure",
    "gcp": "GCP",
    "google": "GCP",
    "google cloud": "GCP",
    "google cloud platform": "GCP"
  }

  result = param_cloud_vendor

  if (param_cloud_vendor.trim() != "" && vendor_table[param_cloud_vendor.toLowerCase()] != undefined) {
    result = vendor_table[param_cloud_vendor.toLowerCase()]
  }
EOS
end

datasource "ds_currency_reference" do
  request do
    host "raw.githubusercontent.com"
    path "/flexera-public/policy_templates/master/data/currency/currency_reference.json"
    header "User-Agent", "RS Policies"
  end
end

datasource "ds_currency_code" do
  request do
    auth $auth_flexera
    host rs_optima_host
    path join(["/bill-analysis/orgs/", rs_org_id, "/settings/currency_code"])
    header "Api-Version", "0.1"
    header "User-Agent", "RS Policies"
    ignore_status [403]
  end
  result do
    encoding "json"
    field "id", jmes_path(response, "id")
    field "value", jmes_path(response, "value")
  end
end

datasource "ds_currency" do
  run_script $js_currency, $ds_currency_reference, $ds_currency_code
end

script "js_currency", type:"javascript" do
  parameters "ds_currency_reference", "ds_currency_code"
  result "result"
  code <<-EOS
  code = "USD"
  symbol = "$"
  separator = ","

  if (ds_currency_code['value'] != undefined) {
    if (ds_currency_reference[ds_currency_code['value']] != undefined) {
      code = ds_currency_code['value']
      symbol = ds_currency_reference[ds_currency_code['value']]['symbol']
      separator = ""

      if (ds_currency_reference[ds_currency_code['value']]['t_separator'] != undefined) {
        separator = ds_currency_reference[ds_currency_code['value']]['t_separator']
      }
    }
  }

  result = { code: code, symbol: symbol, separator: separator }
EOS
end

datasource "ds_billing_centers" do
  request do
    auth $auth_flexera
    host rs_optima_host
    path join(["/analytics/orgs/", rs_org_id, "/billing_centers"])
    header "Api-Version", "1.0"
    header "User-Agent", "RS Policies"
  end
  result do
    encoding "json"
    collect jmes_path(response, "[*]") do
      field "href", jmes_path(col_item, "href")
      field "id", jmes_path(col_item, "id")
      field "name", jmes_path(col_item, "name")
      field "parent_id", jmes_path(col_item, "parent_id")
    end
  end
end

datasource "ds_billing_centers_filtered" do
  run_script $js_billing_centers_filtered, $ds_billing_centers, $param_bc_allow_or_deny, $param_bc_list
end

script "js_billing_centers_filtered", type: "javascript" do
  parameters "ds_billing_centers", "param_bc_allow_or_deny", "param_bc_list"
  result "result"
  code <<-EOS
  allow_deny_test = { "Allow": true, "Deny": false }

  if (param_bc_list.length > 0) {
    billing_centers = _.filter(ds_billing_centers, function(item) {
      id_found = _.contains(param_bc_list, item['id']) == allow_deny_test[param_bc_allow_or_deny]
      name_found = _.contains(param_bc_list, item['name']) == allow_deny_test[param_bc_allow_or_deny]
      return id_found || name_found
    })

    // Check for conflicting parents/children and remove children if present
    bc_ids = _.compact(_.pluck(billing_centers, 'id'))
    bad_children = _.filter(ds_billing_centers, function(bc) { return _.contains(bc_ids, bc['parent_id']) })
    bad_children_ids = _.pluck(bad_children, 'id')

    // Create final result with the bad children removed
    result = _.reject(billing_centers, function(bc) { return _.contains(bad_children_ids, bc['id']) })
  } else {
    // If we're not filtering at all, just grab all of the top level billing centers
    result = _.filter(ds_billing_centers, function(bc) {
      return bc['parent_id'] == null || bc['parent_id'] == undefined
    })
  }
EOS
end

datasource "ds_aggregated_costs" do
  request do
    run_script $js_aggregated_costs, $ds_billing_centers_filtered, $ds_cloud_vendor, $ds_cost_metric, $param_start_date, $param_end_date, rs_org_id, rs_optima_host
  end
  result do
    encoding "json"
    collect jmes_path(response,"rows") do
      field "billing_center_id", jmes_path(col_item, "dimensions.billing_center_id")
      field "vendor", jmes_path(col_item, "dimensions.vendor")
      field "metrics", jmes_path(col_item, "metrics")
      field "timestamp", jmes_path(col_item, "timestamp")
    end
  end
end

script "js_aggregated_costs", type: "javascript" do
  parameters "ds_billing_centers_filtered", "ds_cloud_vendor", "ds_cost_metric", "param_start_date", "param_end_date", "rs_org_id", "rs_optima_host"
  result "request"
  code <<-EOS
  var request = {
    auth: "auth_flexera",
    host: rs_optima_host,
    verb: "POST",
    path: "/bill-analysis/orgs/" + rs_org_id + "/costs/aggregated",
    headers: { "User-Agent": "RS Policies", "Api-Version": "1.0" },
    body_fields: {
      billing_center_ids: _.pluck(ds_billing_centers_filtered, 'id'),
      dimensions: [ "billing_center_id", "vendor" ],
      metrics: [ ds_cost_metric['id'] ],
      granularity: "month",
      start_at: param_start_date,
      end_at: param_end_date,
      filter: null
    }
  }

  if (ds_cloud_vendor != "") {
    request['body_fields']['filter'] = { dimension: "vendor", type: "substring", substring: ds_cloud_vendor }
  }
EOS
end

datasource "ds_total_cost" do
  run_script $js_total_cost, $ds_aggregated_costs, $ds_cost_metric, $ds_cloud_vendor, rs_org_name
end

script "js_total_cost", type: "javascript" do
  parameters "ds_aggregated_costs", "ds_cost_metric", "ds_cloud_vendor", "rs_org_name"
  result "result"
  code <<-EOS
  var totals = []

  _.each(ds_aggregated_costs, function(entry) {
    totals.push(entry['metrics'][ds_cost_metric['id']])
  })

  total_cost = _.reduce(totals, function(memo, num) { return memo + num }, 0)

  result = [{
    name: rs_org_name,
    total: total_cost,
    id: null,
    vendor: "Organization (All Vendors)"
  }]

  if (ds_cloud_vendor != "") { result[0]['vendor'] = ds_cloud_vendor }
EOS
end

#CALCULATE FORECASTED SPEND (SUM OF TOTAL BC COSTS + EXPECTED COST OVER REMAINING PERIOD)
datasource "ds_actual_forecasted_spend" do
  run_script $js_get_forecasted_spend, $ds_total_cost, $param_start_date, $param_end_date, $param_commitment_target
end

script "js_get_forecasted_spend", type: "javascript" do
  parameters "total_cost", "start_date", "end_date", "commitment_target"
  result "result"
  code <<-EOS
  var period_length = (new Date( end_date+"-01" ) - new Date( start_date+"-01" )) / (1000 * 3600 * 24)
  var period_completed_to_date = ((new Date() - new Date( start_date+"-01" )) / (1000 * 3600 * 24)) / (period_length )

  var result = []
  _.each(total_cost, function(tc){
    result.push({
      "commitment_period": period_length,
      "period_completed": period_completed_to_date,
      "actual_spend": tc.total,
      "forecasted_spend": (tc.total * (1/period_completed_to_date)) - tc.total,
      "forecasted_total": tc.total * (1/period_completed_to_date)
      "commitment_target": commitment_target
      "name": tc.name,
      "vendor": tc.vendor
    })
  })
  EOS
end

#CREATE AND FORMAT CHART DATA
datasource "ds_chart_data" do
  run_script $js_get_chart_data, $ds_actual_forecasted_spend, $ds_currency_reference, $ds_currency_code, $param_commitment_target
end

script "js_get_chart_data", type: "javascript" do
  parameters "spend_data", "curr_ref", "curr_code", "commitment_target"
  result "report"
  code <<-EOS
  var spend_diff = spend_data[0].forecasted_total - commitment_target
  var curr = "$", separator = ",", target_name = "", over_commitment_data = "", over_commitment_label = "", over_commitment_amount_value = "", chart_data_values = ""

  if (curr_code.value !== undefined){
    curr = curr_ref[curr_code.value].symbol,
    separator = curr_ref[curr_code.value].t_separator
  }

  function formatNumber(number, separator){
    var values = number.toString().split(".");
    var result = ''

    while (values[0].length > 3){
      var chunk = values[0].substr(-3)
      values[0] = values[0].substr(0, values[0].length - 3)
      result = separator + chunk + result
    }
    if (values[0].length > 0){
      result = values[0] + result
    }
    if(values[1]==undefined){
      return result
    }
    return result + "." + values[1]
  }

  if(spend_diff < 0 ){
    target_name = "Not Met"
  } else {
    target_name = "Met"
  }

  if(target_name == "Met"){
    over_commitment_data = 0+","+(spend_diff.toFixed(2))
    over_commitment_label = "Forecasted+Amount+Over+Commitment+Target"
    over_commitment_amount_value = spend_diff.toFixed(2)
    over_commitment_color = "4CBA54"
    chart_data_values = (curr+formatNumber(spend_data[0].actual_spend.toFixed(2),separator)) +'||' + (curr+formatNumber(spend_data[0].forecasted_spend.toFixed(2),separator)) +'|||'+ (curr+formatNumber(commitment_target,separator)) +'||'+ (curr+formatNumber(over_commitment_amount_value,separator))
  } else {
    over_commitment_data = (spend_diff.toFixed(2)*-1)+","+0
    over_commitment_label = "Forecasted+Amount+Under+Commitment+Target"
    over_commitment_amount_value = spend_diff.toFixed(2)*(-1)
    over_commitment_color = "F04B46"
    chart_data_values = (curr+formatNumber(spend_data[0].actual_spend.toFixed(2),separator)) +'||' + (curr+formatNumber(spend_data[0].forecasted_spend.toFixed(2),separator)) +'|||'+ (curr+formatNumber(commitment_target,separator)) +'|'+ (curr+formatNumber(over_commitment_amount_value,separator) + '|')
  }

  report = {
    chart_type: encodeURI("cht=bhs"),
    chart_size: encodeURI("chs=800x200"),
    chart_data: encodeURI("chd=t:" + (spend_data[0].actual_spend.toFixed(2)) + "," + 0 + "|" + (spend_data[0].forecasted_spend.toFixed(2)) +"," + 0 + "|" + 0 + "," + commitment_target + "|" + over_commitment_data),
    chart_title: encodeURI("chtt=Actual+and+Forecasted+Spend+vs.+Vendor+Commitment+Spend+Target+Report"),
    chart_image: encodeURI("chof=.png"),
    chart_color: encodeURI("chco=4FA8E9,9EC9E9,63CED6," + over_commitment_color),
    chart_label: encodeURI("chdl=Actual+Spend+To+Date|Forecasted+Spend|Commitment+Target+Amount|" + over_commitment_label),
    chart_label_position: encodeURI("chdlp=b"),
    chart_y_axis: encodeURI("chxt=y"),
    chart_y_axis_label: encodeURI("chxl=0:|+1:|+"),
    chart_data_autoscale: encodeURI("chds=a"),
    chart_data_value: encodeURI('chl=' + chart_data_values),
    report_data: spend_data,
    target_adj: target_name,
    bc_org_name: spend_data[0].name,
    cloud_vendor: spend_data[0].vendor
  }
  EOS
end

###############################################################################
# Escalations
###############################################################################

escalation "esc_budget_alert" do
  automatic true
  label "Send Email"
  description "Send incident email"
  email $param_email
end

###############################################################################
# Policy
###############################################################################

policy "policy_commitment_tracker" do
  validate $ds_chart_data do
    summary_template "Vendor Commitment Forecast for {{ parameters.param_cloud_vendor }}"
    detail_template <<-EOS
# Commitment Target {{ data.target_adj }}
### Cloud Vendor: {{ data.cloud_vendor }}
### Cost Metric: Unamortized Unblended
### Commitment Period: {{ parameters.param_start_date }} to {{ parameters.param_end_date }}
![Spending Overview Chart](https://api.image-charts-auth.flexeraeng.com/ic-function?rs_org_id={{ rs_org_id }}&rs_project_id={{ rs_project_id }}&{{ data.chart_type }}&{{ data.chart_data }}&{{ data.chart_size }}&{{ data.chart_image }}&{{ data.chart_color }}&{{ data.chart_label }}&{{ data.chart_y_axis_label }}&{{ data.chart_y_axis }}&{{ data.chart_label_position }}&{{data.chart_data_autoscale}}&{{data.chart_data_value}}&{{ data.chart_title }})
___
###### Policy Applied in Account: {{ rs_project_name }} (Account ID: {{ rs_project_id }}) within Org: {{ rs_org_name }} (Org ID: {{ rs_org_id }})
EOS
    escalate $esc_budget_alert
    check eq(0,1)
    export "report_data" do
      field "name" do
        label "Billing Center Name"
      end
      field "vendor" do
        label "Cloud Vendor"
      end
      field "commitment_target" do
        label "Commitment Target Amount"
      end
      field "actual_spend" do
        label "Total Spend to Date"
      end
      field "forecasted_spend" do
        label "Additional Forecasted Spend"
      end
      field "forecasted_total" do
        label "Forecasted Full Period Spend"
      end
    end
  end
end

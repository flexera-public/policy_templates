name "Budget Alerts"
rs_pt_ver 20180301
type "policy"
short_description "Reports if budget threshold has been exceeded for a selected budget. See the [README](https://github.com/flexera-public/policy_templates/tree/master/cost/flexera/cco/budget_alerts/) and [docs.flexera.com/flexera/EN/Automation](https://docs.flexera.com/flexera/EN/Automation/AutomationGS.htm) to learn more."
long_description ""
severity "medium"
category "Cost"
default_frequency "daily"
info(
  version: "4.0.0",
  provider: "Flexera",
  service: "Cloud Cost Optimization",
  policy_set: "Cloud Cost Optimization"
)

###############################################################################
# Parameters
###############################################################################

parameter "param_email" do
  type "list"
  category "Policy Settings"
  label "Email Addresses"
  description "A list of email addresses to notify."
  default []
end

parameter "param_budget" do
  type "string"
  category "Policy Settings"
  label "Budget Name/ID"
  description "Enter the name or ID of the budget to alert on."
  min_length 1
end

parameter "param_threshold_percentage" do
  type "number"
  category "Policy Settings"
  label "Threshold Percentage"
  description "Percentage of budget amount to alert on."
  min_value 1
  default 90
end

parameter "param_type" do
  type "string"
  category "Policy Settings"
  label "Alert Type"
  description "Whether to alert based on incurred costs (Actual Spend) or based on monthly run rates (Forecasted Spend)"
  allowed_values "Actual Spend", "Forecasted Spend"
  default "Actual Spend"
end

parameter "param_use_groups" do
  type "string"
  category "Policy Settings"
  label "Summarization"
  description "Whether to summarize the data or group it by dimension"
  allowed_values "Summarized", "By Dimensions"
  default "Summarized"
end

parameter "param_filter" do
  type "list"
  category "Policy Settings"
  label "Filter Group By Dimension(s)"
  description "Enable budget tracking for specific dimensions and values. Only supports dimensions provided in the group previously defined in the budget"
end

parameter "param_unbudgeted" do
  type "string"
  category "Policy Settings"
  label "Unbudgeted spend"
  description "Wheter or not to include or exclude unbudgeted spend"
  allowed_values "Exclude Unbudgeted Spend", "Include Unbudgeted Spend"
  default "Exclude Unbudgeted Spend"
end

###############################################################################
# Authentication
###############################################################################

credentials "auth_flexera" do
  schemes "oauth2"
  label "Flexera"
  description "Select Flexera One OAuth2 credentials"
  tags "provider=flexera"
end

###############################################################################
# Datasources & Scripts
###############################################################################

# Get applied policy metadata for use later
datasource "ds_applied_policy" do
  request do
    auth $auth_flexera
    host rs_governance_host
    path join(["/api/governance/projects/", rs_project_id, "/applied_policies/", policy_id])
    header "Api-Version", "1.0"
  end
end

datasource "ds_currency_reference" do
  request do
    host "raw.githubusercontent.com"
    path "/flexera-public/policy_templates/master/data/currency/currency_reference.json"
    header "User-Agent", "RS Policies"
  end
end

datasource "ds_currency_code" do
  request do
    auth $auth_flexera
    host rs_optima_host
    path join(["/bill-analysis/orgs/", rs_org_id, "/settings/currency_code"])
    header "Api-Version", "0.1"
    header "User-Agent", "RS Policies"
    ignore_status [403]
  end
  result do
    encoding "json"
    field "id", jmes_path(response, "id")
    field "value", jmes_path(response, "value")
  end
end

datasource "ds_currency" do
  run_script $js_currency, $ds_currency_reference, $ds_currency_code
end

script "js_currency", type:"javascript" do
  parameters "ds_currency_reference", "ds_currency_code"
  result "result"
  code <<-'EOS'
  code = "USD"
  symbol = "$"
  separator = ","

  if (ds_currency_code['value'] != undefined) {
    if (ds_currency_reference[ds_currency_code['value']] != undefined) {
      code = ds_currency_reference[ds_currency_code['value']]['code']
      symbol = ds_currency_reference[ds_currency_code['value']]['symbol']

      if (ds_currency_reference[ds_currency_code['value']]['t_separator'] != undefined) {
        separator = ds_currency_reference[ds_currency_code['value']]['t_separator']
      } else {
        separator = ""
      }
    }
  }

  result = {
    code: code,
    symbol: symbol,
    separator: separator
  }
EOS
end

datasource "ds_get_dimensions" do
  request do
    auth $auth_flexera
    host rs_optima_host
    path join(["/bill-analysis/orgs/", rs_org_id, "/costs/dimensions"])
    header "Api-Version", "0.1"
    header "User-Agent", "RS Policies"
  end
  result do
    encoding "json"
    collect jmes_path(response, "dimensions[].{id: id, name: name, type:type}") do
      field "id", jmes_path(col_item, "id")
      field "name", jmes_path(col_item, "name")
      field "type", jmes_path(col_item, "type")
    end
  end
end

datasource "ds_dimensions" do
  run_script $js_dimensions, $ds_get_dimensions
end

script "js_dimensions", type: "javascript" do
  parameters "ds_get_dimensions"
  result "result"
  code <<-EOS
  result = {}
  _.each(ds_get_dimensions, function(dimension) { result[dimension['id']] = dimension['name'] })
EOS
end

datasource "ds_budgets" do
  request do
    auth $auth_flexera
    host rs_optima_host
    path join(["/bill-analysis/orgs/", rs_org_id, "/budgets"])
    header "Api-Version", "1.0"
    header "User-Agent", "RS Policies"
  end
  result do
    encoding "json"
    collect jmes_path(response, "[*]") do
      field "id", jmes_path(col_item, "id")
      field "name", jmes_path(col_item, "name")
      field "metric", jmes_path(col_item, "metric")
      field "dimensions", jmes_path(col_item, "dimensions")
      field "yearMonths", jmes_path(col_item, "yearMonths")
    end
  end
end

datasource "ds_budgets_filtered" do
  run_script $js_budgets_filtered, $ds_budgets, $param_budget
end

script "js_budgets_filtered", type: "javascript" do
  parameters "ds_budgets", "param_budget"
  result "result"
  code <<-EOS
  current_month = new Date().toISOString().substring(0, 7)

  result = _.filter(ds_budgets, function(budget) {
    budget_current_month = _.find(budget['yearMonths'], function(item) {
      return new Date(item).toISOString().substring(0, 7) == current_month
    })

    return budget_current_month != undefined && (budget["name"] == param_budget || budget["id"] == param_budget)
  })
EOS
end

datasource "ds_reports" do
  iterate $ds_budgets_filtered
  request do
    run_script $js_reports, iter_item, $param_use_groups, $param_unbudgeted, rs_optima_host, rs_org_id
  end
  result do
    encoding "json"
    collect jmes_path(response,"[*]") do
      field "b_id", val(iter_item, "id")
      field "name", val(iter_item, "name")
      field "dimension_ids", val(iter_item, "dimensions")
      field "metric", val(iter_item, "metric")
      field "timestamp", jmes_path(col_item,"timestamp")
      field "dimensions", jmes_path(col_item, "dimensions")
      field "budgetAmount", jmes_path(col_item,"metrics.budgetAmount")
      field "spendAmount", jmes_path(col_item,"metrics.spendAmount")
    end
  end
end

script "js_reports", type: "javascript" do
  parameters "budget", "param_use_groups", "param_unbudgeted", "rs_optima_host", "rs_org_id"
  result "request"
  code <<-EOS
  start_date = new Date().toISOString().substring(0, 7)
  end_year = Number(start_date.split('-')[0])
  end_month = Number(start_date.split('-')[1]) + 1
  if (end_month == 13) { end_year += 1; end_month = 1 }
  if (end_month < 10) { end_month = '0' + end_month.toString() }
  end_date = end_year.toString() + '-' + end_month.toString()

  dimensions = param_use_groups == "Summarized" ? [] : budget['dimensions']

  var request = {
    auth: "auth_flexera",
    host: rs_optima_host,
    verb: "POST",
    path: "/bill-analysis/orgs/" + rs_org_id + "/budgets/" + budget['id'] + "/report",
    headers: { "User-Agent": "RS Policies", "Api-Version": "1.0" },
    body_fields: {
      "dimensions": dimensions,
      "endAt": end_date,
      "startAt": start_date,
      "includeUnbudgeted": param_unbudgeted == "Include Unbudgeted Spend",
    }
  }
EOS
end

datasource "ds_aggregated" do
  run_script $js_aggregated, $ds_reports, $ds_currency, $ds_dimensions, $ds_applied_policy, $param_threshold_percentage, $param_type, $param_budget, $param_filter, f1_app_host
end

script "js_aggregated", type: "javascript" do
  parameters "ds_reports", "ds_currency", "ds_dimensions", "ds_applied_policy", "param_threshold_percentage", "param_type", "param_budget", "param_filter", "f1_app_host"
  result "result"
  code <<-EOS
  // Function to return forecast for current month based on spend so far
  function forecasted(amount) {
    now = new Date()
    day = now.getUTCDate() - 1

    // Return 0 value if we're at 1st of the month to avoid dividing by 0
    if (day < 1) { return 0 }

    // Otherwise, divide the amount by number of days in the month so far
    // and then multiply it by the number of total days in the month
    days = new Date(now.getFullYear(), now.getMonth() + 1, 0).getDate()
    return amount / day * days
  }

  function get_group(dimensions, dimension_ids) {
    vals = []

    _.each(dimension_ids, function(id) {
      if (dimensions[id] && (id != "is_budgeted" || dimension_ids.length == 1)) {
        vals.push(dimensions[id])
      }
    })

    if (!vals.length && dimensions["is_budgeted"]) { return dimensions["is_budgeted"] }
    return vals.join("|")
  }

  function dimension_names(dimension_ids) {
    return _.map(dimension_ids, function(id) {
      if (ds_dimensions[id]) { return ds_dimensions[id] }
      return id
    }).join(", ")
  }

  result = {
    invalid: [],
    exceeded: [],
    forecasted: []
  }

  // Store invalid budgets in the appropriate incident
  if (!ds_reports || !ds_reports.length) { result['invalid'].push(param_budget) }

  filters = {}

  _.each(param_filter, function(filter_item) {
    key = filter_item.split("=")[0]
    value = filter_item.split("=")[1]

    dimension_id = _.invert(ds_dimensions)[key.trim()]
    if (dimension_id == undefined) { dimension_id = key.trim() }

    if (value != undefined) {
      filters[dimension_id] = _.map(value.split(','), function(val) { return val.trim() })
    }
  })

  now = new Date()

  cost_metric = {
    "cost_nonamortized_unblended_adj": "Unamortized",
    "cost_amortized_unblended_adj": "Amortized",
    "cost_nonamortized_blended_adj": "Unamortized",
    "cost_amortized_blended_adj": "Amortized"
  }

  filtered_reports = _.filter(ds_reports, function(item) {
    filtered = false

    if (item["dimensions"]) {
      filtered = _.some(_.keys(item["dimensions"]), function(dimension_id) {
        return filters[dimension_id] && !_.contains(filters[dimension_id], item["dimensions"][dimension_id])
      })
    }

    return item["spendAmount"] && !filtered
  })

  _.each(filtered_reports, function(item) {
    date = new Date(item["timestamp"])

    new_item = {
      b_id: item["b_id"],
      name: item["name"],
      dimensions: item["dimensions"],
      dimension_ids: item["dimension_ids"],
      dimm: dimension_names(item["dimension_ids"]),
      metric: item["metric"],
      timestamp: item["timestamp"],
      date: date.toISOString(),
      budgetAmount: item["budgetAmount"] || 0,
      spendAmount: item["spendAmount"],
      forecastedAmount: item["spendAmount"],
      monthYear: now.toISOString().substring(0, 7),
      currency: ds_currency["code"],
      policy_name: ds_applied_policy["name"],
      is_budgeted: true,
      host: f1_app_host,
      forecasted: "",
      group: ""
    }

    if (date.toISOString().substring(0, 7) == now.toISOString().substring(0, 7)) {
      new_item["forecastedAmount"] = Math.round(forecasted(new_item["spendAmount"]) * 100) / 100
      new_item["forecasted"] = new_item["forecastedAmount"]
    }

    new_item["budgetAmount"] = Math.round(new_item["budgetAmount"] * 100) / 100
    new_item["spendAmount"] = Math.round(new_item["spendAmount"] * 100) / 100
    new_item["overBudgetAmount"] = Math.max(0, Math.round((new_item["spendAmount"] - new_item["budgetAmount"]) * 100) / 100)
    new_item["remaining"] = Math.round((new_item["budgetAmount"] - new_item["spendAmount"]) * 100) / 100
    new_item["overBudgetAmountForec"] = Math.max(0, Math.round((new_item["forecastedAmount"] - new_item["budgetAmount"]) * 100) / 100)

    if (new_item["budgetAmount"]) {
      new_item["spentPercent"] = Math.round(new_item["spendAmount"] / new_item["budgetAmount"] * 10000) / 100
      new_item["spentPercentForec"] = Math.round(new_item["forecastedAmount"] / new_item["budgetAmount"] * 10000) / 100
    }

    // values for export
    new_item["budget"] = new_item["budgetAmount"]
    new_item["spend"] = new_item["spendAmount"]
    new_item["overBudget"] = new_item["overBudgetAmount"]
    new_item["overBudgetForec"] = new_item["overBudgetAmountForec"]


    if (new_item["dimensions"]) {
      new_item["group"] = get_group(new_item["dimensions"], new_item["dimension_ids"])
      new_item["is_budgeted"] = !new_item["dimensions"]["is_budgeted"] || new_item["dimensions"]["is_budgeted"] == "Budgeted"
    }

    new_item["metric"] = cost_metric[new_item["metric"] || ''] || new_item["metric"]

    if (new_item["budget"] > 0) { new_item["budget"] = ds_currency['symbol'] + new_item["budget"] }
    if (new_item["spend"] > 0) { new_item["spend"] = ds_currency['symbol'] + new_item["spend"] }
    if (new_item["overBudget"] > 0) { new_item["overBudget"] = ds_currency['symbol'] + new_item["overBudget"] }
    if (new_item["overBudgetForec"] > 0) { new_item["overBudgetForec"] = ds_currency['symbol'] + new_item["overBudgetForec"] }
    if (new_item["forecasted"]) { new_item["forecasted"] = ds_currency['symbol'] + new_item["forecasted"] }

    if (new_item["spentPercent"] != undefined) {
      budget_percent = new_item["spentPercent"]
      budget_percent_forec = new_item["spentPercentForec"]
      new_item["spentPercent"] += "%"
      new_item["spentPercentForec"] += "%"
    }

    if ((!new_item["is_budgeted"] && new_item["spendAmount"] > 0) || new_item["budgetAmount"]) {
      if (param_type == "Actual Spend") {
        if (!new_item["is_budgeted"]) {
          new_item["details"] = "Spend is unbudgeted"
          result["exceeded"].push(new_item)
        } else if (new_item["spendAmount"] > new_item["budgetAmount"]) {
          new_item["details"] = "Actual spend exceeded budget"
          result["exceeded"].push(new_item)
        } else if (param_threshold_percentage < budget_percent) {
          new_item["details"] = "Actual spend exceeded budget threshold"
          result["exceeded"].push(new_item)
        }
      } else {
        if (!new_item["is_budgeted"]) {
          new_item["details"] = "Spend is unbudgeted"
          result["forecasted"].push(new_item)
        } else if (new_item.forecastedAmount > new_item["budgetAmount"]) {
          new_item["details"] = "Projected spend exceeded budget"
          result["forecasted"].push(new_item)
        } else if (param_threshold_percentage < budget_percent_forec) {
          new_item["details"] = "Projected spend exceeded budget threshold"
          result["forecasted"].push(new_item)
        }
      }
    }
  })

  result["exceeded"] = _.sortBy(result["exceeded"], function(item) { return item["group"] })
  result["forecasted"] = _.sortBy(result["forecasted"], function(item) { return item["group"] })
EOS
end

datasource "ds_forecasted" do
  run_script $js_aggregated_by_key, $ds_aggregated, "forecasted"
end

datasource "ds_exceeded" do
  run_script $js_aggregated_by_key, $ds_aggregated, "exceeded"
end

script "js_aggregated_by_key", type: "javascript" do
  parameters "ds_aggregated", "key"
  result "result"
  code "result = ds_aggregated[key]"
end

###############################################################################
# Policy
###############################################################################

policy "pol_budget_alert" do
  validate $ds_aggregated do
    summary_template "Budget Alerts: Invalid Budget Name or ID: {{parameters.param_budget}}"
    detail_template <<-EOS
  The following provided budget Name or ID is invalid or the budget refers to prior periods:
  \n
  - {{parameters.param_budget}}
  \n
EOS
    escalate $esc_email
    check eq(size(val(data, "invalid")),0)
  end

  validate $ds_exceeded do
    summary_template "{{with index data 0}}{{ .name }}{{end}}: {{parameters.param_threshold_percentage}}% Budget Threshold Is Exceeded ({{ parameters.param_type }})"
    detail_template <<-EOS
# {{with index data 0}}{{ .name }}{{end}}: Budget Exceeded
Budget Alert Type: **{{ parameters.param_type }}**

Monthly Spend for **{{with index data 0}}{{ .monthYear }}{{end}}**

Currency: **{{with index data 0}}{{ .currency }}{{end}}**

Cost Metric: **{{with index data 0}}{{ .metric }}{{end}}**

Dimensions: **{{with index data 0}}{{ .dimm }}{{end}}**

{{ if parameters.param_filter }}
Target Groups: \n
{{ range parameters.param_filter }}
  * **{{ . }}**
{{ end }}
{{end}}

[Link to budget report in Flexera One](https://{{with index data 0}}{{ .host }}{{end}}/orgs/{{ rs_org_id }}/optima/budgets/{{with index data 0}}{{ .b_id }}{{end}})
EOS
    escalate $esc_email
    check eq(size(data),0)
    export do
      field "group" do
        label "Group"
      end
      field "budgetAmount" do
        label "Budget"
      end
      field "spendAmount" do
        label "Actual Spend"
      end
      field "forecastedAmount" do
        label "Projected (prorated) Spend"
      end
      field "remaining" do
        label "Remaining Amount"
      end
      field "spentPercent" do
        label "% of Budget Spent"
      end
      field "details" do
        label "Details"
      end
    end
  end

  validate $ds_forecasted do
    summary_template "{{with index data 0}}{{ .name }}{{end}}: {{parameters.param_threshold_percentage}}% Budget Threshold Is Exceeded ({{ parameters.param_type }})"
  detail_template <<-EOS
# {{with index data 0}}{{ .name }}{{end}}: Budget Exceeded
Budget Alert Type: **{{ parameters.param_type }}**

Monthly Spend for **{{with index data 0}}{{ .monthYear }}{{end}}**

Currency: **{{with index data 0}}{{ .currency }}{{end}}**

Cost Metric: **{{with index data 0}}{{ .metric }}{{end}}**

Dimensions: **{{with index data 0}}{{ .dimm }}{{end}}**

{{ if parameters.param_filter }}
Target Groups: \n
{{ range parameters.param_filter }}
  * **{{ . }}**
{{ end }}
{{end}}

[Link to budget report in Flexera One](https://{{with index data 0}}{{ .host }}{{end}}/orgs/{{ rs_org_id }}/optima/budgets/{{with index data 0}}{{ .b_id }}{{end}})
EOS
    escalate $esc_email
    check eq(size(data),0)
    export do
      field "group" do
        label "Group"
      end
      field "budgetAmount" do
        label "Budget"
      end
      field "spendAmount" do
        label "Actual Spend"
      end
      field "forecastedAmount" do
        label "Projected (prorated) Spend"
      end
      field "remaining" do
        label "Remaining Amount"
      end
      field "spentPercent" do
        label "% of Budget Spent"
      end
      field "details" do
        label "Details"
      end
    end
  end
end

###############################################################################
# Escalations
###############################################################################

escalation "esc_email" do
  automatic true
  label "Send Email"
  description "Send incident email"
  email $param_email
end

name "Common Bill Ingestion from AWS S3 Object Storage"
rs_pt_ver 20180301
type "policy"
short_description "Downloads cost reports stored in the Flexera Common Bill Ingestion format from AWS S3 Object Storage and then uploads them to a Flexera CBI endpoint. See the [README](https://github.com/flexera-public/policy_templates/tree/master/cost/flexera/cco/cbi_ingestion_aws_s3) and [docs.flexera.com/flexera/EN/Automation](https://docs.flexera.com/flexera/EN/Automation/AutomationGS.htm) to learn more."
long_description ""
doc_link "https://github.com/flexera-public/policy_templates/tree/master/cost/flexera/cco/cbi_ingestion_aws_s3"
category "Cost"
severity "low"
default_frequency "daily"
info(
  version: "0.2.2",
  provider: "Flexera",
  service: "Common Bill Ingestion",
  policy_set: "Common Bill Ingestion",
  hide_skip_approvals: "true"
)

###############################################################################
# Parameters
###############################################################################

parameter "param_email" do
  type "list"
  category "Policy Settings"
  label "Email Addresses"
  description "Email addresses of the recipients you wish to notify when billing data is uploaded"
  default []
end

parameter "param_month_billing" do
  type "string"
  category "Policy Settings"
  label "Billing Month"
  description "Month to upload costs for. Select 'Specific Month' to specify a month."
  allowed_values "Current Month", "Previous Month", "Specific Month"
  default "Current Month"
end

parameter "param_month_specific" do
  type "string"
  category "Policy Settings"
  label "Specific Month"
  description "Month to upload costs for in YYYY-MM format. Only relevant if 'Specific Month' is selected for the Billing Month parameter."
  allowed_pattern /^(19|20)\d\d-(0[1-9]|1[0-2])$/
  default "2020-01"
end

parameter "param_cbi_type" do
  type "string"
  category "Policy Settings"
  label "CBI (Common Bill Ingestion) Endpoint Type"
  description "Whether costs are being sent to an endpoint for Common Bill Ingestion Format or FOCUS Format"
  allowed_values "Common Bill Ingestion", "FOCUS"
  default "Common Bill Ingestion"
end

parameter "param_cbi_endpoint" do
  type "string"
  category "Policy Settings"
  label "CBI (Common Bill Ingestion) Endpoint ID"
  description "The ID of CBI endpoint to create/use for ingested costs. Ex: cbi-oi-optima-laborcosts"
  allowed_pattern /^(cbi-oi-optima-[a-z]+|cbi-oi-focus-[a-z]+|)$/
  default ""
end

parameter "param_cbi_cloud_vendor" do
  type "string"
  category "Policy Settings"
  label "Cloud Vendor"
  description "The value the ingested costs should have for the 'Cloud Vendor' dimension in Flexera CBI. Only has an effect when the CBI endpoint is first created."
  min_length 1
  # No default value, user input required
end

parameter "param_s3_hostname" do
  type "string"
  category "Policy Settings"
  label "AWS S3 Object Storage Bucket Hostname"
  description "The hostname for the S3 bucket that stores the costs. Ex: billing-files.s3.amazonaws.com"
  # No default value, user input required
end

parameter "param_s3_prefix" do
  type "string"
  category "Policy Settings"
  label "AWS S3 Object Storage Path/Prefix"
  description "The path and prefix for the name of the object in the S3 bucket. See README for more information on how file names should be structured. Ex: bills/labor-costs-"
  # No default value, user input required
end

parameter "param_granularity" do
  type "string"
  category "Policy Settings"
  label "Granularity"
  description "Whether there will be one file per month of billing data, or one file per day of billing data. See README for more details."
  allowed_values "Monthly", "Daily"
  default "Monthly"
end

###############################################################################
# Authentication
###############################################################################

credentials "auth_flexera" do
  schemes "oauth2"
  label "Flexera"
  description "Select Flexera One OAuth2 credentials"
  tags "provider=flexera"
end

credentials "auth_aws" do
  schemes "aws", "aws_sts"
  label "AWS"
  description "Select the AWS Credential from the list"
  tags "provider=aws"
  aws_account_number $param_aws_account_number
end

###############################################################################
# Datasources & Scripts
###############################################################################

# Get region-specific Flexera API endpoints
datasource "ds_flexera_api_hosts" do
  run_script $js_flexera_api_hosts, rs_optima_host
end

script "js_flexera_api_hosts", type: "javascript" do
  parameters "rs_optima_host"
  result "result"
  code <<-EOS
  host_table = {
    "api.optima.flexeraeng.com": {
	    api: "api.flexera.com",
      flexera: "api.flexera.com",
      fsm: "api.fsm.flexeraeng.com",
      grs: "grs-front.iam-us-east-1.flexeraeng.com",
      ui: "app.flexera.com",
      tld: "flexera.com"
    },
    "api.optima-eu.flexeraeng.com": {
	    api: "api.flexera.eu",
      flexera: "api.flexera.eu",
      fsm: "api.fsm-eu.flexeraeng.com",
      grs: "grs-front.eu-central-1.iam-eu.flexeraeng.com",
      ui: "app.flexera.eu",
      tld: "flexera.eu"
    },
    "api.optima-apac.flexeraeng.com": {
	    api: "api.flexera.au",
      flexera: "api.flexera.au",
      fsm: "api.fsm-apac.flexeraeng.com",
      grs: "grs-front.ap-southeast-2.iam-apac.flexeraeng.com",
      ui: "app.flexera.au",
      tld: "flexera.au"
    }
  }

  result = host_table[rs_optima_host]
EOS
end

# Get applied policy metadata for use later
datasource "ds_applied_policy" do
  request do
    auth $auth_flexera
    host val($ds_flexera_api_hosts, "flexera")
    path join(["/policy/v1/orgs/", rs_org_id, "/projects/", rs_project_id, "/applied-policies", switch(policy_id, join(["/", policy_id]), "")]])
  end
end

datasource "ds_dates" do
  run_script $js_dates, $param_month_billing, $param_month_specific
end

script "js_dates", type: "javascript" do
  parameters "param_month_billing", "param_month_specific"
  result "result"
  code <<-EOS
  result = { period: param_month_specific }

  if (param_month_billing != 'Specific Month') {
    date = new Date()
    date.setDate(date.getDate() - 1)

    if (param_month_billing == 'Previous Month') {
      date.setMonth(date.getMonth() - 1)
    }

    year = date.toISOString().split('-')[0]
    month = date.toISOString().split('-')[1]

    result = {
      period: year + '-' + month
    }
  }
EOS
end

datasource "ds_cbi_endpoint_id" do
  run_script $js_cbi_endpoint_id, $param_cbi_endpoint, $param_cbi_cloud_vendor, $param_cbi_type
end

script "js_cbi_endpoint_id", type: "javascript" do
  parameters "param_cbi_endpoint", "param_cbi_cloud_vendor", "param_cbi_type"
  result "result"
  code <<-EOS
  result = param_cbi_endpoint

  if (param_cbi_endpoint == "") {
    prefix = "cbi-oi-optima-"
    if (param_cbi_type == "FOCUS") { prefix = "cbi-oi-focus-" }

    // Make the Cloud Vendor lowercase, replace spaces with underscores,
    // remove any non-alphabetical characters, and remove any underscores are the start/end of the string
    result = prefix + param_cbi_cloud_vendor.toLowerCase().replace(/ /g, '_').replace(/[^a-z_]/g, '').replace(/^_+|_+$/g, '')
  }
EOS
end

datasource "ds_existing_bill_connects" do
  request do
    auth $auth_flexera
    host val($ds_flexera_api_hosts, "flexera")
    path join(["/finops-onboarding/v1/orgs/", rs_org_id, "/bill-connects"])
    header "User-Agent", "RS Policies"
  end
  result do
    encoding "json"
    collect jmes_path(response, "values[*]") do
      field "id", jmes_path(col_item, "id")
      field "kind", jmes_path(col_item, "kind")
      field "created_at", jmes_path(col_item, "created_at")
      field "updated_at", jmes_path(col_item, "updated_at")
      field "billIdentifier", jmes_path(col_item, "cbi.billIdentifier")
      field "integrationId", jmes_path(col_item, "cbi.integrationId")
      field "name", jmes_path(col_item, "cbi.name")
      field "displayName", jmes_path(col_item, "cbi.params.displayName")
      field "vendorName", jmes_path(col_item, "cbi.params.vendorName")
    end
  end
end

# Branching logic: Create a new bill connect if it doesn't already exist
datasource "ds_to_create_bill_connect" do
  run_script $js_to_create_bill_connect, $ds_existing_bill_connects, $ds_cbi_endpoint_id, $param_cbi_cloud_vendor, $param_cbi_type
end

script "js_to_create_bill_connect", type: "javascript" do
  parameters "ds_existing_bill_connects", "ds_cbi_endpoint_id", "param_cbi_cloud_vendor", "param_cbi_type"
  result "result"
  code <<-EOS
  result = []

  existing_bill_connect = _.find(ds_existing_bill_connects, function(connect) {
    return connect["id"] == ds_cbi_endpoint_id
  })

  if (existing_bill_connect == undefined) {
    prefix = "cbi-oi-optima"
    if (param_cbi_type == "FOCUS") { prefix = "cbi-oi-focus" }

    result = [{
      billIdentifier: ds_cbi_endpoint_id.split(prefix + "-")[1],
      integrationId: prefix,
      name: param_cbi_cloud_vendor.toLowerCase().trim().replace(/ /g, '_'),
      params: {
        displayName: param_cbi_cloud_vendor,
        vendorName: param_cbi_cloud_vendor.trim().replace(/ /g, '_')
      }
    }]
  }
EOS
end

datasource "ds_create_bill_connect" do
  iterate $ds_to_create_bill_connect
  request do
    auth $auth_flexera
    verb "POST"
    host val($ds_flexera_api_hosts, "flexera")
    path join(["/finops-onboarding/v1/orgs/", rs_org_id, "/bill-connects/cbi"])
    header "User-Agent", "RS Policies"
    body_field "billIdentifier", val(iter_item, "billIdentifier")
    body_field "integrationId", val(iter_item, "integrationId")
    body_field "name", val(iter_item, "name")
    body_field "params", val(iter_item, "params")
  end
  result do
    encoding "json"
    field "id", jmes_path(response, "id")
    field "kind", jmes_path(response, "kind")
    field "created_at", jmes_path(response, "created_at")
    field "updated_at", jmes_path(response, "updated_at")
    field "billIdentifier", jmes_path(response, "cbi.billIdentifier")
    field "integrationId", jmes_path(response, "cbi.integrationId")
    field "name", jmes_path(response, "cbi.name")
    field "displayName", jmes_path(response, "cbi.params.displayName")
    field "vendorName", jmes_path(response, "cbi.params.vendorName")
  end
end

# Branching logic: Select newly created CBI endpoint if it exists. Otherwise, select existing one.
datasource "ds_cbi_endpoint" do
  run_script $js_cbi_endpoint, $ds_create_bill_connect, $ds_existing_bill_connects, $ds_cbi_endpoint_id
end

script "js_cbi_endpoint", type: "javascript" do
  parameters "ds_create_bill_connect", "ds_existing_bill_connects", "ds_cbi_endpoint_id"
  result "result"
  code <<-EOS
  result = _.find(ds_existing_bill_connects, function(connect) { return connect["id"] == ds_cbi_endpoint_id })
  if (ds_create_bill_connect.length > 0) { result = ds_create_bill_connect[0] }
EOS
end

datasource "ds_existing_bill_uploads" do
  request do
    auth $auth_flexera
    host rs_optima_host
    path join(["/optima/orgs/", rs_org_id, "/billUploads"])
    header "User-Agent", "RS Policies"
    body_field "billConnectId", val($ds_cbi_endpoint, "id")
    body_field "billingPeriod", val($ds_dates, "period")
  end
  result do
    encoding "json"
    collect jmes_path(response, "[*]") do
      field "id", jmes_path(col_item, "id")
      field "status", jmes_path(col_item, "status")
      field "billConnectId", jmes_path(col_item, "billConnectId")
      field "billingPeriod", jmes_path(col_item, "billingPeriod")
      field "createdAt", jmes_path(col_item, "createdAt")
      field "updatedAt", jmes_path(col_item, "updatedAt")
    end
  end
end

datasource "ds_pending_bill_uploads" do
  run_script $js_pending_bill_uploads, $ds_existing_bill_uploads
end

script "js_pending_bill_uploads", type: "javascript" do
  parameters "ds_existing_bill_uploads"
  result "result"
  code <<-EOS
  result = _.filter(ds_existing_bill_uploads, function(item) {
    return item["status"] != "complete" && item["status"] != "aborted"
  })
EOS
end

datasource "ds_abort_pending_bill_uploads" do
  iterate $ds_pending_bill_uploads
  request do
    auth $auth_flexera
    verb "POST"
    host rs_optima_host
    path join(["/optima/orgs/", rs_org_id, "/billUploads/", val(iter_item, "id"), "/operations"])
    header "User-Agent", "RS Policies"
    body_field "operation", "abort"
    ignore_status [400, 401, 402, 403, 404, 405, 429, 500, 502]
  end
  result do
    encoding "json"
    field "id", jmes_path(response, "id")
    field "status", jmes_path(response, "status")
    field "billConnectId", jmes_path(response, "billConnectId")
    field "billingPeriod", jmes_path(response, "billingPeriod")
    field "createdAt", jmes_path(response, "createdAt")
    field "updatedAt", jmes_path(response, "updatedAt")
  end
end

datasource "ds_cbi_create_bill_upload" do
  request do
    run_script $js_cbi_create_bill_upload, val($ds_cbi_endpoint, "id"), val($ds_dates, "period"), $ds_abort_pending_bill_uploads, rs_org_id, rs_optima_host
  end
  result do
    encoding "json"
    field "id", jmes_path(response, "id")
    field "status", jmes_path(response, "status")
    field "createdAt", jmes_path(response, "createdAt")
    field "updatedAt", jmes_path(response, "updatedAt")
    field "billConnectId", jmes_path(response, "billConnectId")
    field "billingPeriod", jmes_path(response, "billingPeriod")
  end
end

script "js_cbi_create_bill_upload", type: "javascript" do
  parameters "cbi_endpoint", "period", "ds_abort_pending_bill_uploads", "rs_org_id", "rs_optima_host"
  result "request"
  code <<-EOS
  function sleep(seconds) {
    now = new Date().getTime()
    while(new Date().getTime() < now + (seconds * 1000)) { /* Do nothing */ }
    return now
  }

  // Slow down rate of requests to prevent throttling
  sleep(3)

  var request = {
    auth: "auth_flexera",
    verb: "POST",
    host: rs_optima_host,
    path: "/optima/orgs/" + rs_org_id + "/billUploads",
    headers: { "Api-Version": "1.0", "User-Agent": "RS Policies" },
    body_fields: {
      "billConnectId": cbi_endpoint,
      "billingPeriod": period
    }
  }
EOS
end

datasource "ds_cost_object_names" do
  run_script $js_cost_object_names, $ds_dates, $param_s3_prefix, $param_granularity
end

script "js_cost_object_names", type: "javascript" do
  parameters "ds_dates", "param_s3_prefix", "param_granularity"
  result "result"
  code <<-EOS
  result = []

  if (param_granularity == "Monthly") {
    result.push({
      object: [ param_s3_prefix, ds_dates["period"], ".csv" ].join('')
    })
  } else {
    for (var i = 1; i <= 31; i++) {
      day = i.toString()
      if (i < 10) { day = "0" + day }

      result.push({
        object: [ param_s3_prefix, ds_dates["period"], "-", day, ".csv" ].join('')
      })
    }
  }
EOS
end

datasource "ds_cost_objects" do
  iterate $ds_cost_object_names
  request do
    auth $auth_aws
    host $param_s3_hostname
    path val(iter_item, "object")
    header "User-Agent", "RS Policies"
    ignore_status [404] # Ignore dates that have no associated file instead of failing completely
  end
  result do
    encoding "text"
  end
end

datasource "ds_cbi_upload_files" do
  iterate $ds_cost_objects
  request do
    run_script $js_cbi_upload_files, val($ds_cbi_create_bill_upload, "id"), iter_item, rs_org_id, rs_optima_host
  end
  result do
    encoding "json"
    field "id", jmes_path(response, "id")
    field "length", jmes_path(response, "length")
    field "md5", jmes_path(response, "md5")
    field "status", jmes_path(response, "status")
    field "createdAt", jmes_path(response, "createdAt")
    field "updatedAt", jmes_path(response, "updatedAt")
    field "billUploadId", jmes_path(response, "billUploadId")
  end
end

script "js_cbi_upload_files", type: "javascript" do
  parameters "bill_upload_id", "object", "rs_org_id", "rs_optima_host"
  result "request"
  code <<-EOS
  function sleep(seconds) {
    now = new Date().getTime()
    while(new Date().getTime() < now + (seconds * 1000)) { /* Do nothing */ }
    return now
  }

  // Slow down rate of requests to prevent throttling
  sleep(3)

  var request = {
    auth: "auth_flexera",
    verb: "POST",
    host: rs_optima_host,
    path: "/optima/orgs/" + rs_org_id + "/billUploads/" + bill_upload_id + "/files/cost-" + Math.random().toString().split('.')[1] + ".csv",
    headers: { "Api-Version": "1.0", "User-Agent": "RS Policies" },
    body: object
  }
EOS
end

datasource "ds_cbi_commit_bill_upload" do
  request do
    run_script $js_cbi_commit_bill_upload, $ds_cbi_upload_files, rs_org_id, rs_optima_host
  end
  result do
    encoding "json"
    field "id", jmes_path(response, "id")
    field "status", jmes_path(response, "status")
    field "createdAt", jmes_path(response, "createdAt")
    field "updatedAt", jmes_path(response, "updatedAt")
    field "billConnectId", jmes_path(response, "billConnectId")
    field "billingPeriod", jmes_path(response, "billingPeriod")
  end
end

script "js_cbi_commit_bill_upload", type: "javascript" do
  parameters "ds_cbi_upload_files", "rs_org_id", "rs_optima_host"
  result "request"
  code <<-EOS
  function sleep(seconds) {
    now = new Date().getTime()
    while(new Date().getTime() < now + (seconds * 1000)) { /* Do nothing */ }
    return now
  }

  // Slow down rate of requests to prevent throttling
  sleep(3)

  bill_upload_id = ds_cbi_upload_files.length > 0 ? ds_cbi_upload_files[0]["billUploadId"] : ""

  var request = {
    auth: "auth_flexera",
    verb: "POST",
    host: rs_optima_host,
    path: ["/optima/orgs/", rs_org_id, "/billUploads/", bill_upload_id, "/operations"].join(''),
    headers: { "User-Agent": "RS Policies" },
    body_fields: {"operation": "commit" }
  }
EOS
end

datasource "ds_incident" do
  run_script $js_incident, $ds_cbi_commit_bill_upload, $ds_applied_policy, $ds_dates, $ds_cost_object_names, $param_s3_hostname, $param_s3_prefix
end

script "js_incident", type: "javascript" do
  parameters "ds_cbi_commit_bill_upload", "ds_applied_policy", "ds_dates", "ds_cost_object_names", "param_s3_hostname", "param_s3_prefix"
  result "result"
  code <<-EOS
  result = [{
    policy_name: ds_applied_policy['name'],
    id: ds_cbi_commit_bill_upload['id'],
    status: ds_cbi_commit_bill_upload['status'],
    createdAt: ds_cbi_commit_bill_upload['createdAt'],
    updatedAt: ds_cbi_commit_bill_upload['updatedAt'],
    billConnectId: ds_cbi_commit_bill_upload['billConnectId'],
    billingPeriod: ds_cbi_commit_bill_upload['billingPeriod'],
    s3_hostname: param_s3_hostname
  }]
EOS
end

###############################################################################
# Policy
###############################################################################

policy "pol_fixed_cost" do
  validate_each $ds_incident do
    summary_template "{{ with index data 0 }}{{ .policy_name }}{{ end }}: {{ with index data 0 }}{{ .billingPeriod }}{{ end }}"
    check eq(0, 1)
    escalate $esc_email
    export do
      resource_level true
      field "billingPeriod" do
        label "Billing Period"
      end
      field "s3_hostname" do
        label "Amazon S3 Host"
      end
      field "id" do
        label "Bill Upload ID"
      end
      field "createdAt" do
        label "Bill Upload Date"
      end
      field "status" do
        label "Bill Upload Status"
      end
    end
  end
end

###############################################################################
# Escalations
###############################################################################

escalation "esc_email" do
  automatic true
  label "Send Email"
  description "Send incident email"
  email $param_email
end

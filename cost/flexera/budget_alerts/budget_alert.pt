name "Budget Alerts (Legacy)"
rs_pt_ver 20180301
type "policy"
short_description "**Deprecated: This policy is no longer being updated.**  Create a Monthly Budget Alert for a Billing Center or for the entire Organization. See the [README](https://github.com/flexera-public/policy_templates/tree/master/cost/budget_alerts/) and [docs.flexera.com/flexera/EN/Automation](https://docs.flexera.com/flexera/EN/Automation/AutomationGS.htm) to learn more."
long_description ""
severity "medium"
category "Cost"
tenancy "single"
default_frequency "daily"
info(
  version: "2.3",
  provider: "Flexera Optima",
  service: "",
  policy_set: "",
  publish: "false"
)

###############################################################################
# Parameters
###############################################################################

parameter "param_monthly_budget" do
  label "Monthly Budget"
  type "number"
  description "specify the monthly budget.  Currency is irrelevant; the policy will default to whichever currency is used in Optima"
end

parameter "param_threshold_percentage" do
  label "Threshold Percentage"
  type "number"
  description "Percentage of budget amount to alert on"
  default 100
end

parameter "param_bc_name" do
  label "Billing Center Name or ID"
  description "Provide the name or id of a Billing Center if the Budget Scope is 'Billing Center'. Leave it blank for 'Organization' scope"
  type "string"
end

parameter "param_type" do
  label "Budget Alert Type"
  type "string"
  allowed_values "Actual Spend", "Forecasted Spend"
  description "Actual Spend alerts are based off incurred costs. Forecasted Spend alerts are based off monthly runrates."
  default "Actual Spend"
end

parameter "param_cost_metric" do
  type "string"
  label "Cost Metric"
  allowed_values "Unamortized Unblended", "Amortized Unblended", "Unamortized Blended", "Amortized Blended"
  default "Unamortized Unblended"
  description "Select the cost metric for your report.  See the README file for more details"
end

parameter "param_email" do
  label "Email addresses"
  type "list"
  description "A list of email addresses to notify"
end

###############################################################################
# Authentication
###############################################################################

credentials "auth_flexera" do
  schemes "oauth2"
  label "flexera"
  description "Select Flexera One OAuth2 credentials"
  tags "provider=flexera"
end

###############################################################################
# Datasources and Scripts
###############################################################################

datasource "ds_currency_reference" do
  request do
    host "raw.githubusercontent.com"
    path "/rightscale/policy_templates/master/cost/scheduled_reports/currency_reference.json"
    header "User-Agent", "RS Policies"
  end
end

datasource "ds_currency_code" do
  request do
    auth $auth_flexera
    host rs_optima_host
    path join(["/bill-analysis/orgs/", rs_org_id, "/settings/currency_code"])
    header "Api-Version", "0.1"
    header "User-Agent", "RS Policies"
  end
  result do
    encoding "json"
    field "id", jmes_path(response, "id")
    field "value", jmes_path(response, "value")
  end
end

datasource "ds_billing_centers" do
  request do
    auth $auth_flexera
    host rs_optima_host
    path join(["/analytics/orgs/", rs_org_id, "/billing_centers"])
    header "Api-Version", "1.0"
    header "User-Agent", "RS Policies"
    query "view", "allocation_table"
  end
  result do
    encoding "json"
    collect jmes_path(response, "[*]") do
      field "href", jmes_path(col_item, "href")
      field "id", jmes_path(col_item, "id")
      field "name", jmes_path(col_item, "name")
      field "parent_id", jmes_path(col_item, "parent_id")
      field "ancestor_ids", jmes_path(col_item, "ancestor_ids")
      field "allocation_table", jmes_path(col_item, "allocation_table")
    end
  end
end

datasource "ds_top_level_bcs" do
  run_script $js_top_level_bcs, $ds_billing_centers
end

script "js_top_level_bcs", type: "javascript" do
  parameters "ds_billing_centers"
  result "result"
  code <<-EOS
  result = _.reject(ds_billing_centers, function(bc){ return bc.parent_id != null })
EOS
end

datasource "ds_top_bc_costs" do
  iterate $ds_top_level_bcs
  request do
    run_script $js_costs_request, rs_optima_host, rs_org_id, $param_cost_metric, val(iter_item, "id")
  end
  result do
    encoding "json"
    collect jmes_path(response, "rows[*]") do
      field "name", val(iter_item, "name")
      field "id", jmes_path(col_item, "dimensions.billing_center_id")
      field "amortized_unblended_costs", jmes_path(col_item, "metrics.cost_amortized_unblended_adj")
      field "amortized_blended_costs", jmes_path(col_item, "metrics.cost_amortized_blended_adj")
      field "nonamortized_unblended_costs", jmes_path(col_item, "metrics.cost_nonamortized_unblended_adj")
      field "nonamortized_blended_costs", jmes_path(col_item, "metrics.cost_nonamortized_blended_adj")
    end
  end
end

script "js_costs_request", type: "javascript" do
  parameters "rs_optima_host", "org", "param_cost_metric", "bc"
  result "request"
  code <<-EOS
  var cost_metric = {
    "Unamortized Unblended": "cost_nonamortized_unblended_adj",
    "Amortized Unblended": "cost_amortized_unblended_adj",
    "Unamortized Blended": "cost_nonamortized_blended_adj",
    "Amortized Blended": "cost_amortized_blended_adj"
  }

  var date = new Date()
  var year = date.getUTCFullYear()
  var month = (date.getUTCMonth() == 11) ? 1 : 2 + date.getUTCMonth()

  if (month == 1) {
    var lmonth = 12
    var lyear = year
    year = year + 1
  } else {
    var lmonth = month - 1
    var lyear = year
  }

  mo = month.toString().length > 1 ? month : '0' + month
  lmo = lmonth.toString().length > 1 ? lmonth : '0' + lmonth

  // wait for all the bill data to be collected, usually takes about 3 days
  var dt = new Date()

  if (dt.getDate() > 4) {
    // start collecting bill data after its retrieved by Optima, roughly 3 days
    // the complete cost data should be retrieved
    dt.setDate(dt.getDate() - 3)
  } else if (dt.getDate() == 1) {
    dt.setDate(dt.getDate() + 1)
  }

  var today_minus_three = dt.toISOString().substring(0, 10)
  var current_month = lyear + "-" + lmo + "-01"

  var request = {
    auth: "auth_flexera",
    host: rs_optima_host,
    verb: "POST",
    path: "/bill-analysis/orgs/" + org + "/costs/aggregated",
    body_fields: {
      "dimensions": ["billing_center_id"],
      "granularity": "day",
      "start_at": current_month,
      "end_at": today_minus_three,
      "metrics": [cost_metric[param_cost_metric]],
      "billing_center_ids": [bc]
    },
    headers: {
      "User-Agent": "RS Policies",
      "Api-Version": "1.0"
    }
  }
EOS
end

datasource "ds_top_bc_costs_formatted" do
  run_script $js_bc_costs, $ds_top_bc_costs, $param_cost_metric, $param_bc_name
end

script "js_bc_costs", type: "javascript" do
  parameters "billing_centers", "param_cost_metric", "param_bc_name"
  result "result"
  code <<-EOS
  var result = []

  var cost_type = {
    "Unamortized Unblended": "nonamortized_unblended_costs",
    "Amortized Unblended": "amortized_unblended_costs",
    "Unamortized Blended": "nonamortized_blended_costs",
    "Amortized Blended": "amortized_blended_costs"
  }

  var totalCost = 0
  var bc_id = ""
  var count = 0
  var bc_name = ""

  _.each(billing_centers, function (bc) {
    var type = cost_type[param_cost_metric]
    var cost = bc[type]

    if (param_bc_name === bc.name || param_bc_name === bc.id) {
      bc_name = bc["name"]
      totalCost = totalCost + cost
      bc_id = bc["id"]
      count++
    }

    else {
      result.push({
        name: bc["name"],
        total: cost,
        id: bc["id"]
      })
    }
  })

  if (count > 0) {
    result.push({
      name: bc_name,
      total: totalCost,
      id: bc_id
    })
  }
EOS
end

datasource "ds_org_total" do
  run_script $js_org_total, $ds_top_bc_costs_formatted, $param_bc_name
end

script "js_org_total", type: "javascript" do
  parameters "billing_centers", "param_bc_name"
  result "result"
  code <<-EOS
  var sum = 0

  if( param_bc_name.length <= 0 ) {
    totals = _.pluck(billing_centers, "total")
    sum = _.reduce(totals, function(memo, num) { return memo + num }, 0)
  }

  var result = {
    name: "Organization",
    total: sum,
    id: null
  }
EOS
end

datasource "ds_filtered_billing_centers" do
    run_script $js_filtered_billing_centers, $ds_billing_centers, $param_bc_name
end

script "js_filtered_billing_centers", type: "javascript" do
  parameters "billing_centers", "param_bc_name"
  result "result"
  code <<-EOS
  var result = []

  _.each(billing_centers, function (bc) {
    if (param_bc_name === "Unallocated" && param_bc_name === bc['name']) {
      if (bc['parent_id'] == null) {
        result.push(bc)
      }
    } else if (param_bc_name === bc['name']) {
      result.push(bc)
    } else if (param_bc_name === bc['id']) {
      result.push(bc)
    }
  })
EOS
end

datasource "ds_all_bc_costs" do
  iterate $ds_filtered_billing_centers
  request do
    run_script $js_costs_request, rs_optima_host, rs_org_id, $param_cost_metric, val(iter_item, "id")
  end
  result do
    encoding "json"
    collect jmes_path(response, "rows[*]") do
      field "name", val(iter_item, "name")
      field "id", jmes_path(col_item, "dimensions.billing_center_id")
      field "amortized_unblended_costs", jmes_path(col_item, "metrics.cost_amortized_unblended_adj")
      field "amortized_blended_costs", jmes_path(col_item, "metrics.cost_amortized_blended_adj")
      field "nonamortized_unblended_costs", jmes_path(col_item, "metrics.cost_nonamortized_unblended_adj")
      field "nonamortized_blended_costs", jmes_path(col_item, "metrics.cost_nonamortized_blended_adj")
    end
  end
end

datasource "ds_all_bc_costs_formatted" do
  run_script $js_bc_costs, $ds_all_bc_costs, $param_cost_metric, $param_bc_name
end

datasource "ds_all_costs" do
  run_script $js_combine_ds, $ds_all_bc_costs_formatted, $ds_org_total, $param_bc_name
end

script "js_combine_ds", type: "javascript" do
  parameters "billing_centers", "org", "param_bc_name"
  result "result"
  code <<-EOS
  var result = []

  _.each(billing_centers, function(bc) {
    if(param_bc_name === bc['name'] || param_bc_name == bc['id']) {
      result.push(bc)
    }
  })

  result.push(org)
EOS
end

datasource "ds_filtered_target" do
  run_script $js_filter_target, $ds_all_costs, $param_bc_name, $param_monthly_budget, $param_type, $ds_currency_code, $ds_currency_reference
end

script "js_filter_target", type: "javascript" do
  parameters "all_costs", "param_bc_name", "param_monthly_budget", "param_type", "ds_currency_code", "ds_currency_reference"
  result "report"
  code <<-EOS
  var target = []
  var report = {}
  var date = new Date()

  if (date.getDate() > 4) {
    //Only wait 3 days if doing Forecasted Spend
    var day_adjustment = 0

    if (param_type == "Forecasted Spend") {
      var day_adjustment = 3
    }

    date.setDate(date.getDate() - day_adjustment)
    var month = parseInt(date.toISOString().split('T')[0].split('-')[1])
    var day = parseInt(date.toISOString().split('T')[0].split('-')[2])
    var year = parseInt(date.toISOString().split('T')[0].split('-')[0])

    var months = [ 'January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December' ]
    var month_year = months[month - 1] + " " + year.toString()

    if (month == 1) { var numdays = 31 }
    if (month == 2) { var numdays = 28 }
    if (month == 3) { var numdays = 31 }
    if (month == 4) { var numdays = 30 }
    if (month == 5) { var numdays = 31 }
    if (month == 6) { var numdays = 30 }
    if (month == 7) { var numdays = 31 }
    if (month == 8) { var numdays = 31 }
    if (month == 9) { var numdays = 30 }
    if (month == 10) { var numdays = 31 }
    if (month == 11) { var numdays = 30 }
    if (month == 12) { var numdays = 31 }

    // Account for leap years
    if (month == 2 && year % 4 == 0) {
      numdays = 29
    }

    var monthcomplete = day / numdays

    function formatNumber(number, separator) {
      var numString = number.toString()
      var values = numString.split(".")
      var formatted = ''

      while (values[0].length > 3) {
        var chunk = values[0].substr(-3)
        values[0] = values[0].substr(0, values[0].length - 3)
        formatted = separator + chunk + formatted
      }

      if (values[0].length > 0) {
        formatted = values[0] + formatted
      }

      if (values[1] == undefined) {
        return formatted
      }

      return formatted + "." + values[1]
    }

    // Format costs with currency symbol and thousands separator
    if (ds_currency_code['value'] !== undefined) {
      if (ds_currency_reference[ds_currency_code['value']] !== undefined) {
        var cur = ds_currency_reference[ds_currency_code['value']]['symbol']
        if (ds_currency_reference[ds_currency_code['value']]['t_separator'] !== undefined) {
          var separator = ds_currency_reference[ds_currency_code['value']]['t_separator']
        } else {
          var separator = ""
        }
      } else {
        var cur = ""
        var separator = ""
      }
    } else {
      var cur = "$"
      var separator = ","
    }

    separator = separator.trim()
    var selected_bc = null

    if (param_bc_name.length <= 0) {
      _.each(all_costs, function (bc) {
        var runrate = bc["total"] / monthcomplete
        var overBudgetAmountCur = ""

        if ((Math.round((runrate - param_monthly_budget) * 100) / 100) !== 0) {
          overBudgetAmountCur = cur
        }

        var rawForecastedSpend = Math.round((runrate - bc["total"]) * 100) / 100
        var forecastedSpend = cur + formatNumber(rawForecastedSpend, separator)

        if (bc.name === "Organization") {
          selected_bc = bc

          if (param_type === "Forecasted Spend") {
            var overBudgetAmount = overBudgetAmountCur + formatNumber((Math.round((runrate - param_monthly_budget) * 100) / 100), separator)
            var overBudgetPercent = Math.round((((Math.round(runrate * 100) / 100) - (Math.round(param_monthly_budget * 100) / 100)) / param_monthly_budget) * 100)

            target.push({
              name: bc["name"],
              actual: cur + formatNumber((Math.round(bc["total"] * 100) / 100), separator),
              type: "Forecasted Spend",
              runrate: cur + formatNumber((Math.round(runrate * 100) / 100), separator),
              id: bc["id"],
              budget: cur + formatNumber(param_monthly_budget, separator),
              total: runrate,
              overBudgetAmount: overBudgetAmount,
              overBudgetPercent: overBudgetPercent + "%",
              forecastedSpend: forecastedSpend
            })
          } else {
            var overBudgetAmount = overBudgetAmountCur + formatNumber((Math.round((bc["total"] - param_monthly_budget) * 100) / 100), separator)
            var overBudgetPercent = Math.round((((Math.round(bc["total"] * 100) / 100) - (Math.round(param_monthly_budget * 100) / 100)) / param_monthly_budget) * 100)

            target.push({
              name: bc["name"],
              actual: cur + formatNumber((Math.round(bc["total"] * 100) / 100), separator),
              type: "Actual Spend",
              runrate: cur + formatNumber((Math.round(runrate * 100) / 100), separator),
              id: bc["id"],
              budget: cur + formatNumber(param_monthly_budget, separator),
              total: bc["total"],
              overBudgetAmount: overBudgetAmount,
              overBudgetPercent: overBudgetPercent + "%",
              forecastedSpend: forecastedSpend
            })
          }
        }
      })
    } else {
      _.each(all_costs, function (bc) {
        var runrate = bc["total"] / monthcomplete
        var overBudgetAmountCur = ""

        if ((Math.round((runrate - param_monthly_budget) * 100) / 100) !== 0) {
          overBudgetAmountCur = cur
        }

        var rawForecastedSpend = Math.round((runrate - bc["total"]) * 100) / 100
        var forecastedSpend = cur + formatNumber(rawForecastedSpend, separator)

        if (param_bc_name === bc.name || bc.id === param_bc_name) {
          selected_bc = bc
          if (param_type === "Forecasted Spend") {
            var overBudgetAmount = overBudgetAmountCur + formatNumber((Math.round((runrate - param_monthly_budget) * 100) / 100), separator)
            var overBudgetPercent = Math.round((((Math.round(runrate * 100) / 100) - (Math.round(param_monthly_budget * 100) / 100)) / param_monthly_budget) * 100)
            target.push({
              name: bc["name"],
              actual: cur + formatNumber((Math.round(bc["total"] * 100) / 100), separator),
              type: "Forecasted Spend",
              runrate: cur + formatNumber((Math.round(runrate * 100) / 100), separator),
              id: bc["id"],
              budget: cur + formatNumber(param_monthly_budget, separator),
              total: runrate,
              overBudgetAmount: overBudgetAmount,
              overBudgetPercent: overBudgetPercent + "%",
              forecastedSpend: forecastedSpend
            })
          } else {
            var overBudgetAmount = overBudgetAmountCur + formatNumber((Math.round((bc["total"] - param_monthly_budget) * 100) / 100), separator)
            var overBudgetPercent = Math.round((((Math.round(bc["total"] * 100) / 100) - (Math.round(param_monthly_budget * 100) / 100)) / param_monthly_budget) * 100)
            target.push({
              name: bc["name"],
              actual: cur + formatNumber((Math.round(bc["total"] * 100) / 100), separator),
              type: "Actual Spend",
              runrate: cur + formatNumber((Math.round(runrate * 100) / 100), separator),
              id: bc["id"],
              budget: cur + formatNumber(param_monthly_budget, separator),
              total: bc["total"],
              overBudgetAmount: overBudgetAmount,
              overBudgetPercent: overBudgetPercent + "%",
              forecastedSpend: forecastedSpend
            })
          }
        }
      })
    }

    if (param_type === "Forecasted Spend") {
      var runrate = selected_bc["total"] / monthcomplete
    } else {
      var runrate = selected_bc["total"]
    }

    var totalCur = ""
    var budgetCur = ""
    var forecastedSpend = ""

    if ((Math.round(selected_bc["total"] * 100) / 100) !== 0) {
      totalCur = cur + formatNumber((Math.round(selected_bc["total"] * 100) / 100), separator)
    }

    if ((Math.round((target[0]["total"] - selected_bc["total"]) * 100) / 100) !== 0) {
      forecastedSpend = cur + formatNumber((Math.round((target[0]["total"] - selected_bc["total"]) * 100) / 100), separator)
    }

    if (param_monthly_budget !== 0) {
      budgetCur = cur + formatNumber(param_monthly_budget, separator)
    }

    console.log((Math.round((target[0]["total"] - selected_bc["total"]) * 100) / 100))

    report = {
      actual: (Math.round(selected_bc["total"] * 100) / 100).toString(10),
      runrate: (Math.round(runrate * 100) / 100).toString(10),
      monthYear: month_year,
      total: target[0]["total"],
      chartType: encodeURI('cht=bhs'),
      chartSize: encodeURI('chs=800x200'),
      chartData: encodeURI("chd=t:" + (Math.round(selected_bc["total"] * 100) / 100) + "," + 0 + "|" + (Math.round((target[0]["total"] - selected_bc["total"]) * 100) / 100) + "," + 0 + "|" + 0 + "," + param_monthly_budget + "|" + 0 + "," + ((Math.round((runrate - param_monthly_budget) * 100) / 100))),
      chartTitle: encodeURI('chtt= "Actual v. Monthly Cost Report"'),
      chartImage: encodeURI('chof=.png'),
      chartColor: encodeURI('chco=65B178,CCF2D6,2F6DB7,E5A687'),
      chartLebel: encodeURI('chdl=Actual+Spend|Forecasted+Spend|Budget|Over+Budget'),
      chartLebelPosition: encodeURI('chdlp=b'),
      chartYAxis: encodeURI('chxt=y'),
      chartYAxisLebel: encodeURI('chxl=0:|+1:|+'),
      chartDataAutoScale: encodeURI('chds=a'),
      chartDataValue: encodeURI('chl=' + totalCur + '||' + forecastedSpend + '|||' + budgetCur + '||' + target[0]["overBudgetAmount"]),
      reportData: target
    }
  } else {
    report = {
      total: param_monthly_budget - 1,
      runrate: -1,
      actual: -1
    }
  }
EOS
end

###############################################################################
# Policy
###############################################################################

policy "budget_alert" do
  validate $ds_filtered_target do
    summary_template "{{ parameters.param_type }} Budget Exceeded {{parameters.param_threshold_percentage}} Percent Threshold"
    # ignore changes to the monthly spend and runrate, since those will change constantly
    hash_exclude "actual", "runrate", "total"
    detail_template <<-EOS
# Budget Exceeded
### Cost Metric: {{ parameters.param_cost_metric }}
### Budget Alert Type: {{ parameters.param_type }}
### Monthly Spend for {{ data.monthYear }}
![Spending Overview Chart](https://image-charts.com/chart?{{ data.chartType }}&{{ data.chartData }}&{{ data.chartSize }}&{{ data.chartImage }}&{{ data.chartColor }}&{{ data.chartLebel }}&{{ data.chartYAxisLebel }}&{{ data.chartYAxis }}&{{ data.chartLebelPosition }}&{{data.chartDataAutoScale}}&{{data.chartDataValue}}&{{ data.chartTitle }})
EOS
    escalate $esc_budget_alert
    check lt(val(data,"total"),prod($param_monthly_budget,div($param_threshold_percentage,100)))
    export "reportData" do
      resource_level true
      field "name" do
        label "Billing Center Name"
      end
      field "budget" do
        label "Budget"
      end
      field "actual" do
        label "Month to Date Spend"
      end
      field "forecastedSpend" do
        label "Additional Forecasted Spend"
      end
      field "runrate" do
        label "Forecasted Full Month Spend"
      end
      field "overBudgetAmount" do
        label "Over Budget Amount"
      end
      field "overBudgetPercent" do
        label "Over Budget Percent"
      end
      field "id" do
        label "Billing Center ID"
      end
    end
  end
end

###############################################################################
# Escalations
###############################################################################

escalation "esc_budget_alert" do
  automatic true
  label "Send Email"
  description "Send incident email"
  email $param_email
end

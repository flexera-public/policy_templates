name "Downsize Instances"
rs_pt_ver 20180301
type "policy"
short_description "A policy that downsizes instances. \n See the [README](https://github.com/rightscale/policy_templates/tree/master/cost/downsize_instance) and [docs.rightscale.com/policies](http://docs.rightscale.com/policies/) to learn more."
long_description "Version: 1.12"
severity "medium"
category "Cost"

###############################################################################
# Permissions
###############################################################################

permission "perm_instances" do
  label "Permissions for instances"
  actions "rs_cm.index", "rs_cm.show"
  resources "rs_cm.instances", "rs_cm.clouds", "rs_cm.instance_types"
end

###############################################################################
# Parameters
###############################################################################

parameter "param_instance_tag_list" do
  type "list"
  label "Tags to find instances"
  description "List of tags used to filter instances that must validate policy. (e.g.: ec2:downsize=true)"
  min_length 1
  default ["ec2:downsize=true", "azure:downsize=true", "gce:downsize"]
  allowed_pattern /([\w]?)+\:([\w]?)+\=([\w]?)+|gce:([\w]?)+/
end

parameter "param_email" do
  type "list"
  label "Email List"
  description "Email addresses of the recipients you wish to notify"
end

parameter "param_exclude_tags" do
  type "list"
  label "Tags to ignore instances"
  description "List of tags that will exclude instances from being evaluated by this policy. Multiple tags are evaluated as an 'OR' condition. Tag keys or key/value pairs can be listed. Example: 'test,env=dev'"
end

parameter "param_cooldown_days" do
  type "number"
  label "Cooldown Days"
  description "Days to cooldown between checks of same instance"
  default 30
end

###############################################################################
# Authentication
###############################################################################

auth "auth_rs", type: "rightscale"

###############################################################################
# Resources
###############################################################################

resources "clouds", type: "rs_cm.clouds" do
  filter do # ignore clouds that are NOT represented in instance_types.json
    cloud_type ne: ["vscale", "soft_layer", "cloud_stack", "rackspace_next_gen", "blue_skies","open_stack_v2","uca","open_stack_v3"]
  end
end

resources "instances", type: "rs_cm.instances" do
  iterate @clouds
  cloud_href href(iter_item)
  filter do
    state ne: ["stopped", "provisioned", "terminated"]
  end
  tags all(any($param_instance_tag_list),none($param_exclude_tags))
end

resources "instance_types", type: "rs_cm.instance_types" do
  iterate @clouds
  cloud_href href(iter_item)
end

###############################################################################
# Datasources
###############################################################################

datasource "ds_instance_type_memory", type: "javascript" do
  run_script $js_instance_type_memory, @instance_types
end

datasource "ds_instances" do
  iterate @instances
  field "resource_uid", val(iter_item,  "resource_uid")
  field "name", val(iter_item, "name")
  field "href", href(iter_item)
  field "tags", val(iter_item, "tags")
  field 'cloud_specific_attributes', val(iter_item,'cloud_specific_attributes')
end

datasource "ds_instances_16" do
  iterate(@clouds)
  request do
    auth $auth_rs
    verb "GET"
    host rs_cm_host
    path join([href(iter_item), "/instances"])
    header "X-Api-Version", "1.6"
    header "X-Account", to_s(rs_project_id)
  end
  result do
    encoding "json"
    collect jmes_path(response, "[*]") do
      field "href", jmes_path(col_item, "href")
      field "name", jmes_path(col_item,"name")
      field "description", jmes_path(col_item, "description")
      field "legacy_id", to_n(jmes_path(col_item,"legacy_id"))
      field "instance_type", jmes_path(col_item, "links.instance_type.name")
      field "region", jmes_path(col_item, "links.cloud.region")
      field "cloud_type", jmes_path(col_item, "links.cloud.cloud_type")
      field "cloud_href", jmes_path(col_item, "links.cloud.href")
      field 'availability_set', jmes_path(col_item,'cloud_specific_attributes.availability_set')
    end
  end
end

# get AWS instance size map
datasource "ds_aws_instance_size_map" do
  request do
    verb "GET"
    host "raw.githubusercontent.com"
    path "/rightscale/policy_templates/master/data/aws/instance_types.json"
    header "User-Agent", "RS Policies"
  end
end

# get azure instance size map
datasource "ds_azure_instance_size_map" do
  request do
    verb "GET"
    host "raw.githubusercontent.com"
    path "/rightscale/policy_templates/master/data/azure/instance_types.json"
    header "User-Agent", "RS Policies"
  end
end

# get google instance size map
datasource "ds_google_instance_size_map" do
  request do
    verb "GET"
    host "raw.githubusercontent.com"
    path "/rightscale/policy_templates/master/data/google/instance_types.json"
    header "User-Agent", "RS Policies"
  end
end

datasource "ds_filtered_instances" do
  run_script $js_filter_instances, $ds_instances, $ds_instances_16, $ds_aws_instance_size_map, $ds_azure_instance_size_map, $ds_google_instance_size_map
end

###############################################################################
# Scripts
###############################################################################

script "js_instance_type_memory", type: "javascript" do
  parameters "instance_types"
  result "instance_type_memory_mapping"
  code <<-EOS
  var instance_type_memory_mapping = {};
  var mb_bytes = 1000000
  var gb_bytes = 1000000000
for (m = 0; m < instance_types.length; m++) {
  instance_type_name = instance_types[m]["name"]
  instance_type_memory = instance_types[m]["memory"]
  if (instance_type_memory.match(/GB/)) {
    mem_gb = Number(instance_type_memory.split("GB")[0])
    mem = mem_gb * gb_bytes
  } else if (instance_type_memory.match(/MB/)) {
    mem_mb = Number(instance_type_memory.split("MB")[0])
    mem = mem_mb * mb_bytes
  } else { // assume MB without the units
    mem_mb = Number(instance_type_memory)
    mem = mem_mb * mb_bytes
  }
  instance_type_memory_mapping[instance_type_name] = mem
};
EOS
end

script "js_filter_instances", type: "javascript" do
  parameters "instances", "instances16", "aws_instance_size_map","azure_instance_size_map","google_instance_size_map"
  result "details"
  code <<-EOS
// This is the list of filtered instances.
var details = {}
var downsize_instances = []
var cooldown_instances = []
var i_type = {};

// merge multicloud instance type map
var instance_size_map = _.extend(aws_instance_size_map,azure_instance_size_map,google_instance_size_map )

for ( n = 0; n < instances16.length; n++) {
  i_type[instances16[n]["href"]] = {
    cloud_type: instances16[n]["cloud_type"],
    cloud_href: instances16[n]["cloud_href"],
    instance_type: instances16[n]["instance_type"],
    legacy_id: instances16[n]["legacy_id"],
    region: instances16[n]["region"]
  }
}

for ( i = 0; i < instances.length; i++ ) {
  var cloud_type = i_type[instances[i]["href"]]["cloud_type"]
  var cloud_href = i_type[instances[i]["href"]]["cloud_href"]
  var instance_type = i_type[instances[i]["href"]]["instance_type"]
  var legacy_id = i_type[instances[i]["href"]]["legacy_id"]
  var region = i_type[instances[i]["href"]]["region"]
  var next_instance_size = instance_size_map[instance_type.toString()]["down"]
  // get all the tag keys to search them
  var tag_keys = []
  _.each(instances[i]["tags"], function(tag){
      this.push(tag.split('=')[0])
  }, tag_keys )

  if (!next_instance_size) { next_instance_size = "N/A" }

  if ( tag_keys.indexOf('rs_downsize:cooldown') === -1 ){
    if ( !instances[i]['cloud_specific_attributes']['availability_set']) {
      downsize_instances.push({
        resource_uid: instances[i]["resource_uid"],
        name: instances[i]["name"],
        href: instances[i]["href"],
        description: instances[i]["description"],
        tags: instances[i]["tags"],
        legacy_id: legacy_id,
        instance_type: instance_type,
        region: region,
        cloud_type: cloud_type,
        cloud_href: cloud_href,
        next_instance_size: next_instance_size
      })
    }
  } else {
    // get the cooldown date for report
    var cooldown_tag = _.find(instances[i]['tags'], function(tag){
      tag_key=tag.split('=')[0]
      if (tag_key==='rs_downsize:cooldown'){
       return tag
      }
    })
    var cooldown_date = cooldown_tag.split('=')[1]
    cooldown_instances.push({
      resource_uid: instances[i]["resource_uid"],
      name: instances[i]["name"],
      href: instances[i]["href"],
      description: instances[i]["description"],
      cooldown_date: cooldown_date,
      legacy_id: legacy_id,
      instance_type: instance_type,
      region: region,
      cloud_type: cloud_type,
      cloud_href: cloud_href,
      next_instance_size: next_instance_size
    })
  }
};
details = {
  downsize_instances: downsize_instances,
  cooldown_instances: cooldown_instances
}
EOS
end

###############################################################################
# Resolutions
###############################################################################

resolution "report_downsize_instances_resolution" do
  email $param_email
end

###############################################################################
# Escalations
###############################################################################

escalation "report_downsize_instances" do
  email $param_email
end

escalation "downsize_instances" do
  run "downsize_instances", data, $param_instance_tag_list, $param_cooldown_days
end

escalation "cooldown_instances" do
  run "delete_cooldown_tag", data,  $param_cooldown_days
end

###############################################################################
# Policy
###############################################################################

policy "policy_downsize" do
  validate $ds_filtered_instances do
    summary_template "{{ rs_project_name }} (Account ID: {{ rs_project_id }}): {{ len data.downsize_instances }} Instances that can be downsized"
    detail_template <<-EOS
# {{ len data.downsize_instances }} Instances can be downsized

| Instance Name | Resource UID | Current Instance Type | New Instance Type |
| ------------- | ------------ | --------------------- | ----------------- |
{{ range data.downsize_instances -}}
  | {{.name}} | {{.resource_uid}} | {{.instance_type}} | {{.next_instance_size}} |
{{ end -}}

EOS
    escalate $report_downsize_instances
    escalate $downsize_instances
    resolve $report_downsize_instances_resolution
    check eq(size(val(data, "downsize_instances")), 0)
  end

  validate $ds_filtered_instances do
    summary_template "{{ rs_project_name }} (Account ID: {{ rs_project_id }}): {{ len data.cooldown_instances }} Instances are in cooldown"
    detail_template <<-EOS
  # {{ len data.cooldown_instances }} Instances are in cooldown

  | Instance Name | Resource UID | Current Instance Type | New Instance Type | Cooldown Date |
  | ------------- | ------------ | --------------------- | ----------------- | ------------- |
  {{ range data.cooldown_instances -}}
  | {{.name}} | {{.resource_uid}} | {{.instance_type}} | {{.next_instance_size}} | {{.cooldown_date}} |
  {{ end -}}

  EOS
    escalate $cooldown_instances
    check eq(size(val(data, "cooldown_instances")), 0)
  end
end

###############################################################################
# Cloud Workflow
###############################################################################


define downsize_instances($data,$param_instance_tag_list,$param_cooldown_days) do
  foreach $item in $data['downsize_instances'] do

    @current_instance = rs_cm.instances.empty()
    @instance = rs_cm.get(href: $item["href"])
    @cloud = @instance.cloud()
    @next_instance = @instance

    if $item["next_instance_size"] != "N/A"
      sub on_error: rollback($item, @next_instance, @cloud) do
        call sys_log('Instance Resizing',$item['name'])
        call stop_instance(@instance, @cloud, $item) retrieve @next_instance

        @next_instance = first(@cloud.instances(filter: ['resource_uid=='+$item['resource_uid']]))
        @new_instance_type = first(@cloud.instance_types(filter: ["name=="+$item["next_instance_size"]]))
        @next_instance.update(instance: { instance_type_href: @new_instance_type.href })

        call sys_log('Instance Resized', @new_instance_type.name)
        call start_instance(@next_instance, @cloud, $item) retrieve @next_instance
      end

      sub task_label:"Adding Cooldown Tag" do
        $date = now() + (60*60*24)*$param_cooldown_days
        $format_string = "%Y/%m/%d %H:%M:%S"
        $formatted_time = strftime($date, $format_string)
        # add the cooldown tag, but
        # dont add/modify the cooldown tag if it already exists
        $cooldown_tag = tag_value(@next_instance,'rs_downsize:cooldown')
        call sys_log('cooldown_tag',$cooldown_tag)

        if !$cooldown_tag
          task_label("Adding Cooldown Tag " + $item['name'])
          rs_cm.tags.multi_add(resource_hrefs: [@next_instance.href], tags: ["rs_downsize:cooldown="+$formatted_time])
          call sys_log('Adding Cooldown Tag',$formatted_time)
        end
        @current_instance = @next_instance
      end
    end

    sub task_label:"Removing Downsize Tag" do
      if empty?(@current_instance)
        @cloud = rs_cm.get(href: $item['cloud_href'])
        # find the resource by resource_uid because the href may have changed after resize.
        @current_instance = first(@cloud.instances(filter: ['resource_uid=='+$item['resource_uid'] ]))
      end

      # delete the downsize tag(s) provided by the user
      $delete_tags = []
      foreach $tag in $param_instance_tag_list do
        # if tag exists include in the delete_tags array
        $tag_key=split($tag,'=')[0]

        if contains?($item['tags'],[$tag_key])
          $delete_tags << $tag
        end
      end

      if size($delete_tags) > 0
        task_label("Deleting Tags " + @current_instance.name)
        call sys_log('delete_tags',to_s($delete_tags))
        rs_cm.tags.multi_delete(resource_hrefs: [@current_instance.href], tags: $delete_tags)
      end
    end
  end
end

define rollback($item, @instance, @cloud) do
  sub task_label:"Rolling Back to Original Instance Type" do
    ## Logic to revert the instance back to its original instance type
    call sys_log('Instance Rollingback', $item['name'])
    @instance = first(@cloud.instances(filter: ['resource_uid=='+$item['resource_uid'] ]))

    sub task_label:"Setting Error Tag" do
      $msg = split($_error["message"], "\n")
      foreach $i in $msg do
        if $i =~ "CloudException"
          $tag = "rs_policy_action:downsize_error_info=" + $i
          rs_cm.tags.multi_add(tags: [$tag], resource_hrefs: [@instance.href])
        end
      end
      call sys_log(join(["Resize Error: ",@instance.name]), to_s($msg))
    end

    $state = @instance.state
    $current_instance_type = @instance.instance_type().name
    $started_condition = "/^(stranded|stranded in booting|error|operational|running)$/"
    if $current_instance_type == $item["instance_type"]
      # Instance is still the original size, just make sure it's running
      if $state =~ $started_condition
        # instance is running nothing to do
      else
        # instance is not running, start it
        call start_instance(@instance, @cloud, $item) retrieve @instance
      end
    else
      # Instance is the new size, roll back
      call sys_log('Instance Resizing', $item['name'])
      call stop_instance(@instance, @cloud, $item) retrieve @instance

      @instance = first(@cloud.instances(filter: ['resource_uid=='+$item['resource_uid']]))
      @new_instance_type = first(@cloud.instance_types(filter: ["name=="+$item["instance_type"]]))
      @instance.update(instance: { instance_type_href: @new_instance_type.href })

      call sys_log('Instance Resized', @new_instance_type.name)
      call start_instance(@instance, @cloud, $item) retrieve @instance
    end
  end
  $_error_behavior = "skip"
end

define stop_instance(@instance, @cloud, $item) return @instance do
  task_label("Stopping instance " + $item['name'])
  @instance.stop()
  task_label("Sleeping until instance stopped " + $item['name'])
  $wake_condition = "/^(stopped|terminated|inactive|error|provisioned)$/"
  $state = ''
  while $state !~ $wake_condition do
    sub on_error: retry, timeout: 20m, on_timeout: skip do
      # find the resource by resource_uid because the href may have changed after resize.
      @instance = first(@cloud.instances(filter: ['resource_uid=='+$item['resource_uid']]))
      call sys_log('Waiting for instance stop state: ' + @instance.name,to_s(to_object(@instance)))
      $state = @instance.state
      call sys_log('Instance stop state',$state)
    end
  end
  task_label("Instance Stopped " + $item['name'])
  call sys_log('Instance Stopped', $item['name'])
end

define start_instance(@instance, @cloud, $item) return @instance do
  task_label("Starting instance " + $item['name'])
  @instance.start()
  $wake_condition = "/^(stranded|stranded in booting|error|operational|running)$/"
  $state = ''
  task_label("Sleeping until instance started " + @next_instance.name)
  while $state !~ $wake_condition do
    sub on_error: retry, timeout: 20m, on_timeout: skip do
      # find the resource by resource_uid because the href may have changed after resize.
      @instance = first(@cloud.instances(filter: ['resource_uid=='+$item['resource_uid']]))
      call sys_log('waiting for instance start state', to_s(to_object(@instance)))
      $state = @instance.state
      call sys_log('Instance start state', $state)
    end
  end
  task_label("Instance Started " + $item['name'])
  call sys_log('Instance Started', $item['name'])
end

# remove the cooldown tag if the $param_cooldown_days has exceeded
define delete_cooldown_tag($data,$param_cooldown_days) do
  foreach $item in $data['cooldown_instances'] do
    @cloud = rs_cm.get(href: $item['cloud_href'])
    # find the resource by resource_uid because the href may have changed after resize.
    @instance = first(@cloud.instances(filter: ['resource_uid=='+$item['resource_uid'] ]))
    $cooldown_tag = tag_value(@instance,'rs_downsize:cooldown')
    call sys_log('cooldown_tag',$cooldown_tag)
    $cooldown_time = to_d($cooldown_tag)
    call sys_log('cooldown_time',to_s($cooldown_time))
    # if the cooldown_time has passed delete the cooldown tag
    if ($cooldown_time - now()) / 86400 >= $param_cooldown_days
      rs_cm.tags.multi_delete(resource_hrefs: [@instance.href], tags: 'rs_downsize:cooldown')
      call sys_log('deleted cooldown tag',$cooldown_value)
    end

  end
end

# logging to the Accounts Audit Entries
define sys_log($subject, $detail) do
  rs_cm.audit_entries.create(
    notify: "None",
    audit_entry: {
      auditee_href: @@account,
      summary: "Downsize Instance: "+ $subject,
      detail: $detail
    }
  )
end

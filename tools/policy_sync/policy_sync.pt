name "Policy Template Synchronization"
rs_pt_ver 20180301
type "policy"
short_description "This Policy Template can be used to synchronize (upload, overwrite, or alert) policy templates in your account from GitHub. See the [README](https://github.com/flexera-public/policy_templates/tree/master/tools/catalog/policy_sync_publish/) and [docs.flexera.com/flexera/EN/Automation](https://docs.flexera.com/flexera/EN/Automation/AutomationGS.htm) to learn more."
long_description ""
severity "low"
category "Operational"
default_frequency "15 minutes"
info(
  version: "3.0.0",
  provider: "Flexera",
  service: "Policy Engine",
  policy_set: "",
  publish: "false"
)

###############################################################################
# Parameters
###############################################################################

parameter "param_email" do
  type "list"
  category "Policy Settings"
  label "Email Addresses"
  description "Email addresses of the recipients you wish to notify"
  default []
end

parameter "param_github_org" do
  type "string"
  category "Policy Settings"
  label "GitHub Organization Name"
  description "Name of the GitHub organization containing the policy repository"
  default "flexera-public"
end

parameter "param_github_repo" do
  type "string"
  category "Policy Settings"
  label "GitHub Repository Name"
  description "Name of the policy repository on GitHub"
  default "policy_templates"
end

parameter "param_github_branch" do
  type "string"
  category "Policy Settings"
  label "GitHub Branch Name"
  description "Name of the Github branch to pull the active policy JSON file from"
  default "master"
end

parameter "param_github_active_list_path" do
  type "string"
  category "Policy Settings"
  label "Active Policy JSON"
  description "Path to the active policy list JSON file"
  default "data/active_policy_list/active_policy_list.json"
end

parameter "param_automatic_action" do
  type "list"
  label "Automatic Actions"
  description "When this value is set, this policy will automatically take the selected action(s)"
  allowed_values ["Publish New Policy Templates", "Update Outdated Policy Templates", "Unpublish Defunct Policy Templates"]
  default []
end

###############################################################################
# Authentication
###############################################################################

credentials "auth_flexera" do
  schemes "oauth2"
  label "flexera"
  description "Select Flexera One OAuth2 credentials"
  tags "provider=flexera"
end

###############################################################################
# Datasources & Scripts
###############################################################################

# Get applied policy metadata for use later
datasource "ds_applied_policy" do
  request do
    auth $auth_flexera
    host rs_governance_host
    path join(["/api/governance/projects/", rs_project_id, "/applied_policies/", policy_id])
    header "Api-Version", "1.0"
  end
end

datasource "ds_active_policy_list" do
  request do
    verb "GET"
    host "raw.githubusercontent.com"
    path join([$param_github_org, "/", $param_github_repo, "/", $param_github_branch, "/", $param_github_active_list_path])
    header "User-Agent", "RS Policies"
  end
  result do
    collect jmes_path(response, "policies") do
      field "name", jmes_path(col_item, "name")
      field "description", jmes_path(col_item, "description")
      field "file_name", jmes_path(col_item, "file_name")
      field "version", jmes_path(col_item, "version")
      field "change_log", jmes_path(col_item, "change_log")
      field "updated_at", jmes_path(col_item, "updated_at")
    end
  end
end

datasource "ds_current_policy_template_list" do
  request do
    auth $auth_flexera
    verb "GET"
    host rs_governance_host
    path join(["/api/governance/projects/", rs_project_id, "/policy_templates"])
    query "view", "extended"
    header "Api-Version", "1.0"
  end
  result do
    collect jmes_path(response, "items") do
      field "id", jmes_path(col_item, "id")
      field "name", jmes_path(col_item, "name")
      field "href", jmes_path(col_item, "href")
      field "short_description", jmes_path(col_item, "short_description")
      field "info", jmes_path(col_item, "info")
      field "updated_at", jmes_path(col_item, "updated_at")
    end
  end
end

datasource "ds_new_templates" do
  run_script $js_new_templates, $ds_active_policy_list, $ds_current_policy_template_list, $ds_applied_policy, $param_github_org, $param_github_repo, $param_github_branch
end

script "js_new_templates", type: "javascript" do
  parameters "ds_active_policy_list", "ds_current_policy_template_list", "ds_applied_policy", "param_github_org", "param_github_repo", "param_github_branch"
  result "result"
  code <<-EOS
  current_names = _.pluck(ds_current_policy_template_list, "name")

  new_templates = _.reject(ds_active_policy_list, function(template) {
    return _.contains(current_names, template["name"])
  })

  result = _.map(new_templates, function(template) {
    file_path = ["", param_github_org, param_github_repo, param_github_branch, template["file_name"]].join("/")

    return {
      id: template['name'],
      name: template['name'],
      description: template['description'],
      file_name: template['file_name'],
      version: template['version'],
      change_log: template['change_log'],
      updated_at: new Date(template['updated_at']).toISOString(),
      policy_name: ds_applied_policy['name'],
      file_path: file_path
    }
  })
EOS
end

datasource "ds_updated_templates" do
  run_script $js_updated_templates, $ds_active_policy_list, $ds_current_policy_template_list, $ds_applied_policy, $param_github_org, $param_github_repo, $param_github_branch
end

script "js_updated_templates", type: "javascript" do
  parameters "ds_active_policy_list", "ds_current_policy_template_list", "ds_applied_policy", "param_github_org", "param_github_repo", "param_github_branch"
  result "result"
  code <<-EOS
  current_policy_object = {}

  _.each(ds_current_policy_template_list, function(template) {
    current_policy_object[template['name']] = template
  })

  updated_templates = _.filter(ds_active_policy_list, function(template) {
    updated_template = false
    catalog_template = current_policy_object[template['name']]

    if (current_policy_object[template['name']] != undefined) {
      catalog_date = new Date(catalog_template['updated_at'])
      github_date = new Date(template['updated_at'])
      if (github_date > catalog_date) { updated_template = true }
    }

    return updated_template
  })

  result = _.map(updated_templates, function(template) {
    catalog_template = current_policy_object[template['name']]
    file_path = ["", param_github_org, param_github_repo, param_github_branch, template["file_name"]].join("/")

    return {
      id: template['name'],
      description: template['description'],
      file_name: template['file_name'],
      version: template['version'],
      change_log: template['change_log'],
      updated_at: new Date(template['updated_at']).toISOString(),
      catalog_updated_at: new Date(catalog_template['updated_at']).toISOString(),
      href: catalog_template['href'],
      policy_name: ds_applied_policy['name'],
      file_path: file_path
    }
  })
EOS
end

datasource "ds_published_template_list" do
  request do
    auth $auth_flexera
    verb "GET"
    host rs_governance_host
    path join(["/api/governance/orgs/", rs_org_id, "/published_templates"])
    query "view", "extended"
    header "Api-Version", "1.0"
  end
  result do
    collect jmes_path(response, "items") do
      field "id", jmes_path(col_item, "id")
      field "name", jmes_path(col_item, "name")
      field "href", jmes_path(col_item, "href")
      field "short_description", jmes_path(col_item, "short_description")
      field "info", jmes_path(col_item, "info")
    end
  end
end

datasource "ds_defunct_templates" do
  run_script $js_defunct_templates, $ds_active_policy_list, $ds_published_template_list, $ds_applied_policy
end

script "js_defunct_templates", type: "javascript" do
  parameters "ds_active_policy_list", "ds_published_template_list"
  result "result"
  code <<-EOS
  active_names = _.pluck(ds_active_policy_list, "name")

  defunct_templates = _.reject(ds_published_template_list, function(template) {
    return _.contains(active_names, template["name"])
  })

  result = _.map(defunct_templates, function(template) {
    return {
      id: template['id'],
      name: template['name'],
      href: template['href'],
      description: template['short_description'],
      policy_name: ds_applied_policy['name']
    }
  })
EOS
end

###############################################################################
# Policy
###############################################################################

policy "pol_templates_to_update" do
  validate_each $ds_new_templates do
    summary_template "{{ with index data 0 }}{{ .policy_name }}{{ end }}: {{ len data }} New Policy Templates To Publish"
    check eq(val(item, "id"), "")
    escalate $esc_email
    escalate $esc_publish_new_templates
    export do
      resource_level true
      field "name" do
        label "Name"
      end
      field "description" do
        label "Description"
      end
      field "version" do
        label "Version"
      end
      field "file_name" do
        label "File Name"
      end
      field "updated_at" do
        label "Updated At"
      end
      field "file_path" do
        label "Github HREF"
      end
      field "id" do
        label "ID"
      end
    end
  end
  validate_each $ds_updated_templates do
    summary_template "{{ with index data 0 }}{{ .policy_name }}{{ end }}: {{ len data }} Published Policy Templates To Update"
    check eq(val(item, "id"), "")
    escalate $esc_email
    escalate $esc_update_existing_templates
    export do
      resource_level true
      field "name" do
        label "Name"
      end
      field "description" do
        label "Description"
      end
      field "version" do
        label "Version"
      end
      field "file_name" do
        label "File Name"
      end
      field "updated_at" do
        label "Updated At"
      end
      field "file_path" do
        label "Github HREF"
      end
      field "catalog_updated_at" do
        label "Catalog Updated At"
      end
      field "href" do
        label "Catalog HREF"
      end
      field "id" do
        label "Catalog ID"
      end
    end
  end
  validate_each $ds_defunct_templates do
    summary_template "{{ with index data 0 }}{{ .policy_name }}{{ end }}: {{ len data }} Policy Templates To Unpublish"
    check eq(val(item, "id"), "")
    escalate $esc_email
    escalate $esc_unpublish_templates
    export do
      resource_level true
      field "name" do
        label "Name"
      end
      field "description" do
        label "Description"
      end
      field "id" do
        label "ID"
      end
      field "href" do
        label "HREF"
      end
    end
  end
end

###############################################################################
# Escalations
###############################################################################

escalation "esc_email" do
  automatic true
  label "Send Email"
  description "Send incident email"
  email $param_email
end

escalation "esc_publish_new_templates" do
  automatic contains($param_automatic_action, "Publish New Policy Templates")
  label "Publish New Policy Templates"
  description "Approval to publish all selected new policy templates"
  run "publish_new_templates", data, rs_governance_host, rs_project_id
end

escalation "esc_update_templates" do
  automatic contains($param_automatic_action, "Update Outdated Policy Templates")
  label "Update Outdated Policy Templates"
  description "Approval to update all selected policy templates"
  run "update_existing_templates", data, rs_governance_host, rs_project_id
end

escalation "esc_unpublish_templates" do
  automatic contains($param_automatic_action, "Unpublish Defunct Policy Templates")
  label "Unpublish Defunct Policy Templates"
  description "Approval to unpublish all selected policy templates"
  run "unpublish_templates", data, rs_governance_host
end

###############################################################################
# Cloud Workflow
###############################################################################

define publish_new_templates($data, $rs_governance_host, $rs_project_id) return $all_responses do
  $$all_responses = []

  foreach $template in $data do
    sub on_error: handle_error() do
      call get_template_source($template) retrieve $response, $template_source
      call upload_template($template, $template_source, $rs_governance_host, $rs_project_id, "post") retrieve $response, $template_href
      call publish_template($template, $template_href, $rs_governance_host, $rs_project_id, "post") retrieve $response, $template_href
    end
  end

  if inspect($$errors) != "null"
    raise join($$errors, "\n")
  end
end

define update_existing_templates($data, $rs_governance_host) return $all_responses do
  $$all_responses = []

  foreach $template in $data do
    sub on_error: handle_error() do
      call get_template_source($template) retrieve $response, $template_source
      call upload_template($template, $template_source, $rs_governance_host, $rs_project_id, "put") retrieve $response, $template_href
      call publish_template($template, $template_href, $rs_governance_host, $rs_project_id, "put") retrieve $response, $template_href
    end
  end

  if inspect($$errors) != "null"
    raise join($$errors, "\n")
  end
end

define unpublish_templates($data, $rs_governance_host) return $all_responses do
  $$all_responses = []

  foreach $template in $data do
    sub on_error: handle_error() do
      call unpublish_template($template, $rs_governance_host) retrieve $response
    end
  end

  if inspect($$errors) != "null"
    raise join($$errors, "\n")
  end
end

define get_template_source($template) return $response, $template_source do
  $url = "https://raw.githubusercontent.com" + $template["file_path"]
  task_label("GET " + $url)

  $response = http_get(url: $url)

  task_label("GET Github Policy Template response: " + $url + " " + to_json($response))
  $$all_responses << to_json({"req": "GET " + $url, "resp": $response})

  if $response["code"] != 204 && $response["code"] != 202 && $response["code"] != 200
    raise "Unexpected response from GET Github Policy Template: "+ $url + " " + to_json($response)
  else
    task_label("GET Github Policy Template successful: " + $url)
    $template_source = $response["body"]
  end
end

define upload_template($template, $template_source, $rs_governance_host, $rs_project_id, $verb) return $response, $template_href do
  $host = $rs_governance_host
  $href = join(["/api/governance/projects/", $rs_project_id, "/policy_templates"])
  $url = $host + $href
  task_label(upcase($verb) + " " + $url)

  $response = http_request(
    auth: $$auth_flexera,
    verb: $verb,
    https: true,
    host: $host,
    href: $href,
    headers: { "Api-Version": "1.0" },
    body: { "source": $template_source, filename: last(split($template["file_name"], '/')) }
  )

  task_label(upcase($verb) + " Flexera Policy Template response: " + $template_file_name + " " + to_json($response))
  $$all_responses << to_json({"req": upcase($verb) + " " + $url, "resp": $response})

  if $response["code"] != 204 && $response["code"] != 202 && $response["code"] != 200
    raise "Unexpected response from " + upcase($verb) + " Flexera Policy Template: " + $template_file_name + " " + to_json($response)
  else
    task_label(upcase($verb) + " Flexera Policy Template successful: " + $template_file_name)
    $template_href = $response["body"]["href"]
  end
end

define publish_template($template, $template_href, $rs_governance_host, $rs_project_id, $verb) return $response, $template_href do
  $host = $rs_governance_host
  $href = join(["/api/governance/orgs/", $rs_org_id, "/published_templates"])
  $url = $host + $href
  task_label(upcase($verb) + " " + $url)

  $response = http_request(
    auth: $$auth_flexera,
    verb: $verb,
    https: true,
    host: $host,
    href: $href,
    headers: { "Api-Version": "1.0" },
    body: { "template_href": $template_href }
  )

  task_label("POST Flexera Policy Template response: " + $template_href + " " + to_json($response))
  $$all_responses << to_json({"req": upcase($verb) + " " + $url, "resp": $response})

  if $response["code"] != 204 && $response["code"] != 202 && $response["code"] != 200
    raise "Unexpected response from " + upcase($verb) + " Flexera Policy Template: " + $template_href + " " + to_json($response)
  else
    task_label(upcase($verb) + " Flexera Policy Template successful: " + $template_href)
    $template_href = $response["headers"]["Location"]
  end
end

define unpublish_template($template, $rs_governance_host) return $response do
  $host = $rs_governance_host
  $href = $template["href"]
  $url = $host + $href
  task_label("DELETE " + $url)

  $response = http_request(
    auth: $$auth_flexera,
    https: true,
    verb: "delete",
    host: $host,
    href: $href,
    headers: { "Api-Version": "1.0" }
  )

  task_label("DELETE Flexera Policy Template response: " + $template["id"] + " " + to_json($response))
  $$all_responses << to_json({"req": "DELETE " + $url, "resp": $response})

  if $response["code"] != 204 && $response["code"] != 202 && $response["code"] != 200
    raise "Unexpected response from DELETE Flexera Policy Template: "+ $template["id"] + " " + to_json($response)
  else
    task_label("DELETE Flexera Policy Template successful: " + $template["id"])
  end
end

define handle_error() do
  if !$$errors
    $$errors = []
  end
  $$errors << $_error["type"] + ": " + $_error["message"]
  # We check for errors at the end, and raise them all together
  # Skip errors handled by this definition
  $_error_behavior = "skip"
end

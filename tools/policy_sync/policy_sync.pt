name "Policy Template Synchronization"
rs_pt_ver 20180301
type "policy"
short_description "A policy to manage policy template. See the [README](https://github.com/flexera/policy_templates/tree/master/tools/policy_sync/) and [docs.flexera.com/flexera/EN/Automation](https://docs.flexera.com/flexera/EN/Automation/AutomationGS.htm) to learn more."
severity "low"
category "Operational"
default_frequency "15 minutes"
info(
  version: "1.13",
  publish: "false",
  provider: "Flexera",
  service: "Policy Engine",
  policy_set: "N/A"
)

parameter "param_email" do
  type "list"
  label "Email addresses of the recipients you wish to notify"
  min_length 1
end

parameter "param_branch" do
  type "string"
  label "Branch Name"
  default "master"
  allowed_values "master", "EU_Policies"
end

parameter "param_publish" do
  type "number"
  label "Publish Template"
  description "Publish Template, 0:False, 1:True"
  default 0
  allowed_values 0,1
end

parameter "force_upgrade" do
  type "number"
  label "Force Upgrade"
  description "Force Upgrade, 0:False, 1:True"
  default 0
  allowed_values 0,1
end

credentials "auth_rs" do
  schemes "oauth2"
  label "flexera"
  description "Select FlexeraOne OAuth2 credentials"
  tags "provider=flexera"
end

datasource "ds_active_policy_list" do
  request do
    verb "GET"
    host "s3.amazonaws.com"
    path "/rs-policysync-tool/active-policy-list.json"
    header "User-Agent", "RS Policies"
  end
  result do
    collect jmes_path(response,"policies") do
      field "name", jmes_path(col_item, "name")
      field "file_name", jmes_path(col_item, "file_name")
      field "version", jmes_path(col_item, "version")
      field "change_log", jmes_path(col_item,"change_log")
    end
  end
end

datasource "ds_current_policy_template_list" do
  request do
    auth $auth_rs
    verb "GET"
    host rs_governance_host
    path join(["/api/governance/projects/",rs_project_id,"/policy_templates"])
    header "Api-Version", "1.0"
    query "view", "extended"
  end
  result do
    collect jmes_path(response,"items") do
      field "id", jmes_path(col_item, "id")
      field "name", jmes_path(col_item, "name")
      field "long_description", jmes_path(col_item, "long_description")
      field "info", jmes_path(col_item, "info")
    end
  end
end

datasource "ds_combined_policy_list" do
  run_script $js_combine_policy_lists, $ds_active_policy_list, $ds_current_policy_template_list, $force_upgrade, $param_branch
end

script "js_combine_policy_lists", type: "javascript" do
  parameters "active_policy_list", "current_policy_list", "force_upgrade", "param_branch"
  result "policy_list"
  code <<-EOS
  var policy_list = [];
  var old_policy_list = {};
  var github_raw_url = 'https://raw.githubusercontent.com/flexera-public/policy_templates/' + param_branch + '/';

  // create a map of published templates
  for (var index = 0; index < current_policy_list.length; index++) {
    var current_policy = current_policy_list[index];
    old_policy_list[current_policy.name] = current_policy;
  }

  // loop through active policies from s3 json file
  for ( var i = 0; i < active_policy_list.length; i++) {
    var active_policy = active_policy_list[i]
    // map catalog policy with json list
    var account_policy_template = old_policy_list[active_policy.name]

    if (account_policy_template){

      var account_version = "0.0"
      var policy_id = account_policy_template.id

      if ( account_policy_template.info ) {
        account_version = account_policy_template.info.version
      }

      if ( account_version == "0.0" ) {
        var account_version = account_policy_template.long_description
        if ( account_version.search(/Version/i) != -1 ) {
          var version_str = account_version.split(' ')
          var account_version = version_str[version_str.length -1]
        }
      }
    } else {
      var policy_id = 0
      var account_version = "0.0"
    }

    var a_version = account_version.toString().split('.')
    var r_version = active_policy.version.toString().split('.')

    var version_upgradeable = false
    curr_major_version = parseInt(a_version[0])
    curr_minor_version = parseInt(a_version[1])
    new_major_version = parseInt(r_version[0])
    new_minor_version = parseInt(r_version[1])

    if (curr_major_version == new_major_version ) {
      if (curr_minor_version < new_minor_version) {
          var version_upgradeable = true
      }
    }
    else if (curr_major_version < new_major_version) {
      var version_upgradeable = true
    }
    if (force_upgrade == 1 ) {
      var version_upgradeable = true
    }
    policy_list.push({
      name: active_policy.name,
      file_name: active_policy.file_name,
      repo_version: active_policy.version,
      account_version: account_version,
      account_policy_template: account_policy_template,
      version_upgradeable: version_upgradeable,
      policy_id: policy_id,
      change_log: github_raw_url.concat(active_policy.change_log)
    })
  }
EOS
end

escalation "upload_new_policy_templates" do
  run "upload_template", data, rs_project_id, rs_governance_host, $param_publish, rs_org_id, $param_branch
end

escalation "report_policy_templates_update" do
  email $param_email
end

define upload_template($data, $project_id, $param_governance_host, $param_publish, $rs_org_id, $param_branch) return $url_array, $response_array do
  $url_array = []
  $response_array = []
  foreach $item in $data do
    sub on_error: skip do
      $url = join(["https://raw.githubusercontent.com/flexera-public/policy_templates/", $param_branch, "/",  to_s($item["file_name"])])
      $url_array << $url

      $policy_request = http_get(
        insecure: false,
        url: $url
      )
      log_info(to_s($policy_request))
      if $policy_request["code"] != 200
        raise join([$policy_request["code"], "-", $policy_request["body"]])
      end
      $policy_source = $policy_request["body"]
      $file_name = last(split($item["file_name"],'/'))

      $create_response = http_request(
        verb: "post",
        https: true,
        auth: $$auth_rs,
        host: $param_governance_host,
        href: join(["/api/governance/projects/",$project_id,"/policy_templates"]),
        headers: { "Api-Version": "1.0" },
        body: { "source": $policy_source, filename: $file_name }
      )
      log_info(to_s($create_response))
      $response_array << $create_response
      $policy_template_href = ""
      $policy_template_name = ""
      if $create_response["code"] != 409
        $policy_template_name = $create_response["body"]["name"]
        $policy_template_href = $create_response["body"]["href"]
      end
      if $create_response["code"] == 409
        $update_response = http_request(
          verb: "put",
          https: true,
          auth: $$auth_rs,
          host: $param_governance_host,
          href: $create_response["headers"]["Location"],
          headers: { "Api-Version": "1.0" },
          body: { "source": $policy_source, filename: $file_name }
        )
        log_info(to_s($update_response))
        $response_array << $update_response
        $policy_template_href = $update_response["body"]["href"]
        $policy_template_name = $update_response["body"]["name"]
      end
      if ( $param_publish == 1 ) && ( $item["name"] != "Policy Template Synchronization" )
        $publish_response = http_request(
          verb: "post",
          https: true,
          auth: $$auth_rs,
          host: $param_governance_host,
          href: join(["/api/governance/orgs/",$rs_org_id,"/published_templates"]),
          headers: { "Api-Version": "1.0" },
          body: { "template_href": $policy_template_href }
        )
        log_info(to_s($publish_response))
        $response_array << $publish_response
        if $publish_response["code"] == 409
          $upublish_response = http_request(
            verb: "put",
            https: true,
            auth: $$auth_rs,
            host: $param_governance_host,
            href: $publish_response["headers"]["Location"],
            headers: { "Api-Version": "1.0" },
            body: { "template_href": $policy_template_href }
          )
          $response_array << $upublish_response
        end
      end
    end
  end
end

policy "upload_policy_templates" do
  validate_each $ds_combined_policy_list do
    summary_template "{{ rs_project_name }} (Account ID: {{ rs_project_id }}): {{ len data }} Policy Templates Updated"
    detail_template <<-EOS

# Policy Templates Updated

| Name | File Name | Repo Version | Published Version | Version Upgradeable | Policy ID | ChangeLog |
| ---- | --------- | ------------ | ---------------- | ------------------ | --------- | --------- |
{{ range data -}}
| {{ .name }} | {{.file_name}} | {{.repo_version}} | {{.account_version}} | {{.version_upgradeable}} | {{.policy_id}} | {{ .change_log }} |
{{ end -}}
EOS

    escalate $report_policy_templates_update
    escalate $upload_new_policy_templates
    check logic_not(val(item, "version_upgradeable"))
  end
end

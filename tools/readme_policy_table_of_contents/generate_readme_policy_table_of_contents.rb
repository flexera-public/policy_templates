require 'uri'
require 'json'
require 'fileutils'

# Get the list of policy templates and organize them by category, provider, and service
# The policy template list is generated by the policy template generator
pt_list = JSON.parse(File.read("data/active_policy_list/active_policy_list.json"))["policies"]
filtered_pt_list = pt_list.reject { |pt| pt["name"].start_with?("Meta Parent: ") }

categories = filtered_pt_list.map { |item| item["category"] }.select { |item| item && !item.empty? }.uniq.sort
providers = filtered_pt_list.map { |item| item["provider"] }.select { |item| item && !item.empty? }.uniq.sort
services = filtered_pt_list.map { |item| item["service"] }.select { |item| item && !item.empty? }.uniq.sort

providers << "N/A" unless providers.include?("N/A")
services << "N/A" unless services.include?("N/A")

rec_pt_table = {}
other_pt_table = {}

providers.each do |provider|
  rec_pt_table[provider] = {}

  services.each do |service|
    rec_pt_table[provider][service] = []
  end
end

categories.each do |category|
  other_pt_table[category] = {}

  providers.each do |provider|
    other_pt_table[category][provider] = {}

    services.each do |service|
      other_pt_table[category][provider][service] = []
    end
  end
end

filtered_pt_list.each do |pt|
  category = "N/A"
  provider = "N/A"
  service = "N/A"

  category = pt["category"] if pt["category"] && pt["category"].length > 0
  provider = pt["provider"] if pt["provider"] && pt["provider"].length > 0
  service = pt["service"] if pt["service"] && pt["service"].length > 0

  if pt["recommendation_type"].nil? || pt["recommendation_type"].empty?
    other_pt_table[category][provider][service] << pt
  else
    rec_pt_table[provider][service] << pt
  end
end

# Construct the output
readme_string = File.read("tools/readme_policy_table_of_contents/HEADER.md")
readme_string += "\n"
readme_string += "- [Optimization](#policy-templates-for-optimization)\n"

categories.each do |category|
  readme_string += "- [#{category}](#policy-templates-for-#{category.downcase.gsub(" ","-")})\n"
end

readme_string += "\n"
readme_string += "### Policy Templates for Optimization\n"
readme_string += "\n"
readme_string += "These templates can generate savings estimates for your environment.\n"
readme_string += "\n"

providers.each do |provider|
  policies_found = false

  services.each do |service|
    policies_found = true if rec_pt_table[provider][service].length > 0
  end

  next unless policies_found

  readme_string += "#### #{provider}\n"
  readme_string += "\n"

  services.each do |service|
    next unless rec_pt_table[provider][service].length > 0

    readme_string += "- #{service}\n"
    readme_string += "\n"

    rec_pt_table[provider][service].each do |pt|
      readme_string += "  - [#{pt["name"]}](./#{pt["readme"].delete_suffix("/README.md")})\n"
    end

    readme_string += "\n"
  end
end

categories.each do |category|
  readme_string += "### Policy Templates for #{category}\n"
  readme_string += "\n"

  providers.each do |provider|
    policies_found = false

    services.each do |service|
      policies_found = true if other_pt_table[category][provider][service].length > 0
    end

    next unless policies_found

    readme_string += "#### #{provider}\n"
    readme_string += "\n"

    services.each do |service|
      next unless other_pt_table[category][provider][service].length > 0

      readme_string += "- #{service}\n"
      readme_string += "\n"

      other_pt_table[category][provider][service].each do |pt|
        readme_string += "  - [#{pt["name"]}](./#{pt["readme"].delete_suffix("/README.md")})\n"
      end

      readme_string += "\n"
    end
  end
end

readme_string += File.read("tools/readme_policy_table_of_contents/FOOTER.md")

# Store output as local README.md file
File.write("README.md", readme_string)

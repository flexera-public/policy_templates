name "Google Label Cardinality Report"
rs_pt_ver 20180301
type "policy"
short_description "Generates a label cardinality report for Google Projects and Resources. See the [README](https://github.com/flexera-public/policy_templates/tree/master/operational/google/label_cardinality) and [docs.flexera.com/flexera/EN/Automation](https://docs.flexera.com/flexera/EN/Automation/AutomationGS.htm) to learn more."
long_description ""
doc_link "https://github.com/flexera-public/policy_templates/tree/master/operational/google/label_cardinality"
category "Operational"
severity "low"
default_frequency "weekly"
info(
  version: "0.2.4",
  provider: "Google",
  service: "Tags",
  policy_set: "Tag Cardinality",
  hide_skip_approvals: "true"
)

###############################################################################
# Parameters
###############################################################################

parameter "param_email" do
  type "list"
  category "Policy Settings"
  label "Email Addresses"
  description "A list of email addresses to notify."
  default []
end

parameter "param_projects_allow_or_deny" do
  type "string"
  category "Filters"
  label "Allow/Deny Projects"
  description "Allow or Deny entered Projects. See the README for more details."
  allowed_values "Allow", "Deny"
  default "Allow"
end

parameter "param_projects_list" do
  type "list"
  category "Filters"
  label "Allow/Deny Projects List"
  description "A list of allowed or denied Subscription IDs/names. See the README for more details."
  default []
end

parameter "param_projects_ignore_sys" do
  type "string"
  category "Filters"
  label "Ignore System Projects"
  description "Whether or not to automatically ignore system projects e.g. projects whose id begins with 'sys-'"
  allowed_values "Yes", "No"
  default "No"
end

parameter "param_projects_ignore_app" do
  type "string"
  category "Filters"
  label "Ignore Google Apps Script Projects"
  description "Whether or not to automatically ignore Google Apps Script projects e.g. projects whose id begins with 'app-'"
  allowed_values "Yes", "No"
  default "No"
end

###############################################################################
# Authentication
###############################################################################

credentials "auth_google" do
  schemes "oauth2"
  label "Google"
  description "Select the Google Cloud Credential from the list."
  tags "provider=gce"
end

credentials "auth_flexera" do
  schemes "oauth2"
  label "Flexera"
  description "Select Flexera One OAuth2 credentials"
  tags "provider=flexera"
end

###############################################################################
# Pagination
###############################################################################

pagination "pagination_google" do
  get_page_marker do
    body_path "nextPageToken"
  end
  set_page_marker do
    query "pageToken"
  end
end

###############################################################################
# Datasources & Scripts
###############################################################################

# Get region-specific Flexera API endpoints
datasource "ds_flexera_api_hosts" do
  run_script $js_flexera_api_hosts, rs_optima_host
end

script "js_flexera_api_hosts", type: "javascript" do
  parameters "rs_optima_host"
  result "result"
  code <<-EOS
  host_table = {
    "api.optima.flexeraeng.com": {
	    api: "api.flexera.com",
      flexera: "api.flexera.com",
      fsm: "api.fsm.flexeraeng.com",
      grs: "grs-front.iam-us-east-1.flexeraeng.com",
      ui: "app.flexera.com",
      tld: "flexera.com"
    },
    "api.optima-eu.flexeraeng.com": {
	    api: "api.flexera.eu",
      flexera: "api.flexera.eu",
      fsm: "api.fsm-eu.flexeraeng.com",
      grs: "grs-front.eu-central-1.iam-eu.flexeraeng.com",
      ui: "app.flexera.eu",
      tld: "flexera.eu"
    },
    "api.optima-apac.flexeraeng.com": {
	    api: "api.flexera.au",
      flexera: "api.flexera.au",
      fsm: "api.fsm-apac.flexeraeng.com",
      grs: "grs-front.ap-southeast-2.iam-apac.flexeraeng.com",
      ui: "app.flexera.au",
      tld: "flexera.au"
    }
  }

  result = host_table[rs_optima_host]
EOS
end

# Get applied policy metadata for use later
datasource "ds_applied_policy" do
  request do
    auth $auth_flexera
    host val($ds_flexera_api_hosts, "flexera")
    path join(["/policy/v1/orgs/", rs_org_id, "/projects/", rs_project_id, "/applied-policies", switch(policy_id, join(["/", policy_id]), "")])
  end
end

datasource "ds_google_projects" do
  request do
    auth $auth_google
    pagination $pagination_google
    host "cloudresourcemanager.googleapis.com"
    path "/v1/projects/"
    query "filter", "(lifecycleState:ACTIVE)"
    # Header X-Meta-Flexera has no affect on datasource query, but is required for Meta Policies
    # Forces `ds_is_deleted` datasource to run first during policy execution
    header "Meta-Flexera", val($ds_is_deleted, "path")
  end
  result do
    encoding "json"
    collect jmes_path(response, "projects[*]") do
      field "number", jmes_path(col_item, "projectNumber")
      field "id", jmes_path(col_item, "projectId")
      field "name", jmes_path(col_item, "name")
      field "labels", jmes_path(col_item, "labels")
    end
  end
end

datasource "ds_google_projects_filtered" do
  run_script $js_google_projects_filtered, $ds_google_projects, $param_projects_allow_or_deny, $param_projects_list, $param_projects_ignore_sys, $param_projects_ignore_app
end

script "js_google_projects_filtered", type: "javascript" do
  parameters "ds_google_projects", "param_projects_allow_or_deny", "param_projects_list", "param_projects_ignore_sys", "param_projects_ignore_app"
  result "result"
  code <<-EOS
  if (param_projects_list.length > 0) {
    filtered = _.filter(ds_google_projects, function(project) {
      include_project = _.contains(param_projects_list, project['id']) || _.contains(param_projects_list, project['name']) || _.contains(param_projects_list, project['number'])

      if (param_projects_allow_or_deny == "Deny") {
        include_project = !include_project
      }

      return include_project
    })
  } else {
    filtered = ds_google_projects
  }

  result = _.reject(filtered, function(project) {
    return (project['id'].substring(0, 4) == "sys-" && param_projects_ignore_sys == "Yes") || (project['id'].substring(0, 4) == "app-" && param_projects_ignore_app == "Yes")
  })
EOS
end

datasource "ds_google_global_compute_resource_types" do
  run_script $js_google_global_compute_resource_types, $ds_google_projects_filtered
end

script "js_google_global_compute_resource_types", type: "javascript" do
  parameters "ds_google_projects_filtered"
  result "result"
  code <<-EOS
  types = [
    "images",
    "snapshots"
  ]

  result = []

  _.each(ds_google_projects_filtered, function(project) {
    _.each(types, function(type) {
      result.push({
        id: project['id'],
        name: project['name'],
        number: project['number'],
        type: type
      })
    })
  })
EOS
end

datasource "ds_global_google_compute_resources" do
  iterate $ds_google_global_compute_resource_types
  request do
    auth $auth_google
    pagination $pagination_google
    host "compute.googleapis.com"
    path join(["/compute/v1/projects/", val(iter_item, "id"), "/global/", val(iter_item, "type")])
    ignore_status [403, 404]
  end
  result do
    encoding "json"
    collect jmes_path(response, "items[*]") do
      field "id", jmes_path(col_item, "id")
      field "name", jmes_path(col_item, "name")
      field "labels", jmes_path(col_item, "labels")
      field "selfLink", jmes_path(col_item, "selfLink")
      field "type", val(iter_item, "type")
      field "projectId", val(iter_item, "id")
      field "projectName", val(iter_item, "name")
      field "projectNumber", val(iter_item, "number")
    end
  end
end

datasource "ds_google_aggregated_compute_resource_types" do
  run_script $js_google_aggregated_compute_resource_types, $ds_google_projects_filtered
end

script "js_google_aggregated_compute_resource_types", type: "javascript" do
  parameters "ds_google_projects_filtered"
  result "result"
  code <<-'EOS'
  types = [
    "addresses",
    "disks",
    "instances",
    "storagePools",
    "vpnGateways",
    "vpnTunnels"
  ]

  result = []

  _.each(ds_google_projects_filtered, function(project) {
    _.each(types, function(type) {
      result.push({
        id: project['id'],
        name: project['name'],
        number: project['number'],
        type: type
      })
    })
  })
EOS
end

datasource "ds_aggregated_google_compute_resources" do
  iterate $ds_google_aggregated_compute_resource_types
  request do
    auth $auth_google
    host "compute.googleapis.com"
    path join(["/compute/v1/projects/", val(iter_item, 'id'), "/aggregated/", val(iter_item, 'type')])
    header "User-Agent", "RS Policies"
    header "Content-Type", "application/json"
    ignore_status [403, 404]
  end
  result do
    encoding "json"
    field "resources", val(response, "items")
    field "type", val(iter_item, "type")
    field "projectId", val(iter_item, "id")
    field "projectName", val(iter_item, "name")
    field "projectNumber", val(iter_item, "number")
  end
end

datasource "ds_google_compute_resources" do
  run_script $js_google_compute_resources, $ds_aggregated_google_compute_resources, $ds_global_google_compute_resources
end

script "js_google_compute_resources", type: "javascript" do
  parameters "aggregated_resources", "global_resources"
  result "result"
  code <<-EOS
  result = []

  _.each(aggregated_resources, function(response) {
    _.each(_.keys(response['resources']), function(key) {
      if (typeof(response['resources'][key][response['type']]) == 'object') {
        result = result.concat(_.map(response['resources'][key][response['type']], function(resource) {
          return {
            id: resource['id'],
            name: resource['name'],
            labels: resource['labels'],
            selfLink: resource['selfLink'],
            type: response['type'],
            projectId: response['projectId'],
            projectName: response['projectName'],
            projectNumber: response['projectNumber']
          }
        }))
      }
    })
  })

  result = result.concat(global_resources)
EOS
end

datasource "ds_google_sqladmin_resources" do
  iterate $ds_google_projects_filtered
  request do
    auth $auth_google
    pagination $pagination_google
    host "sqladmin.googleapis.com"
    path join(["/v1/projects/", val(iter_item, "id"), "/instances"])
    header "User-Agent", "RS Policies"
    header "Content-Type", "application/json"
    ignore_status [403, 404]
  end
  result do
    encoding "json"
    collect jmes_path(response, "items[*]") do
      field "id", jmes_path(col_item, "name")
      field "name", jmes_path(col_item, "name")
      field "labels", jmes_path(col_item, "settings.userLabels")
      field "selfLink", jmes_path(col_item, "selfLink")
      field "type", "sqladmin.instances"
      field "projectId", val(iter_item, "id")
      field "projectName", val(iter_item, "name")
      field "projectNumber", val(iter_item, "number")
    end
  end
end

datasource "ds_google_storage_resources" do
  iterate $ds_google_projects_filtered
  request do
    auth $auth_google
    pagination $pagination_google
    host "storage.googleapis.com"
    path "/storage/v1/b"
    query "project", val(iter_item, "id")
    ignore_status [403, 404]
  end
  result do
    encoding "json"
    collect jmes_path(response, "items[*]") do
      field "id", jmes_path(col_item, "id")
      field "name", jmes_path(col_item, "name")
      field "labels", jmes_path(col_item, "labels")
      field "selfLink", jmes_path(col_item, "selfLink")
      field "type", "storage.buckets"
      field "projectId", val(iter_item, "id")
      field "projectName", val(iter_item, "name")
      field "projectNumber", val(iter_item, "number")
    end
  end
end

datasource "ds_google_bigquery_datasets" do
  iterate $ds_google_projects_filtered
  request do
    auth $auth_google
    pagination $pagination_google
    host "bigquery.googleapis.com"
    path join(["/bigquery/v2/projects/", val(iter_item, "id"), "/datasets"])
    ignore_status [403, 404]
  end
  result do
    encoding "json"
    collect jmes_path(response, "datasets[*]") do
      field "id", get(1, split(jmes_path(col_item, "id"), ':'))
      field "name", get(1, split(jmes_path(col_item, "id"), ':'))
      field "labels", jmes_path(col_item, "labels")
      field "selfLink", join(["/bigquery/v2/projects/", val(iter_item, "id"), "/datasets/", get(1, split(jmes_path(col_item, "id"), ':'))])
      field "type", "bigquery.datasets"
      field "projectId", val(iter_item, "id")
      field "projectName", val(iter_item, "name")
      field "projectNumber", val(iter_item, "number")
    end
  end
end

datasource "ds_google_bigquery_tables" do
  iterate $ds_google_bigquery_datasets
  request do
    auth $auth_google
    pagination $pagination_google
    host "bigquery.googleapis.com"
    path join(["/bigquery/v2/projects/", val(iter_item, "projectId"), "/datasets/", val(iter_item, "id"), "/tables"])
    ignore_status [403, 404]
  end
  result do
    encoding "json"
    collect jmes_path(response, "datasets[*]") do
      field "id", jmes_path(col_item, "id")
      field "name", jmes_path(col_item, "id")
      field "labels", jmes_path(col_item, "labels")
      field "selfLink", join(["/bigquery/v2/projects/", val(iter_item, "projectId"), "/datasets/", val(iter_item, "id"), "/tables/", jmes_path(col_item, "id")])
      field "type", "bigquery.tables"
      field "datasetId", val(iter_item, "id")
      field "projectId", val(iter_item, "projectId")
      field "projectName", val(iter_item, "projectName")
      field "projectNumber", val(iter_item, "projectNumber")
    end
  end
end

datasource "ds_google_resources_combined" do
  run_script $js_google_resources_combined, $ds_google_compute_resources, $ds_google_sqladmin_resources, $ds_google_storage_resources, $ds_google_bigquery_datasets, $ds_google_bigquery_tables
end

script "js_google_resources_combined", type: "javascript" do
  parameters "ds_google_compute_resources", "ds_google_sqladmin_resources", "ds_google_storage_resources", "ds_google_bigquery_datasets", "ds_google_bigquery_tables"
  result "result"
  code <<-EOS
  result = ds_google_compute_resources.concat(ds_google_sqladmin_resources, ds_google_storage_resources, ds_google_bigquery_datasets, ds_google_bigquery_tables)
EOS
end

datasource "ds_google_projects_label_list" do
  run_script $js_label_lister, $ds_google_projects_filtered, $ds_applied_policy, "Project"
end

datasource "ds_google_resources_label_list" do
  run_script $js_label_lister, $ds_google_resources_combined, $ds_applied_policy, "Resource"
end

script "js_label_lister", type: "javascript" do
  parameters "labeled_list", "ds_applied_policy", "label_type"
  result "result"
  code <<-EOS
  labels = {}
  result = []

  _.each(labeled_list, function(item) {
    if (item['labels'] != undefined && item['labels'] != null) {
      _.each(_.keys(item['labels']), function(key) {
        if (labels[key] == undefined || labels[key] == null) { labels[key] = [] }
        labels[key].push(item['labels'][key])
      })
    }
  })

  _.each(_.keys(labels), function(key) {
    result.push({
      type: label_type,
      key: key,
      cardinality: _.uniq(labels[key]).length,
      value_list: _.uniq(labels[key]).join(', '),
      policy_name: ds_applied_policy['name']
    })
  })

  result = _.sortBy(result, 'cardinality').reverse()
EOS
end

datasource "ds_label_report" do
  run_script $js_label_report, $ds_google_projects_label_list, $ds_google_resources_label_list
end

script "js_label_report", type: "javascript" do
  parameters "ds_google_projects_label_list", "ds_google_resources_label_list"
  result "result"
  code <<-EOS
  result = ds_google_projects_label_list.concat(ds_google_resources_label_list)
EOS
end

###############################################################################
# Policy
###############################################################################

policy "pol_google_label_cardinality_report" do
  validate_each $ds_label_report do
    summary_template "{{ with index data 0 }}{{ .policy_name }}{{ end }}: {{ len data }} Google Label Keys Found"
    check logic_or($ds_parent_policy_terminated, eq(val(item, "key"), ""))
    escalate $esc_email
    export do
      resource_level false
      field "type" do
        label "Type"
      end
      field "key" do
        label "Key"
      end
      field "cardinality" do
        label "Cardinality"
      end
      field "value_list" do
        label "Unique Values"
      end
    end
  end
end

###############################################################################
# Escalations
###############################################################################

escalation "esc_email" do
  automatic true
  label "Send Email"
  description "Send incident email"
  email $param_email
end

###############################################################################
# Meta Policy [alpha]
# Not intended to be modified or used by policy developers
###############################################################################

# If the meta_parent_policy_id is not set it will evaluate to an empty string and we will look for the policy itself,
# if it is set we will look for the parent policy.
datasource "ds_get_parent_policy" do
  request do
    auth $auth_flexera
    host val($ds_flexera_api_hosts, "flexera")
    path join(["/policy/v1/orgs/", rs_org_id, "/projects/", rs_project_id, "/applied-policies/", switch(ne(meta_parent_policy_id, ""), meta_parent_policy_id, policy_id) ])
	  ignore_status [404]
  end
  result do
    encoding "json"
    field "id", jmes_path(response, "id")
  end
end

# If the policy was applied by a meta_parent_policy we confirm it exists if it doesn't we confirm we are deleting
# This information is used in two places:
# - determining whether or not we make a delete call
# - determining if we should create an incident (we don't want to create an incident on the run where we terminate)
datasource "ds_parent_policy_terminated" do
  run_script $js_parent_policy_terminated, $ds_get_parent_policy, meta_parent_policy_id
end

script "js_parent_policy_terminated", type: "javascript" do
  parameters "ds_get_parent_policy", "meta_parent_policy_id"
  result "result"
  code <<-'EOS'
  result = meta_parent_policy_id != "" && ds_get_parent_policy["id"] == undefined
EOS
end

# Two potentials ways to set this up:
# - this way and make a unneeded 'get' request when not deleting
# - make the delete request an interate and have it iterate over an empty array when not deleting and an array with one item when deleting
datasource "ds_terminate_self" do
  request do
    run_script $js_make_terminate_request, $ds_parent_policy_terminated, $ds_flexera_api_hosts, policy_id, rs_org_id, rs_project_id
  end
end

script "js_make_terminate_request", type: "javascript" do
  parameters "ds_parent_policy_terminated", "ds_flexera_api_hosts", "policy_id", "rs_org_id", "rs_project_id"
  result "request"
  code <<-EOS
  var request = {
    auth: "auth_flexera",
    host: ds_flexera_api_hosts["flexera"],
    path: [ "/policy/v1/orgs/", rs_org_id, "/projects/", rs_project_id, "/applied-policies", policy_id ? "/"+policy_id : "" ].join(''),
    verb: ds_parent_policy_terminated ? "DELETE" : "GET"
  }
EOS
end

# This is just a way to have the check delete request connect to the farthest leaf from policy.
# We want the delete check to the first thing the policy does to avoid the policy erroring before it can decide whether or not it needs to self terminate
# Example a customer deletes a credential and then terminates the parent policy. We still want the children to self terminate
# The only way I could see this not happening is if the user who applied the parent_meta_policy was offboarded or lost policy access, the policies who are impersonating the user
# would not have access to self-terminate
# It may be useful for the backend to enable a mass terminate at some point for all meta_child_policies associated with an id.
datasource "ds_is_deleted" do
  run_script $js_is_deleted, $ds_terminate_self
end

script "js_is_deleted", type: "javascript" do
  parameters "ds_terminate_self"
  result "result"
  code 'result = { path: "/"}'
end

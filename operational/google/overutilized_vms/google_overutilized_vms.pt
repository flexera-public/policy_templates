name "Google Overutilized VM Instances"
rs_pt_ver 20180301
type "policy"
short_description "This policy template reports overutilized Google VM instances and upsizes them after approval. See the [README](https://github.com/flexera-public/policy_templates/tree/master/operational/google/overutilized_vms) and [docs.flexera.com/flexera/EN/Automation](https://docs.flexera.com/flexera/EN/Automation/AutomationGS.htm) to learn more."
long_description ""
doc_link "https://github.com/flexera-public/policy_templates/tree/master/operational/google/overutilized_vms"
category "Operational"
severity "low"
default_frequency "weekly"
info(
  version: "0.1.2",
  provider: "Google",
  service: "Compute",
  policy_set: "Rightsize Compute Instances",
  hide_skip_approvals: "true"
)

###############################################################################
# Parameters
###############################################################################

parameter "param_email" do
  type "list"
  category "Policy Settings"
  label "Email Addresses"
  description "A list of email addresses to notify."
  default []
end

parameter "param_projects_allow_or_deny" do
  type "string"
  category "Filters"
  label "Allow/Deny Projects"
  description "Allow or Deny entered Projects. See the README for more details."
  allowed_values "Allow", "Deny"
  default "Allow"
end

parameter "param_projects_list" do
  type "list"
  category "Filters"
  label "Allow/Deny Projects List"
  description "A list of allowed or denied Subscription IDs/names. See the README for more details."
  default []
end

parameter "param_projects_ignore_sys" do
  type "string"
  category "Filters"
  label "Ignore System Projects"
  description "Whether or not to automatically ignore system projects e.g. projects whose id begins with 'sys-'"
  allowed_values "Yes", "No"
  default "No"
end

parameter "param_projects_ignore_app" do
  type "string"
  category "Filters"
  label "Ignore Google Apps Script Projects"
  description "Whether or not to automatically ignore Google Apps Script projects e.g. projects whose id begins with 'app-'"
  allowed_values "Yes", "No"
  default "No"
end

parameter "param_regions_allow_or_deny" do
  type "string"
  category "Filters"
  label "Allow/Deny Regions"
  description "Allow or Deny entered regions. See the README for more details."
  allowed_values "Allow", "Deny"
  default "Allow"
end

parameter "param_regions_list" do
  type "list"
  category "Filters"
  label "Allow/Deny Regions List"
  description "A list of allowed or denied regions. See the README for more details."
  default []
end

parameter "param_exclusion_labels" do
  type "list"
  category "Filters"
  label "Exclusion Labels"
  description "Cloud native labels to ignore resources that you don't want to produce recommendations for. Enter the Key name to filter resources with a specific Key, regardless of Value, and enter Key==Value to filter resources with a specific Key:Value pair. Other operators and regex are supported; please see the README for more details."
  default []
end

parameter "param_exclusion_labels_boolean" do
  type "string"
  category "Filters"
  label "Exclusion Labels: Any / All"
  description "Whether to filter instances containing any of the specified labels or only those that contain all of them. Only applicable if more than one value is entered in the 'Exclusion Labels' field."
  allowed_values "Any", "All"
  default "Any"
end

parameter "param_stats_threshold_cpu_value" do
  type "number"
  category "Statistics"
  label "CPU Threshold (%)"
  description "The CPU threshold at which to consider an instance to be overutilized and therefore be flagged for upsizing."
  min_value 0
  max_value 100
  default 80
end

parameter "param_stats_threshold" do
  type "string"
  category "Statistics"
  label "Threshold Statistic"
  description "Statistic to use when determining if an instance is overutilized"
  allowed_values "Average", "Maximum", "p99", "p95", "p90"
  default "Average"
end

parameter "param_stats_lookback" do
  type "number"
  category "Statistics"
  label "Statistic Lookback Period"
  description "How many days back to look at CPU data for instances. This value cannot be set higher than 42 because Google does not retain metrics for longer than 42 days."
  min_value 1
  max_value 42
  default 30
end

parameter "param_automatic_action" do
  type "list"
  category "Actions"
  label "Automatic Actions"
  description "When this value is set, this policy will automatically take the selected action(s)"
  allowed_values [ "Upsize VM Instances" ]
  default []
end

###############################################################################
# Authentication
###############################################################################

credentials "auth_google" do
  schemes "oauth2"
  label "Google"
  description "Select the Google Cloud Credential from the list."
  tags "provider=gce"
end

credentials "auth_flexera" do
  schemes "oauth2"
  label "Flexera"
  description "Select Flexera One OAuth2 credentials"
  tags "provider=flexera"
end

###############################################################################
# Pagination
###############################################################################

pagination "pagination_google" do
  get_page_marker do
    body_path "nextPageToken"
  end
  set_page_marker do
    query "pageToken"
  end
end

###############################################################################
# Datasources & Scripts
###############################################################################

# Get region-specific Flexera API endpoints
datasource "ds_flexera_api_hosts" do
  run_script $js_flexera_api_hosts, rs_optima_host
end

script "js_flexera_api_hosts", type: "javascript" do
  parameters "rs_optima_host"
  result "result"
  code <<-EOS
  host_table = {
    "api.optima.flexeraeng.com": {
	    api: "api.flexera.com",
      flexera: "api.flexera.com",
      fsm: "api.fsm.flexeraeng.com",
      grs: "grs-front.iam-us-east-1.flexeraeng.com",
      ui: "app.flexera.com",
      tld: "flexera.com"
    },
    "api.optima-eu.flexeraeng.com": {
	    api: "api.flexera.eu",
      flexera: "api.flexera.eu",
      fsm: "api.fsm-eu.flexeraeng.com",
      grs: "grs-front.eu-central-1.iam-eu.flexeraeng.com",
      ui: "app.flexera.eu",
      tld: "flexera.eu"
    },
    "api.optima-apac.flexeraeng.com": {
	    api: "api.flexera.au",
      flexera: "api.flexera.au",
      fsm: "api.fsm-apac.flexeraeng.com",
      grs: "grs-front.ap-southeast-2.iam-apac.flexeraeng.com",
      ui: "app.flexera.au",
      tld: "flexera.au"
    }
  }

  result = host_table[rs_optima_host]
EOS
end

# Table to derive region from zone
datasource "ds_zone_to_region" do
  run_script $js_zone_to_region
end

script "js_zone_to_region", type:"javascript" do
  result "result"
  code <<-EOS
  result = {
    "us-east1-b": "us-east1",
    "us-east1-c": "us-east1",
    "us-east1-d": "us-east1",
    "us-east4-c": "us-east4",
    "us-east4-b": "us-east4",
    "us-east4-a": "us-east4",
    "us-central1-c": "us-central1",
    "us-central1-a": "us-central1",
    "us-central1-f": "us-central1",
    "us-central1-b": "us-central1",
    "us-west1-b": "us-west1",
    "us-west1-c": "us-west1",
    "us-west1-a": "us-west1",
    "europe-west4-a": "europe-west4",
    "europe-west4-b": "europe-west4",
    "europe-west4-c": "europe-west4",
    "europe-west1-b": "europe-west1",
    "europe-west1-d": "europe-west1",
    "europe-west1-c": "europe-west1",
    "europe-west3-c": "europe-west3",
    "europe-west3-a": "europe-west3",
    "europe-west3-b": "europe-west3",
    "europe-west2-c": "europe-west2",
    "europe-west2-b": "europe-west2",
    "europe-west2-a": "europe-west2",
    "asia-east1-b": "asia-east1",
    "asia-east1-a": "asia-east1",
    "asia-east1-c": "asia-east1",
    "asia-southeast1-b": "asia-southeast1",
    "asia-southeast1-a": "asia-southeast1",
    "asia-southeast1-c": "asia-southeast1",
    "asia-northeast1-b": "asia-northeast1",
    "asia-northeast1-c": "asia-northeast1",
    "asia-northeast1-a": "asia-northeast1",
    "asia-south1-c": "asia-south1",
    "asia-south1-b": "asia-south1",
    "asia-south1-a": "asia-south1",
    "australia-southeast1-b": "australia-southeast1",
    "australia-southeast1-c": "australia-southeast1",
    "australia-southeast1-a": "australia-southeast1",
    "southamerica-east1-b": "southamerica-east1",
    "southamerica-east1-c": "southamerica-east1",
    "southamerica-east1-a": "southamerica-east1",
    "asia-east2-a": "asia-east2",
    "asia-east2-b": "asia-east2",
    "asia-east2-c": "asia-east2",
    "asia-northeast2-a": "asia-northeast2",
    "asia-northeast2-b": "asia-northeast2",
    "asia-northeast2-c": "asia-northeast2",
    "asia-northeast3-a": "asia-northeast3",
    "asia-northeast3-b": "asia-northeast3",
    "asia-northeast3-c": "asia-northeast3",
    "asia-south2-a": "asia-south2",
    "asia-south2-b": "asia-south2",
    "asia-south2-c": "asia-south2",
    "asia-southeast2-a": "asia-southeast2",
    "asia-southeast2-b": "asia-southeast2",
    "asia-southeast2-c": "asia-southeast2",
    "australia-southeast2-a": "australia-southeast2",
    "australia-southeast2-b": "australia-southeast2",
    "australia-southeast2-c": "australia-southeast2",
    "europe-central2-a": "europe-central2",
    "europe-central2-b": "europe-central2",
    "europe-central2-c": "europe-central2",
    "europe-north1-a": "europe-north1",
    "europe-north1-b": "europe-north1",
    "europe-north1-c": "europe-north1",
    "europe-southwest1-a": "europe-southwest1",
    "europe-southwest1-b": "europe-southwest1",
    "europe-southwest1-c": "europe-southwest1",
    "europe-west6-a": "europe-west6",
    "europe-west6-b": "europe-west6",
    "europe-west6-c": "europe-west6",
    "northamerica-northeast1-a": "northamerica-northeast1",
    "northamerica-northeast1-b": "northamerica-northeast1",
    "northamerica-northeast1-c": "northamerica-northeast1",
    "northamerica-northeast2-a": "northamerica-northeast2",
    "northamerica-northeast2-b": "northamerica-northeast2",
    "northamerica-northeast2-c": "northamerica-northeast2",
    "us-west2-a": "us-west2",
    "us-west2-b": "us-west2",
    "us-west2-c": "us-west2",
    "us-west3-a": "us-west3",
    "us-west3-b": "us-west3",
    "us-west3-c": "us-west3",
    "us-west4-a": "us-west4",
    "us-west4-b": "us-west4",
    "us-west4-c": "us-west4",
    "us-west5-a": "us-west5",
    "us-west5-b": "us-west5",
    "us-west5-c": "us-west5",
    "us-west6-a": "us-west6",
    "us-west6-b": "us-west6",
    "us-west6-c": "us-west6",
    "us-west7-a": "us-west7",
    "us-west7-b": "us-west7",
    "us-west7-c": "us-west7"
  }
EOS
end

# Get applied policy metadata for use later
datasource "ds_applied_policy" do
  request do
    auth $auth_flexera
    host val($ds_flexera_api_hosts, "flexera")
    path join(["/policy/v1/orgs/", rs_org_id, "/projects/", rs_project_id, "/applied-policies", switch(policy_id, join(["/", policy_id]), "")])
  end
end

datasource "ds_google_projects" do
  request do
    auth $auth_google
    pagination $pagination_google
    host "cloudresourcemanager.googleapis.com"
    path "/v1/projects/"
    query "filter", "(lifecycleState:ACTIVE)"
    # Header X-Meta-Flexera has no affect on datasource query, but is required for Meta Policies
    # Forces `ds_is_deleted` datasource to run first during policy execution
    header "Meta-Flexera", val($ds_is_deleted, "path")
  end
  result do
    encoding "json"
    collect jmes_path(response, "projects[*]") do
      field "number", jmes_path(col_item, "projectNumber")
      field "id", jmes_path(col_item, "projectId")
      field "name", jmes_path(col_item, "name")
    end
  end
end

datasource "ds_google_projects_filtered" do
  run_script $js_google_projects_filtered, $ds_google_projects, $param_projects_allow_or_deny, $param_projects_list, $param_projects_ignore_sys, $param_projects_ignore_app
end

script "js_google_projects_filtered", type: "javascript" do
  parameters "ds_google_projects", "param_projects_allow_or_deny", "param_projects_list", "param_projects_ignore_sys", "param_projects_ignore_app"
  result "result"
  code <<-EOS
  if (param_projects_list.length > 0) {
    filtered = _.filter(ds_google_projects, function(project) {
      include_project = _.contains(param_projects_list, project['id']) || _.contains(param_projects_list, project['name']) || _.contains(param_projects_list, project['number'])

      if (param_projects_allow_or_deny == "Deny") {
        include_project = !include_project
      }

      return include_project
    })
  } else {
    filtered = ds_google_projects
  }

  result = _.reject(filtered, function(project) {
    return (project['id'].substring(0, 4) == "sys-" && param_projects_ignore_sys == "Yes") || (project['id'].substring(0, 4) == "app-" && param_projects_ignore_app == "Yes")
  })
EOS
end

datasource "ds_calculated_utilization" do
  iterate $ds_google_projects_filtered
  request do
    run_script $js_calculated_utilization, val(iter_item, "id"), $param_stats_lookback
  end
  result do
    encoding "json"
    collect jmes_path(response, "timeSeriesData[*]") do
      field "resourceName", jmes_path(col_item, "labelValues[3].stringValue")
      field "resourceID", jmes_path(col_item, "labelValues[2].stringValue")
      field "zone", jmes_path(col_item, "labelValues[1].stringValue")
      field "cpuAverage", prod(jmes_path(col_item, "pointData[0].values[0].doubleValue"), 100)
      field "cpuMaximum", prod(jmes_path(col_item, "pointData[0].values[1].doubleValue"), 100)
      field "cpuMinimum", prod(jmes_path(col_item, "pointData[0].values[2].doubleValue"), 100)
      field "cpuP99", prod(jmes_path(col_item, "pointData[0].values[3].doubleValue"), 100)
      field "cpuP95", prod(jmes_path(col_item, "pointData[0].values[4].doubleValue"), 100)
      field "cpuP90", prod(jmes_path(col_item, "pointData[0].values[5].doubleValue"), 100)
      field "projectId", val(iter_item, "id")
      field "projectName", val(iter_item, "name")
      field "projectNumber", val(iter_item, "number")
    end
  end
end

script "js_calculated_utilization", type: "javascript" do
  parameters "projectId", "param_stats_lookback"
  result "request"
  code <<-EOS
  group_by = [
    "group_by sliding(" + param_stats_lookback + "d), .mean",
    "group_by sliding(" + param_stats_lookback + "d), .max",
    "group_by sliding(" + param_stats_lookback + "d), .min",
    "group_by sliding(" + param_stats_lookback + "d), .percentile(99)",
    "group_by sliding(" + param_stats_lookback + "d), .percentile(95)",
    "group_by sliding(" + param_stats_lookback + "d), .percentile(90)"
  ].join(' ; ')

  query = [
    "fetch gce_instance",
    "metric compute.googleapis.com/instance/cpu/utilization",
    "within " + param_stats_lookback + "d",
    "{ " + group_by + " }",
    "join"
  ].join(" | ")

  var request = {
    auth: "auth_google",
    verb: "POST",
    host: "monitoring.googleapis.com",
    path: [ "/v3/projects/", projectId, "/timeSeries:query" ].join(''),
    header: {
      "User-Agent": "RS Policies",
      "Content-Type": "application/json"
    },
    body_fields: { "query": query },
    ignore_status: [ 403, 404 ]
  }
EOS
end

datasource "ds_get_instances" do
  iterate $ds_google_projects_filtered
  request do
    auth $auth_google
    host "compute.googleapis.com"
    path join(["/compute/v1/projects/", val(iter_item, 'id'), "/aggregated/instances"])
    header "User-Agent", "RS Policies"
    header "Content-Type", "application/json"
    ignore_status [403, 404]
  end
  result do
    encoding "json"
    field "instances", jq(response, "[ .items | to_entries | map_values(.value) | map(select(has(\"instances\"))) | .[].instances | .[] | {id,name,selfLink,status,tags,zone,kind,hostname,cpuPlatform,labels,description,machineType} ]")
    field "projectId", val(iter_item, "id")
    field "projectName", val(iter_item, "name")
    field "projectNumber", val(iter_item, "number")
  end
end

datasource "ds_instances" do
  run_script $js_instances, $ds_get_instances, $ds_calculated_utilization, $ds_zone_to_region
end

script "js_instances", type: "javascript" do
  parameters "ds_get_instances", "ds_calculated_utilization", "ds_zone_to_region"
  result "result"
  code <<-EOS
  stats_by_resource = {}

  _.each(ds_calculated_utilization, function(item) {
    id = item['resourceID'].toLowerCase()
    stats_by_resource[id] = item
  })

  result = []

  _.each(ds_get_instances, function(response) {
    _.each(response['instances'], function(instance) {
      if (instance['status'] == "RUNNING") {
        id = instance['id'].toLowerCase()

        cpuAverage = null
        cpuMaximum = null
        cpuMinimum = null
        cpuP99 = null
        cpuP95 = null
        cpuP90 = null

        if (stats_by_resource[id] != undefined) {
          cpuAverage = stats_by_resource[id]['cpuAverage']
          cpuMaximum = stats_by_resource[id]['cpuMaximum']
          cpuMinimum = stats_by_resource[id]['cpuMinimum']
          cpuP99 = stats_by_resource[id]['cpuP99']
          cpuP95 = stats_by_resource[id]['cpuP95']
          cpuP90 = stats_by_resource[id]['cpuP90']
        }

        zone = instance['zone'].split('/')[8]
        region = ds_zone_to_region[zone]

        result.push({
          id: instance['id'],
          name: instance['name'],
          description: instance['description'],
          status: instance['status'],
          selfLink: instance['selfLink'],
          cpuPlatform: instance['cpuPlatform'],
          machineType: instance['machineType'],
          hostname: instance['hostname'],
          kind: instance['kind'],
          labels: instance['labels'],
          projectId: response['projectId'],
          projectName: response['projectName'],
          projectNumber: response['projectNumber'],
          zone: zone,
          region: region,
          cpuAverage: cpuAverage,
          cpuMaximum: cpuMaximum,
          cpuMinimum: cpuMinimum,
          cpuP99: cpuP99,
          cpuP95: cpuP95,
          cpuP90: cpuP90
        })
      }
    })
  })
EOS
end

datasource "ds_instances_label_filtered" do
  run_script $js_instances_label_filtered, $ds_instances, $param_exclusion_labels, $param_exclusion_labels_boolean
end

script "js_instances_label_filtered", type: "javascript" do
  parameters "ds_instances", "param_exclusion_labels", "param_exclusion_labels_boolean"
  result "result"
  code <<-EOS
  comparators = _.map(param_exclusion_labels, function(item) {
    if (item.indexOf('==') != -1) {
      return { comparison: '==', key: item.split('==')[0], value: item.split('==')[1], string: item }
    }

    if (item.indexOf('!=') != -1) {
      return { comparison: '!=', key: item.split('!=')[0], value: item.split('!=')[1], string: item }
    }

    if (item.indexOf('=~') != -1) {
      value = item.split('=~')[1]
      regex = new RegExp(value.slice(1, value.length - 1))
      return { comparison: '=~', key: item.split('=~')[0], value: regex, string: item }
    }

    if (item.indexOf('!~') != -1) {
      value = item.split('!~')[1]
      regex = new RegExp(value.slice(1, value.length - 1))
      return { comparison: '!~', key: item.split('!~')[0], value: regex, string: item }
    }

    // If = is present but none of the above are, assume user error and that the user intended ==
    if (item.indexOf('=') != -1) {
      return { comparison: '==', key: item.split('=')[0], value: item.split('=')[1], string: item }
    }

    // Assume we're just testing for a key if none of the comparators are found
    return { comparison: 'key', key: item, value: null, string: item }
  })

  if (param_exclusion_labels.length > 0) {
    result = _.reject(ds_instances, function(resource) {
      resource_labels = {}
      if (typeof(resource['labels']) == 'object') { resource_labels = resource['labels'] }

      // Store a list of found labels
      found_labels = []

      _.each(comparators, function(comparator) {
        comparison = comparator['comparison']
        value = comparator['value']
        string = comparator['string']
        resource_label = resource_labels[comparator['key']]

        if (comparison == 'key' && resource_label != undefined) { found_labels.push(string) }
        if (comparison == '==' && resource_label == value) { found_labels.push(string) }
        if (comparison == '!=' && resource_label != value) { found_labels.push(string) }

        if (comparison == '=~') {
          if (resource_label != undefined && value.test(resource_label)) { found_labels.push(string) }
        }

        if (comparison == '!~') {
          if (resource_label == undefined) { found_labels.push(string) }
          if (resource_label != undefined && value.test(resource_label)) { found_labels.push(string) }
        }
      })

      all_labels_found = found_labels.length == comparators.length
      any_labels_found = found_labels.length > 0 && param_exclusion_labels_boolean == 'Any'

      return all_labels_found || any_labels_found
    })
  } else {
    result = ds_instances
  }
EOS
end

datasource "ds_instances_region_filtered" do
  run_script $js_instances_region_filtered, $ds_instances_label_filtered, $param_regions_allow_or_deny, $param_regions_list
end

script "js_instances_region_filtered", type: "javascript" do
  parameters "ds_instances_label_filtered", "param_regions_allow_or_deny", "param_regions_list"
  result "result"
  code <<-EOS
  if (param_regions_list.length > 0) {
    result = _.filter(ds_instances_label_filtered, function(instance) {
      include_instance = _.contains(param_regions_list, instance['region'])

      if (param_regions_allow_or_deny == "Deny") {
        include_instance = !include_instance
      }

      return include_instance
    })
  } else {
    result = ds_instances_label_filtered
  }
EOS
end

datasource "ds_machinetype_requests" do
  run_script $js_machinetype_requests, $ds_instances_region_filtered
end

script "js_machinetype_requests", type: "javascript" do
  parameters "ds_instances_region_filtered"
  result "result"
  code <<-EOS
  projects = _.uniq(_.pluck(ds_instances_region_filtered, 'projectId'))
  zones = _.uniq(_.pluck(ds_instances_region_filtered, 'zone'))

  result = []

  _.each(projects, function(projectId) {
    _.each(zones, function(zone) {
      result.push({
        projectId: projectId,
        zone: zone
      })
    })
  })
EOS
end

datasource "ds_get_machinetypes" do
  iterate $ds_machinetype_requests
  request do
    auth $auth_google
    host "compute.googleapis.com"
    path join(["/compute/v1/projects/", val(iter_item, 'projectId'), "/zones/", val(iter_item, 'zone'), "/machineTypes"])
    header "User-Agent", "RS Policies"
    header "Content-Type", "application/json"
    ignore_status [403, 404]
  end
  result do
    encoding "json"
    collect jmes_path(response, "items[*]") do
      field "id", jmes_path(col_item, "id")
      field "name", jmes_path(col_item, "name")
      field "description", jmes_path(col_item, "description")
      field "guestCpus", jmes_path(col_item, "guestCpus")
      field "memoryMb", jmes_path(col_item, "memoryMb")
      field "imageSpaceGb", jmes_path(col_item, "imageSpaceGb")
      field "isSharedCpu", jmes_path(col_item, "isSharedCpu")
      field "selfLink", jmes_path(col_item, "selfLink")
      field "projectId", val(iter_item, "projectId")
      field "zone", val(iter_item, "zone")
    end
  end
end

datasource "ds_machinetypes" do
  run_script $js_machinetypes, $ds_get_machinetypes
end

script "js_machinetypes", type: "javascript" do
  parameters "ds_machinetypes"
  result "result"
  code <<-EOS
  result = {}

  _.each(ds_machinetypes, function(machinetype) {
    if (!result[machinetype['name']]) {
      result[machinetype['name']] = machinetype
    }
  })
EOS
end

datasource "ds_google_instance_size_map" do
  request do
    host "raw.githubusercontent.com"
    path "/flexera-public/policy_templates/master/data/google/instance_types.json"
    header "User-Agent", "RS Policies"
  end
end

datasource "ds_instances_normalized" do
  run_script $js_instances_normalized, $ds_instances_region_filtered, $ds_machinetypes, $ds_google_instance_size_map
end

script "js_instances_normalized", type: "javascript" do
  parameters "ds_instances_region_filtered", "ds_machinetypes", "ds_google_instance_size_map"
  result "result"
  code <<-EOS
  result = _.map(ds_instances_region_filtered, function(instance) {
    new_instance = {}
    _.each(_.keys(instance), function(key) { new_instance[key] = instance[key] })

    core_count = 1
    new_instance['resourceType'] = _.last(instance['machineType'].split('/'))

    if (new_instance['resourceType'] && ds_google_instance_size_map[new_instance['resourceType']] && ds_google_instance_size_map[new_instance['resourceType']]['up']) {
      new_instance['newResourceType'] = ds_google_instance_size_map[new_instance['resourceType']]['up']
    }

    if (ds_machinetypes[new_instance['resourceType']]) {
      core_count = ds_machinetypes[new_instance['resourceType']]['guestCpus']
      new_instance['coreCount'] = core_count
    }

    new_instance['cpuAverage'] = new_instance['cpuAverage'] / core_count
    new_instance['cpuMaximum'] = new_instance['cpuMaximum'] / core_count
    new_instance['cpuMinimum'] = new_instance['cpuMinimum'] / core_count
    new_instance['cpuP99'] = new_instance['cpuP99'] / core_count
    new_instance['cpuP95'] = new_instance['cpuP95'] / core_count
    new_instance['cpuP90'] = new_instance['cpuP90'] / core_count

    return new_instance
  })
EOS
end

datasource "ds_overutilized_instances" do
  run_script $js_overutilized_instances, $ds_instances_normalized, $ds_applied_policy, $param_stats_threshold, $param_stats_threshold_cpu_value
end

script "js_overutilized_instances", type: "javascript" do
  parameters "ds_instances_normalized", "ds_applied_policy", "param_stats_threshold", "param_stats_threshold_cpu_value"
  result "result"
  code <<-'EOS'
  overutilized_vms = _.filter(ds_instances_normalized, function(instance) {
    if (instance['cpuAverage'] && param_stats_threshold == "Average") {
      return instance['newResourceType'] && instance['cpuAverage'] > param_stats_threshold_cpu_value
    }

    if (instance['cpuMaximum'] && param_stats_threshold == "Maximum") {
      return instance['newResourceType'] && instance['cpuMaximum'] > param_stats_threshold_cpu_value
    }

    if (instance['cpuP99'] && param_stats_threshold == "p99") {
      return instance['newResourceType'] && instance['cpuP99'] > param_stats_threshold_cpu_value
    }

    if (instance['cpuP95'] && param_stats_threshold == "p95") {
      return instance['newResourceType'] && instance['cpuP95'] > param_stats_threshold_cpu_value
    }

    if (instance['cpuP90'] && param_stats_threshold == "p90") {
      return instance['newResourceType'] && instance['cpuP90'] > param_stats_threshold_cpu_value
    }

    return false
  })

  result = _.map(overutilized_vms, function(instance) {
    return {
      accountID: instance['projectId'],
      accountName: instance['projectName'],
      projectNumber: instance['projectNumber'],
      resourceID: instance['id'],
      resourceName: instance['name'],
      resourceType: instance['resourceType'],
      newResourceType: instance['newResourceType'],
      zone: instance['zone'],
      region: instance['region'],
      hostname: instance['hostname'],
      platform: instance['cpuPlatform'],
      cpuMaximum: Math.round(instance['cpuMaximum'] * 100) / 100,
      cpuMinimum: Math.round(instance['cpuMinimum'] * 100) / 100,
      cpuAverage: Math.round(instance['cpuAverage'] * 100) / 100,
      cpuP99: Math.round(instance['cpuP99'] * 100) / 100,
      cpuP95: Math.round(instance['cpuP95'] * 100) / 100,
      cpuP90: Math.round(instance['cpuP90'] * 100) / 100,
      tags: instance['labels'],
      service: "Compute Engine",
      recommendationDetails: "This VM instance is overutilized and should be upsized.",
      selfLink: instance['selfLink'],
      policy_name: ds_applied_policy['name'],
      message: ""
    }
  })

  instances_total = ds_instances_normalized.length.toString()
  overutil_instances_total = result.length.toString()
  overutil_instances_percentage = (overutil_instances_total / instances_total * 100).toFixed(2).toString() + '%'

  instance_noun = "instances"
  if (instances_total == 1) { instance_noun = "instance" }

  findings_verb = "are"
  if (overutil_instances_total == 1) { findings_verb = "is" }

  overutil_findings = [
    "Out of ", instances_total, " VM ", instance_noun, " analyzed, ",
    overutil_instances_total, " (", overutil_instances_percentage,
    ") ", findings_verb, " overutilized and recommended for upsizing. "
  ].join('')

  overutil_analysis_message = [
    "A VM instance is considered overutilized if its CPU usage (",
    param_stats_threshold.toLowerCase(), ") is above ",
    param_stats_threshold_cpu_value, "%. "
  ].join('')

  disclaimer = "\n\nThe above settings can be modified by editing the applied policy and changing the appropriate parameters."

  result.push({
    accountID: "",
    accountName: "",
    projectNumber: "",
    resourceID: "",
    resourceName: "",
    resourceType: "",
    newResourceType: "",
    zone: "",
    region: "",
    hostname: "",
    platform: "",
    cpuMaximum: "",
    cpuMinimum: "",
    cpuAverage: "",
    cpuP99: "",
    cpuP95: "",
    cpuP90: "",
    tags: "",
    service: "",
    recommendationDetails: "",
    recommenderSubtype: "",
    selfLink: "",
    policy_name: "",
    message: ""
  })

  result[0]["message"] = overutil_findings + overutil_analysis_message + disclaimer
EOS
end

###############################################################################
# Policy
###############################################################################

policy "pol_recommendations" do
  validate_each $ds_overutilized_instances do
    summary_template "{{ with index data 0 }}{{ .policy_name }}{{ end }}: {{ len data }} Google Overutilized VM Instances Found"
    detail_template "{{ with index data 0 }}{{ .message }}{{ end }}"
    check logic_or($ds_parent_policy_terminated, eq(val(item, "resourceID"), ""))
    escalate $esc_email
    escalate $esc_upsize_instances
    hash_exclude "tags", "message", "cpuMaximum", "cpuMinimum", "cpuAverage"
    export do
      resource_level true
      field "accountID" do
        label "Project ID"
      end
      field "accountName" do
        label "Project Name"
      end
      field "projectNumber" do
        label "Project Number"
      end
      field "resourceID" do
        label "Resource ID"
      end
      field "resourceName" do
        label "Resource Name"
      end
      field "resourceType" do
        label "Resource Type"
      end
      field "newResourceType" do
        label "Recommended Resource Type"
      end
      field "zone" do
        label "Zone"
      end
      field "region" do
        label "Region"
      end
      field "hostname" do
        label "Hostname"
      end
      field "platform" do
        label "Platform"
      end
      field "cpuMaximum" do
        label "CPU Maximum %"
      end
      field "cpuMinimum" do
        label "CPU Minimum %"
      end
      field "cpuAverage" do
        label "CPU Average %"
      end
      field "cpuP99" do
        label "CPU p99"
      end
      field "cpuP95" do
        label "CPU p95"
      end
      field "cpuP90" do
        label "CPU p90"
      end
      field "tags" do
        label "Labels"
      end
      field "service" do
        label "Service"
      end
      field "recommendationDetails" do
        label "Recommendation"
      end
      field "selfLink" do
        label "Resource Link"
      end
      field "id" do
        label "ID"
        path "resourceID"
      end
    end
  end
end

###############################################################################
# Escalations
###############################################################################

escalation "esc_email" do
  automatic true
  label "Send Email"
  description "Send incident email"
  email $param_email
end

escalation "esc_upsize_instances" do
  automatic contains($param_automatic_action, "Upsize VM Instances")
  label "Upsize VM Instances"
  description "Approval to upsize all selected VM instances"
  run "upsize_instances", data
end

###############################################################################
# Cloud Workflow
###############################################################################

define upsize_instances($data) return $all_responses do
  $$all_responses = []

  foreach $instance in $data do
    sub on_error: handle_error() do
      call stop_instance($instance) retrieve $stop_response
      call resize_instance($instance) retrieve $resize_response
      call start_instance($instance) retrieve $start_response
    end
  end

  if inspect($$errors) != "null"
    raise join($$errors, "\n")
  end
end

define resize_instance($instance) return $response do
  task_label("POST " + $instance['selfLink'] + '/setMachineType')

  $body = '{ machineType: "zones/' + $instance['zone'] + '/machineTypes/' + $instance['newResourceType'] + '" }'

  $response = http_post(
    url: $instance['selfLink'] + '/setMachineType',
    auth: $$auth_google,
    headers: {
      "cache-control": "no-cache",
      "content-type": "application/json"
    },
    body: $body
  )

  task_label("Post Google VM instance response: " + $instance["resourceName"] + " " + to_json($response))
  $$all_responses << to_json({"req": "POST " + $instance['selfLink'] + '/setMachineType', "resp": $response})

  if $response["code"] != 204 && $response["code"] != 202 && $response["code"] != 200
    raise "Unexpected response posting Google VM instance: "+ $instance["resourceName"] + " " + to_json($response)
  else
    task_label("Post Google VM instance successful: " + $instance["resourceName"])
  end

  sleep(5)
  call get_instance_state($instance) retrieve $state_response, $current_state
  sleep(5)

  while $current_state != "STOPPED" && $current_state != "TERMINATED" do
    call get_instance_state($instance) retrieve $state_response, $current_state
    sleep(5)
  end
end

define start_instance($instance) return $response do
  task_label("POST " + $instance['selfLink'] + '/start')

  $response = http_post(
    url: $instance['selfLink'] + '/start',
    auth: $$auth_google,
    headers: {
      "cache-control": "no-cache",
      "content-type": "application/json"
    }
  )

  task_label("Post Google VM instance response: " + $instance["resourceName"] + " " + to_json($response))
  $$all_responses << to_json({"req": "POST " + $instance['selfLink'] + '/start', "resp": $response})

  if $response["code"] != 204 && $response["code"] != 202 && $response["code"] != 200
    raise "Unexpected response posting Google VM instance: "+ $instance["resourceName"] + " " + to_json($response)
  else
    task_label("Post Google VM instance successful: " + $instance["resourceName"])
  end
end

define stop_instance($instance) return $response do
  task_label("POST " + $instance['selfLink'] + '/stop')

  $response = http_post(
    url: $instance['selfLink'] + '/stop',
    auth: $$auth_google,
    headers: {
      "cache-control": "no-cache",
      "content-type": "application/json"
    }
  )

  task_label("Post Google VM instance response: " + $instance["resourceName"] + " " + to_json($response))
  $$all_responses << to_json({"req": "POST " + $instance['selfLink'] + '/stop', "resp": $response})

  if $response["code"] != 204 && $response["code"] != 202 && $response["code"] != 200
    raise "Unexpected response posting Google VM instance: "+ $instance["resourceName"] + " " + to_json($response)
  else
    task_label("Post Google VM instance successful: " + $instance["resourceName"])
  end

  sleep(5)
  call get_instance_state($instance) retrieve $state_response, $current_state
  sleep(5)

  while $current_state != "STOPPED" && $current_state != "TERMINATED" do
    call get_instance_state($instance) retrieve $state_response, $current_state
    sleep(5)
  end
end

define get_instance_state($instance) return $response, $instance_state do
  task_label("GET " + $instance['selfLink'])

  $response = http_get(
    url: $instance['selfLink'],
    auth: $$auth_google,
    headers: {
      "cache-control": "no-cache",
      "content-type": "application/json"
    }
  )

  task_label("Get Google VM instance response: " + $instance["resourceName"] + " " + to_json($response))
  $$all_responses << to_json({"req": "GET " + $instance['selfLink'], "resp": $response})

  if $response["code"] != 204 && $response["code"] != 202 && $response["code"] != 200
    raise "Unexpected response getting Google VM instance: "+ $instance["resourceName"] + " " + to_json($response)
  else
    task_label("Get Google VM instance successful: " + $instance["resourceName"])
    $instance_state = $response["body"]["status"]
  end
end

define handle_error() do
  if !$$errors
    $$errors = []
  end
  $$errors << $_error["type"] + ": " + $_error["message"]
  # We check for errors at the end, and raise them all together
  # Skip errors handled by this definition
  $_error_behavior = "skip"
end

###############################################################################
# Meta Policy [alpha]
# Not intended to be modified or used by policy developers
###############################################################################

# If the meta_parent_policy_id is not set it will evaluate to an empty string and we will look for the policy itself,
# if it is set we will look for the parent policy.
datasource "ds_get_policy" do
  request do
    auth $auth_flexera
    host rs_governance_host
    ignore_status [404]
    path join(["/api/governance/projects/", rs_project_id, "/applied_policies/", switch(ne(meta_parent_policy_id, ""), meta_parent_policy_id, policy_id)])
    header "Api-Version", "1.0"
  end
  result do
    encoding "json"
    field "id", jmes_path(response, "id")
  end
end

datasource "ds_parent_policy_terminated" do
  run_script $js_decide_if_self_terminate, $ds_get_policy, policy_id, meta_parent_policy_id
end

# If the policy was applied by a meta_parent_policy we confirm it exists if it doesn't we confirm we are deleting
# This information is used in two places:
# - determining whether or not we make a delete call
# - determining if we should create an incident (we don't want to create an incident on the run where we terminate)
script "js_decide_if_self_terminate", type: "javascript" do
  parameters "found", "self_policy_id", "meta_parent_policy_id"
  result "result"
  code <<-EOS
  var result
  if (meta_parent_policy_id != "" && found.id == undefined) {
    result = true
  } else {
    result = false
  }
  EOS
end

# Two potentials ways to set this up:
# - this way and make a unneeded 'get' request when not deleting
# - make the delete request an interate and have it iterate over an empty array when not deleting and an array with one item when deleting
script "js_make_terminate_request", type: "javascript" do
  parameters "should_delete", "policy_id", "rs_project_id", "rs_governance_host"
  result "request"
  code <<-EOS

  var request = {
    auth:  'auth_flexera',
    host: rs_governance_host,
    path: "/api/governance/projects/" + rs_project_id + "/applied_policies/" + policy_id,
    headers: {
      "API-Version": "1.0",
      "Content-Type":"application/json"
    },
  }

  if (should_delete) {
    request.verb = 'DELETE'
  }
  EOS
end

datasource "ds_terminate_self" do
  request do
    run_script $js_make_terminate_request, $ds_parent_policy_terminated, policy_id, rs_project_id, rs_governance_host
  end
end

datasource "ds_is_deleted" do
  run_script $js_check_deleted, $ds_terminate_self
end

# This is just a way to have the check delete request connect to the farthest leaf from policy.
# We want the delete check to the first thing the policy does to avoid the policy erroring before it can decide whether or not it needs to self terminate
# Example a customer deletes a credential and then terminates the parent policy. We still want the children to self terminate
# The only way I could see this not happening is if the user who applied the parent_meta_policy was offboarded or lost policy access, the policies who are impersonating the user
# would not have access to self-terminate
# It may be useful for the backend to enable a mass terminate at some point for all meta_child_policies associated with an id.
script "js_check_deleted", type: "javascript" do
  parameters "response"
  result "result"
  code <<-EOS
  result = {"path":"/"}
  EOS
end

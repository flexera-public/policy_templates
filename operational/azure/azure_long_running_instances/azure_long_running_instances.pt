name "Azure Long Running Instances"
rs_pt_ver 20180301
type "policy"
short_description "Checks for running instances that have been running longer than the `Days Old` parameter. See the [docs.flexera.com/flexera/EN/Automation](https://docs.flexera.com/flexera/EN/Automation/AutomationGS.htm) to learn more."
long_description ""
severity "low"
category "Operational"
default_frequency "daily"
info(
  version: "3.0",
  provider: "Azure",
  service: "Compute",
  policy_set: "Long Running Instances"
)

###############################################################################
# Parameters
###############################################################################

parameter "param_email" do
  type "list"
  label "Email notify list"
  description "Email addresses of the recipients you wish to notify when new incidents are created"
end

parameter "param_azure_endpoint" do
  type "string"
  label "Azure Endpoint"
  allowed_values "management.azure.com", "management.chinacloudapi.cn"
  default "management.azure.com"
end

parameter "param_days_old" do
  type "number"
  label "Days Old"
  description "Number of days to be running before included in list"
  default 180
end

parameter "param_subscriptions_list" do
  label "Subscription Allowed List"
  type "list"
  description "Allowed Subscriptions, if empty, all subscriptions will be checked"
end

parameter "param_automatic_action" do
  type "string"
  label "Automatic Actions"
  description "When this value is set, this policy will automatically take the selected action(s)"
  default "Select Action"
  allowed_values "Select Action", "Stop Instances", "Terminate Instances"
end

###############################################################################
# Authentication
###############################################################################

credentials "auth_azure" do
  schemes "oauth2"
  label "Azure Compute credential"
  description "Select the Azure Credential from the list"
  tags "provider=azure_rm"
end

credentials "auth_flexera" do
  schemes "oauth2"
  label "flexera"
  description "Select Flexera One OAuth2 credentials"
  tags "provider=flexera"
end

###############################################################################
# Pagination
###############################################################################

pagination "pagination_azure" do
  get_page_marker do
    body_path "nextLink"
  end
  set_page_marker do
    uri true
  end
end

###############################################################################
# Datasources & Scripts
###############################################################################

datasource "ds_subscriptions" do
  request do
    auth $auth_azure
    pagination $pagination_azure
    host $param_azure_endpoint
    path "/subscriptions/"
    query "api-version", "2018-06-01"
    header "User-Agent", "RS Policies"
    # Header X-Meta-Flexera has no affect on datasource query, but is required for Meta Policies
    # Forces `ds_is_deleted` datasource to run first during policy execution
    header "Meta-Flexera", val($ds_is_deleted, "path")
  end
  result do
    encoding "json"
    collect jmes_path(response, "value[*]") do
      field "id", jmes_path(col_item, "subscriptionId")
      field "name", jmes_path(col_item, "displayName")
    end
  end
end

datasource "ds_filtered_subscriptions" do
  run_script $js_filtered_subscriptions, $ds_subscriptions, $param_subscriptions_list
end

script "js_filtered_subscriptions", type: "javascript" do
  parameters "ds_subscriptions", "param_subscriptions_list"
  result "result"
  code <<-EOS
  if (param_subscriptions_list.length > 0) {
    result = _.filter(ds_subscriptions, function(subscription) {
      return _.contains(param_subscriptions_list, subscription['id']) || _.contains(param_subscriptions_list, subscription['name'])
    })
  } else {
    result = ds_subscriptions
  }
EOS
end

# Lists All Virtual Machines in each subscription
datasource "ds_vm_list" do
  iterate $ds_filtered_subscriptions
  request do
    auth $auth_azure
    pagination $pagination_azure
    host $param_azure_endpoint
    path join(["/subscriptions/", val(iter_item, "id"), "/providers/Microsoft.Compute/virtualMachines"])
    query "api-version","2022-08-01"
    query "statusOnly", "true"
    header "User-Agent", "RS Policies"
  end
  result do
    encoding "json"
    collect jmes_path(response, "value[*]") do
      field "id", jmes_path(col_item, "id")
      field "rg", get(4, split(jmes_path(col_item,"id"), "/"))
      field "name", jmes_path(col_item, "name")
      field "statuses", jmes_path(col_item, "properties.instanceView.statuses")
      field "subscriptionId",val(iter_item, "id")
      field "subscriptionName",val(iter_item, "name")
    end
  end
end

# Calls the script to get only the virtual machines that are running
datasource "ds_vm_running" do
  run_script $js_filter_vm_running, $ds_vm_list, $param_days_old
end

# Returns instances that are long running
script "js_filter_vm_running", type: "javascript" do
  parameters "ds_vm_list", "param_days_old"
  result "result"
  code <<-EOS
  // Dummy value to ensure validation runs at least once
  result = [{
    "id": "",
    "name": "",
    "status": "",
    "time_running": "",
    "days_elapsed": -1,
    "resourcegroup": "",
    "subscriptionId": "",
    "subscriptionName": ""
  }]

  _.each(ds_vm_list, function(instance){
    var codes = _.pluck(instance.statuses, 'code')
    if ( _.contains(codes, "PowerState/running") ) {
      var runningState = _.where(instance.statuses, {"code": "PowerState/running"});
      var displayStatus = runningState[0]["displayStatus"];
      var provisionState = _.where(instance.statuses, {"code": "ProvisioningState/succeeded"});
      var timeRunning = provisionState[0]["time"];
      var timeofevent = new Date(timeRunning);
      var nowtime = Date.now();
      var res = Math.abs(timeofevent.valueOf() - nowtime.valueOf());
      var daysElapsed = Math.ceil(res / (1000 * 3600 * 24));
      result.push({
        "id": instance["id"],
        "name": instance["name"],
        "status": displayStatus,
        "time_running": timeRunning,
        "days_elapsed": daysElapsed,
        "resourcegroup": instance["rg"],
        "subscriptionId": instance["subscriptionId"],
        "subscriptionName": instance["subscriptionName"]
      })
    }
  })
EOS
end

###############################################################################
# Policy
###############################################################################

policy "pol_utilization" do
  validate_each $ds_vm_running do
    summary_template "{{ rs_project_name }} (Account ID: {{ rs_project_id }}): {{ len data }} Azure VMs running longer than {{parameters.param_days_old}} day(s)"
    escalate $esc_email
    escalate $esc_stop_instances
    escalate $esc_terminate_instances
    check logic_or($ds_parent_policy_terminated, lt(to_n(val(item, "days_elapsed")), $param_days_old))
    export do
      resource_level true
      field "accountID" do
        label "Subscription ID"
        path "subscriptionId"
      end
      field "accountName" do
        label "Subscription Name"
        path "subscriptionName"
      end
      field "name" do
        label "Resource Name"
      end
      field "id" do
        label "Resource ID"
      end
      field "resourcegroup" do
        label "Resource Group"
      end
      field "status" do
        label "Status"
      end
      field "time_running" do
        label "Time Running"
      end
      field "days_elapsed" do
        label "Days Elapsed"
      end
    end
  end
end

###############################################################################
# Escalations
###############################################################################

escalation "esc_email" do
  automatic true
  label "Send Email"
  description "Send incident email"
  email $param_email
end

escalation "esc_stop_instances" do
  automatic eq($param_automatic_action, "Stop Instances")
  label "Stop Instances"
  description "Stop selected instances"
  run "stop_instances", data, $param_azure_endpoint
end

escalation "esc_terminate_instances" do
  automatic eq($param_automatic_action, "Terminate Instances")
  label "Terminate Instances"
  description "Terminate selected instances"
  run "terminate_instances", data, $param_azure_endpoint
end

###############################################################################
# Cloud Workflow
###############################################################################

# Workflow to power off the virtual machines
define stop_instances($data, $param_azure_endpoint) return $all_responses do
  # https://learn.microsoft.com/en-us/rest/api/compute/virtual-machines/power-off?tabs=HTTP
  $all_responses = []
  foreach $item in $data do
    sub on_error: skip do
      $response = http_request(
        auth: $$auth_azure,
        verb: "POST",
        host: $param_azure_endpoint,
        href: join(["/subscriptions/", $item['subscriptionId'], "/resourceGroups/", $item["resourcegroup"], "/providers/Microsoft.Compute/virtualMachines/", $item["name"], "/powerOff/"]),
        https: true,
        query_strings: {
          "api-version": "2022-08-01"
        },
        headers: {
          "cache-control": "no-cache",
          "content-type": "application/json"
        }
      )
      $all_responses << $response
    end
  end
end

# Workflow to delete the virtual machines
define terminate_instances($data, $param_azure_endpoint) return $all_responses do
  # https://learn.microsoft.com/en-us/rest/api/compute/virtual-machines/delete?tabs=HTTP
  $all_responses = []
  foreach $item in $data do
    sub on_error: skip do
      $response = http_request(
        auth: $$auth_azure,
        verb: "DELETE",
        host: $param_azure_endpoint,
        href: join(["/subscriptions/", $item['subscriptionId'], "/resourceGroups/", $item["resourcegroup"], "/providers/Microsoft.Compute/virtualMachines/",$item["name"]]),
        https: true,
        query_strings: {
          "api-version": "2022-08-01"
        },
        headers: {
          "cache-control": "no-cache",
          "content-type": "application/json"
        }
      )
      $all_responses << $response
    end
  end
end

###############################################################################
# Meta Policy [alpha]
# Not intended to be modified or used by policy developers
###############################################################################

# If the meta_parent_policy_id is not set it will evaluate to an empty string and we will look for the policy itself,
# if it is set we will look for the parent policy.
datasource "ds_get_policy" do
  request do
    auth $auth_flexera
    host rs_governance_host
    ignore_status [404]
    path join(["/api/governance/projects/", rs_project_id, "/applied_policies/", switch(ne(meta_parent_policy_id,""), meta_parent_policy_id, policy_id) ])
    header "Api-Version", "1.0"
  end
  result do
    encoding "json"
    field "id", jmes_path(response, "id")
  end
end

datasource "ds_parent_policy_terminated" do
  run_script $js_decide_if_self_terminate, $ds_get_policy, policy_id, meta_parent_policy_id
end

# If the policy was applied by a meta_parent_policy we confirm it exists if it doesn't we confirm we are deleting
# This information is used in two places:
# - determining whether or not we make a delete call
# - determining if we should create an incident (we don't want to create an incident on the run where we terminate)
script "js_decide_if_self_terminate", type: "javascript" do
  parameters "found", "self_policy_id", "meta_parent_policy_id"
  result "result"
  code <<-EOS
  var result
  if (meta_parent_policy_id != "" && found.id == undefined) {
    result = true
  } else {
    result = false
  }
  EOS
end

# Two potentials ways to set this up:
# - this way and make a unneeded 'get' request when not deleting
# - make the delete request an interate and have it iterate over an empty array when not deleting and an array with one item when deleting
script "js_make_terminate_request", type: "javascript" do
  parameters "should_delete", "policy_id", "rs_project_id", "rs_governance_host"
  result "request"
  code <<-EOS

  var request = {
    auth:  'auth_flexera',
    host: rs_governance_host,
    path: "/api/governance/projects/" + rs_project_id + "/applied_policies/" + policy_id,
    headers: {
      "API-Version": "1.0",
      "Content-Type":"application/json"
    },
  }

  if (should_delete) {
    request.verb = 'DELETE'
  }
  EOS
end

datasource "ds_terminate_self" do
  request do
    run_script $js_make_terminate_request, $ds_parent_policy_terminated, policy_id, rs_project_id, rs_governance_host
  end
end

datasource "ds_is_deleted" do
  run_script $js_check_deleted, $ds_terminate_self
end

# This is just a way to have the check delete request connect to the farthest leaf from policy.
# We want the delete check to the first thing the policy does to avoid the policy erroring before it can decide whether or not it needs to self terminate
# Example a customer deletes a credential and then terminates the parent policy. We still want the children to self terminate
# The only way I could see this not happening is if the user who applied the parent_meta_policy was offboarded or lost policy access, the policies who are impersonating the user
# would not have access to self-terminate
# It may be useful for the backend to enable a mass terminate at some point for all meta_child_policies associated with an id.
script "js_check_deleted", type: "javascript" do
  parameters "response"
  result "result"
  code <<-EOS
  result = {"path":"/"}
  EOS
end

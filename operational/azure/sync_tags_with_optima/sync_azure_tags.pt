name "Azure Sync Tags with Optima"
rs_pt_ver 20180301
type "policy"
short_description "Identify all Azure Tag Keys and add them as custom dimensions in Flexera Optima. See the [README](https://github.com/flexera/policy_templates/tree/master/operational/azure/sync_tags_with_optima) and [docs.flexera.com/flexera/EN/Automation](https://docs.flexera.com/flexera/EN/Automation/AutomationGS.htm) to learn more."
severity "low"
category "Operational"
default_frequency "daily"
info(
  version: "2.3",
  provider: "Azure",
  service: "",
  policy_set: ""
)

##################
# User inputs    #
##################

parameter "param_email" do
  type "list"
  label "Email Address"
  description "Email addresses of the recipients you wish to notify"
end

parameter "param_azure_endpoint" do
  type "string"
  label "Azure Endpoint"
  allowed_values "management.azure.com", "management.chinacloudapi.cn"
  default "management.azure.com"
end

parameter "param_subscription_whitelist" do
  label "Subscription Whitelist"
  type "list"
  description "Whitelisted Subscriptions, if empty, all subscriptions will be checked"
end

parameter "param_exclusion_tag_key" do
  label "Exclusion Tag Keys"
  description "Cloud native keys to ignore. Example: exclude_utilization"
  type "list"
end

parameter "param_min_resources" do
  type "number"
  label "Minimum Number of Resources"
  description "The minimum number of resources using a specific tag key which should trigger an incident"
  default 50
end

parameter "param_automatic_action" do
  type "list"
  label "Automatic Actions"
  description "When this value is set, this policy will automatically take the selected action(s)"
  allowed_values ["Add tags to Optima"]
end

###############################################################################
# Authentication
###############################################################################

#authenticate with Azure
credentials "azure_auth" do
  schemes "oauth2"
  label "Azure"
  description "Select the Azure Resource Manager Credential from the list."
  tags "provider=azure_rm"
end

#authenticate with Optima
auth "auth_rs", type: "rightscale"

###############################################################################
# Pagination
###############################################################################

#pagination support
pagination "azure_pagination" do
  get_page_marker do
    body_path "nextLink"
  end
  set_page_marker do
    uri true
  end
end

###############################################################################
# Datasources
###############################################################################

#get all subscription details.
datasource "ds_subscriptions" do
  request do
    auth $azure_auth
    pagination $azure_pagination
    host $param_azure_endpoint
    path "/subscriptions/"
    query "api-version","2019-06-01"
    header "User-Agent", "RS Policies"
  end
  result do
    encoding "json"
    collect jmes_path(response, "value[*]") do
      field "subscriptionId", jmes_path(col_item,"subscriptionId")
      field "displayName", jmes_path(col_item,"displayName")
      field "state", jmes_path(col_item,"state")
    end
  end
end

datasource "ds_filtered_subscriptions" do
  run_script $js_filtered_subscriptions, $ds_subscriptions, $param_subscription_whitelist
end

#get all tag keys
datasource "ds_azure_tags" do
  iterate $ds_filtered_subscriptions
  request do
    auth $azure_auth
    pagination $azure_pagination
    host $param_azure_endpoint
    path join(["/subscriptions/", val(iter_item,"subscriptionId"), "/tagNames"])
    header "User-Agent", "RS Policies"
    query "api-version","2019-10-01"
  end
  result do
    encoding "json"
    collect jmes_path(response, "value[*]") do
      field "id", jmes_path(col_item,"id")
      field "name", jmes_path(col_item,"tagName")
      field "count", jmes_path(col_item, "count.value")
    end
  end
end

datasource "ds_optima_tag_dimensions" do
  request do
    auth $auth_rs
    host rs_optima_host
    path join(["bill-analysis/orgs/", rs_org_id, "/custom/dimensions"])
    header "Api-Version", "0.1"
    header "User-Agent", "RS Policies"
  end
  result do
    encoding "json"
    collect jmes_path(response, "[*]") do
      field "tag_key", jmes_path(col_item, "tag_key")
    end
  end
end

datasource "ds_filtered_tags" do
  run_script $js_filter_tags, $ds_azure_tags, $ds_optima_tag_dimensions, $param_exclusion_tag_key
end

###############################################################################
# Scripts
###############################################################################

script "js_filtered_subscriptions", type: "javascript" do
  parameters "ds_subscriptions", "param_subscription_whitelist"
  result "results"
  code <<-EOS
  var results = []
  if ( param_subscription_whitelist.length != 0){
    results = []
    _.each(param_subscription_whitelist, function(sub){
      var found = _.find(ds_subscriptions, function(item){
        return item.subscriptionId == sub || item.displayName.toLowerCase() == sub.toLowerCase();
      })
      results.push(found)
    })
  } else {
    results = ds_subscriptions
  }
EOS
end

script "js_filter_tags", type: "javascript" do
  parameters "ds_azure_tags","ds_optima_tag_dimensions","param_exclusion_tag_key"
  result "result"
  code <<-EOS
    var result = [];

    var azure_keys = _.unique(_.pluck(ds_azure_tags, 'name'));
    _.each(azure_keys, function(azure_key){
      if (!_.contains(_.pluck(ds_optima_tag_dimensions,'tag_key'), azure_key)){
        if (!_.contains(param_exclusion_tag_key, azure_key)){
          var sum = _.reduce(_.pluck(_.where(ds_azure_tags, {"name": azure_key}), 'count'), function(memo, num){ return memo + num; }, 0)
          result.push({
            tag_key: azure_key,
            count: sum
          })
        }
      }
    })
  EOS
end

###############################################################################
# Escalation
###############################################################################

escalation "esc_email" do
  label "Send Email"
  description "Send incident email"
  email $param_email
end

escalation "add_optima_tags" do
  automatic contains($param_automatic_action, "Add tags to Optima")
  label "Add Tags"
  description "Add tags to Optima"
  run "add_tags", data, rs_org_id
end

###############################################################################
# Policy
###############################################################################

policy "policy_azure_tag_sync" do
  validate_each $ds_filtered_tags do
    summary_template "{{len data}} Azure Tags Missing from Optima"
    export do
      field "tag_key" do
        label "Azure Tag Key"
      end
      field "count" do
        label "Count of Resources"
      end
    end

    escalate $esc_email
    escalate $add_optima_tags
    check lt(val(item, "count"), $param_min_resources)
  end
end


###############################################################################
# Cloud Workflow
###############################################################################

define add_tags($data, $rs_org_id) return $all_responses do
  $$debug=true
  $all_responses = []
  foreach $item in $data do
  sub on_error: skip do
    $response = http_request(
      verb: "post",
      host: "optima.rightscale.com",
      href: join(["/bill-analysis/orgs/",$rs_org_id,"/custom/dimensions"]),
      https: true,
      headers:{
        "Api-Version": "0.1",
        "content-type": "application/json"
      },
      body:{
        "name": $item["tag_key"],
        "tag_key": $item["tag_key"]
      }
    )
    $all_responses << $response
    call sys_log(join(['Add Azure Tag to Optima: ', $item["tag_key"]]),to_s($response))
    end
  end
end

define sys_log($subject, $detail) do
  if $$debug
    rs_cm.audit_entries.create(
      notify: "None",
      audit_entry: {
        auditee_href: @@account,
        summary: $subject,
        detail: $detail
      }
    )
  end
end

name "Azure Tag Cardinality Report"
rs_pt_ver 20180301
type "policy"
short_description "Generates a tag cardinality report for Azure Subscriptions, Resource Groups, and Resources. See the [README](https://github.com/flexera-public/policy_templates/tree/master/operational/azure/tag_cardinality) and [docs.flexera.com/flexera/EN/Automation](https://docs.flexera.com/flexera/EN/Automation/AutomationGS.htm) to learn more."
long_description ""
severity "low"
category "Operational"
default_frequency "weekly"
info(
  version: "3.0",
  provider: "Azure",
  service: "Tags",
  policy_set: "Tag Cardinality"
)

###############################################################################
# Parameters
###############################################################################

parameter "param_email" do
  type "list"
  label "Email addresses to notify"
  description "Email addresses of the recipients you wish to notify"
end

parameter "param_azure_endpoint" do
  type "string"
  label "Azure Endpoint"
  allowed_values "management.azure.com", "management.chinacloudapi.cn"
  default "management.azure.com"
end

parameter "param_subscriptions_list" do
  label "Subscription Allowed List"
  type "list"
  description "Allowed Subscriptions, if empty, all subscriptions will be checked"
end

###############################################################################
# Authentication
###############################################################################

credentials "auth_azure" do
  schemes "oauth2"
  label "Azure"
  description "Select the Azure Resource Manager Credential from the list."
  tags "provider=azure_rm"
end

credentials "auth_flexera" do
  schemes "oauth2"
  label "flexera"
  description "Select Flexera One OAuth2 credentials"
  tags "provider=flexera"
end

###############################################################################
# Pagination
###############################################################################

pagination "pagination_azure" do
  get_page_marker do
    body_path "nextLink"
  end
  set_page_marker do
    uri true
  end
end

###############################################################################
# Datasources & Scripts
###############################################################################

datasource "ds_azure_subscriptions_tagless" do
  request do
    auth $auth_azure
    pagination $pagination_azure
    host $param_azure_endpoint
    path "/subscriptions/"
    query "api-version", "2018-06-01"
    header "User-Agent", "RS Policies"
    # Header X-Meta-Flexera has no affect on datasource query, but is required for Meta Policies
    # Forces `ds_is_deleted` datasource to run first during policy execution
    header "Meta-Flexera", val($ds_is_deleted, "path")
  end
  result do
    encoding "json"
    collect jmes_path(response, "value[*]") do
      field "id", jmes_path(col_item, "subscriptionId")
      field "name", jmes_path(col_item, "displayName")
    end
  end
end

datasource "ds_azure_subscriptions_tagless_filtered" do
  run_script $js_azure_subscriptions_tagless_filtered, $ds_azure_subscriptions_tagless, $param_subscriptions_list
end

script "js_azure_subscriptions_tagless_filtered", type: "javascript" do
  parameters "ds_azure_subscriptions_tagless", "param_subscriptions_list"
  result "result"
  code <<-EOS
  if (param_subscriptions_list.length > 0) {
    result = _.filter(ds_azure_subscriptions_tagless, function(subscription) {
      return _.contains(param_subscriptions_list, subscription['id']) || _.contains(param_subscriptions_list, subscription['name'])
    })
  } else {
    result = ds_azure_subscriptions_tagless
  }
EOS
end

datasource "ds_azure_subscriptions" do
  iterate $ds_azure_subscriptions_tagless_filtered
  request do
    auth $auth_azure
    pagination $pagination_azure
    host $param_azure_endpoint
    path join(["/subscriptions/", val(iter_item, "id"), "/providers/Microsoft.Resources/tags/default"])
    query "api-version","2021-04-01"
    header "User-Agent", "RS Policies"
    # Ignore status 400, 403, and 404 which can be returned in certain (legacy) types of Azure Subscriptions
    ignore_status [400, 403, 404]
  end
  result do
    encoding "json"
    field "id", val(iter_item, "id")
    field "name", val(iter_item, "name")
    field "tags", jmes_path(response, "properties.tags")
  end
end

datasource "ds_azure_resource_groups" do
  iterate $ds_azure_subscriptions_tagless
  request do
    auth $auth_azure
    pagination $pagination_azure
    host $param_azure_endpoint
    path join(["/subscriptions/", val(iter_item, "id"), "/resourcegroups"])
    query "api-version","2021-04-01"
    header "User-Agent", "RS Policies"
    # Ignore status 400, 403, and 404 which can be returned in certain (legacy) types of Azure Subscriptions
    ignore_status [400, 403, 404]
  end
  result do
    encoding "json"
    collect jmes_path(response, "value[*]") do
      field "subscriptionName", val(iter_item, "name")
      field "subscriptionId", val(iter_item, "id")
      field "id", jmes_path(col_item, "id")
      field "location", jmes_path(col_item, "location")
      field "name", jmes_path(col_item, "name")
      field "tags", jmes_path(col_item, "tags")
    end
  end
end

datasource "ds_azure_resources" do
  iterate $ds_azure_subscriptions_tagless
  request do
    auth $auth_azure
    pagination $pagination_azure
    host $param_azure_endpoint
    path join(["/subscriptions/", val(iter_item, "id"), "/resources"])
    query "api-version","2021-04-01"
    header "User-Agent", "RS Policies"
    # Ignore status 400, 403, and 404 which can be returned in certain (legacy) types of Azure Subscriptions
    ignore_status [400, 403, 404]
  end
  result do
    encoding "json"
    collect jmes_path(response, "value[*]") do
      field "subscriptionName", val(iter_item, "name")
      field "subscriptionId", val(iter_item, "id")
      field "id", jmes_path(col_item, "id")
      field "name", jmes_path(col_item, "name")
      field "location", jmes_path(col_item, "location")
      field "type", jmes_path(col_item, "type")
      field "tags", jmes_path(col_item, "tags")
    end
  end
end

datasource "ds_azure_subscriptions_tag_list" do
  run_script $js_tag_lister, $ds_azure_subscriptions, "Subscription"
end

datasource "ds_azure_resource_groups_tag_list" do
  run_script $js_tag_lister, $ds_azure_resource_groups, "Resource Group"
end

datasource "ds_azure_resources_tag_list" do
  run_script $js_tag_lister, $ds_azure_resources, "Resource"
end

script "js_tag_lister", type: "javascript" do
  parameters "tagged_list", "tag_type"
  result "result"
  code <<-EOS
  tags = {}
  result = []

  _.each(tagged_list, function(item) {
    if (item['tags'] != undefined && item['tags'] != null) {
      _.each(Object.keys(item['tags']), function(key) {
        if (tags[key] == undefined || tags[key] == null) {
          tags[key] = []
        }

        tags[key].push(item['tags'][key])
      })
    }
  })

  _.each(Object.keys(tags), function(key) {
    result.push({
      'type': tag_type,
      'key': key,
      'cardinality': _.uniq(tags[key]).length,
      'value_list': _.uniq(tags[key]).join(', ')
    })
  })

  result = _.sortBy(result, 'cardinality').reverse()
EOS
end

datasource "ds_tag_report" do
  run_script $js_tag_report, $ds_azure_subscriptions_tag_list, $ds_azure_resource_groups_tag_list, $ds_azure_resources_tag_list
end

script "js_tag_report", type: "javascript" do
  parameters "ds_azure_subscriptions_tag_list", "ds_azure_resource_groups_tag_list", "ds_azure_resources_tag_list"
  result "result"
  code <<-EOS
  result = ds_azure_subscriptions_tag_list.concat(ds_azure_resource_groups_tag_list, ds_azure_resources_tag_list)
EOS
end

###############################################################################
# Policy
###############################################################################

policy "pol_azure_tag_cardinality_report" do
  validate $ds_tag_report do
    summary_template "Azure Tag Cardinality Report"
    check logic_or($ds_parent_policy_terminated, eq(1, 0))
    escalate $esc_email
    export do
      resource_level false
      field "type" do
        label "Type"
      end
      field "key" do
        label "Key"
      end
      field "cardinality" do
        label "Cardinality"
      end
      field "value_list" do
        label "Unique Values"
      end
    end
  end
end

###############################################################################
# Escalations
###############################################################################

escalation "esc_email" do
  label "Send Email"
  description "Send incident email"
  email $param_email
end

###############################################################################
# Meta Policy [alpha]
# Not intended to be modified or used by policy developers
###############################################################################

# If the meta_parent_policy_id is not set it will evaluate to an empty string and we will look for the policy itself,
# if it is set we will look for the parent policy.
datasource "ds_get_policy" do
  request do
    auth $auth_flexera
    host rs_governance_host
    ignore_status [404]
    path join(["/api/governance/projects/", rs_project_id, "/applied_policies/", switch(ne(meta_parent_policy_id,""), meta_parent_policy_id, policy_id) ])
    header "Api-Version", "1.0"
  end
  result do
    encoding "json"
    field "id", jmes_path(response, "id")
  end
end

datasource "ds_parent_policy_terminated" do
  run_script $js_decide_if_self_terminate, $ds_get_policy, policy_id, meta_parent_policy_id
end

# If the policy was applied by a meta_parent_policy we confirm it exists if it doesn't we confirm we are deleting
# This information is used in two places:
# - determining whether or not we make a delete call
# - determining if we should create an incident (we don't want to create an incident on the run where we terminate)
script "js_decide_if_self_terminate", type: "javascript" do
  parameters "found", "self_policy_id", "meta_parent_policy_id"
  result "result"
  code <<-EOS
  var result
  if (meta_parent_policy_id != "" && found.id == undefined) {
    result = true
  } else {
    result = false
  }
  EOS
end

# Two potentials ways to set this up:
# - this way and make a unneeded 'get' request when not deleting
# - make the delete request an interate and have it iterate over an empty array when not deleting and an array with one item when deleting
script "js_make_terminate_request", type: "javascript" do
  parameters "should_delete", "policy_id", "rs_project_id", "rs_governance_host"
  result "request"
  code <<-EOS

  var request = {
    auth:  'auth_flexera',
    host: rs_governance_host,
    path: "/api/governance/projects/" + rs_project_id + "/applied_policies/" + policy_id,
    headers: {
      "API-Version": "1.0",
      "Content-Type":"application/json"
    },
  }

  if (should_delete) {
    request.verb = 'DELETE'
  }
  EOS
end

datasource "ds_terminate_self" do
  request do
    run_script $js_make_terminate_request, $ds_parent_policy_terminated, policy_id, rs_project_id, rs_governance_host
  end
end

datasource "ds_is_deleted" do
  run_script $js_check_deleted, $ds_terminate_self
end

# This is just a way to have the check delete request connect to the farthest leaf from policy.
# We want the delete check to the first thing the policy does to avoid the policy erroring before it can decide whether or not it needs to self terminate
# Example a customer deletes a credential and then terminates the parent policy. We still want the children to self terminate
# The only way I could see this not happening is if the user who applied the parent_meta_policy was offboarded or lost policy access, the policies who are impersonating the user
# would not have access to self-terminate
# It may be useful for the backend to enable a mass terminate at some point for all meta_child_policies associated with an id.
script "js_check_deleted", type: "javascript" do
  parameters "response"
  result "result"
  code <<-EOS
  result = {"path":"/"}
  EOS
end


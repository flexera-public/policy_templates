name "Expiring Azure Certificates"
rs_pt_ver 20180301
type "policy"
short_description "Raise an incident if there are expired and almost expired certificates on the Azure account in active use."
long_description ""
category "Operational"
severity "low"
default_frequency "daily"
info(
  version: "2.0",
  provider: "Azure",
  service: "Compute",
  policy_set: ""
)

###############################################################################
# Permissions
###############################################################################

permission "perm_read_creds" do
  actions   "rs_cm.show_sensitive","rs_cm.index_sensitive"
  resources "rs_cm.credentials"
end

###############################################################################
# Parameters
###############################################################################

parameter "param_email" do
  type "list"
  label "Email addresses of the recipients you wish to notify."
end

parameter "param_numberofdays" do
  type "string"
  label "Days"
  description "Number of days from expiration to raise an incident."
end

parameter "param_exclusion_tag_key" do
  category "User Inputs"
  label "Exclusion Tag Key"
  description "Azure-native instance tag to ignore instances that match the disallowed instance type. Only supply the tag key. The policy assumes that the tag value is irrelevant."
  type "string"
end

###############################################################################
# Authentication
###############################################################################

credentials "azure_auth" do
  schemes "oauth2"
  label "Azure"
  description "Select the Azure Resource Manager Credential from the list."
  tags "provider=azure_rm"
end

###############################################################################
# Pagination
###############################################################################

pagination "azure_pagination" do
  get_page_marker do
    body_path "nextLink"
  end
  set_page_marker do
    uri true
  end
end

###############################################################################
# Datasources
###############################################################################

datasource "ds_subscriptions" do
  request do
    auth $azure_auth
    pagination $azure_pagination
    host "management.azure.com"
    path "/subscriptions/"
    query "api-version","2018-06-01"
    header "User-Agent", "RS Policies"
  end
  result do
    encoding "json"
    collect jmes_path(response, "value[*]") do
      field "subscriptionId", jmes_path(col_item,"subscriptionId")
	    field "subscriptionName", jmes_path(col_item,"displayName")
    end
  end
end

datasource "ds_certificates" do
  iterate $ds_subscriptions
  request do
    auth $azure_auth
    pagination $azure_pagination
    host "management.azure.com"
    path join(["/subscriptions/", val(iter_item, "subscriptionId"), "/providers/Microsoft.Web/certificates", ])
    query "api-version","2019-08-01"
    header "User-Agent", "RS Policies"
  end
  result do
    encoding "json"
    collect jmes_path(response, "value[*]") do
      field "id", jmes_path(col_item, "id")
      field "subscriptionName", val(iter_item, "subscriptionName")
      field "subscriptionId", val(iter_item, "subscriptionId")
      field "location", jmes_path(col_item, "location")
      field "name", jmes_path(col_item, "name")
      field "tags", jmes_path(col_item, "tags")
      field "expirationDate", jmes_path(col_item, "properties.expirationDate")
      field "subjectName", jmes_path(col_item, "properties.subjectName")
      field "issuer", jmes_path(col_item, "properties.issuer")
      field "issueDate", jmes_path(col_item, "properties.issueDate")
      field "hostNames", jmes_path(col_item, "properties.hostNames")
      field "thumbprint", jmes_path(col_item, "properties.thumbprint")
      field "keyVaultId", jmes_path(col_item, "properties.keyVaultId")
      field "keyVaultSecretName", jmes_path(col_item, "properties.keyVaultSecretName")
      field "keyVaultSecretStatus", jmes_path(col_item, "properties.keyVaultSecretStatus")
    end
  end
end

datasource "ds_filtered_certificates" do
  run_script $js_filter_certificates, $ds_certificates, $param_exclusion_tag_key, $param_numberofdays
end

###############################################################################
# Scripts
###############################################################################
script "js_filter_certificates", type: "javascript" do
  parameters "certificates", "exclusion_tag", "expire_days"
  result "result"
  code <<-EOS
    var result = [];
    nowDate = new Date();

    _.each(certificates, function(test_cert) {
      if (!(_.has(test_cert.tags, exclusion_tag))) {
        cert = test_cert
        cert["rgName"] = cert["id"].split('/')[4]
        cert["certStatus"] = "Active";

        compareDate = new Date(cert["expirationDate"]);
        if (nowDate > compareDate) {
          cert["certStatus"] = "Expired";
        }

        if ((expire_days > ((compareDate - nowDate) / 86400000)) || cert["certStatus"] == "Expired") {
          result.push(cert)
        }
      }
    })

    result = _.sortBy(result, 'subscriptionName');
    result = _.sortBy(result, 'rgName');
EOS
end
###############################################################################
# Policy
###############################################################################

policy "azure_certificate_policy" do
  validate_each $ds_filtered_certificates do
    summary_template "Expiring/Expired Certificates Found: {{ len data }} App Service Certificates"
    detail_template <<-EOS
# Azure Certificates
| Subscription Name	| Resource Group | Location |	Expiration Date	| Subject	| Certificate Name | Issuer | Issue Date | Host Names	| Thumbprint | Key Vault ID | Key Vault Secret Name | Key Vault Secret Status | Certificate Status |
| ----------------- | -------------- | -------- | --------------- | ------- | ---------------- | ------ | ---------- | ---------- | ---------- | ------------ | --------------------- | ----------------------- | ------------------ |
{{ range data -}}
|{{.subscriptionName}} | {{.rgName}} | {{.location}} | {{.expirationDate}} | {{.name}} | {{.subjectName}} | {{.issuer}} | {{.issueDate}} | {{.hostNames}} | {{.thumbprint}} | {{.keyVaultId}} | {{.keyVaultSecretName}} | {{.keyVaultSecretStatus}} | {{.certStatus}} |
{{ end -}}

###### Policy Applied in Account: {{ rs_project_name }} (Account ID: {{ rs_project_id }}) within Org: {{ rs_org_name }} (Org ID: {{ rs_org_id }})
EOS
    escalate $esc_report_bad_certs
    check eq(val(item, "id"), "")
  end
end

###############################################################################
# Escalations
###############################################################################

escalation "esc_report_bad_certs" do
  automatic true
  label "Send Email"
  description "Send incident email"
  email $param_email
end

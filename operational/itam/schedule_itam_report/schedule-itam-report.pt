name "Schedule ITAM Report"
rs_pt_ver 20180301
type "policy"
short_description "Schedule a Flexera ITAM report (Custom view) and send it as a email to one or more recipients.  See the [README](https://github.com/flexera-public/policy_templates/tree/master/operational/itam/schedule_itam_reports) and [docs.flexera.com/flexera/EN/Automation](https://docs.flexera.com/flexera/EN/Automation/AutomationGS.htm) to learn more."
long_description ""
severity "medium"
category "Operational"
default_frequency "weekly"
info(
  version: "0.1.0",
  provider: "Flexera ITAM",
  service: "",
  policy_set: "Schedule Flexera ITAM Report"
)

###############################################################################
# User inputs
###############################################################################

parameter "param_report_id" do
  type "string"
  label "Flexera ITAM Report ID"
  description "Flexera ITAM Custom View Report ID"
end

parameter "param_report_title" do
  type "string"
  label "Report Title in the Mail"
  default "Flexera ITAM Report"
  description "Report header in the report result (e.g. Flexera ITAM Report)"
end

parameter "param_email" do
  type "list"
  label "Email addresses of the recipients you wish to notify"
  description "A list of email addresse(s) to notify"
  default []
end

###############################################################################
# Authentication
###############################################################################

credentials "auth_flexera" do
  schemes "oauth2"
  label "flexera"
  description "Select Flexera One OAuth2 credentials"
  tags "provider=flexera"
end

###############################################################################
# Pagination
###############################################################################

pagination "itam_pagination" do
  get_page_marker do
    body_path jq(response, 'try(.nextPage | split("skipToken=") | .[1] | rtrimstr("%3D") | .+"=") catch null') # The skipToken is url encoded, so we need to decode the %3D to = .  This is not ideal implementation this seems to be enough without a true urldecode function
  end
  set_page_marker do
    query "skipToken"
  end
end

###############################################################################
# Datasources
###############################################################################

# /fnms/v1/orgs/{orgId}/reports/{id}/execute
datasource "ds_fnms_report_execute" do
  request do
    auth $auth_flexera
    pagination $itam_pagination
    verb "GET"
    host join(["api.", get(1, split(f1_app_host, "app."))])
    path join(["/fnms/v1/orgs/",rs_org_id,"/reports/",$param_report_id,"/execute"])
    header "Content-Type","application/json"
    header "User-Agent", "RS Policies"
  end
  result do
    encoding "json"
    field "values", jmes_path(response, "values")
  end
end

datasource "ds_fnms_reports_combined" do
  run_script $js_fnms_reports_combined, $ds_fnms_report_execute
end

script "js_fnms_reports_combined", type: "javascript" do
  parameters "ds_fnms_report_execute"
  result "result"
  code <<-EOF
    var result = [];
    _.each(ds_fnms_report_execute, function(page) {
      _.each(page.values, function(value) {
        result.push(value);
      });
    });
  EOF
end

datasource "ds_markdown_report" do
  run_script $js_markdown_report, $ds_fnms_reports_combined, $param_report_title
end

script "js_markdown_report", type: "javascript" do
  parameters "data", "name"
  result "result"
  code <<-EOS
    var result = {};
    result.name = name;
    result.sResult = "";

    //Function repeats a character a number of times
    function pad(input, times) {
        sRet = "";
        for (i=0; i < times; i++) sRet += input;
        return sRet;
    }

    function humanizeColumnName(key) {
      // Attempt to format the column name to something more human readable
      // This is not perfect, but it is better than the raw column name
      // Example starting key: "R2_38ad0c2d447c5fb62fbafb7ea424cbdb_UserToAssignedAsset_AssetID"
      var formattedName = key.split("_"); // Split on _ Result: [R2, 38ad0c2d447c5fb62fbafb7ea424cbdb, UserToAssignedAsset, AssetID]
      // If the first element is `R[0-9]` and the second element is `[a-z0-9]+` then remove the first two elements
      if (formattedName[0].match(/R[0-9]/) && formattedName[1].match(/[a-z0-9]+/) ) {
        formattedName = formattedName.slice(2); // Remove the first two elements Result: [UserToAssignedAsset, AssetID]
      }
      formattedName = formattedName.join(" / "); // Join the remaining column name values with a ` / `. Result: "UserToAssignedAsset / AssetID"
      formattedName = formattedName.replace(/([A-Z])+/g, " $&"); // Add space before each sequential series of capital letter. Result: "User To Assigned Asset / Asset ID"
      formattedName = formattedName.charAt(0).toUpperCase() + formattedName.slice(1);
      formattedName = formattedName.trim();
      return formattedName;
    }

    //get the header columns
    result.columns = [];
    // Use first row to get the column names
    // This assumes that all rows have the same columns
    // Put object keys and labels into an ordered array to make the output consistent
    _.each( _.keys(data[0]).sort(), function(key) {
      var label = humanizeColumnName(key);
      result.columns.push({
        // key is used to get the value from the row
        "key": key,
        // label is used in the output report as a column header
        "label": label,
        // label_pad is used for the second row of the markdown table to create a separator
        "label_pad": pad('-',label.length)
      });
    });
    // Begin constructing the markdown table
    // sResult is the markdown table as a string
    result.sResult = "";

    // First line of a markdown table has the column header names
    // | column1 | column2 | column3 | ... |
    result.sResult += "| " + _.pluck(result.columns, 'label').join(' | ').trim() + " |\\n";
    // Second line of a markdown table has the column header separators
    // | ------- | ------- | ------- | ... |
    result.sResult += "| " + _.pluck(result.columns, 'label_pad').join(' | ') + " |\\n";

    // Now the rest of the table the data
    _.each(data, function(line) {
      // sLine holds the string for the current row in the markdown table
      // Start row with `| `
      sLine = "| ";
      // For each column, use the key to get the value from the row
      // This is needed to prevent printing the values of object in different order than the column headers
      _.each(result.columns, function(column) {
        // Append to sLine the value from the row and column and a closing ` | `
        sLine += line[column.key] + " | ";
      });
      // Trim the trailing whitespace and add a newline to finish the row
      result.sResult += sLine.trim() + "\\n";
    });
  EOS
end

###############################################################################
# Policy
###############################################################################

policy 'policy_fnms_reports_combined' do
  validate $ds_markdown_report do
    summary_template "Flexera ITAM Report - {{data.name}}"
    detail_template <<-EOS
{{data.sResult}}
    EOS
    escalate $esc_send_report
    check eq(1, 0) # The check always fails which results in the escalation always triggering
  end
end

###############################################################################
# Escalations
###############################################################################

escalation "esc_send_report" do
  automatic true
  label "Send Email"
  description "Send incident email"
  email $param_email
end

name "VMWare Instance Tag Sync"
rs_pt_ver 20180301
type "policy"
short_description "Adds tags to vmware instances from CMP. See the [README](https://github.com/rightscale/policy_templates/tree/master/operational/vmware/instance_tag_sync) and [docs.rightscale.com/policies](http://docs.rightscale.com/policies/) to learn more."
long_description ""
severity "medium"
category "Operational"
info(
  version: "1.6",
  provider: "Flexera Cloud Management",
  service: "",
  policy_set: ""
  )

###############################################################################
# Permissions
###############################################################################

permission "perm_retrieve_resources" do
  label "Retrieve Resources"
  actions   "rs_cm.index","rs_cm.show"
  resources "rs_cm.instances","rs_cm.volumes","rs_cm.clouds"
end

permission "perm_tags" do
  label "Retrieve and add Tags"
  actions "rs_cm.by_resource","rs_cm.multi_add"
  resources "rs_cm.tags"
end

###############################################################################
# Parameters
###############################################################################

parameter "param_email" do
  type "list"
  label "Email addresses"
  description "A list of email addresses to notify"
end

parameter "param_cloud_name" do
  type "string"
  label "Cloud Name"
end

parameter "param_wstunnel_host" do
  type "string"
  label "wstunnel host"
  default "wstunnel10-1.rightscale.com"
end

parameter "param_wstunnel_token" do
  type "string"
  label "wstunnel token"
  no_echo true
end

parameter "param_vsphere_username" do
  type "string"
  label "vsphere username"
    no_echo true
end

parameter "param_vsphere_password" do
  type "string"
  label "vsphere password"
  no_echo true
end

parameter "param_tag_category" do
  type "string"
  label "tag category"
  default "RightScale"
end

parameter "param_automatic_action" do
  type "list"
  label "Automatic Actions"
  description "When this value is set, this policy will automatically take the selected action(s)"
  allowed_values ["Synchronize Tags"]
end

###############################################################################
# Authentication
###############################################################################

auth "auth_rs", type: "rightscale"

###############################################################################
# Resources
###############################################################################
resources "clouds", type: "rs_cm.clouds" do
  filter do
    cloud_type "vscale"
    name $param_cloud_name
  end
end

resources "instances", type: "rs_cm.instances" do
  iterate @clouds
  cloud_href href(iter_item)
  filter do
    state ne: ['inactive', 'terminated']
  end
  tags '*'
end

###############################################################################
# Datasources
###############################################################################

datasource "ds_clouds" do
  iterate @clouds
  field "href", href(iter_item)
  field "name", val(iter_item, "display_name")
end

datasource "ds_instances_and_tags" do
  iterate @instances
  field "href",        href(iter_item)
  field "id",          val(iter_item,'resource_uid')
  field "name",        val(iter_item,'name')
  field "state",       val(iter_item,'state')
  field "tags",        val(iter_item,'tags')
  field "cloud_href", jmes_path(iter_item, "links[?rel=='cloud'].href | [0]")
  field "type",        "instances"
end

datasource "ds_instances_and_tags_and_cloud" do
  run_script $js_instances_and_tags_and_cloud, $ds_instances_and_tags, $ds_clouds
end

###############################################################################
# Scripts
###############################################################################

script "js_instances_and_tags_and_cloud", type: "javascript" do
  parameters "ds_instances_and_tags", "ds_clouds"
  result "results"
  code <<-EOF
    var results = []
    // create a map of clouds with href key to get name
    var cloud_map = {}
    for (var i = 0; i < ds_clouds.length; i++) {
      var cloud = ds_clouds[i]
      cloud_map[cloud['href']]={'name': cloud['name']}
    }
    for ( i = 0; i < ds_instances_and_tags.length; i++ ) {
      var instance = ds_instances_and_tags[i]
      results.push({
        id: instance.id,
        name: instance.name,
        href: instance.href,
        state: instance.state,
        cloud_name: cloud_map[instance.cloud_href]['name'],
        tags: instance.tags,
        type: instance.type,
      })
    }
    results = _.sortBy(results, 'cloud_name');
  EOF
end

###############################################################################
# Policy
###############################################################################

policy "policy_instance_sync" do
  validate_each $ds_instances_and_tags_and_cloud do
    summary_template "{{ rs_project_name }} (Account ID: {{ rs_project_id }}): {{ len data }} tags will be synced on {{ parameters.param_cloud_name }}"
    export do
      resource_level true
      field "cloud_name" do
        label "Cloud"
      end
      field "name" do
        label "Name"
      end
      field "state" do
        label "State"
      end
      field "tags" do
        label "Tags"
      end
      field "id" do
        label "Instance Id"
      end
    end
    check equals?(1,0)
    escalate $esc_email
    escalate $escalate_resources
  end
end

###############################################################################
# Escalations
###############################################################################

escalation "escalate_resources" do
  automatic contains($param_automatic_action, "Synchronize Tags")
  label "Sync Tags"
  description "Sync Tags"
  run "update_tags", data, $param_wstunnel_host, $param_wstunnel_token, $param_vsphere_username, $param_vsphere_password, $param_tag_category
end

escalation "esc_email" do
  automatic true
  label "Send Email"
  description "Send incident email"
  email $param_email
end

###############################################################################
# Cloud Workflow
###############################################################################

define update_tags($data, $param_wstunnel_host, $param_wstunnel_token, $param_vsphere_username, $param_vsphere_password, $param_tag_category) do
  $$debug=true
  call sys_log('VMWare Instance Tag Sync',to_s($data))
  call generate_session_token($param_wstunnel_host, $param_wstunnel_token, $param_vsphere_username, $param_vsphere_password) retrieve $session_token
  call sys_log("session_token:",$session_token)
  # $category_id = "urn:vmomi:InventoryServiceCategory:f9c8236f-7320-47f0-8daa-1d7c83a673ab:GLOBAL"
  call list_categories($param_wstunnel_host, $param_wstunnel_token, $session_token) retrieve $category_ids
  $category_id = null
  foreach $category in $category_ids do
    call get_category($param_wstunnel_host, $param_wstunnel_token, $session_token, $category) retrieve $spec
    if $spec["name"] == $param_tag_category
      $category_id = $category
    end
  end

  if $category_id == null
    call create_category($param_wstunnel_host, $param_wstunnel_token, $session_token,"MULTIPLE", "rightscale tag category", $param_tag_category) retrieve $category_id
  end
  $$tag_array = []
  foreach $instance in $data do
    call sys_log('VMWare Instance sync: ',to_s($instance))
    $data_tags = $instance["tags"]
    $$c_tag_ids = []
    call list_tags_by_category($param_wstunnel_host, $param_wstunnel_token, $session_token, $category_id) retrieve $tag_ids_cat
    $$c_tag_ids = $tag_ids_cat
    $$detach_response = []
    if size($tag_ids_cat) > 0
      foreach $tag_id in $tag_ids_cat do
        call detach_tag($param_wstunnel_host,$param_wstunnel_token, $session_token, $tag_id, $instance["id"]) retrieve $response_detach
        $$detach_response << $response_detach
      end
    end
    call list_tags($param_wstunnel_host, $param_wstunnel_token, $session_token) retrieve $tag_ids
    call sys_log("tag_ids:", to_s($tag_ids))
    task_label('populating tags list')
    foreach $tag_id in $tag_ids do
      $match_tag = first(select($$tag_array, { "id": $tag_id }))
      if $match_tag == null
        call get_tag($param_wstunnel_host, $param_wstunnel_token, $session_token, $tag_id) retrieve $spec_tag
        $$tag_array << { "name": $spec_tag["name"], "id": $spec_tag["id"] }
      end
    end
    $$matching_tag = []
    foreach $tag in $data_tags do
      task_label('instance:' + $instance["name"] + ', tag: '+ $tag)
      $match_tag = first(select($$tag_array, { "name": $tag }))
      if $match_tag == null
        $$matching_id = null
      else
        call sys_log("matched tag:",$tag)
        $$matching_tag << $match_tag
        $$matching_id = $match_tag["id"]
      end
      if $$matching_id == null
        call create_tag($param_wstunnel_host, $param_wstunnel_token, $session_token, $category_id, "rightscale synced tag", $tag) retrieve $tag_id
      else
        $tag_id = $$matching_id
      end
      call attach_tag($param_wstunnel_host, $param_wstunnel_token, $session_token, $tag_id, $instance["id"]) retrieve $response_attach
    end
  end
end

# https://vdc-repo.vmware.com/vmwb-repository/dcr-public/1cd28284-3b72-4885-9e31-d1c6d9e26686/71ef7304-a6c9-43b3-a3cd-868b2c236c81/doc/operations/com/vmware/cis/session.create-operation.html
define generate_session_token($param_wstunnel_host, $tunnel_token, $username, $password) return $token do
  $$str = $username + ":" + $password
  $$encoded_auth = to_base64($$str)
  sub on_error: handle_error("Session token error:", $response) do
    $response = http_post(
      insecure: true,
      url: "https://"+$param_wstunnel_host+"/_token/"+$tunnel_token+"/rest/com/vmware/cis/session",
      headers: {
        "Accept": "application/json",
        "Authorization": "Basic " + $$encoded_auth
      }
    )
    call sys_log("Response", to_s($response))
    $token = $response["body"]["value"]
  end
end

# https://vdc-repo.vmware.com/vmwb-repository/dcr-public/1cd28284-3b72-4885-9e31-d1c6d9e26686/71ef7304-a6c9-43b3-a3cd-868b2c236c81/doc/operations/com/vmware/cis/tagging/category.create-operation.html
define create_category($param_wstunnel_host, $tunnel_token, $session_token, $cardinality, $description, $name) return $category_id do
  sub on_error: handle_error("Create category error :", $response) do
    $response = http_post(
      insecure: true,
      url: "https://"+$param_wstunnel_host+"/_token/"+$tunnel_token+"/rest/com/vmware/cis/tagging/category",
      headers: {
        "Accept": "application/json",
        "Content-Type": "application/json",
        "vmware-api-session-id": $session_token
      },
      body: {
        "create_spec": {
          "associable_types": [],
          "cardinality": $cardinality,
          "description": $description,
          "name": $name
        }
      }
    )
    $category_id = $response["body"]["value"]
  end
end

# https://vdc-repo.vmware.com/vmwb-repository/dcr-public/1cd28284-3b72-4885-9e31-d1c6d9e26686/71ef7304-a6c9-43b3-a3cd-868b2c236c81/doc/operations/com/vmware/cis/tagging/category.list-operation.html
define list_categories($param_wstunnel_host, $tunnel_token, $session_token) return $category_ids do
  sub on_error: handle_error("List category error :", $response) do
    $response = http_get(
      insecure: true,
      url: "https://"+$param_wstunnel_host+"/_token/"+$tunnel_token+"/rest/com/vmware/cis/tagging/category",
      headers: {
        "Accept": "application/json",
        "Content-Type": "application/json",
        "vmware-api-session-id": $session_token
      }
    )
    $category_ids = $response["body"]["value"]
  end
end

# https://vdc-repo.vmware.com/vmwb-repository/dcr-public/1cd28284-3b72-4885-9e31-d1c6d9e26686/71ef7304-a6c9-43b3-a3cd-868b2c236c81/doc/operations/com/vmware/cis/tagging/category.get-operation.html
define get_category($param_wstunnel_host, $tunnel_token, $session_token, $category_id) return $spec do
  sub on_error: handle_error("Get category error :", $response) do
    $response = http_get(
      insecure: true,
      url: "https://"+$param_wstunnel_host+"/_token/"+$tunnel_token+"/rest/com/vmware/cis/tagging/category/id:"+$category_id,
      headers: {
        "Accept": "application/json",
        "Content-Type": "application/json",
        "vmware-api-session-id": $session_token
      }
    )
    $spec = $response["body"]["value"]
  end
end

# https://vdc-repo.vmware.com/vmwb-repository/dcr-public/1cd28284-3b72-4885-9e31-d1c6d9e26686/71ef7304-a6c9-43b3-a3cd-868b2c236c81/doc/operations/com/vmware/cis/tagging/category.update-operation.html
define update_category($param_wstunnel_host, $tunnel_token, $session_token, $category_id, $cardinality, $description, $name) return $response do
  sub on_error: handle_error("Update category error :", $response) do
    $response = http_patch(
      insecure: true,
      url: "https://"+$param_wstunnel_host+"/_token/"+$tunnel_token+"/rest/com/vmware/cis/tagging/category/id:"+$category_id,
      headers: {
        "Accept": "application/json",
        "Content-Type": "application/json",
        "vmware-api-session-id": $session_token
      },
      body: {
        "update_spec": {
          "associable_types": [],
          "cardinality": $cardinality,
          "description": $description,
          "name": $name
        }
      }
    )
  end
end

# https://vdc-repo.vmware.com/vmwb-repository/dcr-public/1cd28284-3b72-4885-9e31-d1c6d9e26686/71ef7304-a6c9-43b3-a3cd-868b2c236c81/doc/operations/com/vmware/cis/tagging/category.delete-operation.html
define delete_category($param_wstunnel_host, $tunnel_token, $session_token, $category_id) return $response do
  sub on_error: handle_error("Delete category error :", $response) do
    $response = http_delete(
      insecure: true,
      url: "https://"+$param_wstunnel_host+"/_token/"+$tunnel_token+"/rest/com/vmware/cis/tagging/category/id:"+$category_id,
      headers: {
        "Accept": "application/json",
        "Content-Type": "application/json",
        "vmware-api-session-id": $session_token
      }
    )
  end
end

# https://vdc-repo.vmware.com/vmwb-repository/dcr-public/1cd28284-3b72-4885-9e31-d1c6d9e26686/71ef7304-a6c9-43b3-a3cd-868b2c236c81/doc/operations/com/vmware/cis/tagging/tag.create-operation.html
define create_tag($param_wstunnel_host, $tunnel_token, $session_token, $category_id, $description, $name) return $tag_id do
  sub on_error: handle_error("Create tag error :", $response) do
    $response = http_post(
      insecure: true,
      url: "https://"+$param_wstunnel_host+"/_token/"+$tunnel_token+"/rest/com/vmware/cis/tagging/tag",
      headers: {
        "Accept": "application/json",
        "Content-Type": "application/json",
        "vmware-api-session-id": $session_token
      },
      body: {
        "create_spec": {
          "category_id": $category_id,
          "description": $description,
          "name": $name
        }
      }
    )
    $tag_id = $response["body"]["value"]
  end
end

# https://vdc-repo.vmware.com/vmwb-repository/dcr-public/1cd28284-3b72-4885-9e31-d1c6d9e26686/71ef7304-a6c9-43b3-a3cd-868b2c236c81/doc/operations/com/vmware/cis/tagging/tag.list-operation.html
define list_tags($param_wstunnel_host, $tunnel_token, $session_token) return $tag_ids do
  sub on_error: handle_error("List Tags error :", $response) do
    $response = http_get(
      insecure: true,
      url: "https://"+$param_wstunnel_host+"/_token/"+$tunnel_token+"/rest/com/vmware/cis/tagging/tag",
      headers: {
        "Accept": "application/json",
        "Content-Type": "application/json",
        "vmware-api-session-id": $session_token
      }
    )
    $tag_ids = $response["body"]["value"]
  end
end

# https://vdc-repo.vmware.com/vmwb-repository/dcr-public/1cd28284-3b72-4885-9e31-d1c6d9e26686/71ef7304-a6c9-43b3-a3cd-868b2c236c81/doc/operations/com/vmware/cis/tagging/tag.list-operation.html
define list_tags_by_category($param_wstunnel_host, $tunnel_token, $session_token, $category_id) return $tag_ids do
  sub on_error: handle_error("List tags by category error :", $response) do
    $response = http_post(
      insecure: true,
      url: "https://"+$param_wstunnel_host+"/_token/"+$tunnel_token+"/rest/com/vmware/cis/tagging/tag/id:"+$category_id+"?~action=list-tags-for-category",
      headers: {
        "Accept": "application/json",
        "Content-Type": "application/json",
        "vmware-api-session-id": $session_token
      }
    )
    $tag_ids = $response["body"]["value"]
  end
end

# https://vdc-repo.vmware.com/vmwb-repository/dcr-public/1cd28284-3b72-4885-9e31-d1c6d9e26686/71ef7304-a6c9-43b3-a3cd-868b2c236c81/doc/operations/com/vmware/cis/tagging/tag.get-operation.html
define get_tag($param_wstunnel_host, $tunnel_token, $session_token, $tag_id) return $spec do
  sub on_error: handle_error("Get tag error :", $response) do
    $response = http_get(
      insecure: true,
      url: "https://"+$param_wstunnel_host+"/_token/"+$tunnel_token+"/rest/com/vmware/cis/tagging/tag/id:"+$tag_id,
      headers: {
        "Accept": "application/json",
        "Content-Type": "application/json",
        "vmware-api-session-id": $session_token
      }
    )
    $spec = $response["body"]["value"]
  end
end

# https://vdc-repo.vmware.com/vmwb-repository/dcr-public/1cd28284-3b72-4885-9e31-d1c6d9e26686/71ef7304-a6c9-43b3-a3cd-868b2c236c81/doc/operations/com/vmware/cis/tagging/tag.update-operation.html
define update_tag($param_wstunnel_host, $tunnel_token, $session_token, $tag_id, $description, $name) return $response do
  sub on_error: handle_error("Update tag error :", $response) do
    $response = http_post(
      insecure: true,
      url: "https://"+$param_wstunnel_host+"/_token/"+$tunnel_token+"/rest/com/vmware/cis/tagging/tag/id:"+$tag_id,
      headers: {
        "Accept": "application/json",
        "Content-Type": "application/json",
        "vmware-api-session-id": $session_token
      },
      body: {
        "update_spec": {
          "description": $description,
          "name": $name
        }
      }
    )
  end
end

# https://vdc-repo.vmware.com/vmwb-repository/dcr-public/1cd28284-3b72-4885-9e31-d1c6d9e26686/71ef7304-a6c9-43b3-a3cd-868b2c236c81/doc/operations/com/vmware/cis/tagging/tag.delete-operation.html
define delete_tag($param_wstunnel_host, $tunnel_token, $session_token, $tag_id) return $response do
  sub on_error: handle_error("Delete tag error :", $response) do
    $response = http_delete(
      insecure: true,
      url: "https://"+$param_wstunnel_host+"/_token/"+$tunnel_token+"/rest/com/vmware/cis/tagging/tag/id:"+$tag_id,
      headers: {
        "Accept": "application/json",
        "Content-Type": "application/json",
        "vmware-api-session-id": $session_token
      }
    )
  end
end

# https://vdc-repo.vmware.com/vmwb-repository/dcr-public/1cd28284-3b72-4885-9e31-d1c6d9e26686/71ef7304-a6c9-43b3-a3cd-868b2c236c81/doc/operations/com/vmware/cis/tagging/tag_association.attach-operation.html
define attach_tag($param_wstunnel_host, $tunnel_token, $session_token, $tag_id, $resource_id) return $response do
  sub on_error: handle_error("Attach tag error :", $response) do
    $response = http_post(
      insecure: true,
      url: "https://"+$param_wstunnel_host+"/_token/"+$tunnel_token+"/rest/com/vmware/cis/tagging/tag-association/id:"+$tag_id+"?~action=attach",
      headers: {
        "Accept": "application/json",
        "Content-Type": "application/json",
        "vmware-api-session-id": $session_token
      },
      body: {
        "object_id": {
          "id": $resource_id,
          "type": "VirtualMachine"
        }
      }
    )
  end
end

# https://vdc-repo.vmware.com/vmwb-repository/dcr-public/1cd28284-3b72-4885-9e31-d1c6d9e26686/71ef7304-a6c9-43b3-a3cd-868b2c236c81/doc/operations/com/vmware/cis/tagging/tag_association.detach-operation.html
define detach_tag($param_wstunnel_host, $tunnel_token, $session_token, $tag_id, $resource_id) return $response do
  sub on_error: handle_error("Detach tag error :", $response) do
    $response = http_post(
      insecure: true,
      url: "https://"+$param_wstunnel_host+"/_token/"+$tunnel_token+"/rest/com/vmware/cis/tagging/tag-association/id:"+$tag_id+"?~action=detach",
      headers: {
        "Accept": "application/json",
        "Content-Type": "application/json",
        "vmware-api-session-id": $session_token
      },
      body: {
        "object_id": {
          "id": $resource_id,
          "type": "VirtualMachine"
        }
      }
    )
  end
end

define handle_error($subject, $response) do
  call sys_log($subject,to_s($response))
  $_error_behavior = "raise"
end

define sys_log($subject, $detail) do
  if $$debug
    rs_cm.audit_entries.create(
      notify: "None",
      audit_entry: {
        auditee_href: @@account,
        summary: $subject,
        detail: $detail
      }
    )
  end
end

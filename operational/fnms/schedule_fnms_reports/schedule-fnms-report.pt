name "Schedule FlexNet Manager Report"
rs_pt_ver 20180301
type "policy"
short_description "Schedule a FlexNet Manager report (Custom view) and send it as a email to one or more recipients.  This template uses the SOAP version of the FlexNet Manager APIs.  See the [README](https://github.com/flexera-public/policy_templates/tree/master/operational/fnms/schedule_fnms_reports) and [docs.flexera.com/flexera/EN/Automation](https://docs.flexera.com/flexera/EN/Automation/AutomationGS.htm) to learn more."
long_description ""
severity "medium"
category "Operational"
default_frequency "weekly"
info(
  version: "3.0",
  provider: "Flexera",
  service: "FNMS",
  policy_set: "Schedule Report"
)

parameter "param_fnms_host" do
  type "string"
  label "FlexNet Manager host"
  description "Flexera One FlexNet Manager host"
  allowed_values "slo.app.flexera.com", "slo.app.flexera.eu", "slo.app.flexera.au", "slo-uat.app.flexera.com", "slo-uat.app.flexera.eu", "slo-uat.app.flexera.au"
  # No default value because parameter is required
end

parameter "param_report_id" do
  type "string"
  label "FlexNet Manager Report ID"
  description "IT Asset Management Custom View ID"
  # No default value because parameter is required
end

parameter "param_report_title" do
  type "string"
  label "Report Title in the Mail"
  default "FlexNet Manager Report"
  description "Report header in the report result (e.g. FlexNet Manager Report)"
end

parameter "param_email" do
  type "list"
  label "Email addresses of the recipients you wish to notify"
  description "A list of email address(es) to notify"
  default []
end

credentials "auth_flexera" do
  schemes "oauth2"
  label "flexera"
  description "Select Flexera One OAuth2 credentials."
  tags "provider=flexera"
end

# Make API call and get the header data
datasource "ds_itam_report_header" do
  request do
    auth $auth_flexera
    host $param_fnms_host
    verb "POST"
    scheme "https"
    path "/ManageSoftServices/ComplianceAPIService/ComplianceAPIService.asmx"
    query "orgid", to_s(rs_org_id) # Must convert rs_org_id to string otherwise query param does not get set
    header "Content-Type", "text/xml;charset=utf-8"
    body join(['<?xml version="1.0" encoding="utf-8"?>',
                '<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:tem="http://tempuri.org/">',
                '  <soap:Body>',
                '    <tem:GetCustomView>',
                '      <tem:customViewID>', $param_report_id, '</tem:customViewID>',
                '      <tem:rowLimit>100000</tem:rowLimit>',
                '   </tem:GetCustomView>',
                '  </soap:Body>',
                '</soap:Envelope>'])
  end
  result do
    encoding "xml"
    collect xpath(response,"//choice/element[@name='SearchResults']/complexType/sequence/element") do
      field "name", xpath(col_item, "@name")
      field "caption", xpath(col_item, "@Caption")
    end
  end
end

# Make API call and get the report data
datasource "ds_itam_report" do
  request do
    auth $auth_flexera
    host $param_fnms_host
    verb "POST"
    scheme "https"
    path "/ManageSoftServices/ComplianceAPIService/ComplianceAPIService.asmx"
    query "orgid", to_s(rs_org_id) # Must convert rs_org_id to string otherwise query param does not get set
    header "Content-Type", "text/xml;charset=utf-8"
    body join(['<?xml version="1.0" encoding="utf-8"?>',
                '<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:tem="http://tempuri.org/">',
                '  <soap:Body>',
                '    <tem:GetCustomView>',
                '      <tem:customViewID>', $param_report_id, '</tem:customViewID>',
                '      <tem:rowLimit>100000</tem:rowLimit>',
                '   </tem:GetCustomView>',
                '  </soap:Body>',
                '</soap:Envelope>'])
  end
  result do
    encoding "text"
  end
end

datasource "ds_xml2json" do
  run_script $js_xml2json, $ds_itam_report, $ds_itam_report_header
end

script "js_xml2json", type: "javascript" do
  parameters "sXML", "header"
  result "result"
  code <<-EOS

        var includeID = false;  //Flag for including columns with ID in it
        var result = {};
        result.header = [];

        //First build the header area..
        for (i=0; i< header.length; i++) {
          var item ={};
          item.name = header[i].name;
          item.caption = header[i].caption.length != 0 ? header[i].caption : header[i].name;
          item.show = ((header[i].name.indexOf("ID") === header[i].name.length - 2) && (i==0)) ? false : true;   //Strip 1 row if name ends in with ID
          result.header.push(item);
        }

        result.data = [];

        //Now extract the data part
        RawData = sXML.split("<NewDataSet");
        if (RawData.length > 1) {
          RawData = RawData[1].split("</NewDataSet");
          //strip the tailing > in the data from last node.
          sRawData = "" + RawData[0].substr(RawData[0].indexOf(">")+1);

          //Now split it into
          DataCollection = sRawData.split("<SearchResults");
          if (DataCollection.length > 0) {
            //Walk through the collection
            for (i=0; i < DataCollection.length; i++) {
              //Get each columns based on the header
              var row = {};
              for (x=0; x< result.header.length; x++) {
                sRaw = DataCollection[i]
                sRaw = sRaw.substr(sRaw.indexOf("<" + result.header[x].name +">")+2+result.header[x].name.length);
                sVal = sRaw.substr(0,sRaw.indexOf("</" + result.header[x].name +">"));

                row[result.header[x].name] = sVal;
              }
              result.data.push(row);
            }
          }
            /* else {   //Build one blank row
            var row = {};
              for (x=0; x< result.header.length; x++) {
                row[result.header[x].name] = "";
              }
              result.data.push(row);
            }
            */
        }

  EOS
end

datasource "ds_json2markdowntable" do
  run_script $js_json2markdowntable, $ds_xml2json, $param_report_title
end

script "js_json2markdowntable", type: "javascript" do
  parameters "data", "name"
  result "result"
  code <<-EOS
    var result = {};
    result.name = name;
    result.sResult = "";

    //Function repeats a character a number of times
    function pad(input, times) {
        sRet = "";
        for (i=0; i < times; i++) sRet += input;
        return sRet;
    }

    //format the Report output
    result.sResult = "| ";
    var sSeparator = "| ";
    for (x=0; x < data.header.length; x++) {
      if (data.header[x].show) {
        result.sResult += data.header[x].caption + " | ";
        sSeparator += pad('-',data.header[x].caption.length) + " | ";
      }
    }
    result.sResult = result.sResult.trim() + "\\n";
    result.sResult += sSeparator.trim() + "\\n";

    //now the data
    for (i=0; i < data.data.length; i++) {
      if (data.data[i][data.header[0].name] != "") {
        sLine = "| ";
        for (x=0; x < data.header.length; x++) {
          if (data.header[x].show) {
            sLine += data.data[i][data.header[x].name] + " | ";
          }
        }
        result.sResult += sLine.trim() + "\\n";
      }
    }
  EOS
end

policy 'fnms_report_policy' do
  validate $ds_json2markdowntable do
    summary_template "FlexNet Manager Report - {{data.name}}"
    detail_template <<-EOS
{{data.sResult}}
    EOS
    escalate $send_report
    check eq(1, 0) # Always fail the check to trigger escalation every time policy runs
  end
end

escalation "send_report" do
  automatic true
  label "Send Email"
  description "Send incident email"
  email $param_email
end

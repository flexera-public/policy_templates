name "AWS Subnet Name Tag Sync"
rs_pt_ver 20180301
type "policy"
short_description "Ensures Subnet names in Flexera Cloud Management align with the Subnet name tag in AWS. See the [README](https://github.com/flexera-public/policy_templates/tree/master/operational/aws/subnet_name_sync) and [docs.flexera.com/flexera/EN/Automation](https://docs.flexera.com/flexera/EN/Automation/AutomationGS.htm) to learn more."
long_description ""
category "Operational"
severity "medium"
default_frequency "weekly"
info(
  version: "4.0",
  provider: "AWS",
  service: "VPC",
  policy_set: "",
  publish: "false"
)

###############################################################################
# Parameters
###############################################################################

parameter "param_email" do
  type "list"
  category "Policy Settings"
  label "Email addresses to notify"
  description "Email addresses of the recipients you wish to notify when new incidents are created"
  default []
end

parameter "param_aws_account_number" do
  type "string"
  category "Policy Settings"
  label "Account Number"
  description "Leave blank; this is for automated use with Meta Policies. See README for more details."
  default ""
end

parameter "param_regions_allow_or_deny" do
  type "string"
  category "Filters"
  label "Allow/Deny Regions"
  description "Allow or Deny entered regions. See the README for more details"
  allowed_values "Allow", "Deny"
  default "Allow"
end

parameter "param_regions_list" do
  type "list"
  category "Filters"
  label "Allow/Deny Regions List"
  allowed_pattern /^([a-zA-Z-_]+-[a-zA-Z0-9-_]+-[0-9-_]+,*|)+$/
  description "A list of allowed or denied regions. See the README for more details"
  default []
end

parameter "param_automatic_action" do
  type "list"
  category "Actions"
  label "Automatic Actions"
  description "When this value is set, this policy will automatically take the selected action(s)"
  allowed_values ["Update Subnets"]
  default []
end

###############################################################################
# Authentication
###############################################################################

credentials "auth_aws" do
  schemes "aws", "aws_sts"
  label "AWS"
  description "Select the AWS Credential from the list"
  tags "provider=aws"
  aws_account_number $param_aws_account_number
end

credentials "auth_flexera" do
  schemes "oauth2"
  label "Flexera"
  description "Select Flexera One OAuth2 credentials"
  tags "provider=flexera"
end

auth "rs", type: "rightscale"

###############################################################################
# Pagination
###############################################################################

pagination "pagination_aws" do
  get_page_marker do
    body_path jmes_path(response, "NextToken")
  end
  set_page_marker do
    body_field "NextToken"
  end
end

###############################################################################
# Permissions
###############################################################################

permission "perm_read_creds" do
  actions "rs_cm.show_sensitive", "rs_cm.index_sensitive"
  resources "rs_cm.credentials"
end

permission "perm_update_subnet_name" do
  actions "rs_cm.index", "rs_cm.show", "rs_cm.update"
  resources "rs_cm.subnets"
end

###############################################################################
# Resources
###############################################################################

resources "clouds", type: "rs_cm.clouds" do
  filter do
    cloud_type "amazon"
  end
end

resources "subnets", type: "rs_cm.subnet" do
  iterate @clouds
  cloud_href href(iter_item)
end

###############################################################################
# Datasources & Scripts
###############################################################################

# Get applied policy metadata for use later
datasource "ds_applied_policy" do
  request do
    auth $auth_flexera
    host rs_governance_host
    path join(["/api/governance/projects/", rs_project_id, "/applied_policies/", policy_id])
    header "Api-Version", "1.0"
  end
end

# Get region-specific Flexera API endpoints
datasource "ds_flexera_api_hosts" do
  run_script $js_flexera_api_hosts, rs_optima_host
end

script "js_flexera_api_hosts", type: "javascript" do
  parameters "rs_optima_host"
  result "result"
  code <<-EOS
  host_table = {
    "api.optima.flexeraeng.com": {
      flexera: "api.flexera.com",
      fsm: "api.fsm.flexeraeng.com"
    },
    "api.optima-eu.flexeraeng.com": {
      flexera: "api.flexera.eu",
      fsm: "api.fsm-eu.flexeraeng.com"
    },
    "api.optima-apac.flexeraeng.com": {
      flexera: "api.flexera.au",
      fsm: "api.fsm-apac.flexeraeng.com"
    }
  }

  result = host_table[rs_optima_host]
EOS
end

# Get AWS account info
datasource "ds_cloud_vendor_accounts" do
  request do
    auth $auth_flexera
    host val($ds_flexera_api_hosts, 'flexera')
    path join(["/finops-analytics/v1/orgs/", rs_org_id, "/cloud-vendor-accounts"])
    header "Api-Version", "1.0"
  end
  result do
    encoding "json"
    collect jmes_path(response, "values[*]") do
      field "id", jmes_path(col_item, "aws.accountId")
      field "name", jmes_path(col_item, "name")
      field "tags", jmes_path(col_item, "tags")
    end
  end
end

datasource "ds_get_caller_identity" do
  request do
    auth $auth_aws
    verb "GET"
    host "sts.amazonaws.com"
    path "/"
    header "User-Agent", "RS Policies"
    query "Action", "GetCallerIdentity"
    query "Version", "2011-06-15"
  end
  result do
    encoding "xml"
    collect xpath(response, "//GetCallerIdentityResponse/GetCallerIdentityResult") do
      field "account", xpath(col_item, "Account")
    end
  end
end

datasource "ds_aws_account" do
  run_script $js_aws_account, $ds_cloud_vendor_accounts, $ds_get_caller_identity
end

script "js_aws_account", type:"javascript" do
  parameters "ds_cloud_vendor_accounts", "ds_get_caller_identity"
  result "result"
  code <<-EOS
  result = _.find(ds_cloud_vendor_accounts, function(account) {
    return account['id'] == ds_get_caller_identity[0]['account']
  })

  // This is in case the API does not return the relevant account info
  if (result == undefined) {
    result = {
      id: ds_get_caller_identity[0]['account'],
      name: "",
      tags: {}
    }
  }
EOS
end

datasource "ds_describe_regions" do
  request do
    auth $auth_aws
    verb "GET"
    host "ec2.amazonaws.com"
    path "/"
    query "Action", "DescribeRegions"
    query "Version", "2016-11-15"
    query "Filter.1.Name", "opt-in-status"
    query "Filter.1.Value.1", "opt-in-not-required"
    query "Filter.1.Value.2", "opted-in"
    # Header X-Meta-Flexera has no affect on datasource query, but is required for Meta Policies
    # Forces `ds_is_deleted` datasource to run first during policy execution
    header "Meta-Flexera", val($ds_is_deleted, "path")
  end
  result do
    encoding "xml"
    collect xpath(response, "//DescribeRegionsResponse/regionInfo/item", "array") do
      field "region", xpath(col_item, "regionName")
    end
  end
end

datasource "ds_regions" do
  run_script $js_regions, $ds_describe_regions, $param_regions_list, $param_regions_allow_or_deny
end

script "js_regions", type:"javascript" do
  parameters "ds_describe_regions", "param_regions_list", "param_regions_allow_or_deny"
  result "result"
  code <<-EOS
  allow_deny_test = { "Allow": true, "Deny": false }

  if (param_regions_list.length > 0) {
    result = _.filter(ds_describe_regions, function(item) {
      return _.contains(param_regions_list, item['region']) == allow_deny_test[param_regions_allow_or_deny]
    })
  } else {
    result = ds_describe_regions
  }
EOS
end

datasource "ds_aws_subnets" do
  iterate $ds_regions
  request do
    auth $auth_aws
    host join(["ec2.", val(iter_item,"region"), ".amazonaws.com"])
    path "/"
    query "Action", "DescribeSubnets"
    query "Version", "2016-11-15"
    header "User-Agent", "RS Policies"
  end
  result do
    encoding "xml"
    collect xpath(response, "//DescribeSubnetsResponse/subnetSet/item", "array") do
      field "id", xpath(col_item, "subnetId")
      field "region", val(iter_item, "region")
      field "tags" do
        collect xpath(col_item, "tagSet/item") do
          field "key", xpath(col_item, "key")
          field "value", xpath(col_item, "value")
        end
      end
    end
  end
end

datasource "ds_cmp_subnets" do
  iterate @subnets
  field "name", val(iter_item, "name")
  field "href", href(iter_item)
  field "id", val(iter_item, "resource_uid")
  field "links", val(iter_item, "links")
end

datasource "ds_mismatched_subnets" do
  run_script $js_mismatched_subnets, $ds_aws_subnets, $ds_cmp_subnets, $ds_aws_account, $ds_applied_policy
end

script "js_mismatched_subnets", type: "javascript" do
  parameters "ds_aws_subnets", "ds_cmp_subnets", "ds_aws_account", "ds_applied_policy"
  result "result"
  code <<-EOS
  result = []

  aws_subnet_object = {}

  _.each(ds_aws_subnets, function(subnet) {
    name = ''

    if (typeof(subnet['tags']) == 'object') {
      _.each(subnet['tags'], function(tag) {
        if (tag['key'].toLowerCase() == 'name') {
          name = tag['value']
        }
      })
    }

    aws_subnet_object[subnet['id']] = {
      name: name,
      region: subnet['region']
    }
  })

  _.each(ds_cmp_subnets, function(subnet) {
    network_href = ''

    _.each(subnet['links'], function(item) {
      if (item['rel'] == 'network') { network_href = item['href'] }
    })

    aws_name = ''
    region = ''

    if (aws_subnet_object[subnet['id']] != undefined) {
      aws_name = aws_subnet_object[subnet['id']]['name']
      region = aws_subnet_object[subnet['id']]['region']

      if (subnet['name'] != aws_name) {
        result.push({
          resourceID: subnet["id"],
          href: subnet["href"],
          cmp_name: subnet["name"],
          aws_name: aws_name,
          region: region,
          network_href: network_href,
          accountID: ds_aws_account['id'],
          accountName: ds_aws_account['name'],
          policy_name: ds_applied_policy['name']
        })
      }
    }
  })

  result = _.sortBy(result, 'resourceID')
  result = _.sortBy(result, 'region')
EOS
end

###############################################################################
# Policy
###############################################################################

policy "pol_mismatched_subnets" do
  validate_each $ds_mismatched_subnets do
    summary_template "{{ with index data 0 }}{{ .policy_name }}{{ end }}: {{ len data }} AWS Subnet Names Out of Sync"
    check logic_or($ds_parent_policy_terminated, eq(val(item, "resourceID"), ""))
    escalate $esc_email
    escalate $esc_update_subnets
    export do
      resource_level true
      field "accountID" do
        label "Account ID"
      end
      field "accountName" do
        label "Account Name"
      end
      field "resourceID" do
        label "Subnet ID"
      end
      field "region" do
        label "Region"
      end
      field "cmp_name" do
        label "Flexera CMP Name"
      end
      field "aws_name" do
        label "AWS Name"
      end
      field "href" do
        label "HREF"
      end
      field "network_href" do
        label "Network HREF"
      end
      field "id" do
        label "ID"
        path "resourceID"
      end
    end
  end
end

###############################################################################
# Escalations
###############################################################################

escalation "esc_email" do
  automatic true
  label "Send Email"
  description "Send incident email"
  email $param_email
end

escalation "esc_update_subnets" do
  automatic contains($param_automatic_action, "Update Subnets")
  label "Update Subnets"
  description "Approval to update selected subnets"
  run "update_subnets", data
end

###############################################################################
# Cloud Workflow
###############################################################################

define update_subnets($data) return $all_responses do
  $$all_responses = []

  foreach $subnet in $data do
    sub on_error: handle_error() do
      call update_subnet($subnet)
    end
  end

  if inspect($$errors) != "null"
    raise join($$errors,"\n")
  end
end

define update_subnet($subnet) return $name do
  task_label("CMP Update Subnet " + $subnet["id"])

  @subnet = rs_cm.get(href: $subnet["href"])
  @subnet.update(subnet: {"name": $subnet["aws_name"]})

  $name = $subnet["aws_name"]
end

define handle_error() do
  if !$$errors
    $$errors = []
  end
  $$errors << $_error["type"] + ": " + $_error["message"]
  # We check for errors at the end, and raise them all together
  # Skip errors handled by this definition
  $_error_behavior = "skip"
end

###############################################################################
# Meta Policy [alpha]
# Not intended to be modified or used by policy developers
###############################################################################

# If the meta_parent_policy_id is not set it will evaluate to an empty string and we will look for the policy itself,
# if it is set we will look for the parent policy.
datasource "ds_get_policy" do
  request do
    auth $auth_flexera
    host rs_governance_host
    ignore_status [404]
    path join(["/api/governance/projects/", rs_project_id, "/applied_policies/", switch(ne(meta_parent_policy_id,""), meta_parent_policy_id, policy_id) ])
    header "Api-Version", "1.0"
  end
  result do
    encoding "json"
    field "id", jmes_path(response, "id")
  end
end

datasource "ds_parent_policy_terminated" do
  run_script $js_decide_if_self_terminate, $ds_get_policy, policy_id, meta_parent_policy_id
end

# If the policy was applied by a meta_parent_policy we confirm it exists if it doesn't we confirm we are deleting
# This information is used in two places:
# - determining whether or not we make a delete call
# - determining if we should create an incident (we don't want to create an incident on the run where we terminate)
script "js_decide_if_self_terminate", type: "javascript" do
  parameters "found", "self_policy_id", "meta_parent_policy_id"
  result "result"
  code <<-EOS
  var result
  if (meta_parent_policy_id != "" && found.id == undefined) {
    result = true
  } else {
    result = false
  }
  EOS
end

# Two potentials ways to set this up:
# - this way and make a unneeded 'get' request when not deleting
# - make the delete request an interate and have it iterate over an empty array when not deleting and an array with one item when deleting
script "js_make_terminate_request", type: "javascript" do
  parameters "should_delete", "policy_id", "rs_project_id", "rs_governance_host"
  result "request"
  code <<-EOS

  var request = {
    auth:  'auth_flexera',
    host: rs_governance_host,
    path: "/api/governance/projects/" + rs_project_id + "/applied_policies/" + policy_id,
    headers: {
      "API-Version": "1.0",
      "Content-Type":"application/json"
    },
  }

  if (should_delete) {
    request.verb = 'DELETE'
  }
  EOS
end

datasource "ds_terminate_self" do
  request do
    run_script $js_make_terminate_request, $ds_parent_policy_terminated, policy_id, rs_project_id, rs_governance_host
  end
end

datasource "ds_is_deleted" do
  run_script $js_check_deleted, $ds_terminate_self
end

# This is just a way to have the check delete request connect to the farthest leaf from policy.
# We want the delete check to the first thing the policy does to avoid the policy erroring before it can decide whether or not it needs to self terminate
# Example a customer deletes a credential and then terminates the parent policy. We still want the children to self terminate
# The only way I could see this not happening is if the user who applied the parent_meta_policy was offboarded or lost policy access, the policies who are impersonating the user
# would not have access to self-terminate
# It may be useful for the backend to enable a mass terminate at some point for all meta_child_policies associated with an id.
script "js_check_deleted", type: "javascript" do
  parameters "response"
  result "result"
  code <<-EOS
  result = {"path":"/"}
  EOS
end

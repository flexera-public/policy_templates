name "AWS Subnet Name Tag Sync"
rs_pt_ver 20180301
type "policy"
short_description "Ensures a Subnet name in Cloud Management reflect the value of the Subnet name tag in AWS. See the [README](https://github.com/rightscale/policy_templates/tree/master/operational/aws/subnet_name_sync) and [docs.flexera.com/flexera/EN/Automation](https://docs.flexera.com/flexera/EN/Automation/AutomationGS.htm) to learn more."
long_description ""
severity "medium"
category "Operational"
info(
  publish: "false",
  version: "2.8",
  provider: "AWS",
  service: "VPC",
  policy_set: "",
  default_frequency: "hourly"
)

###############################################################################
# Permissions
###############################################################################

permission "perm_read_creds" do
  actions   "rs_cm.show_sensitive","rs_cm.index_sensitive"
  resources "rs_cm.credentials"
end

permission "perm_update_subnet_name" do
  actions   "rs_cm.index","rs_cm.show","rs_cm.update"
  resources "rs_cm.subnets"
end

###############################################################################
# Parameters
###############################################################################

parameter "param_allowed_regions" do
  type "list"
  label "Allowed Regions"
  allowed_pattern /^([a-zA-Z-_]+-[a-zA-Z0-9-_]+-[0-9-_]+,*|)+$/
  description "A list of allowed regions. See the README for more details"
end

parameter "param_email" do
  type "list"
  label "Email addresses of the recipients you wish to notify"
end

parameter "param_aws_account_number" do
  type "string"
  label "Account Number"
  description "The account number for AWS STS Cross Account Roles."
  default ""
end

parameter "param_automatic_action" do
  type "list"
  label "Automatic Actions"
  description "When this value is set, this policy will automatically take the selected action(s)"
  allowed_values ["Update Subnets"]
end

###############################################################################
# Authentication
###############################################################################

credentials "auth_aws" do
  schemes "aws","aws_sts"
  label "AWS"
  description "Select the AWS Credential from the list"
  tags "provider=aws"
  aws_account_number $param_aws_account_number
end


auth "rs", type: "rightscale"

###############################################################################
# Pagination
###############################################################################


###############################################################################
# Resources
###############################################################################
resources "clouds", type: "rs_cm.clouds" do
  filter do
    cloud_type "amazon"
  end
end

resources "subnets", type: "rs_cm.subnet" do
  iterate @clouds
  cloud_href href(iter_item)
end

###############################################################################
# Datasources
###############################################################################

#Get list of enabled regions for an account
datasource "ds_regions_list" do
  request do
    auth $auth_aws
    verb "GET"
    host "ec2.amazonaws.com"
    path "/"
    query "Action", "DescribeRegions"
    query "Version", "2016-11-15"
  end
  result do
    encoding "xml"
    collect xpath(response, "//DescribeRegionsResponse/regionInfo/item", "array") do
      field "region", xpath(col_item, "regionName")
    end
  end
end

# Get only SCP enabled regions
datasource "ds_regions" do
  run_script $js_regions, $param_allowed_regions, $ds_regions_list
end

datasource "ds_list_subnets" do
  iterate $ds_regions
  request do
    auth $auth_aws
    host join(["ec2.",val(iter_item,"region"),".amazonaws.com"])
    path "/"
    query "Action", "DescribeSubnets"
    query "Version", "2016-11-15"
    header "User-Agent", "RS Policies"
  end
  result do
    encoding "xml"
    collect xpath(response, "//DescribeSubnetsResponse/subnetSet/item", "array") do
      field "tag_set" do
        collect xpath(col_item, "tagSet/item") do
          field "key", xpath(col_item, "key")
          field "value", xpath(col_item, "value")
        end
      end
      field "subnet_id", xpath(col_item, "subnetId")
      field "region", val(iter_item,"region")
    end
  end
end

datasource "ds_subnets" do
  iterate @subnets
  field "name", val(iter_item, "name")
  field "href", href(iter_item)
  field "resource_uid", val(iter_item, "resource_uid")
  field "links", val(iter_item, "links")
end

datasource "ds_rs_updates" do
  run_script $script_subnets, $ds_list_subnets, $ds_subnets
end

###############################################################################
# Scripts
###############################################################################

script "js_regions", type:"javascript" do
  parameters "user_entered_regions", "all_regions"
  result "regions"
  code <<-EOS
    if(_.isEmpty(user_entered_regions)){
      regions = all_regions;
    }else{
      //Filter unique regions
      var uniqueRegions = _.uniq(user_entered_regions);
      var all_regions_list = [];
      all_regions.forEach(function(all_region){
        all_regions_list.push(all_region.region)
      })

      //Filter valid regions
      var valid_regions = [];
      _.map(uniqueRegions, function(uniqueRegion){
        if(all_regions_list.indexOf(uniqueRegion) > -1){
          valid_regions.push({"region": uniqueRegion})
        }
      })

      //Throw an error if no valid regions found
      if (_.isEmpty(valid_regions)) {
        regions = all_regions;
      }else{
        regions = valid_regions
      }
    }
  EOS
end

script "script_subnets", type: "javascript" do
  parameters "ds_list_subnets","ds_subnets"
  result "updates"
  code <<-EOS
    results = [];
    updates = [];

    for( i = 0; i <= ds_list_subnets.length - 1; i++) {
      var tags = ds_list_subnets[i]["tag_set"];

      var name = "";
      for( x = 0; x <= tags.length - 1; x++){
        if(tags[x]["key"] === "Name") {
          name = tags[x]["value"];
        }
      };
      results.push({
        "subnetid": ds_list_subnets[i]["subnet_id"],
        "name": name,
        "region": ds_list_subnets[i]["region"]
      });
    };

    for( y = 0; y <= ds_subnets.length - 1; y++) {
      var aws_name = "";
      var region = "";
      var network_href = "";
      for (z = 0; z <= results.length - 1; z++) {
        if(ds_subnets[y]["links"][z]["rel"] === "network") {
          network_href = ds_subnets[y]["links"][z]["href"]
          break;
        }
      }
      for (aws = 0; aws <= results.length - 1; aws++) {
        if(results[aws]["subnetid"] === ds_subnets[y]["resource_uid"]) {
          aws_name = results[aws]["name"]
          region = results[aws]["region"]
          break;
        }
      }

      if(aws_name != "") {
        updates.push({
          "rs_name": ds_subnets[y]["name"],
          "aws_name":  aws_name,
          "href": ds_subnets[y]["href"],
          "id": ds_subnets[y]["resource_uid"],
          "region": region,
          "network_href": network_href
        })
      }
    }
  updates = _.sortBy(updates,'id')
  updates = _.sortBy(updates,'region')
  EOS
end

###############################################################################
# Policy
###############################################################################

policy "policy_subnet_sync" do
  validate_each $ds_rs_updates do
    summary_template "{{ rs_project_name }} (Account ID: {{ rs_project_id }}): {{ len data }} Subnet Names Out of Sync"
    check equals?(val(item, "rs_name"), val(item, "aws_name"))
    escalate $email
    escalate $escalate_resources
    export do
      resource_level true
      field "id" do
        label "Subnet Id"
      end
      field "region" do
        label "Region"
      end
      field "rs_name" do
        label "RS Name"
      end
      field "aws_name" do
        label "AWS Name"
      end
      field "href" do
        label "Href"
      end
      field "network_href" do
        label "Network Href"
      end
    end
  end
end

###############################################################################
# Escalations
###############################################################################

escalation "email" do
  automatic true
  label "Send Email"
  description "Send incident email"
  email $param_email
end

escalation "escalate_resources" do
  automatic contains($param_automatic_action, "Update Subnets")
  label "Update Subnets"
  description "Update selected subnets"
  run "update_subnets", data
end

###############################################################################
# Cloud Workflow
###############################################################################

define update_subnets($data) do
  $$debug=false
  call sys_log('AWS Subnet Name Sync Policy: Affected Subnets',to_s($data))
  foreach $subnet in $data do
    call sys_log('AWS Subnet Name Sync Policy: Updating Subnet',to_s($subnet))
    @subnet = rs_cm.get(href: $subnet["href"])
    @subnet.update(subnet: {"name": $subnet["aws_name"]})
  end
end

define sys_log($subject, $detail) do
  if $$debug
    rs_cm.audit_entries.create(
      notify: "None",
      audit_entry: {
        auditee_href: @@account,
        summary: $subject,
        detail: $detail
      }
    )
  end
end

name "AWS Subnet Name Tag Sync"
rs_pt_ver 20180301
type "policy"
short_description "Ensures a Subnet name in Cloud Management reflect the value of the Subnet name tag in AWS. See the [README](https://github.com/rightscale/policy_templates/tree/master/operational/aws/subnet_name_sync) and [docs.rightscale.com/policies](http://docs.rightscale.com/policies/) to learn more."
long_description "Version: 1.3"
severity "medium"
category "Operational"

###############################################################################
# Permissions
###############################################################################

permission "perm_read_creds" do
  actions   "rs_cm.show_sensitive","rs_cm.index_sensitive"
  resources "rs_cm.credentials"
end

permission "perm_update_subnet_name" do
  actions   "rs_cm.index","rs_cm.show","rs_cm.update"
  resources "rs_cm.subnets"
end

###############################################################################
# Parameters
###############################################################################

parameter "param_email" do
  type "list"
  label "Email addresses of the recipients you wish to notify"
end

###############################################################################
# Authentication
###############################################################################

auth "auth_aws", type: "aws" do
  version 4
  service 'ec2'
  access_key cred('AWS_ACCESS_KEY_ID')
  secret_key cred('AWS_SECRET_ACCESS_KEY')
end


auth "rs", type: "rightscale"

###############################################################################
# Pagination
###############################################################################


###############################################################################
# Resources
###############################################################################
resources "clouds", type: "rs_cm.clouds" do
  filter do
    cloud_type "amazon"
  end
end

resources "subnets", type: "rs_cm.subnet" do
  iterate @clouds
  cloud_href href(iter_item)
end

###############################################################################
# Datasources
###############################################################################

#Generates list of Regions
datasource "ds_regions_list" do
  request do
    verb "GET"
    host "raw.githubusercontent.com"
    path "/rightscale/policy_templates/master/data/aws/regions.json"
    header "User-Agent", "RS Policies"
  end
end

datasource "ds_list_subnets" do
  iterate $ds_regions_list
  request do
    auth $auth_aws
    host join(["ec2.",val(iter_item,"region"),".amazonaws.com"])
    path "/"
    query "Action", "DescribeSubnets"
    query "Version", "2016-11-15"
    header "User-Agent", "RS Policies"
  end
  result do
    encoding "xml"
    collect xpath(response, "//DescribeSubnetsResponse/subnetSet/item", "array") do
      field "tag_set" do
        collect xpath(col_item, "tagSet/item") do
          field "key", xpath(col_item, "key")
          field "value", xpath(col_item, "value")
        end
      end
      field "subnet_id", xpath(col_item, "subnetId")
	  field "region", val(iter_item,"region")
    end
  end
end

datasource "ds_subnets" do
  iterate @subnets
  field "name", val(iter_item, "name")
  field "href", href(iter_item)
  field "resource_uid", val(iter_item, "resource_uid")
  field "links", val(iter_item, "links")
end

datasource "ds_rs_updates" do
  run_script $script_subnets, $ds_list_subnets, $ds_subnets
end

###############################################################################
# Scripts
###############################################################################

script "script_subnets", type: "javascript" do
  parameters "ds_list_subnets","ds_subnets"
  result "updates"
  code <<-EOS
    results = [];
    updates = [];

    for( i = 0; i <= ds_list_subnets.length - 1; i++) {
      var tags = ds_list_subnets[i]["tag_set"];

      var name = "";
      for( x = 0; x <= tags.length - 1; x++){
        if(tags[x]["key"] === "Name") {
          name = tags[x]["value"];
        }
      };
      results.push({
        "subnetid": ds_list_subnets[i]["subnet_id"],
        "name": name,
        "region": ds_list_subnets[i]["region"]
      });
    };

    for( y = 0; y <= ds_subnets.length - 1; y++) {
      var aws_name = "";
      var region = "";
      var network_href = "";
      for (z = 0; z <= results.length - 1; z++) {
        if(ds_subnets[y]["links"][z]["rel"] === "network") {
          network_href = ds_subnets[y]["links"][z]["href"]
          break;
        }
      }
      for (aws = 0; aws <= results.length - 1; aws++) {
        if(results[aws]["subnetid"] === ds_subnets[y]["resource_uid"]) {
          aws_name = results[aws]["name"]
          region = results[aws]["region"]
          break;
        }
      }

      if(aws_name != "") {
        updates.push({
          "rs_name": ds_subnets[y]["name"],
          "aws_name":  aws_name,
          "href": ds_subnets[y]["href"],
          "resource_uid": ds_subnets[y]["resource_uid"],
          "region": region,
          "network_href": network_href
        })
      }
    } 
  EOS
end

###############################################################################
# Policy
###############################################################################

policy "policy_subnet_sync" do
  validate_each $ds_rs_updates do
    summary_template "{{ rs_project_name }} (Account ID: {{ rs_project_id }}): {{ len data }} Subnet Names Out of Sync"
    detail_template <<-EOS
# Subnet Name Validation between AWS and Cloud Management
| SubnetId | Region | RS Name | AWS Name | Href | Network Href |
| -------- | ------ | ------- | -------- | ---- | -------------|
{{ range data -}}
  | {{.resource_uid}} | {{.region}} | {{.rs_name}} | {{.aws_name}} | {{.href}} | {{.network_href}} |
{{ end -}}
EOS
    check equals?(val(item, "rs_name"), val(item, "aws_name"))
	escalate $email
    escalate $escalate_resources
  end
end

###############################################################################
# Escalations
###############################################################################

escalation "email" do
  email $param_email
end

escalation "escalate_resources" do
  request_approval  do
    label "Approve to Update subnets"
    description "Update subnets"
    parameter "approval_reason" do
      type "string"
      label "Reason for approval"
      description "Explain why you are approving the action"
    end
  end
  run "update_subnets", data
end

###############################################################################
# Cloud Workflow
###############################################################################

define update_subnets($data) do
  $$debug=false
  call sys_log('AWS Subnet Name Sync Policy: Affected Subnets',to_s($data))
  foreach $subnet in $data do
    call sys_log('AWS Subnet Name Sync Policy: Updating Subnet',to_s($subnet))
    @subnet = rs_cm.get(href: $subnet["href"])
    @subnet.update(subnet: {"name": $subnet["aws_name"]})
  end
end

define sys_log($subject, $detail) do
  if $$debug
    rs_cm.audit_entries.create(
      notify: "None",
      audit_entry: {
        auditee_href: @@account,
        summary: $subject,
        detail: $detail
      }
    )
  end
end
name "AWS New Marketplace Software"
rs_pt_ver 20180301
type "policy"
short_description "Checks for new AWS Marketplace software purchases and reports on them. See the [README](https://github.com/flexera-public/policy_templates/tree/master/operational/aws/marketplace_new_software) and [docs.flexera.com/flexera/EN/Automation](https://docs.flexera.com/flexera/EN/Automation/AutomationGS.htm) to learn more."
long_description ""
severity "low"
category "Operational"
default_frequency "weekly"
info(
  version: "1.0",
  provider: "AWS",
  service: "Marketplace",
  policy_set: "New Marketplace Software"
)

###############################################################################
# Parameters
###############################################################################

parameter "param_email" do
  type "list"
  category "Policy Settings"
  label "Email addresses to notify"
  description "Email addresses of the recipients you wish to notify when new incidents are created"
  default []
end

parameter "param_lookback" do
  type "number"
  category "Policy Settings"
  label "Look Back Period (Days)"
  description "How far back, in days, to look at Marketplace software purchases to see if new items have been added."
  default 10
  min_value 4
end

###############################################################################
# Authentication
###############################################################################

credentials "auth_flexera" do
  schemes "oauth2"
  label "Flexera"
  description "Select Flexera One OAuth2 credentials"
  tags "provider=flexera"
end

###############################################################################
# Datasources & Scripts
###############################################################################

# Get applied policy metadata for use later
datasource "ds_applied_policy" do
  request do
    auth $auth_flexera
    host rs_governance_host
    path join(["/api/governance/projects/", rs_project_id, "/applied_policies/", policy_id])
    header "Api-Version", "1.0"
  end
end

datasource "ds_billing_centers" do
  request do
    auth $auth_flexera
    host rs_optima_host
    path join(["/analytics/orgs/", rs_org_id, "/billing_centers"])
    header "Api-Version", "1.0"
    header "User-Agent", "RS Policies"
    query "view", "allocation_table"
    ignore_status [403]
  end
  result do
    encoding "json"
    collect jmes_path(response, "[*]") do
      field "href", jmes_path(col_item, "href")
      field "id", jmes_path(col_item, "id")
      field "name", jmes_path(col_item, "name")
      field "parent_id", jmes_path(col_item, "parent_id")
    end
  end
end

# Gather top level billing center IDs for when we pull cost data
datasource "ds_top_level_bcs" do
  run_script $js_top_level_bcs, $ds_billing_centers
end

script "js_top_level_bcs", type: "javascript" do
  parameters "ds_billing_centers"
  result "result"
  code <<-EOS
  filtered_bcs = _.filter(ds_billing_centers, function(bc) {
    return bc['parent_id'] == null || bc['parent_id'] == undefined
  })

  result = _.compact(_.pluck(filtered_bcs, 'id'))
EOS
end

datasource "ds_currency_reference" do
  request do
    host "raw.githubusercontent.com"
    path "/rightscale/policy_templates/master/cost/scheduled_reports/currency_reference.json"
    header "User-Agent", "RS Policies"
  end
end

datasource "ds_currency_code" do
  request do
    auth $auth_flexera
    host rs_optima_host
    path join(["/bill-analysis/orgs/", rs_org_id, "/settings/currency_code"])
    header "Api-Version", "0.1"
    header "User-Agent", "RS Policies"
    ignore_status [403]
  end
  result do
    encoding "json"
    field "id", jmes_path(response, "id")
    field "value", jmes_path(response, "value")
  end
end

datasource "ds_currency" do
  run_script $js_currency, $ds_currency_reference, $ds_currency_code
end

script "js_currency", type:"javascript" do
  parameters "ds_currency_reference", "ds_currency_code"
  result "result"
  code <<-EOS
  symbol = "$"
  separator = ","

  if (ds_currency_code['value'] != undefined) {
    if (ds_currency_reference[ds_currency_code['value']] != undefined) {
      symbol = ds_currency_reference[ds_currency_code['value']]['symbol']

      if (ds_currency_reference[ds_currency_code['value']]['t_separator'] != undefined) {
        separator = ds_currency_reference[ds_currency_code['value']]['t_separator']
      } else {
        separator = ""
      }
    }
  }

  result = {
    symbol: symbol,
    separator: separator
  }
EOS
end

datasource "ds_current_software" do
  request do
    run_script $js_get_software, $ds_top_level_bcs, rs_org_id, rs_optima_host, 3
  end
  result do
    encoding "json"
    collect jmes_path(response,"rows[*]") do
      field "service", jmes_path(col_item, "dimensions.service")
      field "cost", jmes_path(col_item, "metrics.cost_amortized_unblended_adj")
    end
  end
end

datasource "ds_previous_software" do
  request do
    run_script $js_get_software, $ds_top_level_bcs, rs_org_id, rs_optima_host, $param_lookback
  end
  result do
    encoding "json"
    collect jmes_path(response, "rows[*]") do
      field "service", jmes_path(col_item, "dimensions.service")
      field "cost", jmes_path(col_item, "metrics.cost_amortized_unblended_adj")
    end
  end
end

script "js_get_software", type: "javascript" do
  parameters "ds_top_level_bcs", "rs_org_id", "rs_optima_host", "lookback"
  result "request"
  code <<-EOS
  end_date = new Date()
  end_date.setDate(end_date.getDate() - lookback - 1)
  end_date = end_date.toISOString().split('T')[0]

  start_date = new Date()
  start_date.setDate(start_date.getDate() - lookback)
  start_date = start_date.toISOString().split('T')[0]

  var request = {
    auth: "auth_flexera",
    host: rs_optima_host,
    verb: "POST",
    path: "/bill-analysis/orgs/" + rs_org_id + "/costs/aggregated",
    body_fields: {
      dimensions: ["service"],
      granularity: "day",
      start_at: start_date,
      end_at: end_date,
      metrics: ["cost_amortized_unblended_adj"],
      billing_center_ids: ds_top_level_bcs,
      limit: 100000,
      filter: {
        dimension: "bill_entity",
        type: "equal",
        value: "AWS Marketplace"
      }
    },
    headers: {
      'User-Agent': "RS Policies",
      'Api-Version': "1.0"
    },
    ignore_status: [400]
  }
EOS
end

datasource "ds_new_software" do
  run_script $js_new_software, $ds_current_software, $ds_previous_software, $ds_currency
end

script "js_new_software", type: "javascript" do
  parameters "ds_current_software", "ds_previous_software", "ds_currency"
  result "result"
  code <<-EOS
  result = []

  old_software_list = _.compact(_.uniq(_.pluck(ds_previous_software, "service")))

  valid_software = _.filter(ds_current_software, function(item) {
    return typeof(item['service']) == 'string' && item['service'] != ''
  })

  _.each(valid_software, function(item) {
    if (_.contains(old_software_list, item['service']) == false) {
      result.push({
        software: service,
        cost: Number((item['cost'] * 365.25 / 12).toFixed(2)),
        currency: ds_currency['symbol']
      })
    }
  })
EOS
end


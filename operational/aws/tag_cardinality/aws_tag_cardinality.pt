name "AWS Tag Cardinality Report"
rs_pt_ver 20180301
type "policy"
short_description "Generates a tag cardinality report for AWS Accounts and Resources. See the [README](https://github.com/flexera-public/policy_templates/tree/master/operational/aws/tag_cardinality) and [docs.flexera.com/flexera/EN/Automation](https://docs.flexera.com/flexera/EN/Automation/AutomationGS.htm) to learn more."
long_description ""
severity "low"
category "Operational"
default_frequency "weekly"
info(
  version: "4.0.0",
  provider: "AWS",
  service: "Tags",
  policy_set: "Tag Cardinality"
)

###############################################################################
# Parameters
###############################################################################

parameter "param_email" do
  type "list"
  category "Policy Settings"
  label "Email Addresses"
  description "Email addresses of the recipients you wish to notify when new incidents are created"
  default []
end

parameter "param_aws_account_number" do
  type "string"
  category "Policy Settings"
  label "Account Number"
  description "Leave blank; this is for automated use with Meta Policies. See README for more details."
  default ""
end

parameter "param_regions_allow_or_deny" do
  type "string"
  category "Filters"
  label "Allow/Deny Regions"
  description "Allow or Deny entered regions. See the README for more details"
  allowed_values "Allow", "Deny"
  default "Allow"
end

parameter "param_regions_list" do
  type "list"
  category "Filters"
  label "Allow/Deny Regions List"
  description "A list of allowed or denied regions. See the README for more details"
  allowed_pattern /^([a-zA-Z-_]+-[a-zA-Z0-9-_]+-[0-9-_]+,*|)+$/
  default []
end

parameter "param_auth_aws_linked_account" do
  type "string"
  category "Credentials"
  label "Optional: AWS Linked Account Credential"
  description "The credential to use for authentication to AWS Organization Linked Account.  This is not expected to be needed, but if the IAM Role Name in the Linked Accounts differs from the one in the AWS Organization Master Account, you can specify the other Flexera Credential here that uses that IAM Role Name in the Credential ARN."
  default ""
end

###############################################################################
# Authentication
###############################################################################

credentials "auth_aws" do
  schemes "aws", "aws_sts"
  label "AWS"
  description "Select the AWS credential. Note: This credential should be associated with an ARN in the AWS Organization Master Account."
  tags "provider=aws"
  aws_account_number $param_aws_account_number
end

credentials "auth_flexera" do
  schemes "oauth2"
  label "Flexera"
  description "Select Flexera One OAuth2 credentials"
  tags "provider=flexera"
end

###############################################################################
# Pagination
###############################################################################

pagination "pagination_aws" do
  get_page_marker do
    body_path jmes_path(response, "NextToken")
  end
  set_page_marker do
    body_field "NextToken"
  end
end

pagination "pagination_aws_tagging" do
  get_page_marker do
    body_path jmes_path(response, "PaginationToken")
  end
  set_page_marker do
    body_field "PaginationToken"
  end
end

###############################################################################
# Datasources & Scripts
###############################################################################

datasource "ds_aws_accounts_without_tags" do
  request do
    auth $auth_aws
    pagination $pagination_aws
    verb "POST"
    host "organizations.us-east-1.amazonaws.com"
    path '/'
    header "User-Agent", "RS Policies"
    header "X-Amz-Target", "AWSOrganizationsV20161128.ListAccounts"
    header "Content-Type", "application/x-amz-json-1.1"
    # Header X-Meta-Flexera has no affect on datasource query, but is required for Meta Policies
    # Forces `ds_is_deleted` datasource to run first during policy execution
    header "Meta-Flexera", val($ds_is_deleted, "path")
    body "{}"
    ignore_status [400] # Ignore Status 400 - You don't have permissions to access this resource - This is expected in AWS Org Member Accounts (not the AWS Org Master Account)
  end
  result do
    encoding "json"
    collect jmes_path(response, "Accounts") do
      field "org_arn", jmes_path(col_item, "Arn")
      field "account_id", jmes_path(col_item, "Id")
      field "account_name", jmes_path(col_item, "Name")
      field "account_status", jmes_path(col_item, "Status")
    end
  end
end

datasource "ds_aws_accounts" do
  iterate $ds_aws_accounts_without_tags
  request do
    auth $auth_aws
    pagination $pagination_aws
    verb "POST"
    host "organizations.us-east-1.amazonaws.com"
    path '/'
    header "User-Agent", "RS Policies"
    header "X-Amz-Target", "AWSOrganizationsV20161128.ListTagsForResource"
    header "Content-Type", "application/x-amz-json-1.1"
    body_field "ResourceId", val(iter_item, "account_id")
    ignore_status [400] # Ignore Status 400 - You don't have permissions to access this resource - This is expected in AWS Org Member Accounts (not the AWS Org Master Account)
  end
  result do
    encoding "json"
    field "org_arn", val(iter_item, "org_arn")
    field "account_id", val(iter_item, "account_id")
    field "account_name", val(iter_item, "account_name")
    field "account_status", val(iter_item, "account_status")
    field "tags_unsorted", jmes_path(response, "Tags")
  end
end

datasource "ds_describe_regions" do
  request do
    auth $auth_aws
    verb "GET"
    host "ec2.amazonaws.com"
    path "/"
    query "Action", "DescribeRegions"
    query "Version", "2016-11-15"
    query "Filter.1.Name", "opt-in-status"
    query "Filter.1.Value.1", "opt-in-not-required"
    query "Filter.1.Value.2", "opted-in"
    # Header X-Meta-Flexera has no affect on datasource query, but is required for Meta Policies
    # Forces `ds_is_deleted` datasource to run first during policy execution
    header "Meta-Flexera", val($ds_is_deleted, "path")
  end
  result do
    encoding "xml"
    collect xpath(response, "//DescribeRegionsResponse/regionInfo/item", "array") do
      field "region", xpath(col_item, "regionName")
    end
  end
end

datasource "ds_regions" do
  run_script $js_regions, $ds_describe_regions, $param_regions_list, $param_regions_allow_or_deny
end

script "js_regions", type:"javascript" do
  parameters "ds_describe_regions", "param_regions_list", "param_regions_allow_or_deny"
  result "result"
  code <<-EOS
  allow_deny_test = { "Allow": true, "Deny": false }

  if (param_regions_list.length > 0) {
    result = _.filter(ds_describe_regions, function(item) {
      return _.contains(param_regions_list, item['region']) == allow_deny_test[param_regions_allow_or_deny]
    })
  } else {
    result = ds_describe_regions
  }
EOS
end

datasource "ds_self_policy_information" do
  request do
    auth $auth_flexera
    host rs_governance_host
    path join(["/api/governance/projects/", rs_project_id, "/applied_policies/", policy_id])
    header "Api-Version", "1.0"
  end
  result do
    encoding "json"
    field "name", jmes_path(response, "name")
    field "credentials", jmes_path(response, "credentials")
    field "options", jmes_path(response, "options")
    field "policy_template", jmes_path(response, "policy_template")
  end
end

datasource "ds_aws_resources" do
  iterate $ds_regions
  request do
    auth $auth_aws
    pagination $pagination_aws_tagging
    verb "POST"
    host join(["tagging.", val(iter_item, "region"), ".amazonaws.com"])
    path "/"
    header "X-Amz-Target", "ResourceGroupsTaggingAPI_20170126.GetResources"
    header "Content-Type", "application/x-amz-json-1.1"
    body_field "ExcludeCompliantResources", "false"
    body_field "IncludeComplianceDetails", "true"
  end
  result do
    encoding "json"
    collect jmes_path(response, "ResourceTagMappingList[*]") do
      field "complianceDetails", val(iter_item, "ComplianceDetails")
      field "arn", jmes_path(col_item, "ResourceARN")
      field "tags_unsorted", jmes_path(col_item, "Tags")
    end
  end
end

datasource "ds_aws_resources_all" do
  iterate $ds_aws_accounts_without_tags
  request do
    run_script $js_aws_resources_all, rs_governance_host, rs_project_id, iter_item, $ds_self_policy_information, $param_auth_aws_linked_account
  end
  result do
    encoding "json"
    collect jq(response, '.[0].data[]') do
      field "complianceDetails", jq(col_item, ".complianceDetails")
      field "arn", jq(col_item, ".arn")
      field "tags_unsorted", jq(col_item, ".tags_unsorted")
    end
  end
end

script "js_aws_resources_all", type: "javascript" do
  parameters "rs_governance_host", "rs_project_id", "iter_item", "ds_self_policy_information", "param_auth_aws_linked_account"
  result "request"
  code <<-EOS

  var auth_aws_credential_id = ds_self_policy_information.credentials.auth_aws
  // If the user has specified an AWS Linked Account Credential, use that instead
  if (param_auth_aws_linked_account != "") {
    auth_aws_credential_id = param_auth_aws_linked_account
  }

  var body = {
    "credentials": {
      "auth_aws": auth_aws_credential_id,
      "auth_flexera": ds_self_policy_information.credentials.auth_flexera
    },
    "names": [
      "ds_aws_resources"
    ],
    "options": ds_self_policy_information.options
  }
  _.each(body.options, function(option) {
    if (option.name == "param_aws_account_number") {
      option.value = iter_item.account_id
    }
  })
  var request = {
    auth:  'auth_flexera',
    host:  rs_governance_host,
    scheme: 'https',
    verb: 'POST',
    path:  ds_self_policy_information.policy_template.href+"/retrieve_data",
    headers: {
      "API-Version": "1.0",
      "Content-Type":"application/json"
    },
    body: JSON.stringify(body),
    ignore_status: [422]
  }
  EOS
end

datasource "ds_aws_accounts_sorted" do
  run_script $js_tag_sorter, $ds_aws_accounts
end

datasource "ds_aws_resources_sorted" do
  run_script $js_tag_sorter, $ds_aws_resources_all
end

datasource "ds_aws_accounts_tag_list" do
  run_script $js_tag_lister, $ds_aws_accounts_sorted, "Account"
end

datasource "ds_aws_resources_tag_list" do
  run_script $js_tag_lister, $ds_aws_resources_sorted, "Resource"
end

datasource "ds_tag_report" do
  run_script $js_tag_report, $ds_aws_accounts_tag_list, $ds_aws_resources_tag_list
end

###############################################################################
# Scripts
###############################################################################

script "js_tag_sorter", type: "javascript" do
  parameters "tagged_list"
  result "result"
  code <<-EOS
  result = []

  _.each(tagged_list, function(item) {
    sorted_tags = {}

    _.each(item['tags_unsorted'], function(tag) {
      sorted_tags[tag['Key']] = tag['Value']
    })

    item['tags'] = sorted_tags

    result.push(item)
  })
EOS
end

script "js_tag_lister", type: "javascript" do
  parameters "tagged_list", "tag_type"
  result "result"
  code <<-EOS
  tags = {}
  result = []

  _.each(tagged_list, function(item) {
    if (item['tags'] != undefined && item['tags'] != null) {
      _.each(Object.keys(item['tags']), function(key) {
        if (tags[key] == undefined || tags[key] == null) {
          tags[key] = []
        }

        tags[key].push(item['tags'][key])
      })
    }
  })

  _.each(Object.keys(tags), function(key) {
    result.push({
      'type': tag_type,
      'key': key,
      'cardinality': _.uniq(tags[key]).length,
      'value_list': _.uniq(tags[key]).join(', ')
    })
  })

  result = _.sortBy(result, 'cardinality').reverse()
EOS
end

script "js_tag_report", type: "javascript" do
  parameters "ds_aws_accounts_tag_list", "ds_aws_resources_tag_list"
  result "result"
  code <<-EOS
  result = ds_aws_accounts_tag_list.concat(ds_aws_resources_tag_list)
EOS
end

###############################################################################
# Policy
###############################################################################

policy "pol_aws_tag_cardinality_report" do
  validate $ds_tag_report do
    summary_template "AWS Tag Cardinality Report"
    check logic_or($ds_parent_policy_terminated, eq(1, 0))
    escalate $esc_email
    export do
      resource_level false
      field "type" do
        label "Type"
      end
      field "key" do
        label "Key"
      end
      field "cardinality" do
        label "Cardinality"
      end
      field "value_list" do
        label "Unique Values"
      end
    end
  end
end

###############################################################################
# Escalations
###############################################################################

escalation "esc_email" do
  automatic true
  label "Send Email"
  description "Send incident email"
  email $param_email
end

###############################################################################
# Meta Policy [alpha]
# Not intended to be modified or used by policy developers
###############################################################################

# If the meta_parent_policy_id is not set it will evaluate to an empty string and we will look for the policy itself,
# if it is set we will look for the parent policy.
datasource "ds_get_policy" do
  request do
    auth $auth_flexera
    host rs_governance_host
    ignore_status [404]
    path join(["/api/governance/projects/", rs_project_id, "/applied_policies/", switch(ne(meta_parent_policy_id, ""), meta_parent_policy_id, policy_id)])
    header "Api-Version", "1.0"
  end
  result do
    encoding "json"
    field "id", jmes_path(response, "id")
  end
end

datasource "ds_parent_policy_terminated" do
  run_script $js_decide_if_self_terminate, $ds_get_policy, policy_id, meta_parent_policy_id
end

# If the policy was applied by a meta_parent_policy we confirm it exists if it doesn't we confirm we are deleting
# This information is used in two places:
# - determining whether or not we make a delete call
# - determining if we should create an incident (we don't want to create an incident on the run where we terminate)
script "js_decide_if_self_terminate", type: "javascript" do
  parameters "found", "self_policy_id", "meta_parent_policy_id"
  result "result"
  code <<-EOS
  var result
  if (meta_parent_policy_id != "" && found.id == undefined) {
    result = true
  } else {
    result = false
  }
  EOS
end

# Two potentials ways to set this up:
# - this way and make a unneeded 'get' request when not deleting
# - make the delete request an interate and have it iterate over an empty array when not deleting and an array with one item when deleting
script "js_make_terminate_request", type: "javascript" do
  parameters "should_delete", "policy_id", "rs_project_id", "rs_governance_host"
  result "request"
  code <<-EOS

  var request = {
    auth:  'auth_flexera',
    host: rs_governance_host,
    path: "/api/governance/projects/" + rs_project_id + "/applied_policies/" + policy_id,
    headers: {
      "API-Version": "1.0",
      "Content-Type":"application/json"
    },
  }

  if (should_delete) {
    request.verb = 'DELETE'
  }
  EOS
end

datasource "ds_terminate_self" do
  request do
    run_script $js_make_terminate_request, $ds_parent_policy_terminated, policy_id, rs_project_id, rs_governance_host
  end
end

datasource "ds_is_deleted" do
  run_script $js_check_deleted, $ds_terminate_self
end

# This is just a way to have the check delete request connect to the farthest leaf from policy.
# We want the delete check to the first thing the policy does to avoid the policy erroring before it can decide whether or not it needs to self terminate
# Example a customer deletes a credential and then terminates the parent policy. We still want the children to self terminate
# The only way I could see this not happening is if the user who applied the parent_meta_policy was offboarded or lost policy access, the policies who are impersonating the user
# would not have access to self-terminate
# It may be useful for the backend to enable a mass terminate at some point for all meta_child_policies associated with an id.
script "js_check_deleted", type: "javascript" do
  parameters "response"
  result "result"
  code <<-EOS
  result = {"path":"/"}
  EOS
end

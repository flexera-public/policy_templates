name "AWS Lambda Functions with high error rate"
rs_pt_ver 20180301
type "policy"
short_description "Report any functions with error rate over parameter. \n See the [README](https://github.com/flexera-public/policy_templates/tree/master/operational/aws/lambda_functions_with_high_error_rate) and [docs.flexera.com/flexera/EN/Automation](https://docs.flexera.com/flexera/EN/Automation/AutomationGS.htm) to learn more."
long_description ""
category "Operational"
severity "high"
default_frequency "hourly"
info(
  version: "4.0",
  provider: "AWS",
  service: "Lambda",
  policy_set: ""
)

###############################################################################
# User inputs
###############################################################################

parameter "param_allowed_regions_allow_or_deny" do
  type "string"
  label "Allow/Deny Regions"
  description "Allow or Deny entered regions. See the README for more details"
  allowed_values "Allow", "Deny"
  default "Allow"
end

parameter "param_allowed_regions" do
  type "list"
  label "Regions"
  allowed_pattern /^([a-zA-Z-_]+-[a-zA-Z0-9-_]+-[0-9-_]+,*|)+$/
  description "A list of allowed or denied regions. See the README for more details"
end

parameter "param_email" do
  type "list"
  label "Email Address"
  description "Email addresses of the recipients you wish to notify"
end

parameter "param_aws_account_number" do
  type "string"
  label "Account Number"
  description "The account number for AWS STS Cross Account Roles."
  default ""
end

parameter "param_exclude_tags" do
  type "list"
  label "Ignore Tags"
  description "List of one or more Tags that will exclude Classic Load Balancer from actions being taken. Format: Key=Value"
end

parameter "param_error_rate" do
  type "number"
  label "Error Rate Percentage"
  description "Error Rate Percentage To Trigger On"
end

###############################################################################
# Authentication
###############################################################################

#AUTHENTICATE WITH AWS
credentials "auth_aws" do
  schemes "aws","aws_sts"
  label "AWS"
  description "Select the AWS Credential from the list"
  tags "provider=aws"
  aws_account_number $param_aws_account_number
end

#AUTHENTICATE WITH FLEXERA
credentials "auth_flexera" do
  schemes "oauth2"
  label "Flexera"
  description "Select Flexera One OAuth2 credentials"
  tags "provider=flexera"
end

###############################################################################
# Pagination
###############################################################################

pagination "pagination_aws_marker" do
  get_page_marker do
    body_path jmes_path(response, "NextMarker")
  end
  set_page_marker do
    query "Marker"
  end
end

###############################################################################
# Datasources
###############################################################################

# ds_region_list is a list of regions that are opted-in or opt-in-not-required
datasource "ds_regions_list" do
  # https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DescribeRegions.html
  request do
    auth $auth_aws
    verb "GET"
    host "ec2.amazonaws.com"
    path "/"
    query "Action", "DescribeRegions"
    query "Version", "2016-11-15"
    query "Filter.1.Name", "opt-in-status"
    query "Filter.1.Value.1", "opt-in-not-required"
    query "Filter.1.Value.2", "opted-in"
    # Header X-Meta-Flexera has no affect on datasource query, but is required for Meta Policies
    # Forces `ds_is_deleted` datasource to run first during policy execution
    header "Meta-Flexera", val($ds_is_deleted, "path")
  end
  result do
    encoding "xml"
    collect xpath(response, "//DescribeRegionsResponse/regionInfo/item", "array") do
      field "region", xpath(col_item, "regionName")
    end
  end
end

# Get only SCP enabled regions
datasource "ds_regions" do
  run_script $js_regions, $param_allowed_regions, $ds_regions_list, $param_allowed_regions_allow_or_deny
end

datasource "ds_functions_list" do
  iterate $ds_regions
  request do
    auth $auth_aws
    pagination $pagination_aws_marker
    host join(['lambda.',val(iter_item,"region"),'.amazonaws.com'])
    path '/2015-03-31/functions/'
    verb 'GET'
  end
  result do
    encoding "json"
    collect jmes_path(response, "Functions[*]") do
      field "region", val(iter_item, "region")
      field "function_name", jmes_path(col_item, "FunctionName")
      field "function_arn", jmes_path(col_item, "FunctionArn")
    end
  end
end

datasource "ds_tags_list" do
  iterate $ds_functions_list
  request do
    auth $auth_aws
    pagination $pagination_aws_marker
    host join(['lambda.',val(iter_item,"region"),'.amazonaws.com'])
    path join(['/2017-03-31/tags/', val(iter_item, "function_arn")])
    verb 'GET'
  end
  result do
    encoding "json"
    field "region", val(iter_item, "region")
    field "function_name", val(iter_item, "function_name")
    field "function_arn", val(iter_item, "function_arn")
    field "tags", jmes_path(response,"Tags")
  end
end

datasource "ds_cloudwatch_function_invocations" do
  iterate $ds_functions_list
  request do
    run_script $js_cloudwatch_function, val(iter_item, "region"), val(iter_item, "function_name"), "Invocations"
  end
  result do
    encoding "json"
    collect jmes_path(response, "GetMetricStatisticsResponse.GetMetricStatisticsResult.Datapoints[*]") do
      field "region", val(iter_item, "region")
      field "function_name", val(iter_item, "function_name")
      field "function_arn", val(iter_item, "function_arn")
      field "invocations", jmes_path(col_item, "Sum")
    end
  end
end

datasource "ds_cloudwatch_function_errors" do
  iterate $ds_functions_list
  request do
    run_script $js_cloudwatch_function, val(iter_item, "region"), val(iter_item, "function_name"), "Errors"
  end
  result do
    encoding "json"
    collect jmes_path(response, "GetMetricStatisticsResponse.GetMetricStatisticsResult.Datapoints[*]") do
      field "region", val(iter_item, "region")
      field "function_name", val(iter_item, "function_name")
      field "function_arn", val(iter_item, "function_arn")
      field "errors", jmes_path(col_item, "Sum")
    end
  end
end

datasource "ds_merged_results" do
  run_script $js_merge_results, $ds_cloudwatch_function_invocations, $ds_cloudwatch_function_errors, $ds_tags_list, $param_exclude_tags
end

###############################################################################
# Script
###############################################################################

script "js_regions", type:"javascript" do
  parameters "user_entered_regions", "all_regions", "regions_allow_or_deny"
  result "regions"
  code <<-EOS
    if(_.isEmpty(user_entered_regions)){
      regions = all_regions;
    }else{
      //Filter unique regions
      var uniqueRegions = _.uniq(user_entered_regions);
      var all_regions_list = [];
      //Filter and remove denied regions from all_regions
      if (regions_allow_or_deny == "Deny"){
        var all_regions = all_regions.filter(function(obj){
          return user_entered_regions.indexOf(obj.region) === -1;
        });
      }
      all_regions.forEach(function(all_region){
        all_regions_list.push(all_region.region)
      })
      //Filter valid regions
      var valid_regions = [];
      _.map(uniqueRegions, function(uniqueRegion){
        if(all_regions_list.indexOf(uniqueRegion) > -1){
          valid_regions.push({"region": uniqueRegion})
        }
      })

      //Throw an error if no valid regions found
      if (_.isEmpty(valid_regions)) {
        regions = all_regions;
      }else{
        regions = valid_regions
      }
    }
  EOS
end

script "js_cloudwatch_function", type: "javascript" do
  result "results"
  parameters "region","function_name", "metric"
  code <<-EOS
  var end_date = new Date().toISOString()
  var start_date = new Date(new Date().setHours(new Date().getHours() - 1)).toISOString();
  results = {
    "auth": "auth_aws",
    "host": 'monitoring.'+region+'.amazonaws.com',
    "verb": "GET",
    "path": "/",
    "headers": {
      "User-Agent": "RS Policies",
      "Content-Type": "application/json",
      "x-amz-target": "GraniteServiceVersion20100801.GetMetricStatistics",
      "Accept": "application/json",
      "Content-Encoding": "amz-1.0"
    }
    "query_params": {
      'Action': 'GetMetricStatistics',
      'Version': '2010-08-01',
      'Namespace': 'AWS/Lambda',
      'MetricName': metric,
      'Dimensions.member.1.Name': 'FunctionName',
      'Dimensions.member.1.Value': function_name,
      'StartTime': start_date,
      'EndTime': end_date,
      'Period': "3600",
      'Statistics.member.1': 'Sum'
    }
  }
EOS
end

script "js_merge_results", type: "javascript" do
  result "results"
  parameters "ds_cloudwatch_function_invocations", "ds_cloudwatch_function_errors", "ds_tags_list", "param_exclude_tags"
  code <<-EOF
  results = []
  var optimizeCb = function(func, context, argCount) {
    if (context === void 0) return func;
    switch (argCount == null ? 3 : argCount) {
      case 1: return function(value) {
        return func.call(context, value);
      };
      case 2: return function(value, other) {
        return func.call(context, value, other);
      };
      case 3: return function(value, index, collection) {
        return func.call(context, value, index, collection);
      };
      case 4: return function(accumulator, value, index, collection) {
        return func.call(context, accumulator, value, index, collection);
      };
    }
    return function() {
      return func.apply(context, arguments);
    };
  };

  var cb = function(value, context, argCount) {
    if (value == null) return _.identity;
    if (_.isFunction(value)) return optimizeCb(value, context, argCount);
    if (_.isObject(value)) return _.matcher(value);
    return _.property(value);
  };
  _.iteratee = function(value, context) {
    return cb(value, context, Infinity);
  };

  _.mixin({
    mapObject: function(obj, iteratee, context) {
      iteratee = cb(iteratee, context);
      var keys =  _.keys(obj),
            length = keys.length,
            results = {},
            currentKey;
        for (var index = 0; index < length; index++) {
          currentKey = keys[index];
          results[currentKey] = iteratee(obj[currentKey], currentKey, obj);
        }
        return results;
    }
  });

  _.each(ds_cloudwatch_function_invocations, function(item){
    var filtered_error = _.first(
      _.filter(ds_cloudwatch_function_errors, function(error_item){
        if (item.function_name == error_item.function_name) {
          return error_item
        }
      })
    )
    var filtered_tags = _.first(
      _.filter(ds_tags_list, function(tag_item){
        if (item.function_arn == tag_item.function_arn){
          return tag_item
        }
      })
    )
    var tags = filtered_tags.tags
    var tag_key_value=""
    var is_tag_matched = false
    if(typeof(tags) != "undefined"){
      counter = 0
      _.mapObject(tags, function(val, key){
        if ( counter == 0){
          counter = 1
          tag_key_value = '' + key + '=' + val
        } else {
          tag_key_value = tag_key_value + ', ' + key + '=' + val
        }
        _.each(param_exclude_tags, function(tag){
          exclude_tag_key  = tag.split('=')[0]
          exclude_tag_value = tag.split('=')[1]
          if (exclude_tag_key == key){
            if (exclude_tag_value == val){
              is_tag_matched = true
            }
          }
        })
      })
    }
    var new_item = item
    error_percentage = (filtered_error.errors / item.invocations)
    new_item["accountId"] = item.function_arn.split(':')[4]
    new_item["error_count"] = filtered_error.errors
    new_item["error_percentage"] = error_percentage
    new_item["tags"] = tag_key_value
    if (!is_tag_matched){
      results.push(item)
    }
  })

  EOF
end
###############################################################################
# Policy
###############################################################################

policy "pol_functions_in_error" do
  validate_each $ds_merged_results do
    summary_template "AWS Account ID: {{with index data 0}}{{ .accountId }}{{end}}: {{ len data }} AWS Functions over error percentage"
    escalate $esc_functions_in_error
    # Policy check fails and incident is created only if data is not empty and the Parent Policy has not been terminated
    check logic_or($ds_parent_policy_terminated, lt(val(item, "error_percentage"), $param_error_rate))
    export do
      resource_level true
      field "accountId" do
        label "AWS Account Id"
      end
      field "id" do
        label "Function Name"
        path "function_name"
      end
      field "region" do
        label "Region"
      end
      field "invocations" do
        label "Invocations"
      end
      field "error_count" do
        label "Errors"
      end
      field "error_percentage" do
        label "Error Percentage"
      end
      field "tags" do
        label "tags"
      end
    end
  end
end

###############################################################################
# Escalations
###############################################################################

escalation "esc_functions_in_error" do
  automatic true
  label "Send Email"
  description "Send incident email"
  email $param_email
end

###############################################################################
# Cloud Workflow
###############################################################################

###############################################################################
# Meta Policy [alpha]
# Not intended to be modified or used by policy developers
###############################################################################

# If the meta_parent_policy_id is not set it will evaluate to an empty string and we will look for the policy itself,
# if it is set we will look for the parent policy.
datasource "ds_get_policy" do
  request do
    auth $auth_flexera
    host rs_governance_host
    ignore_status [404]
    path join(["/api/governance/projects/", rs_project_id, "/applied_policies/", switch(ne(meta_parent_policy_id,""), meta_parent_policy_id, policy_id) ])
    header "Api-Version", "1.0"
  end
  result do
    encoding "json"
    field "id", jmes_path(response, "id")
  end
end


datasource "ds_parent_policy_terminated" do
  run_script $js_decide_if_self_terminate, $ds_get_policy, policy_id, meta_parent_policy_id
end

# If the policy was applied by a meta_parent_policy we confirm it exists if it doesn't we confirm we are deleting
# This information is used in two places:
# - determining whether or not we make a delete call
# - determining if we should create an incident (we don't want to create an incident on the run where we terminate)
script "js_decide_if_self_terminate", type: "javascript" do
  parameters "found", "self_policy_id", "meta_parent_policy_id"
  result "result"
  code <<-EOS
  var result
  if (meta_parent_policy_id != "" && found.id == undefined) {
    result = true
  } else {
    result = false
  }
  EOS
end

# Two potentials ways to set this up:
# - this way and make a unneeded 'get' request when not deleting
# - make the delete request an interate and have it iterate over an empty array when not deleting and an array with one item when deleting
script "js_make_terminate_request", type: "javascript" do
  parameters "should_delete", "policy_id", "rs_project_id", "rs_governance_host"
  result "request"
  code <<-EOS

  var request = {
    auth:  'auth_flexera',
    host: rs_governance_host,
    path: "/api/governance/projects/" + rs_project_id + "/applied_policies/" + policy_id,
    headers: {
      "API-Version": "1.0",
      "Content-Type":"application/json"
    },
  }

  if (should_delete) {
    request.verb = 'DELETE'
  }
  EOS
end

datasource "ds_terminate_self" do
  request do
    run_script $js_make_terminate_request, $ds_parent_policy_terminated, policy_id, rs_project_id, rs_governance_host
  end
end

datasource "ds_is_deleted" do
  run_script $js_check_deleted, $ds_terminate_self
end

# This is just a way to have the check delete request connect to the farthest leaf from policy.
# We want the delete check to the first thing the policy does to avoid the policy erroring before it can decide whether or not it needs to self terminate
# Example a customer deletes a credential and then terminates the parent policy. We still want the children to self terminate
# The only way I could see this not happening is if the user who applied the parent_meta_policy was offboarded or lost policy access, the policies who are impersonating the user
# would not have access to self-terminate
# It may be useful for the backend to enable a mass terminate at some point for all meta_child_policies associated with an id.
script "js_check_deleted", type: "javascript" do
  parameters "response"
  result "result"
  code <<-EOS
  result = {"path":"/"}
  EOS
end

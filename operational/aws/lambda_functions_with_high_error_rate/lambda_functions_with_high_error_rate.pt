name "AWS Lambda Functions With High Error Rate"
rs_pt_ver 20180301
type "policy"
short_description "Report any AWS Lambda functions with high error rates. See the [README](https://github.com/flexera-public/policy_templates/tree/master/operational/aws/lambda_functions_with_high_error_rate) and [docs.flexera.com/flexera/EN/Automation](https://docs.flexera.com/flexera/EN/Automation/AutomationGS.htm) to learn more."
long_description ""
severity "high"
category "Operational"
default_frequency "daily"
info(
  version: "4.2.1",
  provider: "AWS",
  service: "PaaS",
  policy_set: "Lambda"
)

###############################################################################
# Parameters
###############################################################################

parameter "param_email" do
  type "list"
  category "Policy Settings"
  label "Email Addresses"
  description "A list of email addresses to notify."
  default []
end

parameter "param_aws_account_number" do
  type "string"
  category "Policy Settings"
  label "Account Number"
  description "Leave blank; this is for automated use with Meta Policies. See README for more details."
  default ""
end

parameter "param_error_rate" do
  type "number"
  category "Policy Settings"
  label "Error Rate Percentage"
  description "Percentage of requests that result in an error to include a Lambda function in the results."
  min_value 1
  default 10
end

parameter "param_regions_allow_or_deny" do
  type "string"
  category "Filters"
  label "Allow/Deny Regions"
  description "Allow or Deny entered regions. See the README for more details."
  default "Allow"
  allowed_values "Allow", "Deny"
end

parameter "param_regions_list" do
  type "list"
  category "Filters"
  label "Allow/Deny Regions List"
  description "A list of allowed or denied regions. See the README for more details."
  default []
  allowed_pattern /^([a-zA-Z-_]+-[a-zA-Z0-9-_]+-[0-9-_]+,*|)+$/
end

parameter "param_exclusion_tags" do
  type "list"
  category "Filters"
  label "Exclusion Tags"
  description "Cloud native tags to ignore resources that you don't want to produce recommendations for. Enter the Key name to filter resources with a specific Key, regardless of Value, and enter Key==Value to filter resources with a specific Key:Value pair. Other operators and regex are supported; please see the README for more details."
  default []
end

parameter "param_exclusion_tags_boolean" do
  type "string"
  category "Filters"
  label "Exclusion Tags: Any / All"
  description "Whether to filter instances containing any of the specified tags or only those that contain all of them. Only applicable if more than one value is entered in the 'Exclusion Tags' field."
  allowed_values "Any", "All"
  default "Any"
end

parameter "param_stats_lookback" do
  type "number"
  category "Statistics"
  label "Statistic Lookback Period"
  description "How many days back to look at CloudWatch data for AWS Lambda. This value cannot be set higher than 90 because AWS does not retain metrics for longer than 90 days."
  default 1
  min_value 1
  max_value 90
end

###############################################################################
# Authentication
###############################################################################

credentials "auth_aws" do
  schemes "aws", "aws_sts"
  label "AWS"
  description "Select the AWS Credential from the list"
  tags "provider=aws"
  aws_account_number $param_aws_account_number
end

credentials "auth_flexera" do
  schemes "oauth2"
  label "Flexera"
  description "Select Flexera One OAuth2 credentials"
  tags "provider=flexera"
end

###############################################################################
# Pagination
###############################################################################

pagination "pagination_aws_marker" do
  get_page_marker do
    body_path jmes_path(response, "NextMarker")
  end
  set_page_marker do
    query "Marker"
  end
end

###############################################################################
# Datasources & Scripts
###############################################################################

# Get applied policy metadata for use later
datasource "ds_applied_policy" do
  request do
    auth $auth_flexera
    host rs_governance_host
    path join(["/api/governance/projects/", rs_project_id, "/applied_policies/", policy_id])
    header "Api-Version", "1.0"
  end
end

# Get region-specific Flexera API endpoints
datasource "ds_flexera_api_hosts" do
  run_script $js_flexera_api_hosts, rs_optima_host
end

script "js_flexera_api_hosts", type: "javascript" do
  parameters "rs_optima_host"
  result "result"
  code <<-'EOS'
  host_table = {
    "api.optima.flexeraeng.com": {
      flexera: "api.flexera.com",
      fsm: "api.fsm.flexeraeng.com"
    },
    "api.optima-eu.flexeraeng.com": {
      flexera: "api.flexera.eu",
      fsm: "api.fsm-eu.flexeraeng.com"
    },
    "api.optima-apac.flexeraeng.com": {
      flexera: "api.flexera.au",
      fsm: "api.fsm-apac.flexeraeng.com"
    }
  }

  result = host_table[rs_optima_host]
EOS
end

# Get AWS account info
datasource "ds_cloud_vendor_accounts" do
  request do
    auth $auth_flexera
    host val($ds_flexera_api_hosts, 'flexera')
    path join(["/finops-analytics/v1/orgs/", rs_org_id, "/cloud-vendor-accounts"])
    header "Api-Version", "1.0"
  end
  result do
    encoding "json"
    collect jmes_path(response, "values[*]") do
      field "id", jmes_path(col_item, "aws.accountId")
      field "name", jmes_path(col_item, "name")
      field "tags", jmes_path(col_item, "tags")
    end
  end
end

datasource "ds_get_caller_identity" do
  request do
    auth $auth_aws
    verb "GET"
    host "sts.amazonaws.com"
    path "/"
    header "User-Agent", "RS Policies"
    query "Action", "GetCallerIdentity"
    query "Version", "2011-06-15"
  end
  result do
    encoding "xml"
    collect xpath(response, "//GetCallerIdentityResponse/GetCallerIdentityResult") do
      field "account", xpath(col_item, "Account")
    end
  end
end

datasource "ds_aws_account" do
  run_script $js_aws_account, $ds_cloud_vendor_accounts, $ds_get_caller_identity
end

script "js_aws_account", type:"javascript" do
  parameters "ds_cloud_vendor_accounts", "ds_get_caller_identity"
  result "result"
  code <<-'EOS'
  result = _.find(ds_cloud_vendor_accounts, function(account) {
    return account['id'] == ds_get_caller_identity[0]['account']
  })

  // This is in case the API does not return the relevant account info
  if (result == undefined) {
    result = {
      id: ds_get_caller_identity[0]['account'],
      name: "",
      tags: {}
    }
  }
EOS
end

datasource "ds_describe_regions" do
  request do
    auth $auth_aws
    verb "GET"
    host "ec2.amazonaws.com"
    path "/"
    query "Action", "DescribeRegions"
    query "Version", "2016-11-15"
    query "Filter.1.Name", "opt-in-status"
    query "Filter.1.Value.1", "opt-in-not-required"
    query "Filter.1.Value.2", "opted-in"
    # Header X-Meta-Flexera has no affect on datasource query, but is required for Meta Policies
    # Forces `ds_is_deleted` datasource to run first during policy execution
    header "Meta-Flexera", val($ds_is_deleted, "path")
  end
  result do
    encoding "xml"
    collect xpath(response, "//DescribeRegionsResponse/regionInfo/item", "array") do
      field "region", xpath(col_item, "regionName")
    end
  end
end

datasource "ds_regions" do
  run_script $js_regions, $ds_describe_regions, $param_regions_list, $param_regions_allow_or_deny
end

script "js_regions", type:"javascript" do
  parameters "ds_describe_regions", "param_regions_list", "param_regions_allow_or_deny"
  result "result"
  code <<-'EOS'
  allow_deny_test = { "Allow": true, "Deny": false }

  if (param_regions_list.length > 0) {
    result = _.filter(ds_describe_regions, function(item) {
      return _.contains(param_regions_list, item['region']) == allow_deny_test[param_regions_allow_or_deny]
    })
  } else {
    result = ds_describe_regions
  }
EOS
end

datasource "ds_aws_lambda_functions" do
  iterate $ds_regions
  request do
    auth $auth_aws
    pagination $pagination_aws_marker
    host join(["lambda.", val(iter_item, "region"), ".amazonaws.com"])
    path "/2015-03-31/functions/"
  end
  result do
    encoding "json"
    collect jmes_path(response, "Functions[*]") do
      field "region", val(iter_item, "region")
      field "arn", jmes_path(col_item, "FunctionArn")
      field "name", jmes_path(col_item, "FunctionName")
      field "description", jmes_path(col_item, "Description")
      field "lastModified", jmes_path(col_item, "LastModified")
      field "lastUpdateStatus", jmes_path(col_item, "LastUpdateStatus")
      field "runtime", jmes_path(col_item, "Runtime")
      field "state", jmes_path(col_item, "State")
      field "stateReason", jmes_path(col_item, "StateReason")
      field "stateReasonCode", jmes_path(col_item, "StateReasonCode")
      field "version", jmes_path(col_item, "Version")
    end
  end
end

datasource "ds_aws_lambda_functions_with_tags" do
  iterate $ds_aws_lambda_functions
  request do
    auth $auth_aws
    pagination $pagination_aws_marker
    host join(["lambda.", val(iter_item, "region"), ".amazonaws.com"])
    path join(["/2017-03-31/tags/", val(iter_item, "arn")])
  end
  result do
    encoding "json"
    field "tags", jmes_path(response, "Tags")
    field "region", val(iter_item, "region")
    field "arn", val(iter_item, "arn")
    field "name", val(iter_item, "name")
    field "description", val(iter_item, "description")
    field "lastModified", val(iter_item, "lastModified")
    field "lastUpdateStatus", val(iter_item, "lastUpdateStatus")
    field "runtime", val(iter_item, "runtime")
    field "state", val(iter_item, "state")
    field "stateReason", val(iter_item, "stateReason")
    field "stateReasonCode", val(iter_item, "stateReasonCode")
    field "version", val(iter_item, "version")
  end
end

datasource "ds_aws_lambda_functions_tag_filtered" do
  run_script $js_aws_lambda_functions_tag_filtered, $ds_aws_lambda_functions_with_tags, $param_exclusion_tags, $param_exclusion_tags_boolean
end

script "js_aws_lambda_functions_tag_filtered", type: "javascript" do
  parameters "ds_aws_lambda_functions_with_tags", "param_exclusion_tags", "param_exclusion_tags_boolean"
  result "result"
  code <<-'EOS'
  comparators = _.map(param_exclusion_tags, function(item) {
    if (item.indexOf('==') != -1) {
      return { comparison: '==', key: item.split('==')[0], value: item.split('==')[1], string: item }
    }

    if (item.indexOf('!=') != -1) {
      return { comparison: '!=', key: item.split('!=')[0], value: item.split('!=')[1], string: item }
    }

    if (item.indexOf('=~') != -1) {
      value = item.split('=~')[1]
      regex = new RegExp(value.slice(1, value.length - 1))
      return { comparison: '=~', key: item.split('=~')[0], value: regex, string: item }
    }

    if (item.indexOf('!~') != -1) {
      value = item.split('!~')[1]
      regex = new RegExp(value.slice(1, value.length - 1))
      return { comparison: '!~', key: item.split('!~')[0], value: regex, string: item }
    }

    // If = is present but none of the above are, assume user error and that the user intended ==
    if (item.indexOf('=') != -1) {
      return { comparison: '==', key: item.split('=')[0], value: item.split('=')[1], string: item }
    }

    // Assume we're just testing for a key if none of the comparators are found
    return { comparison: 'key', key: item, value: null, string: item }
  })

  if (param_exclusion_tags.length > 0) {
    result = _.reject(ds_aws_lambda_functions_with_tags, function(resource) {
      resource_tags = {}

      if (typeof(resource['tags']) == 'object') {
        _.each(resource['tags'], function(tag) {
          resource_tags[tag['key']] = tag['value']
        })
      }

      // Store a list of found tags
      found_tags = []

      _.each(comparators, function(comparator) {
        comparison = comparator['comparison']
        value = comparator['value']
        string = comparator['string']
        resource_tag = resource_tags[comparator['key']]

        if (comparison == 'key' && resource_tag != undefined) { found_tags.push(string) }
        if (comparison == '==' && resource_tag == value) { found_tags.push(string) }
        if (comparison == '!=' && resource_tag != value) { found_tags.push(string) }

        if (comparison == '=~') {
          if (resource_tag != undefined && value.test(resource_tag)) { found_tags.push(string) }
        }

        if (comparison == '!~') {
          if (resource_tag == undefined) { found_tags.push(string) }
          if (resource_tag != undefined && value.test(resource_tag)) { found_tags.push(string) }
        }
      })

      all_tags_found = found_tags.length == comparators.length
      any_tags_found = found_tags.length > 0 && param_exclusion_tags_boolean == 'Any'

      return all_tags_found || any_tags_found
    })
  } else {
    result = ds_aws_lambda_functions_with_tags
  }
EOS
end

datasource "ds_cloudwatch_queries" do
  run_script $js_cloudwatch_queries, $ds_aws_lambda_functions_tag_filtered, $param_stats_lookback
end

script "js_cloudwatch_queries", type: "javascript" do
  parameters "ds_aws_lambda_functions_tag_filtered", "param_stats_lookback"
  result "result"
  code <<-EOS
  // Create the various queries we're going to send to CloudWatch for each function
  result = {}

  _.each(ds_aws_lambda_functions_tag_filtered, function(resource) {
    // Make sure the queries object has an array for the region to push items to
    if (result[resource['region']] == undefined || result[resource['region']] == null) {
      result[resource['region']] = []
    }

    //We want to collect each of these list of statistics we care about
    metrics = ["Invocations", "Errors"]
    lookback = param_stats_lookback * 86400

    _.each(metrics, function(metric) {
      query = {
        "Id": metric.toLowerCase() + "_" + resource['name'].replace('-', '_'),
        "MetricStat": {
          "Metric": {
            "Namespace": "AWS/Lambda",
            "MetricName": metric,
            "Dimensions": [
              { "Name": "FunctionName", "Value": resource['name'] }
            ]
          },
          "Period": lookback,
          "Stat": "Sum"
        },
        "ReturnData": true
      }

      result[resource['region']].push(query)
    })
  })
EOS
end

# Combine queries into 500 item blocks so we can make bulk requests to Cloudwatch
datasource "ds_cloudwatch_requests" do
  run_script $js_cloudwatch_requests, $ds_cloudwatch_queries, $param_stats_lookback
end

script "js_cloudwatch_requests", type: "javascript" do
  parameters "ds_cloudwatch_queries", "param_stats_lookback"
  result "result"
  code <<-EOS
  // Organize the queries into discrete requests to send in.
  // Queries are first sorted by region and then split into 500 item blocks.
  result = []
  query_block_size = 500

  // Round down to beginning of the hour to avoid getting multiple values
  // from CloudWatch due to how the data is sliced
  end_date = new Date()
  end_date.setMinutes(0, 0, 0)
  end_date = parseInt(end_date.getTime() / 1000)

  start_date = new Date()
  start_date.setDate(start_date.getDate() - param_stats_lookback)
  start_date.setMinutes(0, 0, 0)
  start_date = parseInt(start_date.getTime() / 1000)

  _.each(Object.keys(ds_cloudwatch_queries), function(region) {
    for (i = 0; i < ds_cloudwatch_queries[region].length; i += query_block_size) {
      chunk = ds_cloudwatch_queries[region].slice(i, i + query_block_size)

      result.push({
        body: {
          "StartTime": start_date,
          "EndTime": end_date,
          "MetricDataQueries": chunk
        },
        region: region
      })
    }
  })
EOS
end

datasource "ds_cloudwatch_data" do
  iterate $ds_cloudwatch_requests
  request do
    run_script $js_cloudwatch_data, val(iter_item, "region"), val(iter_item, "body")
  end
  result do
    encoding "json"
    collect jmes_path(response, "MetricDataResults[*]") do
      field "region", val(iter_item, "region")
      field "id", jmes_path(col_item, "Id")
      field "label", jmes_path(col_item, "Label")
      field "values", jmes_path(col_item, "Values")
    end
  end
end

script "js_cloudwatch_data", type: "javascript" do
  parameters "region", "body"
  result "request"
  code <<-EOS
  // Slow down rate of requests to prevent
  api_wait = 5
  var now = new Date().getTime()
  while(new Date().getTime() < now + (api_wait * 1000)) { /* Do nothing */ }

  var request = {
    auth: "auth_aws",
    host: "monitoring." + region + ".amazonaws.com",
    verb: "POST",
    path: "/",
    query_params: {
      "Action": "GetMetricData",
      "Version": "2010-08-01"
    },
    headers: {
      "User-Agent": "RS Policies",
      "Content-Type": "application/json",
      "x-amz-target": "GraniteServiceVersion20100801.GetMetricData",
      "Accept": "application/json",
      "Content-Encoding": "amz-1.0"
    },
    body: JSON.stringify(body)
  }
EOS
end

datasource "ds_cloudwatch_data_sorted" do
  run_script $js_cloudwatch_data_sorted, $ds_cloudwatch_data
end

script "js_cloudwatch_data_sorted", type: "javascript" do
  parameters "ds_cloudwatch_data"
  result "result"
  code <<-EOS
  // Sort the CloudWatch data into an object with keys for regions and instance names.
  // This eliminates the need to "double loop" later on to match it with our instances list.
  result = {}

  _.each(ds_cloudwatch_data, function(item) {
    region = item['region']
    id_parts = item['id'].split('_')
    metric = id_parts.shift()
    resource_name = id_parts.join('_')

    // Grabbing index 0 SHOULD be safe because we should only get one result.
    // Just in case AWS slices the data weirdly and returns 2 results, we make
    // sure we grab the last item every time, which contains the actual data we need.
    value = item['values'][item['values'].length - 1]

    if (result[region] == undefined) { result[region] = {} }
    if (result[region][resource_name] == undefined) { result[region][resource_name] = {} }

    result[region][resource_name][metric] = value
  })
EOS
end

datasource "ds_aws_lambda_functions_with_errors" do
  run_script $js_aws_lambda_functions_with_errors, $ds_aws_lambda_functions_tag_filtered, $ds_cloudwatch_data_sorted, $param_error_rate
end

script "js_aws_lambda_functions_with_errors", type: "javascript" do
  parameters "ds_aws_lambda_functions_tag_filtered", "ds_cloudwatch_data_sorted", "param_error_rate"
  result "result"
  code <<-'EOS'
  result = []

  _.each(ds_aws_lambda_functions_tag_filtered, function(resource) {
    region = resource['region']
    stat_name = resource['name'].replace('-', '_')

    // Only proceed if the CloudWatch data actually has the region and resource name.
    // Otherwise, we have no data on the resource and thus don't include it in the results.
    if (ds_cloudwatch_data_sorted[region] != undefined) {
      if (ds_cloudwatch_data_sorted[region][id] != undefined) {
        data = ds_cloudwatch_data_sorted[region][id]
        invocations = 0
        errors = 0
        error_rate = 0

        if (typeof(data["invocations"]) == 'number') { invocations = data["invocations"] }
        if (typeof(data["errors"]) == 'number') { errors = data["errors"] }
        if (invocations != 0) { error_rate = (errors / invocations) * 100 }

        if (error_rate > param_error_rate) {
          tags = []

          if (instance['tags'] != undefined && instance['tags'] != null) {
            _.each(instance['tags'], function(tag) {
              tags.push([tag['key'], tag['value']].join('='))
            })
          }

          result.push({
            arn: resource['arn'],
            name: resource['name'],
            description: resource['description'],
            region: resource['region'],
            lastModified: resource['lastModified'],
            lastUpdateStatus: resource['lastUpdateStatus'],
            runtime: resource['runtime'],
            state: resource['state'],
            stateReason: resource['stateReason'],
            stateReasonCode: resource['stateReasonCode'],
            version: resource['version'],
            tags: tags.join(', '),
            invocations: invocations,
            errors: errors,
            error_rate: error_rate
          })
        }
      }
    }
  })
EOS
end

datasource "ds_incident" do
  run_script $js_incident, $ds_aws_lambda_functions_tag_filtered, $ds_aws_lambda_functions_with_errors, $ds_aws_account, $ds_applied_policy, $param_error_rate, $param_stats_lookback
end

script "js_incident", type: "javascript" do
  parameters "ds_aws_lambda_functions_tag_filtered", "ds_aws_lambda_functions_with_errors", "ds_aws_account", "ds_applied_policy", "param_error_rate", "param_stats_lookback"
  result "result"
  code <<-'EOS'
  result = _.map(ds_aws_lambda_functions_with_errors, function(resource) {
    return {
      resourceID: resource['arn'],
      resourceName: resource['name'],
      description: resource['description'],
      region: resource['region'],
      lastModified: resource['lastModified'],
      lastUpdateStatus: resource['lastUpdateStatus'],
      runtime: resource['runtime'],
      state: resource['state'],
      stateReason: resource['stateReason'],
      stateReasonCode: resource['stateReasonCode'],
      version: resource['version'],
      tags: resource['tags'],
      invocations: resource['invocations'],
      errors: resource['errors'],
      error_rate: Math.round(resource['error_rate'] * 100) / 100,
      accountID: ds_aws_account['id'],
      accountName: ds_aws_account['name'],
      policy_name: ds_applied_policy['name'],
      threshold: param_error_rate,
      lookbackPeriod: param_stats_lookback,
      message: ""
    }
  })

  // List functions with the most errors first
  result = _.sortBy(result, "error_rate").reverse()

  // Message for incident output
  total_lambda = ds_snapshots_combined.length.toString()
  total_error_lambda = result.length.toString()
  error_lambda_percentage = (total_error_lambda / total_lambda * 100).toFixed(2).toString() + '%'

  days = param_stats_lookback.toString() + " days"
  if (param_stats_lookback == 1) { days = " day" }

  findings = [
    "Out of ", total_lambda, " AWS Lambda functions analyzed, ",
    total_error_lambda, " (", error_lambda_percentage,
    ") have an error rate of over ", param_error_rate, "% ",
    "over the last ", days, ".\n\n"
  ].join('')

  disclaimer = "The above settings can be modified by editing the applied policy and changing the appropriate parameters."

  // Dummy entry to ensure validation occurs at least once
  result.push({
    resourceID: "",
    resourceName: "",
    description: "",
    region: "",
    lastModified: "",
    lastUpdateStatus: "",
    runtime: "",
    state: "",
    stateReason: "",
    stateReasonCode: "",
    version: "",
    tags: "",
    invocations: "",
    errors: "",
    error_rate: "",
    accountID: "",
    accountName: "",
    policy_name: "",
    threshold: "",
    lookbackPeriod: "",
    message: ""
  })

  result[0]["message"] = findings + disclaimer
EOS
end

###############################################################################
# Policy
###############################################################################

policy "pol_functions_in_error" do
  validate_each $ds_merged_results do
    summary_template "AWS Account ID: {{with index data 0}}{{ .accountId }}{{end}}: {{ len data }} AWS Functions over error percentage"
    # Policy check fails and incident is created only if data is not empty and the Parent Policy has not been terminated
    check logic_or($ds_parent_policy_terminated, lt(val(item, "error_percentage"), $param_error_rate))
    escalate $esc_email
    export do
      resource_level true
      field "accountId" do
        label "AWS Account Id"
      end
      field "id" do
        label "Function Name"
        path "function_name"
      end
      field "region" do
        label "Region"
      end
      field "invocations" do
        label "Invocations"
      end
      field "error_count" do
        label "Errors"
      end
      field "error_percentage" do
        label "Error Percentage"
      end
      field "tags" do
        label "tags"
      end
    end
  end
end

###############################################################################
# Escalations
###############################################################################

escalation "esc_email" do
  automatic true
  label "Send Email"
  description "Send incident email"
  email $param_email
end

###############################################################################
# Cloud Workflow
###############################################################################

###############################################################################
# Meta Policy [alpha]
# Not intended to be modified or used by policy developers
###############################################################################

# If the meta_parent_policy_id is not set it will evaluate to an empty string and we will look for the policy itself,
# if it is set we will look for the parent policy.
datasource "ds_get_policy" do
  request do
    auth $auth_flexera
    host rs_governance_host
    ignore_status [404]
    path join(["/api/governance/projects/", rs_project_id, "/applied_policies/", switch(ne(meta_parent_policy_id, ""), meta_parent_policy_id, policy_id) ])
    header "Api-Version", "1.0"
  end
  result do
    encoding "json"
    field "id", jmes_path(response, "id")
  end
end

datasource "ds_parent_policy_terminated" do
  run_script $js_decide_if_self_terminate, $ds_get_policy, policy_id, meta_parent_policy_id
end

# If the policy was applied by a meta_parent_policy we confirm it exists if it doesn't we confirm we are deleting
# This information is used in two places:
# - determining whether or not we make a delete call
# - determining if we should create an incident (we don't want to create an incident on the run where we terminate)
script "js_decide_if_self_terminate", type: "javascript" do
  parameters "found", "self_policy_id", "meta_parent_policy_id"
  result "result"
  code <<-EOS
  var result
  if (meta_parent_policy_id != "" && found.id == undefined) {
    result = true
  } else {
    result = false
  }
  EOS
end

# Two potentials ways to set this up:
# - this way and make a unneeded 'get' request when not deleting
# - make the delete request an interate and have it iterate over an empty array when not deleting and an array with one item when deleting
script "js_make_terminate_request", type: "javascript" do
  parameters "should_delete", "policy_id", "rs_project_id", "rs_governance_host"
  result "request"
  code <<-EOS

  var request = {
    auth:  'auth_flexera',
    host: rs_governance_host,
    path: "/api/governance/projects/" + rs_project_id + "/applied_policies/" + policy_id,
    headers: {
      "API-Version": "1.0",
      "Content-Type":"application/json"
    },
  }

  if (should_delete) {
    request.verb = 'DELETE'
  }
  EOS
end

datasource "ds_terminate_self" do
  request do
    run_script $js_make_terminate_request, $ds_parent_policy_terminated, policy_id, rs_project_id, rs_governance_host
  end
end

datasource "ds_is_deleted" do
  run_script $js_check_deleted, $ds_terminate_self
end

# This is just a way to have the check delete request connect to the farthest leaf from policy.
# We want the delete check to the first thing the policy does to avoid the policy erroring before it can decide whether or not it needs to self terminate
# Example a customer deletes a credential and then terminates the parent policy. We still want the children to self terminate
# The only way I could see this not happening is if the user who applied the parent_meta_policy was offboarded or lost policy access, the policies who are impersonating the user
# would not have access to self-terminate
# It may be useful for the backend to enable a mass terminate at some point for all meta_child_policies associated with an id.
script "js_check_deleted", type: "javascript" do
  parameters "response"
  result "result"
  code <<-EOS
  result = {"path":"/"}
  EOS
end

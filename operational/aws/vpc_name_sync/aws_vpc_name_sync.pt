name "AWS VPC Name Tag Sync"
rs_pt_ver 20180301
type "policy"
short_description "Ensures VPC names in Flexera Cloud Management align with the VPC name tag in AWS. See the [README](https://github.com/flexera-public/policy_templates/tree/master/operational/aws/vpc_name_sync) and [docs.flexera.com/flexera/EN/Automation](https://docs.flexera.com/flexera/EN/Automation/AutomationGS.htm) to learn more."
long_description ""
category "Operational"
severity "medium"
default_frequency "weekly"
info(
  version: "4.0",
  provider: "AWS",
  service: "VPC",
  policy_set: "",
  publish: "false"
)

###############################################################################
# Parameters
###############################################################################

parameter "param_email" do
  type "list"
  category "Policy Settings"
  label "Email addresses to notify"
  description "Email addresses of the recipients you wish to notify when new incidents are created"
  default []
end

parameter "param_aws_account_number" do
  type "string"
  category "Policy Settings"
  label "Account Number"
  description "Leave blank; this is for automated use with Meta Policies. See README for more details."
  default ""
end

parameter "param_regions_allow_or_deny" do
  type "string"
  category "Filters"
  label "Allow/Deny Regions"
  description "Allow or Deny entered regions. See the README for more details"
  allowed_values "Allow", "Deny"
  default "Allow"
end

parameter "param_regions_list" do
  type "list"
  category "Filters"
  label "Allow/Deny Regions List"
  allowed_pattern /^([a-zA-Z-_]+-[a-zA-Z0-9-_]+-[0-9-_]+,*|)+$/
  description "A list of allowed or denied regions. See the README for more details"
  default []
end

parameter "param_automatic_action" do
  type "list"
  category "Actions"
  label "Automatic Actions"
  description "When this value is set, this policy will automatically take the selected action(s)"
  allowed_values ["Update VPCs"]
  default []
end

###############################################################################
# Authentication
###############################################################################

credentials "auth_aws" do
  schemes "aws", "aws_sts"
  label "AWS"
  description "Select the AWS Credential from the list"
  tags "provider=aws"
  aws_account_number $param_aws_account_number
end

credentials "auth_flexera" do
  schemes "oauth2"
  label "Flexera"
  description "Select Flexera One OAuth2 credentials"
  tags "provider=flexera"
end

auth "rs", type: "rightscale"

###############################################################################
# Pagination
###############################################################################

pagination "pagination_aws" do
  get_page_marker do
    body_path jmes_path(response, "NextToken")
  end
  set_page_marker do
    body_field "NextToken"
  end
end

###############################################################################
# Permissions
###############################################################################

permission "perm_read_creds" do
  actions   "rs_cm.show_sensitive","rs_cm.index_sensitive"
  resources "rs_cm.credentials"
end

permission "perm_update_network_name" do
  actions   "rs_cm.index","rs_cm.show","rs_cm.update"
  resources "rs_cm.networks"
end

parameter "param_automatic_action" do
  type "list"
  label "Automatic Actions"
  description "When this value is set, this policy will automatically take the selected action(s)"
  allowed_values ["Update VPC"]
  default []
end

###############################################################################
# Resources
###############################################################################

resources "clouds", type: "rs_cm.clouds" do
  filter do
    cloud_type "amazon"
  end
end

resources "networks", type: "rs_cm.network" do
  iterate @clouds
  filter do
    cloud_href href(iter_item)
  end
end

###############################################################################
# Datasources & Scripts
###############################################################################

# Get applied policy metadata for use later
datasource "ds_applied_policy" do
  request do
    auth $auth_flexera
    host rs_governance_host
    path join(["/api/governance/projects/", rs_project_id, "/applied_policies/", policy_id])
    header "Api-Version", "1.0"
  end
end

# Get region-specific Flexera API endpoints
datasource "ds_flexera_api_hosts" do
  run_script $js_flexera_api_hosts, rs_optima_host
end

script "js_flexera_api_hosts", type: "javascript" do
  parameters "rs_optima_host"
  result "result"
  code <<-EOS
  host_table = {
    "api.optima.flexeraeng.com": {
      flexera: "api.flexera.com",
      fsm: "api.fsm.flexeraeng.com"
    },
    "api.optima-eu.flexeraeng.com": {
      flexera: "api.flexera.eu",
      fsm: "api.fsm-eu.flexeraeng.com"
    },
    "api.optima-apac.flexeraeng.com": {
      flexera: "api.flexera.au",
      fsm: "api.fsm-apac.flexeraeng.com"
    }
  }

  result = host_table[rs_optima_host]
EOS
end

# Get AWS account info
datasource "ds_cloud_vendor_accounts" do
  request do
    auth $auth_flexera
    host val($ds_flexera_api_hosts, 'flexera')
    path join(["/finops-analytics/v1/orgs/", rs_org_id, "/cloud-vendor-accounts"])
    header "Api-Version", "1.0"
  end
  result do
    encoding "json"
    collect jmes_path(response, "values[*]") do
      field "id", jmes_path(col_item, "aws.accountId")
      field "name", jmes_path(col_item, "name")
      field "tags", jmes_path(col_item, "tags")
    end
  end
end

datasource "ds_get_caller_identity" do
  request do
    auth $auth_aws
    verb "GET"
    host "sts.amazonaws.com"
    path "/"
    header "User-Agent", "RS Policies"
    query "Action", "GetCallerIdentity"
    query "Version", "2011-06-15"
  end
  result do
    encoding "xml"
    collect xpath(response, "//GetCallerIdentityResponse/GetCallerIdentityResult") do
      field "account", xpath(col_item, "Account")
    end
  end
end

datasource "ds_aws_account" do
  run_script $js_aws_account, $ds_cloud_vendor_accounts, $ds_get_caller_identity
end

script "js_aws_account", type:"javascript" do
  parameters "ds_cloud_vendor_accounts", "ds_get_caller_identity"
  result "result"
  code <<-EOS
  result = _.find(ds_cloud_vendor_accounts, function(account) {
    return account['id'] == ds_get_caller_identity[0]['account']
  })

  // This is in case the API does not return the relevant account info
  if (result == undefined) {
    result = {
      id: ds_get_caller_identity[0]['account'],
      name: "",
      tags: {}
    }
  }
EOS
end

datasource "ds_describe_regions" do
  request do
    auth $auth_aws
    verb "GET"
    host "ec2.amazonaws.com"
    path "/"
    query "Action", "DescribeRegions"
    query "Version", "2016-11-15"
    query "Filter.1.Name", "opt-in-status"
    query "Filter.1.Value.1", "opt-in-not-required"
    query "Filter.1.Value.2", "opted-in"
    # Header X-Meta-Flexera has no affect on datasource query, but is required for Meta Policies
    # Forces `ds_is_deleted` datasource to run first during policy execution
    header "Meta-Flexera", val($ds_is_deleted, "path")
  end
  result do
    encoding "xml"
    collect xpath(response, "//DescribeRegionsResponse/regionInfo/item", "array") do
      field "region", xpath(col_item, "regionName")
    end
  end
end

datasource "ds_regions" do
  run_script $js_regions, $ds_describe_regions, $param_regions_list, $param_regions_allow_or_deny
end

script "js_regions", type:"javascript" do
  parameters "ds_describe_regions", "param_regions_list", "param_regions_allow_or_deny"
  result "result"
  code <<-EOS
  allow_deny_test = { "Allow": true, "Deny": false }

  if (param_regions_list.length > 0) {
    result = _.filter(ds_describe_regions, function(item) {
      return _.contains(param_regions_list, item['region']) == allow_deny_test[param_regions_allow_or_deny]
    })
  } else {
    result = ds_describe_regions
  }
EOS
end

datasource "ds_aws_vpcs" do
  iterate $ds_regions
  request do
    auth $auth_aws
    host join(["ec2.", val(iter_item,"region"), ".amazonaws.com"])
    path "/"
    query "Action", "DescribeVpcs"
    query "Version", "2016-11-15"
    header "User-Agent", "RS Policies"
  end
  result do
    encoding "xml"
    collect xpath(response, "//DescribeVpcsResponse/vpcSet/item", "array") do
      field "id", xpath(col_item, "vpcId")
      field "region", val(iter_item, "region")
      field "tags" do
        collect xpath(col_item, "tagSet/item") do
          field "key", xpath(col_item, "key")
          field "value", xpath(col_item, "value")
        end
      end

    end
  end
end

datasource "ds_networks" do
  iterate @networks
  field "name", val(iter_item, "name")
  field "href", href(iter_item)
  field "resource_uid", val(iter_item, "resource_uid")
end

datasource "ds_rs_updates" do
  run_script $script_vpcs, $ds_vpcs, $ds_networks
end

###############################################################################
# Scripts
###############################################################################

script "js_regions", type:"javascript" do
  parameters "user_entered_regions", "all_regions", "regions_allow_or_deny"
  result "regions"
  code <<-EOS
    if(_.isEmpty(user_entered_regions)){
      regions = all_regions;
    }else{
      //Filter unique regions
      var uniqueRegions = _.uniq(user_entered_regions);
      var all_regions_list = [];
      //Filter and remove denied regions from all_regions
      if (regions_allow_or_deny == "Deny"){
        var all_regions = all_regions.filter(function(obj){
          return user_entered_regions.indexOf(obj.region) === -1;
        });
      }
      all_regions.forEach(function(all_region){
        all_regions_list.push(all_region.region)
      })
      //Filter valid regions
      var valid_regions = [];
      _.map(uniqueRegions, function(uniqueRegion){
        if(all_regions_list.indexOf(uniqueRegion) > -1){
          valid_regions.push({"region": uniqueRegion})
        }
      })

      //Throw an error if no valid regions found
      if (_.isEmpty(valid_regions)) {
        regions = all_regions;
      }else{
        regions = valid_regions
      }
    }
  EOS
end

script "script_vpcs", type: "javascript" do
  parameters "ds_vpcs","ds_networks"
  result "updates"
  code <<-EOS
    results = [];
    updates = [];

    for( i = 0; i <= ds_vpcs.length - 1; i++) {
      var tags = ds_vpcs[i]["tag_set"];

      var name = "";
      for( x = 0; x <= tags.length - 1; x++){
        if(tags[x]["key"] === "Name") {
          name = tags[x]["value"];
        }
      };
      results.push({
        "vpcid": ds_vpcs[i]["vpc_id"],
        "name": name,
        "region": ds_vpcs[i]["region"]
      });
    };

    for( y = 0; y <= ds_networks.length - 1; y++) {
      var aws_name = "";
      var region = "";
      for (aws = 0; aws <= results.length - 1; aws++) {
        if(results[aws]["vpcid"] === ds_networks[y]["resource_uid"]) {
          aws_name = results[aws]["name"]
          region = results[aws]["region"]
          break;
        }
      }

      if(aws_name != "") {
        updates.push({
          "rs_name": ds_networks[y]["name"],
          "aws_name":  aws_name,
          "href": ds_networks[y]["href"],
          "id": ds_networks[y]["resource_uid"],
          "region": region
        })
      }
    }
  updates = _.sortBy(updates,"id")
  updates = _.sortBy(updates,"region")
  EOS
end

###############################################################################
# Policy
###############################################################################

policy "policy_vpc_sync" do
  validate_each $ds_rs_updates do
    summary_template "{{ rs_project_name }} (Account ID: {{ rs_project_id }}): {{ len data }} VPC Names Out of Sync"
    check equals?(val(item, "rs_name"), val(item, "aws_name"))
    escalate $email
    escalate $escalate_resources
    export do
      resource_level true
      field "id" do
        label "VPC Id"
      end
      field "region" do
        label "Region"
      end
      field "rs_name" do
        label "RS Name"
      end
      field "aws_name" do
        label "AWS Name"
      end
      field "href" do
        label "Href"
      end
    end
  end
end

###############################################################################
# Escalations
###############################################################################

escalation "email" do
  automatic true
  label "Send Email"
  description "Send incident email"
  email $param_email
end

escalation "escalate_resources" do
  automatic contains($param_automatic_action, "Update VPC")
  label "Update VPC"
  description "Update selected VPC"
  run "update_vpcs", data, rs_optima_host
end

###############################################################################
# Cloud Workflow
###############################################################################

define update_vpcs($data, $$rs_optima_host) do
  $$debug=false
  call sys_log('AWS VPC Name Sync Policy: Affected VPCs',to_s($data))
  foreach $vpc in $data do
    call sys_log('AWS VPC Name Sync Policy: Updating VPC',to_s($vpc))
    @vpc = rs_cm.get(href: $vpc["href"])
    @vpc.update(network: {"name": $vpc["aws_name"]})
  end
end

define sys_log($subject, $detail) do
  # Create empty errors array if doesn't already exist
  if !$$errors
    $$errors = []
  end
  # Check if debug is enabled
  if $$debug
    # Append to global $$errors
    # This is the suggested way to capture errors
    $$errors << "Unexpected error for " + $subject + "\n  " + to_s($detail)
    # If Flexera NAM Zone, create audit_entries [to be deprecated]
    # This is the legacy method for capturing errors and only supported on Flexera NAM
    if $$rs_optima_host == "api.optima.flexeraeng.com"
      # skip_error_and_append is used to catch error if rs_cm.audit_entries.create fails unexpectedly
      $task_label = "Creating audit entry for " + $subject
      sub task_label: $task, on_error: skip_error_and_append($task) do
        rs_cm.audit_entries.create(
          notify: "None",
          audit_entry: {
            auditee_href: @@account,
            summary: $subject,
            detail: $detail
          }
        )
      end # End sub on_error
    end # End if rs_optima_host
  end # End if debug is enabled
end

define skip_error_and_append($subject) do
  $$errors << "Unexpected error for " + $subject + "\n  " + to_s($_error)
  $_error_behavior = "skip"
end

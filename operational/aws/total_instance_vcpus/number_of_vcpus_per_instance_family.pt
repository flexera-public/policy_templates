name "AWS Usage Report - Number of Instance vCPUs Used"
rs_pt_ver 20180301
type "policy"
short_description "This policy produces a usage report showing the number of vCPUs used for each AWS Instance Family. See the [README](https://github.com/flexera/policy_templates/tree/master/operational/aws/total_instance_vcpus) and [docs.flexera.com/flexera/EN/Automation](https://docs.flexera.com/flexera/EN/Automation/AutomationGS.htm) to learn more."
long_description ""
severity "low"
category "Operational"
default_frequency "monthly"
info(
  version: "2.1",
  provider: "Flexera Optima",
  service: "",
  policy_set: ""
)

###############################################################################
# Parameters
###############################################################################

parameter "param_email" do
  type "list"
  label "Email addresses to notify"
end

parameter "param_region" do
  type "string"
  label "Region"
  description "Name of the AWS Region to filter by. Example: 'US West (Oregon)'. Leave this blank for 'Organization' scope"
end

###############################################################################
# Authentication
###############################################################################

#AUTHENTICATE WITH RIGHTSCALE/OPTIMA
credentials "auth_rs" do
  schemes "oauth2"
  label "Flexera_Automation"
  description "Select FlexeraOne OAuth2 credentials"
  tags "provider=flexera"
end

###############################################################################
# Datasources and Scripts
###############################################################################

#GET BILLING CENTERS FOR ORG
datasource "ds_billing_centers" do
  request do
    auth $auth_rs
    host rs_optima_host
    path join(["/analytics/orgs/",rs_org_id,"/billing_centers"])
    header "Api-Version", "1.0"
    header "User-Agent", "RS Policies"
    query "view", "allocation_table"
  end
  result do
    encoding "json"
    collect jmes_path(response,"[*]") do
      field "href", jmes_path(col_item,"href")
      field "id", jmes_path(col_item,"id")
      field "name", jmes_path(col_item,"name")
      field "parent_id", jmes_path(col_item,"parent_id")
      field "ancestor_ids", jmes_path(col_item,"ancestor_ids")
      field "allocation_table", jmes_path(col_item,"allocation_table")
    end
  end  
end
  
#GET TOP-LEVEL BILLING CENTERS
datasource "ds_top_level_billing_centers" do
  run_script $js_top_level_bc, $ds_billing_centers
end
  
script "js_top_level_bc", type: "javascript" do
  parameters "billing_centers"
  result "filtered_billing_centers"
  code <<-EOS
  var filtered_billing_centers =
    _.reject(billing_centers, function(bc){ return bc.parent_id != null })
  EOS
end

#GET USAGE DATA FOR INSTANCE TYPES
datasource "ds_usage_data" do
  request do
    run_script $js_get_usage_data, $ds_top_level_billing_centers, $param_region, rs_org_id, rs_optima_host
  end
  result do
    encoding "json"
    collect jmes_path(response, "rows") do
      field "billing_center_id", jmes_path(col_item,"dimensions.billing_center_id")
      field "instance_type", jmes_path(col_item,"dimensions.instance_type")
      field "usage_unit", jmes_path(col_item,"dimensions.usage_unit")
      field "cost", jmes_path(col_item,"metrics.cost_nonamortized_unblended_adj")
      field "usage_amount", jmes_path(col_item,"metrics.usage_amount")
      field "month", jmes_path(col_item,"timestamp")
    end
  end
end

script "js_get_usage_data", type: "javascript" do
  parameters "top_level_billing_centers", "region", "org_id", "optima_host"
  result "request"
  code <<-EOS 
  //Billing Center IDs into array
  billing_center_ids = []
  _.each(top_level_billing_centers, function(bc){
    billing_center_ids.push(bc.id)
  })

  //Get Start and End dates
  start_date = new Date(), end_date = new Date()
  start_date.setMonth(start_date.getMonth() - 13)
  end_date.setMonth(end_date.getMonth() - 1)

  //get expressions for payload based on region parameter
  expressions = []
  if( region == "" ){ 
    expressions = [
      { "dimension": "category", "type": "equal", "value": "Compute" },
      { "dimension": "resource_type", "type":"equal", "value":"Compute Instance" },
      { "dimension": "vendor", "type":"equal", "value":"AWS" },
      {
        "type": "not",
        "expression": { "dimension": "instance_type", "type": "equal", "value": "None" }
      }
    ]
  } else { 
    expressions = [
      { "dimension": "category", "type": "equal", "value": "Compute" },
      { "dimension": "resource_type", "type":"equal", "value":"Compute Instance" },
      { "dimension": "vendor", "type":"equal", "value":"AWS" },
      { "dimension": "region", "type": "equal", "value": region },
      {
        "type": "not",
        "expression": { "dimension": "instance_type", "type": "equal", "value": "None" }
      }
    ]
  }
  
  //POST JSON payload
  payload = {
    "billing_center_ids": billing_center_ids,
    "filter": {
      "type": "and",
      "expressions": expressions
    },
    "dimensions": [
      "instance_type",
      "usage_unit"
    ],
    "granularity": "month",
    "metrics": [
      "cost_nonamortized_unblended_adj",
      "usage_amount"
    ],
    "end_at": end_date.toLocaleDateString("en-US").split("-")[0] + "-" + end_date.toLocaleDateString("en-US").split("-")[1]
    "start_at": start_date.toLocaleDateString("en-US").split("-")[0] + "-" + start_date.toLocaleDateString("en-US").split("-")[1]
  }

  //Request
  request = {
    auth: "auth_rs",
    host: optima_host,
    path: "/bill-analysis/orgs/" + org_id + "/costs/aggregated",
    verb: "POST",
    body_fields: payload,
    headers: {
      "User-Agent": "RS Policies",
    }
  }
  EOS
end

#GET DATA WITH VCPU COUNTS FOR INSTANCE TYPES
datasource "ds_aws_instance_size_map" do
  request do
    verb "GET"
    host "raw.githubusercontent.com"
    path "/flexera/policy_templates/master/data/aws/instance_types.json"
    header "User-Agent", "RS Policies"
  end
end


#GROUP INSTANCE TYPES INTO INSTANCE FAMILIES AND CALCULATE INSTANCE VCPUS
datasource "ds_instance_vcpus_per_fam" do
  run_script $js_get_instance_vcpus_per_fam, $ds_aws_instance_size_map, $ds_usage_data
end

script "js_get_instance_vcpus_per_fam", type: "javascript" do
  parameters "aws_instance_data", "usage_data"
  result "result"
  code <<-'EOS'
  temp_result = []
  result = []

  //Get vCPU counts from Instance Data json
  instance_types = _.keys(aws_instance_data)
  var vcpu_data = []
  _.each(instance_types, function(inst){
    var vcpu_count = aws_instance_data[inst].vcpu
    if(aws_instance_data[inst].vcpu == null){ vcpu = 0 }
    vcpu_data.push({
      "instance_type": inst,
      "vcpu_count": vcpu_count
    })
  })

  //Enrich current data with Instance Family, and then vCPU count.  - //then calculate Normalized Instance Hours using NFU
  _.each(usage_data, function(data){
    data["instance_family"] = data.instance_type.split(".")[0]
    _.each(vcpu_data, function(vcpu){
      if(data.instance_type == vcpu.instance_type ){ 
        data["vcpu_count"] = (data.usage_amount / 730 ) * vcpu.vcpu_count //Normalize Usage Amount (divide by 730 ) to get more accurate vCPU count
      }
    })
  })

  //For each month, sum Instance Hours for each Instance Family
  month = _.pluck( _.uniq(usage_data, function(data){ return data.month }), "month" )
  inst_family = _.pluck( _.uniq(usage_data, function(data){ return data.instance_family }), "instance_family" )

  _.each(month, function(mo){
    _.each(inst_family, function(fam){
      total_vcpu_count = 0
      _.each(usage_data, function(data){
        if(data.month == mo && data.instance_family == fam){
          if(data.vcpu_count == null){
            data.vcpu_count = 0
          }
          total_vcpu_count += data.vcpu_count 
        }
      })
      temp_result.push({
        "month": mo,
        "instance_family": fam,
        "total_vcpu_count": total_vcpu_count
      })
    })  
  })

  //Get highest 8 Instance Families for vCPUs used
  vcpu_totals_per_fam = []
  _.each(inst_family, function(fam){
    total_vcpus_12_months = 0
    _.each(temp_result, function(data){
      if(data.instance_family == fam){
        total_vcpus_12_months += data.total_vcpu_count 
      }
    })
    vcpu_totals_per_fam.push({
      "total_vcpus_12_months": total_vcpus_12_months,
      "instance_family": fam
    })
  })

  top_8_inst_fams = _.last( _.pluck( _.sortBy(vcpu_totals_per_fam,"total_vcpus_12_months"), "instance_family" ), [8] )

  //If Instance Family is not in 8 highest vCPUs used, then put into "Other" category
  _.each(month, function(mo){
    total_vcpus_other = 0
    _.each(temp_result, function(data){
      if(data.month == mo ){
        exists = _.find(top_8_inst_fams, function(inst_fam){ return inst_fam == data.instance_family })
        if(exists == null){
          total_vcpus_other += data.total_vcpu_count
        } else {
          result.push({
            "month": data.month,
            "instance_family": data.instance_family,
            "total_vcpu_count": data.total_vcpu_count
          })
        }
      }
    })
    result.push({
      "month": mo,
      "instance_family": "Other",
      "total_vcpu_count": total_vcpus_other
    })
  })
  EOS
end

#CHART CREATION
datasource "ds_chart_creation" do
  run_script $js_create_chart_data, $ds_instance_vcpus_per_fam, $param_region
end

script "js_create_chart_data", type: "javascript" do
  parameters "inst_vcpu_data", "param_region"
  result "report"
  code <<-EOS

  //Group data by Instance Family
  group_by_inst_fam = 
  _.groupBy(inst_vcpu_data, function(data){ return data.instance_family })
  report = inst_vcpu_data

  //Create chart axis labels
  chart_axis_labels = 
  ("chxl=1:," + 
    _.uniq(inst_vcpu_data, function(data) { return data.month })
    .map(function(data){ return data.month.substring(0,7) })
  ).split(",").join("|")

  //Create legend
  chart_legend = "chdl="
  var i = 0 
  for (var key in group_by_inst_fam) {
    chart_legend += key
    i++
    if (i < _.size(group_by_inst_fam)) { chart_legend += "|" }
  }

  //Create chart dataset
  chart_data = "chd=t:"
  var count_1 = 0
  _.each(group_by_inst_fam, function(o){
    var count_2 = 0
    _.each(o, function(p){
      chart_data = chart_data + p.total_vcpu_count
      count_2++
      if (count_2 < _.size(o)){ chart_data = chart_data + "," } 
    })
    count_1++
    if (count_1 < _.size(group_by_inst_fam)){ chart_data = chart_data + "|" }
  })

  //Create Chart Title
  policy_title = "Total Instance vCPUs Used Per Instance Family For " + param_region
  chart_title = "chtt=" + policy_title
  if( param_region == "" ){
    policy_title = "Total Instance vCPUs Used Per Instance Family"
    chart_title = "chtt=" + policy_title
  }

  //Whole Chart object
  chart = {
    chart_type: encodeURI("cht=bvs"),
    chart_size: encodeURI("chs=900x500"),
    chart_data: encodeURI(chart_data),
    chart_title: encodeURI(chart_title),
    chart_image: encodeURI("chof=.png"),  
    chart_label_position: encodeURI("chdlp=b"),
    chart_axis: encodeURI("chxt=y,x"),
    chart_axis_label: encodeURI(chart_axis_labels),
    chart_axis_format: encodeURI("chxs=0N*f" + "0sz* vCPUs"),
    chart_line_style: encodeURI("chls=3|3|3|3|3|3|3|3|3|3|3"),
    chart_line_color: encodeURI("chco=6929c4,9f1853,198038,b28600,1192e8,009d9a,005d5d,007d79"),
    chart_data_scale: encodeURI("chds=a"),
    chart_legend: encodeURI(chart_legend),
    chart_legend_size: encodeURI("chdls=000000,5"),
    policy_title: policy_title
  }

  report[0]["chart_dimensions"] = chart
  EOS
end

###############################################################################
# Escalations
###############################################################################

escalation "esc_instance_hours_report" do
  automatic true
  label "Send Email"
  description "Send incident email"
  email $param_email
end

###############################################################################
# Policy
###############################################################################

policy "pol_inst_vcpu_per_inst_fam" do
  validate_each $ds_chart_creation do
    summary_template "AWS - Instance vCPUs Used per Instance Family (Normalized - past 12 months)"
    detail_template <<-EOS
    # AWS - {{ with index data 0 }}{{ .chart_dimensions.policy_title }}{{ end }} Report
    ![Instance Hours Used Per Instance Family Chart](https://image-charts.com/chart?{{ with index data 0 }}{{ .chart_dimensions.chart_data }}{{ end }}&{{ with index data 0 }}{{ .chart_dimensions.chart_size }}{{ end }}&{{ with index data 0 }}{{ .chart_dimensions.chart_type }}{{ end }}&{{ with index data 0 }}{{ .chart_dimensions.chart_image }}{{ end }}&{{ with index data 0 }}{{ .chart_dimensions.chart_title }}{{ end }}&{{ with index data 0 }}{{ .chart_dimensions.chart_label_position }}{{ end }}&{{ with index data 0 }}{{ .chart_dimensions.chart_axis }}{{ end }}&{{ with index data 0 }}{{ .chart_dimensions.chart_axis_label }}{{ end }}&{{ with index data 0 }}{{ .chart_dimensions.chart_line_style }}{{ end }}&{{ with index data 0 }}{{ .chart_dimensions.chart_line_color }}{{ end }}&{{ with index data 0 }}{{ .chart_dimensions.chart_data_scale }}{{ end }}&{{ with index data 0 }}{{ .chart_dimensions.chart_legend_size }}{{ end }}&{{ with index data 0 }}{{ .chart_dimensions.chart_legend }}{{ end }}&{{ with index data 0 }}{{ .chart_dimensions.chart_axis_format }}{{ end }})
    ___
    ###### Policy Applied in Account: {{ rs_project_name }} (Account ID: {{ rs_project_id }}) within Org: {{ rs_org_name }} (Org ID: {{ rs_org_id }})
    EOS
    escalate $esc_instance_hours_report
    check eq(0,1)
    export do
      # no actions so resource_level can be false
      resource_level false
      field "month" do
        label "Month"
      end
      field "instance_family" do
        label "Instance Family"
      end
      field "total_vcpu_count" do
        label "vCPUs Used"
      end
    end
  end
end

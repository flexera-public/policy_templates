name "MSP Usage Audit"
rs_pt_ver 20180301
type "policy"
short_description "This policy report on MSP Customer Organizaation usage and provides operational capabilities related to managing MSP Customer Orgs"
long_description "This policy report on MSP Customer Organizaation usage and provides operational capabilities related to managing MSP Customer Orgs"
category "Operational"
severity "low"
default_frequency "daily"
info(
  provider: "Flexera",
  version: "0.1.0",
  publish: "false",
  service: "Cloud Cost Optimization",
  policy_set: "Usage Report"
)

parameter "param_email" do
  type "list"
  category "Policy Settings"
  label "Email Addresses"
  description "Email addresses of the recipients you wish to notify when new incidents are created"
  default []
end

# TODO: Add Actions based on used activity
# parameter "param_automatic_actions" do
#   type "list"
#   category "Policy Settings"
#   label "Automatic Actions"
#   description "When this value is set, this policy will automatically take the selected actions"
#   allowed_values [
#     "No User Activity Alerts for Internal",  # Send Email
#     "No User Activity Warning for Customer",  # Send Email
#     "No User Activity Offboard Organization", # Delete Bill Connect
#   ]
#   default []
# end

parameter "param_child_orgs_allow_or_deny" do
  type "string"
  category "Filters"
  label "Allow/Deny Child Orgs"
  description "Allow or Deny entered Child Orgs to sync groups to. See the README for more details"
  allowed_values "Allow", "Deny"
  default "Allow"
end

parameter "param_child_orgs_list" do
  type "list"
  category "Filters"
  label "Allow/Deny Child Orgs List"
  description "A list of allowed or denied Child Orgs to sync groups to. See the README for more details"
  default []
end

parameter "param_prefix" do
  type "string"
  category "Policy Settings"
  label "Prefix String"
  description "Prefix to indicate the Group should be synced.  This is the first part of the string that needs to be in the description. **`<PrefixString>`**_`<ChildOrgID>`_`Child Group Name`"
  default "GroupSync"
end

parameter "param_excluded_user_domains" do
  type "list"
  category "Filters"
  label "Excluded User Domains"
  description "A list of email domains to exclude from the active/inactive user counts. We generally recommend always including `flexera.com` to exclude Flexera employees from the counts.  Add any other domains for \"internal\" users that should be excluded from the active/inactive user acounts."
  default ["flexera.com"]
end

parameter "param_active_days_threshold" do
  type "number"
  category "Policy Settings"
  label "Active Days Threshold"
  description "The number of days to consider a user as active. Default is 30 days."
  default 30
  min_value 1
end

parameter "param_cost_threshold" do
  type "number"
  category "Filters"
  label "Cost Threshold"
  description "The minimum total cost for an organization to be included in the report. Default is -1 which disables the threshold and shows all Orgs."
  default -1
  min_value -1
end

###############################################################################
# Authentication
###############################################################################

credentials "auth_flexera" do
  schemes "oauth2"
  label "Flexera"
  description "Select Flexera One OAuth2 credentials"
  tags "provider=flexera"
end

###############################################################################
# Pagination
###############################################################################

pagination "pagination_flexera" do
  get_page_marker do
    body_path jmes_path(response, "nextPage")
  end
  set_page_marker do
    uri true
  end
end

###############################################################################
# Datasources & Scripts
###############################################################################

# Get applied policy metadata for use later
datasource "ds_applied_policy" do
  request do
    auth $auth_flexera
    host val($ds_flexera_api_hosts, 'flexera')
    path join(["/policy/v1/orgs/",rs_org_id,"/projects/",rs_project_id,"/applied-policies/", policy_id])
    ignore_status 404 # Ignore 404 returned when we are running this with retrieve_data
  end
end

# Get region-specific Flexera API endpoints
datasource "ds_flexera_api_hosts" do
  run_script $js_flexera_api_hosts, rs_optima_host
end

script "js_flexera_api_hosts", type: "javascript" do
  parameters "rs_optima_host"
  result "result"
  code <<-EOS
  host_table = {
    "api.optima.flexeraeng.com": {
      ui: "app.flexera.com",
      flexera: "api.flexera.com",
      fsm: "api.fsm.flexeraeng.com"
    },
    "api.optima-eu.flexeraeng.com": {
      ui: "app.flexera.eu",
      flexera: "api.flexera.eu",
      fsm: "api.fsm-eu.flexeraeng.com"
    },
    "api.optima-apac.flexeraeng.com": {
      ui: "app.flexera.au",
      flexera: "api.flexera.au",
      fsm: "api.fsm-apac.flexeraeng.com"
    }
  }

  result = host_table[rs_optima_host]
EOS
end

datasource "ds_dates" do
  run_script $js_dates
end

script "js_dates", type: "javascript" do
  result "result"
  code <<-EOS
  var now = new Date();
  // Ideally we report on the previous full 12 months of spend
  var start_at = new Date(now.getFullYear(), now.getMonth() -12, 1);
  var end_at = new Date(now.getFullYear(), now.getMonth() , 1);
  result = {
    start_at: start_at.toISOString().substring(0, 7),
    end_at: end_at.toISOString().substring(0, 7)
  }
EOS
end

# Get organizations
datasource "ds_organizations" do
  request do
    auth $auth_flexera
    host val($ds_flexera_api_hosts, 'flexera')
    path join(["/msp/v1/orgs/", rs_org_id, "/customers"])
    ignore_status 403 #Ignore Status 403 so we can gracefully handle that kind of error
  end
  result do
    encoding "json"
    collect jmes_path(response, "[*]") do
      field "id", jmes_path(col_item, "id")
      field "name", jmes_path(col_item, "name")
    end
  end
end

datasource "ds_parent_org_billing_centers" do
  request do
    auth $auth_flexera
    host rs_optima_host
    path join(["/analytics/orgs/", rs_org_id, "/billing_centers"])
    header "Api-Version", "1.0"
    header "User-Agent", "RS Policies"
    ignore_status [403]
  end
end

# Get parent org dimensions
# https://api.optima.flexeraeng.com/bill-analysis/orgs/36616/costs/dimensions
datasource "ds_parent_org_rbds" do
  request do
    auth $auth_flexera
    host val($ds_flexera_api_hosts, 'flexera')
    path join(["/finops-customizations/v1/orgs/", rs_org_id, "/rule-based-dimensions"])
  end
end

datasource "ds_request_parent_org_costs_not_allocated" do
  run_script $js_request_parent_org_costs_not_allocated, $ds_parent_org_rbds, $ds_parent_org_billing_centers, rs_org_id, rs_org_name
end

script "js_request_parent_org_costs_not_allocated", type: "javascript" do
  parameters "ds_parent_org_rbds", "ds_parent_org_billing_centers", "rs_org_id", "rs_org_name"
  result "result"
  code <<-EOS
  // initial filters for all requests
  var f = {
    "type": "or",
    // TODO:
    //   - AWS MCA Marketplace
    //   - Azure EA + MCA Tax
    //   - GCP Marketplace
    //   - GCP Tax
    // Ideally we could rely on Category = Marketplace, and/or Line Item Type = Tax but that's not normalized across all clouds by the backend
    "expressions": [
      // AWS Marketplace
      { "type":"equal", "dimension":"bill_entity", "value":"AWS Marketplace" },
      // Azure EA Marketplace
      { "type":"equal", "dimension":"bill_entity", "value":"Marketplace" },
      // AWS Taxes
      { "type":"equal", "dimension":"line_item_type", "value":"Tax" },
    ]
  }
  // init request object
  request = {
    // org object to match the other costs for child orgs
    org: {
      id: rs_org_id,
      name: rs_org_name,
      // This is the MSP Parent Org
      // Can use this flag to identify the MSP Parent Org (i.e and skip for checking user activity)
      msp_parent: true
    },
    // use JSON Stringify+Parse to deep copy the original filter object
    filter_excluded_costs: JSON.parse(JSON.stringify(f)),
    filter_net_costs: {
      "type": "not",
      // use JSON Stringify+Parse to deep copy the original filter object
      "expression": JSON.parse(JSON.stringify(f))
    },
  }

  // Pluck out the top level billing centers for
  var toplevel_bcs = _.filter(ds_parent_org_billing_centers, function(bc) {
    return bc.parent_id == null || bc.parent_id == undefined
  });
  // Pluck just the IDs for the top level billing centers to pass as request parameter
  request["top_level_bc_ids"] = _.pluck(toplevel_bcs, "id");
  // Append "unallocated" bc to also get unallocated costs
  request["top_level_bc_ids"].push("unallocated");
  // Deduplicate top_level_bc_ids just in case we added unallocated
  request["top_level_bc_ids"] = _.uniq(request["top_level_bc_ids"]);

  // Check if rbd_partner_child_org exists
  var rbd_partner_child_org = _.find(ds_parent_org_rbds.values, function(rbd) {
    return rbd.id == "rbd_partner_child_org";
  });
  // If rbd_partner_child_org exists, the costs for the parent org should only be the costs that are not allocated to child orgs
  // We get the costs allocated to child orgs in another step
  // use JSON Stringify+Parse to deep copy the filter_net_costs object
  request["filter_net_costs_in_parent_org_no_customer_org"] = JSON.parse(JSON.stringify(request["filter_net_costs"]));
  // If they are using the rbd_partner_child_org, we need to exclude costs that are allocated to child orgs
  // Do this by adding an "and" clause to condition both the filter for net costs AND the rbd_partner_child_org==None (not allocated to child org)
  if (rbd_partner_child_org) {
    request["filter_net_costs_in_parent_org_no_customer_org"] = {
      "type": "and",
      "expressions": [
        JSON.parse(JSON.stringify(request["filter_net_costs"])),
        { "type": "equal", "dimension": "rbd_partner_child_org", "value": "None" }
      ]
    }
  }

  // this result is always 1 item long containing the request object
  result = [request];
EOS
end

datasource "ds_parent_org_costs_not_allocated" do
  iterate $ds_request_parent_org_costs_not_allocated
  request do
    auth $auth_flexera
    verb  "POST"
    host rs_optima_host
    path join(["/bill-analysis/orgs/", val(val(iter_item,"org"),"id"), "/costs/aggregated"])
    header "Api-Version", "1.0"
    header "Content-Type", "application/json"
    body_field "dimensions", ["bill_source"]
    body_field "granularity", "month"
    body_field "billing_center_ids", val(iter_item, "top_level_bc_ids")
    body_field "filter", val(first($ds_request_parent_org_costs_not_allocated), "filter_net_costs_in_parent_org_no_customer_org")
    body_field "start_at", val($ds_dates, "start_at")
    body_field "end_at", val($ds_dates, "end_at")
    body_field "metrics", ["cost_nonamortized_unblended_adj"]
  end
  result do
    encoding "json"
    field "org", val(iter_item, "org")
    field "costs", jq(response, ".rows")
  end
end

datasource "ds_organizations_filtered" do
  run_script $js_filter_organizations, $ds_organizations, $param_child_orgs_allow_or_deny, $param_child_orgs_list
end

script "js_filter_organizations", type: "javascript" do
  parameters "ds_organizations", "param_child_orgs_allow_or_deny", "param_child_orgs_list"
  result "result"
  code <<-EOS
  var result = [];

  // Convert param_child_orgs_list list of strings to integers
  var org_list = _.map(param_child_orgs_list, function(org_id) {
    return parseInt(org_id);
  });
  // Deduplicate org_list just in case user entered the same org multiple times
  org_list = _.uniq(org_list);

  if (_.isEmpty(param_child_orgs_list)) {
    result = ds_organizations;
  } else {
    _.each(ds_organizations, function(org) {

      if (param_child_orgs_allow_or_deny == "Allow") {
        if (_.contains(org_list, parseInt(org.id))) {
          result.push(org);
        }
      } else {
        if (!_.contains(org_list, parseInt(org.id))) {
            result.push(org);
        }
      }

    });
  }
  EOS
end

datasource "ds_identify_errors" do
  run_script $js_identify_errors, $ds_organizations_filtered, $ds_children_org_get_roles_step1
end

script "js_identify_errors", type: "javascript" do
  parameters "ds_organizations_filtered", "ds_children_org_get_roles_step1"
  result "errors"
  code <<-EOS
  var errors = [];
  // Check if ds_organizations_filtered response is an empty list
  // This can identify if the Applied Policy was not deployed in the MSP Parent Org
  if (ds_organizations_filtered.length == 0) {
    errors.push("403 Forbidden error received attempting to get Flexera MSP Customer Orgs.  You must deploy this policy in an account that has the `msp` capability enabled.");
  }

  // Check if ds_children_org_get_roles_step1 is missing any children org responses
  // This will identify Orgs that the credential does not have access to
  var accessible_child_orgs = []
  _.each(ds_children_org_get_roles_step1, function(org) {
    accessible_child_orgs.push(org.org.id);
  });
  accessible_child_orgs = _.uniq(accessible_child_orgs);

  var forbidden_orgs = _.filter(ds_organizations_filtered, function(org) {
    return !_.contains(accessible_child_orgs, org.id);
  });

  if (forbidden_orgs.length > 0) {
    var forbidden_org_ids = _.pluck(forbidden_orgs,"id");
    forbidden_org_ids = _.uniq(forbidden_org_ids);
    var orgs_string = forbidden_org_ids.join(", ");
    errors.push("403 Forbidden error received attempting to access Flexera MSP Customer Orgs: "+orgs_string+". You should deploy this policy using a User Refresh Token credential associated with a User that has `org_owner` access in all MSP Child Orgs.  Alternatively, use the `Allow/Deny Child Orgs` parameter to filter the list of Child Orgs in scope.");
  }

  // Deduplicate identical errors
  errors = _.uniq(errors);
EOS
end

datasource "ds_children_org_get_roles_step1" do
  iterate $ds_organizations_filtered
  request do
    auth $auth_flexera
    host val($ds_flexera_api_hosts, 'flexera')
    path join(["/iam/v1/orgs/", val(iter_item, "id"), "/roles"])
    ignore_status 403 # Ignore status 403 so we can gracefully handle that kind of error
  end
  result do
    encoding "json"
    field "org", iter_item
    field "roles", response
  end
end

datasource "ds_children_org_get_billing_centers_step2" do
  iterate $ds_children_org_get_roles_step1
  request do
    auth $auth_flexera
    host rs_optima_host
    path join(["/analytics/orgs/", val(val(iter_item, "org"), "id"), "/billing_centers"])
    header "Api-Version", "1.0"
    header "User-Agent", "RS Policies"
    ignore_status [403]
  end
  result do
    encoding "json"
    field "org", val(iter_item, "org")
    field "roles", val(iter_item, "roles")
    field "billing_centers", response
  end
end

# Gather top level billing center IDs for when we pull cost data
datasource "ds_children_org_get_toplevel_billing_centers_step3" do
  run_script $js_children_org_get_toplevel_billing_centers_step3, $ds_children_org_get_billing_centers_step2
end

script "js_children_org_get_toplevel_billing_centers_step3", type: "javascript" do
  parameters "ds_children_org_get_billing_centers_step2"
  result "result"
  code <<-EOS
  _.each(ds_children_org_get_billing_centers_step2, function(org) {
    var top_level_bcs = _.filter(org['billing_centers'], function(bc) {
      return bc['parent_id'] == null || bc['parent_id'] == undefined
    })
    org['top_level_bc_ids'] = _.pluck(top_level_bcs, 'id')
  })
  result = ds_children_org_get_billing_centers_step2
EOS
end

datasource "ds_children_org_get_costs_step4" do
  iterate $ds_children_org_get_toplevel_billing_centers_step3
  request do
    auth $auth_flexera
    verb  "POST"
    host rs_optima_host
    path join(["/bill-analysis/orgs/", val(val(iter_item,"org"), "id"), "/costs/aggregated"])
    header "Api-Version", "1.0"
    header "Content-Type", "application/json"
    body_field "dimensions", ["bill_source"]
    body_field "granularity", "month"
    body_field "filter", val(first($ds_request_parent_org_costs_not_allocated), "filter_net_costs")
    body_field "start_at", val($ds_dates, "start_at")
    body_field "end_at", val($ds_dates, "end_at")
    body_field "metrics", ["cost_nonamortized_unblended_adj"]
    body_field "billing_center_ids", val(iter_item, "top_level_bc_ids")
  end
  result do
    encoding "json"
    field "org", val(iter_item, "org")
    field "roles", val(iter_item, "roles")
    field "billing_centers", val(iter_item, "billing_centers")
    field "top_level_bc_ids", val(iter_item, "top_level_bc_ids")
    field "costs", jq(response, ".rows")
  end
end

datasource "ds_children_org_get_costs_excluded_step5" do
  iterate $ds_children_org_get_costs_step4
  request do
    auth $auth_flexera
    verb  "POST"
    host rs_optima_host
    path join(["/bill-analysis/orgs/", val(val(iter_item,"org"), "id"), "/costs/aggregated"])
    header "Api-Version", "1.0"
    header "Content-Type", "application/json"
    body_field "dimensions", ["bill_source"]
    body_field "granularity", "month"
    body_field "filter", val(first($ds_request_parent_org_costs_not_allocated), "filter_excluded_costs")
    body_field "start_at", val($ds_dates, "start_at")
    body_field "end_at", val($ds_dates, "end_at")
    body_field "metrics", ["cost_nonamortized_unblended_adj"]
    body_field "billing_center_ids", val(iter_item, "top_level_bc_ids")
  end
  result do
    encoding "json"
    field "org", val(iter_item, "org")
    field "roles", val(iter_item, "roles")
    field "billing_centers", val(iter_item, "billing_centers")
    field "top_level_bc_ids", val(iter_item, "top_level_bc_ids")
    field "costs", val(iter_item, "costs")
    field "costs_excluded", jq(response, ".rows")
  end
end

datasource "ds_children_org_get_users_step6" do
  iterate $ds_children_org_get_costs_excluded_step5
  request do
    auth $auth_flexera
    pagination $pagination_flexera
    host val($ds_flexera_api_hosts, 'flexera')
    path join(["/iam/v1/orgs/", val(val(iter_item,"org"), "id"), "/users"])
  end
  result do
    encoding "json"
    field "org", val(iter_item, "org")
    field "roles", val(iter_item, "roles")
    field "billing_centers", val(iter_item, "billing_centers")
    field "top_level_bc_ids", val(iter_item, "top_level_bc_ids")
    field "costs", val(iter_item, "costs")
    field "costs_excluded", val(iter_item, "costs_excluded")
    field "users", jq(response, ".values")
  end
end

datasource "ds_report" do
  run_script $js_report, $ds_flexera_api_hosts, $ds_dates, $ds_request_parent_org_costs_not_allocated, $ds_parent_org_costs_not_allocated, $ds_children_org_get_users_step6, $param_excluded_user_domains, $param_active_days_threshold, $param_child_orgs_list, $param_child_orgs_allow_or_deny, $param_cost_threshold
end

script "js_report", type: "javascript" do
  parameters "ds_flexera_api_hosts", "ds_dates", "ds_request_parent_org_costs_not_allocated", "ds_parent_org_costs_not_allocated", "ds_children_org", "param_excluded_user_domains", "param_active_days_threshold", "param_child_orgs_list", "param_child_orgs_allow_or_deny", "param_cost_threshold"
  result "result"
  code <<-EOS
    function formatCurrency(value) {
      if (value === 0  || _.isNumber(value) === false) {
        return "$0.00";
      }
      var parts = value.toFixed(2).split('.');
      var intPart = parts[0];
      var length = intPart.length;
      var formattedInt = '';

      for (var i = 0; i < length; i++) {
        if (i > 0 && (length - i) % 3 === 0) {
          formattedInt += ',';
        }
        formattedInt += intPart.charAt(i);
      }

      parts[0] = formattedInt;
      return "$" + parts.join('.');
    }

    var excludedTotalCost = 0;
    var netTotalCost = 0;
    var costsBySource = {
      aws: {cost: 0, orgs: [], monthlyAmounts: {}, cost_excluded: 0, monthlyAmounts_excluded: {}},
      azure: {cost: 0, orgs: [], monthlyAmounts: {}, cost_excluded: 0, monthlyAmounts_excluded: {}},
      gcp: {cost: 0, orgs: [], monthlyAmounts: {}, cost_excluded: 0, monthlyAmounts_excluded: {}},
      oracle: {cost: 0, orgs: [], monthlyAmounts: {}, cost_excluded: 0, monthlyAmounts_excluded: {}},
      optima: {cost: 0, orgs: [], monthlyAmounts: {}, cost_excluded: 0, monthlyAmounts_excluded: {}},
      focus: {cost: 0, orgs: [], monthlyAmounts: {}, cost_excluded: 0, monthlyAmounts_excluded: {}},
      other: {cost: 0, orgs: [], monthlyAmounts: {}, cost_excluded: 0, monthlyAmounts_excluded: {}}
    };

    // Calculate stats across all orgs
    var months = [];
    var totalUsers = 0;
    var activeUsers = 0;
    var excludedUsers = 0;
    var inactiveOrgs = [];
    var inactiveOrgsTotalCost = 0;
    // Inclusive costs are costs:
    // - Allocated/ingested in Child Orgs
    // - Ingested in Parent Org but not allocated to any Child Org
    var inclusiveCosts = [];
    inclusiveCosts = inclusiveCosts.concat(ds_parent_org_costs_not_allocated);
    inclusiveCosts = inclusiveCosts.concat(ds_children_org);
    // Calculate costs
    _.each(inclusiveCosts, function(org) {
      if (org.costs) {
        org.netTotalCost = 0;
        _.each(org.costs, function(cost) {
          var amount = cost.metrics.cost_nonamortized_unblended_adj;
          netTotalCost += amount;
          org.netTotalCost += amount;
          var orgId = org.org.id;

          // Get month from timestamp
          var month = cost.timestamp.substring(0,7);
          months.push(month);

          var source = cost.dimensions.bill_source;
          var targetSource;
          if (/.*aws.*/.test(source)) {
            targetSource = costsBySource.aws;
          } else if (/.*azure.*/.test(source)) {
            targetSource = costsBySource.azure;
          } else if (/.*google|gcp.*/.test(source)) {
            targetSource = costsBySource.gcp;
          } else if (/.*cbi-oi-oracle.*/.test(source)) {
            targetSource = costsBySource.oracle;
          } else if (/.*cbi-oi-optima.*/.test(source)) {
            targetSource = costsBySource.optima;
          } else if (/.*cbi-oi-focus.*/.test(source)) {
            targetSource = costsBySource.focus;
          } else {
            targetSource = costsBySource.other;
          }
            targetSource.cost += amount;
          if (!_.contains(targetSource.orgs, orgId)) {
            targetSource.orgs.push(orgId);
          }
          if (!targetSource.monthlyAmounts[month]) {
            targetSource.monthlyAmounts[month] = 0;
          }
            targetSource.monthlyAmounts[month] += amount;
        });
      }
      if (org.costs_excluded) {
        org.excludedTotalCost = 0;
        _.each(org.costs_excluded, function(cost) {
          var amount = cost.metrics.cost_nonamortized_unblended_adj;
          excludedTotalCost += amount;
          org.excludedTotalCost += amount;
          var orgId = org.org.id;

          // Get month from timestamp
          var month = cost.timestamp.substring(0,7);
          months.push(month);

          var source = cost.dimensions.bill_source;
          var targetSource;
          if (/.*aws.*/.test(source)) {
            targetSource = costsBySource.aws;
          } else if (/.*azure.*/.test(source)) {
            targetSource = costsBySource.azure;
          } else if (/.*google|gcp.*/.test(source)) {
            targetSource = costsBySource.gcp;
          } else if (/.*cbi-oi-oracle.*/.test(source)) {
            targetSource = costsBySource.oracle;
          } else if (/.*cbi-oi-optima.*/.test(source)) {
            targetSource = costsBySource.optima;
          } else if (/.*cbi-oi-focus.*/.test(source)) {
            targetSource = costsBySource.focus;
          } else {
            targetSource = costsBySource.other;
          }
          targetSource.cost_excluded += amount;
          if (!_.contains(targetSource.orgs, orgId)) {
            targetSource.orgs.push(orgId);
          }
          if (!targetSource.monthlyAmounts_excluded[month]) {
            targetSource.monthlyAmounts_excluded[month] = 0;
          }
          targetSource.monthlyAmounts_excluded[month] += amount;
        });
      }
      if (org.users) {
        org.activeUsers = 0;
        org.totalUsers = 0;
        org.excludedUsers = 0;
        _.each(org.users, function(user) {
          var emailDomain = user.email.split('@')[1];
          if (_.contains(param_excluded_user_domains, emailDomain)) {
            excludedUsers++;
            org.excludedUsers++;
          } else {
            totalUsers++;
            org.totalUsers++;
            var lastLogin = user.lastUILogin;
            if (lastLogin) {
              var loginDate = new Date(lastLogin);
              var thresholdDaysAgo = new Date();
              thresholdDaysAgo.setDate(thresholdDaysAgo.getDate() - param_active_days_threshold);
              if (loginDate > thresholdDaysAgo) {
                activeUsers++;
                org.activeUsers++;
              }
            }
          }
        });

        // Check for inactive child org based on activeUsers
        // Inactive if Org's activeUsers count is 0 and there is at least 1 user which we are considering active or inactive and not excluded (totalUsers)
        if (org.activeUsers === 0 && org.totalUsers > 0) {
          inactiveOrgs.push(org.org);
          inactiveOrgsTotalCost += _.reduce(org.costs, function(sum, cost) { return sum + cost.metrics.cost_nonamortized_unblended_adj }, 0);
        }
      }
    });

    // Get months sorted chronologically
    // Deduplicate months just in case
    months = _.uniq(months);
    var sortedMonths = _.sortBy(months, "timestamp");

    // Generate markdown report
    var markdown = "# MSP Organizations Summary Report\\n\\n";

    markdown += "Report generated at: " + new Date().toISOString() + "\\n\\n";
    markdown += "Report period: " + sortedMonths[0] + " to " + sortedMonths[sortedMonths.length-1] + "\\n\\n";
    if (param_cost_threshold != -1) {
      markdown += "Report does not include organizations with total costs less than " + formatCurrency(param_cost_threshold) + "\\n\\n";
    }
    markdown += "**Active** Users are defined as users who have logged in to the Flexera One UI in the last "+param_active_days_threshold+" days.\\n\\n";

    // Check if we have any filter defined
    // For now using the .type value, but we can more easily check user input parameter string if not empty
    if (ds_request_parent_org_costs_not_allocated[0].filter_excluded_costs.type) {
      markdown += "**Excluded Costs** are defined as:\\n\\n";
      markdown += "`"+JSON.stringify(ds_request_parent_org_costs_not_allocated[0].filter_excluded_costs) + "`\\n\\n";
    }

    markdown += "## Overall Statistics\\n\\n";

    markdown += "* Total Orgs: " + inclusiveCosts.length + "\\n";
    if (param_child_orgs_list.length > 0) {
      if (param_child_orgs_allow_or_deny == "Allow") {
        markdown += "* Included Orgs: " + param_child_orgs_list.join(", ");
      } else {
        markdown += "* Excluded Orgs: " + param_child_orgs_list.join(", ");
      }
      markdown += " ("+(param_child_orgs_list.length/inclusiveCosts.length).toFixed(1)+" % Total Orgs)\\n";
    }
    var warning = sortedMonths.length < 12 ? " (Warning: Less than 12 months of data available)" : "";
    markdown += "* Previous "+sortedMonths.length+"-Month Cost: " + formatCurrency(netTotalCost) + warning + "\\n";
    markdown += "* Total Excluded Cost: " + formatCurrency(excludedTotalCost) + "\\n";
    if (sortedMonths >= 3) {
      var recentMonths = sortedMonths.slice(-3);
      var recentTotalCost = 0;
      _.each(recentMonths, function(month) {
        _.each(costsBySource, function(source) {
          recentTotalCost += source.monthlyAmounts[month] || 0;
        });
      });
      var estimated12MCostFromLast3Months = (recentTotalCost / 3) * 12;
      markdown += "* Estimated 12-Month Cost using most recent last 3-Month Cost: " + formatCurrency(estimated12MCostFromLast3Months) + "\\n";
    }
    markdown += "* Total Users: " + totalUsers + "\\n";
    markdown += "* Active Users: " + activeUsers + " (" + ((activeUsers/totalUsers)*100).toFixed(1) + "%) (Last UI login less than "+param_active_days_threshold+"days)" + "\\n";
    markdown += "* Inactive Users: " + (totalUsers-activeUsers) + " (" + (((totalUsers-activeUsers)/totalUsers)*100).toFixed(1) + "%)" + "\\n";
    markdown += "* Excluded Users: " + excludedUsers + "\\n";
    markdown += "* Excluded User Domains: " + param_excluded_user_domains.join(", ") + "\\n";
    if (inactiveOrgs.length > 0) {
      markdown += "* Organizations with 100% Inactive Users: " + _.pluck(inactiveOrgs, "id").join(", ") + "\\n";
      markdown += "* Previous "+sortedMonths.length+"-Month Cost for Organizations with 100% Inactive Users: " + formatCurrency(inactiveOrgsTotalCost) + "\\n";
    } else {
      markdown += "* All customer Orgs have at least 1 Active User\\n";
    }

    markdown += "\\n## Costs by Source\\n\\n";

    // Build header row
    var header = "| Source | Org Count";
    _.each(sortedMonths, function(month) {
      header += " | " + month;
    });
    header += " | Total | % of Total | Excluded |\\n";
    markdown += header;

    // Build separator row
    var separator = "|--------|------------";
    _.each(sortedMonths, function(month) {
      separator += "|-------";
    });
    separator += "|--------|------------|--------|\\n";
    markdown += separator;

    // Build data rows
    var sources = [
      {name: "AWS", data: costsBySource.aws},
      {name: "Azure", data: costsBySource.azure},
      {name: "GCP", data: costsBySource.gcp},
      {name: "Oracle", data: costsBySource.oracle},
      {name: "Optima", data: costsBySource.optima},
      {name: "FOCUS", data: costsBySource.focus},
      {name: "Other", data: costsBySource.other}
    ];

    _.each(sources, function(source) {
      var row = "| " + source.name + " | " + source.data.orgs.length;
      _.each(sortedMonths, function(month) {
      var amount = source.data.monthlyAmounts[month] || 0;
      row += " | " + formatCurrency(amount);
      });
      row += " | " + formatCurrency(source.data.cost);
      row += " | " + ((source.data.cost/netTotalCost)*100).toFixed(1) + "%";
      row += " | " + formatCurrency(source.data.cost_excluded) + " |\\n";
      markdown += row;
    });

    // Process each child org
    // Sort organizations by total cost first
    var sortedOrgs = _.sortBy(inclusiveCosts, function(org) {
      return -org.netTotalCost; // Negative for descending order
    });

    markdown += "\\n## Costs by Organization\\n\\n";
    // Build header row
    var childOrgHeader = "| Org Name | Org ID";
    _.each(sortedMonths, function(month) {
      childOrgHeader += " | " + month;
    });
    childOrgHeader += " | Total | % of Total | Excluded |\\n";
    markdown += childOrgHeader;

    // Build separator row
    var childOrgSeparator = "|-----------|----";
    _.each(sortedMonths, function(month) {
      childOrgSeparator += "|-------";
    });
    childOrgSeparator += "|--------|------------|--------|\\n";
    markdown += childOrgSeparator;

    // Build data rows for each org
    _.each(sortedOrgs, function(org) {
      var orgTotal = 0;
      var monthlyTotals = {};
      var monthlyExcludedTotals = {};

      if (org.costs) {
        _.each(org.costs, function(cost) {
          var amount = cost.metrics.cost_nonamortized_unblended_adj;
          var month = cost.timestamp.substring(0,7);
          orgTotal += amount;
          if (!monthlyTotals[month]) {
            monthlyTotals[month] = 0;
          }
          monthlyTotals[month] += amount;
        });
      }

      if (org.costs_excluded) {
        _.each(org.costs_excluded, function(cost) {
          var amount = cost.metrics.cost_nonamortized_unblended_adj;
          var month = cost.timestamp.substring(0,7);
          if (!monthlyExcludedTotals[month]) {
            monthlyExcludedTotals[month] = 0;
          }
          monthlyExcludedTotals[month] += amount;
        });
      }

      if (param_cost_threshold == -1 || orgTotal > param_cost_threshold) {
        var row = "| " + org.org.name + " | " + org.org.id;
        _.each(sortedMonths, function(month) {
          var amount = monthlyTotals[month] || 0;
          row += " | " + formatCurrency(amount);
        });
        row += " | " + formatCurrency(orgTotal);
        row += " | " + ((orgTotal/netTotalCost)*100).toFixed(1) + "%";
        row += " | " + formatCurrency(org.excludedTotalCost) + " |\\n";
        markdown += row;
      }
    });

    markdown += "\\n";

    markdown += "\\n\\n\\n\\n## Organization Details\\n\\n";

    _.each(sortedOrgs, function(org) {
      var orgTotal = 0;
      if (org.costs) {
        orgTotal = _.reduce(org.costs, function(sum, cost) { return sum + cost.metrics.cost_nonamortized_unblended_adj }, 0);
      }

      if (param_cost_threshold == -1 || orgTotal > param_cost_threshold) {
        markdown += "\\n\\n### " + org.org.name + " (" + org.org.id + ")\\n\\n";

        // Initialize cost tracking for this org
        var orgCosts = {
        aws: {cost: 0, monthlyAmounts: {}, cost_excluded: 0, monthlyAmounts_excluded: {}},
        azure: {cost: 0, monthlyAmounts: {}, cost_excluded: 0, monthlyAmounts_excluded: {}},
        gcp: {cost: 0, monthlyAmounts: {}, cost_excluded: 0, monthlyAmounts_excluded: {}},
        oracle: {cost: 0, monthlyAmounts: {}, cost_excluded: 0, monthlyAmounts_excluded: {}},
        optima: {cost: 0, monthlyAmounts: {}, cost_excluded: 0, monthlyAmounts_excluded: {}},
        focus: {cost: 0, monthlyAmounts: {}, cost_excluded: 0, monthlyAmounts_excluded: {}},
        other: {cost: 0, monthlyAmounts: {}, cost_excluded: 0, monthlyAmounts_excluded: {}}
        };

        // Calculate costs for this org
        if (org.costs) {
          _.each(org.costs, function(cost) {
            var amount = cost.metrics.cost_nonamortized_unblended_adj;
            var month = cost.timestamp.substring(0,7);
            var source = cost.dimensions.bill_source;

            var targetSource;
            if (/.*aws.*/.test(source)) targetSource = orgCosts.aws;
            else if (/.*azure.*/.test(source)) targetSource = orgCosts.azure;
            else if (/.*google|gcp.*/.test(source)) targetSource = orgCosts.gcp;
            else if (/.*cbi-oi-oracle.*/.test(source)) targetSource = orgCosts.oracle;
            else if (/.*cbi-oi-optima.*/.test(source)) targetSource = orgCosts.optima;
            else if (/.*cbi-oi-focus.*/.test(source)) targetSource = orgCosts.focus;
            else targetSource = orgCosts.other;

            targetSource.cost += amount;
            if (!targetSource.monthlyAmounts[month]) {
            targetSource.monthlyAmounts[month] = 0;
            }
            targetSource.monthlyAmounts[month] += amount;
          });
        }

        if (org.costs_excluded) {
          _.each(org.costs_excluded, function(cost) {
            var amount = cost.metrics.cost_nonamortized_unblended_adj;
            var month = cost.timestamp.substring(0,7);
            var source = cost.dimensions.bill_source;

            var targetSource;
            if (/.*aws.*/.test(source)) targetSource = orgCosts.aws;
            else if (/.*azure.*/.test(source)) targetSource = orgCosts.azure;
            else if (/.*google|gcp.*/.test(source)) targetSource = orgCosts.gcp;
            else if (/.*cbi-oi-oracle.*/.test(source)) targetSource = orgCosts.oracle;
            else if (/.*cbi-oi-optima.*/.test(source)) targetSource = orgCosts.optima;
            else if (/.*cbi-oi-focus.*/.test(source)) targetSource = orgCosts.focus;
            else targetSource = orgCosts.other;

            targetSource.cost_excluded += amount;
            if (!targetSource.monthlyAmounts_excluded[month]) {
            targetSource.monthlyAmounts_excluded[month] = 0;
            }
            targetSource.monthlyAmounts_excluded[month] += amount;
          });
        }

        markdown += "* Previous "+sortedMonths.length+"-Month Cost: " + formatCurrency(orgTotal) + "\\n";
        markdown += "* Excluded Cost: " + formatCurrency(org.excludedTotalCost) + "\\n";
        if (org.org.msp_parent == true) {
          markdown += "* **These are costs not allocated to any child organizations\\n";
          markdown += "* **This is the MSP Parent Organization, user activity is not reported**\\n";
        } else {
          markdown += "* Active Users: " + org.activeUsers + " (" + (org.totalUsers > 0 ? ((org.activeUsers/org.totalUsers)*100).toFixed(1) : 0) + "%)\\n";
          markdown += "* Inactive Users: " + (org.totalUsers-org.activeUsers) + " (" + (org.totalUsers > 0 ? (((org.totalUsers-org.activeUsers)/org.totalUsers)*100).toFixed(1) : 0) + "%)\\n";
          markdown += "* Excluded Users: " + org.excludedUsers + "\\n";
          if (org.activeUsers === 0 && org.totalUsers > 0) {
            markdown += "* **This customer organization has 100% inactive users**\\n";
          }
        }

        // Build table header
        var header = "\\n| Source";
        _.each(sortedMonths, function(month) {
        header += " | " + month;
        });
        header += " | Total | % of Org Total | Excluded |\\n";
        markdown += header;

        // Build separator
        var separator = "|--------";
        _.each(sortedMonths, function(month) {
        separator += "|--------";
        });
        separator += "|--------|-------------|--------|\\n";
        markdown += separator;

        // Add rows for each source
        var sources = [
        {name: "AWS", data: orgCosts.aws},
        {name: "Azure", data: orgCosts.azure},
        {name: "GCP", data: orgCosts.gcp},
        {name: "Oracle", data: orgCosts.oracle},
        {name: "Optima", data: orgCosts.optima},
        {name: "FOCUS", data: orgCosts.focus},
        {name: "Other", data: orgCosts.other}
        ];

        _.each(sources, function(source) {
        if (source.data.cost > 0) {
          var row = "| " + source.name;
          _.each(sortedMonths, function(month) {
          var amount = source.data.monthlyAmounts[month] || 0;
          row += " | " + formatCurrency(amount);
          });
          row += " | " + formatCurrency(source.data.cost);
          row += " | " + ((source.data.cost/orgTotal)*100).toFixed(1) + "%";
          row += " | " + formatCurrency(source.data.cost_excluded) + " |\\n";
          markdown += row;
        }
        });

        // Add total row
        markdown += "| **Total**";
        _.each(sortedMonths, function(month) {
        var monthTotal = 0;
        _.each(sources, function(source) {
          monthTotal += source.data.monthlyAmounts[month] || 0;
        });
        markdown += " | " + formatCurrency(monthTotal);
        });
        markdown += " | " + formatCurrency(orgTotal);
        markdown += " | 100%";
        markdown += " | " + formatCurrency(org.excludedTotalCost) + " |\\n";
      }
    });

    var orgData = [];
    _.each(inclusiveCosts, function(org) {
      orgData.push({
        org: org.org,
        costs: {
          start_at: ds_dates.start_at,
          end_at: ds_dates.end_at,
          netTotalCost: org.netTotalCost,
          excludedTotalCost: org.excludedTotalCost,
          percentTotalCost: _.isNumber(org.netTotalCost) ? ((org.netTotalCost / netTotalCost) * 100).toFixed(1) : null,
        },
        users: {
          activeUsers: org.activeUsers,
          inactiveUsers: _.isNumber(org.totalUsers) && _.isNumber(org.activeUsers) ? org.totalUsers - org.activeUsers : null,
          excludedUsers: org.excludedUsers,
          inactivePercentUsers: _.isNumber(org.totalUsers) && _.isNumber(org.activeUsers) ? (((org.totalUsers - org.activeUsers) / org.totalUsers) * 100).toFixed(1) : null,
        },
      });
    });

    result = {
      report: markdown,
      netTotalCost: netTotalCost,
      excludedTotalCost: excludedTotalCost,
      data: orgData
    }
  EOS
end

# Policy
policy "pol_group_sync" do
  validate $ds_report do
    summary_template "MSP Organizations Usage Report"
    detail_template <<-EOS
{{ data.report }}

---

EOS
    check eq(data, "")
    export "data" do
      field "orgId" do
        label "Flexera Org ID"
        path "org.id"
      end
      field "orgName" do
        label "Flexera Org Name"
        path "org.name"
      end
      field "costTotal" do
        label "Cost Total"
        path "costs.netTotalCost"
      end
      field "excludedCostTotal" do
        label "Excluded Cost Total"
        path "costs.excludedTotalCost"
      end
      field "costPercentTotalCost" do
        label "Percent of Total Cost"
        path "costs.percentTotalCost"
      end
      field "costStartAt" do
        label "Cost Start Date"
        path "costs.start_at"
      end
      field "costEndAt" do
        label "Cost End Date"
        path "costs.end_at"
      end
      field "usersActive" do
        label "Active Users"
        path "users.activeUsers"
      end
      field "usersInactive" do
        label "Inactive Users"
        path "users.inactiveUsers"
      end
      field "usersExcluded" do
        label "Excluded Users"
        path "users.excludedUsers"
      end
      field "usersInactivePercent" do
        label "Percent of Inactive Users"
        path "users.inactivePercentUsers"
      end
    end
    escalate $esc_email
  end

  validate $ds_identify_errors do
    summary_template "MSP Organizations Errors identified"
    detail_template <<-EOS
{{ range data }}{{ . }}\n\n{{ end }}
EOS
    check eq(size(data), 0)
  end
end

###############################################################################
# Escalations
###############################################################################

escalation "esc_email" do
  automatic true
  label "Send Email"
  description "Send incident email"
  email $param_email
end

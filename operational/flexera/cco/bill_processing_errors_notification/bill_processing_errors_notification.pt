name "Cloud Bill Processing Error Notification"
rs_pt_ver 20180301
type "policy"
short_description "Reports on any Flexera Cloud Cost Optimization bill connections that are in an error state. See the [README](https://github.com/flexera-public/policy_templates/tree/master/operational/flexera/cco/bill_processing_errors_notification/) and [docs.flexera.com/flexera/EN/Automation](https://docs.flexera.com/flexera/EN/Automation/AutomationGS.htm) to learn more."
long_description ""
category "Operational"
severity "high"
default_frequency "daily"
info(
  version: "2.5.3",
  provider: "Flexera",
  service: "Cloud Cost Optimization",
  policy_set: "Cloud Cost Optimization",
  hide_skip_approvals: "true"
)

###############################################################################
# Parameters
###############################################################################

parameter "param_email" do
  type "list"
  category "Policy Settings"
  label "Email Addresses"
  description "A list of email addresses to notify if bill processing errors are found."
  default []
end

parameter "param_processing_limit" do
  type "number"
  category "Policy Settings"
  label "Processing Time (Hours)"
  description "Amount of time in hours to consider a Bill Connection in an error state if it has failed to complete processing of a bill."
  default 24
end

parameter "param_ignore_list" do
  type "list"
  category "Policy Settings"
  label "Bill Connection Ignore List"
  description "A list of Bill Connection IDs to never check for errors or report on. Leave blank to check all Bill Connections."
  default []
end

parameter "param_report_connection_with_zero_bills" do
  type "string"
  category "Policy Settings"
  label "Report Connection With Zero Bills"
  description "Whether or not to report any connections that have no available bills to process since this can sometimes indicate an error. See the README for more details"
  allowed_values "Yes", "No"
  default "No"
end

###############################################################################
# Authentication
###############################################################################

credentials "auth_flexera" do
  schemes "oauth2"
  label "Flexera"
  description "Select Flexera One OAuth2 credentials"
  tags "provider=flexera"
end

###############################################################################
# Datasources & Scripts
###############################################################################

# Get applied policy metadata for use later
datasource "ds_applied_policy" do
  request do
    auth $auth_flexera
    host rs_governance_host
    path join(["/api/governance/projects/", rs_project_id, "/applied_policies/", policy_id])
    header "Api-Version", "1.0"
  end
end

# Get region-specific Flexera API endpoints
datasource "ds_flexera_api_hosts" do
  run_script $js_flexera_api_hosts, rs_optima_host
end

script "js_flexera_api_hosts", type: "javascript" do
  parameters "rs_optima_host"
  result "result"
  code <<-EOS
  host_table = {
    "api.optima.flexeraeng.com": {
      flexera: "api.flexera.com",
      fsm: "api.fsm.flexeraeng.com"
    },
    "api.optima-eu.flexeraeng.com": {
      flexera: "api.flexera.eu",
      fsm: "api.fsm-eu.flexeraeng.com"
    },
    "api.optima-apac.flexeraeng.com": {
      flexera: "api.flexera.au",
      fsm: "api.fsm-apac.flexeraeng.com"
    }
  }

  result = host_table[rs_optima_host]
EOS
end

datasource "ds_bill_connections" do
  request do
    auth $auth_flexera
    host val($ds_flexera_api_hosts, "flexera")
    path join(["/finops-onboarding/v1/orgs/", rs_org_id, "/bill-connects"])
    header "User-Agent", "RS Policies"
  end
  result do
    encoding "json"
    collect jmes_path(response, "values[*]") do
      field "id", jmes_path(col_item, "id")
      field "createdAt", jmes_path(col_item, "createdAt")
      field "updatedAt", jmes_path(col_item, "updatedAt")
      field "cbi", jmes_path(col_item, "cbi")
      # Sample contents of "cbi" key if it exists:
      # "billIdentifier": "test",
      # "integrationId": "cbi-oi-optima",
      # "name": "private_cloud_bill",
      # "params": {
      #   "finopsDisplayName": "Alibaba International",
      #   "vendorName": "Alibaba"
      # }
      field "cbiAzureMca", jmes_path(col_item, "cbiAzureMca")
      # Sample contents of "cbiAzureMca" key if it exists:
      # "billingAccountId": "1234abcd-12ab-1234-abcd-1234abcd5678:1234abcd-12ab-1234-abcd-1234abcd5678_2019-05-31",
      # "clientId": "1234abcd-12ab-1234-abcd-1234abcd5678",
      # "startBillingPeriod": "202407",
      # "tenantId": "1234abcd-12ab-1234-abcd-1234abcd5678"
      field "aws", jmes_path(col_item, "aws")
      # Sample contents of "aws" key if it exists:
      # "billAccountId": "20194320903",
      # "bucketName": "aws-bucket-name",
      # "bucketPath": "/bucket/path",
      # "bucketRegion": "aws-region",
      # "iamRole": {
      #   "stsExternalId": "abcdef1234567890",
      #   "stsRoleArn": "arn:aws:iam::123456789012:role/bill_access_role",
      #   "stsRoleSessionName": "flexera-finops"
      # },
      # "kind": "finops:bill-connect-aws-iam-role"
      field "azureEa", jmes_path(col_item, "azureEa")
      # Sample contents of "azureEa" key if it exists:
      # "enrollmentNumber": "ea-23213323"
      field "azureEaManagement", jmes_path(col_item, "azureEaManagement")
      # Sample contents of "azureEaManagement" key if it exists:
      # "billingAccountId": "12345678",
      # "clientId": "1234abcd-12ab-1234-abcd-1234abcd5678",
      # "tenantId": "1234abcd-12ab-1234-abcd-1234abcd5678",
      # "exportDetails": {
      #   "actualCostExportURL": "https://bucket12345678.blob.core.windows.net/flexera_actual/FlexeraExport_Daily_Actual",
      #   "amortizedCostExportURL": "https://bucket12345678.blob.core.windows.net/flexera_amort/FlexeraExport_Daily_Amortized",
      #   "enableOOBExports": false
      # },
      # "scopeDetails": {
      #   "scopeType": "Billing Account"
      # }
      field "gcp", jmes_path(col_item, "gcp")
      # Sample contents of "gcp" key if it exists:
      # "bigQueryDataset": "someDataset",
      # "billingAccountId": "963d605a-fac2-4263-b90e-bee184d0e045",
      # "projectId": "flexera.com:resat-cloud"
    end
  end
end

datasource "ds_bill_connections_valid" do
  request do
    auth $auth_flexera
    host val($ds_flexera_api_hosts, "flexera")
    path join(["/finops-onboarding/v1/orgs/", rs_org_id, "/bill-connects/validations"])
    header "User-Agent", "RS Policies"
  end
  result do
    encoding "json"
    collect jmes_path(response, "values[*]") do
      field "billId", jmes_path(col_item, "billId")
      field "error", jmes_path(col_item, "error")
      field "kind", jmes_path(col_item, "kind")
      field "valid", jmes_path(col_item, "valid")
    end
  end
end

datasource "ds_bill_status_errors" do
  request do
    auth $auth_flexera
    host rs_optima_host
    path join(["/api/status/orgs/", rs_org_id, "/bill-status-errors"])
    header "Api-Version", "1.0"
    header "User-Agent", "RS Policies"
  end
  # Response format for reference. Each bill connection has its own key.
  # {
  #   "cbi-bill-connection-id": {
  #       "count": 0,
  #       "errors": [],
  #       "supported": true
  #   }
  # }
end

datasource "ds_bill_import_history" do
  iterate $ds_bill_connections
  request do
    auth $auth_flexera
    host rs_optima_host
    path join(["/api/status/orgs/", rs_org_id, "/bill_id/", val(iter_item, "id"), "/import-history"])
    header "Api-Version", "1.0"
    header "User-Agent", "RS Policies"
  end
  result do
    encoding "json"
    collect jmes_path(response, "[*]") do
      field "billing_period", jmes_path(col_item, "billing_period")
      field "downloaded_at", jmes_path(col_item, "downloaded_at")
      field "status", jmes_path(col_item, "status")
      field "source_id", jmes_path(col_item, "source_id")
      field "id", val(iter_item, "id")
    end
  end
end

datasource "ds_bill_connections_combined" do
  run_script $js_bill_connections_combined, $ds_bill_connections, $ds_bill_connections_valid, $ds_bill_status_errors, $ds_bill_import_history, $ds_applied_policy, $param_processing_limit, $param_report_connection_with_zero_bills
end

script "js_bill_connections_combined", type: "javascript" do
  parameters "ds_bill_connections", "ds_bill_connections_valid", "ds_bill_status_errors", "ds_bill_import_history", "ds_applied_policy", "param_processing_limit", "param_report_connection_with_zero_bills"
  result "result"
  code <<-'EOS'
  today = new Date()

  connection_metadata = _.groupBy(ds_bill_connections, "id")
  import_history = _.groupBy(ds_bill_import_history, "id")

  result = _.map(ds_bill_connections_valid, function(item) {
    id = item["billId"]
    created_at = ""
    updated_at = ""
    vendor_name = ""
    bill_account = ""
    type = ""
    active = false

    if (connection_metadata[id] && connection_metadata[id][0]) {
      metadata = connection_metadata[id][0]
      created_at = new Date(metadata["createdAt"]).toISOString()
      updated_at = new Date(metadata["updatedAt"]).toISOString()
      active = true

      if (metadata["cbi"]) {
        vendor_name = metadata["cbi"]["params"]["vendorName"]
        type = "CBI"
      }

      if (metadata["cbiAzureMca"]) {
        vendor_name = "Azure"
        bill_account = metadata["cbiAzureMca"]["billingAccountId"]
        type = "Azure MCA"
      }

      if (metadata["aws"]) {
        vendor_name = "AWS"
        bill_account = metadata["aws"]["billAccountId"]
        type = "AWS"
      }

      if (metadata["azureEa"]) {
        vendor_name = "Azure"
        bill_account = metadata["azureEa"]["enrollmentNumber"]
        type = "Azure EA"
      }

      if (metadata["azureEaManagement"]) {
        vendor_name = "Azure"
        bill_account = metadata["azureEaManagement"]["billingAccountId"]
        type = "Azure EA Management"
      }

      if (metadata["gcp"]) {
        vendor_name = "GCP"
        bill_account = metadata["gcp"]["billingAccountId"]
        type = "GCP"
      }
    }

    errors = []

    if (item["error"] != null && item["error"] != undefined) { errors.push(item["error"]) }

    if (ds_bill_status_errors[id] != undefined) {
      _.map(ds_bill_status_errors[id]["errors"], function(error) {
        errors.push(error.error_message)
      })
    }

    if (import_history[id] != undefined) {
      completed = _.filter(import_history[id], function(item) { return item["status"] == "completed" })

      if (completed.length > 0) {
        most_recent = _.last(_.sortBy(completed, "downloaded_at"))
        downloaded_at = new Date(most_recent["downloaded_at"])
        hours_diff = (today - downloaded_at) / 1000 / 60 / 60

        if (hours_diff > param_processing_limit) {
          errors.push("Bill: " + id + " has not processed a bill in over " + param_processing_limit + " hours")
        }
      } else {
        errors.push("Bill: " + id + " has not processed a bill in over " + param_processing_limit + " hours")
      }
    } else if (param_report_connection_with_zero_bills == "Yes") {
        errors.push("Bill: " + id + " has no bills. Please verify if the connection is correctly configured.")
    }

    errors = errors.sort()

    return {
      id: id,
      vendor_name: vendor_name,
      bill_account: bill_account,
      created_at: created_at,
      updated_at: updated_at,
      type: type,
      valid: item["valid"],
      errors: errors.join(" | "),
      status_errors: ds_bill_status_errors[id],
      import_history: import_history[id],
      policy_name: ds_applied_policy["name"],
      active: active
    }
  })
EOS
end

datasource "ds_bad_bill_connections" do
  run_script $js_bad_bill_connections, $ds_bill_connections_combined, $param_ignore_list
end

script "js_bad_bill_connections", type: "javascript" do
  parameters "ds_bill_connections_combined", "param_ignore_list"
  result "result"
  code <<-'EOS'
  result = _.reject(ds_bill_connections_combined, function(item) {
    return (item["valid"] && item["errors"] == "") || !item["active"] || _.contains(param_ignore_list, item['id']) || _.contains(param_ignore_list, item['bill_account'])
  })
    
  result = _.sortBy(result, 'created_at')
EOS
end

###############################################################################
# Policy
###############################################################################

policy "pol_bill_processing_errors" do
  validate_each $ds_bad_bill_connections do
    summary_template "{{ with index data 0 }}{{ .policy_name }}{{ end }}: {{ len data }} Failed Bill Connects"
    check eq(val(item, "id"), "")
    escalate $esc_email
    hash_exclude "created_at", "updated_at"
    export do
      resource_level true
      field "id" do
        label "Connection ID"
      end
      field "vendor_name" do
        label "Cloud Vendor"
      end
      field "bill_account" do
        label "Billing Account"
      end
      field "type" do
        label "Connection Type"
      end
      field "created_at" do
        label "Created At"
      end
      field "updated_at" do
        label "Updated At"
      end
      field "valid" do
        label "Credential Valid"
      end
      field "errors" do
        label "Errors"
      end
    end
  end
end

###############################################################################
# Escalations
###############################################################################

escalation "esc_email" do
  automatic true
  label "Send Email"
  description "Send incident email"
  email $param_email
end

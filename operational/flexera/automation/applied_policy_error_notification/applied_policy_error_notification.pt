name "Applied Policy Template Errors"
rs_pt_ver 20180301
type "policy"
short_description "Reports any applied policy templates that are in an error state. See the [README](https://github.com/flexera-public/policy_templates/tree/master/operational/flexera/automation/applied_policy_error_notification/) and [docs.flexera.com/flexera/EN/Automation](https://docs.flexera.com/flexera/EN/Automation/AutomationGS.htm) to learn more."
long_description ""
doc_link "https://github.com/flexera-public/policy_templates/tree/master/operational/flexera/automation/applied_policy_error_notification/"
category "Operational"
severity "high"
default_frequency "hourly"
info(
  version: "4.0.4",
  provider: "Flexera",
  service: "Automation",
  policy_set: "Automation",
  hide_skip_approvals: "true"
)

###############################################################################
# Parameters
###############################################################################

parameter "param_email" do
  type "list"
  category "Policy Settings"
  label "Email Addresses"
  description "A list of email addresses to notify."
  default []
end

parameter "param_ignore_list" do
  type "list"
  category "Filters"
  label "Applied Policy Template Ignore List"
  description "A list of applied policy template names and IDs to ignore and never include in the results. Leave blank to report on all applied policy templates in an error state."
  default []
end

parameter "param_child_templates" do
  type "string"
  category "Policy Settings"
  label "Report Child Policy Errors"
  description "Whether or not to report when the child policies of meta parent policies are in error. If 'Yes' is selected and errors are found in child policies, these will be raised as a separate incident/email."
  allowed_values "Yes", "No"
  default "No"
end

###############################################################################
# Authentication
###############################################################################

credentials "auth_flexera" do
  schemes "oauth2"
  label "Flexera"
  description "Select Flexera One OAuth2 credentials"
  tags "provider=flexera"
end

###############################################################################
# Datasources & Scripts
###############################################################################

# Get region-specific Flexera API endpoints
datasource "ds_flexera_api_hosts" do
  run_script $js_flexera_api_hosts, rs_optima_host
end

script "js_flexera_api_hosts", type: "javascript" do
  parameters "rs_optima_host"
  result "result"
  code <<-EOS
  host_table = {
    "api.optima.flexeraeng.com": {
	    api: "api.flexera.com",
      flexera: "api.flexera.com",
      fsm: "api.fsm.flexeraeng.com",
      grs: "grs-front.iam-us-east-1.flexeraeng.com",
      ui: "app.flexera.com",
      tld: "flexera.com"
    },
    "api.optima-eu.flexeraeng.com": {
	    api: "api.flexera.eu",
      flexera: "api.flexera.eu",
      fsm: "api.fsm-eu.flexeraeng.com",
      grs: "grs-front.eu-central-1.iam-eu.flexeraeng.com",
      ui: "app.flexera.eu",
      tld: "flexera.eu"
    },
    "api.optima-apac.flexeraeng.com": {
	    api: "api.flexera.au",
      flexera: "api.flexera.au",
      fsm: "api.fsm-apac.flexeraeng.com",
      grs: "grs-front.ap-southeast-2.iam-apac.flexeraeng.com",
      ui: "app.flexera.au",
      tld: "flexera.au"
    }
  }

  result = host_table[rs_optima_host]
EOS
end

# Get applied policy metadata for use later
datasource "ds_applied_policy" do
  request do
    auth $auth_flexera
    host val($ds_flexera_api_hosts, "flexera")
    path join(["/policy/v1/orgs/", rs_org_id, "/projects/", rs_project_id, "/applied-policies", switch(policy_id, join(["/", policy_id]), "")])
  end
end

datasource "ds_applied_policies" do
  request do
    auth $auth_flexera
    host val($ds_flexera_api_hosts, "flexera")
    path join(["/policy/v1/orgs/", rs_org_id, "/projects/", rs_project_id, "/applied-policies"])
    query "filter", 'metaParentPolicyId eq "null"'
  end
  result do
    collect jmes_path(response, "values[*]") do
      field "category", jmes_path(col_item, "category")
      field "created_at", jmes_path(col_item, "createdAt")
      field "created_by", jmes_path(col_item, "createdBy.email")
      field "credentials", jmes_path(col_item, "credentials")
      field "description", jmes_path(col_item, "description")
      field "doc_link", jmes_path(col_item, "docLink")
      field "dry_run", jmes_path(col_item, "dryRun")
      field "error", jmes_path(col_item, "error")
      field "errored_at", jmes_path(col_item, "erroredAt")
      field "frequency", get(1, split(jmes_path(col_item, "schedule.rrule"), '='))
      field "id", jmes_path(col_item, "id")
      field "incident_aggregate_id", jmes_path(col_item, "incidentAggregateId")
      field "info", jmes_path(col_item, "info")
      field "kind", jmes_path(col_item, "kind")
      field "log_level", jmes_path(col_item, "logLevel")
      field "parent", jmes_path(col_item, "parent.ref")
      field "name", jmes_path(col_item, "name")
      field "options", jmes_path(col_item, "options")
      field "policy_aggregate_id", jmes_path(col_item, "policyAggregateId")
      field "policy_template", jmes_path(col_item, "policyTemplate")
      field "published_template", jmes_path(col_item, "publishedTemplate")
      field "scope", jmes_path(col_item, "scope")
      field "severity", jmes_path(col_item, "severity")
      field "skip_approvals", jmes_path(col_item, "skipApprovals")
      field "status", jmes_path(col_item, "status")
      field "updated_at", jmes_path(col_item, "updatedAt")
      field "href", join(["/policy/v1/orgs/", rs_org_id, "/projects/", rs_project_id, "/applied-policies/", jmes_path(col_item, "id")])
    end
  end
end

datasource "ds_bad_applied_policies" do
  run_script $js_bad_applied_policies, $ds_applied_policies, $ds_applied_policy, $param_ignore_list, f1_app_host, rs_org_id, rs_project_id
end

script "js_bad_applied_policies", type: "javascript" do
  parameters "ds_applied_policies", "ds_applied_policy", "param_ignore_list", "f1_app_host", "rs_org_id", "rs_project_id"
  result "result"
  code <<-'EOS'
  bad_policies = _.filter(ds_applied_policies, function(policy) {
    return policy['status'] == "error" && !(_.contains(param_ignore_list, policy['id']) || _.contains(param_ignore_list, policy['name']))
  })

  result = _.map(bad_policies, function(policy) {
    policy_url = [ "https://", f1_app_host, "/orgs/", rs_org_id, "/automation/applied-policies/projects/", rs_project_id, "?policyId=", policy['id'] ].join('')

    return {
      id: policy['id'],
      name: [ policy['name'], "||", policy_url ].join(''),
      error: policy['error'],
      category: policy['category'],
      frequency: policy['frequency'],
      severity: policy['severity'],
      skip_approvals: policy['skip_approvals'],
      scope: policy['scope'],
      created_by: policy['created_by'],
      created_at: policy['created_at'],
      updated_at: policy['updated_at'],
      errored_at: policy['errored_at'],
      policy_name: ds_applied_policy['name']
    }
  })

  result = _.sortBy(result, "name")
EOS
end

# Only gather child policy information if the user opted to report child policy errors
datasource "ds_child_boolean_logic" do
  run_script $js_child_boolean_logic, $param_child_templates
end

script "js_child_boolean_logic", type: "javascript" do
  parameters "param_child_templates"
  result "result"
  code <<-'EOS'
  result = []
  if (param_child_templates == "Yes") { result = [1] }
EOS
end

datasource "ds_child_applied_policies" do
  iterate $ds_child_boolean_logic
  request do
    auth $auth_flexera
    host val($ds_flexera_api_hosts, "flexera")
    path join(["/policy/v1/orgs/", rs_org_id, "/projects/", rs_project_id, "/applied-policies"])
  end
  result do
    collect jmes_path(response, "items[*]") do
      field "category", jmes_path(col_item, "category")
      field "created_at", jmes_path(col_item, "createdAt")
      field "created_by", jmes_path(col_item, "createdBy.email")
      field "credentials", jmes_path(col_item, "credentials")
      field "description", jmes_path(col_item, "description")
      field "doc_link", jmes_path(col_item, "docLink")
      field "dry_run", jmes_path(col_item, "dryRun")
      field "error", jmes_path(col_item, "error")
      field "errored_at", jmes_path(col_item, "erroredAt")
      field "frequency", get(1, split(jmes_path(col_item, "schedule.rrule"), '='))
      field "id", jmes_path(col_item, "id")
      field "incident_aggregate_id", jmes_path(col_item, "incidentAggregateId")
      field "info", jmes_path(col_item, "info")
      field "kind", jmes_path(col_item, "kind")
      field "log_level", jmes_path(col_item, "logLevel")
      field "parent", jmes_path(col_item, "parent.ref")
      field "name", jmes_path(col_item, "name")
      field "options", jmes_path(col_item, "options")
      field "policy_aggregate_id", jmes_path(col_item, "policyAggregateId")
      field "policy_template", jmes_path(col_item, "policyTemplate")
      field "published_template", jmes_path(col_item, "publishedTemplate")
      field "scope", jmes_path(col_item, "scope")
      field "severity", jmes_path(col_item, "severity")
      field "skip_approvals", jmes_path(col_item, "skipApprovals")
      field "status", jmes_path(col_item, "status")
      field "updated_at", jmes_path(col_item, "updatedAt")
      field "href", join(["/policy/v1/orgs/", rs_org_id, "/projects/", rs_project_id, "/applied-policies/", jmes_path(col_item, "id")])
    end
  end
end

datasource "ds_bad_child_applied_policies" do
  run_script $js_bad_child_applied_policies, $ds_child_applied_policies, $ds_applied_policy, $param_ignore_list, f1_app_host, rs_org_id, rs_project_id
end

script "js_bad_child_applied_policies", type: "javascript" do
  parameters "ds_child_applied_policies", "ds_applied_policy", "param_ignore_list", "f1_app_host", "rs_org_id", "rs_project_id"
  result "result"
  code <<-'EOS'
  policy_table = {}
  _.each(ds_child_applied_policies, function(policy) { policy_table[policy['id']] = policy })

  child_policies = _.filter(ds_child_applied_policies, function(policy) {
    return typeof(policy["parent"]) == 'string' && policy["parent"] != ''
  })

  bad_policies = _.filter(ds_child_applied_policies, function(policy) {
    return policy['status'] == "error" && !(_.contains(param_ignore_list, policy['id']) || _.contains(param_ignore_list, policy['name']))
  })

  result = _.map(bad_policies, function(policy) {
    meta_parent_policy_id = policy["parent"] ? policy["parent"].split(':')[6] : null
    policy_url = [ "https://", f1_app_host, "/orgs/", rs_org_id, "/automation/applied-policies/projects/", rs_project_id, "?policyId=", policy['id'] ].join('')
    parent_url = [ "https://", f1_app_host, "/orgs/", rs_org_id, "/automation/applied-policies/projects/", rs_project_id, "?policyId=", meta_parent_policy_id ].join('')

    return {
      id: policy['id'],
      name: [ policy['name'], "||", policy_url ].join(''),
      error: policy['error'],
      category: policy['category'],
      frequency: policy['frequency'],
      severity: policy['severity'],
      skip_approvals: policy['skip_approvals'],
      scope: policy['scope'],
      created_by: policy['created_by'],
      created_at: policy['created_at'],
      updated_at: policy['updated_at'],
      errored_at: policy['errored_at'],
      policy_name: ds_applied_policy['name'],
      parent_id: meta_parent_policy_id,
      parent_name: [ policy_table[meta_parent_policy_id]['name'], "||", parent_url ].join('')
    }
  })

  result = _.sortBy(result, "name")
  result = _.sortBy(result, "parent_name")
EOS
end

###############################################################################
# Policy
###############################################################################

policy "pol_bad_applied_policies" do
  validate_each $ds_bad_applied_policies do
    summary_template "{{ with index data 0 }}{{ .policy_name }}{{ end }}: {{ len data }} Applied Policies With Errors Found"
    check eq(val(item, "id"), "")
    escalate $esc_email
    hash_exclude "updated_at", "errored_at"
    export do
      resource_level true
      field "id" do
        label "ID"
      end
      field "name" do
        label "Name"
        format "link-external"
      end
      field "error" do
        label "Error Message"
      end
      field "errored_at" do
        label "Errored At"
      end
      field "scope" do
        label "Scope"
      end
      field "category" do
        label "Category"
      end
      field "frequency" do
        label "Frequency"
      end
      field "severity" do
        label "Severity"
      end
      field "skip_approvals" do
        label "Skip Approvals"
      end
      field "created_by" do
        label "Created By"
      end
      field "created_at" do
        label "Created At"
      end
      field "updated_at" do
        label "Updated At"
      end
    end
  end
  validate_each $ds_bad_child_applied_policies do
    summary_template "{{ with index data 0 }}{{ .policy_name }}{{ end }}: {{ len data }} Child Applied Policies With Errors Found"
    check eq(val(item, "id"), "")
    escalate $esc_email
    hash_exclude "updated_at", "errored_at"
    export do
      resource_level true
      field "parent_id" do
        label "Parent ID"
      end
      field "parent_name" do
        label "Parent Name"
        format "link-external"
      end
      field "id" do
        label "Child ID"
      end
      field "name" do
        label "Child Name"
        format "link-external"
      end
      field "error" do
        label "Error Message"
      end
      field "errored_at" do
        label "Errored At"
      end
      field "scope" do
        label "Scope"
      end
      field "category" do
        label "Category"
      end
      field "frequency" do
        label "Frequency"
      end
      field "severity" do
        label "Severity"
      end
      field "skip_approvals" do
        label "Skip Approvals"
      end
      field "created_by" do
        label "Created By"
      end
      field "created_at" do
        label "Created At"
      end
      field "updated_at" do
        label "Updated At"
      end
    end
  end
end

###############################################################################
# Escalations
###############################################################################

escalation "esc_email" do
  automatic true
  label "Send Email"
  description "Send incident email"
  email $param_email
end
